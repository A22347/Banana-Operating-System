
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 85 02 00       	call   c0028608 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b2 91 02 c0       	mov    ebx,0xc00291b2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c0 91 02 c0    	cmp    ebx,0xc00291c0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000049:	3d 18 d9 02 c0       	cmp    eax,0xc002d918
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 d9 02 c0       	push   0xc002d918
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 d9 02 c0       	mov    eax,0xc002d918
c0000075:	2d 18 d9 02 c0       	sub    eax,0xc002d918
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 d9 02 c0       	push   0xc002d918
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df48,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c8 91 02 c0       	mov    ebx,0xc00291c8
c00000bb:	81 eb c4 91 02 c0    	sub    ebx,0xc00291c4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c4 91 02 c0       	mov    esi,0xc00291c4
c00000ca:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c df 02 c0       	mov    ds:0xc002df4c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c df 02 c0       	mov    eax,ds:0xc002df4c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 d9 02 c0       	push   0xc002d918
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 df 02 c0 01 	mov    BYTE PTR ds:0xc002df48,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 df 02 c0       	push   0xc002df50
c000012c:	68 18 d9 02 c0       	push   0xc002d918
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 8b d5 01 00       	call   c001d926 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 f1 28 01 00       	call   c0012ca4 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 69 d5 01 00       	call   c001d926 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 bc d9 01 00       	call   c001dd98 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 69 df 01 00       	call   c001e34e <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e3 02 c0 	lgdtd  ds:0xc002e390
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 ce 45 01 00       	call   c0014ba7 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 df 02 c0       	mov    ds:0xc002df68,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 df 02 c0    	mov    DWORD PTR ds:0xc002df68,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df68
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6e20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6e20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6e20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df80
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd207c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd207c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 df 02 c0    	mov    DWORD PTR ds:0xc002df80,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfbc
c0000e60:	c7 42 0c b4 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dfb4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 df 02 c0 02 	test   BYTE PTR ds:0xc002df80,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df80
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd207c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd207c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 df 02 c0 	lea    edx,[eax*8-0x3ffd204c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfc0
c00011e2:	81 fb b4 df 02 c0    	cmp    ebx,0xc002dfb4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 df 02 c0       	cmp    eax,0xc002dfb4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfb0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc df 02 c0       	mov    ds:0xc002dfbc,eax
c000121e:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001223:	a3 b0 df 02 c0       	mov    ds:0xc002dfb0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001231:	c7 40 0c b4 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dfb4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 df 02 c0       	mov    ds:0xc002dfc0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dfb4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 df 02 c0 	lea    ebp,[edx*4-0x3ffd2088]
c0001282:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 df 02 c0 	lea    ecx,[edx*4-0x3ffd2080]
c000129d:	8b 14 95 80 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2080]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1d4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 df 02 c0 	lea    eax,[eax*8-0x3ffd204c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,ecx
c0001357:	89 0d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,ecx
c000135d:	c7 41 08 b4 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dfb4
c0001364:	c7 41 0c b4 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dfb4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac df 02 c0 	lea    edx,[ecx*8-0x3ffd2054]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac df 02 c0 	lea    edx,[eax*4-0x3ffd2054]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1d4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc df 02 c0    	mov    DWORD PTR ds:0xc002dfbc,edi
c000142a:	89 3d c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,edi
c0001430:	c7 47 08 b4 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dfb4
c0001437:	c7 47 0c b4 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dfb4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 df 02 c0    	mov    DWORD PTR ds:0xc002dfb0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 df 02 c0       	mov    edx,0xc002df80
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 df 02 c0       	mov    eax,0xc002df80
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac df 02 c0    	mov    DWORD PTR ds:0xc002dfac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e2 02 c0    	push   DWORD PTR ds:0xc002e2dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df80,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e2 02 c0       	mov    eax,ds:0xc002e2dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac df 02 c0 00 	cmp    DWORD PTR ds:0xc002dfac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd207c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 df 02 c0       	mov    eax,0xc002dfb4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e2 02 c0       	cmp    eax,0xc002e2ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e2 02 c0       	mov    eax,ds:0xc002e2e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 df 02 c0       	mov    eax,0xc002df80
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6d1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 df 02 c0       	mov    eax,ds:0xc002df80
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 df 02 c0       	mov    ds:0xc002df80,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e2 02 c0    	mov    DWORD PTR ds:0xc002e2cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 48 f1 01 00       	jmp    c0020d74 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 79 f1 01 00       	jmp    c0020dbb <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 a0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce360]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 a1 f1 01 00       	jmp    c0020e02 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 28 4a 02 00       	call   c002696c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6c00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6c00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 88 c7 02 c0       	mov    edx,0xc002c788
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 94 02 c0       	mov    edx,0xc002942c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 94 02 c0       	mov    edx,0xc0029410
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1ce0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e3 02 c0    	mov    ax,ds:0xc002e300
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e3 02 c0    	mov    ds:0xc002e300,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 25 38 02 00       	call   c002696c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 94 02 c0       	mov    eax,0xc0029432
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 94 02 c0       	mov    eax,0xc002943b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6c00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 f0 21 02 00       	call   c002696c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 94 02 c0       	mov    edx,0xc0029410
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 93 02 c0       	mov    edx,0xc0029310
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1ce0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ce0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 b7 0b 02 00       	call   c002696c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 9d 0b 02 00       	call   c002696c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 93 02 c0       	mov    eax,0xc0029357
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 93 02 c0       	mov    eax,0xc0029350
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1ce0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 93 02 c0       	mov    esi,0xc0029340
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 e0 f2 01 00       	call   c002696c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 94 02 c0       	mov    edx,0xc0029420
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 93 02 c0       	mov    edx,0xc0029320
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 93 02 c0       	mov    edx,0xc0029330
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 94 02 c0       	mov    edx,0xc0029442
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 94 02 c0       	mov    edx,0xc002944e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 94 02 c0       	mov    edx,0xc0029462
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029780
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029780
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 95 02 c0       	mov    eax,0xc0029580
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 94 02 c0       	mov    eax,0xc00294c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 34 fc 01 00       	call   c002843f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 f7 fb 01 00       	call   c0028421 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 cb fb 01 00       	call   c002843f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 7e f2 01 00       	call   c0027b44 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 f8 fc 01 00       	call   c00285d0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 45 fb 01 00       	call   c002843f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 87 fa 01 00       	call   c002843f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 54 fa 01 00       	call   c0028421 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 41 f9 01 00       	call   c002843f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 09 f9 01 00       	call   c0028421 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 98 02 c0       	mov    eax,0xc0029880
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 15 f7 01 00       	call   c002843f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 da f6 01 00       	call   c0028421 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6320]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 ea f3 01 00       	call   c00281d3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 68 ed 01 00       	call   c0027b70 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 24 f6 01 00       	call   c0028443 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 12 f7 01 00       	call   c0028567 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 fc ec 01 00       	call   c0027b70 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 a7 f5 01 00       	call   c002843d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 88 f5 01 00       	call   c0028441 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 16 f7 01 00       	call   c00285f0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 c8 f2 01 00       	call   c00281d3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 46 ec 01 00       	call   c0027b70 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 02 f5 01 00       	call   c0028443 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 f0 f5 01 00       	call   c0028567 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 da eb 01 00       	call   c0027b70 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 85 f4 01 00       	call   c002843d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 65 f4 01 00       	call   c0028441 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 f2 f5 01 00       	call   c00285f0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 a0 f3 01 00       	call   c002843f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 5e f3 01 00       	call   c0028421 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 46 f3 01 00       	call   c002843f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 b8 f0 01 00       	call   c00281d3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ba e3 01 00       	call   c00274f3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 1d ea 01 00       	call   c0027b70 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 6f f0 01 00       	call   c00281d3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 75 e3 01 00       	call   c00274f3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 44 f0 01 00       	call   c00281d3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 94 f2 01 00       	call   c002843d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 71 e9 01 00       	call   c0027b44 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 eb f3 01 00       	call   c00285d0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 1a f2 01 00       	call   c0028421 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 15 e9 01 00       	call   c0027b44 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 93 ef 01 00       	call   c00281d3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 16 e9 01 00       	call   c0027b70 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 68 ef 01 00       	call   c00281d3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 cf eb 01 00       	call   c0027e54 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 4e e2 01 00       	call   c00274f3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 ae db 01 00       	call   c0026e88 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 85 f2 01 00       	call   c0028567 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 6e e8 01 00       	call   c0027b70 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 55 f2 01 00       	call   c0028567 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 c7 e1 01 00       	call   c00274f3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 00 f1 01 00       	call   c0028443 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 e8 ea 01 00       	call   c0027e54 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 6e e1 01 00       	call   c00274f3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 54 f2 01 00       	call   c00285f0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 2e ee 01 00       	call   c00281d3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 85 e7 01 00       	call   c0027b44 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 64 f0 01 00       	call   c002843f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 fd e0 01 00       	call   c00274f3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 29 e7 01 00       	call   c0027b44 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 c3 f1 01 00       	call   c00285f0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 7c ed 01 00       	call   c00281d3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 f9 e6 01 00       	call   c0027b70 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 4c ed 01 00       	call   c00281d3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 52 e0 01 00       	call   c00274f3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 22 ed 01 00       	call   c00281d3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 74 ef 01 00       	call   c002843f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 4b e6 01 00       	call   c0027b44 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 c5 f0 01 00       	call   c00285d0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 f4 ee 01 00       	call   c0028421 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 ee e5 01 00       	call   c0027b44 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 6c ec 01 00       	call   c00281d3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ef e5 01 00       	call   c0027b70 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 41 ec 01 00       	call   c00281d3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 a8 e8 01 00       	call   c0027e54 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 27 df 01 00       	call   c00274f3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 77 d8 01 00       	call   c0026e88 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 4e ef 01 00       	call   c0028567 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 37 e5 01 00       	call   c0027b70 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 1e ef 01 00       	call   c0028567 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 90 de 01 00       	call   c00274f3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 c9 ed 01 00       	call   c0028443 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 b0 e7 01 00       	call   c0027e54 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 2f de 01 00       	call   c00274f3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 15 ef 01 00       	call   c00285f0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ef ea 01 00       	call   c00281d3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 46 e4 01 00       	call   c0027b44 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 25 ed 01 00       	call   c002843f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 be dd 01 00       	call   c00274f3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 ea e3 01 00       	call   c0027b44 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 5f ea 01 00       	call   c00281d3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 65 dd 01 00       	call   c00274f3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9d 02 c0       	mov    eax,0xc0029d40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9d 02 c0       	mov    eax,0xc0029d54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 da e8 01 00       	call   c00281d3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 58 e2 01 00       	call   c0027b70 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 ea d4 01 00       	call   c0026e88 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 c1 eb 01 00       	call   c0028567 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 aa e1 01 00       	call   c0027b70 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 8d eb 01 00       	call   c0028567 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 ff da 01 00       	call   c00274f3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 5f eb 01 00       	call   c0028567 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 4e e1 01 00       	call   c0027b70 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 b7 da 01 00       	call   c00274f3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 d8 d3 01 00       	call   c0026e88 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 af ea 01 00       	call   c0028567 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 98 e0 01 00       	call   c0027b70 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 7b ea 01 00       	call   c0028567 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 ed d9 01 00       	call   c00274f3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 4d ea 01 00       	call   c0028567 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 3c e0 01 00       	call   c0027b70 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 a5 d9 01 00       	call   c00274f3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 83 d9 01 00       	call   c00274f3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 5f d2 01 00       	call   c0026e88 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 36 e9 01 00       	call   c0028567 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 1f df 01 00       	call   c0027b70 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 02 e9 01 00       	call   c0028567 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 74 d8 01 00       	call   c00274f3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 d4 e8 01 00       	call   c0028567 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 bd de 01 00       	call   c0027b70 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 26 d8 01 00       	call   c00274f3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 86 e8 01 00       	call   c0028567 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 6f de 01 00       	call   c0027b70 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 d8 d7 01 00       	call   c00274f3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 ed d0 01 00       	call   c0026e88 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 c4 e7 01 00       	call   c0028567 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 ad dd 01 00       	call   c0027b70 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 94 e7 01 00       	call   c0028567 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 06 d7 01 00       	call   c00274f3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 66 e7 01 00       	call   c0028567 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 4f dd 01 00       	call   c0027b70 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 b8 d6 01 00       	call   c00274f3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 18 e7 01 00       	call   c0028567 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 01 dd 01 00       	call   c0027b70 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 6a d6 01 00       	call   c00274f3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 3e d6 01 00       	call   c00274f3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 9b dc 01 00       	call   c0027b70 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 57 e5 01 00       	call   c0028443 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 e6 d5 01 00       	call   c00274f3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 43 dc 01 00       	call   c0027b70 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 ff e4 01 00       	call   c0028443 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 79 ce 01 00       	call   c0026e88 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 50 e5 01 00       	call   c0028567 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 39 db 01 00       	call   c0027b70 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 1c e5 01 00       	call   c0028567 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 8e d4 01 00       	call   c00274f3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 ee e4 01 00       	call   c0028567 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 d7 da 01 00       	call   c0027b70 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 40 d4 01 00       	call   c00274f3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 a0 e4 01 00       	call   c0028567 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 89 da 01 00       	call   c0027b70 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 f2 d3 01 00       	call   c00274f3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 52 e4 01 00       	call   c0028567 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 3b da 01 00       	call   c0027b70 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 a4 d3 01 00       	call   c00274f3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 04 e4 01 00       	call   c0028567 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 ed d9 01 00       	call   c0027b70 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 56 d3 01 00       	call   c00274f3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 58 cc 01 00       	call   c0026e88 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 2f e3 01 00       	call   c0028567 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 18 d9 01 00       	call   c0027b70 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 ff e2 01 00       	call   c0028567 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 71 d2 01 00       	call   c00274f3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 d1 e2 01 00       	call   c0028567 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ba d8 01 00       	call   c0027b70 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 23 d2 01 00       	call   c00274f3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 83 e2 01 00       	call   c0028567 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 6c d8 01 00       	call   c0027b70 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 d5 d1 01 00       	call   c00274f3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 35 e2 01 00       	call   c0028567 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 1e d8 01 00       	call   c0027b70 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 87 d1 01 00       	call   c00274f3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 e7 e1 01 00       	call   c0028567 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 d0 d7 01 00       	call   c0027b70 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 39 d1 01 00       	call   c00274f3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 0d d1 01 00       	call   c00274f3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 6a d7 01 00       	call   c0027b70 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 26 e0 01 00       	call   c0028443 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 b5 d0 01 00       	call   c00274f3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 12 d7 01 00       	call   c0027b70 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 ce df 01 00       	call   c0028443 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 5c d0 01 00       	call   c00274f3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 b9 d6 01 00       	call   c0027b70 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 75 df 01 00       	call   c0028443 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 03 d0 01 00       	call   c00274f3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 60 d6 01 00       	call   c0027b70 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 1c df 01 00       	call   c0028443 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 7a c8 01 00       	call   c0026e88 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 51 df 01 00       	call   c0028567 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 3a d5 01 00       	call   c0027b70 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 1d df 01 00       	call   c0028567 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 8f ce 01 00       	call   c00274f3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ef de 01 00       	call   c0028567 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 d8 d4 01 00       	call   c0027b70 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 41 ce 01 00       	call   c00274f3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 a1 de 01 00       	call   c0028567 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 8a d4 01 00       	call   c0027b70 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 f3 cd 01 00       	call   c00274f3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 53 de 01 00       	call   c0028567 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 3c d4 01 00       	call   c0027b70 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 a5 cd 01 00       	call   c00274f3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 05 de 01 00       	call   c0028567 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 ee d3 01 00       	call   c0027b70 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 57 cd 01 00       	call   c00274f3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 b7 dd 01 00       	call   c0028567 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 a0 d3 01 00       	call   c0027b70 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 06 cd 01 00       	call   c00274f3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 66 dd 01 00       	call   c0028567 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 4f d3 01 00       	call   c0027b70 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 b8 cc 01 00       	call   c00274f3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 b2 c5 01 00       	call   c0026e88 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 89 dc 01 00       	call   c0028567 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 72 d2 01 00       	call   c0027b70 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 52 dc 01 00       	call   c0028567 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 c4 cb 01 00       	call   c00274f3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 24 dc 01 00       	call   c0028567 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 0d d2 01 00       	call   c0027b70 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 76 cb 01 00       	call   c00274f3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 d6 db 01 00       	call   c0028567 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 bf d1 01 00       	call   c0027b70 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 28 cb 01 00       	call   c00274f3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 88 db 01 00       	call   c0028567 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 71 d1 01 00       	call   c0027b70 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 da ca 01 00       	call   c00274f3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 3a db 01 00       	call   c0028567 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 23 d1 01 00       	call   c0027b70 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 8c ca 01 00       	call   c00274f3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 ec da 01 00       	call   c0028567 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 d5 d0 01 00       	call   c0027b70 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 3b ca 01 00       	call   c00274f3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 9b da 01 00       	call   c0028567 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 84 d0 01 00       	call   c0027b70 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 f3 c9 01 00       	call   c00274f3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 cc c9 01 00       	call   c00274f3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 2a d0 01 00       	call   c0027b70 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 e6 d8 01 00       	call   c0028443 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 75 c9 01 00       	call   c00274f3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 d3 cf 01 00       	call   c0027b70 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 8f d8 01 00       	call   c0028443 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 1d c9 01 00       	call   c00274f3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 7b cf 01 00       	call   c0027b70 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 37 d8 01 00       	call   c0028443 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 c5 c8 01 00       	call   c00274f3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 23 cf 01 00       	call   c0027b70 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 df d7 01 00       	call   c0028443 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 6d c8 01 00       	call   c00274f3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 cb ce 01 00       	call   c0027b70 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 87 d7 01 00       	call   c0028443 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 1b c8 01 00       	call   c00274f3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 79 ce 01 00       	call   c0027b70 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 35 d7 01 00       	call   c0028443 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 49 c0 01 00       	call   c0026e88 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 20 d7 01 00       	call   c0028567 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 09 cd 01 00       	call   c0027b70 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 f0 d6 01 00       	call   c0028567 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 62 c6 01 00       	call   c00274f3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd627c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 96 d6 01 00       	call   c0028567 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 7f cc 01 00       	call   c0027b70 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 ea c5 01 00       	call   c00274f3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 37 d6 01 00       	call   c0028567 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 20 cc 01 00       	call   c0027b70 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 8b c5 01 00       	call   c00274f3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 d8 d5 01 00       	call   c0028567 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 c1 cb 01 00       	call   c0027b70 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 2c c5 01 00       	call   c00274f3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 79 d5 01 00       	call   c0028567 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 62 cb 01 00       	call   c0027b70 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 cd c4 01 00       	call   c00274f3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 1a d5 01 00       	call   c0028567 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 03 cb 01 00       	call   c0027b70 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 6e c4 01 00       	call   c00274f3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 bb d4 01 00       	call   c0028567 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 a4 ca 01 00       	call   c0027b70 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 0f c4 01 00       	call   c00274f3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 5c d4 01 00       	call   c0028567 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 45 ca 01 00       	call   c0027b70 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 b0 c3 01 00       	call   c00274f3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 fd d3 01 00       	call   c0028567 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 e6 c9 01 00       	call   c0027b70 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 51 c3 01 00       	call   c00274f3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 5b bc 01 00       	call   c0026e88 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 32 d3 01 00       	call   c0028567 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 1b c9 01 00       	call   c0027b70 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 02 d3 01 00       	call   c0028567 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 74 c2 01 00       	call   c00274f3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6260]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 a7 d2 01 00       	call   c0028567 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 90 c8 01 00       	call   c0027b70 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 fb c1 01 00       	call   c00274f3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 47 d2 01 00       	call   c0028567 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 30 c8 01 00       	call   c0027b70 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 9b c1 01 00       	call   c00274f3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 e7 d1 01 00       	call   c0028567 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 d0 c7 01 00       	call   c0027b70 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 3b c1 01 00       	call   c00274f3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 87 d1 01 00       	call   c0028567 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 70 c7 01 00       	call   c0027b70 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 db c0 01 00       	call   c00274f3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 27 d1 01 00       	call   c0028567 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 10 c7 01 00       	call   c0027b70 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 7b c0 01 00       	call   c00274f3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 c7 d0 01 00       	call   c0028567 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 b0 c6 01 00       	call   c0027b70 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 1b c0 01 00       	call   c00274f3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 67 d0 01 00       	call   c0028567 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 50 c6 01 00       	call   c0027b70 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 bb bf 01 00       	call   c00274f3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 07 d0 01 00       	call   c0028567 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 f0 c5 01 00       	call   c0027b70 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 5b bf 01 00       	call   c00274f3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6244]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 00 bf 01 00       	call   c00274f3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 5d c5 01 00       	call   c0027b70 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 19 ce 01 00       	call   c0028443 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 a3 be 01 00       	call   c00274f3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 00 c5 01 00       	call   c0027b70 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 bc cd 01 00       	call   c0028443 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 46 be 01 00       	call   c00274f3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 a3 c4 01 00       	call   c0027b70 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 5f cd 01 00       	call   c0028443 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 e9 bd 01 00       	call   c00274f3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 46 c4 01 00       	call   c0027b70 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 02 cd 01 00       	call   c0028443 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 8c bd 01 00       	call   c00274f3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 e9 c3 01 00       	call   c0027b70 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 a5 cc 01 00       	call   c0028443 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 2f bd 01 00       	call   c00274f3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 8c c3 01 00       	call   c0027b70 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 48 cc 01 00       	call   c0028443 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 d2 bc 01 00       	call   c00274f3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 2f c3 01 00       	call   c0027b70 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 eb cb 01 00       	call   c0028443 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 75 bc 01 00       	call   c00274f3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 d2 c2 01 00       	call   c0027b70 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 8e cb 01 00       	call   c0028443 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 8a c2 01 00       	call   c0027b70 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 fa cc 01 00       	jmp    c00285f0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 6c c9 01 00       	call   c002843f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 2a c9 01 00       	call   c0028421 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 c1 c6 01 00       	call   c00281d3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 c2 b9 01 00       	call   c00274f3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 91 c6 01 00       	call   c00281d3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 f8 c2 01 00       	call   c0027e54 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 97 c8 01 00       	call   c0028421 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 9a c8 01 00       	call   c002843f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 6d c8 01 00       	call   c002843f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 66 c2 01 00       	call   c0027e54 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 e8 c9 01 00       	call   c00285f0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 c3 c9 01 00       	call   c00285f0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 9d c5 01 00       	call   c00281d3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 f4 be 01 00       	call   c0027b44 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 d3 c7 01 00       	call   c002843f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 6c b8 01 00       	call   c00274f3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 90 be 01 00       	call   c0027b44 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 2a c9 01 00       	call   c00285f0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 6a c1 01 00       	call   c0027e54 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 e7 b7 01 00       	call   c00274f3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 13 c4 01 00       	call   c00281d3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 13 b7 01 00       	call   c00274f3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 f3 b6 01 00       	call   c00274f3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 c3 c3 01 00       	call   c00281d3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 13 c6 01 00       	call   c002843d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 f2 bc 01 00       	call   c0027b44 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 6c c7 01 00       	call   c00285d0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 9b c5 01 00       	call   c0028421 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 99 bc 01 00       	call   c0027b44 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 17 c3 01 00       	call   c00281d3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 9a bc 01 00       	call   c0027b70 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 ec c2 01 00       	call   c00281d3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 53 bf 01 00       	call   c0027e54 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 d2 b5 01 00       	call   c00274f3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 9c c2 01 00       	call   c00281d3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 e8 c4 01 00       	call   c002843f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 dd bb 01 00       	call   c0027b70 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 af bb 01 00       	call   c0027b70 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 e8 c1 01 00       	call   c00281d3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 4c be 01 00       	call   c0027e54 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 14 be 01 00       	call   c0027e54 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 93 b4 01 00       	call   c00274f3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 78 c5 01 00       	call   c00285f0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 52 c1 01 00       	call   c00281d3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 a9 ba 01 00       	call   c0027b44 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 88 c3 01 00       	call   c002843f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 20 b4 01 00       	call   c00274f3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 44 ba 01 00       	call   c0027b44 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 de c4 01 00       	call   c00285f0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 a7 c2 01 00       	call   c002843f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 65 c2 01 00       	call   c0028421 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 fc bf 01 00       	call   c00281d3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 fd b2 01 00       	call   c00274f3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 cc bf 01 00       	call   c00281d3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 33 bc 01 00       	call   c0027e54 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 d2 c1 01 00       	call   c0028421 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 d5 c1 01 00       	call   c002843f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 a8 c1 01 00       	call   c002843f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 a1 bb 01 00       	call   c0027e54 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 23 c3 01 00       	call   c00285f0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 fe c2 01 00       	call   c00285f0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 d8 be 01 00       	call   c00281d3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 2f b8 01 00       	call   c0027b44 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 0e c1 01 00       	call   c002843f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 a7 b1 01 00       	call   c00274f3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 cb b7 01 00       	call   c0027b44 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 65 c2 01 00       	call   c00285f0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 a5 ba 01 00       	call   c0027e54 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 22 b1 01 00       	call   c00274f3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 4d bd 01 00       	call   c00281d3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 4d b0 01 00       	call   c00274f3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 2d b0 01 00       	call   c00274f3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 fd bc 01 00       	call   c00281d3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 4d bf 01 00       	call   c002843d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 2b b6 01 00       	call   c0027b44 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 a5 c0 01 00       	call   c00285d0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 d4 be 01 00       	call   c0028421 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 d1 b5 01 00       	call   c0027b44 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 4f bc 01 00       	call   c00281d3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 d2 b5 01 00       	call   c0027b70 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 24 bc 01 00       	call   c00281d3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 8b b8 01 00       	call   c0027e54 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 0a af 01 00       	call   c00274f3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 d4 bb 01 00       	call   c00281d3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 20 be 01 00       	call   c002843f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 15 b5 01 00       	call   c0027b70 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 e7 b4 01 00       	call   c0027b70 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 1e bb 01 00       	call   c00281d3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 82 b7 01 00       	call   c0027e54 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 4f b7 01 00       	call   c0027e54 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 ce ad 01 00       	call   c00274f3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 b3 be 01 00       	call   c00285f0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 8d ba 01 00       	call   c00281d3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 e4 b3 01 00       	call   c0027b44 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 c3 bc 01 00       	call   c002843f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 5b ad 01 00       	call   c00274f3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 7f b3 01 00       	call   c0027b44 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 19 be 01 00       	call   c00285f0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 e2 bb 01 00       	call   c002843f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 a0 bb 01 00       	call   c0028421 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 37 b9 01 00       	call   c00281d3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 38 ac 01 00       	call   c00274f3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 07 b9 01 00       	call   c00281d3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 6e b5 01 00       	call   c0027e54 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 0d bb 01 00       	call   c0028421 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 10 bb 01 00       	call   c002843f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 e3 ba 01 00       	call   c002843f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 dc b4 01 00       	call   c0027e54 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 5e bc 01 00       	call   c00285f0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 39 bc 01 00       	call   c00285f0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 13 b8 01 00       	call   c00281d3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 6a b1 01 00       	call   c0027b44 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 49 ba 01 00       	call   c002843f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 e2 aa 01 00       	call   c00274f3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 06 b1 01 00       	call   c0027b44 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 a0 bb 01 00       	call   c00285f0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 e0 b3 01 00       	call   c0027e54 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 5d aa 01 00       	call   c00274f3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 88 b6 01 00       	call   c00281d3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 88 a9 01 00       	call   c00274f3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 68 a9 01 00       	call   c00274f3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 38 b6 01 00       	call   c00281d3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 88 b8 01 00       	call   c002843d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 66 af 01 00       	call   c0027b44 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 e0 b9 01 00       	call   c00285d0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 0f b8 01 00       	call   c0028421 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 0c af 01 00       	call   c0027b44 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 8a b5 01 00       	call   c00281d3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 0d af 01 00       	call   c0027b70 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 5f b5 01 00       	call   c00281d3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 c6 b1 01 00       	call   c0027e54 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 45 a8 01 00       	call   c00274f3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 0f b5 01 00       	call   c00281d3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 5b b7 01 00       	call   c002843f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 50 ae 01 00       	call   c0027b70 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 22 ae 01 00       	call   c0027b70 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 59 b4 01 00       	call   c00281d3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 bd b0 01 00       	call   c0027e54 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 8a b0 01 00       	call   c0027e54 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 09 a7 01 00       	call   c00274f3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 ee b7 01 00       	call   c00285f0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 c8 b3 01 00       	call   c00281d3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 1f ad 01 00       	call   c0027b44 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 fe b5 01 00       	call   c002843f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 96 a6 01 00       	call   c00274f3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ba ac 01 00       	call   c0027b44 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 54 b7 01 00       	call   c00285f0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 1d b5 01 00       	call   c002843f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 db b4 01 00       	call   c0028421 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 72 b2 01 00       	call   c00281d3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 73 a5 01 00       	call   c00274f3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 42 b2 01 00       	call   c00281d3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 a9 ae 01 00       	call   c0027e54 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 48 b4 01 00       	call   c0028421 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 4b b4 01 00       	call   c002843f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 1e b4 01 00       	call   c002843f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 17 ae 01 00       	call   c0027e54 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 99 b5 01 00       	call   c00285f0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 74 b5 01 00       	call   c00285f0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 4e b1 01 00       	call   c00281d3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 a5 aa 01 00       	call   c0027b44 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 84 b3 01 00       	call   c002843f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 1d a4 01 00       	call   c00274f3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 41 aa 01 00       	call   c0027b44 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 db b4 01 00       	call   c00285f0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 1b ad 01 00       	call   c0027e54 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 98 a3 01 00       	call   c00274f3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 c3 af 01 00       	call   c00281d3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 c3 a2 01 00       	call   c00274f3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 a3 a2 01 00       	call   c00274f3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 73 af 01 00       	call   c00281d3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 c3 b1 01 00       	call   c002843d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 a1 a8 01 00       	call   c0027b44 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 1b b3 01 00       	call   c00285d0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 4a b1 01 00       	call   c0028421 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 47 a8 01 00       	call   c0027b44 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 c5 ae 01 00       	call   c00281d3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 48 a8 01 00       	call   c0027b70 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 9a ae 01 00       	call   c00281d3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 01 ab 01 00       	call   c0027e54 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 80 a1 01 00       	call   c00274f3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 4a ae 01 00       	call   c00281d3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 96 b0 01 00       	call   c002843f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 8b a7 01 00       	call   c0027b70 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 5d a7 01 00       	call   c0027b70 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 94 ad 01 00       	call   c00281d3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 f8 a9 01 00       	call   c0027e54 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 c5 a9 01 00       	call   c0027e54 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 44 a0 01 00       	call   c00274f3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 29 b1 01 00       	call   c00285f0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 03 ad 01 00       	call   c00281d3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 5a a6 01 00       	call   c0027b44 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 39 af 01 00       	call   c002843f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 d1 9f 01 00       	call   c00274f3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 f5 a5 01 00       	call   c0027b44 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 8f b0 01 00       	call   c00285f0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 55 ae 01 00       	call   c002843f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 13 ae 01 00       	call   c0028421 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 aa ab 01 00       	call   c00281d3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 ab 9e 01 00       	call   c00274f3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 7a ab 01 00       	call   c00281d3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 e1 a7 01 00       	call   c0027e54 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 80 ad 01 00       	call   c0028421 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 83 ad 01 00       	call   c002843f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 56 ad 01 00       	call   c002843f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 4f a7 01 00       	call   c0027e54 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 d1 ae 01 00       	call   c00285f0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 a8 ae 01 00       	call   c00285f0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 82 aa 01 00       	call   c00281d3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 d9 a3 01 00       	call   c0027b44 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 b8 ac 01 00       	call   c002843f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 51 9d 01 00       	call   c00274f3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 79 a3 01 00       	call   c0027b44 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 13 ae 01 00       	call   c00285f0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 54 a6 01 00       	call   c0027e54 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 d1 9c 01 00       	call   c00274f3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 fd a8 01 00       	call   c00281d3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 fd 9b 01 00       	call   c00274f3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 dd 9b 01 00       	call   c00274f3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 ad a8 01 00       	call   c00281d3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 e1 aa 01 00       	call   c0028421 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 d8 a1 01 00       	call   c0027b44 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 52 ac 01 00       	call   c00285d0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 81 aa 01 00       	call   c0028421 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 7b a1 01 00       	call   c0027b44 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 f9 a7 01 00       	call   c00281d3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 7c a1 01 00       	call   c0027b70 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 ce a7 01 00       	call   c00281d3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 35 a4 01 00       	call   c0027e54 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 b4 9a 01 00       	call   c00274f3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 7e a7 01 00       	call   c00281d3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 ca a9 01 00       	call   c002843f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 bf a0 01 00       	call   c0027b70 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 91 a0 01 00       	call   c0027b70 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 d5 a6 01 00       	call   c00281d3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 3c a3 01 00       	call   c0027e54 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 25 a0 01 00       	call   c0027b70 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 e1 a8 01 00       	call   c0028443 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 d4 a2 01 00       	call   c0027e54 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 53 99 01 00       	call   c00274f3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 38 aa 01 00       	call   c00285f0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 12 a6 01 00       	call   c00281d3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 69 9f 01 00       	call   c0027b44 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 48 a8 01 00       	call   c002843f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 e0 98 01 00       	call   c00274f3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 08 9f 01 00       	call   c0027b44 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 a2 a9 01 00       	call   c00285f0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd621c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6228]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 5d a6 01 00       	call   c002843f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 1b a6 01 00       	call   c0028421 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 07 a6 01 00       	call   c002843f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 79 a3 01 00       	call   c00281d3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 f7 9c 01 00       	call   c0027b70 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 49 a3 01 00       	call   c00281d3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 4f 96 01 00       	call   c00274f3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 1e a3 01 00       	call   c00281d3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 6e a5 01 00       	call   c002843d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 4f 9c 01 00       	call   c0027b44 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 c9 a6 01 00       	call   c00285d0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 f8 a4 01 00       	call   c0028421 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 f7 9b 01 00       	call   c0027b44 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 75 a2 01 00       	call   c00281d3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 f8 9b 01 00       	call   c0027b70 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 4a a2 01 00       	call   c00281d3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 b1 9e 01 00       	call   c0027e54 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 30 95 01 00       	call   c00274f3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 58 9e 01 00       	call   c0027e54 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 de 94 01 00       	call   c00274f3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 c4 a5 01 00       	call   c00285f0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 9e a1 01 00       	call   c00281d3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 f5 9a 01 00       	call   c0027b44 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 d4 a3 01 00       	call   c002843f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 6d 94 01 00       	call   c00274f3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 99 9a 01 00       	call   c0027b44 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 33 a5 01 00       	call   c00285f0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 e8 a0 01 00       	call   c00281d3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 65 9a 01 00       	call   c0027b70 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 b6 a0 01 00       	call   c00281d3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 bc 93 01 00       	call   c00274f3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 8c a0 01 00       	call   c00281d3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 e0 a2 01 00       	call   c0028441 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 b9 99 01 00       	call   c0027b44 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 33 a4 01 00       	call   c00285d0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 62 a2 01 00       	call   c0028421 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 60 99 01 00       	call   c0027b44 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 de 9f 01 00       	call   c00281d3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 61 99 01 00       	call   c0027b70 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 b3 9f 01 00       	call   c00281d3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 1a 9c 01 00       	call   c0027e54 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 99 92 01 00       	call   c00274f3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 b5 9b 01 00       	call   c0027e54 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 34 92 01 00       	call   c00274f3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 1a a3 01 00       	call   c00285f0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 f4 9e 01 00       	call   c00281d3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 4b 98 01 00       	call   c0027b44 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 2a a1 01 00       	call   c002843f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 c3 91 01 00       	call   c00274f3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ef 97 01 00       	call   c0027b44 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 60 9e 01 00       	call   c00281d3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 66 91 01 00       	call   c00274f3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9e 02 c0       	mov    eax,0xc0029efe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f 9f 02 c0       	mov    eax,0xc0029f0f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 9f 02 c0       	push   0xc0029f46
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e3 02 c0       	mov    eax,0xc002e388
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f 9f 02 c0       	push   0xc0029f4f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 6c 69 02 c0       	mov    eax,0xc002696c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 9f 02 c0       	push   0xc0029f59
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 a0 66 02 c0       	mov    eax,0xc00266a0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 9f 02 c0       	push   0xc0029f62
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 6c 6a 02 c0       	mov    eax,0xc0026a6c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c 9f 02 c0       	push   0xc0029f6c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 ec 67 02 c0       	mov    eax,0xc00267ec
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 9f 02 c0       	push   0xc0029f75
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e3 02 c0       	mov    eax,0xc002e38c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 9f 02 c0       	push   0xc0029f82
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e3 02 c0       	mov    eax,0xc002e38d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 3f 5e 00 00       	call   c0014462 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 1b 00 00       	push   0x1b3f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c000e668:	68 8f 9f 02 c0       	push   0xc0029f8f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 21 f5 00 00       	call   c001db96 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 0c f8 00 00       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 f5 e6 01 c0       	push   0xc001e6f5
c000e693:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c000e699:	e8 f8 f7 00 00       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 e8 1a 03 c0       	mov    ds:0xc0031ae8,eax
c000e6a6:	c6 05 8d e3 02 c0 01 	mov    BYTE PTR ds:0xc002e38d,0x1
c000e6ad:	e8 c3 03 01 00       	call   c001ea75 <Vm::initialise8086()>
c000e6b2:	e8 93 4b 00 00       	call   c001324a <Fs::initVFS()>
c000e6b7:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 37 de 00 00       	call   c001c50a <Sys::loadSyscalls()>
c000e6d3:	e8 5a bd 00 00       	call   c001a432 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 9c 9f 02 c0       	push   0xc0029f9c
c000e6e2:	68 a5 9f 02 c0       	push   0xc0029fa5
c000e6e7:	e8 6c ca 00 00       	call   c001b158 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 3e 56 00 00       	call   c0013d32 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 31 5d 00 00       	call   c0014436 <Device::loadDriversForAll()>
c000e705:	e8 6e b8 00 00       	call   c0019f78 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ad 9f 02 c0       	push   0xc0029fad
c000e719:	e8 80 ef 00 00       	call   c001d69e <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 c6 f1 00 00       	call   c001d8ed <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 c6 fa 00 00       	call   c001e1fa <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 c9 9f 02 c0       	push   0xc0029fc9
c000e749:	50                   	push   eax
c000e74a:	e8 8d 5d 00 00       	call   c00144dc <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 a1 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 53 7d 01 00       	call   c0026636 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 6c a3 00 00       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 45 a3 00 00       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 23 a3 00 00       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 01 a3 00 00       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 a0 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e3a0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 0f a2 00 00       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 ea a1 00 00       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 bd 7b 01 00       	call   c00265f0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 7a 7b 01 00       	call   c00265d0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 06 a2 00 00       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 d9 9f 02 c0       	push   0xc0029fd9
c000eaaf:	e8 12 44 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ec 9f 02 c0       	push   0xc0029fec
c000ead2:	e8 ef 43 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 fd 9f 02 c0       	push   0xc0029ffd
c000eaf5:	e8 cc 43 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 0e a0 02 c0       	push   0xc002a00e
c000eb18:	e8 a9 43 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 1f a0 02 c0       	push   0xc002a01f
c000eb3b:	e8 86 43 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 30 a0 02 c0       	push   0xc002a030
c000eb5e:	e8 63 43 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 41 a0 02 c0       	push   0xc002a041
c000eb81:	e8 40 43 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 52 a0 02 c0       	push   0xc002a052
c000eba4:	e8 1d 43 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 63 a0 02 c0       	push   0xc002a063
c000ebc7:	e8 fa 42 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 74 a0 02 c0       	push   0xc002a074
c000ebea:	e8 d7 42 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 85 a0 02 c0       	push   0xc002a085
c000ec0d:	e8 b4 42 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 96 a0 02 c0       	push   0xc002a096
c000ec30:	e8 91 42 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 a7 a0 02 c0       	push   0xc002a0a7
c000ec53:	e8 6e 42 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 b8 a0 02 c0       	push   0xc002a0b8
c000ec76:	e8 4b 42 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 c9 a0 02 c0       	push   0xc002a0c9
c000ec99:	e8 28 42 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 da a0 02 c0       	push   0xc002a0da
c000ecbc:	e8 05 42 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 eb a0 02 c0       	push   0xc002a0eb
c000ecdf:	e8 e2 41 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 fc a0 02 c0       	push   0xc002a0fc
c000ed02:	e8 bf 41 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 0d a1 02 c0       	push   0xc002a10d
c000ed21:	e8 a0 41 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 54 ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ba54
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 8f 41 00 00       	jmp    c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 1e a1 02 c0       	push   0xc002a11e
c000ee0a:	e8 5c b7 00 00       	call   c001a56b <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 24 a1 02 c0       	push   0xc002a124
c000ee42:	e8 24 b7 00 00       	call   c001a56b <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 a0 e3 02 c0 04 	test   BYTE PTR ds:0xc002e3a0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 c4 d2 02 c0 	sete   BYTE PTR ds:0xc002d2c4
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 a1 92 00 00       	call   c0018156 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 28 54 00 00       	call   c00142ec <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 4e 9e 00 00       	call   c0018d42 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 e9 53 00 00       	call   c00142ec <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 53 59 00 00       	call   c0014872 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 b9 53 00 00       	call   c00142ec <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 41 f0 00 00       	call   c001df96 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 2a a1 02 c0       	push   0xc002a12a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 23 3f 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 3b a1 02 c0       	push   0xc002a13b
c000efc0:	e8 a6 b5 00 00       	call   c001a56b <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 48 a1 02 c0       	push   0xc002a148
c000efd5:	e8 91 b5 00 00       	call   c001a56b <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 52 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a152
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 7a b5 00 00       	jmp    c001a56b <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 8c a1 02 c0       	push   0xc002a18c
c000f086:	e8 3b 3e 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 92 e3 02 c0       	mov    ds:0xc002e392,eax
c000f0c7:	66 89 15 90 e3 02 c0 	mov    WORD PTR ds:0xc002e390,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 89 eb 00 00       	call   c001dd67 <unlockScheduler()>
c000f1de:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 44 94 01 00       	call   c0028670 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 3b 94 01 00       	call   c0028670 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 98 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e398,0x7ff
c000f323:	a3 9a e3 02 c0       	mov    ds:0xc002e39a,eax
c000f328:	0f 01 1d 98 e3 02 c0 	lidtd  ds:0xc002e398
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 1e 29 00 00       	call   c0011f33 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 36 2e 00 00       	call   c0012456 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 6e 1e 00 00       	call   c00114ac <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 9f 1e 00 00       	call   c00114ec <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 9c d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d29c
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 9c d2 02 c0       	mov    eax,ds:0xc002d29c
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 a8 a1 02 c0       	push   0xc002a1a8
c000f6f4:	e8 cd 37 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 9c d2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d29c,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 14 28 00 00       	call   c0011f33 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 9c d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d29c
c000f727:	e8 b4 07 00 00       	call   c000fee0 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 1d 2c 00 00       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 9c d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d29c
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 d8 a1 02 c0       	push   0xc002a1d8
c000f7ad:	e8 b9 ad 00 00       	call   c001a56b <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 dd a1 02 c0       	push   0xc002a1dd
c000f7c3:	e8 a3 ad 00 00       	call   c001a56b <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 8c e5 00 00       	call   c001dd65 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 7d e5 00 00       	call   c001dd67 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 38 27 00 00       	call   c0011f33 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 49 2c 00 00       	call   c0012456 <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 1a 27 00 00       	call   c0011f33 <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 ec 28 00 00       	call   c0012112 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 c0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2c0
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 c0 d2 02 c0       	mov    eax,ds:0xc002d2c0
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 8b 0c 00 00       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 4d 0c 00 00       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 e4 0c 00 00       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c000fb49:	80 3d 20 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e420,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d c0 d2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d2c0,0x8000
c000fba3:	c6 05 20 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e420,0x1
c000fbaa:	c7 05 58 e4 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e458,0xc000fa16
c000fbb4:	c7 05 44 e4 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e444,0xc000f89d
c000fbbe:	c7 05 40 e4 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e440,0xc000f8e8
c000fbc8:	c7 05 4c e4 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e44c,0xc000fa5c
c000fbd2:	c7 05 54 e4 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e454,0xc000f966
c000fbdc:	c7 05 48 e4 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e448,0xc000f9c4
c000fbe6:	c7 05 50 e4 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e450,0xc000f9c5
c000fbf0:	c7 05 5c e4 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e45c,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 cb 09 00 00       	call   c00105d8 <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 e4 a1 02 c0       	push   0xc002a1e4
c000fc4d:	e8 74 32 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 2a 04 00 00       	call   c0010093 <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 cc 20 00 00       	call   c0011d3a <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 55 ba 02 c0       	push   0xc002ba55
c000fc95:	e8 d1 a8 00 00       	call   c001a56b <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d a0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a0,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 8a 22 00 00       	call   c0011f3a <VAS::VAS()>
c000fcb0:	89 1d 44 e7 02 c0    	mov    DWORD PTR ds:0xc002e744,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 fb a1 02 c0 	mov    DWORD PTR [esp],0xc002a1fb
c000fcc2:	e8 ff 31 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000fcc7:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcce:	e8 70 fb ff ff       	call   c000f843 <malloc>
c000fcd3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd6:	89 c6                	mov    esi,eax
c000fcd8:	e8 5d ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdd:	58                   	pop    eax
c000fcde:	89 35 88 e3 02 c0    	mov    DWORD PTR ds:0xc002e388,esi
c000fce4:	5a                   	pop    edx
c000fce5:	56                   	push   esi
c000fce6:	68 18 a2 02 c0       	push   0xc002a218
c000fceb:	e8 d6 31 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000fcf0:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c000fcf5:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf7:	6a 00                	push   0x0
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	50                   	push   eax
c000fcfe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd01:	83 c4 14             	add    esp,0x14
c000fd04:	53                   	push   ebx
c000fd05:	e8 e0 24 00 00       	call   c00121ea <VAS::~VAS()>
c000fd0a:	c7 04 24 2b a2 02 c0 	mov    DWORD PTR [esp],0xc002a22b
c000fd11:	e8 55 a8 00 00       	call   c001a56b <Krnl::panic(char const*)>
c000fd16:	83 c4 30             	add    esp,0x30
c000fd19:	5b                   	pop    ebx
c000fd1a:	5e                   	pop    esi
c000fd1b:	5f                   	pop    edi
c000fd1c:	c3                   	ret    

c000fd1d <Phys::allocateDMA(unsigned long)>:
c000fd1d:	55                   	push   ebp
c000fd1e:	31 d2                	xor    edx,edx
c000fd20:	57                   	push   edi
c000fd21:	31 ed                	xor    ebp,ebp
c000fd23:	56                   	push   esi
c000fd24:	31 c9                	xor    ecx,ecx
c000fd26:	53                   	push   ebx
c000fd27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd31:	31 c0                	xor    eax,eax
c000fd33:	c1 ee 0c             	shr    esi,0xc
c000fd36:	eb 17                	jmp    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd38:	85 c9                	test   ecx,ecx
c000fd3a:	75 04                	jne    c000fd40 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3c:	89 d5                	mov    ebp,edx
c000fd3e:	89 d0                	mov    eax,edx
c000fd40:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd43:	39 de                	cmp    esi,ebx
c000fd45:	74 20                	je     c000fd67 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd47:	42                   	inc    edx
c000fd48:	89 d9                	mov    ecx,ebx
c000fd4a:	83 fa 2f             	cmp    edx,0x2f
c000fd4d:	7f 11                	jg     c000fd60 <Phys::allocateDMA(unsigned long)+0x43>
c000fd4f:	80 ba e0 e3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1c20],0x0
c000fd56:	74 e0                	je     c000fd38 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd58:	31 c9                	xor    ecx,ecx
c000fd5a:	42                   	inc    edx
c000fd5b:	83 fa 2f             	cmp    edx,0x2f
c000fd5e:	7e ef                	jle    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd60:	5b                   	pop    ebx
c000fd61:	31 c0                	xor    eax,eax
c000fd63:	5e                   	pop    esi
c000fd64:	5f                   	pop    edi
c000fd65:	5d                   	pop    ebp
c000fd66:	c3                   	ret    
c000fd67:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6a:	89 d7                	mov    edi,edx
c000fd6c:	4f                   	dec    edi
c000fd6d:	79 03                	jns    c000fd72 <Phys::allocateDMA(unsigned long)+0x55>
c000fd6f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd72:	c1 ff 04             	sar    edi,0x4
c000fd75:	89 c2                	mov    edx,eax
c000fd77:	c1 fa 04             	sar    edx,0x4
c000fd7a:	39 fa                	cmp    edx,edi
c000fd7c:	75 2f                	jne    c000fdad <Phys::allocateDMA(unsigned long)+0x90>
c000fd7e:	85 db                	test   ebx,ebx
c000fd80:	74 1a                	je     c000fd9c <Phys::allocateDMA(unsigned long)+0x7f>
c000fd82:	be e0 e3 02 c0       	mov    esi,0xc002e3e0
c000fd87:	8d 90 e0 e3 02 c0    	lea    edx,[eax-0x3ffd1c20]
c000fd8d:	f7 d6                	not    esi
c000fd8f:	29 c6                	sub    esi,eax
c000fd91:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd94:	42                   	inc    edx
c000fd95:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd98:	39 d9                	cmp    ecx,ebx
c000fd9a:	7f f5                	jg     c000fd91 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9c:	85 ff                	test   edi,edi
c000fd9e:	74 13                	je     c000fdb3 <Phys::allocateDMA(unsigned long)+0x96>
c000fda0:	5b                   	pop    ebx
c000fda1:	05 50 20 0c 00       	add    eax,0xc2050
c000fda6:	5e                   	pop    esi
c000fda7:	c1 e0 0c             	shl    eax,0xc
c000fdaa:	5f                   	pop    edi
c000fdab:	5d                   	pop    ebp
c000fdac:	c3                   	ret    
c000fdad:	89 ea                	mov    edx,ebp
c000fdaf:	31 c9                	xor    ecx,ecx
c000fdb1:	eb a7                	jmp    c000fd5a <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb3:	5b                   	pop    ebx
c000fdb4:	c1 e0 0c             	shl    eax,0xc
c000fdb7:	5e                   	pop    esi
c000fdb8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbd:	5f                   	pop    edi
c000fdbe:	5d                   	pop    ebp
c000fdbf:	c3                   	ret    

c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdce:	c1 e9 0c             	shr    ecx,0xc
c000fdd1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd6:	76 25                	jbe    c000fdfd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddd:	c1 e8 0c             	shr    eax,0xc
c000fde0:	8d 50 10             	lea    edx,[eax+0x10]
c000fde3:	85 c9                	test   ecx,ecx
c000fde5:	74 15                	je     c000fdfc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde7:	8d 82 e0 e3 02 c0    	lea    eax,[edx-0x3ffd1c20]
c000fded:	8d 94 11 e0 e3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1c20]
c000fdf4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf7:	40                   	inc    eax
c000fdf8:	39 d0                	cmp    eax,edx
c000fdfa:	75 f8                	jne    c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfc:	c3                   	ret    
c000fdfd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe03:	c1 ea 0c             	shr    edx,0xc
c000fe06:	eb db                	jmp    c000fde3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe08 <Phys::setPageState(unsigned long, bool)>:
c000fe08:	56                   	push   esi
c000fe09:	ba 01 00 00 00       	mov    edx,0x1
c000fe0e:	53                   	push   ebx
c000fe0f:	8b 35 a0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2a0
c000fe15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1d:	89 c8                	mov    eax,ecx
c000fe1f:	83 e1 07             	and    ecx,0x7
c000fe22:	c1 e8 03             	shr    eax,0x3
c000fe25:	d3 e3                	shl    ebx,cl
c000fe27:	01 c6                	add    esi,eax
c000fe29:	d3 e2                	shl    edx,cl
c000fe2b:	f7 d2                	not    edx
c000fe2d:	20 16                	and    BYTE PTR [esi],dl
c000fe2f:	03 05 a0 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d2a0
c000fe35:	08 18                	or     BYTE PTR [eax],bl
c000fe37:	5b                   	pop    ebx
c000fe38:	5e                   	pop    esi
c000fe39:	c3                   	ret    

c000fe3a <Phys::getPageState(unsigned long)>:
c000fe3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3e:	8b 15 a0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2a0
c000fe44:	89 c8                	mov    eax,ecx
c000fe46:	83 e1 07             	and    ecx,0x7
c000fe49:	c1 e8 03             	shr    eax,0x3
c000fe4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe50:	d3 f8                	sar    eax,cl
c000fe52:	83 e0 01             	and    eax,0x1
c000fe55:	c3                   	ret    

c000fe56 <Phys::freePage(unsigned long)>:
c000fe56:	53                   	push   ebx
c000fe57:	83 ec 08             	sub    esp,0x8
c000fe5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe64:	76 57                	jbe    c000febd <Phys::freePage(unsigned long)+0x67>
c000fe66:	c1 eb 0c             	shr    ebx,0xc
c000fe69:	53                   	push   ebx
c000fe6a:	e8 cb ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000fe6f:	5a                   	pop    edx
c000fe70:	84 c0                	test   al,al
c000fe72:	74 5b                	je     c000fecf <Phys::freePage(unsigned long)+0x79>
c000fe74:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000fe79:	48                   	dec    eax
c000fe7a:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe85:	c1 e0 02             	shl    eax,0x2
c000fe88:	99                   	cdq    
c000fe89:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000fe8f:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000fe95:	75 13                	jne    c000feaa <Phys::freePage(unsigned long)+0x54>
c000fe97:	83 ec 08             	sub    esp,0x8
c000fe9a:	6a 00                	push   0x0
c000fe9c:	53                   	push   ebx
c000fe9d:	e8 66 ff ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000fea2:	83 c4 10             	add    esp,0x10
c000fea5:	83 c4 08             	add    esp,0x8
c000fea8:	5b                   	pop    ebx
c000fea9:	c3                   	ret    
c000feaa:	83 ec 0c             	sub    esp,0xc
c000fead:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000feb2:	50                   	push   eax
c000feb3:	e8 b4 0a 00 00       	call   c001096c <VgaText::updateRAMUsageDisplay(int)>
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	eb da                	jmp    c000fe97 <Phys::freePage(unsigned long)+0x41>
c000febd:	68 00 10 00 00       	push   0x1000
c000fec2:	53                   	push   ebx
c000fec3:	e8 f8 fe ff ff       	call   c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>
c000fec8:	59                   	pop    ecx
c000fec9:	5b                   	pop    ebx
c000feca:	83 c4 08             	add    esp,0x8
c000fecd:	5b                   	pop    ebx
c000fece:	c3                   	ret    
c000fecf:	c7 44 24 10 46 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a246
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	e9 8b a6 00 00       	jmp    c001a56b <Krnl::panic(char const*)>

c000fee0 <Phys::allocatePage()>:
c000fee0:	56                   	push   esi
c000fee1:	53                   	push   ebx
c000fee2:	83 ec 14             	sub    esp,0x14
c000fee5:	8b 35 c4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3c4
c000feeb:	89 f3                	mov    ebx,esi
c000feed:	eb 0a                	jmp    c000fef9 <Phys::allocatePage()+0x19>
c000feef:	89 1d c4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c4,ebx
c000fef5:	39 de                	cmp    esi,ebx
c000fef7:	74 24                	je     c000ff1d <Phys::allocatePage()+0x3d>
c000fef9:	53                   	push   ebx
c000fefa:	e8 3b ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000feff:	5a                   	pop    edx
c000ff00:	84 c0                	test   al,al
c000ff02:	74 7b                	je     c000ff7f <Phys::allocatePage()+0x9f>
c000ff04:	43                   	inc    ebx
c000ff05:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0b:	75 e2                	jne    c000feef <Phys::allocatePage()+0xf>
c000ff0d:	31 db                	xor    ebx,ebx
c000ff0f:	c7 05 c4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c4,0x0
c000ff19:	39 de                	cmp    esi,ebx
c000ff1b:	75 dc                	jne    c000fef9 <Phys::allocatePage()+0x19>
c000ff1d:	83 ec 0c             	sub    esp,0xc
c000ff20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff25:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff28:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c000ff2e:	e8 8f 2c 00 00       	call   c0012bc2 <VAS::scanForEviction()>
c000ff33:	83 c4 10             	add    esp,0x10
c000ff36:	85 c0                	test   eax,eax
c000ff38:	0f 85 a8 00 00 00    	jne    c000ffe6 <Phys::allocatePage()+0x106>
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	68 6b a2 02 c0       	push   0xc002a26b
c000ff46:	e8 7b 2f 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ff4b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff52:	e8 c6 fd ff ff       	call   c000fd1d <Phys::allocateDMA(unsigned long)>
c000ff57:	83 c4 10             	add    esp,0x10
c000ff5a:	85 c0                	test   eax,eax
c000ff5c:	75 6f                	jne    c000ffcd <Phys::allocatePage()+0xed>
c000ff5e:	83 ec 0c             	sub    esp,0xc
c000ff61:	68 7c a2 02 c0       	push   0xc002a27c
c000ff66:	e8 00 a6 00 00       	call   c001a56b <Krnl::panic(char const*)>
c000ff6b:	83 c4 10             	add    esp,0x10
c000ff6e:	8b 1d c4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c4
c000ff74:	53                   	push   ebx
c000ff75:	e8 c0 fe ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000ff7a:	5a                   	pop    edx
c000ff7b:	84 c0                	test   al,al
c000ff7d:	75 85                	jne    c000ff04 <Phys::allocatePage()+0x24>
c000ff7f:	6a 01                	push   0x1
c000ff81:	53                   	push   ebx
c000ff82:	e8 81 fe ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000ff87:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c000ff8c:	40                   	inc    eax
c000ff8d:	a3 d0 e3 02 c0       	mov    ds:0xc002e3d0,eax
c000ff92:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff95:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff98:	c1 e0 02             	shl    eax,0x2
c000ff9b:	99                   	cdq    
c000ff9c:	f7 3d d4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3d4
c000ffa2:	5a                   	pop    edx
c000ffa3:	39 05 cc e3 02 c0    	cmp    DWORD PTR ds:0xc002e3cc,eax
c000ffa9:	59                   	pop    ecx
c000ffaa:	75 27                	jne    c000ffd3 <Phys::allocatePage()+0xf3>
c000ffac:	83 ec 08             	sub    esp,0x8
c000ffaf:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c000ffb4:	c1 e0 0c             	shl    eax,0xc
c000ffb7:	50                   	push   eax
c000ffb8:	68 5c a2 02 c0       	push   0xc002a25c
c000ffbd:	e8 04 2f 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000ffc2:	a1 c4 e3 02 c0       	mov    eax,ds:0xc002e3c4
c000ffc7:	83 c4 10             	add    esp,0x10
c000ffca:	c1 e0 0c             	shl    eax,0xc
c000ffcd:	83 c4 14             	add    esp,0x14
c000ffd0:	5b                   	pop    ebx
c000ffd1:	5e                   	pop    esi
c000ffd2:	c3                   	ret    
c000ffd3:	83 ec 0c             	sub    esp,0xc
c000ffd6:	a3 cc e3 02 c0       	mov    ds:0xc002e3cc,eax
c000ffdb:	50                   	push   eax
c000ffdc:	e8 8b 09 00 00       	call   c001096c <VgaText::updateRAMUsageDisplay(int)>
c000ffe1:	83 c4 10             	add    esp,0x10
c000ffe4:	eb c6                	jmp    c000ffac <Phys::allocatePage()+0xcc>
c000ffe6:	83 ec 08             	sub    esp,0x8
c000ffe9:	50                   	push   eax
c000ffea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffee:	68 5c a2 02 c0       	push   0xc002a25c
c000fff3:	e8 ce 2e 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c000fff8:	83 c4 10             	add    esp,0x10
c000fffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffff:	eb cc                	jmp    c000ffcd <Phys::allocatePage()+0xed>

c0010001 <Phys::allocateContiguousPages(int)>:
c0010001:	57                   	push   edi
c0010002:	56                   	push   esi
c0010003:	53                   	push   ebx
c0010004:	31 db                	xor    ebx,ebx
c0010006:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001000a:	e8 56 dd 00 00       	call   c001dd65 <lockScheduler()>
c001000f:	85 db                	test   ebx,ebx
c0010011:	75 11                	jne    c0010024 <Phys::allocateContiguousPages(int)+0x23>
c0010013:	e8 c8 fe ff ff       	call   c000fee0 <Phys::allocatePage()>
c0010018:	83 ff 01             	cmp    edi,0x1
c001001b:	89 c6                	mov    esi,eax
c001001d:	74 21                	je     c0010040 <Phys::allocateContiguousPages(int)+0x3f>
c001001f:	bb 01 00 00 00       	mov    ebx,0x1
c0010024:	e8 b7 fe ff ff       	call   c000fee0 <Phys::allocatePage()>
c0010029:	89 da                	mov    edx,ebx
c001002b:	c1 e2 0c             	shl    edx,0xc
c001002e:	01 f2                	add    edx,esi
c0010030:	39 c2                	cmp    edx,eax
c0010032:	74 17                	je     c001004b <Phys::allocateContiguousPages(int)+0x4a>
c0010034:	bb 01 00 00 00       	mov    ebx,0x1
c0010039:	89 c6                	mov    esi,eax
c001003b:	83 ff 01             	cmp    edi,0x1
c001003e:	75 e4                	jne    c0010024 <Phys::allocateContiguousPages(int)+0x23>
c0010040:	e8 22 dd 00 00       	call   c001dd67 <unlockScheduler()>
c0010045:	89 f0                	mov    eax,esi
c0010047:	5b                   	pop    ebx
c0010048:	5e                   	pop    esi
c0010049:	5f                   	pop    edi
c001004a:	c3                   	ret    
c001004b:	43                   	inc    ebx
c001004c:	39 fb                	cmp    ebx,edi
c001004e:	75 bf                	jne    c001000f <Phys::allocateContiguousPages(int)+0xe>
c0010050:	e8 12 dd 00 00       	call   c001dd67 <unlockScheduler()>
c0010055:	89 f0                	mov    eax,esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	c3                   	ret    

c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001005b:	56                   	push   esi
c001005c:	53                   	push   ebx
c001005d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010061:	39 1d c8 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3c8,ebx
c0010067:	73 06                	jae    c001006f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010069:	89 1d c8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3c8,ebx
c001006f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010073:	c1 eb 0c             	shr    ebx,0xc
c0010076:	c1 e8 0c             	shr    eax,0xc
c0010079:	39 d8                	cmp    eax,ebx
c001007b:	73 13                	jae    c0010090 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001007d:	6a 00                	push   0x0
c001007f:	8d 70 01             	lea    esi,[eax+0x1]
c0010082:	50                   	push   eax
c0010083:	e8 80 fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c0010088:	5a                   	pop    edx
c0010089:	89 f0                	mov    eax,esi
c001008b:	59                   	pop    ecx
c001008c:	39 f3                	cmp    ebx,esi
c001008e:	75 ed                	jne    c001007d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010090:	5b                   	pop    ebx
c0010091:	5e                   	pop    esi
c0010092:	c3                   	ret    

c0010093 <Phys::physicalMemorySetup(unsigned int)>:
c0010093:	55                   	push   ebp
c0010094:	57                   	push   edi
c0010095:	56                   	push   esi
c0010096:	53                   	push   ebx
c0010097:	31 db                	xor    ebx,ebx
c0010099:	83 ec 40             	sub    esp,0x40
c001009c:	6a 30                	push   0x30
c001009e:	6a 00                	push   0x0
c00100a0:	68 e0 e3 02 c0       	push   0xc002e3e0
c00100a5:	e8 ce 06 ff ff       	call   c0000778 <memset>
c00100aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100b3:	05 00 10 00 00       	add    eax,0x1000
c00100b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	83 ec 08             	sub    esp,0x8
c00100c2:	6a 01                	push   0x1
c00100c4:	53                   	push   ebx
c00100c5:	43                   	inc    ebx
c00100c6:	e8 3d fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c00100cb:	83 c4 10             	add    esp,0x10
c00100ce:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100d4:	75 e9                	jne    c00100bf <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100d6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100dd:	66 85 c0             	test   ax,ax
c00100e0:	0f 84 8e 01 00 00    	je     c0010274 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100f6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100ff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010107:	eb 15                	jmp    c001011e <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010109:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001010d:	83 c3 18             	add    ebx,0x18
c0010110:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010114:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010118:	0f 84 66 01 00 00    	je     c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001011e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010121:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010124:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001012b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001012f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010131:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010134:	01 f0                	add    eax,esi
c0010136:	55                   	push   ebp
c0010137:	11 fa                	adc    edx,edi
c0010139:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001013d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010141:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010145:	56                   	push   esi
c0010146:	68 b4 a2 02 c0       	push   0xc002a2b4
c001014b:	e8 76 2d 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0010150:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	09 f8                	or     eax,edi
c0010159:	0f 85 25 01 00 00    	jne    c0010284 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001015f:	4d                   	dec    ebp
c0010160:	75 a7                	jne    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010162:	ba 00 00 08 00       	mov    edx,0x80000
c0010167:	89 c1                	mov    ecx,eax
c0010169:	39 f2                	cmp    edx,esi
c001016b:	19 f9                	sbb    ecx,edi
c001016d:	0f 82 a7 00 00 00    	jb     c001021a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010173:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010177:	89 c1                	mov    ecx,eax
c0010179:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001017d:	0f 83 97 00 00 00    	jae    c001021a <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010183:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010188:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001018c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010190:	39 fa                	cmp    edx,edi
c0010192:	19 e8                	sbb    eax,ebp
c0010194:	0f 82 14 01 00 00    	jb     c00102ae <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001019a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101ad:	83 d5 ff             	adc    ebp,0xffffffff
c00101b0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101b4:	31 c0                	xor    eax,eax
c00101b6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101ba:	39 fa                	cmp    edx,edi
c00101bc:	89 c1                	mov    ecx,eax
c00101be:	19 e9                	sbb    ecx,ebp
c00101c0:	0f 83 43 ff ff ff    	jae    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c6:	be 00 00 08 00       	mov    esi,0x80000
c00101cb:	50                   	push   eax
c00101cc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101d0:	57                   	push   edi
c00101d1:	56                   	push   esi
c00101d2:	68 d8 a2 02 c0       	push   0xc002a2d8
c00101d7:	e8 ea 2c 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00101dc:	5a                   	pop    edx
c00101dd:	59                   	pop    ecx
c00101de:	57                   	push   edi
c00101df:	56                   	push   esi
c00101e0:	e8 76 fe ff ff       	call   c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ed:	83 c4 0c             	add    esp,0xc
c00101f0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101f4:	03 05 d4 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3d4
c00101fa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010201:	a3 d4 e3 02 c0       	mov    ds:0xc002e3d4,eax
c0010206:	52                   	push   edx
c0010207:	50                   	push   eax
c0010208:	68 98 a2 02 c0       	push   0xc002a298
c001020d:	e8 b4 2c 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0010212:	83 c4 10             	add    esp,0x10
c0010215:	e9 ef fe ff ff       	jmp    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001021a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001021e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010226:	39 ea                	cmp    edx,ebp
c0010228:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c001022c:	0f 82 d7 fe ff ff    	jb     c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010232:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010237:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001023b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001023f:	0f 83 c4 fe ff ff    	jae    c0010109 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010245:	39 ee                	cmp    esi,ebp
c0010247:	89 f8                	mov    eax,edi
c0010249:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001024d:	0f 83 78 ff ff ff    	jae    c00101cb <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010253:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010257:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001025b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001025f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010263:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001026b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001026f:	e9 57 ff ff ff       	jmp    c00101cb <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010274:	83 ec 0c             	sub    esp,0xc
c0010277:	68 8a a2 02 c0       	push   0xc002a28a
c001027c:	e8 ea a2 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0010281:	83 c4 10             	add    esp,0x10
c0010284:	bb 40 01 00 00       	mov    ebx,0x140
c0010289:	83 ec 08             	sub    esp,0x8
c001028c:	6a 00                	push   0x0
c001028e:	53                   	push   ebx
c001028f:	43                   	inc    ebx
c0010290:	e8 73 fb ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c0010295:	ff 05 d4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3d4
c001029b:	83 c4 10             	add    esp,0x10
c001029e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102a4:	75 e3                	jne    c0010289 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102a6:	83 c4 3c             	add    esp,0x3c
c00102a9:	5b                   	pop    ebx
c00102aa:	5e                   	pop    esi
c00102ab:	5f                   	pop    edi
c00102ac:	5d                   	pop    ebp
c00102ad:	c3                   	ret    
c00102ae:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102be:	e9 d7 fe ff ff       	jmp    c001019a <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102c3:	90                   	nop

c00102c4 <Pipe::isAtty()>:
c00102c4:	31 c0                	xor    eax,eax
c00102c6:	c3                   	ret    
c00102c7:	90                   	nop

c00102c8 <Pipe::~Pipe()>:
c00102c8:	83 ec 0c             	sub    esp,0xc
c00102cb:	ba 44 a3 02 c0       	mov    edx,0xc002a344
c00102d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d4:	89 10                	mov    DWORD PTR [eax],edx
c00102d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102da:	83 ec 0c             	sub    esp,0xc
c00102dd:	50                   	push   eax
c00102de:	e8 37 16 00 00       	call   c001191a <UnixFile::~UnixFile()>
c00102e3:	83 c4 10             	add    esp,0x10
c00102e6:	90                   	nop
c00102e7:	83 c4 0c             	add    esp,0xc
c00102ea:	c3                   	ret    
c00102eb:	90                   	nop

c00102ec <Pipe::~Pipe()>:
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	83 ec 0c             	sub    esp,0xc
c00102f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f6:	e8 cd ff ff ff       	call   c00102c8 <Pipe::~Pipe()>
c00102fb:	83 c4 10             	add    esp,0x10
c00102fe:	83 ec 08             	sub    esp,0x8
c0010301:	6a 20                	push   0x20
c0010303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010307:	e8 da 2a 00 00       	call   c0012de6 <operator delete(void*, unsigned long)>
c001030c:	83 c4 10             	add    esp,0x10
c001030f:	83 c4 0c             	add    esp,0xc
c0010312:	c3                   	ret    
c0010313:	90                   	nop

c0010314 <Pipe::read(unsigned long long, void*, int*)>:
c0010314:	55                   	push   ebp
c0010315:	57                   	push   edi
c0010316:	56                   	push   esi
c0010317:	53                   	push   ebx
c0010318:	83 ec 1c             	sub    esp,0x1c
c001031b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001031f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010323:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010327:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001032a:	89 c8                	mov    eax,ecx
c001032c:	99                   	cdq    
c001032d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010331:	74 19                	je     c001034c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010333:	39 f9                	cmp    ecx,edi
c0010335:	89 d1                	mov    ecx,edx
c0010337:	19 f1                	sbb    ecx,esi
c0010339:	73 11                	jae    c001034c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001033b:	e8 25 da 00 00       	call   c001dd65 <lockScheduler()>
c0010340:	e8 5b dd 00 00       	call   c001e0a0 <schedule()>
c0010345:	e8 1d da 00 00       	call   c001dd67 <unlockScheduler()>
c001034a:	eb db                	jmp    c0010327 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001034c:	39 f8                	cmp    eax,edi
c001034e:	89 d1                	mov    ecx,edx
c0010350:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010354:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010358:	19 f1                	sbb    ecx,esi
c001035a:	73 08                	jae    c0010364 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001035c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010360:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010364:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010367:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001036a:	29 c6                	sub    esi,eax
c001036c:	89 f1                	mov    ecx,esi
c001036e:	c1 f9 1f             	sar    ecx,0x1f
c0010371:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010375:	89 ca                	mov    edx,ecx
c0010377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001037b:	19 d1                	sbb    ecx,edx
c001037d:	73 04                	jae    c0010383 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001037f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010383:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010387:	89 fd                	mov    ebp,edi
c0010389:	29 f5                	sub    ebp,esi
c001038b:	85 f6                	test   esi,esi
c001038d:	74 12                	je     c00103a1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001038f:	52                   	push   edx
c0010390:	56                   	push   esi
c0010391:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010394:	50                   	push   eax
c0010395:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010399:	e8 a6 03 ff ff       	call   c0000744 <memcpy>
c001039e:	83 c4 10             	add    esp,0x10
c00103a1:	85 ed                	test   ebp,ebp
c00103a3:	74 12                	je     c00103b7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103a5:	50                   	push   eax
c00103a6:	55                   	push   ebp
c00103a7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103aa:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103ae:	56                   	push   esi
c00103af:	e8 90 03 ff ff       	call   c0000744 <memcpy>
c00103b4:	83 c4 10             	add    esp,0x10
c00103b7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103bd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103c0:	99                   	cdq    
c00103c1:	89 f7                	mov    edi,esi
c00103c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103cb:	c1 ff 1f             	sar    edi,0x1f
c00103ce:	57                   	push   edi
c00103cf:	56                   	push   esi
c00103d0:	52                   	push   edx
c00103d1:	50                   	push   eax
c00103d2:	e8 95 66 01 00       	call   c0026a6c <__umoddi3>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103dd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103e2:	75 10                	jne    c00103f4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103e4:	83 ec 0c             	sub    esp,0xc
c00103e7:	68 01 a3 02 c0       	push   0xc002a301
c00103ec:	e8 7a a1 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00103f1:	83 c4 10             	add    esp,0x10
c00103f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103fc:	89 10                	mov    DWORD PTR [eax],edx
c00103fe:	83 c4 1c             	add    esp,0x1c
c0010401:	31 c0                	xor    eax,eax
c0010403:	5b                   	pop    ebx
c0010404:	5e                   	pop    esi
c0010405:	5f                   	pop    edi
c0010406:	5d                   	pop    ebp
c0010407:	c3                   	ret    

c0010408 <Pipe::write(unsigned long long, void*, int*)>:
c0010408:	55                   	push   ebp
c0010409:	57                   	push   edi
c001040a:	56                   	push   esi
c001040b:	53                   	push   ebx
c001040c:	83 ec 1c             	sub    esp,0x1c
c001040f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010413:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010417:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001041b:	89 04 24             	mov    DWORD PTR [esp],eax
c001041e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010421:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010424:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010428:	89 de                	mov    esi,ebx
c001042a:	89 df                	mov    edi,ebx
c001042c:	c1 ff 1f             	sar    edi,0x1f
c001042f:	01 c6                	add    esi,eax
c0010431:	89 c8                	mov    eax,ecx
c0010433:	11 d7                	adc    edi,edx
c0010435:	99                   	cdq    
c0010436:	39 f1                	cmp    ecx,esi
c0010438:	89 d0                	mov    eax,edx
c001043a:	19 f8                	sbb    eax,edi
c001043c:	b8 01 00 00 00       	mov    eax,0x1
c0010441:	0f 82 80 00 00 00    	jb     c00104c7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010447:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001044a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001044d:	01 d8                	add    eax,ebx
c001044f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010453:	99                   	cdq    
c0010454:	f7 f9                	idiv   ecx
c0010456:	29 d1                	sub    ecx,edx
c0010458:	89 d7                	mov    edi,edx
c001045a:	89 c8                	mov    eax,ecx
c001045c:	99                   	cdq    
c001045d:	39 ce                	cmp    esi,ecx
c001045f:	19 d3                	sbb    ebx,edx
c0010461:	bb 00 00 00 00       	mov    ebx,0x0
c0010466:	72 04                	jb     c001046c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010468:	89 f3                	mov    ebx,esi
c001046a:	29 cb                	sub    ebx,ecx
c001046c:	89 f1                	mov    ecx,esi
c001046e:	29 d9                	sub    ecx,ebx
c0010470:	74 1a                	je     c001048c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010472:	52                   	push   edx
c0010473:	51                   	push   ecx
c0010474:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010478:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001047c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001047f:	57                   	push   edi
c0010480:	e8 bf 02 ff ff       	call   c0000744 <memcpy>
c0010485:	83 c4 10             	add    esp,0x10
c0010488:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001048c:	85 db                	test   ebx,ebx
c001048e:	74 12                	je     c00104a2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010490:	50                   	push   eax
c0010491:	53                   	push   ebx
c0010492:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010496:	51                   	push   ecx
c0010497:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001049a:	e8 a5 02 ff ff       	call   c0000744 <memcpy>
c001049f:	83 c4 10             	add    esp,0x10
c00104a2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104a5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104aa:	75 10                	jne    c00104bc <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104ac:	83 ec 0c             	sub    esp,0xc
c00104af:	68 1d a3 02 c0       	push   0xc002a31d
c00104b4:	e8 b2 a0 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00104b9:	83 c4 10             	add    esp,0x10
c00104bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104c0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104c3:	89 38                	mov    DWORD PTR [eax],edi
c00104c5:	31 c0                	xor    eax,eax
c00104c7:	83 c4 1c             	add    esp,0x1c
c00104ca:	5b                   	pop    ebx
c00104cb:	5e                   	pop    esi
c00104cc:	5f                   	pop    edi
c00104cd:	5d                   	pop    ebp
c00104ce:	c3                   	ret    
c00104cf:	90                   	nop

c00104d0 <Pipe::Pipe(int)>:
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d7:	83 ec 08             	sub    esp,0x8
c00104da:	6a 00                	push   0x0
c00104dc:	50                   	push   eax
c00104dd:	e8 56 12 00 00       	call   c0011738 <UnixFile::UnixFile(int)>
c00104e2:	83 c4 10             	add    esp,0x10
c00104e5:	ba 44 a3 02 c0       	mov    edx,0xc002a344
c00104ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ee:	89 10                	mov    DWORD PTR [eax],edx
c00104f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104f8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ff:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010515:	83 ec 0c             	sub    esp,0xc
c0010518:	50                   	push   eax
c0010519:	e8 25 f3 ff ff       	call   c000f843 <malloc>
c001051e:	83 c4 10             	add    esp,0x10
c0010521:	89 c2                	mov    edx,eax
c0010523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010527:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001052a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010532:	90                   	nop
c0010533:	83 c4 0c             	add    esp,0xc
c0010536:	c3                   	ret    
c0010537:	90                   	nop

c0010538 <VgaText::isAtty()>:
c0010538:	b0 01                	mov    al,0x1
c001053a:	c3                   	ret    
c001053b:	90                   	nop

c001053c <VgaText::~VgaText()>:
c001053c:	83 ec 0c             	sub    esp,0xc
c001053f:	ba 00 a4 02 c0       	mov    edx,0xc002a400
c0010544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010548:	89 10                	mov    DWORD PTR [eax],edx
c001054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054e:	83 ec 0c             	sub    esp,0xc
c0010551:	50                   	push   eax
c0010552:	e8 c3 13 00 00       	call   c001191a <UnixFile::~UnixFile()>
c0010557:	83 c4 10             	add    esp,0x10
c001055a:	90                   	nop
c001055b:	83 c4 0c             	add    esp,0xc
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <VgaText::~VgaText()>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	83 ec 0c             	sub    esp,0xc
c0010566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056a:	e8 cd ff ff ff       	call   c001053c <VgaText::~VgaText()>
c001056f:	83 c4 10             	add    esp,0x10
c0010572:	83 ec 08             	sub    esp,0x8
c0010575:	68 60 12 00 00       	push   0x1260
c001057a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057e:	e8 63 28 00 00       	call   c0012de6 <operator delete(void*, unsigned long)>
c0010583:	83 c4 10             	add    esp,0x10
c0010586:	83 c4 0c             	add    esp,0xc
c0010589:	c3                   	ret    

c001058a <VgaText::read(unsigned long long, void*, int*)>:
c001058a:	83 ec 10             	sub    esp,0x10
c001058d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010591:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010599:	e8 ca 5c 00 00       	call   c0016268 <readKeyboard(VgaText*, char*, unsigned long)>
c001059e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105a2:	89 02                	mov    DWORD PTR [edx],eax
c00105a4:	31 c0                	xor    eax,eax
c00105a6:	83 c4 1c             	add    esp,0x1c
c00105a9:	c3                   	ret    

c00105aa <setTerminalScrollLock(bool)>:
c00105aa:	c3                   	ret    

c00105ab <addToTerminalCycle(VgaText*)>:
c00105ab:	8b 15 60 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e460
c00105b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b5:	85 d2                	test   edx,edx
c00105b7:	75 0c                	jne    c00105c5 <addToTerminalCycle(VgaText*)+0x1a>
c00105b9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105bf:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c00105c4:	c3                   	ret    
c00105c5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105cb:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105d1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105d7:	c3                   	ret    

c00105d8 <installVgaTextImplementation()>:
c00105d8:	83 ec 10             	sub    esp,0x10
c00105db:	6a 20                	push   0x20
c00105dd:	6a 00                	push   0x0
c00105df:	68 40 e4 02 c0       	push   0xc002e440
c00105e4:	e8 8f 01 ff ff       	call   c0000778 <memset>
c00105e9:	83 c4 1c             	add    esp,0x1c
c00105ec:	c3                   	ret    

c00105ed <scrollTerminalScrollLock(int)>:
c00105ed:	c3                   	ret    

c00105ee <VgaText::load()>:
c00105ee:	53                   	push   ebx
c00105ef:	31 c0                	xor    eax,eax
c00105f1:	83 ec 58             	sub    esp,0x58
c00105f4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105f8:	89 e2                	mov    edx,esp
c00105fa:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105fe:	40                   	inc    eax
c00105ff:	83 f8 50             	cmp    eax,0x50
c0010602:	75 f6                	jne    c00105fa <VgaText::load()+0xc>
c0010604:	31 c0                	xor    eax,eax
c0010606:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001060d:	84 c9                	test   cl,cl
c001060f:	74 06                	je     c0010617 <VgaText::load()+0x29>
c0010611:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010614:	40                   	inc    eax
c0010615:	eb ef                	jmp    c0010606 <VgaText::load()+0x18>
c0010617:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001061d:	85 c0                	test   eax,eax
c001061f:	74 09                	je     c001062a <VgaText::load()+0x3c>
c0010621:	51                   	push   ecx
c0010622:	51                   	push   ecx
c0010623:	52                   	push   edx
c0010624:	53                   	push   ebx
c0010625:	ff d0                	call   eax
c0010627:	83 c4 10             	add    esp,0x10
c001062a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010630:	85 c0                	test   eax,eax
c0010632:	74 09                	je     c001063d <VgaText::load()+0x4f>
c0010634:	83 ec 0c             	sub    esp,0xc
c0010637:	53                   	push   ebx
c0010638:	ff d0                	call   eax
c001063a:	83 c4 10             	add    esp,0x10
c001063d:	83 c4 58             	add    esp,0x58
c0010640:	5b                   	pop    ebx
c0010641:	c3                   	ret    

c0010642 <VgaText::updateCursor()>:
c0010642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010646:	39 05 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,eax
c001064c:	75 0c                	jne    c001065a <VgaText::updateCursor()+0x18>
c001064e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010654:	85 c0                	test   eax,eax
c0010656:	74 02                	je     c001065a <VgaText::updateCursor()+0x18>
c0010658:	ff e0                	jmp    eax
c001065a:	c3                   	ret    
c001065b:	90                   	nop

c001065c <VgaText::showCursor(bool)>:
c001065c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010664:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::disableBlink(bool)>:
c001066c:	56                   	push   esi
c001066d:	53                   	push   ebx
c001066e:	51                   	push   ecx
c001066f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010673:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010677:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c001067d:	75 18                	jne    c0010697 <VgaText::disableBlink(bool)+0x2b>
c001067f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010685:	85 c0                	test   eax,eax
c0010687:	74 0e                	je     c0010697 <VgaText::disableBlink(bool)+0x2b>
c0010689:	89 f1                	mov    ecx,esi
c001068b:	52                   	push   edx
c001068c:	52                   	push   edx
c001068d:	0f b6 d1             	movzx  edx,cl
c0010690:	52                   	push   edx
c0010691:	53                   	push   ebx
c0010692:	ff d0                	call   eax
c0010694:	83 c4 10             	add    esp,0x10
c0010697:	89 f0                	mov    eax,esi
c0010699:	83 f0 01             	xor    eax,0x1
c001069c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106a2:	58                   	pop    eax
c00106a3:	5b                   	pop    ebx
c00106a4:	5e                   	pop    esi
c00106a5:	c3                   	ret    

c00106a6 <VgaText::doANSI_SGR(int)>:
c00106a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ae:	85 d2                	test   edx,edx
c00106b0:	75 14                	jne    c00106c6 <VgaText::doANSI_SGR(int)+0x20>
c00106b2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106b8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106be:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106c4:	eb 65                	jmp    c001072b <VgaText::doANSI_SGR(int)+0x85>
c00106c6:	83 fa 07             	cmp    edx,0x7
c00106c9:	75 14                	jne    c00106df <VgaText::doANSI_SGR(int)+0x39>
c00106cb:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106d1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106d7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106dd:	eb 4c                	jmp    c001072b <VgaText::doANSI_SGR(int)+0x85>
c00106df:	83 fa 1b             	cmp    edx,0x1b
c00106e2:	74 ce                	je     c00106b2 <VgaText::doANSI_SGR(int)+0xc>
c00106e4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106e7:	83 f9 07             	cmp    ecx,0x7
c00106ea:	77 09                	ja     c00106f5 <VgaText::doANSI_SGR(int)+0x4f>
c00106ec:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c00106f3:	eb 20                	jmp    c0010715 <VgaText::doANSI_SGR(int)+0x6f>
c00106f5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106f8:	83 f9 07             	cmp    ecx,0x7
c00106fb:	77 09                	ja     c0010706 <VgaText::doANSI_SGR(int)+0x60>
c00106fd:	8b 14 8d e0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d20]
c0010704:	eb 25                	jmp    c001072b <VgaText::doANSI_SGR(int)+0x85>
c0010706:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010709:	83 f9 07             	cmp    ecx,0x7
c001070c:	77 0e                	ja     c001071c <VgaText::doANSI_SGR(int)+0x76>
c001070e:	8b 14 95 98 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e68]
c0010715:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001071b:	c3                   	ret    
c001071c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001071f:	83 f9 07             	cmp    ecx,0x7
c0010722:	77 0d                	ja     c0010731 <VgaText::doANSI_SGR(int)+0x8b>
c0010724:	8b 14 95 70 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e90]
c001072b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010731:	c3                   	ret    

c0010732 <VgaText::setDefaultBgColour(VgaColour)>:
c0010732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010736:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001073a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010740:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010746:	c3                   	ret    
c0010747:	90                   	nop

c0010748 <VgaText::setDefaultFgColour(VgaColour)>:
c0010748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001074c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010750:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010756:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001075c:	c3                   	ret    
c001075d:	90                   	nop

c001075e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001075e:	53                   	push   ebx
c001075f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010763:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010767:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001076b:	51                   	push   ecx
c001076c:	e8 c1 ff ff ff       	call   c0010732 <VgaText::setDefaultBgColour(VgaColour)>
c0010771:	58                   	pop    eax
c0010772:	5a                   	pop    edx
c0010773:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010777:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001077b:	5b                   	pop    ebx
c001077c:	eb ca                	jmp    c0010748 <VgaText::setDefaultFgColour(VgaColour)>

c001077e <VgaText::combineColours(unsigned char, unsigned char)>:
c001077e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010782:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010787:	83 e0 0f             	and    eax,0xf
c001078a:	c1 e2 04             	shl    edx,0x4
c001078d:	09 d0                	or     eax,edx
c001078f:	c3                   	ret    

c0010790 <VgaText::scrollScreen()>:
c0010790:	57                   	push   edi
c0010791:	56                   	push   esi
c0010792:	be 01 00 00 00       	mov    esi,0x1
c0010797:	53                   	push   ebx
c0010798:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001079c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107a2:	31 ff                	xor    edi,edi
c00107a4:	01 d9                	add    ecx,ebx
c00107a6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107a9:	83 fe 17             	cmp    esi,0x17
c00107ac:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107b2:	75 28                	jne    c00107dc <VgaText::scrollScreen()+0x4c>
c00107b4:	f7 c7 01 00 00 00    	test   edi,0x1
c00107ba:	74 1c                	je     c00107d8 <VgaText::scrollScreen()+0x48>
c00107bc:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107c3:	50                   	push   eax
c00107c4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107cb:	50                   	push   eax
c00107cc:	e8 ad ff ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c00107d1:	5a                   	pop    edx
c00107d2:	5a                   	pop    edx
c00107d3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107d6:	eb 04                	jmp    c00107dc <VgaText::scrollScreen()+0x4c>
c00107d8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107dc:	47                   	inc    edi
c00107dd:	41                   	inc    ecx
c00107de:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107e4:	75 c0                	jne    c00107a6 <VgaText::scrollScreen()+0x16>
c00107e6:	46                   	inc    esi
c00107e7:	83 fe 18             	cmp    esi,0x18
c00107ea:	75 b0                	jne    c001079c <VgaText::scrollScreen()+0xc>
c00107ec:	39 1d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebx
c00107f2:	75 24                	jne    c0010818 <VgaText::scrollScreen()+0x88>
c00107f4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107fb:	74 08                	je     c0010805 <VgaText::scrollScreen()+0x75>
c00107fd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010803:	eb 13                	jmp    c0010818 <VgaText::scrollScreen()+0x88>
c0010805:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001080b:	85 c0                	test   eax,eax
c001080d:	74 09                	je     c0010818 <VgaText::scrollScreen()+0x88>
c001080f:	83 ec 0c             	sub    esp,0xc
c0010812:	53                   	push   ebx
c0010813:	ff d0                	call   eax
c0010815:	83 c4 10             	add    esp,0x10
c0010818:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001081c:	5b                   	pop    ebx
c001081d:	5e                   	pop    esi
c001081e:	5f                   	pop    edi
c001081f:	e9 1e fe ff ff       	jmp    c0010642 <VgaText::updateCursor()>

c0010824 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010824:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010829:	c1 e0 08             	shl    eax,0x8
c001082c:	89 c2                	mov    edx,eax
c001082e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010833:	09 d0                	or     eax,edx
c0010835:	c3                   	ret    

c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010836:	53                   	push   ebx
c0010837:	83 ec 08             	sub    esp,0x8
c001083a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001083e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010843:	50                   	push   eax
c0010844:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010849:	50                   	push   eax
c001084a:	e8 2f ff ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c001084f:	5a                   	pop    edx
c0010850:	0f b6 c0             	movzx  eax,al
c0010853:	5b                   	pop    ebx
c0010854:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010859:	50                   	push   eax
c001085a:	53                   	push   ebx
c001085b:	e8 c4 ff ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010860:	5a                   	pop    edx
c0010861:	5a                   	pop    edx
c0010862:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010868:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001086c:	0f b7 d2             	movzx  edx,dx
c001086f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010874:	39 0d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ecx
c001087a:	75 14                	jne    c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001087c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010882:	85 c0                	test   eax,eax
c0010884:	74 0a                	je     c0010890 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010886:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001088a:	83 c4 08             	add    esp,0x8
c001088d:	5b                   	pop    ebx
c001088e:	ff e0                	jmp    eax
c0010890:	83 c4 08             	add    esp,0x8
c0010893:	5b                   	pop    ebx
c0010894:	c3                   	ret    
c0010895:	90                   	nop

c0010896 <VgaText::getCursorX()>:
c0010896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001089a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108a0:	c3                   	ret    
c00108a1:	90                   	nop

c00108a2 <VgaText::getCursorY()>:
c00108a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108ac:	c3                   	ret    
c00108ad:	90                   	nop

c00108ae <VgaText::setCursor(int, int)>:
c00108ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108b6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108c0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108c6:	e9 77 fd ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c00108cb:	90                   	nop

c00108cc <VgaText::setCursorX(int)>:
c00108cc:	83 ec 10             	sub    esp,0x10
c00108cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108d3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108dd:	50                   	push   eax
c00108de:	e8 cb ff ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c00108e3:	83 c4 1c             	add    esp,0x1c
c00108e6:	c3                   	ret    
c00108e7:	90                   	nop

c00108e8 <VgaText::setCursorY(int)>:
c00108e8:	83 ec 10             	sub    esp,0x10
c00108eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108f9:	50                   	push   eax
c00108fa:	e8 af ff ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c00108ff:	83 c4 1c             	add    esp,0x1c
c0010902:	c3                   	ret    
c0010903:	90                   	nop

c0010904 <VgaText::incrementCursor(bool)>:
c0010904:	56                   	push   esi
c0010905:	53                   	push   ebx
c0010906:	51                   	push   ecx
c0010907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001090b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001090f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010915:	40                   	inc    eax
c0010916:	83 f8 50             	cmp    eax,0x50
c0010919:	74 08                	je     c0010923 <VgaText::incrementCursor(bool)+0x1f>
c001091b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010921:	eb 33                	jmp    c0010956 <VgaText::incrementCursor(bool)+0x52>
c0010923:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010929:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010933:	8d 50 01             	lea    edx,[eax+0x1]
c0010936:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001093c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010942:	75 12                	jne    c0010956 <VgaText::incrementCursor(bool)+0x52>
c0010944:	83 ec 0c             	sub    esp,0xc
c0010947:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001094d:	53                   	push   ebx
c001094e:	e8 3d fe ff ff       	call   c0010790 <VgaText::scrollScreen()>
c0010953:	83 c4 10             	add    esp,0x10
c0010956:	89 f0                	mov    eax,esi
c0010958:	84 c0                	test   al,al
c001095a:	74 0c                	je     c0010968 <VgaText::incrementCursor(bool)+0x64>
c001095c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010960:	5a                   	pop    edx
c0010961:	5b                   	pop    ebx
c0010962:	5e                   	pop    esi
c0010963:	e9 da fc ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c0010968:	58                   	pop    eax
c0010969:	5b                   	pop    ebx
c001096a:	5e                   	pop    esi
c001096b:	c3                   	ret    

c001096c <VgaText::updateRAMUsageDisplay(int)>:
c001096c:	56                   	push   esi
c001096d:	8b 35 c0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2c0
c0010973:	53                   	push   ebx
c0010974:	bb 0a 00 00 00       	mov    ebx,0xa
c0010979:	6a 0f                	push   0xf
c001097b:	6a 00                	push   0x0
c001097d:	e8 fc fd ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c0010982:	5a                   	pop    edx
c0010983:	59                   	pop    ecx
c0010984:	0f b6 c8             	movzx  ecx,al
c0010987:	51                   	push   ecx
c0010988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098c:	99                   	cdq    
c001098d:	f7 fb                	idiv   ebx
c001098f:	89 d3                	mov    ebx,edx
c0010991:	83 c0 30             	add    eax,0x30
c0010994:	83 c3 30             	add    ebx,0x30
c0010997:	0f be c0             	movsx  eax,al
c001099a:	0f b6 db             	movzx  ebx,bl
c001099d:	50                   	push   eax
c001099e:	e8 81 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c00109a3:	5a                   	pop    edx
c00109a4:	5a                   	pop    edx
c00109a5:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109ac:	51                   	push   ecx
c00109ad:	53                   	push   ebx
c00109ae:	e8 71 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b3:	5b                   	pop    ebx
c00109b4:	5a                   	pop    edx
c00109b5:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109bc:	51                   	push   ecx
c00109bd:	6a 25                	push   0x25
c00109bf:	e8 60 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c4:	59                   	pop    ecx
c00109c5:	5b                   	pop    ebx
c00109c6:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109cd:	5b                   	pop    ebx
c00109ce:	5e                   	pop    esi
c00109cf:	c3                   	ret    

c00109d0 <VgaText::updateDiskUsage()>:
c00109d0:	55                   	push   ebp
c00109d1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109d6:	57                   	push   edi
c00109d7:	8b 3d c0 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2c0
c00109dd:	56                   	push   esi
c00109de:	53                   	push   ebx
c00109df:	6a 0f                	push   0xf
c00109e1:	6a 00                	push   0x0
c00109e3:	e8 96 fd ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c00109e8:	5a                   	pop    edx
c00109e9:	0f b6 d8             	movzx  ebx,al
c00109ec:	59                   	pop    ecx
c00109ed:	8b 35 28 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032928
c00109f3:	53                   	push   ebx
c00109f4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109f9:	89 f0                	mov    eax,esi
c00109fb:	99                   	cdq    
c00109fc:	f7 fd                	idiv   ebp
c00109fe:	99                   	cdq    
c00109ff:	f7 f9                	idiv   ecx
c0010a01:	8d 42 30             	lea    eax,[edx+0x30]
c0010a04:	0f b6 c0             	movzx  eax,al
c0010a07:	50                   	push   eax
c0010a08:	e8 17 fe ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a0d:	5d                   	pop    ebp
c0010a0e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a13:	5a                   	pop    edx
c0010a14:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a18:	53                   	push   ebx
c0010a19:	89 f0                	mov    eax,esi
c0010a1b:	99                   	cdq    
c0010a1c:	f7 fd                	idiv   ebp
c0010a1e:	99                   	cdq    
c0010a1f:	f7 f9                	idiv   ecx
c0010a21:	8d 42 30             	lea    eax,[edx+0x30]
c0010a24:	0f b6 c0             	movzx  eax,al
c0010a27:	50                   	push   eax
c0010a28:	e8 f7 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2d:	5d                   	pop    ebp
c0010a2e:	bd 64 00 00 00       	mov    ebp,0x64
c0010a33:	5a                   	pop    edx
c0010a34:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a3b:	53                   	push   ebx
c0010a3c:	89 f0                	mov    eax,esi
c0010a3e:	99                   	cdq    
c0010a3f:	f7 fd                	idiv   ebp
c0010a41:	99                   	cdq    
c0010a42:	f7 f9                	idiv   ecx
c0010a44:	8d 42 30             	lea    eax,[edx+0x30]
c0010a47:	0f b6 c0             	movzx  eax,al
c0010a4a:	50                   	push   eax
c0010a4b:	e8 d4 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a50:	5d                   	pop    ebp
c0010a51:	5a                   	pop    edx
c0010a52:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a59:	53                   	push   ebx
c0010a5a:	89 f0                	mov    eax,esi
c0010a5c:	99                   	cdq    
c0010a5d:	f7 f9                	idiv   ecx
c0010a5f:	89 d6                	mov    esi,edx
c0010a61:	99                   	cdq    
c0010a62:	f7 f9                	idiv   ecx
c0010a64:	8d 42 30             	lea    eax,[edx+0x30]
c0010a67:	0f b6 c0             	movzx  eax,al
c0010a6a:	50                   	push   eax
c0010a6b:	e8 b4 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a70:	5d                   	pop    ebp
c0010a71:	5a                   	pop    edx
c0010a72:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a79:	53                   	push   ebx
c0010a7a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a7d:	0f b6 f0             	movzx  esi,al
c0010a80:	56                   	push   esi
c0010a81:	e8 9e fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a86:	5e                   	pop    esi
c0010a87:	8b 35 24 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032924
c0010a8d:	5d                   	pop    ebp
c0010a8e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a95:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a9a:	53                   	push   ebx
c0010a9b:	89 f0                	mov    eax,esi
c0010a9d:	99                   	cdq    
c0010a9e:	f7 fd                	idiv   ebp
c0010aa0:	99                   	cdq    
c0010aa1:	f7 f9                	idiv   ecx
c0010aa3:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa6:	0f b6 c0             	movzx  eax,al
c0010aa9:	50                   	push   eax
c0010aaa:	e8 75 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aaf:	5a                   	pop    edx
c0010ab0:	5d                   	pop    ebp
c0010ab1:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ab8:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010abd:	53                   	push   ebx
c0010abe:	89 f0                	mov    eax,esi
c0010ac0:	99                   	cdq    
c0010ac1:	f7 fd                	idiv   ebp
c0010ac3:	99                   	cdq    
c0010ac4:	f7 f9                	idiv   ecx
c0010ac6:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac9:	0f b6 c0             	movzx  eax,al
c0010acc:	50                   	push   eax
c0010acd:	e8 52 fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad2:	5a                   	pop    edx
c0010ad3:	5d                   	pop    ebp
c0010ad4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010adb:	bd 64 00 00 00       	mov    ebp,0x64
c0010ae0:	53                   	push   ebx
c0010ae1:	89 f0                	mov    eax,esi
c0010ae3:	99                   	cdq    
c0010ae4:	f7 fd                	idiv   ebp
c0010ae6:	99                   	cdq    
c0010ae7:	f7 f9                	idiv   ecx
c0010ae9:	83 c2 30             	add    edx,0x30
c0010aec:	0f b6 d2             	movzx  edx,dl
c0010aef:	52                   	push   edx
c0010af0:	e8 2f fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af5:	5a                   	pop    edx
c0010af6:	5d                   	pop    ebp
c0010af7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010afe:	53                   	push   ebx
c0010aff:	89 f0                	mov    eax,esi
c0010b01:	99                   	cdq    
c0010b02:	f7 f9                	idiv   ecx
c0010b04:	89 d6                	mov    esi,edx
c0010b06:	99                   	cdq    
c0010b07:	f7 f9                	idiv   ecx
c0010b09:	8d 42 30             	lea    eax,[edx+0x30]
c0010b0c:	0f b6 c0             	movzx  eax,al
c0010b0f:	50                   	push   eax
c0010b10:	e8 0f fd ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b15:	5a                   	pop    edx
c0010b16:	59                   	pop    ecx
c0010b17:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b1e:	53                   	push   ebx
c0010b1f:	8d 46 30             	lea    eax,[esi+0x30]
c0010b22:	0f b6 f0             	movzx  esi,al
c0010b25:	56                   	push   esi
c0010b26:	e8 f9 fc ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2b:	5b                   	pop    ebx
c0010b2c:	5e                   	pop    esi
c0010b2d:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b34:	5b                   	pop    ebx
c0010b35:	5e                   	pop    esi
c0010b36:	5f                   	pop    edi
c0010b37:	5d                   	pop    ebp
c0010b38:	c3                   	ret    
c0010b39:	90                   	nop

c0010b3a <VgaText::updateTitle()>:
c0010b3a:	53                   	push   ebx
c0010b3b:	31 c0                	xor    eax,eax
c0010b3d:	83 ec 58             	sub    esp,0x58
c0010b40:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b44:	89 e1                	mov    ecx,esp
c0010b46:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b4a:	40                   	inc    eax
c0010b4b:	83 f8 50             	cmp    eax,0x50
c0010b4e:	75 f6                	jne    c0010b46 <VgaText::updateTitle()+0xc>
c0010b50:	31 c0                	xor    eax,eax
c0010b52:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b59:	84 db                	test   bl,bl
c0010b5b:	74 06                	je     c0010b63 <VgaText::updateTitle()+0x29>
c0010b5d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b60:	40                   	inc    eax
c0010b61:	eb ef                	jmp    c0010b52 <VgaText::updateTitle()+0x18>
c0010b63:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b69:	85 c0                	test   eax,eax
c0010b6b:	74 09                	je     c0010b76 <VgaText::updateTitle()+0x3c>
c0010b6d:	53                   	push   ebx
c0010b6e:	53                   	push   ebx
c0010b6f:	51                   	push   ecx
c0010b70:	52                   	push   edx
c0010b71:	ff d0                	call   eax
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	e8 55 fe ff ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0010b7b:	83 c4 58             	add    esp,0x58
c0010b7e:	5b                   	pop    ebx
c0010b7f:	c3                   	ret    

c0010b80 <VgaText::setTitleTextColour(VgaColour)>:
c0010b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b88:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b8e:	eb aa                	jmp    c0010b3a <VgaText::updateTitle()>

c0010b90 <VgaText::setTitleColour(VgaColour)>:
c0010b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b98:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b9e:	eb 9a                	jmp    c0010b3a <VgaText::updateTitle()>

c0010ba0 <VgaText::setTitle(char*)>:
c0010ba0:	53                   	push   ebx
c0010ba1:	83 ec 10             	sub    esp,0x10
c0010ba4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bac:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bb2:	50                   	push   eax
c0010bb3:	e8 7c fc fe ff       	call   c0000834 <strcpy>
c0010bb8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bbc:	83 c4 18             	add    esp,0x18
c0010bbf:	5b                   	pop    ebx
c0010bc0:	e9 75 ff ff ff       	jmp    c0010b3a <VgaText::updateTitle()>
c0010bc5:	90                   	nop

c0010bc6 <VgaText::decrementCursor(bool)>:
c0010bc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bce:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bd4:	85 c0                	test   eax,eax
c0010bd6:	74 07                	je     c0010bdf <VgaText::decrementCursor(bool)+0x19>
c0010bd8:	48                   	dec    eax
c0010bd9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bdf:	84 c9                	test   cl,cl
c0010be1:	74 09                	je     c0010bec <VgaText::decrementCursor(bool)+0x26>
c0010be3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010be7:	e9 56 fa ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c0010bec:	c3                   	ret    
c0010bed:	90                   	nop

c0010bee <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bee:	53                   	push   ebx
c0010bef:	83 ec 08             	sub    esp,0x8
c0010bf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bfa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bfe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c02:	3c 07                	cmp    al,0x7
c0010c04:	75 2a                	jne    c0010c30 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c06:	a1 4c e7 02 c0       	mov    eax,ds:0xc002e74c
c0010c0b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c13:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c1b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c27:	83 c4 08             	add    esp,0x8
c0010c2a:	5b                   	pop    ebx
c0010c2b:	e9 94 30 00 00       	jmp    c0013cc4 <Buzzer::beep(int, int, bool)>
c0010c30:	3c 0d                	cmp    al,0xd
c0010c32:	75 0c                	jne    c0010c40 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c34:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c3e:	eb 3b                	jmp    c0010c7b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c40:	3c 0a                	cmp    al,0xa
c0010c42:	75 40                	jne    c0010c84 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c44:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c4a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c54:	8d 50 01             	lea    edx,[eax+0x1]
c0010c57:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c5d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c63:	75 12                	jne    c0010c77 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c65:	83 ec 0c             	sub    esp,0xc
c0010c68:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c6e:	53                   	push   ebx
c0010c6f:	e8 1c fb ff ff       	call   c0010790 <VgaText::scrollScreen()>
c0010c74:	83 c4 10             	add    esp,0x10
c0010c77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c7b:	83 c4 08             	add    esp,0x8
c0010c7e:	5b                   	pop    ebx
c0010c7f:	e9 be f9 ff ff       	jmp    c0010642 <VgaText::updateCursor()>
c0010c84:	3c 08                	cmp    al,0x8
c0010c86:	75 31                	jne    c0010cb9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c88:	50                   	push   eax
c0010c89:	50                   	push   eax
c0010c8a:	6a 01                	push   0x1
c0010c8c:	53                   	push   ebx
c0010c8d:	e8 34 ff ff ff       	call   c0010bc6 <VgaText::decrementCursor(bool)>
c0010c92:	5a                   	pop    edx
c0010c93:	59                   	pop    ecx
c0010c94:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c9a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ca0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ca6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cac:	6a 20                	push   0x20
c0010cae:	53                   	push   ebx
c0010caf:	e8 82 fb ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cb4:	83 c4 28             	add    esp,0x28
c0010cb7:	5b                   	pop    ebx
c0010cb8:	c3                   	ret    
c0010cb9:	83 ec 08             	sub    esp,0x8
c0010cbc:	0f be c0             	movsx  eax,al
c0010cbf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ccb:	51                   	push   ecx
c0010ccc:	52                   	push   edx
c0010ccd:	50                   	push   eax
c0010cce:	53                   	push   ebx
c0010ccf:	e8 62 fb ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cd8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ce0:	83 c4 28             	add    esp,0x28
c0010ce3:	5b                   	pop    ebx
c0010ce4:	e9 1b fc ff ff       	jmp    c0010904 <VgaText::incrementCursor(bool)>
c0010ce9:	90                   	nop

c0010cea <VgaText::isShowingCursor()>:
c0010cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cee:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cf4:	c3                   	ret    
c0010cf5:	90                   	nop

c0010cf6 <VgaText::isBlinkDisabled()>:
c0010cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfa:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d00:	83 f0 01             	xor    eax,0x1
c0010d03:	c3                   	ret    

c0010d04 <VgaText::setCursorHeight(int)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d0c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d12:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d1d:	e9 3a f9 ff ff       	jmp    c001065c <VgaText::showCursor(bool)>

c0010d22 <VgaText::getCursorHeight()>:
c0010d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d26:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d2c:	c3                   	ret    

c0010d2d <setActiveTerminal(VgaText*)>:
c0010d2d:	53                   	push   ebx
c0010d2e:	83 ec 08             	sub    esp,0x8
c0010d31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d35:	85 db                	test   ebx,ebx
c0010d37:	75 11                	jne    c0010d4a <setActiveTerminal(VgaText*)+0x1d>
c0010d39:	c7 44 24 10 58 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a358
c0010d41:	83 c4 08             	add    esp,0x8
c0010d44:	5b                   	pop    ebx
c0010d45:	e9 21 98 00 00       	jmp    c001a56b <Krnl::panic(char const*)>
c0010d4a:	50                   	push   eax
c0010d4b:	50                   	push   eax
c0010d4c:	53                   	push   ebx
c0010d4d:	68 66 a3 02 c0       	push   0xc002a366
c0010d52:	e8 6f 21 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0010d57:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0010d5c:	83 c4 10             	add    esp,0x10
c0010d5f:	85 c0                	test   eax,eax
c0010d61:	74 0c                	je     c0010d6f <setActiveTerminal(VgaText*)+0x42>
c0010d63:	83 ec 0c             	sub    esp,0xc
c0010d66:	50                   	push   eax
c0010d67:	e8 d6 f8 ff ff       	call   c0010642 <VgaText::updateCursor()>
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	89 1d 64 e4 02 c0    	mov    DWORD PTR ds:0xc002e464,ebx
c0010d75:	51                   	push   ecx
c0010d76:	51                   	push   ecx
c0010d77:	53                   	push   ebx
c0010d78:	68 7e a3 02 c0       	push   0xc002a37e
c0010d7d:	e8 44 21 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0010d82:	83 c4 0c             	add    esp,0xc
c0010d85:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d8b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d91:	53                   	push   ebx
c0010d92:	e8 17 fb ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c0010d97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d9a:	e8 57 ff ff ff       	call   c0010cf6 <VgaText::isBlinkDisabled()>
c0010d9f:	5a                   	pop    edx
c0010da0:	0f b6 c0             	movzx  eax,al
c0010da3:	59                   	pop    ecx
c0010da4:	50                   	push   eax
c0010da5:	53                   	push   ebx
c0010da6:	e8 c1 f8 ff ff       	call   c001066c <VgaText::disableBlink(bool)>
c0010dab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dae:	e8 6f ff ff ff       	call   c0010d22 <VgaText::getCursorHeight()>
c0010db3:	5a                   	pop    edx
c0010db4:	59                   	pop    ecx
c0010db5:	50                   	push   eax
c0010db6:	53                   	push   ebx
c0010db7:	e8 48 ff ff ff       	call   c0010d04 <VgaText::setCursorHeight(int)>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dc6:	75 0a                	jne    c0010dd2 <setActiveTerminal(VgaText*)+0xa5>
c0010dc8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dd2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dd6:	83 c4 08             	add    esp,0x8
c0010dd9:	5b                   	pop    ebx
c0010dda:	e9 0f f8 ff ff       	jmp    c00105ee <VgaText::load()>

c0010ddf <doTerminalCycle()>:
c0010ddf:	83 ec 18             	sub    esp,0x18
c0010de2:	a1 60 e4 02 c0       	mov    eax,ds:0xc002e460
c0010de7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010ded:	50                   	push   eax
c0010dee:	a3 60 e4 02 c0       	mov    ds:0xc002e460,eax
c0010df3:	e8 35 ff ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c0010df8:	83 c4 1c             	add    esp,0x1c
c0010dfb:	c3                   	ret    

c0010dfc <VgaText::doUpdate()>:
c0010dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e00:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e06:	85 c0                	test   eax,eax
c0010e08:	74 02                	je     c0010e0c <VgaText::doUpdate()+0x10>
c0010e0a:	ff e0                	jmp    eax
c0010e0c:	c3                   	ret    
c0010e0d:	90                   	nop

c0010e0e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e0e:	55                   	push   ebp
c0010e0f:	57                   	push   edi
c0010e10:	56                   	push   esi
c0010e11:	53                   	push   ebx
c0010e12:	83 ec 1c             	sub    esp,0x1c
c0010e15:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e19:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e1e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e25:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e28:	50                   	push   eax
c0010e29:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2e:	50                   	push   eax
c0010e2f:	e8 4a f9 ff ff       	call   c001077e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e34:	59                   	pop    ecx
c0010e35:	0f b6 c0             	movzx  eax,al
c0010e38:	5b                   	pop    ebx
c0010e39:	31 c9                	xor    ecx,ecx
c0010e3b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e43:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e47:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e51:	0f b7 db             	movzx  ebx,bx
c0010e54:	01 db                	add    ebx,ebx
c0010e56:	01 fb                	add    ebx,edi
c0010e58:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e5b:	84 c0                	test   al,al
c0010e5d:	0f 84 38 01 00 00    	je     c0010f9b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e63:	3c 0d                	cmp    al,0xd
c0010e65:	75 0f                	jne    c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e67:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e71:	e9 1f 01 00 00       	jmp    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e76:	3c 0a                	cmp    al,0xa
c0010e78:	75 5b                	jne    c0010ed5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e7a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e80:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e8a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e8d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e93:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e99:	75 12                	jne    c0010ead <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e9b:	83 ec 0c             	sub    esp,0xc
c0010e9e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ea4:	55                   	push   ebp
c0010ea5:	e8 e6 f8 ff ff       	call   c0010790 <VgaText::scrollScreen()>
c0010eaa:	83 c4 10             	add    esp,0x10
c0010ead:	83 ec 0c             	sub    esp,0xc
c0010eb0:	55                   	push   ebp
c0010eb1:	e8 8c f7 ff ff       	call   c0010642 <VgaText::updateCursor()>
c0010eb6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ec7:	31 c9                	xor    ecx,ecx
c0010ec9:	0f b7 db             	movzx  ebx,bx
c0010ecc:	01 db                	add    ebx,ebx
c0010ece:	01 fb                	add    ebx,edi
c0010ed0:	e9 c0 00 00 00       	jmp    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed5:	3c 08                	cmp    al,0x8
c0010ed7:	75 4e                	jne    c0010f27 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ed9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010edd:	53                   	push   ebx
c0010ede:	53                   	push   ebx
c0010edf:	6a 01                	push   0x1
c0010ee1:	55                   	push   ebp
c0010ee2:	e8 df fc ff ff       	call   c0010bc6 <VgaText::decrementCursor(bool)>
c0010ee7:	58                   	pop    eax
c0010ee8:	5a                   	pop    edx
c0010ee9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eef:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ef5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010efb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f01:	6a 20                	push   0x20
c0010f03:	55                   	push   ebp
c0010f04:	e8 2d f9 ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f09:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f11:	83 c4 20             	add    esp,0x20
c0010f14:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f1a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f1e:	0f b7 db             	movzx  ebx,bx
c0010f21:	01 db                	add    ebx,ebx
c0010f23:	01 fb                	add    ebx,edi
c0010f25:	eb 6e                	jmp    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f27:	51                   	push   ecx
c0010f28:	51                   	push   ecx
c0010f29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f2d:	50                   	push   eax
c0010f2e:	e8 f1 f8 ff ff       	call   c0010824 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f33:	83 c4 10             	add    esp,0x10
c0010f36:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f39:	39 2d 64 e4 02 c0    	cmp    DWORD PTR ds:0xc002e464,ebp
c0010f3f:	75 2a                	jne    c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f41:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f47:	85 c0                	test   eax,eax
c0010f49:	74 20                	je     c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f4b:	52                   	push   edx
c0010f4c:	52                   	push   edx
c0010f4d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f53:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f61:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f64:	51                   	push   ecx
c0010f65:	55                   	push   ebp
c0010f66:	ff d0                	call   eax
c0010f68:	83 c4 20             	add    esp,0x20
c0010f6b:	83 c3 02             	add    ebx,0x2
c0010f6e:	50                   	push   eax
c0010f6f:	50                   	push   eax
c0010f70:	6a 00                	push   0x0
c0010f72:	55                   	push   ebp
c0010f73:	e8 8c f9 ff ff       	call   c0010904 <VgaText::incrementCursor(bool)>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f82:	75 0f                	jne    c0010f93 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f84:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f8c:	0f b7 db             	movzx  ebx,bx
c0010f8f:	01 db                	add    ebx,ebx
c0010f91:	01 fb                	add    ebx,edi
c0010f93:	b1 01                	mov    cl,0x1
c0010f95:	46                   	inc    esi
c0010f96:	e9 bd fe ff ff       	jmp    c0010e58 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f9b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f9f:	83 ec 0c             	sub    esp,0xc
c0010fa2:	55                   	push   ebp
c0010fa3:	e8 9a f6 ff ff       	call   c0010642 <VgaText::updateCursor()>
c0010fa8:	83 c4 10             	add    esp,0x10
c0010fab:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010faf:	84 c9                	test   cl,cl
c0010fb1:	74 0c                	je     c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fb3:	83 ec 0c             	sub    esp,0xc
c0010fb6:	55                   	push   ebp
c0010fb7:	e8 40 fe ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0010fbc:	83 c4 10             	add    esp,0x10
c0010fbf:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fc6:	83 c4 1c             	add    esp,0x1c
c0010fc9:	5b                   	pop    ebx
c0010fca:	5e                   	pop    esi
c0010fcb:	5f                   	pop    edi
c0010fcc:	5d                   	pop    ebp
c0010fcd:	c3                   	ret    

c0010fce <VgaText::clearScreen()>:
c0010fce:	57                   	push   edi
c0010fcf:	56                   	push   esi
c0010fd0:	31 f6                	xor    esi,esi
c0010fd2:	53                   	push   ebx
c0010fd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fd7:	52                   	push   edx
c0010fd8:	6a 00                	push   0x0
c0010fda:	6a 00                	push   0x0
c0010fdc:	53                   	push   ebx
c0010fdd:	e8 cc f8 ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c0010fe2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fe9:	83 c4 10             	add    esp,0x10
c0010fec:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010ff2:	7e 26                	jle    c001101a <VgaText::clearScreen()+0x4c>
c0010ff4:	31 ff                	xor    edi,edi
c0010ff6:	50                   	push   eax
c0010ff7:	50                   	push   eax
c0010ff8:	56                   	push   esi
c0010ff9:	57                   	push   edi
c0010ffa:	47                   	inc    edi
c0010ffb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011001:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011007:	6a 20                	push   0x20
c0011009:	53                   	push   ebx
c001100a:	e8 27 f8 ff ff       	call   c0010836 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001100f:	83 c4 20             	add    esp,0x20
c0011012:	83 ff 50             	cmp    edi,0x50
c0011015:	75 df                	jne    c0010ff6 <VgaText::clearScreen()+0x28>
c0011017:	46                   	inc    esi
c0011018:	eb d2                	jmp    c0010fec <VgaText::clearScreen()+0x1e>
c001101a:	83 ec 0c             	sub    esp,0xc
c001101d:	53                   	push   ebx
c001101e:	e8 d9 fd ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0011023:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001102a:	83 c4 10             	add    esp,0x10
c001102d:	5b                   	pop    ebx
c001102e:	5e                   	pop    esi
c001102f:	5f                   	pop    edi
c0011030:	c3                   	ret    
c0011031:	90                   	nop

c0011032 <VgaText::putchar(char)>:
c0011032:	56                   	push   esi
c0011033:	53                   	push   ebx
c0011034:	83 ec 14             	sub    esp,0x14
c0011037:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001103b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001103f:	3c 5b                	cmp    al,0x5b
c0011041:	75 21                	jne    c0011064 <VgaText::putchar(char)+0x32>
c0011043:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001104a:	74 28                	je     c0011074 <VgaText::putchar(char)+0x42>
c001104c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011055:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001105f:	e9 e2 00 00 00       	jmp    c0011146 <VgaText::putchar(char)+0x114>
c0011064:	3c 1b                	cmp    al,0x1b
c0011066:	75 0c                	jne    c0011074 <VgaText::putchar(char)+0x42>
c0011068:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001106f:	e9 d2 00 00 00       	jmp    c0011146 <VgaText::putchar(char)+0x114>
c0011074:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001107a:	84 c9                	test   cl,cl
c001107c:	0f 84 ab 00 00 00    	je     c001112d <VgaText::putchar(char)+0xfb>
c0011082:	8d 50 c0             	lea    edx,[eax-0x40]
c0011085:	80 fa 3e             	cmp    dl,0x3e
c0011088:	0f 87 82 00 00 00    	ja     c0011110 <VgaText::putchar(char)+0xde>
c001108e:	3c 6d                	cmp    al,0x6d
c0011090:	75 4d                	jne    c00110df <VgaText::putchar(char)+0xad>
c0011092:	31 f6                	xor    esi,esi
c0011094:	31 d2                	xor    edx,edx
c0011096:	31 c0                	xor    eax,eax
c0011098:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001109e:	7e 30                	jle    c00110d0 <VgaText::putchar(char)+0x9e>
c00110a0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110a8:	80 fa 3b             	cmp    dl,0x3b
c00110ab:	75 17                	jne    c00110c4 <VgaText::putchar(char)+0x92>
c00110ad:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110b1:	50                   	push   eax
c00110b2:	53                   	push   ebx
c00110b3:	e8 ee f5 ff ff       	call   c00106a6 <VgaText::doANSI_SGR(int)>
c00110b8:	59                   	pop    ecx
c00110b9:	31 d2                	xor    edx,edx
c00110bb:	58                   	pop    eax
c00110bc:	31 c0                	xor    eax,eax
c00110be:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110c2:	eb 09                	jmp    c00110cd <VgaText::putchar(char)+0x9b>
c00110c4:	6b c0 0a             	imul   eax,eax,0xa
c00110c7:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110cb:	88 ca                	mov    dl,cl
c00110cd:	46                   	inc    esi
c00110ce:	eb c8                	jmp    c0011098 <VgaText::putchar(char)+0x66>
c00110d0:	84 d2                	test   dl,dl
c00110d2:	74 31                	je     c0011105 <VgaText::putchar(char)+0xd3>
c00110d4:	50                   	push   eax
c00110d5:	53                   	push   ebx
c00110d6:	e8 cb f5 ff ff       	call   c00106a6 <VgaText::doANSI_SGR(int)>
c00110db:	58                   	pop    eax
c00110dc:	5a                   	pop    edx
c00110dd:	eb 26                	jmp    c0011105 <VgaText::putchar(char)+0xd3>
c00110df:	3c 4a                	cmp    al,0x4a
c00110e1:	75 22                	jne    c0011105 <VgaText::putchar(char)+0xd3>
c00110e3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ea:	75 19                	jne    c0011105 <VgaText::putchar(char)+0xd3>
c00110ec:	83 ec 0c             	sub    esp,0xc
c00110ef:	53                   	push   ebx
c00110f0:	e8 d9 fe ff ff       	call   c0010fce <VgaText::clearScreen()>
c00110f5:	83 c4 0c             	add    esp,0xc
c00110f8:	6a 00                	push   0x0
c00110fa:	6a 00                	push   0x0
c00110fc:	53                   	push   ebx
c00110fd:	e8 ac f7 ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c0011102:	83 c4 10             	add    esp,0x10
c0011105:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001110e:	eb 36                	jmp    c0011146 <VgaText::putchar(char)+0x114>
c0011110:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011116:	83 fa 0e             	cmp    edx,0xe
c0011119:	7f 2b                	jg     c0011146 <VgaText::putchar(char)+0x114>
c001111b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001111e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011124:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001112b:	eb 19                	jmp    c0011146 <VgaText::putchar(char)+0x114>
c001112d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011133:	0f be c0             	movsx  eax,al
c0011136:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001113c:	50                   	push   eax
c001113d:	53                   	push   ebx
c001113e:	e8 ab fa ff ff       	call   c0010bee <VgaText::putchar(char, VgaColour, VgaColour)>
c0011143:	83 c4 10             	add    esp,0x10
c0011146:	83 c4 14             	add    esp,0x14
c0011149:	5b                   	pop    ebx
c001114a:	5e                   	pop    esi
c001114b:	c3                   	ret    

c001114c <VgaText::puts(char const*)>:
c001114c:	53                   	push   ebx
c001114d:	83 ec 08             	sub    esp,0x8
c0011150:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011154:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011157:	84 c0                	test   al,al
c0011159:	74 12                	je     c001116d <VgaText::puts(char const*)+0x21>
c001115b:	43                   	inc    ebx
c001115c:	51                   	push   ecx
c001115d:	51                   	push   ecx
c001115e:	50                   	push   eax
c001115f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011163:	e8 ca fe ff ff       	call   c0011032 <VgaText::putchar(char)>
c0011168:	83 c4 10             	add    esp,0x10
c001116b:	eb e7                	jmp    c0011154 <VgaText::puts(char const*)+0x8>
c001116d:	83 c4 08             	add    esp,0x8
c0011170:	5b                   	pop    ebx
c0011171:	c3                   	ret    

c0011172 <VgaText::putx(unsigned int)>:
c0011172:	57                   	push   edi
c0011173:	b9 11 00 00 00       	mov    ecx,0x11
c0011178:	56                   	push   esi
c0011179:	be 9a a3 02 c0       	mov    esi,0xc002a39a
c001117e:	53                   	push   ebx
c001117f:	83 ec 20             	sub    esp,0x20
c0011182:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011186:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001118a:	fc                   	cld    
c001118b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001118d:	be 08 00 00 00       	mov    esi,0x8
c0011192:	50                   	push   eax
c0011193:	50                   	push   eax
c0011194:	89 d8                	mov    eax,ebx
c0011196:	c1 e3 04             	shl    ebx,0x4
c0011199:	c1 e8 1c             	shr    eax,0x1c
c001119c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111a1:	50                   	push   eax
c00111a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111a6:	e8 87 fe ff ff       	call   c0011032 <VgaText::putchar(char)>
c00111ab:	83 c4 10             	add    esp,0x10
c00111ae:	4e                   	dec    esi
c00111af:	75 e1                	jne    c0011192 <VgaText::putx(unsigned int)+0x20>
c00111b1:	83 c4 20             	add    esp,0x20
c00111b4:	5b                   	pop    ebx
c00111b5:	5e                   	pop    esi
c00111b6:	5f                   	pop    edi
c00111b7:	c3                   	ret    

c00111b8 <VgaText::VgaText(char const*)>:
c00111b8:	57                   	push   edi
c00111b9:	56                   	push   esi
c00111ba:	53                   	push   ebx
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	83 ec 08             	sub    esp,0x8
c00111c2:	6a 00                	push   0x0
c00111c4:	50                   	push   eax
c00111c5:	e8 6e 05 00 00       	call   c0011738 <UnixFile::UnixFile(int)>
c00111ca:	83 c4 10             	add    esp,0x10
c00111cd:	ba 00 a4 02 c0       	mov    edx,0xc002a400
c00111d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d6:	89 10                	mov    DWORD PTR [eax],edx
c00111d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111dc:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011203:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001120a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011235:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001123c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011240:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011246:	bb 40 e4 02 c0       	mov    ebx,0xc002e440
c001124b:	b8 08 00 00 00       	mov    eax,0x8
c0011250:	fc                   	cld    
c0011251:	89 d7                	mov    edi,edx
c0011253:	89 de                	mov    esi,ebx
c0011255:	89 c1                	mov    ecx,eax
c0011257:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125d:	05 1e 10 00 00       	add    eax,0x101e
c0011262:	83 ec 08             	sub    esp,0x8
c0011265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011269:	50                   	push   eax
c001126a:	e8 c5 f5 fe ff       	call   c0000834 <strcpy>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011276:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011284:	83 c0 0c             	add    eax,0xc
c0011287:	83 ec 04             	sub    esp,0x4
c001128a:	68 00 0f 00 00       	push   0xf00
c001128f:	6a 00                	push   0x0
c0011291:	50                   	push   eax
c0011292:	e8 e1 f4 fe ff       	call   c0000778 <memset>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	83 ec 04             	sub    esp,0x4
c001129d:	6a 00                	push   0x0
c001129f:	6a 07                	push   0x7
c00112a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a5:	e8 b4 f4 ff ff       	call   c001075e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112aa:	83 c4 10             	add    esp,0x10
c00112ad:	83 ec 08             	sub    esp,0x8
c00112b0:	6a 02                	push   0x2
c00112b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b6:	e8 49 fa ff ff       	call   c0010d04 <VgaText::setCursorHeight(int)>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 ec 04             	sub    esp,0x4
c00112c1:	6a 00                	push   0x0
c00112c3:	6a 00                	push   0x0
c00112c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c9:	e8 e0 f5 ff ff       	call   c00108ae <VgaText::setCursor(int, int)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	83 ec 08             	sub    esp,0x8
c00112d4:	6a 01                	push   0x1
c00112d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112da:	e8 7d f3 ff ff       	call   c001065c <VgaText::showCursor(bool)>
c00112df:	83 c4 10             	add    esp,0x10
c00112e2:	83 ec 08             	sub    esp,0x8
c00112e5:	6a 01                	push   0x1
c00112e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112eb:	e8 7c f3 ff ff       	call   c001066c <VgaText::disableBlink(bool)>
c00112f0:	83 c4 10             	add    esp,0x10
c00112f3:	83 ec 0c             	sub    esp,0xc
c00112f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fa:	e8 cf fc ff ff       	call   c0010fce <VgaText::clearScreen()>
c00112ff:	83 c4 10             	add    esp,0x10
c0011302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011306:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c001130d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011311:	05 9e 10 00 00       	add    eax,0x109e
c0011316:	83 ec 04             	sub    esp,0x4
c0011319:	68 96 00 00 00       	push   0x96
c001131e:	6a 00                	push   0x0
c0011320:	50                   	push   eax
c0011321:	e8 52 f4 fe ff       	call   c0000778 <memset>
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132d:	05 34 11 00 00       	add    eax,0x1134
c0011332:	83 ec 04             	sub    esp,0x4
c0011335:	68 2c 01 00 00       	push   0x12c
c001133a:	6a 00                	push   0x0
c001133c:	50                   	push   eax
c001133d:	e8 36 f4 fe ff       	call   c0000778 <memset>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	90                   	nop
c0011346:	5b                   	pop    ebx
c0011347:	5e                   	pop    esi
c0011348:	5f                   	pop    edi
c0011349:	c3                   	ret    

c001134a <VgaText::receiveKey(unsigned char)>:
c001134a:	55                   	push   ebp
c001134b:	57                   	push   edi
c001134c:	56                   	push   esi
c001134d:	53                   	push   ebx
c001134e:	83 ec 1c             	sub    esp,0x1c
c0011351:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011355:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011359:	84 db                	test   bl,bl
c001135b:	0f 84 c9 00 00 00    	je     c001142a <VgaText::receiveKey(unsigned char)+0xe0>
c0011361:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011367:	80 fb 08             	cmp    bl,0x8
c001136a:	75 2c                	jne    c0011398 <VgaText::receiveKey(unsigned char)+0x4e>
c001136c:	83 ec 0c             	sub    esp,0xc
c001136f:	57                   	push   edi
c0011370:	e8 1f f4 fe ff       	call   c0000794 <strlen>
c0011375:	83 c4 10             	add    esp,0x10
c0011378:	85 c0                	test   eax,eax
c001137a:	74 41                	je     c00113bd <VgaText::receiveKey(unsigned char)+0x73>
c001137c:	50                   	push   eax
c001137d:	50                   	push   eax
c001137e:	6a 08                	push   0x8
c0011380:	56                   	push   esi
c0011381:	e8 ac fc ff ff       	call   c0011032 <VgaText::putchar(char)>
c0011386:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011389:	e8 06 f4 fe ff       	call   c0000794 <strlen>
c001138e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011396:	eb 22                	jmp    c00113ba <VgaText::receiveKey(unsigned char)+0x70>
c0011398:	0f be c3             	movsx  eax,bl
c001139b:	52                   	push   edx
c001139c:	52                   	push   edx
c001139d:	50                   	push   eax
c001139e:	56                   	push   esi
c001139f:	e8 8e fc ff ff       	call   c0011032 <VgaText::putchar(char)>
c00113a4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113ad:	59                   	pop    ecx
c00113ae:	5d                   	pop    ebp
c00113af:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113b3:	50                   	push   eax
c00113b4:	57                   	push   edi
c00113b5:	e8 ba f5 fe ff       	call   c0000974 <strcat>
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113c4:	75 05                	jne    c00113cb <VgaText::receiveKey(unsigned char)+0x81>
c00113c6:	80 fb 0a             	cmp    bl,0xa
c00113c9:	75 53                	jne    c001141e <VgaText::receiveKey(unsigned char)+0xd4>
c00113cb:	83 ec 0c             	sub    esp,0xc
c00113ce:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113d4:	53                   	push   ebx
c00113d5:	e8 ba f3 fe ff       	call   c0000794 <strlen>
c00113da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113dd:	89 c5                	mov    ebp,eax
c00113df:	e8 b0 f3 fe ff       	call   c0000794 <strlen>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113eb:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113f0:	76 10                	jbe    c0011402 <VgaText::receiveKey(unsigned char)+0xb8>
c00113f2:	83 ec 0c             	sub    esp,0xc
c00113f5:	68 ab a3 02 c0       	push   0xc002a3ab
c00113fa:	e8 6c 91 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	50                   	push   eax
c0011403:	50                   	push   eax
c0011404:	57                   	push   edi
c0011405:	53                   	push   ebx
c0011406:	e8 69 f5 fe ff       	call   c0000974 <strcat>
c001140b:	83 c4 0c             	add    esp,0xc
c001140e:	68 96 00 00 00       	push   0x96
c0011413:	6a 00                	push   0x0
c0011415:	57                   	push   edi
c0011416:	e8 5d f3 fe ff       	call   c0000778 <memset>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	83 ec 0c             	sub    esp,0xc
c0011421:	56                   	push   esi
c0011422:	e8 d5 f9 ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	83 c4 1c             	add    esp,0x1c
c001142d:	5b                   	pop    ebx
c001142e:	5e                   	pop    esi
c001142f:	5f                   	pop    edi
c0011430:	5d                   	pop    ebp
c0011431:	c3                   	ret    

c0011432 <VgaText::write(unsigned long long, void*, int*)>:
c0011432:	55                   	push   ebp
c0011433:	57                   	push   edi
c0011434:	56                   	push   esi
c0011435:	53                   	push   ebx
c0011436:	83 ec 0c             	sub    esp,0xc
c0011439:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001143d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011441:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011445:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001144c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001144f:	39 eb                	cmp    ebx,ebp
c0011451:	74 13                	je     c0011466 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011453:	43                   	inc    ebx
c0011454:	50                   	push   eax
c0011455:	50                   	push   eax
c0011456:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001145a:	50                   	push   eax
c001145b:	56                   	push   esi
c001145c:	e8 d1 fb ff ff       	call   c0011032 <VgaText::putchar(char)>
c0011461:	83 c4 10             	add    esp,0x10
c0011464:	eb e9                	jmp    c001144f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011466:	83 ec 0c             	sub    esp,0xc
c0011469:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011470:	56                   	push   esi
c0011471:	e8 86 f9 ff ff       	call   c0010dfc <VgaText::doUpdate()>
c0011476:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001147a:	89 38                	mov    DWORD PTR [eax],edi
c001147c:	83 c4 1c             	add    esp,0x1c
c001147f:	31 c0                	xor    eax,eax
c0011481:	5b                   	pop    ebx
c0011482:	5e                   	pop    esi
c0011483:	5f                   	pop    edi
c0011484:	5d                   	pop    ebp
c0011485:	c3                   	ret    

c0011486 <newTerminal(char*)>:
c0011486:	83 ec 28             	sub    esp,0x28
c0011489:	68 60 12 00 00       	push   0x1260
c001148e:	e8 b0 e3 ff ff       	call   c000f843 <malloc>
c0011493:	5a                   	pop    edx
c0011494:	59                   	pop    ecx
c0011495:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011499:	50                   	push   eax
c001149a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001149e:	e8 15 fd ff ff       	call   c00111b8 <VgaText::VgaText(char const*)>
c00114a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114a7:	83 c4 2c             	add    esp,0x2c
c00114aa:	c3                   	ret    
c00114ab:	90                   	nop

c00114ac <TSS::TSS()>:
c00114ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114b7:	90                   	nop
c00114b8:	c3                   	ret    
c00114b9:	90                   	nop

c00114ba <TSS::setESP(unsigned long)>:
c00114ba:	55                   	push   ebp
c00114bb:	89 e5                	mov    ebp,esp
c00114bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c9:	90                   	nop
c00114ca:	5d                   	pop    ebp
c00114cb:	c3                   	ret    

c00114cc <TSS::flush()>:
c00114cc:	55                   	push   ebp
c00114cd:	89 e5                	mov    ebp,esp
c00114cf:	83 ec 10             	sub    esp,0x10
c00114d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d7:	83 c8 03             	or     eax,0x3
c00114da:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114de:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114e2:	66 89 d0             	mov    ax,dx
c00114e5:	0f 00 d8             	ltr    ax
c00114e8:	90                   	nop
c00114e9:	c9                   	leave  
c00114ea:	c3                   	ret    
c00114eb:	90                   	nop

c00114ec <TSS::setup(unsigned long, unsigned long)>:
c00114ec:	55                   	push   ebp
c00114ed:	89 e5                	mov    ebp,esp
c00114ef:	83 ec 18             	sub    esp,0x18
c00114f2:	83 ec 0c             	sub    esp,0xc
c00114f5:	6a 68                	push   0x68
c00114f7:	e8 47 e3 ff ff       	call   c000f843 <malloc>
c00114fc:	83 c4 10             	add    esp,0x10
c00114ff:	89 c2                	mov    edx,eax
c0011501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011504:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150d:	83 ec 04             	sub    esp,0x4
c0011510:	6a 68                	push   0x68
c0011512:	6a 00                	push   0x0
c0011514:	50                   	push   eax
c0011515:	e8 5e f2 fe ff       	call   c0000778 <memset>
c001151a:	83 c4 10             	add    esp,0x10
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011523:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001153e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011580:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011583:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011592:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011598:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001159e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b4:	0f 20 da             	mov    edx,cr3
c00115b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115ba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115bd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c6:	83 ec 08             	sub    esp,0x8
c00115c9:	50                   	push   eax
c00115ca:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115cd:	50                   	push   eax
c00115ce:	e8 4b da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115d3:	83 c4 10             	add    esp,0x10
c00115d6:	83 ec 08             	sub    esp,0x8
c00115d9:	6a 68                	push   0x68
c00115db:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115de:	50                   	push   eax
c00115df:	e8 56 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115e4:	83 c4 10             	add    esp,0x10
c00115e7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115eb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115ee:	83 e0 0f             	and    eax,0xf
c00115f1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115f4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115f7:	83 c8 40             	or     eax,0x40
c00115fa:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115fd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0011602:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011608:	05 78 01 00 00       	add    eax,0x178
c001160d:	83 ec 04             	sub    esp,0x4
c0011610:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011613:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011616:	50                   	push   eax
c0011617:	e8 52 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c001161c:	83 c4 10             	add    esp,0x10
c001161f:	89 c2                	mov    edx,eax
c0011621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011624:	89 10                	mov    DWORD PTR [eax],edx
c0011626:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001162b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011631:	05 78 01 00 00       	add    eax,0x178
c0011636:	83 ec 0c             	sub    esp,0xc
c0011639:	50                   	push   eax
c001163a:	e8 73 da ff ff       	call   c000f0b2 <GDT::flush()>
c001163f:	83 c4 10             	add    esp,0x10
c0011642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011645:	8b 00                	mov    eax,DWORD PTR [eax]
c0011647:	83 ec 08             	sub    esp,0x8
c001164a:	50                   	push   eax
c001164b:	68 14 a4 02 c0       	push   0xc002a414
c0011650:	e8 71 18 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0011655:	83 c4 10             	add    esp,0x10
c0011658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165b:	8b 00                	mov    eax,DWORD PTR [eax]
c001165d:	c9                   	leave  
c001165e:	c3                   	ret    
c001165f:	90                   	nop

c0011660 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011664:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011668:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001166b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011670:	75 08                	jne    c001167a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011672:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011678:	eb 38                	jmp    c00116b2 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001167a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001167f:	75 17                	jne    c0011698 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011686:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011689:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001168f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011691:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011695:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011698:	89 c1                	mov    ecx,eax
c001169a:	83 e1 fd             	and    ecx,0xfffffffd
c001169d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116a3:	74 cd                	je     c0011672 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116a5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116aa:	83 e0 ef             	and    eax,0xffffffef
c00116ad:	83 f8 08             	cmp    eax,0x8
c00116b0:	76 c0                	jbe    c0011672 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b2:	31 c0                	xor    eax,eax
c00116b4:	c3                   	ret    
c00116b5:	90                   	nop

c00116b6 <ReservedFilename::isAtty()>:
c00116b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116bd:	31 c0                	xor    eax,eax
c00116bf:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116c5:	74 09                	je     c00116d0 <ReservedFilename::isAtty()+0x1a>
c00116c7:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116cd:	0f 94 c0             	sete   al
c00116d0:	c3                   	ret    
c00116d1:	90                   	nop

c00116d2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116e1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116e6:	75 08                	jne    c00116f0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116ee:	eb 3d                	jmp    c001172d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116f0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116f5:	75 17                	jne    c001170e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116ff:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c0011705:	8b 10                	mov    edx,DWORD PTR [eax]
c0011707:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001170b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001170e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011713:	75 04                	jne    c0011719 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011715:	89 0a                	mov    DWORD PTR [edx],ecx
c0011717:	eb 14                	jmp    c001172d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011719:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001171e:	74 c8                	je     c00116e8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011720:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011725:	83 e0 ef             	and    eax,0xffffffef
c0011728:	83 f8 08             	cmp    eax,0x8
c001172b:	76 bb                	jbe    c00116e8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001172d:	31 c0                	xor    eax,eax
c001172f:	c3                   	ret    

c0011730 <UnixFile::getFileDescriptor()>:
c0011730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011737:	c3                   	ret    

c0011738 <UnixFile::UnixFile(int)>:
c0011738:	53                   	push   ebx
c0011739:	83 ec 28             	sub    esp,0x28
c001173c:	ba 00 a5 02 c0       	mov    edx,0xc002a500
c0011741:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011745:	89 10                	mov    DWORD PTR [eax],edx
c0011747:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001174f:	0f 8f 8c 01 00 00    	jg     c00118e1 <UnixFile::UnixFile(int)+0x1a9>
c0011755:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001175a:	8d 50 01             	lea    edx,[eax+0x1]
c001175d:	89 15 20 d3 02 c0    	mov    DWORD PTR ds:0xc002d320,edx
c0011763:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011767:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001176a:	83 ec 08             	sub    esp,0x8
c001176d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011771:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011776:	e8 65 6f 01 00       	call   c00286e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001177b:	83 c4 10             	add    esp,0x10
c001177e:	a0 f4 e4 02 c0       	mov    al,ds:0xc002e4f4
c0011783:	83 f0 01             	xor    eax,0x1
c0011786:	84 c0                	test   al,al
c0011788:	0f 84 54 01 00 00    	je     c00118e2 <UnixFile::UnixFile(int)+0x1aa>
c001178e:	c6 05 f4 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4f4,0x1
c0011795:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001179d:	83 ec 0c             	sub    esp,0xc
c00117a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117a4:	e8 9a e0 ff ff       	call   c000f843 <malloc>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	89 c3                	mov    ebx,eax
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	68 03 ff ff 0f       	push   0xfffff03
c00117b6:	53                   	push   ebx
c00117b7:	e8 2c 01 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	89 1d ec e4 02 c0    	mov    DWORD PTR ds:0xc002e4ec,ebx
c00117c5:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117cd:	83 ec 0c             	sub    esp,0xc
c00117d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d4:	e8 6a e0 ff ff       	call   c000f843 <malloc>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	89 c3                	mov    ebx,eax
c00117de:	83 ec 08             	sub    esp,0x8
c00117e1:	68 01 ff ff 0f       	push   0xfffff01
c00117e6:	53                   	push   ebx
c00117e7:	e8 fc 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c00117ec:	83 c4 10             	add    esp,0x10
c00117ef:	89 1d f0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4f0,ebx
c00117f5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117fd:	83 ec 0c             	sub    esp,0xc
c0011800:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011804:	e8 3a e0 ff ff       	call   c000f843 <malloc>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	89 c3                	mov    ebx,eax
c001180e:	83 ec 08             	sub    esp,0x8
c0011811:	68 00 ff ff 0f       	push   0xfffff00
c0011816:	53                   	push   ebx
c0011817:	e8 cc 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 1d e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,ebx
c0011825:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001182d:	83 ec 0c             	sub    esp,0xc
c0011830:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011834:	e8 0a e0 ff ff       	call   c000f843 <malloc>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	89 c3                	mov    ebx,eax
c001183e:	83 ec 08             	sub    esp,0x8
c0011841:	68 02 ff ff 0f       	push   0xfffff02
c0011846:	53                   	push   ebx
c0011847:	e8 9c 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c001184c:	83 c4 10             	add    esp,0x10
c001184f:	89 1d e8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e8,ebx
c0011855:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001185d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011862:	7f 7e                	jg     c00118e2 <UnixFile::UnixFile(int)+0x1aa>
c0011864:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001186c:	83 ec 0c             	sub    esp,0xc
c001186f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011873:	e8 cb df ff ff       	call   c000f843 <malloc>
c0011878:	83 c4 10             	add    esp,0x10
c001187b:	89 c3                	mov    ebx,eax
c001187d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011881:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011886:	83 ec 08             	sub    esp,0x8
c0011889:	50                   	push   eax
c001188a:	53                   	push   ebx
c001188b:	e8 58 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c0011890:	83 c4 10             	add    esp,0x10
c0011893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011897:	89 1c 85 c0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b40],ebx
c001189e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118a6:	83 ec 0c             	sub    esp,0xc
c00118a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118ad:	e8 91 df ff ff       	call   c000f843 <malloc>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	89 c3                	mov    ebx,eax
c00118b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bb:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118c0:	83 ec 08             	sub    esp,0x8
c00118c3:	50                   	push   eax
c00118c4:	53                   	push   ebx
c00118c5:	e8 1e 00 00 00       	call   c00118e8 <ReservedFilename::ReservedFilename(int)>
c00118ca:	83 c4 10             	add    esp,0x10
c00118cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d1:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c00118d8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118dc:	e9 7c ff ff ff       	jmp    c001185d <UnixFile::UnixFile(int)+0x125>
c00118e1:	90                   	nop
c00118e2:	83 c4 28             	add    esp,0x28
c00118e5:	5b                   	pop    ebx
c00118e6:	c3                   	ret    
c00118e7:	90                   	nop

c00118e8 <ReservedFilename::ReservedFilename(int)>:
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ef:	83 ec 08             	sub    esp,0x8
c00118f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f6:	50                   	push   eax
c00118f7:	e8 3c fe ff ff       	call   c0011738 <UnixFile::UnixFile(int)>
c00118fc:	83 c4 10             	add    esp,0x10
c00118ff:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c0011904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011908:	89 10                	mov    DWORD PTR [eax],edx
c001190a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011912:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011915:	90                   	nop
c0011916:	83 c4 0c             	add    esp,0xc
c0011919:	c3                   	ret    

c001191a <UnixFile::~UnixFile()>:
c001191a:	83 ec 1c             	sub    esp,0x1c
c001191d:	ba 00 a5 02 c0       	mov    edx,0xc002a500
c0011922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011926:	89 10                	mov    DWORD PTR [eax],edx
c0011928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001192c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011934:	7f 73                	jg     c00119a9 <UnixFile::~UnixFile()+0x8f>
c0011936:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001193e:	83 ec 0c             	sub    esp,0xc
c0011941:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011946:	e8 69 6e 01 00       	call   c00287b4 <LinkedList<UnixFile>::getFirstElement()>
c001194b:	83 c4 10             	add    esp,0x10
c001194e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011952:	83 ec 0c             	sub    esp,0xc
c0011955:	68 f8 e4 02 c0       	push   0xc002e4f8
c001195a:	e8 5d 6e 01 00       	call   c00287bc <LinkedList<UnixFile>::removeFirst()>
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011966:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001196a:	74 40                	je     c00119ac <UnixFile::~UnixFile()+0x92>
c001196c:	83 ec 08             	sub    esp,0x8
c001196f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011973:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011978:	e8 63 6d 01 00       	call   c00286e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001197d:	83 c4 10             	add    esp,0x10
c0011980:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011984:	8d 50 01             	lea    edx,[eax+0x1]
c0011987:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001198b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011990:	0f 94 c0             	sete   al
c0011993:	84 c0                	test   al,al
c0011995:	74 a7                	je     c001193e <UnixFile::~UnixFile()+0x24>
c0011997:	83 ec 0c             	sub    esp,0xc
c001199a:	68 d8 a4 02 c0       	push   0xc002a4d8
c001199f:	e8 c7 8b 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00119a4:	83 c4 10             	add    esp,0x10
c00119a7:	eb 95                	jmp    c001193e <UnixFile::~UnixFile()+0x24>
c00119a9:	90                   	nop
c00119aa:	eb 01                	jmp    c00119ad <UnixFile::~UnixFile()+0x93>
c00119ac:	90                   	nop
c00119ad:	90                   	nop
c00119ae:	83 c4 1c             	add    esp,0x1c
c00119b1:	c3                   	ret    

c00119b2 <UnixFile::~UnixFile()>:
c00119b2:	83 ec 0c             	sub    esp,0xc
c00119b5:	83 ec 0c             	sub    esp,0xc
c00119b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119bc:	e8 59 ff ff ff       	call   c001191a <UnixFile::~UnixFile()>
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	83 ec 08             	sub    esp,0x8
c00119c7:	6a 0c                	push   0xc
c00119c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cd:	e8 14 14 00 00       	call   c0012de6 <operator delete(void*, unsigned long)>
c00119d2:	83 c4 10             	add    esp,0x10
c00119d5:	83 c4 0c             	add    esp,0xc
c00119d8:	c3                   	ret    
c00119d9:	90                   	nop

c00119da <ReservedFilename::~ReservedFilename()>:
c00119da:	83 ec 0c             	sub    esp,0xc
c00119dd:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c00119e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119e6:	89 10                	mov    DWORD PTR [eax],edx
c00119e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ec:	83 ec 0c             	sub    esp,0xc
c00119ef:	50                   	push   eax
c00119f0:	e8 25 ff ff ff       	call   c001191a <UnixFile::~UnixFile()>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	90                   	nop
c00119f9:	83 c4 0c             	add    esp,0xc
c00119fc:	c3                   	ret    
c00119fd:	90                   	nop

c00119fe <ReservedFilename::~ReservedFilename()>:
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	83 ec 0c             	sub    esp,0xc
c0011a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a08:	e8 cd ff ff ff       	call   c00119da <ReservedFilename::~ReservedFilename()>
c0011a0d:	83 c4 10             	add    esp,0x10
c0011a10:	83 ec 08             	sub    esp,0x8
c0011a13:	6a 0c                	push   0xc
c0011a15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a19:	e8 c8 13 00 00       	call   c0012de6 <operator delete(void*, unsigned long)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	83 c4 0c             	add    esp,0xc
c0011a24:	c3                   	ret    

c0011a25 <getFromFileDescriptor(int)>:
c0011a25:	53                   	push   ebx
c0011a26:	83 ec 08             	sub    esp,0x8
c0011a29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a2d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a33:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a39:	7f 2c                	jg     c0011a67 <getFromFileDescriptor(int)+0x42>
c0011a3b:	83 ec 0c             	sub    esp,0xc
c0011a3e:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a43:	e8 6c 6d 01 00       	call   c00287b4 <LinkedList<UnixFile>::getFirstElement()>
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	85 c0                	test   eax,eax
c0011a4d:	75 04                	jne    c0011a53 <getFromFileDescriptor(int)+0x2e>
c0011a4f:	31 c0                	xor    eax,eax
c0011a51:	eb 6e                	jmp    c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a53:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a56:	74 69                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a58:	52                   	push   edx
c0011a59:	52                   	push   edx
c0011a5a:	50                   	push   eax
c0011a5b:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011a60:	e8 f9 6d 01 00       	call   c002885e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a65:	eb e1                	jmp    c0011a48 <getFromFileDescriptor(int)+0x23>
c0011a67:	a1 ec e4 02 c0       	mov    eax,ds:0xc002e4ec
c0011a6c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a72:	74 4d                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a74:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c0011a79:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a7f:	74 40                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a81:	a1 e8 e4 02 c0       	mov    eax,ds:0xc002e4e8
c0011a86:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a8c:	74 33                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a8e:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0011a93:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a99:	74 26                	je     c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011a9b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011aa1:	83 f8 08             	cmp    eax,0x8
c0011aa4:	77 09                	ja     c0011aaf <getFromFileDescriptor(int)+0x8a>
c0011aa6:	8b 04 85 c0 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b40]
c0011aad:	eb 12                	jmp    c0011ac1 <getFromFileDescriptor(int)+0x9c>
c0011aaf:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ab5:	83 fb 08             	cmp    ebx,0x8
c0011ab8:	77 95                	ja     c0011a4f <getFromFileDescriptor(int)+0x2a>
c0011aba:	8b 04 9d 80 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1b80]
c0011ac1:	83 c4 08             	add    esp,0x8
c0011ac4:	5b                   	pop    ebx
c0011ac5:	c3                   	ret    

c0011ac6 <__static_initialization_and_destruction_0(int, int)>:
c0011ac6:	83 ec 0c             	sub    esp,0xc
c0011ac9:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ace:	75 34                	jne    c0011b04 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ad0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ad8:	75 2a                	jne    c0011b04 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ada:	83 ec 0c             	sub    esp,0xc
c0011add:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011ae2:	e8 a1 6b 01 00       	call   c0028688 <LinkedList<UnixFile>::LinkedList()>
c0011ae7:	83 c4 10             	add    esp,0x10
c0011aea:	83 ec 04             	sub    esp,0x4
c0011aed:	68 98 d2 02 c0       	push   0xc002d298
c0011af2:	68 f8 e4 02 c0       	push   0xc002e4f8
c0011af7:	68 86 86 02 c0       	push   0xc0028686
c0011afc:	e8 5f 12 00 00       	call   c0012d60 <__cxa_atexit>
c0011b01:	83 c4 10             	add    esp,0x10
c0011b04:	90                   	nop
c0011b05:	83 c4 0c             	add    esp,0xc
c0011b08:	c3                   	ret    

c0011b09 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b09:	83 ec 0c             	sub    esp,0xc
c0011b0c:	83 ec 08             	sub    esp,0x8
c0011b0f:	68 ff ff 00 00       	push   0xffff
c0011b14:	6a 01                	push   0x1
c0011b16:	e8 ab ff ff ff       	call   c0011ac6 <__static_initialization_and_destruction_0(int, int)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	83 c4 0c             	add    esp,0xc
c0011b21:	c3                   	ret    

c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b22:	53                   	push   ebx
c0011b23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b27:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b2b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b31:	89 c8                	mov    eax,ecx
c0011b33:	d1 e8                	shr    eax,1
c0011b35:	03 05 28 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d328
c0011b3b:	83 e1 01             	and    ecx,0x1
c0011b3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b40:	75 09                	jne    c0011b4b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b42:	83 e2 f0             	and    edx,0xfffffff0
c0011b45:	09 da                	or     edx,ebx
c0011b47:	88 10                	mov    BYTE PTR [eax],dl
c0011b49:	5b                   	pop    ebx
c0011b4a:	c3                   	ret    
c0011b4b:	c1 e3 04             	shl    ebx,0x4
c0011b4e:	83 e2 0f             	and    edx,0xf
c0011b51:	09 da                	or     edx,ebx
c0011b53:	88 10                	mov    BYTE PTR [eax],dl
c0011b55:	5b                   	pop    ebx
c0011b56:	c3                   	ret    

c0011b57 <Virt::getPageState(unsigned long)>:
c0011b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b5b:	8b 0d 28 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d328
c0011b61:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b67:	89 d0                	mov    eax,edx
c0011b69:	d1 e8                	shr    eax,1
c0011b6b:	83 e2 01             	and    edx,0x1
c0011b6e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b71:	75 04                	jne    c0011b77 <Virt::getPageState(unsigned long)+0x20>
c0011b73:	83 e0 0f             	and    eax,0xf
c0011b76:	c3                   	ret    
c0011b77:	c0 e8 04             	shr    al,0x4
c0011b7a:	c3                   	ret    

c0011b7b <Virt::allocateKernelVirtualPages(int)>:
c0011b7b:	55                   	push   ebp
c0011b7c:	31 ed                	xor    ebp,ebp
c0011b7e:	57                   	push   edi
c0011b7f:	56                   	push   esi
c0011b80:	53                   	push   ebx
c0011b81:	31 db                	xor    ebx,ebx
c0011b83:	83 ec 1c             	sub    esp,0x1c
c0011b86:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b8a:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011b90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b95:	57                   	push   edi
c0011b96:	e8 bc ff ff ff       	call   c0011b57 <Virt::getPageState(unsigned long)>
c0011b9b:	5a                   	pop    edx
c0011b9c:	84 c0                	test   al,al
c0011b9e:	75 3a                	jne    c0011bda <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011ba0:	85 db                	test   ebx,ebx
c0011ba2:	75 02                	jne    c0011ba6 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011ba4:	89 fd                	mov    ebp,edi
c0011ba6:	43                   	inc    ebx
c0011ba7:	39 f3                	cmp    ebx,esi
c0011ba9:	74 5a                	je     c0011c05 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bab:	47                   	inc    edi
c0011bac:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bb2:	76 31                	jbe    c0011be5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bb4:	c7 05 24 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d324,0xc8000
c0011bbe:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bc3:	75 28                	jne    c0011bed <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bc5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bca:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bcf:	57                   	push   edi
c0011bd0:	e8 82 ff ff ff       	call   c0011b57 <Virt::getPageState(unsigned long)>
c0011bd5:	5a                   	pop    edx
c0011bd6:	84 c0                	test   al,al
c0011bd8:	74 c6                	je     c0011ba0 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bda:	31 db                	xor    ebx,ebx
c0011bdc:	47                   	inc    edi
c0011bdd:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011be3:	77 cf                	ja     c0011bb4 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011be5:	89 3d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edi
c0011beb:	eb a8                	jmp    c0011b95 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bed:	83 ec 0c             	sub    esp,0xc
c0011bf0:	68 30 a5 02 c0       	push   0xc002a530
c0011bf5:	e8 71 89 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0011bfa:	8b 3d 24 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d324
c0011c00:	83 c4 10             	add    esp,0x10
c0011c03:	eb 90                	jmp    c0011b95 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c05:	89 2d 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,ebp
c0011c0b:	4b                   	dec    ebx
c0011c0c:	74 5f                	je     c0011c6d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c0e:	85 f6                	test   esi,esi
c0011c10:	74 3d                	je     c0011c4f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c12:	89 e8                	mov    eax,ebp
c0011c14:	31 db                	xor    ebx,ebx
c0011c16:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c19:	eb 14                	jmp    c0011c2f <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c1b:	6a 01                	push   0x1
c0011c1d:	43                   	inc    ebx
c0011c1e:	50                   	push   eax
c0011c1f:	e8 fe fe ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c24:	58                   	pop    eax
c0011c25:	39 f3                	cmp    ebx,esi
c0011c27:	5a                   	pop    edx
c0011c28:	74 25                	je     c0011c4f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c2a:	a1 24 d3 02 c0       	mov    eax,ds:0xc002d324
c0011c2f:	8d 50 01             	lea    edx,[eax+0x1]
c0011c32:	85 db                	test   ebx,ebx
c0011c34:	89 15 24 d3 02 c0    	mov    DWORD PTR ds:0xc002d324,edx
c0011c3a:	74 20                	je     c0011c5c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c3c:	39 df                	cmp    edi,ebx
c0011c3e:	75 db                	jne    c0011c1b <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c40:	6a 03                	push   0x3
c0011c42:	43                   	inc    ebx
c0011c43:	50                   	push   eax
c0011c44:	e8 d9 fe ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c49:	59                   	pop    ecx
c0011c4a:	39 f3                	cmp    ebx,esi
c0011c4c:	58                   	pop    eax
c0011c4d:	75 db                	jne    c0011c2a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c4f:	83 c4 1c             	add    esp,0x1c
c0011c52:	89 e8                	mov    eax,ebp
c0011c54:	5b                   	pop    ebx
c0011c55:	c1 e0 0c             	shl    eax,0xc
c0011c58:	5e                   	pop    esi
c0011c59:	5f                   	pop    edi
c0011c5a:	5d                   	pop    ebp
c0011c5b:	c3                   	ret    
c0011c5c:	6a 02                	push   0x2
c0011c5e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c63:	50                   	push   eax
c0011c64:	e8 b9 fe ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c69:	58                   	pop    eax
c0011c6a:	5a                   	pop    edx
c0011c6b:	eb bd                	jmp    c0011c2a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c6d:	6a 04                	push   0x4
c0011c6f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c72:	55                   	push   ebp
c0011c73:	a3 24 d3 02 c0       	mov    ds:0xc002d324,eax
c0011c78:	e8 a5 fe ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c7d:	59                   	pop    ecx
c0011c7e:	89 e8                	mov    eax,ebp
c0011c80:	5b                   	pop    ebx
c0011c81:	c1 e0 0c             	shl    eax,0xc
c0011c84:	83 c4 1c             	add    esp,0x1c
c0011c87:	5b                   	pop    ebx
c0011c88:	5e                   	pop    esi
c0011c89:	5f                   	pop    edi
c0011c8a:	5d                   	pop    ebp
c0011c8b:	c3                   	ret    

c0011c8c <Virt::freeSwapfilePage(unsigned long)>:
c0011c8c:	53                   	push   ebx
c0011c8d:	8b 15 40 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e740
c0011c93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c97:	b8 01 00 00 00       	mov    eax,0x1
c0011c9c:	89 cb                	mov    ebx,ecx
c0011c9e:	d3 e0                	shl    eax,cl
c0011ca0:	c1 eb 05             	shr    ebx,0x5
c0011ca3:	f7 d0                	not    eax
c0011ca5:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011ca8:	5b                   	pop    ebx
c0011ca9:	c3                   	ret    

c0011caa <Virt::swapIDToSector(unsigned long)>:
c0011caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cae:	0f af 05 2c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d32c
c0011cb5:	03 05 34 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d334
c0011cbb:	c3                   	ret    

c0011cbc <Virt::allocateSwapfilePage()>:
c0011cbc:	55                   	push   ebp
c0011cbd:	31 d2                	xor    edx,edx
c0011cbf:	57                   	push   edi
c0011cc0:	56                   	push   esi
c0011cc1:	53                   	push   ebx
c0011cc2:	83 ec 0c             	sub    esp,0xc
c0011cc5:	8b 0d 2c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d32c
c0011ccb:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011cd0:	f7 f1                	div    ecx
c0011cd2:	39 0d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ecx
c0011cd8:	72 2d                	jb     c0011d07 <Virt::allocateSwapfilePage()+0x4b>
c0011cda:	8b 35 40 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e740
c0011ce0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ce2:	f6 c2 01             	test   dl,0x1
c0011ce5:	74 3c                	je     c0011d23 <Virt::allocateSwapfilePage()+0x67>
c0011ce7:	31 c9                	xor    ecx,ecx
c0011ce9:	bf 01 00 00 00       	mov    edi,0x1
c0011cee:	eb 12                	jmp    c0011d02 <Virt::allocateSwapfilePage()+0x46>
c0011cf0:	89 fd                	mov    ebp,edi
c0011cf2:	89 ca                	mov    edx,ecx
c0011cf4:	d3 e5                	shl    ebp,cl
c0011cf6:	c1 ea 05             	shr    edx,0x5
c0011cf9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cfc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cfe:	85 ea                	test   edx,ebp
c0011d00:	74 2a                	je     c0011d2c <Virt::allocateSwapfilePage()+0x70>
c0011d02:	41                   	inc    ecx
c0011d03:	39 c8                	cmp    eax,ecx
c0011d05:	77 e9                	ja     c0011cf0 <Virt::allocateSwapfilePage()+0x34>
c0011d07:	83 ec 0c             	sub    esp,0xc
c0011d0a:	68 b7 a6 02 c0       	push   0xc002a6b7
c0011d0f:	e8 57 88 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0011d14:	83 c4 10             	add    esp,0x10
c0011d17:	31 c9                	xor    ecx,ecx
c0011d19:	83 c4 0c             	add    esp,0xc
c0011d1c:	89 c8                	mov    eax,ecx
c0011d1e:	5b                   	pop    ebx
c0011d1f:	5e                   	pop    esi
c0011d20:	5f                   	pop    edi
c0011d21:	5d                   	pop    ebp
c0011d22:	c3                   	ret    
c0011d23:	89 f3                	mov    ebx,esi
c0011d25:	bd 01 00 00 00       	mov    ebp,0x1
c0011d2a:	31 c9                	xor    ecx,ecx
c0011d2c:	09 ea                	or     edx,ebp
c0011d2e:	89 c8                	mov    eax,ecx
c0011d30:	89 13                	mov    DWORD PTR [ebx],edx
c0011d32:	83 c4 0c             	add    esp,0xc
c0011d35:	5b                   	pop    ebx
c0011d36:	5e                   	pop    esi
c0011d37:	5f                   	pop    edi
c0011d38:	5d                   	pop    ebp
c0011d39:	c3                   	ret    

c0011d3a <Virt::virtualMemorySetup()>:
c0011d3a:	53                   	push   ebx
c0011d3b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d40:	83 ec 08             	sub    esp,0x8
c0011d43:	6a 0f                	push   0xf
c0011d45:	53                   	push   ebx
c0011d46:	43                   	inc    ebx
c0011d47:	e8 d6 fd ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d4c:	59                   	pop    ecx
c0011d4d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d53:	58                   	pop    eax
c0011d54:	75 ed                	jne    c0011d43 <Virt::virtualMemorySetup()+0x9>
c0011d56:	83 ec 08             	sub    esp,0x8
c0011d59:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d5e:	68 00 00 00 c8       	push   0xc8000000
c0011d63:	68 ce a6 02 c0       	push   0xc002a6ce
c0011d68:	e8 59 11 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0011d6d:	58                   	pop    eax
c0011d6e:	5a                   	pop    edx
c0011d6f:	68 00 f0 ff ef       	push   0xeffff000
c0011d74:	68 e2 a6 02 c0       	push   0xc002a6e2
c0011d79:	e8 48 11 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0011d7e:	83 c4 10             	add    esp,0x10
c0011d81:	83 ec 08             	sub    esp,0x8
c0011d84:	6a 00                	push   0x0
c0011d86:	53                   	push   ebx
c0011d87:	43                   	inc    ebx
c0011d88:	e8 95 fd ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d8d:	83 c4 10             	add    esp,0x10
c0011d90:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d96:	75 e9                	jne    c0011d81 <Virt::virtualMemorySetup()+0x47>
c0011d98:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d9d:	83 ec 08             	sub    esp,0x8
c0011da0:	6a 0f                	push   0xf
c0011da2:	53                   	push   ebx
c0011da3:	43                   	inc    ebx
c0011da4:	e8 79 fd ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011db2:	75 e9                	jne    c0011d9d <Virt::virtualMemorySetup()+0x63>
c0011db4:	83 c4 08             	add    esp,0x8
c0011db7:	5b                   	pop    ebx
c0011db8:	c3                   	ret    

c0011db9 <Virt::swappingSetup()>:
c0011db9:	57                   	push   edi
c0011dba:	56                   	push   esi
c0011dbb:	53                   	push   ebx
c0011dbc:	83 ec 1c             	sub    esp,0x1c
c0011dbf:	68 14 01 00 00       	push   0x114
c0011dc4:	e8 7a da ff ff       	call   c000f843 <malloc>
c0011dc9:	83 c4 0c             	add    esp,0xc
c0011dcc:	89 c6                	mov    esi,eax
c0011dce:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c0011dd4:	68 f6 a6 02 c0       	push   0xc002a6f6
c0011dd9:	50                   	push   eax
c0011dda:	e8 3f 16 00 00       	call   c001341e <File::File(char const*, Process*)>
c0011ddf:	83 c4 10             	add    esp,0x10
c0011de2:	85 f6                	test   esi,esi
c0011de4:	0f 84 34 01 00 00    	je     c0011f1e <Virt::swappingSetup()+0x165>
c0011dea:	53                   	push   ebx
c0011deb:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011def:	50                   	push   eax
c0011df0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011df4:	50                   	push   eax
c0011df5:	56                   	push   esi
c0011df6:	e8 33 19 00 00       	call   c001372e <File::stat(unsigned long long*, bool*)>
c0011dfb:	83 c4 10             	add    esp,0x10
c0011dfe:	85 c0                	test   eax,eax
c0011e00:	75 0b                	jne    c0011e0d <Virt::swappingSetup()+0x54>
c0011e02:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011e07:	0f 84 f0 00 00 00    	je     c0011efd <Virt::swappingSetup()+0x144>
c0011e0d:	83 ec 0c             	sub    esp,0xc
c0011e10:	56                   	push   esi
c0011e11:	e8 e4 17 00 00       	call   c00135fa <File::unlink()>
c0011e16:	c7 04 24 20 a7 02 c0 	mov    DWORD PTR [esp],0xc002a720
c0011e1d:	e8 a4 10 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0011e22:	58                   	pop    eax
c0011e23:	5a                   	pop    edx
c0011e24:	6a 12                	push   0x12
c0011e26:	56                   	push   esi
c0011e27:	e8 56 16 00 00       	call   c0013482 <File::open(FileOpenMode)>
c0011e2c:	83 c4 10             	add    esp,0x10
c0011e2f:	8b 0d 30 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d330
c0011e35:	85 c9                	test   ecx,ecx
c0011e37:	74 42                	je     c0011e7b <Virt::swappingSetup()+0xc2>
c0011e39:	31 db                	xor    ebx,ebx
c0011e3b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011e3f:	83 ec 0c             	sub    esp,0xc
c0011e42:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e44:	57                   	push   edi
c0011e45:	68 40 e5 02 c0       	push   0xc002e540
c0011e4a:	6a 00                	push   0x0
c0011e4c:	68 00 02 00 00       	push   0x200
c0011e51:	56                   	push   esi
c0011e52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e55:	83 c4 20             	add    esp,0x20
c0011e58:	81 7c 24 04 00 02 00 00 	cmp    DWORD PTR [esp+0x4],0x200
c0011e60:	74 10                	je     c0011e72 <Virt::swappingSetup()+0xb9>
c0011e62:	83 ec 0c             	sub    esp,0xc
c0011e65:	68 38 a7 02 c0       	push   0xc002a738
c0011e6a:	e8 fc 86 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	43                   	inc    ebx
c0011e73:	39 1d 30 d3 02 c0    	cmp    DWORD PTR ds:0xc002d330,ebx
c0011e79:	77 c4                	ja     c0011e3f <Virt::swappingSetup()+0x86>
c0011e7b:	83 ec 0c             	sub    esp,0xc
c0011e7e:	56                   	push   esi
c0011e7f:	e8 5c 16 00 00       	call   c00134e0 <File::close()>
c0011e84:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011e89:	31 d2                	xor    edx,edx
c0011e8b:	c1 e0 09             	shl    eax,0x9
c0011e8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e96:	83 c4 10             	add    esp,0x10
c0011e99:	83 ec 08             	sub    esp,0x8
c0011e9c:	0f ac d0 09          	shrd   eax,edx,0x9
c0011ea0:	31 d2                	xor    edx,edx
c0011ea2:	a3 30 d3 02 c0       	mov    ds:0xc002d330,eax
c0011ea7:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011ead:	c1 e8 05             	shr    eax,0x5
c0011eb0:	50                   	push   eax
c0011eb1:	68 56 a7 02 c0       	push   0xc002a756
c0011eb6:	e8 0b 10 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0011ebb:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011ec0:	31 d2                	xor    edx,edx
c0011ec2:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011ec8:	c1 e8 05             	shr    eax,0x5
c0011ecb:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ece:	e8 70 d9 ff ff       	call   c000f843 <malloc>
c0011ed3:	83 c4 0c             	add    esp,0xc
c0011ed6:	89 c1                	mov    ecx,eax
c0011ed8:	a3 40 e7 02 c0       	mov    ds:0xc002e740,eax
c0011edd:	31 d2                	xor    edx,edx
c0011edf:	a1 30 d3 02 c0       	mov    eax,ds:0xc002d330
c0011ee4:	f7 35 2c d3 02 c0    	div    DWORD PTR ds:0xc002d32c
c0011eea:	c1 e8 05             	shr    eax,0x5
c0011eed:	50                   	push   eax
c0011eee:	6a 00                	push   0x0
c0011ef0:	51                   	push   ecx
c0011ef1:	e8 82 e8 fe ff       	call   c0000778 <memset>
c0011ef6:	83 c4 20             	add    esp,0x20
c0011ef9:	5b                   	pop    ebx
c0011efa:	5e                   	pop    esi
c0011efb:	5f                   	pop    edi
c0011efc:	c3                   	ret    
c0011efd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f05:	89 c1                	mov    ecx,eax
c0011f07:	89 d3                	mov    ebx,edx
c0011f09:	09 c3                	or     ebx,eax
c0011f0b:	0f 84 fc fe ff ff    	je     c0011e0d <Virt::swappingSetup()+0x54>
c0011f11:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0011f17:	74 80                	je     c0011e99 <Virt::swappingSetup()+0xe0>
c0011f19:	e9 ef fe ff ff       	jmp    c0011e0d <Virt::swappingSetup()+0x54>
c0011f1e:	83 ec 0c             	sub    esp,0xc
c0011f21:	68 06 a7 02 c0       	push   0xc002a706
c0011f26:	e8 40 86 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0011f2b:	83 c4 10             	add    esp,0x10
c0011f2e:	e9 b7 fe ff ff       	jmp    c0011dea <Virt::swappingSetup()+0x31>

c0011f33 <Virt::getAKernelVAS()>:
c0011f33:	a1 44 e7 02 c0       	mov    eax,ds:0xc002e744
c0011f38:	c3                   	ret    
c0011f39:	90                   	nop

c0011f3a <VAS::VAS()>:
c0011f3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f49:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f54:	a3 44 e7 02 c0       	mov    ds:0xc002e744,eax
c0011f59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f5d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f65:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6c:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f73:	90                   	nop
c0011f74:	c3                   	ret    
c0011f75:	90                   	nop

c0011f76 <VAS::VAS(VAS*)>:
c0011f76:	83 ec 0c             	sub    esp,0xc
c0011f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f88:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f8f:	83 ec 0c             	sub    esp,0xc
c0011f92:	68 50 a5 02 c0       	push   0xc002a550
c0011f97:	e8 cf 85 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0011f9c:	83 c4 10             	add    esp,0x10
c0011f9f:	90                   	nop
c0011fa0:	83 c4 0c             	add    esp,0xc
c0011fa3:	c3                   	ret    

c0011fa4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fa8:	89 c2                	mov    edx,eax
c0011faa:	c1 e8 0a             	shr    eax,0xa
c0011fad:	c1 ea 16             	shr    edx,0x16
c0011fb0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fb5:	19 c9                	sbb    ecx,ecx
c0011fb7:	c1 e2 0c             	shl    edx,0xc
c0011fba:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fc0:	25 fc 0f 00 00       	and    eax,0xffc
c0011fc5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fcc:	01 d0                	add    eax,edx
c0011fce:	c3                   	ret    
c0011fcf:	90                   	nop

c0011fd0 <VAS::getPageTableEntry(unsigned long)>:
c0011fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fd4:	89 ca                	mov    edx,ecx
c0011fd6:	c1 e9 0a             	shr    ecx,0xa
c0011fd9:	c1 ea 16             	shr    edx,0x16
c0011fdc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fe2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011fe8:	c1 e0 0c             	shl    eax,0xc
c0011feb:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011fee:	c3                   	ret    

c0011fef <Virt::freeKernelVirtualPages(unsigned long)>:
c0011fef:	57                   	push   edi
c0011ff0:	56                   	push   esi
c0011ff1:	be 01 00 00 00       	mov    esi,0x1
c0011ff6:	53                   	push   ebx
c0011ff7:	83 ec 10             	sub    esp,0x10
c0011ffa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ffe:	c1 eb 0c             	shr    ebx,0xc
c0012001:	eb 3f                	jmp    c0012042 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012003:	e8 2b ff ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c0012008:	83 ec 08             	sub    esp,0x8
c001200b:	57                   	push   edi
c001200c:	50                   	push   eax
c001200d:	e8 be ff ff ff       	call   c0011fd0 <VAS::getPageTableEntry(unsigned long)>
c0012012:	83 c4 10             	add    esp,0x10
c0012015:	8b 00                	mov    eax,DWORD PTR [eax]
c0012017:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001201b:	f6 c4 04             	test   ah,0x4
c001201e:	75 5f                	jne    c001207f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012020:	80 fa 04             	cmp    dl,0x4
c0012023:	74 78                	je     c001209d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012025:	80 fa 02             	cmp    dl,0x2
c0012028:	0f 84 88 00 00 00    	je     c00120b6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001202e:	80 fa 03             	cmp    dl,0x3
c0012031:	0f 84 ad 00 00 00    	je     c00120e4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012037:	fe ca                	dec    dl
c0012039:	0f 84 92 00 00 00    	je     c00120d1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001203f:	43                   	inc    ebx
c0012040:	31 f6                	xor    esi,esi
c0012042:	53                   	push   ebx
c0012043:	e8 0f fb ff ff       	call   c0011b57 <Virt::getPageState(unsigned long)>
c0012048:	5f                   	pop    edi
c0012049:	89 df                	mov    edi,ebx
c001204b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001204f:	c1 e7 0c             	shl    edi,0xc
c0012052:	84 c0                	test   al,al
c0012054:	75 ad                	jne    c0012003 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012056:	83 ec 0c             	sub    esp,0xc
c0012059:	68 71 a7 02 c0       	push   0xc002a771
c001205e:	e8 08 85 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0012063:	e8 cb fe ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c0012068:	5a                   	pop    edx
c0012069:	59                   	pop    ecx
c001206a:	57                   	push   edi
c001206b:	50                   	push   eax
c001206c:	e8 5f ff ff ff       	call   c0011fd0 <VAS::getPageTableEntry(unsigned long)>
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	8b 00                	mov    eax,DWORD PTR [eax]
c0012076:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001207a:	f6 c4 04             	test   ah,0x4
c001207d:	74 c0                	je     c001203f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001207f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012083:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012088:	83 ec 0c             	sub    esp,0xc
c001208b:	50                   	push   eax
c001208c:	e8 c5 dd ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012098:	80 fa 04             	cmp    dl,0x4
c001209b:	75 88                	jne    c0012025 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001209d:	89 f0                	mov    eax,esi
c001209f:	84 c0                	test   al,al
c00120a1:	75 47                	jne    c00120ea <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120a3:	c7 44 24 20 74 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a574
c00120ab:	83 c4 10             	add    esp,0x10
c00120ae:	5b                   	pop    ebx
c00120af:	5e                   	pop    esi
c00120b0:	5f                   	pop    edi
c00120b1:	e9 b5 84 00 00       	jmp    c001a56b <Krnl::panic(char const*)>
c00120b6:	89 f0                	mov    eax,esi
c00120b8:	84 c0                	test   al,al
c00120ba:	75 15                	jne    c00120d1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120bc:	83 ec 0c             	sub    esp,0xc
c00120bf:	68 8d a7 02 c0       	push   0xc002a78d
c00120c4:	e8 a2 84 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00120c9:	83 c4 10             	add    esp,0x10
c00120cc:	e9 6e ff ff ff       	jmp    c001203f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120d1:	83 ec 08             	sub    esp,0x8
c00120d4:	6a 00                	push   0x0
c00120d6:	53                   	push   ebx
c00120d7:	e8 46 fa ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120dc:	83 c4 10             	add    esp,0x10
c00120df:	e9 5b ff ff ff       	jmp    c001203f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120e4:	89 f0                	mov    eax,esi
c00120e6:	84 c0                	test   al,al
c00120e8:	75 15                	jne    c00120ff <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120ea:	83 ec 08             	sub    esp,0x8
c00120ed:	6a 00                	push   0x0
c00120ef:	53                   	push   ebx
c00120f0:	e8 2d fa ff ff       	call   c0011b22 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120f5:	83 c4 10             	add    esp,0x10
c00120f8:	83 c4 10             	add    esp,0x10
c00120fb:	5b                   	pop    ebx
c00120fc:	5e                   	pop    esi
c00120fd:	5f                   	pop    edi
c00120fe:	c3                   	ret    
c00120ff:	c7 44 24 20 a9 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a7a9
c0012107:	83 c4 10             	add    esp,0x10
c001210a:	5b                   	pop    ebx
c001210b:	5e                   	pop    esi
c001210c:	5f                   	pop    edi
c001210d:	e9 59 84 00 00       	jmp    c001a56b <Krnl::panic(char const*)>

c0012112 <VAS::freeAllocatedPages(unsigned long)>:
c0012112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012116:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001211a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001211e:	74 09                	je     c0012129 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012120:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012124:	e9 c6 fe ff ff       	jmp    c0011fef <Virt::freeKernelVirtualPages(unsigned long)>
c0012129:	c7 44 24 04 98 a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a598
c0012131:	e9 90 0d 00 00       	jmp    c0012ec6 <Dbg::kprintf(char const*, ...)>

c0012136 <VAS::virtualToPhysical(unsigned long)>:
c0012136:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001213a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001213e:	e8 8d fe ff ff       	call   c0011fd0 <VAS::getPageTableEntry(unsigned long)>
c0012143:	5a                   	pop    edx
c0012144:	8b 00                	mov    eax,DWORD PTR [eax]
c0012146:	59                   	pop    ecx
c0012147:	25 00 f0 ff ff       	and    eax,0xfffff000
c001214c:	c3                   	ret    
c001214d:	90                   	nop

c001214e <VAS::reflagRange(unsigned long, int, int, int)>:
c001214e:	55                   	push   ebp
c001214f:	57                   	push   edi
c0012150:	56                   	push   esi
c0012151:	53                   	push   ebx
c0012152:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012156:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001215a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001215e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012162:	85 db                	test   ebx,ebx
c0012164:	7e 22                	jle    c0012188 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012166:	c1 e3 0c             	shl    ebx,0xc
c0012169:	01 f3                	add    ebx,esi
c001216b:	56                   	push   esi
c001216c:	81 c6 00 10 00 00    	add    esi,0x1000
c0012172:	55                   	push   ebp
c0012173:	e8 58 fe ff ff       	call   c0011fd0 <VAS::getPageTableEntry(unsigned long)>
c0012178:	5a                   	pop    edx
c0012179:	59                   	pop    ecx
c001217a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001217c:	21 f9                	and    ecx,edi
c001217e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012182:	39 f3                	cmp    ebx,esi
c0012184:	89 08                	mov    DWORD PTR [eax],ecx
c0012186:	75 e3                	jne    c001216b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012188:	5b                   	pop    ebx
c0012189:	5e                   	pop    esi
c001218a:	5f                   	pop    edi
c001218b:	5d                   	pop    ebp
c001218c:	c3                   	ret    
c001218d:	90                   	nop

c001218e <VAS::setToWriteCombining(unsigned long, int)>:
c001218e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012193:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012199:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121a0:	75 01                	jne    c00121a3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121a2:	c3                   	ret    
c00121a3:	68 80 00 00 00       	push   0x80
c00121a8:	6a ff                	push   0xffffffff
c00121aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121b6:	e8 93 ff ff ff       	call   c001214e <VAS::reflagRange(unsigned long, int, int, int)>
c00121bb:	83 c4 14             	add    esp,0x14
c00121be:	c3                   	ret    
c00121bf:	90                   	nop

c00121c0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121c0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121c9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121d0:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121d3:	19 c0                	sbb    eax,eax
c00121d5:	83 ca 03             	or     edx,0x3
c00121d8:	83 e0 fc             	and    eax,0xfffffffc
c00121db:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121e2:	0f 20 d8             	mov    eax,cr3
c00121e5:	0f 22 d8             	mov    cr3,eax
c00121e8:	c3                   	ret    
c00121e9:	90                   	nop

c00121ea <VAS::~VAS()>:
c00121ea:	83 ec 2c             	sub    esp,0x2c
c00121ed:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121f5:	e8 6b bb 00 00       	call   c001dd65 <lockScheduler()>
c00121fa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0012201:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012204:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c001220a:	83 ec 04             	sub    esp,0x4
c001220d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012211:	6a 01                	push   0x1
c0012213:	50                   	push   eax
c0012214:	e8 a7 ff ff ff       	call   c00121c0 <VAS::mapOtherVASIn(bool, VAS*)>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012224:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001222c:	0f 8f d7 00 00 00    	jg     c0012309 <VAS::~VAS()+0x11f>
c0012232:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012236:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012239:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001223d:	c1 e2 02             	shl    edx,0x2
c0012240:	01 d0                	add    eax,edx
c0012242:	8b 00                	mov    eax,DWORD PTR [eax]
c0012244:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001224c:	83 e0 01             	and    eax,0x1
c001224f:	0f 84 ab 00 00 00    	je     c0012300 <VAS::~VAS()+0x116>
c0012255:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001225d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012265:	7f 75                	jg     c00122dc <VAS::~VAS()+0xf2>
c0012267:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001226b:	c1 e0 0a             	shl    eax,0xa
c001226e:	89 c2                	mov    edx,eax
c0012270:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012274:	01 d0                	add    eax,edx
c0012276:	c1 e0 0c             	shl    eax,0xc
c0012279:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001227d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012282:	8b 00                	mov    eax,DWORD PTR [eax]
c0012284:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012287:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c001228d:	83 ec 04             	sub    esp,0x4
c0012290:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012294:	6a 01                	push   0x1
c0012296:	50                   	push   eax
c0012297:	e8 08 fd ff ff       	call   c0011fa4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001229c:	83 c4 10             	add    esp,0x10
c001229f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122b1:	25 01 04 00 00       	and    eax,0x401
c00122b6:	3d 01 04 00 00       	cmp    eax,0x401
c00122bb:	75 19                	jne    c00122d6 <VAS::~VAS()+0xec>
c00122bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122c6:	83 ec 0c             	sub    esp,0xc
c00122c9:	50                   	push   eax
c00122ca:	e8 87 db ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00122cf:	83 c4 10             	add    esp,0x10
c00122d2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122d6:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122da:	eb 81                	jmp    c001225d <VAS::~VAS()+0x73>
c00122dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122e0:	25 00 04 00 00       	and    eax,0x400
c00122e5:	74 19                	je     c0012300 <VAS::~VAS()+0x116>
c00122e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122f0:	83 ec 0c             	sub    esp,0xc
c00122f3:	50                   	push   eax
c00122f4:	e8 5d db ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00122f9:	83 c4 10             	add    esp,0x10
c00122fc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012300:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012304:	e9 1b ff ff ff       	jmp    c0012224 <VAS::~VAS()+0x3a>
c0012309:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001230d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012310:	83 ec 0c             	sub    esp,0xc
c0012313:	50                   	push   eax
c0012314:	e8 d6 fc ff ff       	call   c0011fef <Virt::freeKernelVirtualPages(unsigned long)>
c0012319:	83 c4 10             	add    esp,0x10
c001231c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012320:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012323:	83 ec 0c             	sub    esp,0xc
c0012326:	50                   	push   eax
c0012327:	e8 2a db ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c001232c:	83 c4 10             	add    esp,0x10
c001232f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012333:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012337:	c1 e0 02             	shl    eax,0x2
c001233a:	83 ec 08             	sub    esp,0x8
c001233d:	50                   	push   eax
c001233e:	68 bc a5 02 c0       	push   0xc002a5bc
c0012343:	e8 7e 0b 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0012348:	83 c4 10             	add    esp,0x10
c001234b:	e8 17 ba 00 00       	call   c001dd67 <unlockScheduler()>
c0012350:	90                   	nop
c0012351:	83 c4 2c             	add    esp,0x2c
c0012354:	c3                   	ret    
c0012355:	90                   	nop

c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012356:	55                   	push   ebp
c0012357:	57                   	push   edi
c0012358:	56                   	push   esi
c0012359:	53                   	push   ebx
c001235a:	83 ec 1c             	sub    esp,0x1c
c001235d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012361:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012365:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001236b:	77 08                	ja     c0012375 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001236d:	0f 20 d8             	mov    eax,cr3
c0012370:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012373:	75 47                	jne    c00123bc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012375:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012379:	09 d8                	or     eax,ebx
c001237b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012380:	75 57                	jne    c00123d9 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012382:	89 de                	mov    esi,ebx
c0012384:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012387:	c1 ee 16             	shr    esi,0x16
c001238a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012391:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012395:	74 54                	je     c00123eb <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012397:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001239b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123a1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123a5:	c1 e6 0c             	shl    esi,0xc
c00123a8:	c1 eb 0a             	shr    ebx,0xa
c00123ab:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123b1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123b4:	83 c4 1c             	add    esp,0x1c
c00123b7:	5b                   	pop    ebx
c00123b8:	5e                   	pop    esi
c00123b9:	5f                   	pop    edi
c00123ba:	5d                   	pop    ebp
c00123bb:	c3                   	ret    
c00123bc:	83 ec 0c             	sub    esp,0xc
c00123bf:	68 dc a5 02 c0       	push   0xc002a5dc
c00123c4:	e8 fd 0a 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00123c9:	83 c4 10             	add    esp,0x10
c00123cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123d0:	09 d8                	or     eax,ebx
c00123d2:	a9 ff 0f 00 00       	test   eax,0xfff
c00123d7:	74 a9                	je     c0012382 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123d9:	83 ec 0c             	sub    esp,0xc
c00123dc:	68 44 a6 02 c0       	push   0xc002a644
c00123e1:	e8 85 81 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00123e6:	83 c4 10             	add    esp,0x10
c00123e9:	eb 97                	jmp    c0012382 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123ef:	e8 ec da ff ff       	call   c000fee0 <Phys::allocatePage()>
c00123f4:	89 c5                	mov    ebp,eax
c00123f6:	e8 38 fb ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c00123fb:	83 ec 0c             	sub    esp,0xc
c00123fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012402:	6a 01                	push   0x1
c0012404:	e8 72 f7 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0012409:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012410:	6a 01                	push   0x1
c0012412:	50                   	push   eax
c0012413:	55                   	push   ebp
c0012414:	81 cd 07 04 00 00    	or     ebp,0x407
c001241a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001241e:	51                   	push   ecx
c001241f:	e8 26 02 00 00       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012424:	83 c4 1c             	add    esp,0x1c
c0012427:	68 00 10 00 00       	push   0x1000
c001242c:	6a 00                	push   0x0
c001242e:	50                   	push   eax
c001242f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012433:	e8 40 e3 fe ff       	call   c0000778 <memset>
c0012438:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001243c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001243f:	e8 ab fb ff ff       	call   c0011fef <Virt::freeKernelVirtualPages(unsigned long)>
c0012444:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012448:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001244b:	83 c4 10             	add    esp,0x10
c001244e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012451:	e9 41 ff ff ff       	jmp    c0012397 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012456 <VAS::allocatePages(int, int)>:
c0012456:	55                   	push   ebp
c0012457:	57                   	push   edi
c0012458:	56                   	push   esi
c0012459:	53                   	push   ebx
c001245a:	83 ec 1c             	sub    esp,0x1c
c001245d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012461:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012466:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001246c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012472:	83 e0 01             	and    eax,0x1
c0012475:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012479:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001247d:	0f 85 cc 00 00 00    	jne    c001254f <VAS::allocatePages(int, int)+0xf9>
c0012483:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012486:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001248a:	85 c0                	test   eax,eax
c001248c:	0f 84 a1 00 00 00    	je     c0012533 <VAS::allocatePages(int, int)+0xdd>
c0012492:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012496:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001249a:	c1 e6 0c             	shl    esi,0xc
c001249d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124a1:	85 c0                	test   eax,eax
c00124a3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124a6:	7e 33                	jle    c00124db <VAS::allocatePages(int, int)+0x85>
c00124a8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124ac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124b0:	81 cd 00 04 00 00    	or     ebp,0x400
c00124b6:	e8 25 da ff ff       	call   c000fee0 <Phys::allocatePage()>
c00124bb:	55                   	push   ebp
c00124bc:	53                   	push   ebx
c00124bd:	50                   	push   eax
c00124be:	57                   	push   edi
c00124bf:	e8 92 fe ff ff       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124c4:	83 c4 10             	add    esp,0x10
c00124c7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124cc:	74 03                	je     c00124d1 <VAS::allocatePages(int, int)+0x7b>
c00124ce:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124d1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124d7:	39 de                	cmp    esi,ebx
c00124d9:	75 db                	jne    c00124b6 <VAS::allocatePages(int, int)+0x60>
c00124db:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124e0:	75 12                	jne    c00124f4 <VAS::allocatePages(int, int)+0x9e>
c00124e2:	0f 20 d8             	mov    eax,cr3
c00124e5:	0f 22 d8             	mov    cr3,eax
c00124e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124ec:	83 c4 1c             	add    esp,0x1c
c00124ef:	5b                   	pop    ebx
c00124f0:	5e                   	pop    esi
c00124f1:	5f                   	pop    edi
c00124f2:	5d                   	pop    ebp
c00124f3:	c3                   	ret    
c00124f4:	c1 ee 0a             	shr    esi,0xa
c00124f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124fb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012501:	c1 eb 0a             	shr    ebx,0xa
c0012504:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001250a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012510:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012516:	39 c3                	cmp    ebx,eax
c0012518:	77 ce                	ja     c00124e8 <VAS::allocatePages(int, int)+0x92>
c001251a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001251d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012523:	39 d8                	cmp    eax,ebx
c0012525:	73 f3                	jae    c001251a <VAS::allocatePages(int, int)+0xc4>
c0012527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001252b:	83 c4 1c             	add    esp,0x1c
c001252e:	5b                   	pop    ebx
c001252f:	5e                   	pop    esi
c0012530:	5f                   	pop    edi
c0012531:	5d                   	pop    ebp
c0012532:	c3                   	ret    
c0012533:	83 ec 0c             	sub    esp,0xc
c0012536:	68 68 a6 02 c0       	push   0xc002a668
c001253b:	e8 2b 80 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0012540:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012543:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012547:	83 c4 10             	add    esp,0x10
c001254a:	e9 43 ff ff ff       	jmp    c0012492 <VAS::allocatePages(int, int)+0x3c>
c001254f:	83 ec 0c             	sub    esp,0xc
c0012552:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012556:	e8 20 f6 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c001255b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001255f:	83 c4 10             	add    esp,0x10
c0012562:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012567:	0f 87 9b 00 00 00    	ja     c0012608 <VAS::allocatePages(int, int)+0x1b2>
c001256d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012571:	85 d2                	test   edx,edx
c0012573:	7e 3c                	jle    c00125b1 <VAS::allocatePages(int, int)+0x15b>
c0012575:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012579:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001257d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012581:	c1 e5 0c             	shl    ebp,0xc
c0012584:	81 ce 00 04 00 00    	or     esi,0x400
c001258a:	01 dd                	add    ebp,ebx
c001258c:	e8 4f d9 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012591:	56                   	push   esi
c0012592:	53                   	push   ebx
c0012593:	50                   	push   eax
c0012594:	57                   	push   edi
c0012595:	e8 bc fd ff ff       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c001259a:	83 c4 10             	add    esp,0x10
c001259d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125a2:	74 03                	je     c00125a7 <VAS::allocatePages(int, int)+0x151>
c00125a4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125a7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125ad:	39 dd                	cmp    ebp,ebx
c00125af:	75 db                	jne    c001258c <VAS::allocatePages(int, int)+0x136>
c00125b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125b6:	0f 84 26 ff ff ff    	je     c00124e2 <VAS::allocatePages(int, int)+0x8c>
c00125bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125c4:	89 d3                	mov    ebx,edx
c00125c6:	c1 e0 0c             	shl    eax,0xc
c00125c9:	c1 eb 0a             	shr    ebx,0xa
c00125cc:	01 d0                	add    eax,edx
c00125ce:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125d4:	c1 e8 0a             	shr    eax,0xa
c00125d7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125e2:	2d 00 00 40 00       	sub    eax,0x400000
c00125e7:	39 c3                	cmp    ebx,eax
c00125e9:	0f 87 f9 fe ff ff    	ja     c00124e8 <VAS::allocatePages(int, int)+0x92>
c00125ef:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125f2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125f8:	39 d8                	cmp    eax,ebx
c00125fa:	73 f3                	jae    c00125ef <VAS::allocatePages(int, int)+0x199>
c00125fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012600:	83 c4 1c             	add    esp,0x1c
c0012603:	5b                   	pop    ebx
c0012604:	5e                   	pop    esi
c0012605:	5f                   	pop    edi
c0012606:	5d                   	pop    ebp
c0012607:	c3                   	ret    
c0012608:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001260d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012613:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001261a:	0f 84 4d ff ff ff    	je     c001256d <VAS::allocatePages(int, int)+0x117>
c0012620:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012628:	e9 40 ff ff ff       	jmp    c001256d <VAS::allocatePages(int, int)+0x117>
c001262d:	90                   	nop

c001262e <VAS::setCPUSpecific(unsigned long)>:
c001262e:	83 ec 0c             	sub    esp,0xc
c0012631:	6a 05                	push   0x5
c0012633:	68 00 00 40 c2       	push   0xc2400000
c0012638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001263c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012640:	e8 11 fd ff ff       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012645:	83 c4 1c             	add    esp,0x1c
c0012648:	c3                   	ret    
c0012649:	90                   	nop

c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001264a:	55                   	push   ebp
c001264b:	57                   	push   edi
c001264c:	56                   	push   esi
c001264d:	53                   	push   ebx
c001264e:	83 ec 1c             	sub    esp,0x1c
c0012651:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012656:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001265a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012660:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012664:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001266a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001266e:	83 e0 01             	and    eax,0x1
c0012671:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012675:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012679:	85 c0                	test   eax,eax
c001267b:	7e 39                	jle    c00126b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001267d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012681:	89 f3                	mov    ebx,esi
c0012683:	c1 e0 0c             	shl    eax,0xc
c0012686:	01 f0                	add    eax,esi
c0012688:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001268c:	55                   	push   ebp
c001268d:	53                   	push   ebx
c001268e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012692:	29 f0                	sub    eax,esi
c0012694:	01 d8                	add    eax,ebx
c0012696:	50                   	push   eax
c0012697:	57                   	push   edi
c0012698:	e8 b9 fc ff ff       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c001269d:	83 c4 10             	add    esp,0x10
c00126a0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126a5:	74 03                	je     c00126aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126a7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126b0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126b4:	75 d6                	jne    c001268c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126b6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126bb:	75 10                	jne    c00126cd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126bd:	0f 20 d8             	mov    eax,cr3
c00126c0:	0f 22 d8             	mov    cr3,eax
c00126c3:	83 c4 1c             	add    esp,0x1c
c00126c6:	89 f0                	mov    eax,esi
c00126c8:	5b                   	pop    ebx
c00126c9:	5e                   	pop    esi
c00126ca:	5f                   	pop    edi
c00126cb:	5d                   	pop    ebp
c00126cc:	c3                   	ret    
c00126cd:	89 f3                	mov    ebx,esi
c00126cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126d3:	c1 eb 0a             	shr    ebx,0xa
c00126d6:	c1 e0 0c             	shl    eax,0xc
c00126d9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126df:	01 f0                	add    eax,esi
c00126e1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126e7:	c1 e8 0a             	shr    eax,0xa
c00126ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126ef:	2d 00 00 40 00       	sub    eax,0x400000
c00126f4:	39 c3                	cmp    ebx,eax
c00126f6:	77 cb                	ja     c00126c3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126f8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126fb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012701:	39 d8                	cmp    eax,ebx
c0012703:	73 f3                	jae    c00126f8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012705:	83 c4 1c             	add    esp,0x1c
c0012708:	89 f0                	mov    eax,esi
c001270a:	5b                   	pop    ebx
c001270b:	5e                   	pop    esi
c001270c:	5f                   	pop    edi
c001270d:	5d                   	pop    ebp
c001270e:	c3                   	ret    
c001270f:	90                   	nop

c0012710 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012710:	55                   	push   ebp
c0012711:	57                   	push   edi
c0012712:	56                   	push   esi
c0012713:	53                   	push   ebx
c0012714:	83 ec 1c             	sub    esp,0x1c
c0012717:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001271b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001271f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012723:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012727:	a9 ff 0f 00 00       	test   eax,0xfff
c001272c:	75 4a                	jne    c0012778 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001272e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012732:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012735:	c1 eb 16             	shr    ebx,0x16
c0012738:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001273f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012743:	74 4d                	je     c0012792 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012745:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012749:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001274d:	c1 e8 0a             	shr    eax,0xa
c0012750:	80 fa 01             	cmp    dl,0x1
c0012753:	19 d2                	sbb    edx,edx
c0012755:	c1 e3 0c             	shl    ebx,0xc
c0012758:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001275c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012762:	25 fc 0f 00 00       	and    eax,0xffc
c0012767:	01 d8                	add    eax,ebx
c0012769:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012770:	83 c4 1c             	add    esp,0x1c
c0012773:	5b                   	pop    ebx
c0012774:	5e                   	pop    esi
c0012775:	5f                   	pop    edi
c0012776:	5d                   	pop    ebp
c0012777:	c3                   	ret    
c0012778:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001277c:	83 ec 0c             	sub    esp,0xc
c001277f:	68 94 a6 02 c0       	push   0xc002a694
c0012784:	e8 e2 7d 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0012789:	83 c4 10             	add    esp,0x10
c001278c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012790:	eb 9c                	jmp    c001272e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012792:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012796:	e8 45 d7 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001279b:	89 c5                	mov    ebp,eax
c001279d:	e8 91 f7 ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c00127a2:	83 ec 0c             	sub    esp,0xc
c00127a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127a9:	6a 01                	push   0x1
c00127ab:	e8 cb f3 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c00127b0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127b7:	6a 01                	push   0x1
c00127b9:	50                   	push   eax
c00127ba:	55                   	push   ebp
c00127bb:	81 cd 07 04 00 00    	or     ebp,0x407
c00127c1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127c5:	51                   	push   ecx
c00127c6:	e8 7f fe ff ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127cb:	83 c4 1c             	add    esp,0x1c
c00127ce:	68 00 10 00 00       	push   0x1000
c00127d3:	6a 00                	push   0x0
c00127d5:	50                   	push   eax
c00127d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127da:	e8 99 df fe ff       	call   c0000778 <memset>
c00127df:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127e6:	e8 04 f8 ff ff       	call   c0011fef <Virt::freeKernelVirtualPages(unsigned long)>
c00127eb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127ee:	83 c4 10             	add    esp,0x10
c00127f1:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127f8:	e9 48 ff ff ff       	jmp    c0012745 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00127fd:	90                   	nop

c00127fe <VAS::VAS(bool)>:
c00127fe:	53                   	push   ebx
c00127ff:	83 ec 28             	sub    esp,0x28
c0012802:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012806:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001280a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001280e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012815:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012819:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0012820:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012824:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012828:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001282b:	e8 b0 d6 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012830:	89 c2                	mov    edx,eax
c0012832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012836:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012839:	e8 f5 f6 ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c001283e:	89 c3                	mov    ebx,eax
c0012840:	83 ec 0c             	sub    esp,0xc
c0012843:	6a 01                	push   0x1
c0012845:	e8 31 f3 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c001284a:	83 c4 10             	add    esp,0x10
c001284d:	89 c2                	mov    edx,eax
c001284f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012853:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012856:	83 ec 0c             	sub    esp,0xc
c0012859:	6a 03                	push   0x3
c001285b:	6a 01                	push   0x1
c001285d:	52                   	push   edx
c001285e:	50                   	push   eax
c001285f:	53                   	push   ebx
c0012860:	e8 e5 fd ff ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012865:	83 c4 20             	add    esp,0x20
c0012868:	89 c2                	mov    edx,eax
c001286a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012871:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012879:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012881:	7f 1c                	jg     c001289f <VAS::VAS(bool)+0xa1>
c0012883:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012887:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001288a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001288e:	c1 e2 02             	shl    edx,0x2
c0012891:	01 d0                	add    eax,edx
c0012893:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012899:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001289d:	eb da                	jmp    c0012879 <VAS::VAS(bool)+0x7b>
c001289f:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128a7:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128af:	7f 7a                	jg     c001292b <VAS::VAS(bool)+0x12d>
c00128b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b5:	2d 00 02 00 00       	sub    eax,0x200
c00128ba:	c1 e0 0c             	shl    eax,0xc
c00128bd:	83 c8 03             	or     eax,0x3
c00128c0:	89 c2                	mov    edx,eax
c00128c2:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00128c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128cd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128d3:	83 e0 10             	and    eax,0x10
c00128d6:	84 c0                	test   al,al
c00128d8:	74 07                	je     c00128e1 <VAS::VAS(bool)+0xe3>
c00128da:	b8 00 01 00 00       	mov    eax,0x100
c00128df:	eb 05                	jmp    c00128e6 <VAS::VAS(bool)+0xe8>
c00128e1:	b8 00 00 00 00       	mov    eax,0x0
c00128e6:	09 d0                	or     eax,edx
c00128e8:	89 c1                	mov    ecx,eax
c00128ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f5:	c1 e2 02             	shl    edx,0x2
c00128f8:	01 d0                	add    eax,edx
c00128fa:	89 ca                	mov    edx,ecx
c00128fc:	89 10                	mov    DWORD PTR [eax],edx
c00128fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012902:	2d 40 03 00 00       	sub    eax,0x340
c0012907:	83 f8 7f             	cmp    eax,0x7f
c001290a:	77 16                	ja     c0012922 <VAS::VAS(bool)+0x124>
c001290c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012910:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012913:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012917:	c1 e2 02             	shl    edx,0x2
c001291a:	01 d0                	add    eax,edx
c001291c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012922:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012926:	e9 7c ff ff ff       	jmp    c00128a7 <VAS::VAS(bool)+0xa9>
c001292b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012930:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012936:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001293c:	83 e0 10             	and    eax,0x10
c001293f:	84 c0                	test   al,al
c0012941:	74 07                	je     c001294a <VAS::VAS(bool)+0x14c>
c0012943:	b8 03 41 00 00       	mov    eax,0x4103
c0012948:	eb 05                	jmp    c001294f <VAS::VAS(bool)+0x151>
c001294a:	b8 03 40 00 00       	mov    eax,0x4003
c001294f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012953:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012956:	81 c2 20 0c 00 00    	add    edx,0xc20
c001295c:	89 02                	mov    DWORD PTR [edx],eax
c001295e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012963:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012969:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001296f:	83 ec 08             	sub    esp,0x8
c0012972:	50                   	push   eax
c0012973:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012977:	e8 b2 fc ff ff       	call   c001262e <VAS::setCPUSpecific(unsigned long)>
c001297c:	83 c4 10             	add    esp,0x10
c001297f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012983:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012986:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001298b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012991:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012997:	83 e0 10             	and    eax,0x10
c001299a:	84 c0                	test   al,al
c001299c:	74 07                	je     c00129a5 <VAS::VAS(bool)+0x1a7>
c001299e:	b8 00 01 00 00       	mov    eax,0x100
c00129a3:	eb 05                	jmp    c00129aa <VAS::VAS(bool)+0x1ac>
c00129a5:	b8 00 00 00 00       	mov    eax,0x0
c00129aa:	09 c2                	or     edx,eax
c00129ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129b3:	05 fc 0f 00 00       	add    eax,0xffc
c00129b8:	83 ca 03             	or     edx,0x3
c00129bb:	89 10                	mov    DWORD PTR [eax],edx
c00129bd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00129c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c8:	83 ec 0c             	sub    esp,0xc
c00129cb:	50                   	push   eax
c00129cc:	e8 07 1c 00 00       	call   c00145d8 <Device::getName()>
c00129d1:	83 c4 10             	add    esp,0x10
c00129d4:	83 ec 08             	sub    esp,0x8
c00129d7:	68 c3 a7 02 c0       	push   0xc002a7c3
c00129dc:	50                   	push   eax
c00129dd:	e8 de de fe ff       	call   c00008c0 <strcmp>
c00129e2:	83 c4 10             	add    esp,0x10
c00129e5:	85 c0                	test   eax,eax
c00129e7:	0f 94 c0             	sete   al
c00129ea:	84 c0                	test   al,al
c00129ec:	74 70                	je     c0012a5e <VAS::VAS(bool)+0x260>
c00129ee:	e8 55 b3 00 00       	call   c001dd48 <disableIRQs()>
c00129f3:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00129f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129fe:	05 7c 09 00 00       	add    eax,0x97c
c0012a03:	83 ec 0c             	sub    esp,0xc
c0012a06:	50                   	push   eax
c0012a07:	e8 b0 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a0c:	83 c4 10             	add    esp,0x10
c0012a0f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a14:	89 c3                	mov    ebx,eax
c0012a16:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0012a1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a21:	05 7c 09 00 00       	add    eax,0x97c
c0012a26:	83 ec 0c             	sub    esp,0xc
c0012a29:	50                   	push   eax
c0012a2a:	e8 8d c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a2f:	83 c4 10             	add    esp,0x10
c0012a32:	83 ec 08             	sub    esp,0x8
c0012a35:	50                   	push   eax
c0012a36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a3a:	e8 91 f5 ff ff       	call   c0011fd0 <VAS::getPageTableEntry(unsigned long)>
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a49:	6a 11                	push   0x11
c0012a4b:	53                   	push   ebx
c0012a4c:	50                   	push   eax
c0012a4d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a51:	e8 00 f9 ff ff       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a56:	83 c4 10             	add    esp,0x10
c0012a59:	e8 f8 b2 00 00       	call   c001dd56 <enableIRQs()>
c0012a5e:	90                   	nop
c0012a5f:	83 c4 28             	add    esp,0x28
c0012a62:	5b                   	pop    ebx
c0012a63:	c3                   	ret    

c0012a64 <VAS::evict(unsigned long)>:
c0012a64:	55                   	push   ebp
c0012a65:	57                   	push   edi
c0012a66:	56                   	push   esi
c0012a67:	53                   	push   ebx
c0012a68:	83 ec 0c             	sub    esp,0xc
c0012a6b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a6f:	e8 48 f2 ff ff       	call   c0011cbc <Virt::allocateSwapfilePage()>
c0012a74:	89 c7                	mov    edi,eax
c0012a76:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0012a7b:	85 c0                	test   eax,eax
c0012a7d:	7e 3d                	jle    c0012abc <VAS::evict(unsigned long)+0x58>
c0012a7f:	89 ee                	mov    esi,ebp
c0012a81:	31 db                	xor    ebx,ebx
c0012a83:	83 ec 0c             	sub    esp,0xc
c0012a86:	57                   	push   edi
c0012a87:	e8 1e f2 ff ff       	call   c0011caa <Virt::swapIDToSector(unsigned long)>
c0012a8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a8f:	01 d8                	add    eax,ebx
c0012a91:	6a 01                	push   0x1
c0012a93:	31 d2                	xor    edx,edx
c0012a95:	43                   	inc    ebx
c0012a96:	52                   	push   edx
c0012a97:	81 c6 00 02 00 00    	add    esi,0x200
c0012a9d:	50                   	push   eax
c0012a9e:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012aa5:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0012aac:	e8 91 3c 00 00       	call   c0016742 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ab1:	83 c4 20             	add    esp,0x20
c0012ab4:	39 1d 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,ebx
c0012aba:	7f c7                	jg     c0012a83 <VAS::evict(unsigned long)+0x1f>
c0012abc:	83 ec 08             	sub    esp,0x8
c0012abf:	c1 e7 0b             	shl    edi,0xb
c0012ac2:	55                   	push   ebp
c0012ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ac7:	e8 04 f5 ff ff       	call   c0011fd0 <VAS::getPageTableEntry(unsigned long)>
c0012acc:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ace:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ad4:	09 d7                	or     edi,edx
c0012ad6:	89 38                	mov    DWORD PTR [eax],edi
c0012ad8:	ff 05 20 e5 02 c0    	inc    DWORD PTR ds:0xc002e520
c0012ade:	0f 20 d8             	mov    eax,cr3
c0012ae1:	0f 22 d8             	mov    cr3,eax
c0012ae4:	83 c4 1c             	add    esp,0x1c
c0012ae7:	5b                   	pop    ebx
c0012ae8:	5e                   	pop    esi
c0012ae9:	5f                   	pop    edi
c0012aea:	5d                   	pop    ebp
c0012aeb:	c3                   	ret    

c0012aec <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012aec:	57                   	push   edi
c0012aed:	56                   	push   esi
c0012aee:	53                   	push   ebx
c0012aef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012af3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012af9:	74 1c                	je     c0012b17 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012afb:	53                   	push   ebx
c0012afc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b00:	e8 cb f4 ff ff       	call   c0011fd0 <VAS::getPageTableEntry(unsigned long)>
c0012b05:	5a                   	pop    edx
c0012b06:	89 c6                	mov    esi,eax
c0012b08:	59                   	pop    ecx
c0012b09:	85 c0                	test   eax,eax
c0012b0b:	74 0a                	je     c0012b17 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c0012b0d:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b0f:	f7 c7 01 00 00 00    	test   edi,0x1
c0012b15:	74 06                	je     c0012b1d <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0012b17:	31 c0                	xor    eax,eax
c0012b19:	5b                   	pop    ebx
c0012b1a:	5e                   	pop    esi
c0012b1b:	5f                   	pop    edi
c0012b1c:	c3                   	ret    
c0012b1d:	e8 be d3 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012b22:	c1 ef 0b             	shr    edi,0xb
c0012b25:	8b 16                	mov    edx,DWORD PTR [esi]
c0012b27:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b2d:	09 c2                	or     edx,eax
c0012b2f:	81 ca 01 08 00 00    	or     edx,0x801
c0012b35:	89 16                	mov    DWORD PTR [esi],edx
c0012b37:	0f 20 d8             	mov    eax,cr3
c0012b3a:	0f 22 d8             	mov    cr3,eax
c0012b3d:	a1 2c d3 02 c0       	mov    eax,ds:0xc002d32c
c0012b42:	85 c0                	test   eax,eax
c0012b44:	7e 3b                	jle    c0012b81 <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012b46:	31 f6                	xor    esi,esi
c0012b48:	83 ec 0c             	sub    esp,0xc
c0012b4b:	57                   	push   edi
c0012b4c:	e8 59 f1 ff ff       	call   c0011caa <Virt::swapIDToSector(unsigned long)>
c0012b51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b54:	01 f0                	add    eax,esi
c0012b56:	6a 01                	push   0x1
c0012b58:	31 d2                	xor    edx,edx
c0012b5a:	46                   	inc    esi
c0012b5b:	52                   	push   edx
c0012b5c:	81 c3 00 02 00 00    	add    ebx,0x200
c0012b62:	50                   	push   eax
c0012b63:	0f be 05 38 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d338
c0012b6a:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0012b71:	e8 60 3b 00 00       	call   c00166d6 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b76:	83 c4 20             	add    esp,0x20
c0012b79:	39 35 2c d3 02 c0    	cmp    DWORD PTR ds:0xc002d32c,esi
c0012b7f:	7f c7                	jg     c0012b48 <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c0012b81:	83 ec 0c             	sub    esp,0xc
c0012b84:	ff 0d 20 e5 02 c0    	dec    DWORD PTR ds:0xc002e520
c0012b8a:	57                   	push   edi
c0012b8b:	e8 fc f0 ff ff       	call   c0011c8c <Virt::freeSwapfilePage(unsigned long)>
c0012b90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b94:	83 c4 10             	add    esp,0x10
c0012b97:	25 ff 0f 00 00       	and    eax,0xfff
c0012b9c:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012ba1:	77 07                	ja     c0012baa <VAS::tryLoadBackOffDisk(unsigned long)+0xbe>
c0012ba3:	b0 01                	mov    al,0x1
c0012ba5:	e9 6f ff ff ff       	jmp    c0012b19 <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	68 d1 a7 02 c0       	push   0xc002a7d1
c0012bb2:	e8 0f 03 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0012bb7:	83 c4 10             	add    esp,0x10
c0012bba:	b0 01                	mov    al,0x1
c0012bbc:	e9 58 ff ff ff       	jmp    c0012b19 <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012bc1:	90                   	nop

c0012bc2 <VAS::scanForEviction()>:
c0012bc2:	55                   	push   ebp
c0012bc3:	57                   	push   edi
c0012bc4:	31 ff                	xor    edi,edi
c0012bc6:	56                   	push   esi
c0012bc7:	31 f6                	xor    esi,esi
c0012bc9:	53                   	push   ebx
c0012bca:	83 ec 1c             	sub    esp,0x1c
c0012bcd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012bd1:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012bd4:	89 d8                	mov    eax,ebx
c0012bd6:	39 c3                	cmp    ebx,eax
c0012bd8:	74 72                	je     c0012c4c <VAS::scanForEviction()+0x8a>
c0012bda:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012bdf:	75 0e                	jne    c0012bef <VAS::scanForEviction()+0x2d>
c0012be1:	89 c1                	mov    ecx,eax
c0012be3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012be6:	c1 e9 16             	shr    ecx,0x16
c0012be9:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012bed:	74 51                	je     c0012c40 <VAS::scanForEviction()+0x7e>
c0012bef:	50                   	push   eax
c0012bf0:	55                   	push   ebp
c0012bf1:	e8 da f3 ff ff       	call   c0011fd0 <VAS::getPageTableEntry(unsigned long)>
c0012bf6:	5a                   	pop    edx
c0012bf7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bf9:	59                   	pop    ecx
c0012bfa:	89 d1                	mov    ecx,edx
c0012bfc:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012c02:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012c08:	74 54                	je     c0012c5e <VAS::scanForEviction()+0x9c>
c0012c0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012c0d:	05 00 10 00 00       	add    eax,0x1000
c0012c12:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012c17:	76 3d                	jbe    c0012c56 <VAS::scanForEviction()+0x94>
c0012c19:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012c20:	85 db                	test   ebx,ebx
c0012c22:	74 79                	je     c0012c9d <VAS::scanForEviction()+0xdb>
c0012c24:	31 c0                	xor    eax,eax
c0012c26:	be 01 00 00 00       	mov    esi,0x1
c0012c2b:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012c30:	75 bd                	jne    c0012bef <VAS::scanForEviction()+0x2d>
c0012c32:	89 c1                	mov    ecx,eax
c0012c34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012c37:	c1 e9 16             	shr    ecx,0x16
c0012c3a:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012c3e:	75 af                	jne    c0012bef <VAS::scanForEviction()+0x2d>
c0012c40:	05 00 00 40 00       	add    eax,0x400000
c0012c45:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012c48:	39 c3                	cmp    ebx,eax
c0012c4a:	75 8e                	jne    c0012bda <VAS::scanForEviction()+0x18>
c0012c4c:	89 f1                	mov    ecx,esi
c0012c4e:	84 c9                	test   cl,cl
c0012c50:	74 88                	je     c0012bda <VAS::scanForEviction()+0x18>
c0012c52:	89 f7                	mov    edi,esi
c0012c54:	eb 84                	jmp    c0012bda <VAS::scanForEviction()+0x18>
c0012c56:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012c59:	e9 78 ff ff ff       	jmp    c0012bd6 <VAS::scanForEviction()+0x14>
c0012c5e:	f6 c2 01             	test   dl,0x1
c0012c61:	74 a7                	je     c0012c0a <VAS::scanForEviction()+0x48>
c0012c63:	f6 c2 40             	test   dl,0x40
c0012c66:	74 0b                	je     c0012c73 <VAS::scanForEviction()+0xb1>
c0012c68:	83 e2 bf             	and    edx,0xffffffbf
c0012c6b:	89 10                	mov    DWORD PTR [eax],edx
c0012c6d:	89 f8                	mov    eax,edi
c0012c6f:	84 c0                	test   al,al
c0012c71:	74 97                	je     c0012c0a <VAS::scanForEviction()+0x48>
c0012c73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c77:	83 ec 08             	sub    esp,0x8
c0012c7a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012c7d:	55                   	push   ebp
c0012c7e:	e8 e1 fd ff ff       	call   c0012a64 <VAS::evict(unsigned long)>
c0012c83:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012c8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012c8e:	83 c4 2c             	add    esp,0x2c
c0012c91:	89 d0                	mov    eax,edx
c0012c93:	5b                   	pop    ebx
c0012c94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c99:	5e                   	pop    esi
c0012c9a:	5f                   	pop    edi
c0012c9b:	5d                   	pop    ebp
c0012c9c:	c3                   	ret    
c0012c9d:	bf 01 00 00 00       	mov    edi,0x1
c0012ca2:	eb 80                	jmp    c0012c24 <VAS::scanForEviction()+0x62>

c0012ca4 <mapVASFirstTime>:
c0012ca4:	55                   	push   ebp
c0012ca5:	57                   	push   edi
c0012ca6:	56                   	push   esi
c0012ca7:	53                   	push   ebx
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cb0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cb3:	4a                   	dec    edx
c0012cb4:	0f 84 8e 00 00 00    	je     c0012d48 <mapVASFirstTime+0xa4>
c0012cba:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012cbd:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012cc0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012cc5:	c1 e5 15             	shl    ebp,0x15
c0012cc8:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012ccd:	8b ba 32 19 00 00    	mov    edi,DWORD PTR [edx+0x1932]
c0012cd3:	29 eb                	sub    ebx,ebp
c0012cd5:	29 ee                	sub    esi,ebp
c0012cd7:	e8 04 d2 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012cdc:	83 ec 0c             	sub    esp,0xc
c0012cdf:	68 03 04 00 00       	push   0x403
c0012ce4:	6a 01                	push   0x1
c0012ce6:	53                   	push   ebx
c0012ce7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012ced:	50                   	push   eax
c0012cee:	57                   	push   edi
c0012cef:	e8 56 f9 ff ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cf4:	83 c4 20             	add    esp,0x20
c0012cf7:	39 f3                	cmp    ebx,esi
c0012cf9:	75 dc                	jne    c0012cd7 <mapVASFirstTime+0x33>
c0012cfb:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d00:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d05:	29 ee                	sub    esi,ebp
c0012d07:	29 e8                	sub    eax,ebp
c0012d09:	89 c5                	mov    ebp,eax
c0012d0b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d0f:	19 db                	sbb    ebx,ebx
c0012d11:	e8 ca d1 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012d16:	83 e3 04             	and    ebx,0x4
c0012d19:	83 ec 0c             	sub    esp,0xc
c0012d1c:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d22:	53                   	push   ebx
c0012d23:	6a 01                	push   0x1
c0012d25:	56                   	push   esi
c0012d26:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d2c:	50                   	push   eax
c0012d2d:	57                   	push   edi
c0012d2e:	e8 17 f9 ff ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d33:	83 c4 20             	add    esp,0x20
c0012d36:	39 f5                	cmp    ebp,esi
c0012d38:	75 d1                	jne    c0012d0b <mapVASFirstTime+0x67>
c0012d3a:	0f 20 d8             	mov    eax,cr3
c0012d3d:	0f 22 d8             	mov    cr3,eax
c0012d40:	83 c4 0c             	add    esp,0xc
c0012d43:	5b                   	pop    ebx
c0012d44:	5e                   	pop    esi
c0012d45:	5f                   	pop    edi
c0012d46:	5d                   	pop    ebp
c0012d47:	c3                   	ret    
c0012d48:	83 ec 0c             	sub    esp,0xc
c0012d4b:	68 e5 a7 02 c0       	push   0xc002a7e5
c0012d50:	e8 71 01 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0012d55:	83 c4 10             	add    esp,0x10
c0012d58:	83 c4 0c             	add    esp,0xc
c0012d5b:	5b                   	pop    ebx
c0012d5c:	5e                   	pop    esi
c0012d5d:	5f                   	pop    edi
c0012d5e:	5d                   	pop    ebp
c0012d5f:	c3                   	ret    

c0012d60 <__cxa_atexit>:
c0012d60:	31 c0                	xor    eax,eax
c0012d62:	c3                   	ret    

c0012d63 <__cxa_finalize>:
c0012d63:	c3                   	ret    

c0012d64 <__stack_chk_fail>:
c0012d64:	55                   	push   ebp
c0012d65:	89 e5                	mov    ebp,esp
c0012d67:	83 ec 14             	sub    esp,0x14
c0012d6a:	68 fe a7 02 c0       	push   0xc002a7fe
c0012d6f:	e8 52 01 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0012d74:	58                   	pop    eax
c0012d75:	5a                   	pop    edx
c0012d76:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d79:	68 4e a8 02 c0       	push   0xc002a84e
c0012d7e:	e8 43 01 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0012d83:	59                   	pop    ecx
c0012d84:	58                   	pop    eax
c0012d85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d88:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d8b:	68 4e a8 02 c0       	push   0xc002a84e
c0012d90:	e8 31 01 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0012d95:	5a                   	pop    edx
c0012d96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d99:	59                   	pop    ecx
c0012d9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d9c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d9f:	68 4e a8 02 c0       	push   0xc002a84e
c0012da4:	e8 1d 01 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0012da9:	5a                   	pop    edx
c0012daa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dad:	59                   	pop    ecx
c0012dae:	8b 00                	mov    eax,DWORD PTR [eax]
c0012db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012db2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012db5:	68 4e a8 02 c0       	push   0xc002a84e
c0012dba:	e8 07 01 00 00       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0012dbf:	c7 04 24 56 a8 02 c0 	mov    DWORD PTR [esp],0xc002a856
c0012dc6:	e8 a0 77 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0012dcb:	83 c4 10             	add    esp,0x10
c0012dce:	c9                   	leave  
c0012dcf:	c3                   	ret    

c0012dd0 <__cxa_pure_virtual>:
c0012dd0:	83 ec 18             	sub    esp,0x18
c0012dd3:	68 6e a8 02 c0       	push   0xc002a86e
c0012dd8:	e8 8e 77 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0012ddd:	83 c4 1c             	add    esp,0x1c
c0012de0:	c3                   	ret    

c0012de1 <operator new[](unsigned long)>:
c0012de1:	e9 5d ca ff ff       	jmp    c000f843 <malloc>

c0012de6 <operator delete(void*, unsigned long)>:
c0012de6:	e9 78 ca ff ff       	jmp    c000f863 <rfree>

c0012deb <operator delete[](void*)>:
c0012deb:	e9 73 ca ff ff       	jmp    c000f863 <rfree>

c0012df0 <operator delete[](void*, unsigned long)>:
c0012df0:	e9 6e ca ff ff       	jmp    c000f863 <rfree>

c0012df5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012df5:	57                   	push   edi
c0012df6:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012dfb:	56                   	push   esi
c0012dfc:	be 84 a8 02 c0       	mov    esi,0xc002a884
c0012e01:	53                   	push   ebx
c0012e02:	83 ec 40             	sub    esp,0x40
c0012e05:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e09:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e0d:	fc                   	cld    
c0012e0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e10:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e14:	83 f9 3e             	cmp    ecx,0x3e
c0012e17:	7e 05                	jle    c0012e1e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e19:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e1e:	89 df                	mov    edi,ebx
c0012e20:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e24:	eb 02                	jmp    c0012e28 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e26:	89 c7                	mov    edi,eax
c0012e28:	31 d2                	xor    edx,edx
c0012e2a:	46                   	inc    esi
c0012e2b:	89 f8                	mov    eax,edi
c0012e2d:	f7 f1                	div    ecx
c0012e2f:	39 cf                	cmp    edi,ecx
c0012e31:	73 f3                	jae    c0012e26 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e33:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e36:	eb 02                	jmp    c0012e3a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e38:	89 c3                	mov    ebx,eax
c0012e3a:	31 d2                	xor    edx,edx
c0012e3c:	4e                   	dec    esi
c0012e3d:	89 d8                	mov    eax,ebx
c0012e3f:	f7 f1                	div    ecx
c0012e41:	39 cb                	cmp    ebx,ecx
c0012e43:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e47:	88 16                	mov    BYTE PTR [esi],dl
c0012e49:	73 ed                	jae    c0012e38 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e4f:	83 c4 40             	add    esp,0x40
c0012e52:	5b                   	pop    ebx
c0012e53:	5e                   	pop    esi
c0012e54:	5f                   	pop    edi
c0012e55:	c3                   	ret    

c0012e56 <Dbg::logc(char)>:
c0012e56:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e5a:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e5f:	ec                   	in     al,dx
c0012e60:	a8 20                	test   al,0x20
c0012e62:	74 fb                	je     c0012e5f <Dbg::logc(char)+0x9>
c0012e64:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e69:	88 c8                	mov    al,cl
c0012e6b:	ee                   	out    dx,al
c0012e6c:	c3                   	ret    

c0012e6d <Dbg::logs(char*)>:
c0012e6d:	53                   	push   ebx
c0012e6e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e72:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e75:	84 c0                	test   al,al
c0012e77:	74 0f                	je     c0012e88 <Dbg::logs(char*)+0x1b>
c0012e79:	50                   	push   eax
c0012e7a:	43                   	inc    ebx
c0012e7b:	e8 d6 ff ff ff       	call   c0012e56 <Dbg::logc(char)>
c0012e80:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e83:	5a                   	pop    edx
c0012e84:	84 c0                	test   al,al
c0012e86:	75 f1                	jne    c0012e79 <Dbg::logs(char*)+0xc>
c0012e88:	5b                   	pop    ebx
c0012e89:	c3                   	ret    

c0012e8a <Dbg::logWriteInt(unsigned int)>:
c0012e8a:	83 ec 10             	sub    esp,0x10
c0012e8d:	6a 0a                	push   0xa
c0012e8f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e93:	50                   	push   eax
c0012e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e98:	e8 58 ff ff ff       	call   c0012df5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e9d:	50                   	push   eax
c0012e9e:	e8 ca ff ff ff       	call   c0012e6d <Dbg::logs(char*)>
c0012ea3:	83 c4 20             	add    esp,0x20
c0012ea6:	c3                   	ret    

c0012ea7 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012ea7:	83 ec 10             	sub    esp,0x10
c0012eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012eb2:	50                   	push   eax
c0012eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eb7:	e8 39 ff ff ff       	call   c0012df5 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ebc:	50                   	push   eax
c0012ebd:	e8 ab ff ff ff       	call   c0012e6d <Dbg::logs(char*)>
c0012ec2:	83 c4 20             	add    esp,0x20
c0012ec5:	c3                   	ret    

c0012ec6 <Dbg::kprintf(char const*, ...)>:
c0012ec6:	55                   	push   ebp
c0012ec7:	57                   	push   edi
c0012ec8:	56                   	push   esi
c0012ec9:	53                   	push   ebx
c0012eca:	83 ec 0c             	sub    esp,0xc
c0012ecd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ed1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ed5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ed9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012edc:	84 c0                	test   al,al
c0012ede:	74 4a                	je     c0012f2a <Dbg::kprintf(char const*, ...)+0x64>
c0012ee0:	31 db                	xor    ebx,ebx
c0012ee2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ee5:	3c 25                	cmp    al,0x25
c0012ee7:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012eea:	0f 85 e4 00 00 00    	jne    c0012fd4 <Dbg::kprintf(char const*, ...)+0x10e>
c0012ef0:	83 c3 02             	add    ebx,0x2
c0012ef3:	8a 07                	mov    al,BYTE PTR [edi]
c0012ef5:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012ef8:	83 e8 25             	sub    eax,0x25
c0012efb:	3c 53                	cmp    al,0x53
c0012efd:	0f 87 ba 00 00 00    	ja     c0012fbd <Dbg::kprintf(char const*, ...)+0xf7>
c0012f03:	0f b6 c0             	movzx  eax,al
c0012f06:	ff 24 85 c4 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd573c]
c0012f0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f11:	89 c8                	mov    eax,ecx
c0012f13:	83 c1 04             	add    ecx,0x4
c0012f16:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f1a:	ff 30                	push   DWORD PTR [eax]
c0012f1c:	e8 4c ff ff ff       	call   c0012e6d <Dbg::logs(char*)>
c0012f21:	58                   	pop    eax
c0012f22:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f26:	84 c0                	test   al,al
c0012f28:	75 b8                	jne    c0012ee2 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f2a:	83 c4 0c             	add    esp,0xc
c0012f2d:	5b                   	pop    ebx
c0012f2e:	5e                   	pop    esi
c0012f2f:	5f                   	pop    edi
c0012f30:	5d                   	pop    ebp
c0012f31:	c3                   	ret    
c0012f32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f36:	89 d0                	mov    eax,edx
c0012f38:	83 c2 04             	add    edx,0x4
c0012f3b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f3f:	ff 30                	push   DWORD PTR [eax]
c0012f41:	e8 44 ff ff ff       	call   c0012e8a <Dbg::logWriteInt(unsigned int)>
c0012f46:	58                   	pop    eax
c0012f47:	eb d9                	jmp    c0012f22 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f4d:	89 d0                	mov    eax,edx
c0012f4f:	83 c2 04             	add    edx,0x4
c0012f52:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f59:	50                   	push   eax
c0012f5a:	e8 f7 fe ff ff       	call   c0012e56 <Dbg::logc(char)>
c0012f5f:	58                   	pop    eax
c0012f60:	eb c0                	jmp    c0012f22 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f62:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f66:	89 c8                	mov    eax,ecx
c0012f68:	83 c1 04             	add    ecx,0x4
c0012f6b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f6f:	ff 30                	push   DWORD PTR [eax]
c0012f71:	e8 14 ff ff ff       	call   c0012e8a <Dbg::logWriteInt(unsigned int)>
c0012f76:	5f                   	pop    edi
c0012f77:	eb a9                	jmp    c0012f22 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f79:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f7d:	89 c8                	mov    eax,ecx
c0012f7f:	83 c1 04             	add    ecx,0x4
c0012f82:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f86:	6a 10                	push   0x10
c0012f88:	ff 30                	push   DWORD PTR [eax]
c0012f8a:	e8 18 ff ff ff       	call   c0012ea7 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f8f:	59                   	pop    ecx
c0012f90:	5f                   	pop    edi
c0012f91:	eb 8f                	jmp    c0012f22 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f93:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f97:	89 d0                	mov    eax,edx
c0012f99:	83 c2 08             	add    edx,0x8
c0012f9c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fa0:	6a 10                	push   0x10
c0012fa2:	ff 30                	push   DWORD PTR [eax]
c0012fa4:	e8 fe fe ff ff       	call   c0012ea7 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fa9:	58                   	pop    eax
c0012faa:	5a                   	pop    edx
c0012fab:	e9 72 ff ff ff       	jmp    c0012f22 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fb0:	6a 25                	push   0x25
c0012fb2:	e8 9f fe ff ff       	call   c0012e56 <Dbg::logc(char)>
c0012fb7:	58                   	pop    eax
c0012fb8:	e9 65 ff ff ff       	jmp    c0012f22 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fbd:	6a 25                	push   0x25
c0012fbf:	e8 92 fe ff ff       	call   c0012e56 <Dbg::logc(char)>
c0012fc4:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fc7:	50                   	push   eax
c0012fc8:	e8 89 fe ff ff       	call   c0012e56 <Dbg::logc(char)>
c0012fcd:	5a                   	pop    edx
c0012fce:	59                   	pop    ecx
c0012fcf:	e9 4e ff ff ff       	jmp    c0012f22 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fd4:	50                   	push   eax
c0012fd5:	89 eb                	mov    ebx,ebp
c0012fd7:	e8 7a fe ff ff       	call   c0012e56 <Dbg::logc(char)>
c0012fdc:	89 fd                	mov    ebp,edi
c0012fde:	58                   	pop    eax
c0012fdf:	e9 3e ff ff ff       	jmp    c0012f22 <Dbg::kprintf(char const*, ...)+0x5c>

c0012fe4 <File::read(unsigned long long, void*, int*)>:
c0012fe4:	53                   	push   ebx
c0012fe5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fe9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fed:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ff4:	3c 19                	cmp    al,0x19
c0012ff6:	77 35                	ja     c001302d <File::read(unsigned long long, void*, int*)+0x49>
c0012ff8:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0012fff:	85 c0                	test   eax,eax
c0013001:	74 2a                	je     c001302d <File::read(unsigned long long, void*, int*)+0x49>
c0013003:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013009:	85 c0                	test   eax,eax
c001300b:	74 20                	je     c001302d <File::read(unsigned long long, void*, int*)+0x49>
c001300d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013011:	74 21                	je     c0013034 <File::read(unsigned long long, void*, int*)+0x50>
c0013013:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013015:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013019:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001301f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013023:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013027:	5b                   	pop    ebx
c0013028:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001302b:	ff e0                	jmp    eax
c001302d:	b8 0b 00 00 00       	mov    eax,0xb
c0013032:	eb 05                	jmp    c0013039 <File::read(unsigned long long, void*, int*)+0x55>
c0013034:	b8 05 00 00 00       	mov    eax,0x5
c0013039:	5b                   	pop    ebx
c001303a:	c3                   	ret    
c001303b:	90                   	nop

c001303c <File::write(unsigned long long, void*, int*)>:
c001303c:	53                   	push   ebx
c001303d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013041:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013045:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001304c:	3c 19                	cmp    al,0x19
c001304e:	77 35                	ja     c0013085 <File::write(unsigned long long, void*, int*)+0x49>
c0013050:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0013057:	85 c0                	test   eax,eax
c0013059:	74 2a                	je     c0013085 <File::write(unsigned long long, void*, int*)+0x49>
c001305b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013061:	85 c0                	test   eax,eax
c0013063:	74 20                	je     c0013085 <File::write(unsigned long long, void*, int*)+0x49>
c0013065:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013069:	74 21                	je     c001308c <File::write(unsigned long long, void*, int*)+0x50>
c001306b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001306d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013071:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013077:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001307b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001307f:	5b                   	pop    ebx
c0013080:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013083:	ff e0                	jmp    eax
c0013085:	b8 0b 00 00 00       	mov    eax,0xb
c001308a:	eb 05                	jmp    c0013091 <File::write(unsigned long long, void*, int*)+0x55>
c001308c:	b8 05 00 00 00       	mov    eax,0x5
c0013091:	5b                   	pop    ebx
c0013092:	c3                   	ret    
c0013093:	90                   	nop

c0013094 <Directory::read(unsigned long long, void*, int*)>:
c0013094:	53                   	push   ebx
c0013095:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013099:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001309d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130a4:	3c 19                	cmp    al,0x19
c00130a6:	77 35                	ja     c00130dd <Directory::read(unsigned long long, void*, int*)+0x49>
c00130a8:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c00130af:	85 c0                	test   eax,eax
c00130b1:	74 2a                	je     c00130dd <Directory::read(unsigned long long, void*, int*)+0x49>
c00130b3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130b9:	85 c0                	test   eax,eax
c00130bb:	74 20                	je     c00130dd <Directory::read(unsigned long long, void*, int*)+0x49>
c00130bd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130c1:	74 21                	je     c00130e4 <Directory::read(unsigned long long, void*, int*)+0x50>
c00130c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130c9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130d7:	5b                   	pop    ebx
c00130d8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130db:	ff e0                	jmp    eax
c00130dd:	b8 0b 00 00 00       	mov    eax,0xb
c00130e2:	eb 05                	jmp    c00130e9 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130e4:	b8 05 00 00 00       	mov    eax,0x5
c00130e9:	5b                   	pop    ebx
c00130ea:	c3                   	ret    
c00130eb:	90                   	nop

c00130ec <Directory::write(unsigned long long, void*, int*)>:
c00130ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130f0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130f7:	b8 0b 00 00 00       	mov    eax,0xb
c00130fc:	80 fa 19             	cmp    dl,0x19
c00130ff:	77 18                	ja     c0013119 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013101:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013108:	85 d2                	test   edx,edx
c001310a:	74 0d                	je     c0013119 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001310c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013113:	19 c0                	sbb    eax,eax
c0013115:	83 e0 0a             	and    eax,0xa
c0013118:	40                   	inc    eax
c0013119:	c3                   	ret    

c001311a <File::isAtty()>:
c001311a:	31 c0                	xor    eax,eax
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <Directory::isAtty()>:
c001311e:	31 c0                	xor    eax,eax
c0013120:	c3                   	ret    
c0013121:	90                   	nop

c0013122 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013122:	b8 0a 00 00 00       	mov    eax,0xa
c0013127:	c3                   	ret    

c0013128 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013128:	b8 0a 00 00 00       	mov    eax,0xa
c001312d:	c3                   	ret    

c001312e <File::~File()>:
c001312e:	83 ec 0c             	sub    esp,0xc
c0013131:	ba 80 aa 02 c0       	mov    edx,0xc002aa80
c0013136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001313a:	89 10                	mov    DWORD PTR [eax],edx
c001313c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013140:	83 ec 0c             	sub    esp,0xc
c0013143:	50                   	push   eax
c0013144:	e8 d1 e7 ff ff       	call   c001191a <UnixFile::~UnixFile()>
c0013149:	83 c4 10             	add    esp,0x10
c001314c:	90                   	nop
c001314d:	83 c4 0c             	add    esp,0xc
c0013150:	c3                   	ret    
c0013151:	90                   	nop

c0013152 <File::~File()>:
c0013152:	83 ec 0c             	sub    esp,0xc
c0013155:	83 ec 0c             	sub    esp,0xc
c0013158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001315c:	e8 cd ff ff ff       	call   c001312e <File::~File()>
c0013161:	83 c4 10             	add    esp,0x10
c0013164:	83 ec 08             	sub    esp,0x8
c0013167:	68 14 01 00 00       	push   0x114
c001316c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013170:	e8 71 fc ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	83 c4 0c             	add    esp,0xc
c001317b:	c3                   	ret    

c001317c <Directory::~Directory()>:
c001317c:	83 ec 0c             	sub    esp,0xc
c001317f:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c0013184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013188:	89 10                	mov    DWORD PTR [eax],edx
c001318a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001318e:	83 ec 0c             	sub    esp,0xc
c0013191:	50                   	push   eax
c0013192:	e8 83 e7 ff ff       	call   c001191a <UnixFile::~UnixFile()>
c0013197:	83 c4 10             	add    esp,0x10
c001319a:	90                   	nop
c001319b:	83 c4 0c             	add    esp,0xc
c001319e:	c3                   	ret    
c001319f:	90                   	nop

c00131a0 <Directory::~Directory()>:
c00131a0:	83 ec 0c             	sub    esp,0xc
c00131a3:	83 ec 0c             	sub    esp,0xc
c00131a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131aa:	e8 cd ff ff ff       	call   c001317c <Directory::~Directory()>
c00131af:	83 c4 10             	add    esp,0x10
c00131b2:	83 ec 08             	sub    esp,0x8
c00131b5:	68 14 01 00 00       	push   0x114
c00131ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131be:	e8 23 fc ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00131c3:	83 c4 10             	add    esp,0x10
c00131c6:	83 c4 0c             	add    esp,0xc
c00131c9:	c3                   	ret    

c00131ca <Filesystem::Filesystem()>:
c00131ca:	ba 1c aa 02 c0       	mov    edx,0xc002aa1c
c00131cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131d3:	89 10                	mov    DWORD PTR [eax],edx
c00131d5:	8b 15 48 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e748
c00131db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131e6:	a3 48 e7 02 c0       	mov    ds:0xc002e748,eax
c00131eb:	90                   	nop
c00131ec:	c3                   	ret    
c00131ed:	90                   	nop

c00131ee <Filesystem::~Filesystem()>:
c00131ee:	ba 1c aa 02 c0       	mov    edx,0xc002aa1c
c00131f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f7:	89 10                	mov    DWORD PTR [eax],edx
c00131f9:	90                   	nop
c00131fa:	c3                   	ret    
c00131fb:	90                   	nop

c00131fc <Filesystem::~Filesystem()>:
c00131fc:	83 ec 0c             	sub    esp,0xc
c00131ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013203:	e8 e6 ff ff ff       	call   c00131ee <Filesystem::~Filesystem()>
c0013208:	83 c4 04             	add    esp,0x4
c001320b:	83 ec 08             	sub    esp,0x8
c001320e:	6a 08                	push   0x8
c0013210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013214:	e8 cd fb ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0013219:	83 c4 10             	add    esp,0x10
c001321c:	83 c4 0c             	add    esp,0xc
c001321f:	c3                   	ret    

c0013220 <Fs::getcwd(Process*, char*, int)>:
c0013220:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013224:	31 c0                	xor    eax,eax
c0013226:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013229:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001322d:	7d 15                	jge    c0013244 <Fs::getcwd(Process*, char*, int)+0x24>
c001322f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013233:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001323a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001323d:	84 c9                	test   cl,cl
c001323f:	74 06                	je     c0013247 <Fs::getcwd(Process*, char*, int)+0x27>
c0013241:	40                   	inc    eax
c0013242:	eb e2                	jmp    c0013226 <Fs::getcwd(Process*, char*, int)+0x6>
c0013244:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013247:	31 c0                	xor    eax,eax
c0013249:	c3                   	ret    

c001324a <Fs::initVFS()>:
c001324a:	83 ec 18             	sub    esp,0x18
c001324d:	6a 08                	push   0x8
c001324f:	e8 ef c5 ff ff       	call   c000f843 <malloc>
c0013254:	89 04 24             	mov    DWORD PTR [esp],eax
c0013257:	e8 aa dc 00 00       	call   c0020f06 <FAT::FAT()>
c001325c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013263:	e8 db c5 ff ff       	call   c000f843 <malloc>
c0013268:	89 04 24             	mov    DWORD PTR [esp],eax
c001326b:	e8 ee ee 00 00       	call   c002215e <ISO9660::ISO9660()>
c0013270:	83 c4 1c             	add    esp,0x1c
c0013273:	c3                   	ret    

c0013274 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013274:	55                   	push   ebp
c0013275:	57                   	push   edi
c0013276:	56                   	push   esi
c0013277:	53                   	push   ebx
c0013278:	81 ec 10 04 00 00    	sub    esp,0x410
c001327e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013285:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001328c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013293:	68 00 04 00 00       	push   0x400
c0013298:	6a 00                	push   0x0
c001329a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001329e:	56                   	push   esi
c001329f:	e8 d4 d4 fe ff       	call   c0000778 <memset>
c00132a4:	83 c4 10             	add    esp,0x10
c00132a7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132ab:	75 0b                	jne    c00132b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132ad:	50                   	push   eax
c00132ae:	50                   	push   eax
c00132af:	57                   	push   edi
c00132b0:	56                   	push   esi
c00132b1:	e8 7e d5 fe ff       	call   c0000834 <strcpy>
c00132b6:	eb 41                	jmp    c00132f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132b8:	8a 07                	mov    al,BYTE PTR [edi]
c00132ba:	3c 5c                	cmp    al,0x5c
c00132bc:	74 04                	je     c00132c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132be:	3c 2f                	cmp    al,0x2f
c00132c0:	75 18                	jne    c00132da <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132c2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132c5:	3c 60                	cmp    al,0x60
c00132c7:	7e 03                	jle    c00132cc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132c9:	83 e8 20             	sub    eax,0x20
c00132cc:	88 04 24             	mov    BYTE PTR [esp],al
c00132cf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132d6:	50                   	push   eax
c00132d7:	50                   	push   eax
c00132d8:	eb 18                	jmp    c00132f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132da:	50                   	push   eax
c00132db:	50                   	push   eax
c00132dc:	55                   	push   ebp
c00132dd:	56                   	push   esi
c00132de:	e8 51 d5 fe ff       	call   c0000834 <strcpy>
c00132e3:	5a                   	pop    edx
c00132e4:	59                   	pop    ecx
c00132e5:	68 5c c1 02 c0       	push   0xc002c15c
c00132ea:	56                   	push   esi
c00132eb:	e8 84 d6 fe ff       	call   c0000974 <strcat>
c00132f0:	5d                   	pop    ebp
c00132f1:	58                   	pop    eax
c00132f2:	57                   	push   edi
c00132f3:	56                   	push   esi
c00132f4:	e8 7b d6 fe ff       	call   c0000974 <strcat>
c00132f9:	83 c4 10             	add    esp,0x10
c00132fc:	8a 04 24             	mov    al,BYTE PTR [esp]
c00132ff:	3c 60                	cmp    al,0x60
c0013301:	7e 03                	jle    c0013306 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013303:	83 e8 20             	sub    eax,0x20
c0013306:	88 04 24             	mov    BYTE PTR [esp],al
c0013309:	88 03                	mov    BYTE PTR [ebx],al
c001330b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013312:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013318:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001331c:	bf 03 00 00 00       	mov    edi,0x3
c0013321:	b8 03 00 00 00       	mov    eax,0x3
c0013326:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013329:	84 d2                	test   dl,dl
c001332b:	0f 84 91 00 00 00    	je     c00133c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013331:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013334:	80 fa 5c             	cmp    dl,0x5c
c0013337:	74 05                	je     c001333e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013339:	80 fa 2f             	cmp    dl,0x2f
c001333c:	75 12                	jne    c0013350 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001333e:	89 c5                	mov    ebp,eax
c0013340:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013345:	74 09                	je     c0013350 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013347:	40                   	inc    eax
c0013348:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001334c:	89 cf                	mov    edi,ecx
c001334e:	eb d6                	jmp    c0013326 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013350:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013355:	75 5b                	jne    c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013357:	80 fa 2e             	cmp    dl,0x2e
c001335a:	75 56                	jne    c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001335c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013360:	74 19                	je     c001337b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013362:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013367:	74 53                	je     c00133bc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013369:	89 f9                	mov    ecx,edi
c001336b:	41                   	inc    ecx
c001336c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001336f:	80 fa 2f             	cmp    dl,0x2f
c0013372:	74 f7                	je     c001336b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013374:	80 fa 5c             	cmp    dl,0x5c
c0013377:	74 f2                	je     c001336b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013379:	eb d1                	jmp    c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001337b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013380:	74 3a                	je     c00133bc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013382:	83 f8 03             	cmp    eax,0x3
c0013385:	74 c5                	je     c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013387:	41                   	inc    ecx
c0013388:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001338b:	80 fa 2f             	cmp    dl,0x2f
c001338e:	74 f7                	je     c0013387 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013390:	80 fa 5c             	cmp    dl,0x5c
c0013393:	74 f2                	je     c0013387 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013395:	48                   	dec    eax
c0013396:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001339a:	75 06                	jne    c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001339c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133a0:	eb f3                	jmp    c0013395 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133a2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133a6:	74 07                	je     c00133af <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133a8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ac:	48                   	dec    eax
c00133ad:	eb f3                	jmp    c00133a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133af:	40                   	inc    eax
c00133b0:	eb 9a                	jmp    c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133b2:	80 fa 2f             	cmp    dl,0x2f
c00133b5:	74 95                	je     c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133b7:	80 fa 5c             	cmp    dl,0x5c
c00133ba:	74 90                	je     c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133bc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133bf:	40                   	inc    eax
c00133c0:	eb 8a                	jmp    c001334c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133c6:	83 ec 0c             	sub    esp,0xc
c00133c9:	53                   	push   ebx
c00133ca:	e8 c5 d3 fe ff       	call   c0000794 <strlen>
c00133cf:	83 c4 10             	add    esp,0x10
c00133d2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133d7:	75 26                	jne    c00133ff <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133d9:	83 ec 0c             	sub    esp,0xc
c00133dc:	53                   	push   ebx
c00133dd:	e8 b2 d3 fe ff       	call   c0000794 <strlen>
c00133e2:	83 c4 10             	add    esp,0x10
c00133e5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133ea:	74 26                	je     c0013412 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133ec:	83 ec 0c             	sub    esp,0xc
c00133ef:	53                   	push   ebx
c00133f0:	e8 9f d3 fe ff       	call   c0000794 <strlen>
c00133f5:	83 c4 10             	add    esp,0x10
c00133f8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00133fd:	eb c7                	jmp    c00133c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00133ff:	83 ec 0c             	sub    esp,0xc
c0013402:	53                   	push   ebx
c0013403:	e8 8c d3 fe ff       	call   c0000794 <strlen>
c0013408:	83 c4 10             	add    esp,0x10
c001340b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013410:	74 c7                	je     c00133d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013412:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013418:	5b                   	pop    ebx
c0013419:	5e                   	pop    esi
c001341a:	5f                   	pop    edi
c001341b:	5d                   	pop    ebp
c001341c:	c3                   	ret    
c001341d:	90                   	nop

c001341e <File::File(char const*, Process*)>:
c001341e:	83 ec 0c             	sub    esp,0xc
c0013421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013425:	83 ec 08             	sub    esp,0x8
c0013428:	6a 00                	push   0x0
c001342a:	50                   	push   eax
c001342b:	e8 08 e3 ff ff       	call   c0011738 <UnixFile::UnixFile(int)>
c0013430:	83 c4 10             	add    esp,0x10
c0013433:	ba 80 aa 02 c0       	mov    edx,0xc002aa80
c0013438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343c:	89 10                	mov    DWORD PTR [eax],edx
c001343e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013442:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344c:	83 c0 0d             	add    eax,0xd
c001344f:	83 ec 04             	sub    esp,0x4
c0013452:	52                   	push   edx
c0013453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013457:	50                   	push   eax
c0013458:	e8 17 fe ff ff       	call   c0013274 <Fs::standardiseFiles(char*, char const*, char const*)>
c001345d:	83 c4 10             	add    esp,0x10
c0013460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013464:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013467:	8d 50 bf             	lea    edx,[eax-0x41]
c001346a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013478:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001347c:	90                   	nop
c001347d:	83 c4 0c             	add    esp,0xc
c0013480:	c3                   	ret    
c0013481:	90                   	nop

c0013482 <File::open(FileOpenMode)>:
c0013482:	53                   	push   ebx
c0013483:	b8 0b 00 00 00       	mov    eax,0xb
c0013488:	83 ec 08             	sub    esp,0x8
c001348b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001348f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013496:	80 fa 19             	cmp    dl,0x19
c0013499:	77 40                	ja     c00134db <File::open(FileOpenMode)+0x59>
c001349b:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c00134a2:	85 d2                	test   edx,edx
c00134a4:	74 35                	je     c00134db <File::open(FileOpenMode)+0x59>
c00134a6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134ac:	85 d2                	test   edx,edx
c00134ae:	74 2b                	je     c00134db <File::open(FileOpenMode)+0x59>
c00134b0:	b8 06 00 00 00       	mov    eax,0x6
c00134b5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134b9:	75 20                	jne    c00134db <File::open(FileOpenMode)+0x59>
c00134bb:	8b 02                	mov    eax,DWORD PTR [edx]
c00134bd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134c7:	51                   	push   ecx
c00134c8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134cb:	51                   	push   ecx
c00134cc:	52                   	push   edx
c00134cd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134d0:	83 c4 10             	add    esp,0x10
c00134d3:	85 c0                	test   eax,eax
c00134d5:	75 04                	jne    c00134db <File::open(FileOpenMode)+0x59>
c00134d7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134db:	83 c4 08             	add    esp,0x8
c00134de:	5b                   	pop    ebx
c00134df:	c3                   	ret    

c00134e0 <File::close()>:
c00134e0:	53                   	push   ebx
c00134e1:	b8 0b 00 00 00       	mov    eax,0xb
c00134e6:	83 ec 08             	sub    esp,0x8
c00134e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134ed:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134f4:	80 fa 19             	cmp    dl,0x19
c00134f7:	77 41                	ja     c001353a <File::close()+0x5a>
c00134f9:	8b 1c 95 e0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1420]
c0013500:	85 db                	test   ebx,ebx
c0013502:	74 36                	je     c001353a <File::close()+0x5a>
c0013504:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001350b:	74 2d                	je     c001353a <File::close()+0x5a>
c001350d:	b8 05 00 00 00       	mov    eax,0x5
c0013512:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013516:	74 22                	je     c001353a <File::close()+0x5a>
c0013518:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001351c:	8b 04 95 e0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1420]
c0013523:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013529:	53                   	push   ebx
c001352a:	53                   	push   ebx
c001352b:	8b 10                	mov    edx,DWORD PTR [eax]
c001352d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013533:	50                   	push   eax
c0013534:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	83 c4 08             	add    esp,0x8
c001353d:	5b                   	pop    ebx
c001353e:	c3                   	ret    
c001353f:	90                   	nop

c0013540 <File::seek(unsigned long long)>:
c0013540:	56                   	push   esi
c0013541:	53                   	push   ebx
c0013542:	b8 0b 00 00 00       	mov    eax,0xb
c0013547:	51                   	push   ecx
c0013548:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001354c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013550:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013557:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001355b:	80 fa 19             	cmp    dl,0x19
c001355e:	77 31                	ja     c0013591 <File::seek(unsigned long long)+0x51>
c0013560:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013567:	85 d2                	test   edx,edx
c0013569:	74 26                	je     c0013591 <File::seek(unsigned long long)+0x51>
c001356b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013571:	85 d2                	test   edx,edx
c0013573:	74 1c                	je     c0013591 <File::seek(unsigned long long)+0x51>
c0013575:	b8 05 00 00 00       	mov    eax,0x5
c001357a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001357e:	74 11                	je     c0013591 <File::seek(unsigned long long)+0x51>
c0013580:	8b 02                	mov    eax,DWORD PTR [edx]
c0013582:	53                   	push   ebx
c0013583:	51                   	push   ecx
c0013584:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001358a:	52                   	push   edx
c001358b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001358e:	83 c4 10             	add    esp,0x10
c0013591:	5a                   	pop    edx
c0013592:	5b                   	pop    ebx
c0013593:	5e                   	pop    esi
c0013594:	c3                   	ret    
c0013595:	90                   	nop

c0013596 <File::tell(unsigned long long*)>:
c0013596:	83 ec 0c             	sub    esp,0xc
c0013599:	b8 0b 00 00 00       	mov    eax,0xb
c001359e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135a2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135a9:	80 fa 19             	cmp    dl,0x19
c00135ac:	77 34                	ja     c00135e2 <File::tell(unsigned long long*)+0x4c>
c00135ae:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c00135b5:	85 d2                	test   edx,edx
c00135b7:	74 29                	je     c00135e2 <File::tell(unsigned long long*)+0x4c>
c00135b9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135bf:	85 d2                	test   edx,edx
c00135c1:	74 1f                	je     c00135e2 <File::tell(unsigned long long*)+0x4c>
c00135c3:	b8 05 00 00 00       	mov    eax,0x5
c00135c8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135cc:	74 14                	je     c00135e2 <File::tell(unsigned long long*)+0x4c>
c00135ce:	50                   	push   eax
c00135cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00135d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135d5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135db:	52                   	push   edx
c00135dc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135df:	83 c4 10             	add    esp,0x10
c00135e2:	83 c4 0c             	add    esp,0xc
c00135e5:	c3                   	ret    

c00135e6 <File::rewind()>:
c00135e6:	83 ec 10             	sub    esp,0x10
c00135e9:	6a 00                	push   0x0
c00135eb:	6a 00                	push   0x0
c00135ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f1:	e8 4a ff ff ff       	call   c0013540 <File::seek(unsigned long long)>
c00135f6:	83 c4 1c             	add    esp,0x1c
c00135f9:	c3                   	ret    

c00135fa <File::unlink()>:
c00135fa:	83 ec 0c             	sub    esp,0xc
c00135fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013606:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001360d:	80 f9 19             	cmp    cl,0x19
c0013610:	77 2f                	ja     c0013641 <File::unlink()+0x47>
c0013612:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013619:	85 c9                	test   ecx,ecx
c001361b:	74 24                	je     c0013641 <File::unlink()+0x47>
c001361d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013623:	85 c9                	test   ecx,ecx
c0013625:	74 1a                	je     c0013641 <File::unlink()+0x47>
c0013627:	b8 06 00 00 00       	mov    eax,0x6
c001362c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013630:	75 0f                	jne    c0013641 <File::unlink()+0x47>
c0013632:	83 c2 0d             	add    edx,0xd
c0013635:	50                   	push   eax
c0013636:	50                   	push   eax
c0013637:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013639:	52                   	push   edx
c001363a:	51                   	push   ecx
c001363b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001363e:	83 c4 10             	add    esp,0x10
c0013641:	83 c4 0c             	add    esp,0xc
c0013644:	c3                   	ret    
c0013645:	90                   	nop

c0013646 <File::rename(char const*)>:
c0013646:	83 ec 0c             	sub    esp,0xc
c0013649:	b8 0b 00 00 00       	mov    eax,0xb
c001364e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013652:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013659:	80 f9 19             	cmp    cl,0x19
c001365c:	77 32                	ja     c0013690 <File::rename(char const*)+0x4a>
c001365e:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013665:	85 c9                	test   ecx,ecx
c0013667:	74 27                	je     c0013690 <File::rename(char const*)+0x4a>
c0013669:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001366f:	85 c9                	test   ecx,ecx
c0013671:	74 1d                	je     c0013690 <File::rename(char const*)+0x4a>
c0013673:	b8 06 00 00 00       	mov    eax,0x6
c0013678:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001367c:	75 12                	jne    c0013690 <File::rename(char const*)+0x4a>
c001367e:	83 c2 0d             	add    edx,0xd
c0013681:	50                   	push   eax
c0013682:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013688:	52                   	push   edx
c0013689:	51                   	push   ecx
c001368a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001368d:	83 c4 10             	add    esp,0x10
c0013690:	83 c4 0c             	add    esp,0xc
c0013693:	c3                   	ret    

c0013694 <File::chfatattr(unsigned char, unsigned char)>:
c0013694:	57                   	push   edi
c0013695:	b8 0b 00 00 00       	mov    eax,0xb
c001369a:	56                   	push   esi
c001369b:	53                   	push   ebx
c001369c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136ab:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136af:	80 f9 19             	cmp    cl,0x19
c00136b2:	77 37                	ja     c00136eb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136b4:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c00136bb:	85 c9                	test   ecx,ecx
c00136bd:	74 2c                	je     c00136eb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136c5:	85 c9                	test   ecx,ecx
c00136c7:	74 22                	je     c00136eb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136c9:	b8 06 00 00 00       	mov    eax,0x6
c00136ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136d2:	75 17                	jne    c00136eb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136d4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136d6:	89 f0                	mov    eax,esi
c00136d8:	83 c2 0d             	add    edx,0xd
c00136db:	0f b6 f0             	movzx  esi,al
c00136de:	0f b6 db             	movzx  ebx,bl
c00136e1:	56                   	push   esi
c00136e2:	53                   	push   ebx
c00136e3:	52                   	push   edx
c00136e4:	51                   	push   ecx
c00136e5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	5b                   	pop    ebx
c00136ec:	5e                   	pop    esi
c00136ed:	5f                   	pop    edi
c00136ee:	c3                   	ret    
c00136ef:	90                   	nop

c00136f0 <File::exists()>:
c00136f0:	83 ec 0c             	sub    esp,0xc
c00136f3:	31 c0                	xor    eax,eax
c00136f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136f9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013700:	80 f9 19             	cmp    cl,0x19
c0013703:	77 24                	ja     c0013729 <File::exists()+0x39>
c0013705:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c001370c:	85 c9                	test   ecx,ecx
c001370e:	74 19                	je     c0013729 <File::exists()+0x39>
c0013710:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013716:	85 c9                	test   ecx,ecx
c0013718:	74 0f                	je     c0013729 <File::exists()+0x39>
c001371a:	83 c2 0d             	add    edx,0xd
c001371d:	50                   	push   eax
c001371e:	50                   	push   eax
c001371f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013721:	52                   	push   edx
c0013722:	51                   	push   ecx
c0013723:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013726:	83 c4 10             	add    esp,0x10
c0013729:	83 c4 0c             	add    esp,0xc
c001372c:	c3                   	ret    
c001372d:	90                   	nop

c001372e <File::stat(unsigned long long*, bool*)>:
c001372e:	56                   	push   esi
c001372f:	53                   	push   ebx
c0013730:	50                   	push   eax
c0013731:	b8 0b 00 00 00       	mov    eax,0xb
c0013736:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001373a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001373e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013745:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013749:	80 f9 19             	cmp    cl,0x19
c001374c:	77 3d                	ja     c001378b <File::stat(unsigned long long*, bool*)+0x5d>
c001374e:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013755:	85 c9                	test   ecx,ecx
c0013757:	74 32                	je     c001378b <File::stat(unsigned long long*, bool*)+0x5d>
c0013759:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001375f:	85 c9                	test   ecx,ecx
c0013761:	74 28                	je     c001378b <File::stat(unsigned long long*, bool*)+0x5d>
c0013763:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013765:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013769:	74 13                	je     c001377e <File::stat(unsigned long long*, bool*)+0x50>
c001376b:	83 ec 04             	sub    esp,0x4
c001376e:	56                   	push   esi
c001376f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013775:	51                   	push   ecx
c0013776:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013779:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001377c:	eb 0a                	jmp    c0013788 <File::stat(unsigned long long*, bool*)+0x5a>
c001377e:	53                   	push   ebx
c001377f:	83 c2 0d             	add    edx,0xd
c0013782:	56                   	push   esi
c0013783:	52                   	push   edx
c0013784:	51                   	push   ecx
c0013785:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013788:	83 c4 10             	add    esp,0x10
c001378b:	5a                   	pop    edx
c001378c:	5b                   	pop    ebx
c001378d:	5e                   	pop    esi
c001378e:	c3                   	ret    

c001378f <Fs::setcwd(Process*, char*)>:
c001378f:	55                   	push   ebp
c0013790:	57                   	push   edi
c0013791:	56                   	push   esi
c0013792:	53                   	push   ebx
c0013793:	81 ec 20 02 00 00    	sub    esp,0x220
c0013799:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137a0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137a6:	57                   	push   edi
c00137a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137ae:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137b2:	56                   	push   esi
c00137b3:	e8 bc fa ff ff       	call   c0013274 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00137bb:	e8 d4 cf fe ff       	call   c0000794 <strlen>
c00137c0:	83 c4 10             	add    esp,0x10
c00137c3:	83 f8 02             	cmp    eax,0x2
c00137c6:	77 17                	ja     c00137df <Fs::setcwd(Process*, char*)+0x50>
c00137c8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137cd:	83 e8 41             	sub    eax,0x41
c00137d0:	83 f8 19             	cmp    eax,0x19
c00137d3:	76 24                	jbe    c00137f9 <Fs::setcwd(Process*, char*)+0x6a>
c00137d5:	b8 03 00 00 00       	mov    eax,0x3
c00137da:	e9 e0 00 00 00       	jmp    c00138bf <Fs::setcwd(Process*, char*)+0x130>
c00137df:	83 ec 0c             	sub    esp,0xc
c00137e2:	56                   	push   esi
c00137e3:	e8 ac cf fe ff       	call   c0000794 <strlen>
c00137e8:	83 c4 10             	add    esp,0x10
c00137eb:	83 f8 03             	cmp    eax,0x3
c00137ee:	75 34                	jne    c0013824 <Fs::setcwd(Process*, char*)+0x95>
c00137f0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00137f5:	75 2d                	jne    c0013824 <Fs::setcwd(Process*, char*)+0x95>
c00137f7:	eb cf                	jmp    c00137c8 <Fs::setcwd(Process*, char*)+0x39>
c00137f9:	8b 14 85 e0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1420]
c0013800:	b8 05 00 00 00       	mov    eax,0x5
c0013805:	85 d2                	test   edx,edx
c0013807:	0f 84 b2 00 00 00    	je     c00138bf <Fs::setcwd(Process*, char*)+0x130>
c001380d:	b8 06 00 00 00       	mov    eax,0x6
c0013812:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013819:	0f 85 92 00 00 00    	jne    c00138b1 <Fs::setcwd(Process*, char*)+0x122>
c001381f:	e9 9b 00 00 00       	jmp    c00138bf <Fs::setcwd(Process*, char*)+0x130>
c0013824:	83 ec 0c             	sub    esp,0xc
c0013827:	68 14 01 00 00       	push   0x114
c001382c:	e8 12 c0 ff ff       	call   c000f843 <malloc>
c0013831:	83 c4 0c             	add    esp,0xc
c0013834:	89 c3                	mov    ebx,eax
c0013836:	55                   	push   ebp
c0013837:	56                   	push   esi
c0013838:	50                   	push   eax
c0013839:	e8 e0 fb ff ff       	call   c001341e <File::File(char const*, Process*)>
c001383e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013843:	83 c4 0c             	add    esp,0xc
c0013846:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001384a:	50                   	push   eax
c001384b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001384f:	50                   	push   eax
c0013850:	53                   	push   ebx
c0013851:	e8 d8 fe ff ff       	call   c001372e <File::stat(unsigned long long*, bool*)>
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	83 f8 02             	cmp    eax,0x2
c001385c:	74 04                	je     c0013862 <Fs::setcwd(Process*, char*)+0xd3>
c001385e:	85 c0                	test   eax,eax
c0013860:	74 1c                	je     c001387e <Fs::setcwd(Process*, char*)+0xef>
c0013862:	b8 01 00 00 00       	mov    eax,0x1
c0013867:	85 db                	test   ebx,ebx
c0013869:	74 54                	je     c00138bf <Fs::setcwd(Process*, char*)+0x130>
c001386b:	83 ec 0c             	sub    esp,0xc
c001386e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013870:	53                   	push   ebx
c0013871:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013874:	83 c4 10             	add    esp,0x10
c0013877:	b8 01 00 00 00       	mov    eax,0x1
c001387c:	eb 41                	jmp    c00138bf <Fs::setcwd(Process*, char*)+0x130>
c001387e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013883:	75 1c                	jne    c00138a1 <Fs::setcwd(Process*, char*)+0x112>
c0013885:	b8 02 00 00 00       	mov    eax,0x2
c001388a:	85 db                	test   ebx,ebx
c001388c:	74 31                	je     c00138bf <Fs::setcwd(Process*, char*)+0x130>
c001388e:	83 ec 0c             	sub    esp,0xc
c0013891:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013893:	53                   	push   ebx
c0013894:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013897:	83 c4 10             	add    esp,0x10
c001389a:	b8 02 00 00 00       	mov    eax,0x2
c001389f:	eb 1e                	jmp    c00138bf <Fs::setcwd(Process*, char*)+0x130>
c00138a1:	85 db                	test   ebx,ebx
c00138a3:	74 0c                	je     c00138b1 <Fs::setcwd(Process*, char*)+0x122>
c00138a5:	83 ec 0c             	sub    esp,0xc
c00138a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138aa:	53                   	push   ebx
c00138ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	50                   	push   eax
c00138b2:	50                   	push   eax
c00138b3:	56                   	push   esi
c00138b4:	57                   	push   edi
c00138b5:	e8 7a cf fe ff       	call   c0000834 <strcpy>
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	31 c0                	xor    eax,eax
c00138bf:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138c5:	5b                   	pop    ebx
c00138c6:	5e                   	pop    esi
c00138c7:	5f                   	pop    edi
c00138c8:	5d                   	pop    ebp
c00138c9:	c3                   	ret    

c00138ca <Directory::Directory(char const*, Process*)>:
c00138ca:	83 ec 0c             	sub    esp,0xc
c00138cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d1:	83 ec 08             	sub    esp,0x8
c00138d4:	6a 00                	push   0x0
c00138d6:	50                   	push   eax
c00138d7:	e8 5c de ff ff       	call   c0011738 <UnixFile::UnixFile(int)>
c00138dc:	83 c4 10             	add    esp,0x10
c00138df:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c00138e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e8:	89 10                	mov    DWORD PTR [eax],edx
c00138ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00138f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f8:	83 c0 0d             	add    eax,0xd
c00138fb:	83 ec 04             	sub    esp,0x4
c00138fe:	52                   	push   edx
c00138ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013903:	50                   	push   eax
c0013904:	e8 6b f9 ff ff       	call   c0013274 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013910:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013913:	8d 50 bf             	lea    edx,[eax-0x41]
c0013916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013924:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013928:	90                   	nop
c0013929:	83 c4 0c             	add    esp,0xc
c001392c:	c3                   	ret    
c001392d:	90                   	nop

c001392e <Directory::open()>:
c001392e:	53                   	push   ebx
c001392f:	b8 0b 00 00 00       	mov    eax,0xb
c0013934:	83 ec 08             	sub    esp,0x8
c0013937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001393b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013942:	80 fa 19             	cmp    dl,0x19
c0013945:	77 3d                	ja     c0013984 <Directory::open()+0x56>
c0013947:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c001394e:	85 d2                	test   edx,edx
c0013950:	74 32                	je     c0013984 <Directory::open()+0x56>
c0013952:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013958:	85 d2                	test   edx,edx
c001395a:	74 28                	je     c0013984 <Directory::open()+0x56>
c001395c:	b8 06 00 00 00       	mov    eax,0x6
c0013961:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013965:	75 1d                	jne    c0013984 <Directory::open()+0x56>
c0013967:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001396d:	50                   	push   eax
c001396e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013970:	51                   	push   ecx
c0013971:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013974:	51                   	push   ecx
c0013975:	52                   	push   edx
c0013976:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013979:	83 c4 10             	add    esp,0x10
c001397c:	85 c0                	test   eax,eax
c001397e:	75 04                	jne    c0013984 <Directory::open()+0x56>
c0013980:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013984:	83 c4 08             	add    esp,0x8
c0013987:	5b                   	pop    ebx
c0013988:	c3                   	ret    
c0013989:	90                   	nop

c001398a <Directory::close()>:
c001398a:	53                   	push   ebx
c001398b:	b8 0b 00 00 00       	mov    eax,0xb
c0013990:	83 ec 08             	sub    esp,0x8
c0013993:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013997:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001399e:	80 fa 19             	cmp    dl,0x19
c00139a1:	77 41                	ja     c00139e4 <Directory::close()+0x5a>
c00139a3:	8b 1c 95 e0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1420]
c00139aa:	85 db                	test   ebx,ebx
c00139ac:	74 36                	je     c00139e4 <Directory::close()+0x5a>
c00139ae:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139b5:	74 2d                	je     c00139e4 <Directory::close()+0x5a>
c00139b7:	b8 05 00 00 00       	mov    eax,0x5
c00139bc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139c0:	74 22                	je     c00139e4 <Directory::close()+0x5a>
c00139c2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139c6:	8b 04 95 e0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1420]
c00139cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139d3:	53                   	push   ebx
c00139d4:	53                   	push   ebx
c00139d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00139d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139dd:	50                   	push   eax
c00139de:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139e1:	83 c4 10             	add    esp,0x10
c00139e4:	83 c4 08             	add    esp,0x8
c00139e7:	5b                   	pop    ebx
c00139e8:	c3                   	ret    
c00139e9:	90                   	nop

c00139ea <Directory::unlink()>:
c00139ea:	83 ec 0c             	sub    esp,0xc
c00139ed:	b8 0b 00 00 00       	mov    eax,0xb
c00139f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139fd:	80 f9 19             	cmp    cl,0x19
c0013a00:	77 2f                	ja     c0013a31 <Directory::unlink()+0x47>
c0013a02:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013a09:	85 c9                	test   ecx,ecx
c0013a0b:	74 24                	je     c0013a31 <Directory::unlink()+0x47>
c0013a0d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a13:	85 c9                	test   ecx,ecx
c0013a15:	74 1a                	je     c0013a31 <Directory::unlink()+0x47>
c0013a17:	b8 06 00 00 00       	mov    eax,0x6
c0013a1c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a20:	75 0f                	jne    c0013a31 <Directory::unlink()+0x47>
c0013a22:	83 c2 0d             	add    edx,0xd
c0013a25:	50                   	push   eax
c0013a26:	50                   	push   eax
c0013a27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a29:	52                   	push   edx
c0013a2a:	51                   	push   ecx
c0013a2b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a2e:	83 c4 10             	add    esp,0x10
c0013a31:	83 c4 0c             	add    esp,0xc
c0013a34:	c3                   	ret    
c0013a35:	90                   	nop

c0013a36 <Directory::rename(char const*)>:
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	b8 0b 00 00 00       	mov    eax,0xb
c0013a3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a49:	80 f9 19             	cmp    cl,0x19
c0013a4c:	77 32                	ja     c0013a80 <Directory::rename(char const*)+0x4a>
c0013a4e:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013a55:	85 c9                	test   ecx,ecx
c0013a57:	74 27                	je     c0013a80 <Directory::rename(char const*)+0x4a>
c0013a59:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a5f:	85 c9                	test   ecx,ecx
c0013a61:	74 1d                	je     c0013a80 <Directory::rename(char const*)+0x4a>
c0013a63:	b8 06 00 00 00       	mov    eax,0x6
c0013a68:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a6c:	75 12                	jne    c0013a80 <Directory::rename(char const*)+0x4a>
c0013a6e:	83 c2 0d             	add    edx,0xd
c0013a71:	50                   	push   eax
c0013a72:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a78:	52                   	push   edx
c0013a79:	51                   	push   ecx
c0013a7a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a7d:	83 c4 10             	add    esp,0x10
c0013a80:	83 c4 0c             	add    esp,0xc
c0013a83:	c3                   	ret    

c0013a84 <Directory::exists()>:
c0013a84:	83 ec 0c             	sub    esp,0xc
c0013a87:	31 c0                	xor    eax,eax
c0013a89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a8d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a94:	80 f9 19             	cmp    cl,0x19
c0013a97:	77 24                	ja     c0013abd <Directory::exists()+0x39>
c0013a99:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013aa0:	85 c9                	test   ecx,ecx
c0013aa2:	74 19                	je     c0013abd <Directory::exists()+0x39>
c0013aa4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aaa:	85 c9                	test   ecx,ecx
c0013aac:	74 0f                	je     c0013abd <Directory::exists()+0x39>
c0013aae:	83 c2 0d             	add    edx,0xd
c0013ab1:	50                   	push   eax
c0013ab2:	50                   	push   eax
c0013ab3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ab5:	52                   	push   edx
c0013ab6:	51                   	push   ecx
c0013ab7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013aba:	83 c4 10             	add    esp,0x10
c0013abd:	83 c4 0c             	add    esp,0xc
c0013ac0:	c3                   	ret    
c0013ac1:	90                   	nop

c0013ac2 <Directory::read(dirent*)>:
c0013ac2:	83 ec 1c             	sub    esp,0x1c
c0013ac5:	b8 0b 00 00 00       	mov    eax,0xb
c0013aca:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013ace:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ad5:	80 fa 19             	cmp    dl,0x19
c0013ad8:	77 30                	ja     c0013b0a <Directory::read(dirent*)+0x48>
c0013ada:	8b 14 95 e0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1420]
c0013ae1:	85 d2                	test   edx,edx
c0013ae3:	74 25                	je     c0013b0a <Directory::read(dirent*)+0x48>
c0013ae5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013aec:	74 1c                	je     c0013b0a <Directory::read(dirent*)+0x48>
c0013aee:	83 ec 0c             	sub    esp,0xc
c0013af1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013af3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013af7:	52                   	push   edx
c0013af8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013afc:	6a 00                	push   0x0
c0013afe:	68 10 01 00 00       	push   0x110
c0013b03:	51                   	push   ecx
c0013b04:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b07:	83 c4 20             	add    esp,0x20
c0013b0a:	83 c4 1c             	add    esp,0x1c
c0013b0d:	c3                   	ret    

c0013b0e <Directory::create()>:
c0013b0e:	83 ec 0c             	sub    esp,0xc
c0013b11:	b8 0b 00 00 00       	mov    eax,0xb
c0013b16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b21:	80 f9 19             	cmp    cl,0x19
c0013b24:	77 2f                	ja     c0013b55 <Directory::create()+0x47>
c0013b26:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0013b2d:	85 c9                	test   ecx,ecx
c0013b2f:	74 24                	je     c0013b55 <Directory::create()+0x47>
c0013b31:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b37:	85 c9                	test   ecx,ecx
c0013b39:	74 1a                	je     c0013b55 <Directory::create()+0x47>
c0013b3b:	b8 06 00 00 00       	mov    eax,0x6
c0013b40:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b44:	75 0f                	jne    c0013b55 <Directory::create()+0x47>
c0013b46:	83 c2 0d             	add    edx,0xd
c0013b49:	50                   	push   eax
c0013b4a:	50                   	push   eax
c0013b4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b4d:	52                   	push   edx
c0013b4e:	51                   	push   ecx
c0013b4f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	83 c4 0c             	add    esp,0xc
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b5a:	b8 0a 00 00 00       	mov    eax,0xa
c0013b5f:	c3                   	ret    

c0013b60 <Bus::Bus(char const*)>:
c0013b60:	83 ec 0c             	sub    esp,0xc
c0013b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b67:	83 ec 08             	sub    esp,0x8
c0013b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b6e:	50                   	push   eax
c0013b6f:	e8 68 09 00 00       	call   c00144dc <Device::Device(char const*)>
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	ba b8 aa 02 c0       	mov    edx,0xc002aab8
c0013b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b80:	89 10                	mov    DWORD PTR [eax],edx
c0013b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b86:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b90:	90                   	nop
c0013b91:	83 c4 0c             	add    esp,0xc
c0013b94:	c3                   	ret    
c0013b95:	90                   	nop

c0013b96 <Bus::~Bus()>:
c0013b96:	83 ec 0c             	sub    esp,0xc
c0013b99:	ba b8 aa 02 c0       	mov    edx,0xc002aab8
c0013b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba2:	89 10                	mov    DWORD PTR [eax],edx
c0013ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	50                   	push   eax
c0013bac:	e8 0d 06 00 00       	call   c00141be <Device::~Device()>
c0013bb1:	83 c4 10             	add    esp,0x10
c0013bb4:	90                   	nop
c0013bb5:	83 c4 0c             	add    esp,0xc
c0013bb8:	c3                   	ret    
c0013bb9:	90                   	nop

c0013bba <Bus::~Bus()>:
c0013bba:	83 ec 0c             	sub    esp,0xc
c0013bbd:	83 ec 0c             	sub    esp,0xc
c0013bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bc4:	e8 cd ff ff ff       	call   c0013b96 <Bus::~Bus()>
c0013bc9:	83 c4 10             	add    esp,0x10
c0013bcc:	83 ec 08             	sub    esp,0x8
c0013bcf:	68 58 01 00 00       	push   0x158
c0013bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd8:	e8 09 f2 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0013bdd:	83 c4 10             	add    esp,0x10
c0013be0:	83 c4 0c             	add    esp,0xc
c0013be3:	c3                   	ret    

c0013be4 <Buzzer::Buzzer(char const*)>:
c0013be4:	83 ec 0c             	sub    esp,0xc
c0013be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013beb:	83 ec 08             	sub    esp,0x8
c0013bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf2:	50                   	push   eax
c0013bf3:	e8 e4 08 00 00       	call   c00144dc <Device::Device(char const*)>
c0013bf8:	83 c4 10             	add    esp,0x10
c0013bfb:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0013c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c04:	89 10                	mov    DWORD PTR [eax],edx
c0013c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c18:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c22:	90                   	nop
c0013c23:	83 c4 0c             	add    esp,0xc
c0013c26:	c3                   	ret    
c0013c27:	90                   	nop

c0013c28 <Buzzer::~Buzzer()>:
c0013c28:	83 ec 0c             	sub    esp,0xc
c0013c2b:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c0013c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c34:	89 10                	mov    DWORD PTR [eax],edx
c0013c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	50                   	push   eax
c0013c3e:	e8 7b 05 00 00       	call   c00141be <Device::~Device()>
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	90                   	nop
c0013c47:	83 c4 0c             	add    esp,0xc
c0013c4a:	c3                   	ret    
c0013c4b:	90                   	nop

c0013c4c <Buzzer::~Buzzer()>:
c0013c4c:	83 ec 0c             	sub    esp,0xc
c0013c4f:	83 ec 0c             	sub    esp,0xc
c0013c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c56:	e8 cd ff ff ff       	call   c0013c28 <Buzzer::~Buzzer()>
c0013c5b:	83 c4 10             	add    esp,0x10
c0013c5e:	83 ec 08             	sub    esp,0x8
c0013c61:	68 5c 01 00 00       	push   0x15c
c0013c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c6a:	e8 77 f1 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0013c6f:	83 c4 10             	add    esp,0x10
c0013c72:	83 c4 0c             	add    esp,0xc
c0013c75:	c3                   	ret    

c0013c76 <Buzzer::stop()>:
c0013c76:	83 ec 14             	sub    esp,0x14
c0013c79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c7f:	6a 00                	push   0x0
c0013c81:	50                   	push   eax
c0013c82:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c85:	83 c4 1c             	add    esp,0x1c
c0013c88:	c3                   	ret    

c0013c89 <beepThread(void*)>:
c0013c89:	53                   	push   ebx
c0013c8a:	83 ec 08             	sub    esp,0x8
c0013c8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c91:	e8 d1 a0 00 00       	call   c001dd67 <unlockScheduler()>
c0013c96:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c9b:	52                   	push   edx
c0013c9c:	52                   	push   edx
c0013c9d:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013ca3:	52                   	push   edx
c0013ca4:	50                   	push   eax
c0013ca5:	e8 0a a6 00 00       	call   c001e2b4 <nanoSleep(unsigned long long)>
c0013caa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cad:	e8 c4 ff ff ff       	call   c0013c76 <Buzzer::stop()>
c0013cb2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013cba:	83 c4 18             	add    esp,0x18
c0013cbd:	5b                   	pop    ebx
c0013cbe:	e9 37 a5 00 00       	jmp    c001e1fa <blockTask(TaskState)>
c0013cc3:	90                   	nop

c0013cc4 <Buzzer::beep(int, int, bool)>:
c0013cc4:	57                   	push   edi
c0013cc5:	56                   	push   esi
c0013cc6:	53                   	push   ebx
c0013cc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ccb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ccf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cd3:	52                   	push   edx
c0013cd4:	52                   	push   edx
c0013cd5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013cd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cdb:	56                   	push   esi
c0013cdc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cdf:	83 c4 10             	add    esp,0x10
c0013ce2:	89 f8                	mov    eax,edi
c0013ce4:	84 c0                	test   al,al
c0013ce6:	74 1f                	je     c0013d07 <Buzzer::beep(int, int, bool)+0x43>
c0013ce8:	50                   	push   eax
c0013ce9:	50                   	push   eax
c0013cea:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cf0:	99                   	cdq    
c0013cf1:	52                   	push   edx
c0013cf2:	50                   	push   eax
c0013cf3:	e8 bc a5 00 00       	call   c001e2b4 <nanoSleep(unsigned long long)>
c0013cf8:	83 c4 10             	add    esp,0x10
c0013cfb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013cff:	5b                   	pop    ebx
c0013d00:	5e                   	pop    esi
c0013d01:	5f                   	pop    edi
c0013d02:	e9 6f ff ff ff       	jmp    c0013c76 <Buzzer::stop()>
c0013d07:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d0d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0013d12:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d1a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d1e:	c7 44 24 14 89 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c89
c0013d26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d2a:	5b                   	pop    ebx
c0013d2b:	5e                   	pop    esi
c0013d2c:	5f                   	pop    edi
c0013d2d:	e9 64 a1 00 00       	jmp    c001de96 <Process::createThread(void (*)(void*), void*, int)>

c0013d32 <User::loadClockSettings(int)>:
c0013d32:	53                   	push   ebx
c0013d33:	83 ec 14             	sub    esp,0x14
c0013d36:	68 14 01 00 00       	push   0x114
c0013d3b:	e8 03 bb ff ff       	call   c000f843 <malloc>
c0013d40:	83 c4 0c             	add    esp,0xc
c0013d43:	89 c3                	mov    ebx,eax
c0013d45:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c0013d4b:	68 0c ab 02 c0       	push   0xc002ab0c
c0013d50:	50                   	push   eax
c0013d51:	e8 c8 f6 ff ff       	call   c001341e <File::File(char const*, Process*)>
c0013d56:	58                   	pop    eax
c0013d57:	5a                   	pop    edx
c0013d58:	6a 01                	push   0x1
c0013d5a:	53                   	push   ebx
c0013d5b:	e8 22 f7 ff ff       	call   c0013482 <File::open(FileOpenMode)>
c0013d60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d63:	e8 78 f7 ff ff       	call   c00134e0 <File::close()>
c0013d68:	83 c4 10             	add    esp,0x10
c0013d6b:	85 db                	test   ebx,ebx
c0013d6d:	74 0f                	je     c0013d7e <User::loadClockSettings(int)+0x4c>
c0013d6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d71:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d78:	83 c4 08             	add    esp,0x8
c0013d7b:	5b                   	pop    ebx
c0013d7c:	ff e0                	jmp    eax
c0013d7e:	83 c4 08             	add    esp,0x8
c0013d81:	5b                   	pop    ebx
c0013d82:	c3                   	ret    
c0013d83:	90                   	nop

c0013d84 <Clock::Clock(char const*)>:
c0013d84:	83 ec 0c             	sub    esp,0xc
c0013d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8b:	83 ec 08             	sub    esp,0x8
c0013d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d92:	50                   	push   eax
c0013d93:	e8 44 07 00 00       	call   c00144dc <Device::Device(char const*)>
c0013d98:	83 c4 10             	add    esp,0x10
c0013d9b:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0013da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da4:	89 10                	mov    DWORD PTR [eax],edx
c0013da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013daa:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013db4:	90                   	nop
c0013db5:	83 c4 0c             	add    esp,0xc
c0013db8:	c3                   	ret    
c0013db9:	90                   	nop

c0013dba <Clock::~Clock()>:
c0013dba:	83 ec 0c             	sub    esp,0xc
c0013dbd:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0013dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc6:	89 10                	mov    DWORD PTR [eax],edx
c0013dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dcc:	83 ec 0c             	sub    esp,0xc
c0013dcf:	50                   	push   eax
c0013dd0:	e8 e9 03 00 00       	call   c00141be <Device::~Device()>
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	90                   	nop
c0013dd9:	83 c4 0c             	add    esp,0xc
c0013ddc:	c3                   	ret    
c0013ddd:	90                   	nop

c0013dde <Clock::~Clock()>:
c0013dde:	83 ec 0c             	sub    esp,0xc
c0013de1:	83 ec 0c             	sub    esp,0xc
c0013de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013de8:	e8 cd ff ff ff       	call   c0013dba <Clock::~Clock()>
c0013ded:	83 c4 10             	add    esp,0x10
c0013df0:	83 ec 08             	sub    esp,0x8
c0013df3:	68 58 01 00 00       	push   0x158
c0013df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dfc:	e8 e5 ef ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0013e01:	83 c4 10             	add    esp,0x10
c0013e04:	83 c4 0c             	add    esp,0xc
c0013e07:	c3                   	ret    

c0013e08 <Clock::timeInSecondsLocal()>:
c0013e08:	53                   	push   ebx
c0013e09:	83 ec 14             	sub    esp,0x14
c0013e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e10:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e12:	50                   	push   eax
c0013e13:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e16:	0f b6 0d 50 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e750
c0013e1d:	03 0d 54 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e754
c0013e23:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e29:	89 cb                	mov    ebx,ecx
c0013e2b:	c1 fb 1f             	sar    ebx,0x1f
c0013e2e:	01 c8                	add    eax,ecx
c0013e30:	11 da                	adc    edx,ebx
c0013e32:	83 c4 10             	add    esp,0x10
c0013e35:	31 c9                	xor    ecx,ecx
c0013e37:	80 3d 51 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e751,0x0
c0013e3e:	74 05                	je     c0013e45 <Clock::timeInSecondsLocal()+0x3d>
c0013e40:	b9 08 07 00 00       	mov    ecx,0x708
c0013e45:	31 db                	xor    ebx,ebx
c0013e47:	01 c8                	add    eax,ecx
c0013e49:	11 da                	adc    edx,ebx
c0013e4b:	83 c4 08             	add    esp,0x8
c0013e4e:	5b                   	pop    ebx
c0013e4f:	c3                   	ret    

c0013e50 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e50:	57                   	push   edi
c0013e51:	56                   	push   esi
c0013e52:	53                   	push   ebx
c0013e53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e5d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e61:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e64:	0f b6 05 50 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e750
c0013e6b:	03 05 54 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e754
c0013e71:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e77:	99                   	cdq    
c0013e78:	29 c6                	sub    esi,eax
c0013e7a:	19 d7                	sbb    edi,edx
c0013e7c:	89 f0                	mov    eax,esi
c0013e7e:	89 fa                	mov    edx,edi
c0013e80:	31 f6                	xor    esi,esi
c0013e82:	80 3d 51 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e751,0x0
c0013e89:	74 05                	je     c0013e90 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e8b:	be 08 07 00 00       	mov    esi,0x708
c0013e90:	31 ff                	xor    edi,edi
c0013e92:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e96:	29 f0                	sub    eax,esi
c0013e98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e9c:	19 fa                	sbb    edx,edi
c0013e9e:	89 d8                	mov    eax,ebx
c0013ea0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ea4:	5b                   	pop    ebx
c0013ea5:	5e                   	pop    esi
c0013ea6:	5f                   	pop    edi
c0013ea7:	ff e0                	jmp    eax

c0013ea9 <datetimeToSeconds(datetime_t)>:
c0013ea9:	55                   	push   ebp
c0013eaa:	57                   	push   edi
c0013eab:	56                   	push   esi
c0013eac:	53                   	push   ebx
c0013ead:	83 ec 14             	sub    esp,0x14
c0013eb0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013eb4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013eb8:	89 d3                	mov    ebx,edx
c0013eba:	0f b6 c6             	movzx  eax,dh
c0013ebd:	c1 eb 10             	shr    ebx,0x10
c0013ec0:	48                   	dec    eax
c0013ec1:	66 81 eb 6c 07       	sub    bx,0x76c
c0013ec6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013eca:	0f b6 f5             	movzx  esi,ch
c0013ecd:	89 cf                	mov    edi,ecx
c0013ecf:	6b f6 3c             	imul   esi,esi,0x3c
c0013ed2:	c1 ef 10             	shr    edi,0x10
c0013ed5:	0f b6 c9             	movzx  ecx,cl
c0013ed8:	89 f8                	mov    eax,edi
c0013eda:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ee0:	0f b6 f8             	movzx  edi,al
c0013ee3:	0f b6 d2             	movzx  edx,dl
c0013ee6:	01 fe                	add    esi,edi
c0013ee8:	01 f1                	add    ecx,esi
c0013eea:	0f b7 f3             	movzx  esi,bx
c0013eed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ef1:	c1 f9 1f             	sar    ecx,0x1f
c0013ef4:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ef9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013efd:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f02:	8b 0c 8d 80 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5480]
c0013f09:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f0d:	76 29                	jbe    c0013f38 <datetimeToSeconds(datetime_t)+0x8f>
c0013f0f:	f6 c3 03             	test   bl,0x3
c0013f12:	75 24                	jne    c0013f38 <datetimeToSeconds(datetime_t)+0x8f>
c0013f14:	31 d2                	xor    edx,edx
c0013f16:	bf 64 00 00 00       	mov    edi,0x64
c0013f1b:	89 d8                	mov    eax,ebx
c0013f1d:	66 f7 f7             	div    di
c0013f20:	66 85 d2             	test   dx,dx
c0013f23:	75 12                	jne    c0013f37 <datetimeToSeconds(datetime_t)+0x8e>
c0013f25:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f2b:	bf 90 01 00 00       	mov    edi,0x190
c0013f30:	99                   	cdq    
c0013f31:	f7 ff                	idiv   edi
c0013f33:	85 d2                	test   edx,edx
c0013f35:	75 01                	jne    c0013f38 <datetimeToSeconds(datetime_t)+0x8f>
c0013f37:	41                   	inc    ecx
c0013f38:	66 83 fb 46          	cmp    bx,0x46
c0013f3c:	76 45                	jbe    c0013f83 <datetimeToSeconds(datetime_t)+0xda>
c0013f3e:	bb 46 00 00 00       	mov    ebx,0x46
c0013f43:	bf 64 00 00 00       	mov    edi,0x64
c0013f48:	bd 90 01 00 00       	mov    ebp,0x190
c0013f4d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f52:	f6 c3 03             	test   bl,0x3
c0013f55:	75 23                	jne    c0013f7a <datetimeToSeconds(datetime_t)+0xd1>
c0013f57:	89 d8                	mov    eax,ebx
c0013f59:	99                   	cdq    
c0013f5a:	f7 ff                	idiv   edi
c0013f5c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f61:	85 d2                	test   edx,edx
c0013f63:	75 15                	jne    c0013f7a <datetimeToSeconds(datetime_t)+0xd1>
c0013f65:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f6b:	99                   	cdq    
c0013f6c:	f7 fd                	idiv   ebp
c0013f6e:	83 fa 01             	cmp    edx,0x1
c0013f71:	19 c0                	sbb    eax,eax
c0013f73:	f7 d0                	not    eax
c0013f75:	05 6e 01 00 00       	add    eax,0x16e
c0013f7a:	01 c1                	add    ecx,eax
c0013f7c:	43                   	inc    ebx
c0013f7d:	39 f3                	cmp    ebx,esi
c0013f7f:	7c cc                	jl     c0013f4d <datetimeToSeconds(datetime_t)+0xa4>
c0013f81:	eb 35                	jmp    c0013fb8 <datetimeToSeconds(datetime_t)+0x10f>
c0013f83:	74 33                	je     c0013fb8 <datetimeToSeconds(datetime_t)+0x10f>
c0013f85:	b8 45 00 00 00       	mov    eax,0x45
c0013f8a:	89 c2                	mov    edx,eax
c0013f8c:	83 e2 03             	and    edx,0x3
c0013f8f:	39 f0                	cmp    eax,esi
c0013f91:	7e 0f                	jle    c0013fa2 <datetimeToSeconds(datetime_t)+0xf9>
c0013f93:	83 fa 01             	cmp    edx,0x1
c0013f96:	19 d2                	sbb    edx,edx
c0013f98:	48                   	dec    eax
c0013f99:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fa0:	eb e8                	jmp    c0013f8a <datetimeToSeconds(datetime_t)+0xe1>
c0013fa2:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fa7:	85 d2                	test   edx,edx
c0013fa9:	75 0b                	jne    c0013fb6 <datetimeToSeconds(datetime_t)+0x10d>
c0013fab:	66 83 fb 01          	cmp    bx,0x1
c0013faf:	19 c0                	sbb    eax,eax
c0013fb1:	05 6e 01 00 00       	add    eax,0x16e
c0013fb6:	29 c1                	sub    ecx,eax
c0013fb8:	b8 80 51 01 00       	mov    eax,0x15180
c0013fbd:	f7 e9                	imul   ecx
c0013fbf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fc3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013fc7:	83 c4 14             	add    esp,0x14
c0013fca:	5b                   	pop    ebx
c0013fcb:	5e                   	pop    esi
c0013fcc:	5f                   	pop    edi
c0013fcd:	5d                   	pop    ebp
c0013fce:	c3                   	ret    
c0013fcf:	90                   	nop

c0013fd0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fd0:	57                   	push   edi
c0013fd1:	56                   	push   esi
c0013fd2:	53                   	push   ebx
c0013fd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fd7:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fd9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fe0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fe4:	e8 c0 fe ff ff       	call   c0013ea9 <datetimeToSeconds(datetime_t)>
c0013fe9:	59                   	pop    ecx
c0013fea:	0f b6 0d 50 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e750
c0013ff1:	5b                   	pop    ebx
c0013ff2:	03 0d 54 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e754
c0013ff8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ffe:	89 cb                	mov    ebx,ecx
c0014000:	c1 fb 1f             	sar    ebx,0x1f
c0014003:	29 c8                	sub    eax,ecx
c0014005:	19 da                	sbb    edx,ebx
c0014007:	31 c9                	xor    ecx,ecx
c0014009:	80 3d 51 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e751,0x0
c0014010:	74 05                	je     c0014017 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014012:	b9 08 07 00 00       	mov    ecx,0x708
c0014017:	31 db                	xor    ebx,ebx
c0014019:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001401d:	29 c8                	sub    eax,ecx
c001401f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014023:	19 da                	sbb    edx,ebx
c0014025:	89 f8                	mov    eax,edi
c0014027:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001402b:	5b                   	pop    ebx
c001402c:	5e                   	pop    esi
c001402d:	5f                   	pop    edi
c001402e:	ff e0                	jmp    eax

c0014030 <secondsToDatetime(unsigned long long)>:
c0014030:	55                   	push   ebp
c0014031:	57                   	push   edi
c0014032:	56                   	push   esi
c0014033:	53                   	push   ebx
c0014034:	83 ec 1c             	sub    esp,0x1c
c0014037:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001403b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001403f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0014043:	6a 00                	push   0x0
c0014045:	68 80 51 01 00       	push   0x15180
c001404a:	55                   	push   ebp
c001404b:	57                   	push   edi
c001404c:	e8 1b 29 01 00       	call   c002696c <__udivdi3>
c0014051:	83 c4 10             	add    esp,0x10
c0014054:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001405a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001405e:	6a 00                	push   0x0
c0014060:	68 80 51 01 00       	push   0x15180
c0014065:	55                   	push   ebp
c0014066:	57                   	push   edi
c0014067:	bf 10 0e 00 00       	mov    edi,0xe10
c001406c:	e8 fb 29 01 00       	call   c0026a6c <__umoddi3>
c0014071:	83 c4 10             	add    esp,0x10
c0014074:	99                   	cdq    
c0014075:	f7 ff                	idiv   edi
c0014077:	bf 3c 00 00 00       	mov    edi,0x3c
c001407c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001407f:	89 d0                	mov    eax,edx
c0014081:	99                   	cdq    
c0014082:	f7 ff                	idiv   edi
c0014084:	85 db                	test   ebx,ebx
c0014086:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014089:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001408c:	79 11                	jns    c001409f <secondsToDatetime(unsigned long long)+0x6f>
c001408e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014092:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014098:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001409d:	eb 07                	jmp    c00140a6 <secondsToDatetime(unsigned long long)+0x76>
c001409f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140a4:	89 d8                	mov    eax,ebx
c00140a6:	bf b4 05 00 00       	mov    edi,0x5b4
c00140ab:	99                   	cdq    
c00140ac:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140b1:	f7 f9                	idiv   ecx
c00140b3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140bc:	31 d2                	xor    edx,edx
c00140be:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140c6:	01 c3                	add    ebx,eax
c00140c8:	89 d8                	mov    eax,ebx
c00140ca:	f7 f1                	div    ecx
c00140cc:	31 d2                	xor    edx,edx
c00140ce:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140d1:	89 d8                	mov    eax,ebx
c00140d3:	f7 f7                	div    edi
c00140d5:	31 d2                	xor    edx,edx
c00140d7:	29 c1                	sub    ecx,eax
c00140d9:	89 d8                	mov    eax,ebx
c00140db:	f7 f5                	div    ebp
c00140dd:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140e2:	29 c1                	sub    ecx,eax
c00140e4:	31 d2                	xor    edx,edx
c00140e6:	89 c8                	mov    eax,ecx
c00140e8:	f7 f5                	div    ebp
c00140ea:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140f3:	31 d2                	xor    edx,edx
c00140f5:	89 c8                	mov    eax,ecx
c00140f7:	f7 f5                	div    ebp
c00140f9:	31 d2                	xor    edx,edx
c00140fb:	01 c3                	add    ebx,eax
c00140fd:	89 c8                	mov    eax,ecx
c00140ff:	f7 f7                	div    edi
c0014101:	bf 99 00 00 00       	mov    edi,0x99
c0014106:	29 c3                	sub    ebx,eax
c0014108:	31 d2                	xor    edx,edx
c001410a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014112:	29 c3                	sub    ebx,eax
c0014114:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014117:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001411a:	bb 05 00 00 00       	mov    ebx,0x5
c001411f:	83 c1 02             	add    ecx,0x2
c0014122:	89 c8                	mov    eax,ecx
c0014124:	f7 f7                	div    edi
c0014126:	31 d2                	xor    edx,edx
c0014128:	89 c7                	mov    edi,eax
c001412a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014130:	83 c0 02             	add    eax,0x2
c0014133:	f7 f3                	div    ebx
c0014135:	89 eb                	mov    ebx,ebp
c0014137:	29 c3                	sub    ebx,eax
c0014139:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001413f:	88 1e                	mov    BYTE PTR [esi],bl
c0014141:	19 c0                	sbb    eax,eax
c0014143:	31 d2                	xor    edx,edx
c0014145:	83 e0 0c             	and    eax,0xc
c0014148:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001414c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014154:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014158:	83 f9 01             	cmp    ecx,0x1
c001415b:	0f 96 c2             	setbe  dl
c001415e:	41                   	inc    ecx
c001415f:	01 d0                	add    eax,edx
c0014161:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014164:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014168:	83 c4 1c             	add    esp,0x1c
c001416b:	89 f0                	mov    eax,esi
c001416d:	5b                   	pop    ebx
c001416e:	5e                   	pop    esi
c001416f:	5f                   	pop    edi
c0014170:	5d                   	pop    ebp
c0014171:	c2 04 00             	ret    0x4

c0014174 <Clock::timeInDatetimeLocal()>:
c0014174:	53                   	push   ebx
c0014175:	83 ec 14             	sub    esp,0x14
c0014178:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001417c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014180:	e8 83 fc ff ff       	call   c0013e08 <Clock::timeInSecondsLocal()>
c0014185:	83 c4 0c             	add    esp,0xc
c0014188:	52                   	push   edx
c0014189:	50                   	push   eax
c001418a:	53                   	push   ebx
c001418b:	e8 a0 fe ff ff       	call   c0014030 <secondsToDatetime(unsigned long long)>
c0014190:	89 d8                	mov    eax,ebx
c0014192:	83 c4 14             	add    esp,0x14
c0014195:	5b                   	pop    ebx
c0014196:	c2 04 00             	ret    0x4
c0014199:	90                   	nop

c001419a <Device::hibernate()>:
c001419a:	c3                   	ret    
c001419b:	90                   	nop

c001419c <Device::wake()>:
c001419c:	c3                   	ret    
c001419d:	90                   	nop

c001419e <Device::detect()>:
c001419e:	c3                   	ret    
c001419f:	90                   	nop

c00141a0 <Device::disableLegacy()>:
c00141a0:	c3                   	ret    
c00141a1:	90                   	nop

c00141a2 <Device::powerSaving(PowerSavingLevel)>:
c00141a2:	c3                   	ret    
c00141a3:	90                   	nop

c00141a4 <DriverlessDevice::close(int, int, void*)>:
c00141a4:	31 c0                	xor    eax,eax
c00141a6:	c3                   	ret    
c00141a7:	90                   	nop

c00141a8 <DriverlessDevice::detect()>:
c00141a8:	c3                   	ret    
c00141a9:	90                   	nop

c00141aa <DriverlessDevice::open(int, int, void*)>:
c00141aa:	83 ec 18             	sub    esp,0x18
c00141ad:	68 b0 ab 02 c0       	push   0xc002abb0
c00141b2:	e8 b4 63 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00141b7:	83 c8 ff             	or     eax,0xffffffff
c00141ba:	83 c4 1c             	add    esp,0x1c
c00141bd:	c3                   	ret    

c00141be <Device::~Device()>:
c00141be:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00141c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141c7:	89 10                	mov    DWORD PTR [eax],edx
c00141c9:	90                   	nop
c00141ca:	c3                   	ret    
c00141cb:	90                   	nop

c00141cc <Device::~Device()>:
c00141cc:	83 ec 0c             	sub    esp,0xc
c00141cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141d3:	e8 e6 ff ff ff       	call   c00141be <Device::~Device()>
c00141d8:	83 c4 04             	add    esp,0x4
c00141db:	83 ec 08             	sub    esp,0x8
c00141de:	68 58 01 00 00       	push   0x158
c00141e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141e7:	e8 fa eb ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00141ec:	83 c4 10             	add    esp,0x10
c00141ef:	83 c4 0c             	add    esp,0xc
c00141f2:	c3                   	ret    
c00141f3:	90                   	nop

c00141f4 <Device::findAndLoadDriver()>:
c00141f4:	c3                   	ret    
c00141f5:	90                   	nop

c00141f6 <Device::preOpenPCI(PCIDeviceInfo)>:
c00141f6:	57                   	push   edi
c00141f7:	b9 09 00 00 00       	mov    ecx,0x9
c00141fc:	56                   	push   esi
c00141fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014201:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014205:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001420f:	81 c7 18 01 00 00    	add    edi,0x118
c0014215:	fc                   	cld    
c0014216:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014218:	5e                   	pop    esi
c0014219:	5f                   	pop    edi
c001421a:	c3                   	ret    
c001421b:	90                   	nop

c001421c <Device::preOpenACPI(void*, char*, char*)>:
c001421c:	56                   	push   esi
c001421d:	53                   	push   ebx
c001421e:	83 ec 08             	sub    esp,0x8
c0014221:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014225:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014229:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014233:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014237:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001423d:	6a 1e                	push   0x1e
c001423f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014245:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014249:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001424f:	50                   	push   eax
c0014250:	e8 ef c4 fe ff       	call   c0000744 <memcpy>
c0014255:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014259:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001425d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014265:	83 c4 14             	add    esp,0x14
c0014268:	5b                   	pop    ebx
c0014269:	5e                   	pop    esi
c001426a:	e9 d5 c4 fe ff       	jmp    c0000744 <memcpy>
c001426f:	90                   	nop

c0014270 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014274:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014279:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014280:	75 0b                	jne    c001428d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014282:	8b 00                	mov    eax,DWORD PTR [eax]
c0014284:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014288:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001428b:	eb 1e                	jmp    c00142ab <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001428d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014292:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014298:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001429e:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142a8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142ab:	ff e0                	jmp    eax
c00142ad:	90                   	nop

c00142ae <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142b2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142b7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142be:	75 0b                	jne    c00142cb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00142c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142c6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142c9:	eb 1e                	jmp    c00142e9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142cb:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00142d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142d6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142de:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142e6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142e9:	ff e0                	jmp    eax
c00142eb:	90                   	nop

c00142ec <Device::addChild(Device*)>:
c00142ec:	53                   	push   ebx
c00142ed:	83 ec 08             	sub    esp,0x8
c00142f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142f8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00142fe:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014304:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014306:	85 d2                	test   edx,edx
c0014308:	74 04                	je     c001430e <Device::addChild(Device*)+0x22>
c001430a:	89 d3                	mov    ebx,edx
c001430c:	eb f6                	jmp    c0014304 <Device::addChild(Device*)+0x18>
c001430e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014311:	83 ec 0c             	sub    esp,0xc
c0014314:	6a 08                	push   0x8
c0014316:	e8 28 b5 ff ff       	call   c000f843 <malloc>
c001431b:	89 03                	mov    DWORD PTR [ebx],eax
c001431d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014323:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001432a:	83 c4 18             	add    esp,0x18
c001432d:	5b                   	pop    ebx
c001432e:	c3                   	ret    
c001432f:	90                   	nop

c0014330 <Device::removeAllChildren()>:
c0014330:	56                   	push   esi
c0014331:	53                   	push   ebx
c0014332:	52                   	push   edx
c0014333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014337:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001433d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014340:	74 17                	je     c0014359 <Device::removeAllChildren()+0x29>
c0014342:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014345:	85 c0                	test   eax,eax
c0014347:	74 0c                	je     c0014355 <Device::removeAllChildren()+0x25>
c0014349:	83 ec 0c             	sub    esp,0xc
c001434c:	8b 10                	mov    edx,DWORD PTR [eax]
c001434e:	50                   	push   eax
c001434f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014352:	83 c4 10             	add    esp,0x10
c0014355:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014357:	eb e4                	jmp    c001433d <Device::removeAllChildren()+0xd>
c0014359:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001435f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014365:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001436b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014372:	58                   	pop    eax
c0014373:	5b                   	pop    ebx
c0014374:	5e                   	pop    esi
c0014375:	c3                   	ret    

c0014376 <Device::hibernateAll()>:
c0014376:	53                   	push   ebx
c0014377:	83 ec 14             	sub    esp,0x14
c001437a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001437e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014380:	53                   	push   ebx
c0014381:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014384:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001438a:	83 c4 10             	add    esp,0x10
c001438d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014390:	74 0f                	je     c00143a1 <Device::hibernateAll()+0x2b>
c0014392:	83 ec 0c             	sub    esp,0xc
c0014395:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014398:	e8 d9 ff ff ff       	call   c0014376 <Device::hibernateAll()>
c001439d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439f:	eb e9                	jmp    c001438a <Device::hibernateAll()+0x14>
c00143a1:	83 c4 08             	add    esp,0x8
c00143a4:	5b                   	pop    ebx
c00143a5:	c3                   	ret    

c00143a6 <Device::wakeAll()>:
c00143a6:	53                   	push   ebx
c00143a7:	83 ec 14             	sub    esp,0x14
c00143aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b0:	53                   	push   ebx
c00143b1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143b4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143ba:	83 c4 10             	add    esp,0x10
c00143bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143c0:	74 0f                	je     c00143d1 <Device::wakeAll()+0x2b>
c00143c2:	83 ec 0c             	sub    esp,0xc
c00143c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143c8:	e8 d9 ff ff ff       	call   c00143a6 <Device::wakeAll()>
c00143cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143cf:	eb e9                	jmp    c00143ba <Device::wakeAll()+0x14>
c00143d1:	83 c4 08             	add    esp,0x8
c00143d4:	5b                   	pop    ebx
c00143d5:	c3                   	ret    

c00143d6 <Device::detectAll()>:
c00143d6:	53                   	push   ebx
c00143d7:	83 ec 14             	sub    esp,0x14
c00143da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e0:	53                   	push   ebx
c00143e1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143ea:	83 c4 10             	add    esp,0x10
c00143ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143f0:	74 0f                	je     c0014401 <Device::detectAll()+0x2b>
c00143f2:	83 ec 0c             	sub    esp,0xc
c00143f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143f8:	e8 d9 ff ff ff       	call   c00143d6 <Device::detectAll()>
c00143fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ff:	eb e9                	jmp    c00143ea <Device::detectAll()+0x14>
c0014401:	83 c4 08             	add    esp,0x8
c0014404:	5b                   	pop    ebx
c0014405:	c3                   	ret    

c0014406 <Device::disableLegacyAll()>:
c0014406:	53                   	push   ebx
c0014407:	83 ec 14             	sub    esp,0x14
c001440a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001440e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014410:	53                   	push   ebx
c0014411:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014414:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001441a:	83 c4 10             	add    esp,0x10
c001441d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014420:	74 0f                	je     c0014431 <Device::disableLegacyAll()+0x2b>
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014428:	e8 d9 ff ff ff       	call   c0014406 <Device::disableLegacyAll()>
c001442d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001442f:	eb e9                	jmp    c001441a <Device::disableLegacyAll()+0x14>
c0014431:	83 c4 08             	add    esp,0x8
c0014434:	5b                   	pop    ebx
c0014435:	c3                   	ret    

c0014436 <Device::loadDriversForAll()>:
c0014436:	53                   	push   ebx
c0014437:	83 ec 08             	sub    esp,0x8
c001443a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001443e:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014444:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014446:	85 db                	test   ebx,ebx
c0014448:	74 12                	je     c001445c <Device::loadDriversForAll()+0x26>
c001444a:	83 ec 0c             	sub    esp,0xc
c001444d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014450:	e8 e1 ff ff ff       	call   c0014436 <Device::loadDriversForAll()>
c0014455:	83 c4 10             	add    esp,0x10
c0014458:	89 d8                	mov    eax,ebx
c001445a:	eb e8                	jmp    c0014444 <Device::loadDriversForAll()+0xe>
c001445c:	83 c4 08             	add    esp,0x8
c001445f:	5b                   	pop    ebx
c0014460:	c3                   	ret    
c0014461:	90                   	nop

c0014462 <Device::closeAll()>:
c0014462:	53                   	push   ebx
c0014463:	83 ec 08             	sub    esp,0x8
c0014466:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001446a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001446c:	6a 00                	push   0x0
c001446e:	6a 00                	push   0x0
c0014470:	6a 00                	push   0x0
c0014472:	53                   	push   ebx
c0014473:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014476:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001447c:	83 c4 10             	add    esp,0x10
c001447f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014482:	74 0f                	je     c0014493 <Device::closeAll()+0x31>
c0014484:	83 ec 0c             	sub    esp,0xc
c0014487:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001448a:	e8 d3 ff ff ff       	call   c0014462 <Device::closeAll()>
c001448f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014491:	eb e9                	jmp    c001447c <Device::closeAll()+0x1a>
c0014493:	83 c4 08             	add    esp,0x8
c0014496:	5b                   	pop    ebx
c0014497:	c3                   	ret    

c0014498 <Device::powerSavingAll(PowerSavingLevel)>:
c0014498:	56                   	push   esi
c0014499:	53                   	push   ebx
c001449a:	83 ec 0c             	sub    esp,0xc
c001449d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144a1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144a7:	56                   	push   esi
c00144a8:	53                   	push   ebx
c00144a9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144ac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144b2:	83 c4 10             	add    esp,0x10
c00144b5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b8:	74 0f                	je     c00144c9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144ba:	52                   	push   edx
c00144bb:	52                   	push   edx
c00144bc:	56                   	push   esi
c00144bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144c0:	e8 d3 ff ff ff       	call   c0014498 <Device::powerSavingAll(PowerSavingLevel)>
c00144c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c7:	eb e9                	jmp    c00144b2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144c9:	58                   	pop    eax
c00144ca:	5b                   	pop    ebx
c00144cb:	5e                   	pop    esi
c00144cc:	c3                   	ret    
c00144cd:	90                   	nop

c00144ce <Device::setName(char const*)>:
c00144ce:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144d6:	e9 59 c3 fe ff       	jmp    c0000834 <strcpy>
c00144db:	90                   	nop

c00144dc <Device::Device(char const*)>:
c00144dc:	83 ec 1c             	sub    esp,0x1c
c00144df:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c00144e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e8:	89 10                	mov    DWORD PTR [eax],edx
c00144ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ee:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014518:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014522:	83 ec 08             	sub    esp,0x8
c0014525:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001452d:	e8 9c ff ff ff       	call   c00144ce <Device::setName(char const*)>
c0014532:	83 c4 10             	add    esp,0x10
c0014535:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001453d:	83 ec 0c             	sub    esp,0xc
c0014540:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014544:	e8 fa b2 ff ff       	call   c000f843 <malloc>
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014552:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014559:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001455d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014563:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014567:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001456d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014577:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001457d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014588:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001458f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014593:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001459a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ba:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145d2:	90                   	nop
c00145d3:	83 c4 1c             	add    esp,0x1c
c00145d6:	c3                   	ret    
c00145d7:	90                   	nop

c00145d8 <Device::getName()>:
c00145d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145dc:	05 d0 00 00 00       	add    eax,0xd0
c00145e1:	c3                   	ret    

c00145e2 <DriverlessDevice::DriverlessDevice(char const*)>:
c00145e2:	83 ec 0c             	sub    esp,0xc
c00145e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e9:	83 ec 08             	sub    esp,0x8
c00145ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145f0:	50                   	push   eax
c00145f1:	e8 e6 fe ff ff       	call   c00144dc <Device::Device(char const*)>
c00145f6:	83 c4 10             	add    esp,0x10
c00145f9:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c00145fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014602:	89 10                	mov    DWORD PTR [eax],edx
c0014604:	90                   	nop
c0014605:	83 c4 0c             	add    esp,0xc
c0014608:	c3                   	ret    
c0014609:	90                   	nop

c001460a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001460a:	57                   	push   edi
c001460b:	56                   	push   esi
c001460c:	53                   	push   ebx
c001460d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014611:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014619:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001461f:	75 0c                	jne    c001462d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014621:	52                   	push   edx
c0014622:	52                   	push   edx
c0014623:	53                   	push   ebx
c0014624:	56                   	push   esi
c0014625:	e8 80 42 01 00       	call   c00288aa <LinkedList<Device>::addElement(Device*)>
c001462a:	83 c4 10             	add    esp,0x10
c001462d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014633:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014636:	74 12                	je     c001464a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014638:	50                   	push   eax
c0014639:	57                   	push   edi
c001463a:	56                   	push   esi
c001463b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001463e:	e8 c7 ff ff ff       	call   c001460a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014643:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014645:	83 c4 10             	add    esp,0x10
c0014648:	eb e9                	jmp    c0014633 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001464a:	5b                   	pop    ebx
c001464b:	5e                   	pop    esi
c001464c:	5f                   	pop    edi
c001464d:	c3                   	ret    

c001464e <getDevicesOfType(DeviceType)>:
c001464e:	53                   	push   ebx
c001464f:	83 ec 14             	sub    esp,0x14
c0014652:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014656:	53                   	push   ebx
c0014657:	e8 2a 43 01 00       	call   c0028986 <LinkedList<Device>::LinkedList()>
c001465c:	83 c4 0c             	add    esp,0xc
c001465f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014663:	53                   	push   ebx
c0014664:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001466a:	e8 9b ff ff ff       	call   c001460a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001466f:	89 d8                	mov    eax,ebx
c0014671:	83 c4 18             	add    esp,0x18
c0014674:	5b                   	pop    ebx
c0014675:	c2 04 00             	ret    0x4

c0014678 <HardDiskController::HardDiskController(char const*)>:
c0014678:	83 ec 0c             	sub    esp,0xc
c001467b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001467f:	83 ec 08             	sub    esp,0x8
c0014682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014686:	50                   	push   eax
c0014687:	e8 50 fe ff ff       	call   c00144dc <Device::Device(char const*)>
c001468c:	83 c4 10             	add    esp,0x10
c001468f:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c0014694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014698:	89 10                	mov    DWORD PTR [eax],edx
c001469a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001469e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146a8:	90                   	nop
c00146a9:	83 c4 0c             	add    esp,0xc
c00146ac:	c3                   	ret    
c00146ad:	90                   	nop

c00146ae <HardDiskController::~HardDiskController()>:
c00146ae:	83 ec 0c             	sub    esp,0xc
c00146b1:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c00146b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ba:	89 10                	mov    DWORD PTR [eax],edx
c00146bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	50                   	push   eax
c00146c4:	e8 f5 fa ff ff       	call   c00141be <Device::~Device()>
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	90                   	nop
c00146cd:	83 c4 0c             	add    esp,0xc
c00146d0:	c3                   	ret    
c00146d1:	90                   	nop

c00146d2 <HardDiskController::~HardDiskController()>:
c00146d2:	83 ec 0c             	sub    esp,0xc
c00146d5:	83 ec 0c             	sub    esp,0xc
c00146d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146dc:	e8 cd ff ff ff       	call   c00146ae <HardDiskController::~HardDiskController()>
c00146e1:	83 c4 10             	add    esp,0x10
c00146e4:	83 ec 08             	sub    esp,0x8
c00146e7:	68 58 01 00 00       	push   0x158
c00146ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f0:	e8 f1 e6 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00146f5:	83 c4 10             	add    esp,0x10
c00146f8:	83 c4 0c             	add    esp,0xc
c00146fb:	c3                   	ret    

c00146fc <PhysicalDisk::eject()>:
c00146fc:	83 ec 18             	sub    esp,0x18
c00146ff:	68 54 ac 02 c0       	push   0xc002ac54
c0014704:	e8 bd e7 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014709:	83 c8 ff             	or     eax,0xffffffff
c001470c:	83 c4 1c             	add    esp,0x1c
c001470f:	c3                   	ret    

c0014710 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014710:	83 ec 0c             	sub    esp,0xc
c0014713:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014717:	83 ec 08             	sub    esp,0x8
c001471a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471e:	50                   	push   eax
c001471f:	e8 b8 fd ff ff       	call   c00144dc <Device::Device(char const*)>
c0014724:	83 c4 10             	add    esp,0x10
c0014727:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c001472c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014730:	89 10                	mov    DWORD PTR [eax],edx
c0014732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014736:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001473d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014741:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001475e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014768:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014772:	90                   	nop
c0014773:	83 c4 0c             	add    esp,0xc
c0014776:	c3                   	ret    
c0014777:	90                   	nop

c0014778 <PhysicalDisk::startCache()>:
c0014778:	56                   	push   esi
c0014779:	53                   	push   ebx
c001477a:	83 ec 10             	sub    esp,0x10
c001477d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014781:	6a 44                	push   0x44
c0014783:	e8 bb b0 ff ff       	call   c000f843 <malloc>
c0014788:	89 c6                	mov    esi,eax
c001478a:	58                   	pop    eax
c001478b:	5a                   	pop    edx
c001478c:	53                   	push   ebx
c001478d:	56                   	push   esi
c001478e:	e8 29 27 00 00       	call   c0016ebc <VCache::VCache(PhysicalDisk*)>
c0014793:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014799:	83 c4 14             	add    esp,0x14
c001479c:	5b                   	pop    ebx
c001479d:	5e                   	pop    esi
c001479e:	c3                   	ret    
c001479f:	90                   	nop

c00147a0 <PhysicalDisk::~PhysicalDisk()>:
c00147a0:	83 ec 0c             	sub    esp,0xc
c00147a3:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c00147a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ac:	89 10                	mov    DWORD PTR [eax],edx
c00147ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b2:	83 ec 0c             	sub    esp,0xc
c00147b5:	50                   	push   eax
c00147b6:	e8 03 fa ff ff       	call   c00141be <Device::~Device()>
c00147bb:	83 c4 10             	add    esp,0x10
c00147be:	90                   	nop
c00147bf:	83 c4 0c             	add    esp,0xc
c00147c2:	c3                   	ret    
c00147c3:	90                   	nop

c00147c4 <PhysicalDisk::~PhysicalDisk()>:
c00147c4:	83 ec 0c             	sub    esp,0xc
c00147c7:	83 ec 0c             	sub    esp,0xc
c00147ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ce:	e8 cd ff ff ff       	call   c00147a0 <PhysicalDisk::~PhysicalDisk()>
c00147d3:	83 c4 10             	add    esp,0x10
c00147d6:	83 ec 08             	sub    esp,0x8
c00147d9:	68 6c 01 00 00       	push   0x16c
c00147de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e2:	e8 ff e5 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00147e7:	83 c4 10             	add    esp,0x10
c00147ea:	83 c4 0c             	add    esp,0xc
c00147ed:	c3                   	ret    

c00147ee <FPU::FPU(char const*)>:
c00147ee:	83 ec 0c             	sub    esp,0xc
c00147f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f5:	83 ec 08             	sub    esp,0x8
c00147f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147fc:	50                   	push   eax
c00147fd:	e8 da fc ff ff       	call   c00144dc <Device::Device(char const*)>
c0014802:	83 c4 10             	add    esp,0x10
c0014805:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c001480a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001480e:	89 10                	mov    DWORD PTR [eax],edx
c0014810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014814:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001481e:	90                   	nop
c001481f:	83 c4 0c             	add    esp,0xc
c0014822:	c3                   	ret    
c0014823:	90                   	nop

c0014824 <FPU::~FPU()>:
c0014824:	83 ec 0c             	sub    esp,0xc
c0014827:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c001482c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014830:	89 10                	mov    DWORD PTR [eax],edx
c0014832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014836:	83 ec 0c             	sub    esp,0xc
c0014839:	50                   	push   eax
c001483a:	e8 7f f9 ff ff       	call   c00141be <Device::~Device()>
c001483f:	83 c4 10             	add    esp,0x10
c0014842:	90                   	nop
c0014843:	83 c4 0c             	add    esp,0xc
c0014846:	c3                   	ret    
c0014847:	90                   	nop

c0014848 <FPU::~FPU()>:
c0014848:	83 ec 0c             	sub    esp,0xc
c001484b:	83 ec 0c             	sub    esp,0xc
c001484e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014852:	e8 cd ff ff ff       	call   c0014824 <FPU::~FPU()>
c0014857:	83 c4 10             	add    esp,0x10
c001485a:	83 ec 08             	sub    esp,0x8
c001485d:	68 58 01 00 00       	push   0x158
c0014862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014866:	e8 7b e5 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c001486b:	83 c4 10             	add    esp,0x10
c001486e:	83 c4 0c             	add    esp,0xc
c0014871:	c3                   	ret    

c0014872 <setupFPU()>:
c0014872:	53                   	push   ebx
c0014873:	83 ec 08             	sub    esp,0x8
c0014876:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c001487c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014883:	74 19                	je     c001489e <setupFPU()+0x2c>
c0014885:	83 ec 0c             	sub    esp,0xc
c0014888:	68 58 01 00 00       	push   0x158
c001488d:	e8 b1 af ff ff       	call   c000f843 <malloc>
c0014892:	89 c3                	mov    ebx,eax
c0014894:	89 04 24             	mov    DWORD PTR [esp],eax
c0014897:	e8 5c 0c 01 00       	call   c00254f8 <AVX::AVX()>
c001489c:	eb 5b                	jmp    c00148f9 <setupFPU()+0x87>
c001489e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148a4:	84 c0                	test   al,al
c00148a6:	79 19                	jns    c00148c1 <setupFPU()+0x4f>
c00148a8:	83 ec 0c             	sub    esp,0xc
c00148ab:	68 58 01 00 00       	push   0x158
c00148b0:	e8 8e af ff ff       	call   c000f843 <malloc>
c00148b5:	89 c3                	mov    ebx,eax
c00148b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00148ba:	e8 5f 0d 01 00       	call   c002561e <SSE::SSE()>
c00148bf:	eb 38                	jmp    c00148f9 <setupFPU()+0x87>
c00148c1:	a8 20                	test   al,0x20
c00148c3:	74 19                	je     c00148de <setupFPU()+0x6c>
c00148c5:	83 ec 0c             	sub    esp,0xc
c00148c8:	68 58 01 00 00       	push   0x158
c00148cd:	e8 71 af ff ff       	call   c000f843 <malloc>
c00148d2:	89 c3                	mov    ebx,eax
c00148d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00148d7:	e8 ac 0c 01 00       	call   c0025588 <MMX::MMX()>
c00148dc:	eb 1b                	jmp    c00148f9 <setupFPU()+0x87>
c00148de:	a8 10                	test   al,0x10
c00148e0:	74 1c                	je     c00148fe <setupFPU()+0x8c>
c00148e2:	83 ec 0c             	sub    esp,0xc
c00148e5:	68 58 01 00 00       	push   0x158
c00148ea:	e8 54 af ff ff       	call   c000f843 <malloc>
c00148ef:	89 c3                	mov    ebx,eax
c00148f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00148f4:	e8 b3 0d 01 00       	call   c00256ac <x87::x87()>
c00148f9:	83 c4 10             	add    esp,0x10
c00148fc:	eb 24                	jmp    c0014922 <setupFPU()+0xb0>
c00148fe:	83 e0 ef             	and    eax,0xffffffef
c0014901:	83 ec 0c             	sub    esp,0xc
c0014904:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001490a:	68 b4 ac 02 c0       	push   0xc002acb4
c001490f:	e8 b2 e5 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014914:	0f 20 c0             	mov    eax,cr0
c0014917:	83 c8 04             	or     eax,0x4
c001491a:	0f 22 c0             	mov    cr0,eax
c001491d:	31 db                	xor    ebx,ebx
c001491f:	83 c4 10             	add    esp,0x10
c0014922:	89 d8                	mov    eax,ebx
c0014924:	83 c4 08             	add    esp,0x8
c0014927:	5b                   	pop    ebx
c0014928:	c3                   	ret    
c0014929:	90                   	nop

c001492a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001492a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001492e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014932:	c1 e0 04             	shl    eax,0x4
c0014935:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014939:	8d 50 10             	lea    edx,[eax+0x10]
c001493c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014942:	74 08                	je     c001494c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014944:	83 c0 04             	add    eax,0x4
c0014947:	39 d0                	cmp    eax,edx
c0014949:	75 f1                	jne    c001493c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001494b:	c3                   	ret    
c001494c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014956:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014960:	eb e2                	jmp    c0014944 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014962 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014962:	57                   	push   edi
c0014963:	31 c0                	xor    eax,eax
c0014965:	56                   	push   esi
c0014966:	53                   	push   ebx
c0014967:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001496b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001496f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014973:	89 da                	mov    edx,ebx
c0014975:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014979:	c1 e2 04             	shl    edx,0x4
c001497c:	01 ca                	add    edx,ecx
c001497e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014986:	74 16                	je     c001499e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014988:	40                   	inc    eax
c0014989:	83 f8 04             	cmp    eax,0x4
c001498c:	75 f0                	jne    c001497e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001498e:	c7 44 24 10 f8 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002acf8
c0014996:	5b                   	pop    ebx
c0014997:	5e                   	pop    esi
c0014998:	5f                   	pop    edi
c0014999:	e9 cd 5b 00 00       	jmp    c001a56b <Krnl::panic(char const*)>
c001499e:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149a1:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149a4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149aa:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149b0:	5b                   	pop    ebx
c00149b1:	5e                   	pop    esi
c00149b2:	5f                   	pop    edi
c00149b3:	c3                   	ret    

c00149b4 <doubleFault(regs*, void*)>:
c00149b4:	55                   	push   ebp
c00149b5:	89 e5                	mov    ebp,esp
c00149b7:	83 ec 08             	sub    esp,0x8
c00149ba:	83 ec 0c             	sub    esp,0xc
c00149bd:	68 33 ad 02 c0       	push   0xc002ad33
c00149c2:	e8 a4 5b 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	90                   	nop
c00149cb:	c9                   	leave  
c00149cc:	c3                   	ret    
c00149cd:	90                   	nop

c00149ce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149ce:	56                   	push   esi
c00149cf:	53                   	push   ebx
c00149d0:	50                   	push   eax
c00149d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149d9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149de:	75 35                	jne    c0014a15 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149e0:	8d 43 20             	lea    eax,[ebx+0x20]
c00149e3:	31 d2                	xor    edx,edx
c00149e5:	89 c1                	mov    ecx,eax
c00149e7:	c1 e1 04             	shl    ecx,0x4
c00149ea:	01 f1                	add    ecx,esi
c00149ec:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149f4:	74 3e                	je     c0014a34 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149f6:	42                   	inc    edx
c00149f7:	83 fa 04             	cmp    edx,0x4
c00149fa:	75 f0                	jne    c00149ec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149fc:	83 ec 0c             	sub    esp,0xc
c00149ff:	68 78 ad 02 c0       	push   0xc002ad78
c0014a04:	e8 62 5b 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0014a09:	83 c4 10             	add    esp,0x10
c0014a0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a11:	5a                   	pop    edx
c0014a12:	5b                   	pop    ebx
c0014a13:	5e                   	pop    esi
c0014a14:	c3                   	ret    
c0014a15:	83 ec 0c             	sub    esp,0xc
c0014a18:	56                   	push   esi
c0014a19:	e8 ba fb ff ff       	call   c00145d8 <Device::getName()>
c0014a1e:	83 c4 10             	add    esp,0x10
c0014a21:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a24:	75 ba                	jne    c00149e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a26:	83 fb 0f             	cmp    ebx,0xf
c0014a29:	7f 29                	jg     c0014a54 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a2b:	0f b6 9b e0 d5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2a20]
c0014a32:	eb ac                	jmp    c00149e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a34:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a3b:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a3e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a48:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a4e:	89 d8                	mov    eax,ebx
c0014a50:	5a                   	pop    edx
c0014a51:	5b                   	pop    ebx
c0014a52:	5e                   	pop    esi
c0014a53:	c3                   	ret    
c0014a54:	83 ec 0c             	sub    esp,0xc
c0014a57:	68 40 ad 02 c0       	push   0xc002ad40
c0014a5c:	e8 0a 5b 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0014a61:	83 c4 10             	add    esp,0x10
c0014a64:	e9 77 ff ff ff       	jmp    c00149e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a69:	90                   	nop

c0014a6a <InterruptController::clearAllHandlers(int, bool)>:
c0014a6a:	56                   	push   esi
c0014a6b:	53                   	push   ebx
c0014a6c:	52                   	push   edx
c0014a6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a75:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a7a:	75 61                	jne    c0014add <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a7c:	8d 46 20             	lea    eax,[esi+0x20]
c0014a7f:	c1 e6 04             	shl    esi,0x4
c0014a82:	c1 e0 04             	shl    eax,0x4
c0014a85:	01 de                	add    esi,ebx
c0014a87:	01 d8                	add    eax,ebx
c0014a89:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a93:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a9d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014aa7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014ab1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014abb:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014ac5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014acf:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014ad9:	58                   	pop    eax
c0014ada:	5b                   	pop    ebx
c0014adb:	5e                   	pop    esi
c0014adc:	c3                   	ret    
c0014add:	83 ec 0c             	sub    esp,0xc
c0014ae0:	53                   	push   ebx
c0014ae1:	e8 f2 fa ff ff       	call   c00145d8 <Device::getName()>
c0014ae6:	83 c4 10             	add    esp,0x10
c0014ae9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014aec:	75 8e                	jne    c0014a7c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014aee:	83 fe 0f             	cmp    esi,0xf
c0014af1:	7f 09                	jg     c0014afc <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014af3:	0f b6 b6 e0 d5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2a20]
c0014afa:	eb 80                	jmp    c0014a7c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014afc:	83 ec 0c             	sub    esp,0xc
c0014aff:	68 b4 ad 02 c0       	push   0xc002adb4
c0014b04:	e8 62 5a 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0014b09:	83 c4 10             	add    esp,0x10
c0014b0c:	e9 6b ff ff ff       	jmp    c0014a7c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b11:	90                   	nop

c0014b12 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b12:	56                   	push   esi
c0014b13:	53                   	push   ebx
c0014b14:	52                   	push   edx
c0014b15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b1d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b22:	75 3a                	jne    c0014b5e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b28:	8d 50 20             	lea    edx,[eax+0x20]
c0014b2b:	c1 e2 04             	shl    edx,0x4
c0014b2e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b31:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b35:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b3b:	74 0b                	je     c0014b48 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b3d:	83 c0 04             	add    eax,0x4
c0014b40:	39 d0                	cmp    eax,edx
c0014b42:	75 f1                	jne    c0014b35 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b44:	58                   	pop    eax
c0014b45:	5b                   	pop    ebx
c0014b46:	5e                   	pop    esi
c0014b47:	c3                   	ret    
c0014b48:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b52:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b5c:	eb df                	jmp    c0014b3d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b5e:	83 ec 0c             	sub    esp,0xc
c0014b61:	56                   	push   esi
c0014b62:	e8 71 fa ff ff       	call   c00145d8 <Device::getName()>
c0014b67:	83 c4 10             	add    esp,0x10
c0014b6a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b6d:	75 b5                	jne    c0014b24 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b6f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b74:	7f 11                	jg     c0014b87 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b7a:	0f b6 80 e0 d5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2a20]
c0014b81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b85:	eb 9d                	jmp    c0014b24 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b87:	83 ec 0c             	sub    esp,0xc
c0014b8a:	68 b4 ad 02 c0       	push   0xc002adb4
c0014b8f:	e8 d7 59 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	eb 8b                	jmp    c0014b24 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b99 <nmiHandler(regs*, void*)>:
c0014b99:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014b9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ba2:	e9 e5 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014ba7 <int_handler>:
c0014ba7:	55                   	push   ebp
c0014ba8:	57                   	push   edi
c0014ba9:	56                   	push   esi
c0014baa:	53                   	push   ebx
c0014bab:	83 ec 0c             	sub    esp,0xc
c0014bae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bb2:	80 3d 24 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031124,0x0
c0014bb9:	74 0b                	je     c0014bc6 <int_handler+0x1f>
c0014bbb:	fa                   	cli    
c0014bbc:	f4                   	hlt    
c0014bbd:	80 3d 24 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031124,0x0
c0014bc4:	75 f5                	jne    c0014bbb <int_handler+0x14>
c0014bc6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0014bcb:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014bce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bd4:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014bda:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bdd:	83 f8 17             	cmp    eax,0x17
c0014be0:	77 13                	ja     c0014bf5 <int_handler+0x4e>
c0014be2:	83 ec 08             	sub    esp,0x8
c0014be5:	8b 17                	mov    edx,DWORD PTR [edi]
c0014be7:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bea:	0f b6 c0             	movzx  eax,al
c0014bed:	50                   	push   eax
c0014bee:	57                   	push   edi
c0014bef:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bf2:	83 c4 10             	add    esp,0x10
c0014bf5:	83 c3 15             	add    ebx,0x15
c0014bf8:	c1 e3 04             	shl    ebx,0x4
c0014bfb:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014bff:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c06:	31 db                	xor    ebx,ebx
c0014c08:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c0c:	85 c0                	test   eax,eax
c0014c0e:	74 13                	je     c0014c23 <int_handler+0x7c>
c0014c10:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c13:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c17:	74 1c                	je     c0014c35 <int_handler+0x8e>
c0014c19:	83 ec 08             	sub    esp,0x8
c0014c1c:	52                   	push   edx
c0014c1d:	56                   	push   esi
c0014c1e:	ff d0                	call   eax
c0014c20:	83 c4 10             	add    esp,0x10
c0014c23:	43                   	inc    ebx
c0014c24:	83 fb 04             	cmp    ebx,0x4
c0014c27:	75 df                	jne    c0014c08 <int_handler+0x61>
c0014c29:	83 c4 0c             	add    esp,0xc
c0014c2c:	31 c0                	xor    eax,eax
c0014c2e:	5b                   	pop    ebx
c0014c2f:	31 d2                	xor    edx,edx
c0014c31:	5e                   	pop    esi
c0014c32:	5f                   	pop    edi
c0014c33:	5d                   	pop    ebp
c0014c34:	c3                   	ret    
c0014c35:	83 ec 08             	sub    esp,0x8
c0014c38:	52                   	push   edx
c0014c39:	56                   	push   esi
c0014c3a:	ff d0                	call   eax
c0014c3c:	83 c4 10             	add    esp,0x10
c0014c3f:	83 c4 0c             	add    esp,0xc
c0014c42:	5b                   	pop    ebx
c0014c43:	5e                   	pop    esi
c0014c44:	5f                   	pop    edi
c0014c45:	5d                   	pop    ebp
c0014c46:	c3                   	ret    
c0014c47:	90                   	nop

c0014c48 <InterruptController::InterruptController(char const*)>:
c0014c48:	83 ec 1c             	sub    esp,0x1c
c0014c4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c4f:	83 ec 08             	sub    esp,0x8
c0014c52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c56:	50                   	push   eax
c0014c57:	e8 80 f8 ff ff       	call   c00144dc <Device::Device(char const*)>
c0014c5c:	83 c4 10             	add    esp,0x10
c0014c5f:	ba 54 b0 02 c0       	mov    edx,0xc002b054
c0014c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c68:	89 10                	mov    DWORD PTR [eax],edx
c0014c6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c6e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c80:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c88:	7f 5e                	jg     c0014ce8 <InterruptController::InterruptController(char const*)+0xa0>
c0014c8a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c92:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c97:	7f 49                	jg     c0014ce2 <InterruptController::InterruptController(char const*)+0x9a>
c0014c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ca1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014ca8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cac:	01 ca                	add    edx,ecx
c0014cae:	83 c2 54             	add    edx,0x54
c0014cb1:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cc1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ccc:	01 ca                	add    edx,ecx
c0014cce:	81 c2 54 04 00 00    	add    edx,0x454
c0014cd4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cdc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014ce0:	eb b0                	jmp    c0014c92 <InterruptController::InterruptController(char const*)+0x4a>
c0014ce2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014ce6:	eb 98                	jmp    c0014c80 <InterruptController::InterruptController(char const*)+0x38>
c0014ce8:	90                   	nop
c0014ce9:	83 c4 1c             	add    esp,0x1c
c0014cec:	c3                   	ret    
c0014ced:	90                   	nop

c0014cee <InterruptController::~InterruptController()>:
c0014cee:	83 ec 0c             	sub    esp,0xc
c0014cf1:	ba 54 b0 02 c0       	mov    edx,0xc002b054
c0014cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cfa:	89 10                	mov    DWORD PTR [eax],edx
c0014cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d00:	83 ec 0c             	sub    esp,0xc
c0014d03:	50                   	push   eax
c0014d04:	e8 b5 f4 ff ff       	call   c00141be <Device::~Device()>
c0014d09:	83 c4 10             	add    esp,0x10
c0014d0c:	90                   	nop
c0014d0d:	83 c4 0c             	add    esp,0xc
c0014d10:	c3                   	ret    
c0014d11:	90                   	nop

c0014d12 <InterruptController::~InterruptController()>:
c0014d12:	83 ec 0c             	sub    esp,0xc
c0014d15:	83 ec 0c             	sub    esp,0xc
c0014d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d1c:	e8 cd ff ff ff       	call   c0014cee <InterruptController::~InterruptController()>
c0014d21:	83 c4 10             	add    esp,0x10
c0014d24:	83 ec 08             	sub    esp,0x8
c0014d27:	68 58 21 00 00       	push   0x2158
c0014d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d30:	e8 b1 e0 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0014d35:	83 c4 10             	add    esp,0x10
c0014d38:	83 c4 0c             	add    esp,0xc
c0014d3b:	c3                   	ret    

c0014d3c <displayDebugInfo(regs*)>:
c0014d3c:	55                   	push   ebp
c0014d3d:	57                   	push   edi
c0014d3e:	56                   	push   esi
c0014d3f:	53                   	push   ebx
c0014d40:	83 ec 24             	sub    esp,0x24
c0014d43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d47:	0f 20 c2             	mov    edx,cr0
c0014d4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d4e:	0f 20 d7             	mov    edi,cr2
c0014d51:	0f 20 de             	mov    esi,cr3
c0014d54:	0f 20 e5             	mov    ebp,cr4
c0014d57:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d5a:	68 ee ad 02 c0       	push   0xc002adee
c0014d5f:	e8 62 e1 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014d64:	59                   	pop    ecx
c0014d65:	58                   	pop    eax
c0014d66:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d69:	68 f9 ad 02 c0       	push   0xc002adf9
c0014d6e:	e8 53 e1 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014d73:	58                   	pop    eax
c0014d74:	5a                   	pop    edx
c0014d75:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d78:	68 04 ae 02 c0       	push   0xc002ae04
c0014d7d:	e8 44 e1 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014d82:	59                   	pop    ecx
c0014d83:	58                   	pop    eax
c0014d84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d87:	68 0f ae 02 c0       	push   0xc002ae0f
c0014d8c:	e8 35 e1 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014d91:	58                   	pop    eax
c0014d92:	5a                   	pop    edx
c0014d93:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d96:	68 1a ae 02 c0       	push   0xc002ae1a
c0014d9b:	e8 26 e1 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014da0:	59                   	pop    ecx
c0014da1:	58                   	pop    eax
c0014da2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014da5:	68 25 ae 02 c0       	push   0xc002ae25
c0014daa:	e8 17 e1 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014daf:	58                   	pop    eax
c0014db0:	5a                   	pop    edx
c0014db1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014db4:	68 30 ae 02 c0       	push   0xc002ae30
c0014db9:	e8 08 e1 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014dbe:	59                   	pop    ecx
c0014dbf:	58                   	pop    eax
c0014dc0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014dc3:	68 3b ae 02 c0       	push   0xc002ae3b
c0014dc8:	e8 f9 e0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014dcd:	58                   	pop    eax
c0014dce:	5a                   	pop    edx
c0014dcf:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dd2:	68 46 ae 02 c0       	push   0xc002ae46
c0014dd7:	e8 ea e0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014ddc:	59                   	pop    ecx
c0014ddd:	58                   	pop    eax
c0014dde:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014de1:	68 55 ae 02 c0       	push   0xc002ae55
c0014de6:	e8 db e0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014deb:	58                   	pop    eax
c0014dec:	5a                   	pop    edx
c0014ded:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014df0:	68 60 ae 02 c0       	push   0xc002ae60
c0014df5:	e8 cc e0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014dfa:	59                   	pop    ecx
c0014dfb:	58                   	pop    eax
c0014dfc:	57                   	push   edi
c0014dfd:	68 6b ae 02 c0       	push   0xc002ae6b
c0014e02:	e8 bf e0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014e07:	58                   	pop    eax
c0014e08:	5a                   	pop    edx
c0014e09:	56                   	push   esi
c0014e0a:	68 76 ae 02 c0       	push   0xc002ae76
c0014e0f:	e8 b2 e0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0014e14:	59                   	pop    ecx
c0014e15:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e1a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e20:	e8 08 bf ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c0014e25:	58                   	pop    eax
c0014e26:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e29:	5a                   	pop    edx
c0014e2a:	c1 e0 05             	shl    eax,0x5
c0014e2d:	05 40 d3 02 c0       	add    eax,0xc002d340
c0014e32:	50                   	push   eax
c0014e33:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e38:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e3e:	e8 09 c3 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014e43:	59                   	pop    ecx
c0014e44:	58                   	pop    eax
c0014e45:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e4a:	68 81 ae 02 c0       	push   0xc002ae81
c0014e4f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e55:	e8 f2 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014e5a:	58                   	pop    eax
c0014e5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e60:	5a                   	pop    edx
c0014e61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e64:	83 c0 0c             	add    eax,0xc
c0014e67:	50                   	push   eax
c0014e68:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e6d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e73:	e8 d4 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014e78:	59                   	pop    ecx
c0014e79:	58                   	pop    eax
c0014e7a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e7f:	68 8a ae 02 c0       	push   0xc002ae8a
c0014e84:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e8a:	e8 bd c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014e8f:	58                   	pop    eax
c0014e90:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014e95:	5a                   	pop    edx
c0014e96:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e99:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e9f:	e8 ce c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014ea4:	59                   	pop    ecx
c0014ea5:	58                   	pop    eax
c0014ea6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014eab:	68 92 ae 02 c0       	push   0xc002ae92
c0014eb0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eb6:	e8 91 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014ebb:	58                   	pop    eax
c0014ebc:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ec1:	5a                   	pop    edx
c0014ec2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ec5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ecb:	e8 a2 c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014ed0:	59                   	pop    ecx
c0014ed1:	58                   	pop    eax
c0014ed2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ed7:	68 9a ae 02 c0       	push   0xc002ae9a
c0014edc:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ee2:	e8 65 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014ee7:	58                   	pop    eax
c0014ee8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014eed:	5a                   	pop    edx
c0014eee:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ef1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ef7:	e8 76 c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014efc:	59                   	pop    ecx
c0014efd:	58                   	pop    eax
c0014efe:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f03:	68 a2 ae 02 c0       	push   0xc002aea2
c0014f08:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f0e:	e8 39 c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f13:	58                   	pop    eax
c0014f14:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f19:	5a                   	pop    edx
c0014f1a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f1d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f23:	e8 4a c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014f28:	59                   	pop    ecx
c0014f29:	58                   	pop    eax
c0014f2a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f2f:	68 aa ae 02 c0       	push   0xc002aeaa
c0014f34:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f3a:	e8 0d c2 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f3f:	58                   	pop    eax
c0014f40:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f45:	5a                   	pop    edx
c0014f46:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f49:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f4f:	e8 1e c2 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014f54:	59                   	pop    ecx
c0014f55:	58                   	pop    eax
c0014f56:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f5b:	68 b2 ae 02 c0       	push   0xc002aeb2
c0014f60:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f66:	e8 e1 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f6b:	58                   	pop    eax
c0014f6c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f71:	5a                   	pop    edx
c0014f72:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f75:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f7b:	e8 f2 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014f80:	59                   	pop    ecx
c0014f81:	58                   	pop    eax
c0014f82:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f87:	68 ba ae 02 c0       	push   0xc002aeba
c0014f8c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f92:	e8 b5 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014f97:	58                   	pop    eax
c0014f98:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014f9d:	5a                   	pop    edx
c0014f9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fa2:	52                   	push   edx
c0014fa3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fa9:	e8 c4 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014fae:	59                   	pop    ecx
c0014faf:	58                   	pop    eax
c0014fb0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fb5:	68 c3 ae 02 c0       	push   0xc002aec3
c0014fba:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fc0:	e8 87 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014fc5:	58                   	pop    eax
c0014fc6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fcb:	5a                   	pop    edx
c0014fcc:	57                   	push   edi
c0014fcd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fd3:	e8 9a c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0014fd8:	59                   	pop    ecx
c0014fd9:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014fde:	5f                   	pop    edi
c0014fdf:	68 cb ae 02 c0       	push   0xc002aecb
c0014fe4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fea:	e8 5d c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0014fef:	58                   	pop    eax
c0014ff0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0014ff5:	5a                   	pop    edx
c0014ff6:	56                   	push   esi
c0014ff7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ffd:	e8 70 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015002:	59                   	pop    ecx
c0015003:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015008:	5e                   	pop    esi
c0015009:	68 d3 ae 02 c0       	push   0xc002aed3
c001500e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015014:	e8 33 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015019:	5f                   	pop    edi
c001501a:	58                   	pop    eax
c001501b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015020:	55                   	push   ebp
c0015021:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015027:	e8 46 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001502c:	58                   	pop    eax
c001502d:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015032:	5a                   	pop    edx
c0015033:	68 db ae 02 c0       	push   0xc002aedb
c0015038:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001503e:	e8 09 c1 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015043:	0f 21 c0             	mov    eax,db0
c0015046:	59                   	pop    ecx
c0015047:	5e                   	pop    esi
c0015048:	50                   	push   eax
c0015049:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001504e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015054:	e8 19 c1 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015059:	5f                   	pop    edi
c001505a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001505f:	5d                   	pop    ebp
c0015060:	68 e4 ae 02 c0       	push   0xc002aee4
c0015065:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001506b:	e8 dc c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015070:	0f 21 c8             	mov    eax,db1
c0015073:	5a                   	pop    edx
c0015074:	59                   	pop    ecx
c0015075:	50                   	push   eax
c0015076:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001507b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015081:	e8 ec c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c0015086:	5e                   	pop    esi
c0015087:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001508c:	5f                   	pop    edi
c001508d:	68 ec ae 02 c0       	push   0xc002aeec
c0015092:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015098:	e8 af c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001509d:	0f 21 d0             	mov    eax,db2
c00150a0:	5d                   	pop    ebp
c00150a1:	5a                   	pop    edx
c00150a2:	50                   	push   eax
c00150a3:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150a8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150ae:	e8 bf c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00150b3:	59                   	pop    ecx
c00150b4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150b9:	5e                   	pop    esi
c00150ba:	68 f4 ae 02 c0       	push   0xc002aef4
c00150bf:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150c5:	e8 82 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c00150ca:	0f 21 d8             	mov    eax,db3
c00150cd:	5f                   	pop    edi
c00150ce:	5d                   	pop    ebp
c00150cf:	50                   	push   eax
c00150d0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150d5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150db:	e8 92 c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00150e0:	58                   	pop    eax
c00150e1:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00150e6:	5a                   	pop    edx
c00150e7:	68 fc ae 02 c0       	push   0xc002aefc
c00150ec:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150f2:	e8 55 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c00150f7:	0f 21 f0             	mov    eax,db6
c00150fa:	59                   	pop    ecx
c00150fb:	5e                   	pop    esi
c00150fc:	50                   	push   eax
c00150fd:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015102:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015108:	e8 65 c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001510d:	5f                   	pop    edi
c001510e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015113:	5d                   	pop    ebp
c0015114:	68 04 af 02 c0       	push   0xc002af04
c0015119:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001511f:	e8 28 c0 ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015124:	0f 21 f8             	mov    eax,db7
c0015127:	5a                   	pop    edx
c0015128:	59                   	pop    ecx
c0015129:	50                   	push   eax
c001512a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001512f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015135:	e8 38 c0 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001513a:	5e                   	pop    esi
c001513b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001513e:	e8 0a 85 00 00       	call   c001d64d <Thr::getDriverNameFromAddress(unsigned long)>
c0015143:	83 c4 10             	add    esp,0x10
c0015146:	85 c0                	test   eax,eax
c0015148:	74 7d                	je     c00151c7 <displayDebugInfo(regs*)+0x48b>
c001514a:	89 c6                	mov    esi,eax
c001514c:	50                   	push   eax
c001514d:	50                   	push   eax
c001514e:	56                   	push   esi
c001514f:	68 0c af 02 c0       	push   0xc002af0c
c0015154:	e8 6d dd ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0015159:	5a                   	pop    edx
c001515a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001515f:	59                   	pop    ecx
c0015160:	68 1a af 02 c0       	push   0xc002af1a
c0015165:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001516b:	e8 dc bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015170:	5f                   	pop    edi
c0015171:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015176:	5d                   	pop    ebp
c0015177:	56                   	push   esi
c0015178:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001517e:	e8 c9 bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c0015183:	58                   	pop    eax
c0015184:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0015189:	5a                   	pop    edx
c001518a:	68 26 af 02 c0       	push   0xc002af26
c001518f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015195:	e8 b2 bf ff ff       	call   c001114c <VgaText::puts(char const*)>
c001519a:	59                   	pop    ecx
c001519b:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c00151a0:	8b b8 26 19 00 00    	mov    edi,DWORD PTR [eax+0x1926]
c00151a6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151a9:	e8 d6 84 00 00       	call   c001d684 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151ae:	5b                   	pop    ebx
c00151af:	5d                   	pop    ebp
c00151b0:	50                   	push   eax
c00151b1:	57                   	push   edi
c00151b2:	e8 bb bf ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c00151b7:	58                   	pop    eax
c00151b8:	5a                   	pop    edx
c00151b9:	56                   	push   esi
c00151ba:	68 32 af 02 c0       	push   0xc002af32
c00151bf:	e8 02 dd ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	fa                   	cli    
c00151c8:	f4                   	hlt    
c00151c9:	eb fe                	jmp    c00151c9 <displayDebugInfo(regs*)+0x48d>

c00151cb <x87EmulHandler(regs*, void*)>:
c00151cb:	53                   	push   ebx
c00151cc:	83 ec 14             	sub    esp,0x14
c00151cf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151d3:	53                   	push   ebx
c00151d4:	e8 4d a8 00 00       	call   c001fa26 <Vm::x87Handler(regs*)>
c00151d9:	83 c4 10             	add    esp,0x10
c00151dc:	84 c0                	test   al,al
c00151de:	74 05                	je     c00151e5 <x87EmulHandler(regs*, void*)+0x1a>
c00151e0:	83 c4 08             	add    esp,0x8
c00151e3:	5b                   	pop    ebx
c00151e4:	c3                   	ret    
c00151e5:	83 ec 0c             	sub    esp,0xc
c00151e8:	68 42 af 02 c0       	push   0xc002af42
c00151ed:	e8 d4 dc ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00151f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151f5:	e8 42 fb ff ff       	call   c0014d3c <displayDebugInfo(regs*)>

c00151fa <gpFault(regs*, void*)>:
c00151fa:	53                   	push   ebx
c00151fb:	83 ec 14             	sub    esp,0x14
c00151fe:	c7 05 70 e7 02 c0 75 ed 01 c0 	mov    DWORD PTR ds:0xc002e770,0xc001ed75
c0015208:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001520c:	53                   	push   ebx
c001520d:	e8 63 9b 00 00       	call   c001ed75 <Vm::faultHandler(regs*)>
c0015212:	83 c4 10             	add    esp,0x10
c0015215:	84 c0                	test   al,al
c0015217:	74 05                	je     c001521e <gpFault(regs*, void*)+0x24>
c0015219:	83 c4 08             	add    esp,0x8
c001521c:	5b                   	pop    ebx
c001521d:	c3                   	ret    
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	68 58 af 02 c0       	push   0xc002af58
c0015226:	e8 9b dc ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001522b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001522e:	e8 09 fb ff ff       	call   c0014d3c <displayDebugInfo(regs*)>

c0015233 <pgFault(regs*, void*)>:
c0015233:	83 ec 14             	sub    esp,0x14
c0015236:	0f 20 d0             	mov    eax,cr2
c0015239:	50                   	push   eax
c001523a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001523f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015242:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c0015248:	e8 9f d8 ff ff       	call   c0012aec <VAS::tryLoadBackOffDisk(unsigned long)>
c001524d:	83 c4 10             	add    esp,0x10
c0015250:	84 c0                	test   al,al
c0015252:	74 04                	je     c0015258 <pgFault(regs*, void*)+0x25>
c0015254:	83 c4 0c             	add    esp,0xc
c0015257:	c3                   	ret    
c0015258:	83 ec 0c             	sub    esp,0xc
c001525b:	68 73 af 02 c0       	push   0xc002af73
c0015260:	e8 61 dc ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0015265:	58                   	pop    eax
c0015266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001526a:	e8 cd fa ff ff       	call   c0014d3c <displayDebugInfo(regs*)>

c001526f <otherISRHandler(regs*, void*)>:
c001526f:	53                   	push   ebx
c0015270:	83 ec 0c             	sub    esp,0xc
c0015273:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015277:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001527a:	50                   	push   eax
c001527b:	50                   	push   eax
c001527c:	68 85 af 02 c0       	push   0xc002af85
c0015281:	e8 40 dc ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0015286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015289:	e8 ae fa ff ff       	call   c0014d3c <displayDebugInfo(regs*)>

c001528e <opcodeFault(regs*, void*)>:
c001528e:	55                   	push   ebp
c001528f:	89 e5                	mov    ebp,esp
c0015291:	56                   	push   esi
c0015292:	53                   	push   ebx
c0015293:	83 ec 40             	sub    esp,0x40
c0015296:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001529b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152a1:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00152a7:	84 c0                	test   al,al
c00152a9:	74 24                	je     c00152cf <opcodeFault(regs*, void*)+0x41>
c00152ab:	83 ec 0c             	sub    esp,0xc
c00152ae:	68 a4 af 02 c0       	push   0xc002afa4
c00152b3:	e8 0e dc ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00152b8:	83 c4 10             	add    esp,0x10
c00152bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c1:	8d 50 19             	lea    edx,[eax+0x19]
c00152c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ca:	e9 be 05 00 00       	jmp    c001588d <opcodeFault(regs*, void*)+0x5ff>
c00152cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152d8:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152dc:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ec:	8a 00                	mov    al,BYTE PTR [eax]
c00152ee:	3c f0                	cmp    al,0xf0
c00152f0:	75 17                	jne    c0015309 <opcodeFault(regs*, void*)+0x7b>
c00152f2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152fb:	8d 50 01             	lea    edx,[eax+0x1]
c00152fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015301:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015304:	e9 da 00 00 00       	jmp    c00153e3 <opcodeFault(regs*, void*)+0x155>
c0015309:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530c:	8a 00                	mov    al,BYTE PTR [eax]
c001530e:	3c f2                	cmp    al,0xf2
c0015310:	74 09                	je     c001531b <opcodeFault(regs*, void*)+0x8d>
c0015312:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015315:	8a 00                	mov    al,BYTE PTR [eax]
c0015317:	3c f3                	cmp    al,0xf3
c0015319:	75 1b                	jne    c0015336 <opcodeFault(regs*, void*)+0xa8>
c001531b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001531f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015325:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015328:	8d 50 01             	lea    edx,[eax+0x1]
c001532b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015331:	e9 ad 00 00 00       	jmp    c00153e3 <opcodeFault(regs*, void*)+0x155>
c0015336:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015339:	8a 00                	mov    al,BYTE PTR [eax]
c001533b:	3c 66                	cmp    al,0x66
c001533d:	75 1f                	jne    c001535e <opcodeFault(regs*, void*)+0xd0>
c001533f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015343:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015347:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001534a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015350:	8d 50 01             	lea    edx,[eax+0x1]
c0015353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015356:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015359:	e9 85 00 00 00       	jmp    c00153e3 <opcodeFault(regs*, void*)+0x155>
c001535e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015361:	8a 00                	mov    al,BYTE PTR [eax]
c0015363:	3c 67                	cmp    al,0x67
c0015365:	75 18                	jne    c001537f <opcodeFault(regs*, void*)+0xf1>
c0015367:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001536b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001536e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015371:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015374:	8d 50 01             	lea    edx,[eax+0x1]
c0015377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001537d:	eb 64                	jmp    c00153e3 <opcodeFault(regs*, void*)+0x155>
c001537f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015382:	8a 00                	mov    al,BYTE PTR [eax]
c0015384:	3c 2e                	cmp    al,0x2e
c0015386:	74 09                	je     c0015391 <opcodeFault(regs*, void*)+0x103>
c0015388:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538b:	8a 00                	mov    al,BYTE PTR [eax]
c001538d:	3c 3e                	cmp    al,0x3e
c001538f:	75 18                	jne    c00153a9 <opcodeFault(regs*, void*)+0x11b>
c0015391:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015395:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001539e:	8d 50 01             	lea    edx,[eax+0x1]
c00153a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153a7:	eb 3a                	jmp    c00153e3 <opcodeFault(regs*, void*)+0x155>
c00153a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ac:	8a 00                	mov    al,BYTE PTR [eax]
c00153ae:	3c 36                	cmp    al,0x36
c00153b0:	74 1b                	je     c00153cd <opcodeFault(regs*, void*)+0x13f>
c00153b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b5:	8a 00                	mov    al,BYTE PTR [eax]
c00153b7:	3c 26                	cmp    al,0x26
c00153b9:	74 12                	je     c00153cd <opcodeFault(regs*, void*)+0x13f>
c00153bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153be:	8a 00                	mov    al,BYTE PTR [eax]
c00153c0:	3c 64                	cmp    al,0x64
c00153c2:	74 09                	je     c00153cd <opcodeFault(regs*, void*)+0x13f>
c00153c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c7:	8a 00                	mov    al,BYTE PTR [eax]
c00153c9:	3c 65                	cmp    al,0x65
c00153cb:	75 16                	jne    c00153e3 <opcodeFault(regs*, void*)+0x155>
c00153cd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153da:	8d 50 01             	lea    edx,[eax+0x1]
c00153dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e6:	8a 00                	mov    al,BYTE PTR [eax]
c00153e8:	3c 0f                	cmp    al,0xf
c00153ea:	0f 85 ad 00 00 00    	jne    c001549d <opcodeFault(regs*, void*)+0x20f>
c00153f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f3:	40                   	inc    eax
c00153f4:	8a 00                	mov    al,BYTE PTR [eax]
c00153f6:	3c c2                	cmp    al,0xc2
c00153f8:	74 0e                	je     c0015408 <opcodeFault(regs*, void*)+0x17a>
c00153fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fd:	40                   	inc    eax
c00153fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015400:	3c c3                	cmp    al,0xc3
c0015402:	0f 85 95 00 00 00    	jne    c001549d <opcodeFault(regs*, void*)+0x20f>
c0015408:	83 ec 0c             	sub    esp,0xc
c001540b:	68 c7 af 02 c0       	push   0xc002afc7
c0015410:	e8 b1 da ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0015415:	83 c4 10             	add    esp,0x10
c0015418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541e:	8d 50 01             	lea    edx,[eax+0x1]
c0015421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015424:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015427:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542d:	8a 00                	mov    al,BYTE PTR [eax]
c001542f:	8d 50 fe             	lea    edx,[eax-0x2]
c0015432:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015435:	88 10                	mov    BYTE PTR [eax],dl
c0015437:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001543a:	50                   	push   eax
c001543b:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001543e:	50                   	push   eax
c001543f:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015442:	50                   	push   eax
c0015443:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015446:	e8 e7 47 00 00       	call   c0019c32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001544b:	83 c4 10             	add    esp,0x10
c001544e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015451:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015454:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015457:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001545a:	01 d0                	add    eax,edx
c001545c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001545f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015462:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015465:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015468:	48                   	dec    eax
c0015469:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001546c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015472:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015478:	83 ec 04             	sub    esp,0x4
c001547b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001547e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015481:	50                   	push   eax
c0015482:	e8 2d ad fe ff       	call   c00001b4 <voodooXADD>
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001548d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015490:	01 c2                	add    edx,eax
c0015492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015495:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015498:	e9 f0 03 00 00       	jmp    c001588d <opcodeFault(regs*, void*)+0x5ff>
c001549d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a0:	8a 00                	mov    al,BYTE PTR [eax]
c00154a2:	3c 0f                	cmp    al,0xf
c00154a4:	0f 85 8b 01 00 00    	jne    c0015635 <opcodeFault(regs*, void*)+0x3a7>
c00154aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ad:	40                   	inc    eax
c00154ae:	8a 00                	mov    al,BYTE PTR [eax]
c00154b0:	3c c7                	cmp    al,0xc7
c00154b2:	0f 86 7d 01 00 00    	jbe    c0015635 <opcodeFault(regs*, void*)+0x3a7>
c00154b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bb:	40                   	inc    eax
c00154bc:	8a 00                	mov    al,BYTE PTR [eax]
c00154be:	3c cf                	cmp    al,0xcf
c00154c0:	0f 87 6f 01 00 00    	ja     c0015635 <opcodeFault(regs*, void*)+0x3a7>
c00154c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c9:	40                   	inc    eax
c00154ca:	8a 00                	mov    al,BYTE PTR [eax]
c00154cc:	83 c0 38             	add    eax,0x38
c00154cf:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154d2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154d6:	75 0b                	jne    c00154e3 <opcodeFault(regs*, void*)+0x255>
c00154d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154db:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154de:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e1:	eb 75                	jmp    c0015558 <opcodeFault(regs*, void*)+0x2ca>
c00154e3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154e7:	75 0b                	jne    c00154f4 <opcodeFault(regs*, void*)+0x266>
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154ef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f2:	eb 64                	jmp    c0015558 <opcodeFault(regs*, void*)+0x2ca>
c00154f4:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154f8:	75 0b                	jne    c0015505 <opcodeFault(regs*, void*)+0x277>
c00154fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015500:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015503:	eb 53                	jmp    c0015558 <opcodeFault(regs*, void*)+0x2ca>
c0015505:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015509:	75 0b                	jne    c0015516 <opcodeFault(regs*, void*)+0x288>
c001550b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015511:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015514:	eb 42                	jmp    c0015558 <opcodeFault(regs*, void*)+0x2ca>
c0015516:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001551a:	75 0b                	jne    c0015527 <opcodeFault(regs*, void*)+0x299>
c001551c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015522:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015525:	eb 31                	jmp    c0015558 <opcodeFault(regs*, void*)+0x2ca>
c0015527:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001552b:	75 0b                	jne    c0015538 <opcodeFault(regs*, void*)+0x2aa>
c001552d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015530:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015533:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015536:	eb 20                	jmp    c0015558 <opcodeFault(regs*, void*)+0x2ca>
c0015538:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001553c:	75 0b                	jne    c0015549 <opcodeFault(regs*, void*)+0x2bb>
c001553e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015541:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015544:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015547:	eb 0f                	jmp    c0015558 <opcodeFault(regs*, void*)+0x2ca>
c0015549:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001554d:	75 09                	jne    c0015558 <opcodeFault(regs*, void*)+0x2ca>
c001554f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015552:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015555:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015558:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001555c:	74 10                	je     c001556e <opcodeFault(regs*, void*)+0x2e0>
c001555e:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015565:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001556c:	eb 2d                	jmp    c001559b <opcodeFault(regs*, void*)+0x30d>
c001556e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015571:	c1 e0 18             	shl    eax,0x18
c0015574:	89 c2                	mov    edx,eax
c0015576:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015579:	c1 e0 08             	shl    eax,0x8
c001557c:	25 00 00 ff 00       	and    eax,0xff0000
c0015581:	09 c2                	or     edx,eax
c0015583:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015586:	c1 e8 08             	shr    eax,0x8
c0015589:	25 00 ff 00 00       	and    eax,0xff00
c001558e:	09 c2                	or     edx,eax
c0015590:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015593:	c1 e8 18             	shr    eax,0x18
c0015596:	09 d0                	or     eax,edx
c0015598:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001559f:	75 0b                	jne    c00155ac <opcodeFault(regs*, void*)+0x31e>
c00155a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00155aa:	eb 75                	jmp    c0015621 <opcodeFault(regs*, void*)+0x393>
c00155ac:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155b0:	75 0b                	jne    c00155bd <opcodeFault(regs*, void*)+0x32f>
c00155b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155bb:	eb 64                	jmp    c0015621 <opcodeFault(regs*, void*)+0x393>
c00155bd:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155c1:	75 0b                	jne    c00155ce <opcodeFault(regs*, void*)+0x340>
c00155c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c9:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155cc:	eb 53                	jmp    c0015621 <opcodeFault(regs*, void*)+0x393>
c00155ce:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155d2:	75 0b                	jne    c00155df <opcodeFault(regs*, void*)+0x351>
c00155d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155da:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155dd:	eb 42                	jmp    c0015621 <opcodeFault(regs*, void*)+0x393>
c00155df:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155e3:	75 0b                	jne    c00155f0 <opcodeFault(regs*, void*)+0x362>
c00155e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155eb:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155ee:	eb 31                	jmp    c0015621 <opcodeFault(regs*, void*)+0x393>
c00155f0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155f4:	75 0b                	jne    c0015601 <opcodeFault(regs*, void*)+0x373>
c00155f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155ff:	eb 20                	jmp    c0015621 <opcodeFault(regs*, void*)+0x393>
c0015601:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015605:	75 0b                	jne    c0015612 <opcodeFault(regs*, void*)+0x384>
c0015607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001560d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015610:	eb 0f                	jmp    c0015621 <opcodeFault(regs*, void*)+0x393>
c0015612:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015616:	75 09                	jne    c0015621 <opcodeFault(regs*, void*)+0x393>
c0015618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001561e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015624:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015627:	8d 50 02             	lea    edx,[eax+0x2]
c001562a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015630:	e9 58 02 00 00       	jmp    c001588d <opcodeFault(regs*, void*)+0x5ff>
c0015635:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015638:	8a 00                	mov    al,BYTE PTR [eax]
c001563a:	3c 0f                	cmp    al,0xf
c001563c:	0f 85 76 01 00 00    	jne    c00157b8 <opcodeFault(regs*, void*)+0x52a>
c0015642:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015645:	40                   	inc    eax
c0015646:	8a 00                	mov    al,BYTE PTR [eax]
c0015648:	3c c7                	cmp    al,0xc7
c001564a:	0f 85 68 01 00 00    	jne    c00157b8 <opcodeFault(regs*, void*)+0x52a>
c0015650:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015656:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015659:	8d 50 01             	lea    edx,[eax+0x1]
c001565c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015662:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015665:	50                   	push   eax
c0015666:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015669:	50                   	push   eax
c001566a:	8d 45 bc             	lea    eax,[ebp-0x44]
c001566d:	50                   	push   eax
c001566e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015671:	e8 bc 45 00 00       	call   c0019c32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001567c:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001567f:	83 f0 01             	xor    eax,0x1
c0015682:	84 c0                	test   al,al
c0015684:	0f 84 2e 01 00 00    	je     c00157b8 <opcodeFault(regs*, void*)+0x52a>
c001568a:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001568d:	3c 01                	cmp    al,0x1
c001568f:	0f 85 23 01 00 00    	jne    c00157b8 <opcodeFault(regs*, void*)+0x52a>
c0015695:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015698:	83 f0 01             	xor    eax,0x1
c001569b:	84 c0                	test   al,al
c001569d:	0f 84 15 01 00 00    	je     c00157b8 <opcodeFault(regs*, void*)+0x52a>
c00156a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00156a9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156ac:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00156b3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00156b6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00156b9:	89 c2                	mov    edx,eax
c00156bb:	b8 00 00 00 00       	mov    eax,0x0
c00156c0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156c3:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156cc:	ba 00 00 00 00       	mov    edx,0x0
c00156d1:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156d4:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156da:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156dd:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156e0:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156e7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156ea:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156ed:	89 c2                	mov    edx,eax
c00156ef:	b8 00 00 00 00       	mov    eax,0x0
c00156f4:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156f7:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015700:	ba 00 00 00 00       	mov    edx,0x0
c0015705:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015708:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001570b:	e8 55 86 00 00       	call   c001dd65 <lockScheduler()>
c0015710:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015713:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015716:	8b 00                	mov    eax,DWORD PTR [eax]
c0015718:	89 c1                	mov    ecx,eax
c001571a:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001571d:	89 cb                	mov    ebx,ecx
c001571f:	89 d0                	mov    eax,edx
c0015721:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015724:	89 c6                	mov    esi,eax
c0015726:	89 f0                	mov    eax,esi
c0015728:	09 d8                	or     eax,ebx
c001572a:	85 c0                	test   eax,eax
c001572c:	75 21                	jne    c001574f <opcodeFault(regs*, void*)+0x4c1>
c001572e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015731:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015734:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015737:	89 01                	mov    DWORD PTR [ecx],eax
c0015739:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001573c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015742:	83 c8 40             	or     eax,0x40
c0015745:	89 c2                	mov    edx,eax
c0015747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001574d:	eb 3e                	jmp    c001578d <opcodeFault(regs*, void*)+0x4ff>
c001574f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015752:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015755:	8b 00                	mov    eax,DWORD PTR [eax]
c0015757:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001575a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001575d:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015763:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015766:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015769:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001576c:	89 d0                	mov    eax,edx
c001576e:	31 d2                	xor    edx,edx
c0015770:	89 c3                	mov    ebx,eax
c0015772:	89 d6                	mov    esi,edx
c0015774:	89 da                	mov    edx,ebx
c0015776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015779:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001577c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015782:	83 e0 bf             	and    eax,0xffffffbf
c0015785:	89 c2                	mov    edx,eax
c0015787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001578d:	e8 d5 85 00 00       	call   c001dd67 <unlockScheduler()>
c0015792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015795:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015798:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001579b:	01 c2                	add    edx,eax
c001579d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157a3:	83 ec 0c             	sub    esp,0xc
c00157a6:	68 d6 af 02 c0       	push   0xc002afd6
c00157ab:	e8 16 d7 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00157b0:	83 c4 10             	add    esp,0x10
c00157b3:	e9 d5 00 00 00       	jmp    c001588d <opcodeFault(regs*, void*)+0x5ff>
c00157b8:	83 ec 0c             	sub    esp,0xc
c00157bb:	68 e9 af 02 c0       	push   0xc002afe9
c00157c0:	e8 01 d7 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00157c5:	83 c4 10             	add    esp,0x10
c00157c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157d4:	c1 e0 04             	shl    eax,0x4
c00157d7:	01 d0                	add    eax,edx
c00157d9:	83 c0 03             	add    eax,0x3
c00157dc:	8a 00                	mov    al,BYTE PTR [eax]
c00157de:	0f b6 d8             	movzx  ebx,al
c00157e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157ed:	c1 e0 04             	shl    eax,0x4
c00157f0:	01 d0                	add    eax,edx
c00157f2:	83 c0 02             	add    eax,0x2
c00157f5:	8a 00                	mov    al,BYTE PTR [eax]
c00157f7:	0f b6 c8             	movzx  ecx,al
c00157fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fd:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015803:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015806:	c1 e0 04             	shl    eax,0x4
c0015809:	01 d0                	add    eax,edx
c001580b:	40                   	inc    eax
c001580c:	8a 00                	mov    al,BYTE PTR [eax]
c001580e:	0f b6 d0             	movzx  edx,al
c0015811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015814:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001581d:	c1 e0 04             	shl    eax,0x4
c0015820:	01 f0                	add    eax,esi
c0015822:	8a 00                	mov    al,BYTE PTR [eax]
c0015824:	0f b6 c0             	movzx  eax,al
c0015827:	83 ec 0c             	sub    esp,0xc
c001582a:	53                   	push   ebx
c001582b:	51                   	push   ecx
c001582c:	52                   	push   edx
c001582d:	50                   	push   eax
c001582e:	68 fc af 02 c0       	push   0xc002affc
c0015833:	e8 8e d6 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0015838:	83 c4 20             	add    esp,0x20
c001583b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015841:	83 c0 03             	add    eax,0x3
c0015844:	8a 00                	mov    al,BYTE PTR [eax]
c0015846:	0f b6 d8             	movzx  ebx,al
c0015849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001584f:	83 c0 02             	add    eax,0x2
c0015852:	8a 00                	mov    al,BYTE PTR [eax]
c0015854:	0f b6 c8             	movzx  ecx,al
c0015857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001585d:	40                   	inc    eax
c001585e:	8a 00                	mov    al,BYTE PTR [eax]
c0015860:	0f b6 d0             	movzx  edx,al
c0015863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015866:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015869:	8a 00                	mov    al,BYTE PTR [eax]
c001586b:	0f b6 c0             	movzx  eax,al
c001586e:	83 ec 0c             	sub    esp,0xc
c0015871:	53                   	push   ebx
c0015872:	51                   	push   ecx
c0015873:	52                   	push   edx
c0015874:	50                   	push   eax
c0015875:	68 24 b0 02 c0       	push   0xc002b024
c001587a:	e8 47 d6 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001587f:	83 c4 20             	add    esp,0x20
c0015882:	83 ec 0c             	sub    esp,0xc
c0015885:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015888:	e8 af f4 ff ff       	call   c0014d3c <displayDebugInfo(regs*)>
c001588d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015890:	5b                   	pop    ebx
c0015891:	5e                   	pop    esi
c0015892:	5d                   	pop    ebp
c0015893:	c3                   	ret    

c0015894 <displayProgramFault(char const*)>:
c0015894:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015899:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001589c:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c00158a2:	85 c0                	test   eax,eax
c00158a4:	74 15                	je     c00158bb <displayProgramFault(char const*)+0x27>
c00158a6:	83 ec 0c             	sub    esp,0xc
c00158a9:	6a 04                	push   0x4
c00158ab:	6a 0f                	push   0xf
c00158ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158b1:	50                   	push   eax
c00158b2:	e8 57 b5 ff ff       	call   c0010e0e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158b7:	83 c4 1c             	add    esp,0x1c
c00158ba:	c3                   	ret    
c00158bb:	c3                   	ret    

c00158bc <setupInterruptController()>:
c00158bc:	55                   	push   ebp
c00158bd:	89 e5                	mov    ebp,esp
c00158bf:	53                   	push   ebx
c00158c0:	83 ec 24             	sub    esp,0x24
c00158c3:	b8 00 00 00 00       	mov    eax,0x0
c00158c8:	85 c0                	test   eax,eax
c00158ca:	0f 95 c0             	setne  al
c00158cd:	84 c0                	test   al,al
c00158cf:	74 5b                	je     c001592c <setupInterruptController()+0x70>
c00158d1:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158d8:	83 ec 0c             	sub    esp,0xc
c00158db:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158de:	e8 60 9f ff ff       	call   c000f843 <malloc>
c00158e3:	83 c4 10             	add    esp,0x10
c00158e6:	89 c3                	mov    ebx,eax
c00158e8:	83 ec 0c             	sub    esp,0xc
c00158eb:	53                   	push   ebx
c00158ec:	e8 f9 ff 00 00       	call   c00258ea <APIC::APIC()>
c00158f1:	83 c4 10             	add    esp,0x10
c00158f4:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158f7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ff:	83 c0 08             	add    eax,0x8
c0015902:	8b 00                	mov    eax,DWORD PTR [eax]
c0015904:	6a 00                	push   0x0
c0015906:	6a 00                	push   0x0
c0015908:	6a 00                	push   0x0
c001590a:	52                   	push   edx
c001590b:	ff d0                	call   eax
c001590d:	83 c4 10             	add    esp,0x10
c0015910:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015915:	83 ec 08             	sub    esp,0x8
c0015918:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001591b:	50                   	push   eax
c001591c:	e8 cb e9 ff ff       	call   c00142ec <Device::addChild(Device*)>
c0015921:	83 c4 10             	add    esp,0x10
c0015924:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015927:	e9 52 03 00 00       	jmp    c0015c7e <setupInterruptController()+0x3c2>
c001592c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0015931:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015937:	83 e0 01             	and    eax,0x1
c001593a:	84 c0                	test   al,al
c001593c:	0f 95 c0             	setne  al
c001593f:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015942:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015949:	83 ec 0c             	sub    esp,0xc
c001594c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001594f:	e8 ef 9e ff ff       	call   c000f843 <malloc>
c0015954:	83 c4 10             	add    esp,0x10
c0015957:	89 c3                	mov    ebx,eax
c0015959:	83 ec 0c             	sub    esp,0xc
c001595c:	53                   	push   ebx
c001595d:	e8 e0 04 01 00       	call   c0025e42 <PIC::PIC()>
c0015962:	83 c4 10             	add    esp,0x10
c0015965:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015968:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001596b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001596e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015970:	83 c0 08             	add    eax,0x8
c0015973:	8b 00                	mov    eax,DWORD PTR [eax]
c0015975:	6a 00                	push   0x0
c0015977:	6a 00                	push   0x0
c0015979:	6a 00                	push   0x0
c001597b:	52                   	push   edx
c001597c:	ff d0                	call   eax
c001597e:	83 c4 10             	add    esp,0x10
c0015981:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015985:	74 73                	je     c00159fa <setupInterruptController()+0x13e>
c0015987:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001598a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001598d:	8b 00                	mov    eax,DWORD PTR [eax]
c001598f:	83 c0 0c             	add    eax,0xc
c0015992:	8b 00                	mov    eax,DWORD PTR [eax]
c0015994:	6a 00                	push   0x0
c0015996:	6a 00                	push   0x0
c0015998:	6a 00                	push   0x0
c001599a:	52                   	push   edx
c001599b:	ff d0                	call   eax
c001599d:	83 c4 10             	add    esp,0x10
c00159a0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159a4:	74 15                	je     c00159bb <setupInterruptController()+0xff>
c00159a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ab:	83 c0 04             	add    eax,0x4
c00159ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159b6:	ff d0                	call   eax
c00159b8:	83 c4 10             	add    esp,0x10
c00159bb:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159c2:	83 ec 0c             	sub    esp,0xc
c00159c5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159c8:	e8 76 9e ff ff       	call   c000f843 <malloc>
c00159cd:	83 c4 10             	add    esp,0x10
c00159d0:	89 c3                	mov    ebx,eax
c00159d2:	83 ec 0c             	sub    esp,0xc
c00159d5:	53                   	push   ebx
c00159d6:	e8 0f ff 00 00       	call   c00258ea <APIC::APIC()>
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159e1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e9:	83 c0 08             	add    eax,0x8
c00159ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ee:	6a 00                	push   0x0
c00159f0:	6a 00                	push   0x0
c00159f2:	6a 00                	push   0x0
c00159f4:	52                   	push   edx
c00159f5:	ff d0                	call   eax
c00159f7:	83 c4 10             	add    esp,0x10
c00159fa:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00159ff:	83 ec 08             	sub    esp,0x8
c0015a02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a05:	50                   	push   eax
c0015a06:	e8 e1 e8 ff ff       	call   c00142ec <Device::addChild(Device*)>
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a13:	83 c0 24             	add    eax,0x24
c0015a16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a18:	6a 00                	push   0x0
c0015a1a:	68 6f 52 01 c0       	push   0xc001526f
c0015a1f:	6a 00                	push   0x0
c0015a21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a24:	ff d0                	call   eax
c0015a26:	83 c4 10             	add    esp,0x10
c0015a29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2e:	83 c0 24             	add    eax,0x24
c0015a31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a33:	6a 00                	push   0x0
c0015a35:	68 6f 52 01 c0       	push   0xc001526f
c0015a3a:	6a 01                	push   0x1
c0015a3c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a3f:	ff d0                	call   eax
c0015a41:	83 c4 10             	add    esp,0x10
c0015a44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a49:	83 c0 24             	add    eax,0x24
c0015a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4e:	6a 00                	push   0x0
c0015a50:	68 99 4b 01 c0       	push   0xc0014b99
c0015a55:	6a 02                	push   0x2
c0015a57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5a:	ff d0                	call   eax
c0015a5c:	83 c4 10             	add    esp,0x10
c0015a5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a64:	83 c0 24             	add    eax,0x24
c0015a67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a69:	6a 00                	push   0x0
c0015a6b:	68 6f 52 01 c0       	push   0xc001526f
c0015a70:	6a 03                	push   0x3
c0015a72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a75:	ff d0                	call   eax
c0015a77:	83 c4 10             	add    esp,0x10
c0015a7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7f:	83 c0 24             	add    eax,0x24
c0015a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a84:	6a 00                	push   0x0
c0015a86:	68 6f 52 01 c0       	push   0xc001526f
c0015a8b:	6a 04                	push   0x4
c0015a8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a90:	ff d0                	call   eax
c0015a92:	83 c4 10             	add    esp,0x10
c0015a95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9a:	83 c0 24             	add    eax,0x24
c0015a9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9f:	6a 00                	push   0x0
c0015aa1:	68 6f 52 01 c0       	push   0xc001526f
c0015aa6:	6a 05                	push   0x5
c0015aa8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aab:	ff d0                	call   eax
c0015aad:	83 c4 10             	add    esp,0x10
c0015ab0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab5:	83 c0 24             	add    eax,0x24
c0015ab8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aba:	6a 00                	push   0x0
c0015abc:	68 8e 52 01 c0       	push   0xc001528e
c0015ac1:	6a 06                	push   0x6
c0015ac3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac6:	ff d0                	call   eax
c0015ac8:	83 c4 10             	add    esp,0x10
c0015acb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad0:	83 c0 24             	add    eax,0x24
c0015ad3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad5:	6a 00                	push   0x0
c0015ad7:	68 cb 51 01 c0       	push   0xc00151cb
c0015adc:	6a 07                	push   0x7
c0015ade:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae1:	ff d0                	call   eax
c0015ae3:	83 c4 10             	add    esp,0x10
c0015ae6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aeb:	83 c0 24             	add    eax,0x24
c0015aee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af0:	6a 00                	push   0x0
c0015af2:	68 b4 49 01 c0       	push   0xc00149b4
c0015af7:	6a 08                	push   0x8
c0015af9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afc:	ff d0                	call   eax
c0015afe:	83 c4 10             	add    esp,0x10
c0015b01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b06:	83 c0 24             	add    eax,0x24
c0015b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0b:	6a 00                	push   0x0
c0015b0d:	68 6f 52 01 c0       	push   0xc001526f
c0015b12:	6a 09                	push   0x9
c0015b14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b17:	ff d0                	call   eax
c0015b19:	83 c4 10             	add    esp,0x10
c0015b1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b21:	83 c0 24             	add    eax,0x24
c0015b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b26:	6a 00                	push   0x0
c0015b28:	68 6f 52 01 c0       	push   0xc001526f
c0015b2d:	6a 0a                	push   0xa
c0015b2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b32:	ff d0                	call   eax
c0015b34:	83 c4 10             	add    esp,0x10
c0015b37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3c:	83 c0 24             	add    eax,0x24
c0015b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b41:	6a 00                	push   0x0
c0015b43:	68 6f 52 01 c0       	push   0xc001526f
c0015b48:	6a 0b                	push   0xb
c0015b4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4d:	ff d0                	call   eax
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b57:	83 c0 24             	add    eax,0x24
c0015b5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5c:	6a 00                	push   0x0
c0015b5e:	68 6f 52 01 c0       	push   0xc001526f
c0015b63:	6a 0c                	push   0xc
c0015b65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b68:	ff d0                	call   eax
c0015b6a:	83 c4 10             	add    esp,0x10
c0015b6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b72:	83 c0 24             	add    eax,0x24
c0015b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b77:	6a 00                	push   0x0
c0015b79:	68 fa 51 01 c0       	push   0xc00151fa
c0015b7e:	6a 0d                	push   0xd
c0015b80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b83:	ff d0                	call   eax
c0015b85:	83 c4 10             	add    esp,0x10
c0015b88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8d:	83 c0 24             	add    eax,0x24
c0015b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b92:	6a 00                	push   0x0
c0015b94:	68 33 52 01 c0       	push   0xc0015233
c0015b99:	6a 0e                	push   0xe
c0015b9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9e:	ff d0                	call   eax
c0015ba0:	83 c4 10             	add    esp,0x10
c0015ba3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba8:	83 c0 24             	add    eax,0x24
c0015bab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bad:	6a 00                	push   0x0
c0015baf:	68 6f 52 01 c0       	push   0xc001526f
c0015bb4:	6a 0f                	push   0xf
c0015bb6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb9:	ff d0                	call   eax
c0015bbb:	83 c4 10             	add    esp,0x10
c0015bbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc3:	83 c0 24             	add    eax,0x24
c0015bc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc8:	6a 00                	push   0x0
c0015bca:	68 6f 52 01 c0       	push   0xc001526f
c0015bcf:	6a 10                	push   0x10
c0015bd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd4:	ff d0                	call   eax
c0015bd6:	83 c4 10             	add    esp,0x10
c0015bd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bde:	83 c0 24             	add    eax,0x24
c0015be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be3:	6a 00                	push   0x0
c0015be5:	68 6f 52 01 c0       	push   0xc001526f
c0015bea:	6a 11                	push   0x11
c0015bec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bef:	ff d0                	call   eax
c0015bf1:	83 c4 10             	add    esp,0x10
c0015bf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf9:	83 c0 24             	add    eax,0x24
c0015bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfe:	6a 00                	push   0x0
c0015c00:	68 6f 52 01 c0       	push   0xc001526f
c0015c05:	6a 12                	push   0x12
c0015c07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0a:	ff d0                	call   eax
c0015c0c:	83 c4 10             	add    esp,0x10
c0015c0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c14:	83 c0 24             	add    eax,0x24
c0015c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c19:	6a 00                	push   0x0
c0015c1b:	68 6f 52 01 c0       	push   0xc001526f
c0015c20:	6a 13                	push   0x13
c0015c22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c25:	ff d0                	call   eax
c0015c27:	83 c4 10             	add    esp,0x10
c0015c2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2f:	83 c0 24             	add    eax,0x24
c0015c32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c34:	6a 00                	push   0x0
c0015c36:	68 6f 52 01 c0       	push   0xc001526f
c0015c3b:	6a 14                	push   0x14
c0015c3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c40:	ff d0                	call   eax
c0015c42:	83 c4 10             	add    esp,0x10
c0015c45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4a:	83 c0 24             	add    eax,0x24
c0015c4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4f:	6a 00                	push   0x0
c0015c51:	68 6f 52 01 c0       	push   0xc001526f
c0015c56:	6a 1e                	push   0x1e
c0015c58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5b:	ff d0                	call   eax
c0015c5d:	83 c4 10             	add    esp,0x10
c0015c60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c65:	83 c0 24             	add    eax,0x24
c0015c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6a:	6a 00                	push   0x0
c0015c6c:	68 f5 c6 01 c0       	push   0xc001c6f5
c0015c71:	6a 60                	push   0x60
c0015c73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c76:	ff d0                	call   eax
c0015c78:	83 c4 10             	add    esp,0x10
c0015c7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c81:	c9                   	leave  
c0015c82:	c3                   	ret    
c0015c83:	90                   	nop

c0015c84 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c84:	55                   	push   ebp
c0015c85:	89 e5                	mov    ebp,esp
c0015c87:	83 ec 08             	sub    esp,0x8
c0015c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8d:	83 ec 0c             	sub    esp,0xc
c0015c90:	50                   	push   eax
c0015c91:	e8 42 e9 ff ff       	call   c00145d8 <Device::getName()>
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	8a 00                	mov    al,BYTE PTR [eax]
c0015c9b:	3c 41                	cmp    al,0x41
c0015c9d:	0f 94 c0             	sete   al
c0015ca0:	84 c0                	test   al,al
c0015ca2:	74 28                	je     c0015ccc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015ca4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015ca8:	7f 12                	jg     c0015cbc <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015caa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cad:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0015cb2:	8a 00                	mov    al,BYTE PTR [eax]
c0015cb4:	0f b6 c0             	movzx  eax,al
c0015cb7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cba:	eb 10                	jmp    c0015ccc <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cbc:	83 ec 0c             	sub    esp,0xc
c0015cbf:	68 40 ad 02 c0       	push   0xc002ad40
c0015cc4:	e8 a2 48 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0015cc9:	83 c4 10             	add    esp,0x10
c0015ccc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ccf:	c9                   	leave  
c0015cd0:	c3                   	ret    
c0015cd1:	90                   	nop

c0015cd2 <startGUI(void*)>:
c0015cd2:	55                   	push   ebp
c0015cd3:	89 e5                	mov    ebp,esp
c0015cd5:	53                   	push   ebx
c0015cd6:	83 ec 04             	sub    esp,0x4
c0015cd9:	e8 89 80 00 00       	call   c001dd67 <unlockScheduler()>
c0015cde:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015ce4:	83 ec 08             	sub    esp,0x8
c0015ce7:	6a 01                	push   0x1
c0015ce9:	68 94 b0 02 c0       	push   0xc002b094
c0015cee:	e8 ab 79 00 00       	call   c001d69e <Thr::loadDLL(char const*, bool)>
c0015cf3:	83 c4 10             	add    esp,0x10
c0015cf6:	83 ec 08             	sub    esp,0x8
c0015cf9:	53                   	push   ebx
c0015cfa:	50                   	push   eax
c0015cfb:	e8 ed 7b 00 00       	call   c001d8ed <Thr::executeDLL(unsigned long, void*)>
c0015d00:	83 c4 10             	add    esp,0x10
c0015d03:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d09:	83 ec 08             	sub    esp,0x8
c0015d0c:	6a 01                	push   0x1
c0015d0e:	68 ae b0 02 c0       	push   0xc002b0ae
c0015d13:	e8 86 79 00 00       	call   c001d69e <Thr::loadDLL(char const*, bool)>
c0015d18:	83 c4 10             	add    esp,0x10
c0015d1b:	83 ec 08             	sub    esp,0x8
c0015d1e:	53                   	push   ebx
c0015d1f:	50                   	push   eax
c0015d20:	e8 c8 7b 00 00       	call   c001d8ed <Thr::executeDLL(unsigned long, void*)>
c0015d25:	83 c4 10             	add    esp,0x10
c0015d28:	90                   	nop
c0015d29:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d2c:	c9                   	leave  
c0015d2d:	c3                   	ret    

c0015d2e <startGUIVESA(void*)>:
c0015d2e:	55                   	push   ebp
c0015d2f:	89 e5                	mov    ebp,esp
c0015d31:	53                   	push   ebx
c0015d32:	83 ec 04             	sub    esp,0x4
c0015d35:	e8 2d 80 00 00       	call   c001dd67 <unlockScheduler()>
c0015d3a:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d40:	83 ec 08             	sub    esp,0x8
c0015d43:	6a 01                	push   0x1
c0015d45:	68 c8 b0 02 c0       	push   0xc002b0c8
c0015d4a:	e8 4f 79 00 00       	call   c001d69e <Thr::loadDLL(char const*, bool)>
c0015d4f:	83 c4 10             	add    esp,0x10
c0015d52:	83 ec 08             	sub    esp,0x8
c0015d55:	53                   	push   ebx
c0015d56:	50                   	push   eax
c0015d57:	e8 91 7b 00 00       	call   c001d8ed <Thr::executeDLL(unsigned long, void*)>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c0015d65:	83 ec 08             	sub    esp,0x8
c0015d68:	6a 01                	push   0x1
c0015d6a:	68 ae b0 02 c0       	push   0xc002b0ae
c0015d6f:	e8 2a 79 00 00       	call   c001d69e <Thr::loadDLL(char const*, bool)>
c0015d74:	83 c4 10             	add    esp,0x10
c0015d77:	83 ec 08             	sub    esp,0x8
c0015d7a:	53                   	push   ebx
c0015d7b:	50                   	push   eax
c0015d7c:	e8 6c 7b 00 00       	call   c001d8ed <Thr::executeDLL(unsigned long, void*)>
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	90                   	nop
c0015d85:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d88:	c9                   	leave  
c0015d89:	c3                   	ret    

c0015d8a <sendKeyToTerminal(unsigned char)>:
c0015d8a:	55                   	push   ebp
c0015d8b:	89 e5                	mov    ebp,esp
c0015d8d:	83 ec 28             	sub    esp,0x28
c0015d90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d93:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015d96:	a1 64 e4 02 c0       	mov    eax,ds:0xc002e464
c0015d9b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015d9f:	83 ec 08             	sub    esp,0x8
c0015da2:	52                   	push   edx
c0015da3:	50                   	push   eax
c0015da4:	e8 a1 b5 ff ff       	call   c001134a <VgaText::receiveKey(unsigned char)>
c0015da9:	83 c4 10             	add    esp,0x10
c0015dac:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015db0:	75 41                	jne    c0015df3 <sendKeyToTerminal(unsigned char)+0x69>
c0015db2:	e8 d5 7f 00 00       	call   c001dd8c <lockStuff()>
c0015db7:	a1 80 e7 02 c0       	mov    eax,ds:0xc002e780
c0015dbc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015dbf:	c7 05 80 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e780,0x0
c0015dc9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015dcd:	74 1f                	je     c0015dee <sendKeyToTerminal(unsigned char)+0x64>
c0015dcf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dd2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015dd5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015dd8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ddb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015dde:	83 ec 0c             	sub    esp,0xc
c0015de1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015de4:	e8 93 85 00 00       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	eb db                	jmp    c0015dc9 <sendKeyToTerminal(unsigned char)+0x3f>
c0015dee:	e8 32 83 00 00       	call   c001e125 <unlockStuff()>
c0015df3:	90                   	nop
c0015df4:	c9                   	leave  
c0015df5:	c3                   	ret    

c0015df6 <sendKeyboardToken(KeyboardToken)>:
c0015df6:	55                   	push   ebp
c0015df7:	89 e5                	mov    ebp,esp
c0015df9:	83 ec 18             	sub    esp,0x18
c0015dfc:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e02:	0f b7 c0             	movzx  eax,ax
c0015e05:	83 f2 01             	xor    edx,0x1
c0015e08:	88 90 a0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1860],dl
c0015e0e:	a1 88 e7 02 c0       	mov    eax,ds:0xc002e788
c0015e13:	85 c0                	test   eax,eax
c0015e15:	74 24                	je     c0015e3b <sendKeyboardToken(KeyboardToken)+0x45>
c0015e17:	8b 0d 88 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e788
c0015e1d:	83 ec 04             	sub    esp,0x4
c0015e20:	68 a0 e7 02 c0       	push   0xc002e7a0
c0015e25:	83 ec 08             	sub    esp,0x8
c0015e28:	89 e2                	mov    edx,esp
c0015e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2d:	89 02                	mov    DWORD PTR [edx],eax
c0015e2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e32:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e36:	ff d1                	call   ecx
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3e:	66 3d 03 02          	cmp    ax,0x203
c0015e42:	75 07                	jne    c0015e4b <sendKeyboardToken(KeyboardToken)+0x55>
c0015e44:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c0015e49:	84 c0                	test   al,al
c0015e4b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015e4f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015e52:	a0 a8 eb 02 c0       	mov    al,ds:0xc002eba8
c0015e57:	38 c2                	cmp    dl,al
c0015e59:	74 1c                	je     c0015e77 <sendKeyboardToken(KeyboardToken)+0x81>
c0015e5b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015e5e:	a2 a8 eb 02 c0       	mov    ds:0xc002eba8,al
c0015e63:	a0 a8 eb 02 c0       	mov    al,ds:0xc002eba8
c0015e68:	0f b6 c0             	movzx  eax,al
c0015e6b:	83 ec 0c             	sub    esp,0xc
c0015e6e:	50                   	push   eax
c0015e6f:	e8 36 a7 ff ff       	call   c00105aa <setTerminalScrollLock(bool)>
c0015e74:	83 c4 10             	add    esp,0x10
c0015e77:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015e7a:	84 c0                	test   al,al
c0015e7c:	0f 84 ae 00 00 00    	je     c0015f30 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e85:	66 3d 10 03          	cmp    ax,0x310
c0015e89:	75 06                	jne    c0015e91 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015e8b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e94:	66 3d 11 03          	cmp    ax,0x311
c0015e98:	75 06                	jne    c0015ea0 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015e9a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015ea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea3:	66 3d 12 03          	cmp    ax,0x312
c0015ea7:	75 06                	jne    c0015eaf <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ea9:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb2:	66 3d 13 03          	cmp    ax,0x313
c0015eb6:	75 06                	jne    c0015ebe <sendKeyboardToken(KeyboardToken)+0xc8>
c0015eb8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec1:	66 3d 14 03          	cmp    ax,0x314
c0015ec5:	75 06                	jne    c0015ecd <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ec7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed0:	66 3d 15 03          	cmp    ax,0x315
c0015ed4:	75 06                	jne    c0015edc <sendKeyboardToken(KeyboardToken)+0xe6>
c0015ed6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edf:	66 3d 16 03          	cmp    ax,0x316
c0015ee3:	75 06                	jne    c0015eeb <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ee5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eee:	66 3d 17 03          	cmp    ax,0x317
c0015ef2:	75 06                	jne    c0015efa <sendKeyboardToken(KeyboardToken)+0x104>
c0015ef4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efd:	66 3d 18 03          	cmp    ax,0x318
c0015f01:	75 06                	jne    c0015f09 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f03:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0c:	66 3d 19 03          	cmp    ax,0x319
c0015f10:	75 06                	jne    c0015f18 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f12:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1b:	66 3d 1a 03          	cmp    ax,0x31a
c0015f1f:	0f 85 c9 00 00 00    	jne    c0015fee <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f25:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f2b:	e9 be 00 00 00       	jmp    c0015fee <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f33:	66 3d 10 03          	cmp    ax,0x310
c0015f37:	75 0a                	jne    c0015f43 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f39:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015f3f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f46:	66 3d 11 03          	cmp    ax,0x311
c0015f4a:	75 0a                	jne    c0015f56 <sendKeyboardToken(KeyboardToken)+0x160>
c0015f4c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015f52:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f59:	66 3d 12 03          	cmp    ax,0x312
c0015f5d:	75 0a                	jne    c0015f69 <sendKeyboardToken(KeyboardToken)+0x173>
c0015f5f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015f65:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6c:	66 3d 13 03          	cmp    ax,0x313
c0015f70:	75 0a                	jne    c0015f7c <sendKeyboardToken(KeyboardToken)+0x186>
c0015f72:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015f78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7f:	66 3d 14 03          	cmp    ax,0x314
c0015f83:	75 0a                	jne    c0015f8f <sendKeyboardToken(KeyboardToken)+0x199>
c0015f85:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015f8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f92:	66 3d 15 03          	cmp    ax,0x315
c0015f96:	75 0a                	jne    c0015fa2 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015f98:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa5:	66 3d 16 03          	cmp    ax,0x316
c0015fa9:	75 0a                	jne    c0015fb5 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015fab:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015fb1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb8:	66 3d 17 03          	cmp    ax,0x317
c0015fbc:	75 0a                	jne    c0015fc8 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015fbe:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015fc4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fcb:	66 3d 18 03          	cmp    ax,0x318
c0015fcf:	75 0a                	jne    c0015fdb <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015fd1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015fd7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fde:	66 3d 19 03          	cmp    ax,0x319
c0015fe2:	75 0a                	jne    c0015fee <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fe4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015fea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff1:	66 3d 00 02          	cmp    ax,0x200
c0015ff5:	75 2c                	jne    c0016023 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015ff7:	a0 a0 eb 02 c0       	mov    al,ds:0xc002eba0
c0015ffc:	83 f0 01             	xor    eax,0x1
c0015fff:	84 c0                	test   al,al
c0016001:	74 20                	je     c0016023 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016003:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0016008:	6a 01                	push   0x1
c001600a:	6a 00                	push   0x0
c001600c:	68 d2 5c 01 c0       	push   0xc0015cd2
c0016011:	50                   	push   eax
c0016012:	e8 7f 7e 00 00       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c0016017:	83 c4 10             	add    esp,0x10
c001601a:	c6 05 a0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eba0,0x1
c0016021:	eb 33                	jmp    c0016056 <sendKeyboardToken(KeyboardToken)+0x260>
c0016023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016026:	66 3d 01 02          	cmp    ax,0x201
c001602a:	75 2a                	jne    c0016056 <sendKeyboardToken(KeyboardToken)+0x260>
c001602c:	a0 a0 eb 02 c0       	mov    al,ds:0xc002eba0
c0016031:	83 f0 01             	xor    eax,0x1
c0016034:	84 c0                	test   al,al
c0016036:	74 1e                	je     c0016056 <sendKeyboardToken(KeyboardToken)+0x260>
c0016038:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001603d:	6a 01                	push   0x1
c001603f:	6a 00                	push   0x0
c0016041:	68 2e 5d 01 c0       	push   0xc0015d2e
c0016046:	50                   	push   eax
c0016047:	e8 4a 7e 00 00       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c001604c:	83 c4 10             	add    esp,0x10
c001604f:	c6 05 a0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eba0,0x1
c0016056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016059:	66 3d 1d 03          	cmp    ax,0x31d
c001605d:	75 06                	jne    c0016065 <sendKeyboardToken(KeyboardToken)+0x26f>
c001605f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016068:	66 3d 1c 03          	cmp    ax,0x31c
c001606c:	75 06                	jne    c0016074 <sendKeyboardToken(KeyboardToken)+0x27e>
c001606e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016077:	66 3d 1b 03          	cmp    ax,0x31b
c001607b:	75 06                	jne    c0016083 <sendKeyboardToken(KeyboardToken)+0x28d>
c001607d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016086:	66 3d 1e 03          	cmp    ax,0x31e
c001608a:	75 06                	jne    c0016092 <sendKeyboardToken(KeyboardToken)+0x29c>
c001608c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016095:	66 3d 1f 03          	cmp    ax,0x31f
c0016099:	75 06                	jne    c00160a1 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001609b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00160a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a4:	66 3d 1a 03          	cmp    ax,0x31a
c00160a8:	75 06                	jne    c00160b0 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00160aa:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00160b0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00160b4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160b7:	83 f0 01             	xor    eax,0x1
c00160ba:	84 c0                	test   al,al
c00160bc:	74 77                	je     c0016135 <sendKeyboardToken(KeyboardToken)+0x33f>
c00160be:	a0 a1 e8 02 c0       	mov    al,ds:0xc002e8a1
c00160c3:	84 c0                	test   al,al
c00160c5:	74 41                	je     c0016108 <sendKeyboardToken(KeyboardToken)+0x312>
c00160c7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160cb:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00160cf:	74 2b                	je     c00160fc <sendKeyboardToken(KeyboardToken)+0x306>
c00160d1:	8b 15 a4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eba4
c00160d7:	89 d0                	mov    eax,edx
c00160d9:	c1 e0 02             	shl    eax,0x2
c00160dc:	01 d0                	add    eax,edx
c00160de:	01 c0                	add    eax,eax
c00160e0:	a3 a4 eb 02 c0       	mov    ds:0xc002eba4,eax
c00160e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e8:	0f b7 c0             	movzx  eax,ax
c00160eb:	8d 50 d0             	lea    edx,[eax-0x30]
c00160ee:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c00160f3:	01 d0                	add    eax,edx
c00160f5:	a3 a4 eb 02 c0       	mov    ds:0xc002eba4,eax
c00160fa:	eb 6d                	jmp    c0016169 <sendKeyboardToken(KeyboardToken)+0x373>
c00160fc:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c0016106:	eb 61                	jmp    c0016169 <sendKeyboardToken(KeyboardToken)+0x373>
c0016108:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c001610d:	85 c0                	test   eax,eax
c001610f:	74 18                	je     c0016129 <sendKeyboardToken(KeyboardToken)+0x333>
c0016111:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c0016116:	0f b6 c0             	movzx  eax,al
c0016119:	83 ec 0c             	sub    esp,0xc
c001611c:	50                   	push   eax
c001611d:	e8 68 fc ff ff       	call   c0015d8a <sendKeyToTerminal(unsigned char)>
c0016122:	83 c4 10             	add    esp,0x10
c0016125:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016129:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c0016133:	eb 34                	jmp    c0016169 <sendKeyboardToken(KeyboardToken)+0x373>
c0016135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016138:	66 3d 01 01          	cmp    ax,0x101
c001613c:	75 2b                	jne    c0016169 <sendKeyboardToken(KeyboardToken)+0x373>
c001613e:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c0016143:	85 c0                	test   eax,eax
c0016145:	74 18                	je     c001615f <sendKeyboardToken(KeyboardToken)+0x369>
c0016147:	a1 a4 eb 02 c0       	mov    eax,ds:0xc002eba4
c001614c:	0f b6 c0             	movzx  eax,al
c001614f:	83 ec 0c             	sub    esp,0xc
c0016152:	50                   	push   eax
c0016153:	e8 32 fc ff ff       	call   c0015d8a <sendKeyToTerminal(unsigned char)>
c0016158:	83 c4 10             	add    esp,0x10
c001615b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001615f:	c7 05 a4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eba4,0x0
c0016169:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001616c:	83 f0 01             	xor    eax,0x1
c001616f:	84 c0                	test   al,al
c0016171:	74 4c                	je     c00161bf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016173:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016176:	83 f0 01             	xor    eax,0x1
c0016179:	84 c0                	test   al,al
c001617b:	74 42                	je     c00161bf <sendKeyboardToken(KeyboardToken)+0x3c9>
c001617d:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c0016182:	83 f0 01             	xor    eax,0x1
c0016185:	84 c0                	test   al,al
c0016187:	74 36                	je     c00161bf <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618c:	66 83 f8 1f          	cmp    ax,0x1f
c0016190:	76 09                	jbe    c001619b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016195:	66 83 f8 7e          	cmp    ax,0x7e
c0016199:	76 12                	jbe    c00161ad <sendKeyboardToken(KeyboardToken)+0x3b7>
c001619b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619e:	66 83 f8 0a          	cmp    ax,0xa
c00161a2:	74 09                	je     c00161ad <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a7:	66 83 f8 08          	cmp    ax,0x8
c00161ab:	75 12                	jne    c00161bf <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b0:	0f b6 c0             	movzx  eax,al
c00161b3:	83 ec 0c             	sub    esp,0xc
c00161b6:	50                   	push   eax
c00161b7:	e8 ce fb ff ff       	call   c0015d8a <sendKeyToTerminal(unsigned char)>
c00161bc:	83 c4 10             	add    esp,0x10
c00161bf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161c2:	83 f0 01             	xor    eax,0x1
c00161c5:	84 c0                	test   al,al
c00161c7:	74 4f                	je     c0016218 <sendKeyboardToken(KeyboardToken)+0x422>
c00161c9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161cc:	83 f0 01             	xor    eax,0x1
c00161cf:	84 c0                	test   al,al
c00161d1:	74 45                	je     c0016218 <sendKeyboardToken(KeyboardToken)+0x422>
c00161d3:	a0 a0 e8 02 c0       	mov    al,ds:0xc002e8a0
c00161d8:	84 c0                	test   al,al
c00161da:	74 3c                	je     c0016218 <sendKeyboardToken(KeyboardToken)+0x422>
c00161dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161df:	66 83 f8 3f          	cmp    ax,0x3f
c00161e3:	76 33                	jbe    c0016218 <sendKeyboardToken(KeyboardToken)+0x422>
c00161e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e8:	66 83 f8 7f          	cmp    ax,0x7f
c00161ec:	77 2a                	ja     c0016218 <sendKeyboardToken(KeyboardToken)+0x422>
c00161ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f1:	88 c2                	mov    dl,al
c00161f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f6:	66 83 f8 5f          	cmp    ax,0x5f
c00161fa:	76 04                	jbe    c0016200 <sendKeyboardToken(KeyboardToken)+0x40a>
c00161fc:	b0 20                	mov    al,0x20
c00161fe:	eb 02                	jmp    c0016202 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016200:	b0 00                	mov    al,0x0
c0016202:	29 c2                	sub    edx,eax
c0016204:	88 d0                	mov    al,dl
c0016206:	83 e8 40             	sub    eax,0x40
c0016209:	0f b6 c0             	movzx  eax,al
c001620c:	83 ec 0c             	sub    esp,0xc
c001620f:	50                   	push   eax
c0016210:	e8 75 fb ff ff       	call   c0015d8a <sendKeyToTerminal(unsigned char)>
c0016215:	83 c4 10             	add    esp,0x10
c0016218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621b:	66 3d 00 03          	cmp    ax,0x300
c001621f:	75 0f                	jne    c0016230 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016221:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016224:	83 f0 01             	xor    eax,0x1
c0016227:	84 c0                	test   al,al
c0016229:	74 05                	je     c0016230 <sendKeyboardToken(KeyboardToken)+0x43a>
c001622b:	e8 af ab ff ff       	call   c0010ddf <doTerminalCycle()>
c0016230:	90                   	nop
c0016231:	c9                   	leave  
c0016232:	c3                   	ret    

c0016233 <clearInternalKeybuffer(VgaText*)>:
c0016233:	55                   	push   ebp
c0016234:	89 e5                	mov    ebp,esp
c0016236:	83 ec 08             	sub    esp,0x8
c0016239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623c:	05 34 11 00 00       	add    eax,0x1134
c0016241:	83 ec 0c             	sub    esp,0xc
c0016244:	50                   	push   eax
c0016245:	e8 4a a5 fe ff       	call   c0000794 <strlen>
c001624a:	83 c4 10             	add    esp,0x10
c001624d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016250:	81 c2 34 11 00 00    	add    edx,0x1134
c0016256:	83 ec 04             	sub    esp,0x4
c0016259:	50                   	push   eax
c001625a:	6a 00                	push   0x0
c001625c:	52                   	push   edx
c001625d:	e8 16 a5 fe ff       	call   c0000778 <memset>
c0016262:	83 c4 10             	add    esp,0x10
c0016265:	90                   	nop
c0016266:	c9                   	leave  
c0016267:	c3                   	ret    

c0016268 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016268:	55                   	push   ebp
c0016269:	89 e5                	mov    ebp,esp
c001626b:	83 ec 18             	sub    esp,0x18
c001626e:	fb                   	sti    
c001626f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016276:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001627a:	0f 84 8a 00 00 00    	je     c001630a <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016283:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016289:	84 c0                	test   al,al
c001628b:	75 11                	jne    c001629e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001628d:	e8 d3 7a 00 00       	call   c001dd65 <lockScheduler()>
c0016292:	e8 09 7e 00 00       	call   c001e0a0 <schedule()>
c0016297:	e8 cb 7a 00 00       	call   c001dd67 <unlockScheduler()>
c001629c:	eb e2                	jmp    c0016280 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001629e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00162a1:	8d 50 01             	lea    edx,[eax+0x1]
c00162a4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00162a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162aa:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00162b0:	88 10                	mov    BYTE PTR [eax],dl
c00162b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b5:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162bb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00162be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c1:	05 34 11 00 00       	add    eax,0x1134
c00162c6:	83 ec 0c             	sub    esp,0xc
c00162c9:	50                   	push   eax
c00162ca:	e8 c5 a4 fe ff       	call   c0000794 <strlen>
c00162cf:	83 c4 10             	add    esp,0x10
c00162d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162d5:	81 c2 34 11 00 00    	add    edx,0x1134
c00162db:	8d 4a 01             	lea    ecx,[edx+0x1]
c00162de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e1:	81 c2 34 11 00 00    	add    edx,0x1134
c00162e7:	83 ec 04             	sub    esp,0x4
c00162ea:	50                   	push   eax
c00162eb:	51                   	push   ecx
c00162ec:	52                   	push   edx
c00162ed:	e8 8a a3 fe ff       	call   c000067c <memmove>
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00162f8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00162fb:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00162ff:	0f 85 71 ff ff ff    	jne    c0016276 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016305:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016308:	eb 03                	jmp    c001630d <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001630a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001630d:	c9                   	leave  
c001630e:	c3                   	ret    
c001630f:	90                   	nop

c0016310 <Keyboard::Keyboard(char const*)>:
c0016310:	83 ec 0c             	sub    esp,0xc
c0016313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016317:	83 ec 08             	sub    esp,0x8
c001631a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001631e:	50                   	push   eax
c001631f:	e8 b8 e1 ff ff       	call   c00144dc <Device::Device(char const*)>
c0016324:	83 c4 10             	add    esp,0x10
c0016327:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c001632c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016330:	89 10                	mov    DWORD PTR [eax],edx
c0016332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016336:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016340:	c6 05 84 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e784,0x1
c0016347:	90                   	nop
c0016348:	83 c4 0c             	add    esp,0xc
c001634b:	c3                   	ret    

c001634c <Keyboard::~Keyboard()>:
c001634c:	83 ec 0c             	sub    esp,0xc
c001634f:	ba ec b0 02 c0       	mov    edx,0xc002b0ec
c0016354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016358:	89 10                	mov    DWORD PTR [eax],edx
c001635a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	50                   	push   eax
c0016362:	e8 57 de ff ff       	call   c00141be <Device::~Device()>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	90                   	nop
c001636b:	83 c4 0c             	add    esp,0xc
c001636e:	c3                   	ret    
c001636f:	90                   	nop

c0016370 <Keyboard::~Keyboard()>:
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	83 ec 0c             	sub    esp,0xc
c0016376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001637a:	e8 cd ff ff ff       	call   c001634c <Keyboard::~Keyboard()>
c001637f:	83 c4 10             	add    esp,0x10
c0016382:	83 ec 08             	sub    esp,0x8
c0016385:	68 5c 01 00 00       	push   0x15c
c001638a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638e:	e8 53 ca ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0016393:	83 c4 10             	add    esp,0x10
c0016396:	83 c4 0c             	add    esp,0xc
c0016399:	c3                   	ret    

c001639a <LogicalDisk::close(int, int, void*)>:
c001639a:	83 c8 ff             	or     eax,0xffffffff
c001639d:	c3                   	ret    

c001639e <LogicalDisk::~LogicalDisk()>:
c001639e:	83 ec 0c             	sub    esp,0xc
c00163a1:	ba 9c b1 02 c0       	mov    edx,0xc002b19c
c00163a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163aa:	89 10                	mov    DWORD PTR [eax],edx
c00163ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b0:	83 ec 0c             	sub    esp,0xc
c00163b3:	50                   	push   eax
c00163b4:	e8 05 de ff ff       	call   c00141be <Device::~Device()>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	90                   	nop
c00163bd:	83 c4 0c             	add    esp,0xc
c00163c0:	c3                   	ret    
c00163c1:	90                   	nop

c00163c2 <LogicalDisk::~LogicalDisk()>:
c00163c2:	83 ec 0c             	sub    esp,0xc
c00163c5:	83 ec 0c             	sub    esp,0xc
c00163c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163cc:	e8 cd ff ff ff       	call   c001639e <LogicalDisk::~LogicalDisk()>
c00163d1:	83 c4 10             	add    esp,0x10
c00163d4:	83 ec 08             	sub    esp,0x8
c00163d7:	68 74 01 00 00       	push   0x174
c00163dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e0:	e8 01 ca ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00163e5:	83 c4 10             	add    esp,0x10
c00163e8:	83 c4 0c             	add    esp,0xc
c00163eb:	c3                   	ret    

c00163ec <LogicalDisk::open(int, int, void*)>:
c00163ec:	83 ec 18             	sub    esp,0x18
c00163ef:	68 18 b1 02 c0       	push   0xc002b118
c00163f4:	e8 72 41 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00163f9:	83 c8 ff             	or     eax,0xffffffff
c00163fc:	83 c4 1c             	add    esp,0x1c
c00163ff:	c3                   	ret    

c0016400 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016400:	53                   	push   ebx
c0016401:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016405:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016409:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001640d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016413:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016419:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001641f:	77 10                	ja     c0016431 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016421:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016427:	89 d3                	mov    ebx,edx
c0016429:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001642f:	72 05                	jb     c0016436 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016431:	83 c8 ff             	or     eax,0xffffffff
c0016434:	89 c2                	mov    edx,eax
c0016436:	5b                   	pop    ebx
c0016437:	c3                   	ret    

c0016438 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016438:	56                   	push   esi
c0016439:	83 c8 ff             	or     eax,0xffffffff
c001643c:	53                   	push   ebx
c001643d:	89 c2                	mov    edx,eax
c001643f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016443:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016447:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001644b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016451:	77 27                	ja     c001647a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016453:	89 d8                	mov    eax,ebx
c0016455:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001645b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016461:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016466:	89 c2                	mov    edx,eax
c0016468:	73 10                	jae    c001647a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001646a:	89 c8                	mov    eax,ecx
c001646c:	89 da                	mov    edx,ebx
c001646e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016474:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001647a:	5b                   	pop    ebx
c001647b:	5e                   	pop    esi
c001647c:	c3                   	ret    
c001647d:	90                   	nop

c001647e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001647e:	83 ec 1c             	sub    esp,0x1c
c0016481:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016485:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001648d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016491:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016495:	89 04 24             	mov    DWORD PTR [esp],eax
c0016498:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001649c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164a4:	83 ec 08             	sub    esp,0x8
c00164a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164ab:	50                   	push   eax
c00164ac:	e8 2b e0 ff ff       	call   c00144dc <Device::Device(char const*)>
c00164b1:	83 c4 10             	add    esp,0x10
c00164b4:	ba 9c b1 02 c0       	mov    edx,0xc002b19c
c00164b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164bd:	89 10                	mov    DWORD PTR [eax],edx
c00164bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164c3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164ce:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164d9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00164e3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164ef:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00164f5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00164fb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016502:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016506:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001650c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001651a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016524:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001652e:	90                   	nop
c001652f:	83 c4 1c             	add    esp,0x1c
c0016532:	c3                   	ret    
c0016533:	90                   	nop

c0016534 <LogicalDisk::assignDriveLetter()>:
c0016534:	55                   	push   ebp
c0016535:	57                   	push   edi
c0016536:	56                   	push   esi
c0016537:	53                   	push   ebx
c0016538:	83 ec 14             	sub    esp,0x14
c001653b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001653f:	8b 3d c0 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebc0
c0016545:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001654b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001654f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016555:	8b 3d c4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebc4
c001655b:	3c 01                	cmp    al,0x1
c001655d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016561:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016565:	19 c0                	sbb    eax,eax
c0016567:	83 e0 02             	and    eax,0x2
c001656a:	83 c0 41             	add    eax,0x41
c001656d:	0f be e8             	movsx  ebp,al
c0016570:	3c 43                	cmp    al,0x43
c0016572:	75 10                	jne    c0016584 <LogicalDisk::assignDriveLetter()+0x50>
c0016574:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001657b:	75 5d                	jne    c00165da <LogicalDisk::assignDriveLetter()+0xa6>
c001657d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016582:	75 56                	jne    c00165da <LogicalDisk::assignDriveLetter()+0xa6>
c0016584:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016587:	ba 01 00 00 00       	mov    edx,0x1
c001658c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016590:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016594:	d3 e2                	shl    edx,cl
c0016596:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001659a:	89 d7                	mov    edi,edx
c001659c:	89 d6                	mov    esi,edx
c001659e:	c1 ff 1f             	sar    edi,0x1f
c00165a1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00165a5:	21 f9                	and    ecx,edi
c00165a7:	09 d1                	or     ecx,edx
c00165a9:	75 2f                	jne    c00165da <LogicalDisk::assignDriveLetter()+0xa6>
c00165ab:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00165af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165b3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00165b9:	09 f2                	or     edx,esi
c00165bb:	89 15 c0 eb 02 c0    	mov    DWORD PTR ds:0xc002ebc0,edx
c00165c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165c5:	09 fa                	or     edx,edi
c00165c7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00165cb:	89 15 c4 eb 02 c0    	mov    DWORD PTR ds:0xc002ebc4,edx
c00165d1:	89 1c bd e0 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1420],ebx
c00165d8:	eb 08                	jmp    c00165e2 <LogicalDisk::assignDriveLetter()+0xae>
c00165da:	45                   	inc    ebp
c00165db:	40                   	inc    eax
c00165dc:	3c 5b                	cmp    al,0x5b
c00165de:	75 90                	jne    c0016570 <LogicalDisk::assignDriveLetter()+0x3c>
c00165e0:	31 c0                	xor    eax,eax
c00165e2:	83 c4 14             	add    esp,0x14
c00165e5:	5b                   	pop    ebx
c00165e6:	5e                   	pop    esi
c00165e7:	5f                   	pop    edi
c00165e8:	5d                   	pop    ebp
c00165e9:	c3                   	ret    

c00165ea <LogicalDisk::mount()>:
c00165ea:	56                   	push   esi
c00165eb:	53                   	push   ebx
c00165ec:	51                   	push   ecx
c00165ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165f1:	8b 1d 48 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e748
c00165f7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016601:	85 db                	test   ebx,ebx
c0016603:	74 50                	je     c0016655 <LogicalDisk::mount()+0x6b>
c0016605:	e8 46 77 00 00       	call   c001dd50 <getIRQNestingLevel()>
c001660a:	52                   	push   edx
c001660b:	52                   	push   edx
c001660c:	50                   	push   eax
c001660d:	68 3c b1 02 c0       	push   0xc002b13c
c0016612:	e8 af c8 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0016617:	83 c4 0c             	add    esp,0xc
c001661a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016621:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016623:	83 e8 41             	sub    eax,0x41
c0016626:	50                   	push   eax
c0016627:	56                   	push   esi
c0016628:	53                   	push   ebx
c0016629:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001662c:	83 c4 10             	add    esp,0x10
c001662f:	84 c0                	test   al,al
c0016631:	74 08                	je     c001663b <LogicalDisk::mount()+0x51>
c0016633:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016639:	eb 1c                	jmp    c0016657 <LogicalDisk::mount()+0x6d>
c001663b:	e8 10 77 00 00       	call   c001dd50 <getIRQNestingLevel()>
c0016640:	51                   	push   ecx
c0016641:	51                   	push   ecx
c0016642:	50                   	push   eax
c0016643:	68 57 b1 02 c0       	push   0xc002b157
c0016648:	e8 79 c8 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001664d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016650:	83 c4 10             	add    esp,0x10
c0016653:	eb ac                	jmp    c0016601 <LogicalDisk::mount()+0x17>
c0016655:	31 c0                	xor    eax,eax
c0016657:	5a                   	pop    edx
c0016658:	5b                   	pop    ebx
c0016659:	5e                   	pop    esi
c001665a:	c3                   	ret    
c001665b:	90                   	nop

c001665c <LogicalDisk::unmount()>:
c001665c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016660:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001666a:	c3                   	ret    
c001666b:	90                   	nop

c001666c <LogicalDisk::eject()>:
c001666c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016670:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016676:	8b 10                	mov    edx,DWORD PTR [eax]
c0016678:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001667c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001667f:	90                   	nop

c0016680 <LogicalDisk::unassignDriveLetter()>:
c0016680:	57                   	push   edi
c0016681:	56                   	push   esi
c0016682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016686:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001668d:	84 c9                	test   cl,cl
c001668f:	75 0f                	jne    c00166a0 <LogicalDisk::unassignDriveLetter()+0x20>
c0016691:	c7 44 24 0c 72 b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b172
c0016699:	5e                   	pop    esi
c001669a:	5f                   	pop    edi
c001669b:	e9 cb 3e 00 00       	jmp    c001a56b <Krnl::panic(char const*)>
c00166a0:	83 e9 41             	sub    ecx,0x41
c00166a3:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00166aa:	b8 01 00 00 00       	mov    eax,0x1
c00166af:	c7 04 8d e0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1420],0x0
c00166ba:	d3 e0                	shl    eax,cl
c00166bc:	89 c7                	mov    edi,eax
c00166be:	f7 d0                	not    eax
c00166c0:	c1 ff 1f             	sar    edi,0x1f
c00166c3:	21 05 c0 eb 02 c0    	and    DWORD PTR ds:0xc002ebc0,eax
c00166c9:	89 fe                	mov    esi,edi
c00166cb:	f7 d6                	not    esi
c00166cd:	21 35 c4 eb 02 c0    	and    DWORD PTR ds:0xc002ebc4,esi
c00166d3:	5e                   	pop    esi
c00166d4:	5f                   	pop    edi
c00166d5:	c3                   	ret    

c00166d6 <LogicalDisk::read(unsigned long long, int, void*)>:
c00166d6:	57                   	push   edi
c00166d7:	56                   	push   esi
c00166d8:	53                   	push   ebx
c00166d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00166dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166e9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00166ef:	77 41                	ja     c0016732 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00166f1:	99                   	cdq    
c00166f2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00166f8:	01 c8                	add    eax,ecx
c00166fa:	11 da                	adc    edx,ebx
c00166fc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016702:	19 d7                	sbb    edi,edx
c0016704:	72 33                	jb     c0016739 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016706:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001670c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016712:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016716:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001671a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016720:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016726:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001672a:	5b                   	pop    ebx
c001672b:	5e                   	pop    esi
c001672c:	5f                   	pop    edi
c001672d:	e9 b0 0a 00 00       	jmp    c00171e2 <VCache::read(unsigned long long, int, void*)>
c0016732:	b8 05 00 00 00       	mov    eax,0x5
c0016737:	eb 05                	jmp    c001673e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016739:	b8 07 00 00 00       	mov    eax,0x7
c001673e:	5b                   	pop    ebx
c001673f:	5e                   	pop    esi
c0016740:	5f                   	pop    edi
c0016741:	c3                   	ret    

c0016742 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016742:	57                   	push   edi
c0016743:	56                   	push   esi
c0016744:	53                   	push   ebx
c0016745:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016749:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001674d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016751:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016755:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001675b:	77 41                	ja     c001679e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001675d:	99                   	cdq    
c001675e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016764:	01 c8                	add    eax,ecx
c0016766:	11 da                	adc    edx,ebx
c0016768:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001676e:	19 d7                	sbb    edi,edx
c0016770:	72 33                	jb     c00167a5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016772:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016778:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001677e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016782:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016786:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001678c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016792:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016796:	5b                   	pop    ebx
c0016797:	5e                   	pop    esi
c0016798:	5f                   	pop    edi
c0016799:	e9 4e 09 00 00       	jmp    c00170ec <VCache::write(unsigned long long, int, void*)>
c001679e:	b8 05 00 00 00       	mov    eax,0x5
c00167a3:	eb 05                	jmp    c00167aa <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00167a5:	b8 07 00 00 00       	mov    eax,0x7
c00167aa:	5b                   	pop    ebx
c00167ab:	5e                   	pop    esi
c00167ac:	5f                   	pop    edi
c00167ad:	c3                   	ret    

c00167ae <Mouse::Mouse(char const*)>:
c00167ae:	83 ec 0c             	sub    esp,0xc
c00167b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b5:	83 ec 08             	sub    esp,0x8
c00167b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167bc:	50                   	push   eax
c00167bd:	e8 1a dd ff ff       	call   c00144dc <Device::Device(char const*)>
c00167c2:	83 c4 10             	add    esp,0x10
c00167c5:	ba c8 b1 02 c0       	mov    edx,0xc002b1c8
c00167ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ce:	89 10                	mov    DWORD PTR [eax],edx
c00167d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d4:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00167de:	90                   	nop
c00167df:	83 c4 0c             	add    esp,0xc
c00167e2:	c3                   	ret    
c00167e3:	90                   	nop

c00167e4 <Mouse::~Mouse()>:
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	ba c8 b1 02 c0       	mov    edx,0xc002b1c8
c00167ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f0:	89 10                	mov    DWORD PTR [eax],edx
c00167f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f6:	83 ec 0c             	sub    esp,0xc
c00167f9:	50                   	push   eax
c00167fa:	e8 bf d9 ff ff       	call   c00141be <Device::~Device()>
c00167ff:	83 c4 10             	add    esp,0x10
c0016802:	90                   	nop
c0016803:	83 c4 0c             	add    esp,0xc
c0016806:	c3                   	ret    
c0016807:	90                   	nop

c0016808 <Mouse::~Mouse()>:
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	83 ec 0c             	sub    esp,0xc
c001680e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016812:	e8 cd ff ff ff       	call   c00167e4 <Mouse::~Mouse()>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	83 ec 08             	sub    esp,0x8
c001681d:	68 58 01 00 00       	push   0x158
c0016822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016826:	e8 bb c5 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c001682b:	83 c4 10             	add    esp,0x10
c001682e:	83 c4 0c             	add    esp,0xc
c0016831:	c3                   	ret    

c0016832 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016832:	55                   	push   ebp
c0016833:	57                   	push   edi
c0016834:	56                   	push   esi
c0016835:	53                   	push   ebx
c0016836:	81 ec 28 01 00 00    	sub    esp,0x128
c001683c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016843:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001684a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016851:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016858:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001685c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016860:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016867:	e8 6c dd ff ff       	call   c00145d8 <Device::getName()>
c001686c:	5a                   	pop    edx
c001686d:	59                   	pop    ecx
c001686e:	50                   	push   eax
c001686f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016873:	55                   	push   ebp
c0016874:	e8 bb 9f fe ff       	call   c0000834 <strcpy>
c0016879:	5b                   	pop    ebx
c001687a:	58                   	pop    eax
c001687b:	68 ec b1 02 c0       	push   0xc002b1ec
c0016880:	55                   	push   ebp
c0016881:	e8 ee a0 fe ff       	call   c0000974 <strcat>
c0016886:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001688d:	e8 b1 8f ff ff       	call   c000f843 <malloc>
c0016892:	83 c4 0c             	add    esp,0xc
c0016895:	89 c3                	mov    ebx,eax
c0016897:	57                   	push   edi
c0016898:	56                   	push   esi
c0016899:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001689d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168a1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00168a8:	55                   	push   ebp
c00168a9:	50                   	push   eax
c00168aa:	e8 cf fb ff ff       	call   c001647e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00168af:	83 c4 14             	add    esp,0x14
c00168b2:	53                   	push   ebx
c00168b3:	e8 7c fc ff ff       	call   c0016534 <LogicalDisk::assignDriveLetter()>
c00168b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168bb:	89 c6                	mov    esi,eax
c00168bd:	e8 28 fd ff ff       	call   c00165ea <LogicalDisk::mount()>
c00168c2:	58                   	pop    eax
c00168c3:	5a                   	pop    edx
c00168c4:	53                   	push   ebx
c00168c5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168cc:	e8 1b da ff ff       	call   c00142ec <Device::addChild(Device*)>
c00168d1:	59                   	pop    ecx
c00168d2:	89 f0                	mov    eax,esi
c00168d4:	5b                   	pop    ebx
c00168d5:	0f be f0             	movsx  esi,al
c00168d8:	56                   	push   esi
c00168d9:	68 f7 b1 02 c0       	push   0xc002b1f7
c00168de:	e8 e3 c5 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00168e3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168e9:	5b                   	pop    ebx
c00168ea:	5e                   	pop    esi
c00168eb:	5f                   	pop    edi
c00168ec:	5d                   	pop    ebp
c00168ed:	c3                   	ret    

c00168ee <createPartitionsForDisk(PhysicalDisk*)>:
c00168ee:	55                   	push   ebp
c00168ef:	57                   	push   edi
c00168f0:	56                   	push   esi
c00168f1:	53                   	push   ebx
c00168f2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00168f8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00168ff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016905:	3d 00 02 00 00       	cmp    eax,0x200
c001690a:	74 27                	je     c0016933 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001690c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016912:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016918:	83 ec 10             	sub    esp,0x10
c001691b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001691f:	99                   	cdq    
c0016920:	c1 e6 0a             	shl    esi,0xa
c0016923:	52                   	push   edx
c0016924:	89 fd                	mov    ebp,edi
c0016926:	50                   	push   eax
c0016927:	55                   	push   ebp
c0016928:	56                   	push   esi
c0016929:	e8 3e 00 01 00       	call   c002696c <__udivdi3>
c001692e:	e9 b1 00 00 00       	jmp    c00169e4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016933:	83 ec 0c             	sub    esp,0xc
c0016936:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016938:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001693c:	56                   	push   esi
c001693d:	6a 01                	push   0x1
c001693f:	6a 00                	push   0x0
c0016941:	6a 00                	push   0x0
c0016943:	53                   	push   ebx
c0016944:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016947:	83 c4 20             	add    esp,0x20
c001694a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016952:	75 0a                	jne    c001695e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016954:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001695c:	74 2c                	je     c001698a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001695e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016964:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001696a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016970:	83 ec 10             	sub    esp,0x10
c0016973:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016977:	89 f7                	mov    edi,esi
c0016979:	c1 e0 0a             	shl    eax,0xa
c001697c:	c1 ff 1f             	sar    edi,0x1f
c001697f:	57                   	push   edi
c0016980:	56                   	push   esi
c0016981:	52                   	push   edx
c0016982:	50                   	push   eax
c0016983:	e8 e4 ff 00 00       	call   c002696c <__udivdi3>
c0016988:	eb 5a                	jmp    c00169e4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001698a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016991:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016998:	83 e1 7f             	and    ecx,0x7f
c001699b:	83 e0 7f             	and    eax,0x7f
c001699e:	01 c1                	add    ecx,eax
c00169a0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00169a7:	83 e0 7f             	and    eax,0x7f
c00169aa:	01 c1                	add    ecx,eax
c00169ac:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00169b3:	83 e0 7f             	and    eax,0x7f
c00169b6:	00 c1                	add    cl,al
c00169b8:	74 41                	je     c00169fb <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00169ba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169c0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169c6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169cc:	83 ec 10             	sub    esp,0x10
c00169cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169d3:	89 f7                	mov    edi,esi
c00169d5:	c1 e0 0a             	shl    eax,0xa
c00169d8:	c1 ff 1f             	sar    edi,0x1f
c00169db:	57                   	push   edi
c00169dc:	56                   	push   esi
c00169dd:	52                   	push   edx
c00169de:	50                   	push   eax
c00169df:	e8 88 ff 00 00       	call   c002696c <__udivdi3>
c00169e4:	83 c4 14             	add    esp,0x14
c00169e7:	52                   	push   edx
c00169e8:	50                   	push   eax
c00169e9:	6a 00                	push   0x0
c00169eb:	6a 00                	push   0x0
c00169ed:	53                   	push   ebx
c00169ee:	e8 3f fe ff ff       	call   c0016832 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00169f3:	83 c4 20             	add    esp,0x20
c00169f6:	e9 79 01 00 00       	jmp    c0016b74 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00169fb:	89 f0                	mov    eax,esi
c00169fd:	31 f6                	xor    esi,esi
c00169ff:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a06:	75 02                	jne    c0016a0a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a08:	89 f1                	mov    ecx,esi
c0016a0a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a11:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a18:	c1 e2 08             	shl    edx,0x8
c0016a1b:	c1 e7 10             	shl    edi,0x10
c0016a1e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a26:	09 fa                	or     edx,edi
c0016a28:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a30:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a37:	83 c0 10             	add    eax,0x10
c0016a3a:	09 fa                	or     edx,edi
c0016a3c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a43:	c1 e7 18             	shl    edi,0x18
c0016a46:	09 fa                	or     edx,edi
c0016a48:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a4f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a53:	c1 e7 10             	shl    edi,0x10
c0016a56:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016a5d:	c1 e2 08             	shl    edx,0x8
c0016a60:	09 fa                	or     edx,edi
c0016a62:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016a69:	09 fa                	or     edx,edi
c0016a6b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016a72:	c1 e7 18             	shl    edi,0x18
c0016a75:	09 fa                	or     edx,edi
c0016a77:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016a7b:	46                   	inc    esi
c0016a7c:	83 fe 04             	cmp    esi,0x4
c0016a7f:	0f 85 7a ff ff ff    	jne    c00169ff <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a89:	83 f0 01             	xor    eax,0x1
c0016a8c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016a90:	75 57                	jne    c0016ae9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016a92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a96:	83 f0 01             	xor    eax,0x1
c0016a99:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016a9d:	75 4a                	jne    c0016ae9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016a9f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016aa3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016aab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ab3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ab9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016abf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ac5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ac9:	89 f7                	mov    edi,esi
c0016acb:	c1 e0 0a             	shl    eax,0xa
c0016ace:	c1 ff 1f             	sar    edi,0x1f
c0016ad1:	57                   	push   edi
c0016ad2:	56                   	push   esi
c0016ad3:	52                   	push   edx
c0016ad4:	50                   	push   eax
c0016ad5:	e8 92 fe 00 00       	call   c002696c <__udivdi3>
c0016ada:	83 c4 10             	add    esp,0x10
c0016add:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ae1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016ae9:	84 c9                	test   cl,cl
c0016aeb:	74 53                	je     c0016b40 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016aed:	0f b6 c9             	movzx  ecx,cl
c0016af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016af8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016afc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b08:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b0c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b14:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b20:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b24:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b28:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b2c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b30:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b34:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b38:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b3c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b40:	31 ed                	xor    ebp,ebp
c0016b42:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b46:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016b4a:	89 f8                	mov    eax,edi
c0016b4c:	09 f0                	or     eax,esi
c0016b4e:	74 1e                	je     c0016b6e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b50:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016b54:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016b58:	89 d1                	mov    ecx,edx
c0016b5a:	09 c1                	or     ecx,eax
c0016b5c:	74 10                	je     c0016b6e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b5e:	83 ec 0c             	sub    esp,0xc
c0016b61:	57                   	push   edi
c0016b62:	56                   	push   esi
c0016b63:	52                   	push   edx
c0016b64:	50                   	push   eax
c0016b65:	53                   	push   ebx
c0016b66:	e8 c7 fc ff ff       	call   c0016832 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b6b:	83 c4 20             	add    esp,0x20
c0016b6e:	45                   	inc    ebp
c0016b6f:	83 fd 04             	cmp    ebp,0x4
c0016b72:	75 ce                	jne    c0016b42 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016b74:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016b7a:	5b                   	pop    ebx
c0016b7b:	5e                   	pop    esi
c0016b7c:	5f                   	pop    edi
c0016b7d:	5d                   	pop    ebp
c0016b7e:	c3                   	ret    
c0016b7f:	90                   	nop

c0016b80 <Serial::Serial(char const*)>:
c0016b80:	83 ec 0c             	sub    esp,0xc
c0016b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b87:	83 ec 08             	sub    esp,0x8
c0016b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b8e:	50                   	push   eax
c0016b8f:	e8 48 d9 ff ff       	call   c00144dc <Device::Device(char const*)>
c0016b94:	83 c4 10             	add    esp,0x10
c0016b97:	ba 24 b2 02 c0       	mov    edx,0xc002b224
c0016b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ba0:	89 10                	mov    DWORD PTR [eax],edx
c0016ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ba6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016bb0:	90                   	nop
c0016bb1:	83 c4 0c             	add    esp,0xc
c0016bb4:	c3                   	ret    
c0016bb5:	90                   	nop

c0016bb6 <Serial::~Serial()>:
c0016bb6:	83 ec 0c             	sub    esp,0xc
c0016bb9:	ba 24 b2 02 c0       	mov    edx,0xc002b224
c0016bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc2:	89 10                	mov    DWORD PTR [eax],edx
c0016bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bc8:	83 ec 0c             	sub    esp,0xc
c0016bcb:	50                   	push   eax
c0016bcc:	e8 ed d5 ff ff       	call   c00141be <Device::~Device()>
c0016bd1:	83 c4 10             	add    esp,0x10
c0016bd4:	90                   	nop
c0016bd5:	83 c4 0c             	add    esp,0xc
c0016bd8:	c3                   	ret    
c0016bd9:	90                   	nop

c0016bda <Serial::~Serial()>:
c0016bda:	83 ec 0c             	sub    esp,0xc
c0016bdd:	83 ec 0c             	sub    esp,0xc
c0016be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016be4:	e8 cd ff ff ff       	call   c0016bb6 <Serial::~Serial()>
c0016be9:	83 c4 10             	add    esp,0x10
c0016bec:	83 ec 08             	sub    esp,0x8
c0016bef:	68 58 01 00 00       	push   0x158
c0016bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bf8:	e8 e9 c1 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0016bfd:	83 c4 10             	add    esp,0x10
c0016c00:	83 c4 0c             	add    esp,0xc
c0016c03:	c3                   	ret    

c0016c04 <Timer::Timer(char const*)>:
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0b:	83 ec 08             	sub    esp,0x8
c0016c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c12:	50                   	push   eax
c0016c13:	e8 c4 d8 ff ff       	call   c00144dc <Device::Device(char const*)>
c0016c18:	83 c4 10             	add    esp,0x10
c0016c1b:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0016c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c24:	89 10                	mov    DWORD PTR [eax],edx
c0016c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c34:	90                   	nop
c0016c35:	83 c4 0c             	add    esp,0xc
c0016c38:	c3                   	ret    
c0016c39:	90                   	nop

c0016c3a <Timer::~Timer()>:
c0016c3a:	83 ec 0c             	sub    esp,0xc
c0016c3d:	ba 68 b2 02 c0       	mov    edx,0xc002b268
c0016c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c46:	89 10                	mov    DWORD PTR [eax],edx
c0016c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	50                   	push   eax
c0016c50:	e8 69 d5 ff ff       	call   c00141be <Device::~Device()>
c0016c55:	83 c4 10             	add    esp,0x10
c0016c58:	90                   	nop
c0016c59:	83 c4 0c             	add    esp,0xc
c0016c5c:	c3                   	ret    
c0016c5d:	90                   	nop

c0016c5e <Timer::~Timer()>:
c0016c5e:	83 ec 0c             	sub    esp,0xc
c0016c61:	83 ec 0c             	sub    esp,0xc
c0016c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c68:	e8 cd ff ff ff       	call   c0016c3a <Timer::~Timer()>
c0016c6d:	83 c4 10             	add    esp,0x10
c0016c70:	83 ec 08             	sub    esp,0x8
c0016c73:	68 5c 01 00 00       	push   0x15c
c0016c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7c:	e8 65 c1 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0016c81:	83 c4 10             	add    esp,0x10
c0016c84:	83 c4 0c             	add    esp,0xc
c0016c87:	c3                   	ret    

c0016c88 <Timer::read()>:
c0016c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c8c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c92:	c3                   	ret    

c0016c93 <timerHandler(unsigned long long)>:
c0016c93:	55                   	push   ebp
c0016c94:	57                   	push   edi
c0016c95:	56                   	push   esi
c0016c96:	53                   	push   ebx
c0016c97:	83 ec 0c             	sub    esp,0xc
c0016c9a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016c9e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016ca2:	01 35 50 ec 02 c0    	add    DWORD PTR ds:0xc002ec50,esi
c0016ca8:	11 3d 54 ec 02 c0    	adc    DWORD PTR ds:0xc002ec54,edi
c0016cae:	80 3d 8d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38d,0x0
c0016cb5:	0f 84 07 01 00 00    	je     c0016dc2 <timerHandler(unsigned long long)+0x12f>
c0016cbb:	e8 cc 70 00 00       	call   c001dd8c <lockStuff()>
c0016cc0:	83 ec 0c             	sub    esp,0xc
c0016cc3:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016cc8:	e8 11 1d 01 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ccd:	c7 04 24 1c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b1c
c0016cd4:	89 c3                	mov    ebx,eax
c0016cd6:	e8 0b 1d 01 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	84 c0                	test   al,al
c0016ce0:	74 60                	je     c0016d42 <timerHandler(unsigned long long)+0xaf>
c0016ce2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ce8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016ceb:	85 c0                	test   eax,eax
c0016ced:	0f 85 91 00 00 00    	jne    c0016d84 <timerHandler(unsigned long long)+0xf1>
c0016cf3:	e9 be 00 00 00       	jmp    c0016db6 <timerHandler(unsigned long long)+0x123>
c0016cf8:	83 ec 0c             	sub    esp,0xc
c0016cfb:	55                   	push   ebp
c0016cfc:	e8 7b 76 00 00       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	39 eb                	cmp    ebx,ebp
c0016d06:	75 12                	jne    c0016d1a <timerHandler(unsigned long long)+0x87>
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d10:	e8 c9 1c 01 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d15:	89 c3                	mov    ebx,eax
c0016d17:	83 c4 10             	add    esp,0x10
c0016d1a:	83 ec 0c             	sub    esp,0xc
c0016d1d:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d22:	e8 bf 1c 01 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d27:	83 c4 10             	add    esp,0x10
c0016d2a:	84 c0                	test   al,al
c0016d2c:	75 b4                	jne    c0016ce2 <timerHandler(unsigned long long)+0x4f>
c0016d2e:	83 ec 0c             	sub    esp,0xc
c0016d31:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d36:	e8 a3 1c 01 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	39 d8                	cmp    eax,ebx
c0016d40:	74 a0                	je     c0016ce2 <timerHandler(unsigned long long)+0x4f>
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d4a:	e8 8f 1c 01 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d4f:	c7 04 24 1c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b1c
c0016d56:	89 c5                	mov    ebp,eax
c0016d58:	e8 a5 1c 01 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d5d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016d60:	83 c4 10             	add    esp,0x10
c0016d63:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016d66:	39 15 50 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec50,edx
c0016d6c:	a1 54 ec 02 c0       	mov    eax,ds:0xc002ec54
c0016d71:	19 c8                	sbb    eax,ecx
c0016d73:	73 83                	jae    c0016cf8 <timerHandler(unsigned long long)+0x65>
c0016d75:	50                   	push   eax
c0016d76:	50                   	push   eax
c0016d77:	55                   	push   ebp
c0016d78:	68 1c 1b 03 c0       	push   0xc0031b1c
c0016d7d:	e8 2e 1d 01 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d82:	eb 93                	jmp    c0016d17 <timerHandler(unsigned long long)+0x84>
c0016d84:	80 3d 8c e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e38c,0x0
c0016d8b:	74 29                	je     c0016db6 <timerHandler(unsigned long long)+0x123>
c0016d8d:	39 c6                	cmp    esi,eax
c0016d8f:	bb 00 00 00 00       	mov    ebx,0x0
c0016d94:	19 df                	sbb    edi,ebx
c0016d96:	72 19                	jb     c0016db1 <timerHandler(unsigned long long)+0x11e>
c0016d98:	e8 c8 6f 00 00       	call   c001dd65 <lockScheduler()>
c0016d9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016da2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016da5:	e8 f6 72 00 00       	call   c001e0a0 <schedule()>
c0016daa:	e8 b8 6f 00 00       	call   c001dd67 <unlockScheduler()>
c0016daf:	eb 05                	jmp    c0016db6 <timerHandler(unsigned long long)+0x123>
c0016db1:	29 f0                	sub    eax,esi
c0016db3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016db6:	83 c4 0c             	add    esp,0xc
c0016db9:	5b                   	pop    ebx
c0016dba:	5e                   	pop    esi
c0016dbb:	5f                   	pop    edi
c0016dbc:	5d                   	pop    ebp
c0016dbd:	e9 63 73 00 00       	jmp    c001e125 <unlockStuff()>
c0016dc2:	83 c4 0c             	add    esp,0xc
c0016dc5:	5b                   	pop    ebx
c0016dc6:	5e                   	pop    esi
c0016dc7:	5f                   	pop    edi
c0016dc8:	5d                   	pop    ebp
c0016dc9:	c3                   	ret    

c0016dca <setupTimer(int)>:
c0016dca:	57                   	push   edi
c0016dcb:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016dd0:	56                   	push   esi
c0016dd1:	53                   	push   ebx
c0016dd2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016dd6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016de5:	e8 ee d7 ff ff       	call   c00145d8 <Device::getName()>
c0016dea:	83 c4 10             	add    esp,0x10
c0016ded:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016df0:	0f 85 8d 00 00 00    	jne    c0016e83 <setupTimer(int)+0xb9>
c0016df6:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016dfb:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e02:	74 7f                	je     c0016e83 <setupTimer(int)+0xb9>
c0016e04:	83 ec 0c             	sub    esp,0xc
c0016e07:	68 5c 01 00 00       	push   0x15c
c0016e0c:	e8 32 8a ff ff       	call   c000f843 <malloc>
c0016e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e14:	89 c3                	mov    ebx,eax
c0016e16:	e8 31 f7 00 00       	call   c002654c <PIT::PIT()>
c0016e1b:	59                   	pop    ecx
c0016e1c:	5f                   	pop    edi
c0016e1d:	53                   	push   ebx
c0016e1e:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016e24:	e8 c3 d4 ff ff       	call   c00142ec <Device::addChild(Device*)>
c0016e29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e2b:	6a 00                	push   0x0
c0016e2d:	6a 00                	push   0x0
c0016e2f:	56                   	push   esi
c0016e30:	53                   	push   ebx
c0016e31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e34:	83 c4 14             	add    esp,0x14
c0016e37:	68 60 01 00 00       	push   0x160
c0016e3c:	e8 02 8a ff ff       	call   c000f843 <malloc>
c0016e41:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e44:	89 c7                	mov    edi,eax
c0016e46:	e8 b1 f5 00 00       	call   c00263fc <APICTimer::APICTimer()>
c0016e4b:	6a 00                	push   0x0
c0016e4d:	6a 00                	push   0x0
c0016e4f:	56                   	push   esi
c0016e50:	57                   	push   edi
c0016e51:	e8 a8 f4 00 00       	call   c00262fe <APICTimer::open(int, int, void*)>
c0016e56:	83 c4 20             	add    esp,0x20
c0016e59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e5b:	6a 00                	push   0x0
c0016e5d:	6a 00                	push   0x0
c0016e5f:	6a 00                	push   0x0
c0016e61:	53                   	push   ebx
c0016e62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e65:	58                   	pop    eax
c0016e66:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0016e6b:	5a                   	pop    edx
c0016e6c:	57                   	push   edi
c0016e6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e73:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e79:	e8 6e d4 ff ff       	call   c00142ec <Device::addChild(Device*)>
c0016e7e:	83 c4 10             	add    esp,0x10
c0016e81:	eb 33                	jmp    c0016eb6 <setupTimer(int)+0xec>
c0016e83:	83 ec 0c             	sub    esp,0xc
c0016e86:	68 5c 01 00 00       	push   0x15c
c0016e8b:	e8 b3 89 ff ff       	call   c000f843 <malloc>
c0016e90:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e93:	89 c3                	mov    ebx,eax
c0016e95:	e8 b2 f6 00 00       	call   c002654c <PIT::PIT()>
c0016e9a:	58                   	pop    eax
c0016e9b:	5a                   	pop    edx
c0016e9c:	53                   	push   ebx
c0016e9d:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0016ea3:	e8 44 d4 ff ff       	call   c00142ec <Device::addChild(Device*)>
c0016ea8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eaa:	6a 00                	push   0x0
c0016eac:	6a 00                	push   0x0
c0016eae:	56                   	push   esi
c0016eaf:	53                   	push   ebx
c0016eb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016eb3:	83 c4 20             	add    esp,0x20
c0016eb6:	89 d8                	mov    eax,ebx
c0016eb8:	5b                   	pop    ebx
c0016eb9:	5e                   	pop    esi
c0016eba:	5f                   	pop    edi
c0016ebb:	c3                   	ret    

c0016ebc <VCache::VCache(PhysicalDisk*)>:
c0016ebc:	53                   	push   ebx
c0016ebd:	83 ec 18             	sub    esp,0x18
c0016ec0:	ba 98 b2 02 c0       	mov    edx,0xc002b298
c0016ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ec9:	89 10                	mov    DWORD PTR [eax],edx
c0016ecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ecf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eda:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016eec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016efe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f09:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f14:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f23:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f2e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f36:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f46:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f4d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016f55:	83 ec 0c             	sub    esp,0xc
c0016f58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f5c:	e8 e2 88 ff ff       	call   c000f843 <malloc>
c0016f61:	83 c4 10             	add    esp,0x10
c0016f64:	89 c3                	mov    ebx,eax
c0016f66:	83 ec 0c             	sub    esp,0xc
c0016f69:	53                   	push   ebx
c0016f6a:	e8 15 6f 00 00       	call   c001de84 <Mutex::Mutex()>
c0016f6f:	83 c4 10             	add    esp,0x10
c0016f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f76:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016f81:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f88:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016f8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f93:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016fa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fa4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016faa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fb0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016fb4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016fb7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016fba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fc6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fcc:	05 00 01 00 00       	add    eax,0x100
c0016fd1:	c1 e0 04             	shl    eax,0x4
c0016fd4:	83 ec 0c             	sub    esp,0xc
c0016fd7:	50                   	push   eax
c0016fd8:	e8 66 88 ff ff       	call   c000f843 <malloc>
c0016fdd:	83 c4 10             	add    esp,0x10
c0016fe0:	89 c2                	mov    edx,eax
c0016fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fed:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ffc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017000:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017006:	c1 e0 07             	shl    eax,0x7
c0017009:	83 ec 0c             	sub    esp,0xc
c001700c:	50                   	push   eax
c001700d:	e8 31 88 ff ff       	call   c000f843 <malloc>
c0017012:	83 c4 10             	add    esp,0x10
c0017015:	89 c2                	mov    edx,eax
c0017017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001701e:	90                   	nop
c001701f:	83 c4 18             	add    esp,0x18
c0017022:	5b                   	pop    ebx
c0017023:	c3                   	ret    

c0017024 <VCache::invalidateReadBuffer()>:
c0017024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017028:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001702e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017032:	c3                   	ret    
c0017033:	90                   	nop

c0017034 <VCache::writeWriteBuffer()>:
c0017034:	53                   	push   ebx
c0017035:	83 ec 14             	sub    esp,0x14
c0017038:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001703c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001703f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017041:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017044:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017047:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001704a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001704d:	50                   	push   eax
c001704e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017051:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017058:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001705f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017063:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001706a:	83 c4 28             	add    esp,0x28
c001706d:	5b                   	pop    ebx
c001706e:	c3                   	ret    
c001706f:	90                   	nop

c0017070 <VCache::~VCache()>:
c0017070:	83 ec 0c             	sub    esp,0xc
c0017073:	ba 98 b2 02 c0       	mov    edx,0xc002b298
c0017078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001707c:	89 10                	mov    DWORD PTR [eax],edx
c001707e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017082:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017085:	84 c0                	test   al,al
c0017087:	74 0f                	je     c0017098 <VCache::~VCache()+0x28>
c0017089:	83 ec 0c             	sub    esp,0xc
c001708c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017090:	e8 9f ff ff ff       	call   c0017034 <VCache::writeWriteBuffer()>
c0017095:	83 c4 10             	add    esp,0x10
c0017098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001709c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001709f:	83 ec 0c             	sub    esp,0xc
c00170a2:	50                   	push   eax
c00170a3:	e8 ab 87 ff ff       	call   c000f853 <free>
c00170a8:	83 c4 10             	add    esp,0x10
c00170ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00170b2:	83 ec 0c             	sub    esp,0xc
c00170b5:	50                   	push   eax
c00170b6:	e8 98 87 ff ff       	call   c000f853 <free>
c00170bb:	83 c4 10             	add    esp,0x10
c00170be:	90                   	nop
c00170bf:	83 c4 0c             	add    esp,0xc
c00170c2:	c3                   	ret    
c00170c3:	90                   	nop

c00170c4 <VCache::~VCache()>:
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	83 ec 0c             	sub    esp,0xc
c00170ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170ce:	e8 9d ff ff ff       	call   c0017070 <VCache::~VCache()>
c00170d3:	83 c4 10             	add    esp,0x10
c00170d6:	83 ec 08             	sub    esp,0x8
c00170d9:	6a 44                	push   0x44
c00170db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170df:	e8 02 bd ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00170e4:	83 c4 10             	add    esp,0x10
c00170e7:	83 c4 0c             	add    esp,0xc
c00170ea:	c3                   	ret    
c00170eb:	90                   	nop

c00170ec <VCache::write(unsigned long long, int, void*)>:
c00170ec:	55                   	push   ebp
c00170ed:	57                   	push   edi
c00170ee:	56                   	push   esi
c00170ef:	53                   	push   ebx
c00170f0:	83 ec 28             	sub    esp,0x28
c00170f3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170f7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170fb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170ff:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017103:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017106:	e8 db 71 00 00       	call   c001e2e6 <Semaphore::acquire()>
c001710b:	83 c4 10             	add    esp,0x10
c001710e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017112:	74 0c                	je     c0017120 <VCache::write(unsigned long long, int, void*)+0x34>
c0017114:	83 ec 0c             	sub    esp,0xc
c0017117:	53                   	push   ebx
c0017118:	e8 07 ff ff ff       	call   c0017024 <VCache::invalidateReadBuffer()>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017124:	74 66                	je     c001718c <VCache::write(unsigned long long, int, void*)+0xa0>
c0017126:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017129:	99                   	cdq    
c001712a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001712e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017131:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017134:	89 c1                	mov    ecx,eax
c0017136:	89 d0                	mov    eax,edx
c0017138:	31 f1                	xor    ecx,esi
c001713a:	31 f8                	xor    eax,edi
c001713c:	89 ca                	mov    edx,ecx
c001713e:	09 c2                	or     edx,eax
c0017140:	75 3e                	jne    c0017180 <VCache::write(unsigned long long, int, void*)+0x94>
c0017142:	83 fd 01             	cmp    ebp,0x1
c0017145:	75 39                	jne    c0017180 <VCache::write(unsigned long long, int, void*)+0x94>
c0017147:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001714a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017150:	51                   	push   ecx
c0017151:	50                   	push   eax
c0017152:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017156:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001715a:	0f af c8             	imul   ecx,eax
c001715d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017160:	51                   	push   ecx
c0017161:	e8 de 95 fe ff       	call   c0000744 <memcpy>
c0017166:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017169:	83 c4 10             	add    esp,0x10
c001716c:	40                   	inc    eax
c001716d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017170:	83 c0 80             	add    eax,0xffffff80
c0017173:	75 57                	jne    c00171cc <VCache::write(unsigned long long, int, void*)+0xe0>
c0017175:	83 ec 0c             	sub    esp,0xc
c0017178:	53                   	push   ebx
c0017179:	e8 b6 fe ff ff       	call   c0017034 <VCache::writeWriteBuffer()>
c001717e:	eb 34                	jmp    c00171b4 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017180:	83 ec 0c             	sub    esp,0xc
c0017183:	53                   	push   ebx
c0017184:	e8 ab fe ff ff       	call   c0017034 <VCache::writeWriteBuffer()>
c0017189:	83 c4 10             	add    esp,0x10
c001718c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001718f:	83 fd 7f             	cmp    ebp,0x7f
c0017192:	7f 25                	jg     c00171b9 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017194:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017197:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001719a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001719d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00171a1:	52                   	push   edx
c00171a2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00171a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171ac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171af:	e8 90 95 fe ff       	call   c0000744 <memcpy>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	eb 13                	jmp    c00171cc <VCache::write(unsigned long long, int, void*)+0xe0>
c00171b9:	83 ec 0c             	sub    esp,0xc
c00171bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00171be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00171c2:	55                   	push   ebp
c00171c3:	57                   	push   edi
c00171c4:	56                   	push   esi
c00171c5:	50                   	push   eax
c00171c6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171c9:	83 c4 20             	add    esp,0x20
c00171cc:	83 ec 0c             	sub    esp,0xc
c00171cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171d2:	e8 bd 76 00 00       	call   c001e894 <Semaphore::release()>
c00171d7:	83 c4 2c             	add    esp,0x2c
c00171da:	31 c0                	xor    eax,eax
c00171dc:	5b                   	pop    ebx
c00171dd:	5e                   	pop    esi
c00171de:	5f                   	pop    edi
c00171df:	5d                   	pop    ebp
c00171e0:	c3                   	ret    
c00171e1:	90                   	nop

c00171e2 <VCache::read(unsigned long long, int, void*)>:
c00171e2:	55                   	push   ebp
c00171e3:	57                   	push   edi
c00171e4:	56                   	push   esi
c00171e5:	53                   	push   ebx
c00171e6:	83 ec 28             	sub    esp,0x28
c00171e9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171f1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00171f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171f9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00171fd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017201:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017205:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017208:	e8 d9 70 00 00       	call   c001e2e6 <Semaphore::acquire()>
c001720d:	83 c4 10             	add    esp,0x10
c0017210:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017214:	74 0c                	je     c0017222 <VCache::read(unsigned long long, int, void*)+0x40>
c0017216:	83 ec 0c             	sub    esp,0xc
c0017219:	53                   	push   ebx
c001721a:	e8 15 fe ff ff       	call   c0017034 <VCache::writeWriteBuffer()>
c001721f:	83 c4 10             	add    esp,0x10
c0017222:	83 fe 01             	cmp    esi,0x1
c0017225:	0f 85 80 00 00 00    	jne    c00172ab <VCache::read(unsigned long long, int, void*)+0xc9>
c001722b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001722e:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017235:	75 74                	jne    c00172ab <VCache::read(unsigned long long, int, void*)+0xc9>
c0017237:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001723a:	89 d1                	mov    ecx,edx
c001723c:	f7 d9                	neg    ecx
c001723e:	89 cf                	mov    edi,ecx
c0017240:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017244:	c1 ff 1f             	sar    edi,0x1f
c0017247:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001724a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001724e:	89 ce                	mov    esi,ecx
c0017250:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017254:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017258:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001725c:	89 cf                	mov    edi,ecx
c001725e:	74 0a                	je     c001726a <VCache::read(unsigned long long, int, void*)+0x88>
c0017260:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017263:	75 05                	jne    c001726a <VCache::read(unsigned long long, int, void*)+0x88>
c0017265:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017268:	74 1c                	je     c0017286 <VCache::read(unsigned long long, int, void*)+0xa4>
c001726a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001726e:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017271:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017274:	83 ec 0c             	sub    esp,0xc
c0017277:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017279:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001727c:	52                   	push   edx
c001727d:	57                   	push   edi
c001727e:	56                   	push   esi
c001727f:	50                   	push   eax
c0017280:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017283:	83 c4 20             	add    esp,0x20
c0017286:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017289:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001728f:	50                   	push   eax
c0017290:	52                   	push   edx
c0017291:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017294:	48                   	dec    eax
c0017295:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017299:	0f af c2             	imul   eax,edx
c001729c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001729f:	50                   	push   eax
c00172a0:	55                   	push   ebp
c00172a1:	e8 9e 94 fe ff       	call   c0000744 <memcpy>
c00172a6:	83 c4 10             	add    esp,0x10
c00172a9:	eb 21                	jmp    c00172cc <VCache::read(unsigned long long, int, void*)+0xea>
c00172ab:	83 ec 0c             	sub    esp,0xc
c00172ae:	53                   	push   ebx
c00172af:	e8 70 fd ff ff       	call   c0017024 <VCache::invalidateReadBuffer()>
c00172b4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00172b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172bc:	56                   	push   esi
c00172bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172c5:	50                   	push   eax
c00172c6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00172c9:	83 c4 20             	add    esp,0x20
c00172cc:	83 ec 0c             	sub    esp,0xc
c00172cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172d2:	e8 bd 75 00 00       	call   c001e894 <Semaphore::release()>
c00172d7:	83 c4 2c             	add    esp,0x2c
c00172da:	31 c0                	xor    eax,eax
c00172dc:	5b                   	pop    ebx
c00172dd:	5e                   	pop    esi
c00172de:	5f                   	pop    edi
c00172df:	5d                   	pop    ebp
c00172e0:	c3                   	ret    
c00172e1:	90                   	nop

c00172e2 <Video::putrect(int, int, int, int, unsigned int)>:
c00172e2:	55                   	push   ebp
c00172e3:	57                   	push   edi
c00172e4:	56                   	push   esi
c00172e5:	53                   	push   ebx
c00172e6:	83 ec 1c             	sub    esp,0x1c
c00172e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172f1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00172f5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00172f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017301:	01 df                	add    edi,ebx
c0017303:	39 fb                	cmp    ebx,edi
c0017305:	7d 1f                	jge    c0017326 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017307:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001730b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001730f:	7d 12                	jge    c0017323 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017311:	8b 16                	mov    edx,DWORD PTR [esi]
c0017313:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017317:	53                   	push   ebx
c0017318:	55                   	push   ebp
c0017319:	45                   	inc    ebp
c001731a:	56                   	push   esi
c001731b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001731e:	83 c4 10             	add    esp,0x10
c0017321:	eb e8                	jmp    c001730b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017323:	43                   	inc    ebx
c0017324:	eb dd                	jmp    c0017303 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017326:	83 c4 1c             	add    esp,0x1c
c0017329:	5b                   	pop    ebx
c001732a:	5e                   	pop    esi
c001732b:	5f                   	pop    edi
c001732c:	5d                   	pop    ebp
c001732d:	c3                   	ret    

c001732e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001732e:	55                   	push   ebp
c001732f:	57                   	push   edi
c0017330:	31 ff                	xor    edi,edi
c0017332:	56                   	push   esi
c0017333:	53                   	push   ebx
c0017334:	83 ec 1c             	sub    esp,0x1c
c0017337:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001733b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001733f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017346:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001734b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001734f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017353:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017357:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001735a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001735e:	01 f9                	add    ecx,edi
c0017360:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017364:	7d 2f                	jge    c0017395 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017366:	31 f6                	xor    esi,esi
c0017368:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001736c:	01 f2                	add    edx,esi
c001736e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017372:	7d 1a                	jge    c001738e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017374:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017377:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001737a:	46                   	inc    esi
c001737b:	51                   	push   ecx
c001737c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017380:	52                   	push   edx
c0017381:	55                   	push   ebp
c0017382:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017385:	83 c4 10             	add    esp,0x10
c0017388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001738c:	eb da                	jmp    c0017368 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001738e:	47                   	inc    edi
c001738f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017393:	eb c5                	jmp    c001735a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017395:	83 c4 1c             	add    esp,0x1c
c0017398:	5b                   	pop    ebx
c0017399:	5e                   	pop    esi
c001739a:	5f                   	pop    edi
c001739b:	5d                   	pop    ebp
c001739c:	c3                   	ret    
c001739d:	90                   	nop

c001739e <Video::blit(unsigned int*, int, int, int, int)>:
c001739e:	55                   	push   ebp
c001739f:	57                   	push   edi
c00173a0:	56                   	push   esi
c00173a1:	53                   	push   ebx
c00173a2:	83 ec 1c             	sub    esp,0x1c
c00173a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173ad:	85 c0                	test   eax,eax
c00173af:	79 02                	jns    c00173b3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00173b1:	31 c0                	xor    eax,eax
c00173b3:	c1 e0 02             	shl    eax,0x2
c00173b6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173c2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00173c6:	39 d8                	cmp    eax,ebx
c00173c8:	7e 49                	jle    c0017413 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173ca:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00173d0:	7c 41                	jl     c0017413 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173d2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00173d6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173da:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173de:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00173e2:	39 f9                	cmp    ecx,edi
c00173e4:	7e 22                	jle    c0017408 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00173e6:	83 c5 04             	add    ebp,0x4
c00173e9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00173ef:	7c 14                	jl     c0017405 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00173f1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00173f3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00173f6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00173fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00173fe:	56                   	push   esi
c00173ff:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017402:	83 c4 10             	add    esp,0x10
c0017405:	47                   	inc    edi
c0017406:	eb d2                	jmp    c00173da <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001740c:	43                   	inc    ebx
c001740d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017411:	eb ab                	jmp    c00173be <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017413:	83 c4 1c             	add    esp,0x1c
c0017416:	5b                   	pop    ebx
c0017417:	5e                   	pop    esi
c0017418:	5f                   	pop    edi
c0017419:	5d                   	pop    ebp
c001741a:	c3                   	ret    
c001741b:	90                   	nop

c001741c <Video::clearScreen(unsigned int)>:
c001741c:	57                   	push   edi
c001741d:	56                   	push   esi
c001741e:	53                   	push   ebx
c001741f:	31 db                	xor    ebx,ebx
c0017421:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017425:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001742b:	7e 1f                	jle    c001744c <Video::clearScreen(unsigned int)+0x30>
c001742d:	31 ff                	xor    edi,edi
c001742f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017435:	7e 12                	jle    c0017449 <Video::clearScreen(unsigned int)+0x2d>
c0017437:	8b 06                	mov    eax,DWORD PTR [esi]
c0017439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001743d:	53                   	push   ebx
c001743e:	57                   	push   edi
c001743f:	47                   	inc    edi
c0017440:	56                   	push   esi
c0017441:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017444:	83 c4 10             	add    esp,0x10
c0017447:	eb e6                	jmp    c001742f <Video::clearScreen(unsigned int)+0x13>
c0017449:	43                   	inc    ebx
c001744a:	eb d9                	jmp    c0017425 <Video::clearScreen(unsigned int)+0x9>
c001744c:	5b                   	pop    ebx
c001744d:	5e                   	pop    esi
c001744e:	5f                   	pop    edi
c001744f:	c3                   	ret    

c0017450 <Video::putpixel(int, int, unsigned int)>:
c0017450:	c7 44 24 04 a0 b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b2a0
c0017458:	e9 0e 31 00 00       	jmp    c001a56b <Krnl::panic(char const*)>
c001745d:	90                   	nop

c001745e <Video::Video(char const*)>:
c001745e:	83 ec 0c             	sub    esp,0xc
c0017461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017465:	83 ec 08             	sub    esp,0x8
c0017468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001746c:	50                   	push   eax
c001746d:	e8 6a d0 ff ff       	call   c00144dc <Device::Device(char const*)>
c0017472:	83 c4 10             	add    esp,0x10
c0017475:	ba 24 b3 02 c0       	mov    edx,0xc002b324
c001747a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001747e:	89 10                	mov    DWORD PTR [eax],edx
c0017480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017484:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001748e:	90                   	nop
c001748f:	83 c4 0c             	add    esp,0xc
c0017492:	c3                   	ret    
c0017493:	90                   	nop

c0017494 <Video::~Video()>:
c0017494:	83 ec 0c             	sub    esp,0xc
c0017497:	ba 24 b3 02 c0       	mov    edx,0xc002b324
c001749c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a0:	89 10                	mov    DWORD PTR [eax],edx
c00174a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174a6:	83 ec 0c             	sub    esp,0xc
c00174a9:	50                   	push   eax
c00174aa:	e8 0f cd ff ff       	call   c00141be <Device::~Device()>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	90                   	nop
c00174b3:	83 c4 0c             	add    esp,0xc
c00174b6:	c3                   	ret    
c00174b7:	90                   	nop

c00174b8 <Video::~Video()>:
c00174b8:	83 ec 0c             	sub    esp,0xc
c00174bb:	83 ec 0c             	sub    esp,0xc
c00174be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174c2:	e8 cd ff ff ff       	call   c0017494 <Video::~Video()>
c00174c7:	83 c4 10             	add    esp,0x10
c00174ca:	83 ec 08             	sub    esp,0x8
c00174cd:	68 64 01 00 00       	push   0x164
c00174d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d6:	e8 0b b9 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00174db:	83 c4 10             	add    esp,0x10
c00174de:	83 c4 0c             	add    esp,0xc
c00174e1:	c3                   	ret    

c00174e2 <Video::isMonochrome()>:
c00174e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174e6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00174ec:	c3                   	ret    
c00174ed:	90                   	nop

c00174ee <Video::getWidth()>:
c00174ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00174f8:	c3                   	ret    
c00174f9:	90                   	nop

c00174fa <Video::getHeight()>:
c00174fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017504:	c3                   	ret    
c0017505:	90                   	nop

c0017506 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017506:	55                   	push   ebp
c0017507:	57                   	push   edi
c0017508:	56                   	push   esi
c0017509:	53                   	push   ebx
c001750a:	83 ec 2c             	sub    esp,0x2c
c001750d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017511:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017515:	83 f8 01             	cmp    eax,0x1
c0017518:	19 c9                	sbb    ecx,ecx
c001751a:	31 db                	xor    ebx,ebx
c001751c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017520:	89 cd                	mov    ebp,ecx
c0017522:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001752a:	f7 d5                	not    ebp
c001752c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017532:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017536:	01 d8                	add    eax,ebx
c0017538:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001753c:	56                   	push   esi
c001753d:	e8 b8 ff ff ff       	call   c00174fa <Video::getHeight()>
c0017542:	59                   	pop    ecx
c0017543:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017547:	7e 70                	jle    c00175b9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017549:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001754d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017551:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017554:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017558:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001755c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017563:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017567:	89 f8                	mov    eax,edi
c0017569:	83 c0 20             	add    eax,0x20
c001756c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017570:	56                   	push   esi
c0017571:	e8 78 ff ff ff       	call   c00174ee <Video::getWidth()>
c0017576:	5a                   	pop    edx
c0017577:	39 c7                	cmp    edi,eax
c0017579:	7d 34                	jge    c00175af <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001757b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017580:	74 05                	je     c0017587 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017582:	8b 06                	mov    eax,DWORD PTR [esi]
c0017584:	55                   	push   ebp
c0017585:	eb 0d                	jmp    c0017594 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017587:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001758c:	74 12                	je     c00175a0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001758e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017590:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017594:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017598:	57                   	push   edi
c0017599:	56                   	push   esi
c001759a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001759d:	83 c4 10             	add    esp,0x10
c00175a0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00175a4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00175a8:	47                   	inc    edi
c00175a9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00175ad:	75 c1                	jne    c0017570 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00175af:	43                   	inc    ebx
c00175b0:	83 fb 20             	cmp    ebx,0x20
c00175b3:	0f 85 79 ff ff ff    	jne    c0017532 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00175b9:	83 c4 2c             	add    esp,0x2c
c00175bc:	5b                   	pop    ebx
c00175bd:	5e                   	pop    esi
c00175be:	5f                   	pop    edi
c00175bf:	5d                   	pop    ebp
c00175c0:	c3                   	ret    
c00175c1:	90                   	nop

c00175c2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00175c2:	55                   	push   ebp
c00175c3:	57                   	push   edi
c00175c4:	56                   	push   esi
c00175c5:	53                   	push   ebx
c00175c6:	83 ec 28             	sub    esp,0x28
c00175c9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00175cd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00175d1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00175d5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00175d9:	c1 e7 08             	shl    edi,0x8
c00175dc:	01 c7                	add    edi,eax
c00175de:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00175e2:	c1 e0 08             	shl    eax,0x8
c00175e5:	01 d0                	add    eax,edx
c00175e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ef:	0f af c7             	imul   eax,edi
c00175f2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00175f9:	50                   	push   eax
c00175fa:	e8 44 82 ff ff       	call   c000f843 <malloc>
c00175ff:	83 c4 10             	add    esp,0x10
c0017602:	89 c5                	mov    ebp,eax
c0017604:	85 c0                	test   eax,eax
c0017606:	75 15                	jne    c001761d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017608:	83 ec 0c             	sub    esp,0xc
c001760b:	68 c1 b2 02 c0       	push   0xc002b2c1
c0017610:	e8 b1 b8 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0017615:	83 c4 10             	add    esp,0x10
c0017618:	e9 1c 01 00 00       	jmp    c0017739 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001761d:	be 12 00 00 00       	mov    esi,0x12
c0017622:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017626:	74 11                	je     c0017639 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017628:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001762c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017630:	c1 fe 03             	sar    esi,0x3
c0017633:	0f af f0             	imul   esi,eax
c0017636:	83 c6 12             	add    esi,0x12
c0017639:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001763d:	74 04                	je     c0017643 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001763f:	85 ff                	test   edi,edi
c0017641:	75 12                	jne    c0017655 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017643:	83 ec 0c             	sub    esp,0xc
c0017646:	68 d8 b2 02 c0       	push   0xc002b2d8
c001764b:	e8 76 b8 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0017650:	e9 ce 00 00 00       	jmp    c0017723 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017655:	52                   	push   edx
c0017656:	52                   	push   edx
c0017657:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001765b:	50                   	push   eax
c001765c:	68 ed b2 02 c0       	push   0xc002b2ed
c0017661:	e8 60 b8 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0017666:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001766a:	83 c4 10             	add    esp,0x10
c001766d:	80 fa 02             	cmp    dl,0x2
c0017670:	0f 85 98 00 00 00    	jne    c001770e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017676:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001767b:	75 10                	jne    c001768d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001767d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017681:	75 0a                	jne    c001768d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017683:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017686:	83 e8 18             	sub    eax,0x18
c0017689:	a8 f7                	test   al,0xf7
c001768b:	74 0a                	je     c0017697 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001768d:	83 ec 0c             	sub    esp,0xc
c0017690:	68 fa b2 02 c0       	push   0xc002b2fa
c0017695:	eb 7f                	jmp    c0017716 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017697:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001769f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176a7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00176b3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00176b7:	75 0c                	jne    c00176c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00176b9:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00176be:	c1 e0 18             	shl    eax,0x18
c00176c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176c5:	41                   	inc    ecx
c00176c6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00176cb:	c1 e2 10             	shl    edx,0x10
c00176ce:	89 d0                	mov    eax,edx
c00176d0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00176d5:	c1 e2 08             	shl    edx,0x8
c00176d8:	09 c2                	or     edx,eax
c00176da:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00176de:	09 c2                	or     edx,eax
c00176e0:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00176e4:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00176e8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00176ec:	c1 f8 03             	sar    eax,0x3
c00176ef:	01 c6                	add    esi,eax
c00176f1:	89 c8                	mov    eax,ecx
c00176f3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00176f7:	39 c7                	cmp    edi,eax
c00176f9:	7f b0                	jg     c00176ab <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00176fb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00176ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017703:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017706:	7e 22                	jle    c001772a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017708:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001770c:	eb 99                	jmp    c00176a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001770e:	50                   	push   eax
c001770f:	50                   	push   eax
c0017710:	52                   	push   edx
c0017711:	68 08 b3 02 c0       	push   0xc002b308
c0017716:	e8 ab b7 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001771b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001771e:	e8 30 81 ff ff       	call   c000f853 <free>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	31 ed                	xor    ebp,ebp
c0017728:	eb 0f                	jmp    c0017739 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001772a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001772e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017731:	89 38                	mov    DWORD PTR [eax],edi
c0017733:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017737:	89 08                	mov    DWORD PTR [eax],ecx
c0017739:	83 c4 1c             	add    esp,0x1c
c001773c:	89 e8                	mov    eax,ebp
c001773e:	5b                   	pop    ebx
c001773f:	5e                   	pop    esi
c0017740:	5f                   	pop    edi
c0017741:	5d                   	pop    ebp
c0017742:	c3                   	ret    
c0017743:	90                   	nop

c0017744 <Video::putTGA(int, int, unsigned char*, int)>:
c0017744:	55                   	push   ebp
c0017745:	57                   	push   edi
c0017746:	56                   	push   esi
c0017747:	53                   	push   ebx
c0017748:	83 ec 28             	sub    esp,0x28
c001774b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001774f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017753:	50                   	push   eax
c0017754:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017758:	50                   	push   eax
c0017759:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001775d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017761:	56                   	push   esi
c0017762:	e8 5b fe ff ff       	call   c00175c2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017767:	83 c4 20             	add    esp,0x20
c001776a:	85 c0                	test   eax,eax
c001776c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017770:	74 35                	je     c00177a7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017772:	89 c7                	mov    edi,eax
c0017774:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017778:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001777c:	39 d8                	cmp    eax,ebx
c001777e:	7e 27                	jle    c00177a7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017780:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017784:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017788:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001778c:	39 e8                	cmp    eax,ebp
c001778e:	7e 14                	jle    c00177a4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017790:	8b 06                	mov    eax,DWORD PTR [esi]
c0017792:	83 c7 04             	add    edi,0x4
c0017795:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017798:	53                   	push   ebx
c0017799:	55                   	push   ebp
c001779a:	45                   	inc    ebp
c001779b:	56                   	push   esi
c001779c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001779f:	83 c4 10             	add    esp,0x10
c00177a2:	eb e0                	jmp    c0017784 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00177a4:	43                   	inc    ebx
c00177a5:	eb cd                	jmp    c0017774 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00177a7:	83 c4 1c             	add    esp,0x1c
c00177aa:	5b                   	pop    ebx
c00177ab:	5e                   	pop    esi
c00177ac:	5f                   	pop    edi
c00177ad:	5d                   	pop    ebp
c00177ae:	c3                   	ret    
c00177af:	90                   	nop

c00177b0 <ACPI::close(int, int, void*)>:
c00177b0:	83 ec 1c             	sub    esp,0x1c
c00177b3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00177bb:	74 0a                	je     c00177c7 <ACPI::close(int, int, void*)+0x17>
c00177bd:	b8 00 00 00 00       	mov    eax,0x0
c00177c2:	e9 9a 00 00 00       	jmp    c0017861 <ACPI::close(int, int, void*)+0xb1>
c00177c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00177cc:	75 37                	jne    c0017805 <ACPI::close(int, int, void*)+0x55>
c00177ce:	83 ec 0c             	sub    esp,0xc
c00177d1:	68 64 b3 02 c0       	push   0xc002b364
c00177d6:	e8 eb b6 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00177db:	83 c4 10             	add    esp,0x10
c00177de:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c00177e3:	85 c0                	test   eax,eax
c00177e5:	74 07                	je     c00177ee <ACPI::close(int, int, void*)+0x3e>
c00177e7:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c00177ec:	ff d0                	call   eax
c00177ee:	83 ec 0c             	sub    esp,0xc
c00177f1:	68 88 b4 02 c0       	push   0xc002b488
c00177f6:	e8 70 2d 00 00       	call   c001a56b <Krnl::panic(char const*)>
c00177fb:	83 c4 10             	add    esp,0x10
c00177fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017803:	eb 5c                	jmp    c0017861 <ACPI::close(int, int, void*)+0xb1>
c0017805:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001780a:	75 50                	jne    c001785c <ACPI::close(int, int, void*)+0xac>
c001780c:	a1 84 0c 03 c0       	mov    eax,ds:0xc0030c84
c0017811:	85 c0                	test   eax,eax
c0017813:	74 07                	je     c001781c <ACPI::close(int, int, void*)+0x6c>
c0017815:	a1 84 0c 03 c0       	mov    eax,ds:0xc0030c84
c001781a:	ff d0                	call   eax
c001781c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017821:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017826:	83 e0 02             	and    eax,0x2
c0017829:	74 1c                	je     c0017847 <ACPI::close(int, int, void*)+0x97>
c001782b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017832:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017836:	89 c2                	mov    edx,eax
c0017838:	ec                   	in     al,dx
c0017839:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001783d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017841:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017845:	eb da                	jmp    c0017821 <ACPI::close(int, int, void*)+0x71>
c0017847:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001784e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017853:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017857:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001785b:	ee                   	out    dx,al
c001785c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017861:	83 c4 1c             	add    esp,0x1c
c0017864:	c3                   	ret    

c0017865 <findRSDP()>:
c0017865:	83 ec 1c             	sub    esp,0x1c
c0017868:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001786d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017873:	83 e0 04             	and    eax,0x4
c0017876:	84 c0                	test   al,al
c0017878:	75 07                	jne    c0017881 <findRSDP()+0x1c>
c001787a:	b8 00 00 00 00       	mov    eax,0x0
c001787f:	eb 6a                	jmp    c00178eb <findRSDP()+0x86>
c0017881:	a1 d4 e3 02 c0       	mov    eax,ds:0xc002e3d4
c0017886:	3d ff 07 00 00       	cmp    eax,0x7ff
c001788b:	7f 1b                	jg     c00178a8 <findRSDP()+0x43>
c001788d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017892:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017898:	83 e2 fb             	and    edx,0xfffffffb
c001789b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178a1:	b8 00 00 00 00       	mov    eax,0x0
c00178a6:	eb 43                	jmp    c00178eb <findRSDP()+0x86>
c00178a8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00178b0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00178b8:	77 2c                	ja     c00178e6 <findRSDP()+0x81>
c00178ba:	83 ec 04             	sub    esp,0x4
c00178bd:	6a 08                	push   0x8
c00178bf:	68 71 b3 02 c0       	push   0xc002b371
c00178c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178c8:	e8 73 8d fe ff       	call   c0000640 <memcmp>
c00178cd:	83 c4 10             	add    esp,0x10
c00178d0:	85 c0                	test   eax,eax
c00178d2:	0f 94 c0             	sete   al
c00178d5:	84 c0                	test   al,al
c00178d7:	74 06                	je     c00178df <findRSDP()+0x7a>
c00178d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178dd:	eb 0c                	jmp    c00178eb <findRSDP()+0x86>
c00178df:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00178e4:	eb ca                	jmp    c00178b0 <findRSDP()+0x4b>
c00178e6:	b8 00 00 00 00       	mov    eax,0x0
c00178eb:	83 c4 1c             	add    esp,0x1c
c00178ee:	c3                   	ret    

c00178ef <loadACPITables(unsigned char*)>:
c00178ef:	56                   	push   esi
c00178f0:	53                   	push   ebx
c00178f1:	83 ec 44             	sub    esp,0x44
c00178f4:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00178f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178ff:	83 e0 04             	and    eax,0x4
c0017902:	84 c0                	test   al,al
c0017904:	0f 84 05 02 00 00    	je     c0017b0f <loadACPITables(unsigned char*)+0x220>
c001790a:	a0 a0 0e 03 c0       	mov    al,ds:0xc0030ea0
c001790f:	84 c0                	test   al,al
c0017911:	74 75                	je     c0017988 <loadACPITables(unsigned char*)+0x99>
c0017913:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017917:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001791b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001791f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017922:	83 e8 24             	sub    eax,0x24
c0017925:	c1 e8 03             	shr    eax,0x3
c0017928:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001792c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017934:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017938:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001793c:	0f 8d b2 00 00 00    	jge    c00179f4 <loadACPITables(unsigned char*)+0x105>
c0017942:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017946:	83 c0 24             	add    eax,0x24
c0017949:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001794d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017951:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017955:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017959:	c1 e0 03             	shl    eax,0x3
c001795c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017960:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017964:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017967:	8b 00                	mov    eax,DWORD PTR [eax]
c0017969:	89 c1                	mov    ecx,eax
c001796b:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017970:	8d 50 01             	lea    edx,[eax+0x1]
c0017973:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c0017979:	89 ca                	mov    edx,ecx
c001797b:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c0017982:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017986:	eb ac                	jmp    c0017934 <loadACPITables(unsigned char*)+0x45>
c0017988:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001798c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017997:	83 e8 24             	sub    eax,0x24
c001799a:	c1 e8 02             	shr    eax,0x2
c001799d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179a1:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00179a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179ad:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00179b1:	7d 41                	jge    c00179f4 <loadACPITables(unsigned char*)+0x105>
c00179b3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179b7:	83 c0 24             	add    eax,0x24
c00179ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179ca:	c1 e0 02             	shl    eax,0x2
c00179cd:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00179d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179d5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00179d7:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c00179dc:	8d 50 01             	lea    edx,[eax+0x1]
c00179df:	89 15 8c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c8c,edx
c00179e5:	89 ca                	mov    edx,ecx
c00179e7:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c00179ee:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00179f2:	eb b5                	jmp    c00179a9 <loadACPITables(unsigned char*)+0xba>
c00179f4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00179fc:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017a01:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a05:	0f 8d 05 01 00 00    	jge    c0017b10 <loadACPITables(unsigned char*)+0x221>
c0017a0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a0f:	8b 04 c5 a4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf35c]
c0017a16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a26:	25 ff 0f 00 00       	and    eax,0xfff
c0017a2b:	89 c6                	mov    esi,eax
c0017a2d:	e8 01 a5 ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c0017a32:	89 c3                	mov    ebx,eax
c0017a34:	83 ec 0c             	sub    esp,0xc
c0017a37:	6a 01                	push   0x1
c0017a39:	e8 3d a1 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0017a3e:	83 c4 10             	add    esp,0x10
c0017a41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a45:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a4b:	83 ec 0c             	sub    esp,0xc
c0017a4e:	6a 01                	push   0x1
c0017a50:	6a 01                	push   0x1
c0017a52:	50                   	push   eax
c0017a53:	52                   	push   edx
c0017a54:	53                   	push   ebx
c0017a55:	e8 f0 ab ff ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a5a:	83 c4 20             	add    esp,0x20
c0017a5d:	09 f0                	or     eax,esi
c0017a5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a67:	c1 e0 03             	shl    eax,0x3
c0017a6a:	05 a0 0c 03 c0       	add    eax,0xc0030ca0
c0017a6f:	83 ec 04             	sub    esp,0x4
c0017a72:	6a 04                	push   0x4
c0017a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a78:	50                   	push   eax
c0017a79:	e8 c6 8c fe ff       	call   c0000744 <memcpy>
c0017a7e:	83 c4 10             	add    esp,0x10
c0017a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a90:	05 00 10 00 00       	add    eax,0x1000
c0017a95:	c1 e8 0c             	shr    eax,0xc
c0017a98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa0:	89 04 24             	mov    DWORD PTR [esp],eax
c0017aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa7:	25 ff 0f 00 00       	and    eax,0xfff
c0017aac:	89 c6                	mov    esi,eax
c0017aae:	e8 80 a4 ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c0017ab3:	89 c3                	mov    ebx,eax
c0017ab5:	83 ec 0c             	sub    esp,0xc
c0017ab8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017abc:	e8 ba a0 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0017ac1:	83 c4 10             	add    esp,0x10
c0017ac4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ac8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ace:	83 ec 0c             	sub    esp,0xc
c0017ad1:	6a 01                	push   0x1
c0017ad3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ad7:	50                   	push   eax
c0017ad8:	52                   	push   edx
c0017ad9:	53                   	push   ebx
c0017ada:	e8 6b ab ff ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017adf:	83 c4 20             	add    esp,0x20
c0017ae2:	09 f0                	or     eax,esi
c0017ae4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ae8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017aeb:	83 ec 0c             	sub    esp,0xc
c0017aee:	50                   	push   eax
c0017aef:	e8 fb a4 ff ff       	call   c0011fef <Virt::freeKernelVirtualPages(unsigned long)>
c0017af4:	83 c4 10             	add    esp,0x10
c0017af7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017afb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017aff:	89 14 c5 a4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf35c],edx
c0017b06:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b0a:	e9 ed fe ff ff       	jmp    c00179fc <loadACPITables(unsigned char*)+0x10d>
c0017b0f:	90                   	nop
c0017b10:	83 c4 44             	add    esp,0x44
c0017b13:	5b                   	pop    ebx
c0017b14:	5e                   	pop    esi
c0017b15:	c3                   	ret    

c0017b16 <findRSDT(unsigned char*)>:
c0017b16:	56                   	push   esi
c0017b17:	53                   	push   ebx
c0017b18:	83 ec 44             	sub    esp,0x44
c0017b1b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017b20:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b26:	83 e0 04             	and    eax,0x4
c0017b29:	84 c0                	test   al,al
c0017b2b:	75 0a                	jne    c0017b37 <findRSDT(unsigned char*)+0x21>
c0017b2d:	b8 00 00 00 00       	mov    eax,0x0
c0017b32:	e9 f7 00 00 00       	jmp    c0017c2e <findRSDT(unsigned char*)+0x118>
c0017b37:	83 ec 04             	sub    esp,0x4
c0017b3a:	6a 24                	push   0x24
c0017b3c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b40:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b44:	50                   	push   eax
c0017b45:	e8 fa 8b fe ff       	call   c0000744 <memcpy>
c0017b4a:	83 c4 10             	add    esp,0x10
c0017b4d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b51:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017b55:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b65:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b75:	25 ff 0f 00 00       	and    eax,0xfff
c0017b7a:	89 c6                	mov    esi,eax
c0017b7c:	e8 b2 a3 ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c0017b81:	89 c3                	mov    ebx,eax
c0017b83:	83 ec 0c             	sub    esp,0xc
c0017b86:	6a 02                	push   0x2
c0017b88:	e8 ee 9f ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0017b8d:	83 c4 10             	add    esp,0x10
c0017b90:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017b94:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b9a:	83 ec 0c             	sub    esp,0xc
c0017b9d:	6a 01                	push   0x1
c0017b9f:	6a 02                	push   0x2
c0017ba1:	50                   	push   eax
c0017ba2:	52                   	push   edx
c0017ba3:	53                   	push   ebx
c0017ba4:	e8 a1 aa ff ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ba9:	83 c4 20             	add    esp,0x20
c0017bac:	09 f0                	or     eax,esi
c0017bae:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb6:	25 ff 0f 00 00       	and    eax,0xfff
c0017bbb:	89 c6                	mov    esi,eax
c0017bbd:	e8 71 a3 ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c0017bc2:	89 c3                	mov    ebx,eax
c0017bc4:	83 ec 0c             	sub    esp,0xc
c0017bc7:	6a 02                	push   0x2
c0017bc9:	e8 ad 9f ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0017bce:	83 c4 10             	add    esp,0x10
c0017bd1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bd5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bdb:	83 ec 0c             	sub    esp,0xc
c0017bde:	6a 01                	push   0x1
c0017be0:	6a 02                	push   0x2
c0017be2:	50                   	push   eax
c0017be3:	52                   	push   edx
c0017be4:	53                   	push   ebx
c0017be5:	e8 60 aa ff ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bea:	83 c4 20             	add    esp,0x20
c0017bed:	09 f0                	or     eax,esi
c0017bef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017bf3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017bf8:	75 11                	jne    c0017c0b <findRSDT(unsigned char*)+0xf5>
c0017bfa:	c6 05 a0 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ea0,0x0
c0017c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c05:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c09:	eb 1f                	jmp    c0017c2a <findRSDT(unsigned char*)+0x114>
c0017c0b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c10:	75 11                	jne    c0017c23 <findRSDT(unsigned char*)+0x10d>
c0017c12:	c6 05 a0 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ea0,0x1
c0017c19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c1d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c21:	eb 07                	jmp    c0017c2a <findRSDT(unsigned char*)+0x114>
c0017c23:	b8 00 00 00 00       	mov    eax,0x0
c0017c28:	eb 04                	jmp    c0017c2e <findRSDT(unsigned char*)+0x118>
c0017c2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c2e:	83 c4 44             	add    esp,0x44
c0017c31:	5b                   	pop    ebx
c0017c32:	5e                   	pop    esi
c0017c33:	c3                   	ret    

c0017c34 <findDataTable(unsigned char*, char*)>:
c0017c34:	83 ec 1c             	sub    esp,0x1c
c0017c37:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017c3c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c42:	83 e0 04             	and    eax,0x4
c0017c45:	84 c0                	test   al,al
c0017c47:	75 07                	jne    c0017c50 <findDataTable(unsigned char*, char*)+0x1c>
c0017c49:	b8 00 00 00 00       	mov    eax,0x0
c0017c4e:	eb 7c                	jmp    c0017ccc <findDataTable(unsigned char*, char*)+0x98>
c0017c50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c58:	a1 8c 0c 03 c0       	mov    eax,ds:0xc0030c8c
c0017c5d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017c61:	7d 3a                	jge    c0017c9d <findDataTable(unsigned char*, char*)+0x69>
c0017c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c67:	c1 e0 03             	shl    eax,0x3
c0017c6a:	05 a0 0c 03 c0       	add    eax,0xc0030ca0
c0017c6f:	83 ec 04             	sub    esp,0x4
c0017c72:	6a 04                	push   0x4
c0017c74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c78:	50                   	push   eax
c0017c79:	e8 c2 89 fe ff       	call   c0000640 <memcmp>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	85 c0                	test   eax,eax
c0017c83:	0f 94 c0             	sete   al
c0017c86:	84 c0                	test   al,al
c0017c88:	74 0d                	je     c0017c97 <findDataTable(unsigned char*, char*)+0x63>
c0017c8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c8e:	8b 04 c5 a4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf35c]
c0017c95:	eb 35                	jmp    c0017ccc <findDataTable(unsigned char*, char*)+0x98>
c0017c97:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017c9b:	eb bb                	jmp    c0017c58 <findDataTable(unsigned char*, char*)+0x24>
c0017c9d:	a0 a0 0e 03 c0       	mov    al,ds:0xc0030ea0
c0017ca2:	84 c0                	test   al,al
c0017ca4:	74 07                	je     c0017cad <findDataTable(unsigned char*, char*)+0x79>
c0017ca6:	b8 58 00 00 00       	mov    eax,0x58
c0017cab:	eb 05                	jmp    c0017cb2 <findDataTable(unsigned char*, char*)+0x7e>
c0017cad:	b8 52 00 00 00       	mov    eax,0x52
c0017cb2:	83 ec 04             	sub    esp,0x4
c0017cb5:	50                   	push   eax
c0017cb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cba:	68 ac b4 02 c0       	push   0xc002b4ac
c0017cbf:	e8 02 b2 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0017cc4:	83 c4 10             	add    esp,0x10
c0017cc7:	b8 00 00 00 00       	mov    eax,0x0
c0017ccc:	83 c4 1c             	add    esp,0x1c
c0017ccf:	c3                   	ret    

c0017cd0 <scanMADT()>:
c0017cd0:	53                   	push   ebx
c0017cd1:	83 ec 38             	sub    esp,0x38
c0017cd4:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017cd9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cdf:	83 e0 04             	and    eax,0x4
c0017ce2:	84 c0                	test   al,al
c0017ce4:	0f 84 63 04 00 00    	je     c001814d <scanMADT()+0x47d>
c0017cea:	e8 76 fb ff ff       	call   c0017865 <findRSDP()>
c0017cef:	a3 ac 0e 03 c0       	mov    ds:0xc0030eac,eax
c0017cf4:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c0017cf9:	85 c0                	test   eax,eax
c0017cfb:	75 19                	jne    c0017d16 <scanMADT()+0x46>
c0017cfd:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d02:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d08:	83 e2 fb             	and    edx,0xfffffffb
c0017d0b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d11:	e9 3b 04 00 00       	jmp    c0018151 <scanMADT()+0x481>
c0017d16:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c0017d1b:	83 ec 0c             	sub    esp,0xc
c0017d1e:	50                   	push   eax
c0017d1f:	e8 f2 fd ff ff       	call   c0017b16 <findRSDT(unsigned char*)>
c0017d24:	83 c4 10             	add    esp,0x10
c0017d27:	a3 a8 0e 03 c0       	mov    ds:0xc0030ea8,eax
c0017d2c:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017d31:	85 c0                	test   eax,eax
c0017d33:	75 19                	jne    c0017d4e <scanMADT()+0x7e>
c0017d35:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d3a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d40:	83 e2 fb             	and    edx,0xfffffffb
c0017d43:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d49:	e9 03 04 00 00       	jmp    c0018151 <scanMADT()+0x481>
c0017d4e:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017d53:	83 ec 0c             	sub    esp,0xc
c0017d56:	50                   	push   eax
c0017d57:	e8 93 fb ff ff       	call   c00178ef <loadACPITables(unsigned char*)>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0017d64:	83 ec 08             	sub    esp,0x8
c0017d67:	68 7a b3 02 c0       	push   0xc002b37a
c0017d6c:	50                   	push   eax
c0017d6d:	e8 c2 fe ff ff       	call   c0017c34 <findDataTable(unsigned char*, char*)>
c0017d72:	83 c4 10             	add    esp,0x10
c0017d75:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d79:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017d7e:	75 19                	jne    c0017d99 <scanMADT()+0xc9>
c0017d80:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0017d85:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d8b:	83 e2 fe             	and    edx,0xfffffffe
c0017d8e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d94:	e9 b8 03 00 00       	jmp    c0018151 <scanMADT()+0x481>
c0017d99:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017da1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017da5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017da8:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017dac:	0f 87 9f 03 00 00    	ja     c0018151 <scanMADT()+0x481>
c0017db2:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017dba:	0f 87 91 03 00 00    	ja     c0018151 <scanMADT()+0x481>
c0017dc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dc4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017dc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dcc:	8d 50 01             	lea    edx,[eax+0x1]
c0017dcf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dd7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ddb:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017ddf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de3:	8d 50 01             	lea    edx,[eax+0x1]
c0017de6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dee:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017df2:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017df6:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017dfb:	0f 86 4f 03 00 00    	jbe    c0018150 <scanMADT()+0x480>
c0017e01:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e06:	75 57                	jne    c0017e5f <scanMADT()+0x18f>
c0017e08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e0c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e0f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e13:	8a 15 a0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a0
c0017e19:	0f b6 d2             	movzx  edx,dl
c0017e1c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e20:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e24:	88 82 e0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef20],al
c0017e2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017e31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e35:	8a 15 a0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310a0
c0017e3b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e3e:	88 0d a0 10 03 c0    	mov    BYTE PTR ds:0xc00310a0,cl
c0017e44:	0f b6 d2             	movzx  edx,dl
c0017e47:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e4b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e4f:	88 82 c0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef40],al
c0017e55:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e5a:	e9 da 02 00 00       	jmp    c0018139 <scanMADT()+0x469>
c0017e5f:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017e64:	0f 85 14 01 00 00    	jne    c0017f7e <scanMADT()+0x2ae>
c0017e6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e6e:	8d 50 01             	lea    edx,[eax+0x1]
c0017e71:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e75:	8a 15 60 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f60
c0017e7b:	0f b6 d2             	movzx  edx,dl
c0017e7e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e82:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e86:	88 82 80 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf080],al
c0017e8c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017e90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e98:	01 d0                	add    eax,edx
c0017e9a:	83 c0 2c             	add    eax,0x2c
c0017e9d:	8a 00                	mov    al,BYTE PTR [eax]
c0017e9f:	0f b6 d0             	movzx  edx,al
c0017ea2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea6:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ea9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ead:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017eb1:	0f b6 c0             	movzx  eax,al
c0017eb4:	c1 e0 08             	shl    eax,0x8
c0017eb7:	89 d1                	mov    ecx,edx
c0017eb9:	09 c1                	or     ecx,eax
c0017ebb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ebf:	8d 50 02             	lea    edx,[eax+0x2]
c0017ec2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017eca:	0f b6 c0             	movzx  eax,al
c0017ecd:	c1 e0 10             	shl    eax,0x10
c0017ed0:	09 c1                	or     ecx,eax
c0017ed2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed6:	8d 50 03             	lea    edx,[eax+0x3]
c0017ed9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017edd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ee1:	0f b6 c0             	movzx  eax,al
c0017ee4:	c1 e0 18             	shl    eax,0x18
c0017ee7:	09 c1                	or     ecx,eax
c0017ee9:	89 ca                	mov    edx,ecx
c0017eeb:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017ef0:	0f b6 c0             	movzx  eax,al
c0017ef3:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c0017efa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017eff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f07:	01 d0                	add    eax,edx
c0017f09:	83 c0 2c             	add    eax,0x2c
c0017f0c:	8a 00                	mov    al,BYTE PTR [eax]
c0017f0e:	0f b6 d0             	movzx  edx,al
c0017f11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f15:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f1c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f20:	0f b6 c0             	movzx  eax,al
c0017f23:	c1 e0 08             	shl    eax,0x8
c0017f26:	89 d1                	mov    ecx,edx
c0017f28:	09 c1                	or     ecx,eax
c0017f2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2e:	8d 50 02             	lea    edx,[eax+0x2]
c0017f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f35:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f39:	0f b6 c0             	movzx  eax,al
c0017f3c:	c1 e0 10             	shl    eax,0x10
c0017f3f:	09 c1                	or     ecx,eax
c0017f41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f45:	8d 50 03             	lea    edx,[eax+0x3]
c0017f48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f4c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f50:	0f b6 c0             	movzx  eax,al
c0017f53:	c1 e0 18             	shl    eax,0x18
c0017f56:	09 c1                	or     ecx,eax
c0017f58:	89 ca                	mov    edx,ecx
c0017f5a:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017f5f:	0f b6 c0             	movzx  eax,al
c0017f62:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c0017f69:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f6e:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0017f73:	40                   	inc    eax
c0017f74:	a2 60 0f 03 c0       	mov    ds:0xc0030f60,al
c0017f79:	e9 bb 01 00 00       	jmp    c0018139 <scanMADT()+0x469>
c0017f7e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017f83:	0f 85 e9 00 00 00    	jne    c0018072 <scanMADT()+0x3a2>
c0017f89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8d:	8d 50 01             	lea    edx,[eax+0x1]
c0017f90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f98:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f9c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa4:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017faf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fb3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017fb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbf:	01 d0                	add    eax,edx
c0017fc1:	83 c0 2c             	add    eax,0x2c
c0017fc4:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc6:	0f b6 d0             	movzx  edx,al
c0017fc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fd8:	0f b6 c0             	movzx  eax,al
c0017fdb:	c1 e0 08             	shl    eax,0x8
c0017fde:	89 d1                	mov    ecx,edx
c0017fe0:	09 c1                	or     ecx,eax
c0017fe2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe6:	8d 50 02             	lea    edx,[eax+0x2]
c0017fe9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff1:	0f b6 c0             	movzx  eax,al
c0017ff4:	c1 e0 10             	shl    eax,0x10
c0017ff7:	09 c1                	or     ecx,eax
c0017ff9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffd:	8d 50 03             	lea    edx,[eax+0x3]
c0018000:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018004:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018008:	0f b6 c0             	movzx  eax,al
c001800b:	c1 e0 18             	shl    eax,0x18
c001800e:	09 c8                	or     eax,ecx
c0018010:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018014:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018019:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001801d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018021:	01 d0                	add    eax,edx
c0018023:	83 c0 2c             	add    eax,0x2c
c0018026:	8a 00                	mov    al,BYTE PTR [eax]
c0018028:	0f b6 c0             	movzx  eax,al
c001802b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001802f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018032:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018036:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001803a:	0f b6 d2             	movzx  edx,dl
c001803d:	c1 e2 08             	shl    edx,0x8
c0018040:	09 d0                	or     eax,edx
c0018042:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018047:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001804c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018051:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018055:	88 90 e0 d5 02 c0    	mov    BYTE PTR [eax-0x3ffd2a20],dl
c001805b:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018060:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018065:	66 89 84 12 40 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf0c0],ax
c001806d:	e9 c7 00 00 00       	jmp    c0018139 <scanMADT()+0x469>
c0018072:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018077:	0f 85 b0 00 00 00    	jne    c001812d <scanMADT()+0x45d>
c001807d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018081:	8d 50 01             	lea    edx,[eax+0x1]
c0018084:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018088:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001808c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018090:	0f b6 c0             	movzx  eax,al
c0018093:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018097:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001809f:	01 d0                	add    eax,edx
c00180a1:	83 c0 2c             	add    eax,0x2c
c00180a4:	8a 00                	mov    al,BYTE PTR [eax]
c00180a6:	0f b6 d0             	movzx  edx,al
c00180a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ad:	8d 48 01             	lea    ecx,[eax+0x1]
c00180b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180b8:	0f b6 c0             	movzx  eax,al
c00180bb:	c1 e0 08             	shl    eax,0x8
c00180be:	09 d0                	or     eax,edx
c00180c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00180c4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180cd:	8d 50 01             	lea    edx,[eax+0x1]
c00180d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180dc:	0f b6 c0             	movzx  eax,al
c00180df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e7:	c1 e0 08             	shl    eax,0x8
c00180ea:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00180ee:	89 c1                	mov    ecx,eax
c00180f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f4:	c1 e0 18             	shl    eax,0x18
c00180f7:	89 c3                	mov    ebx,eax
c00180f9:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00180fe:	8d 50 01             	lea    edx,[eax+0x1]
c0018101:	89 15 b0 0e 03 c0    	mov    DWORD PTR ds:0xc0030eb0,edx
c0018107:	09 d9                	or     ecx,ebx
c0018109:	89 ca                	mov    edx,ecx
c001810b:	89 14 85 c0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf140],edx
c0018112:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001811a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001811e:	68 dc b4 02 c0       	push   0xc002b4dc
c0018123:	e8 9e ad ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018128:	83 c4 10             	add    esp,0x10
c001812b:	eb 0c                	jmp    c0018139 <scanMADT()+0x469>
c001812d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018132:	75 05                	jne    c0018139 <scanMADT()+0x469>
c0018134:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018139:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001813e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018142:	01 d0                	add    eax,edx
c0018144:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018148:	e9 54 fc ff ff       	jmp    c0017da1 <scanMADT()+0xd1>
c001814d:	90                   	nop
c001814e:	eb 01                	jmp    c0018151 <scanMADT()+0x481>
c0018150:	90                   	nop
c0018151:	83 c4 38             	add    esp,0x38
c0018154:	5b                   	pop    ebx
c0018155:	c3                   	ret    

c0018156 <ACPI::ACPI()>:
c0018156:	83 ec 0c             	sub    esp,0xc
c0018159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815d:	83 ec 08             	sub    esp,0x8
c0018160:	68 7f b3 02 c0       	push   0xc002b37f
c0018165:	50                   	push   eax
c0018166:	e8 71 c3 ff ff       	call   c00144dc <Device::Device(char const*)>
c001816b:	83 c4 10             	add    esp,0x10
c001816e:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c0018173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018177:	89 10                	mov    DWORD PTR [eax],edx
c0018179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018188:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018196:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00181a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a4:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00181ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181af:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00181b6:	e8 15 fb ff ff       	call   c0017cd0 <scanMADT()>
c00181bb:	90                   	nop
c00181bc:	83 c4 0c             	add    esp,0xc
c00181bf:	c3                   	ret    

c00181c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00181c0:	83 ec 2c             	sub    esp,0x2c
c00181c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00181c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00181cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00181cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00181d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00181d8:	88 d0                	mov    al,dl
c00181da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00181e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00181eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181ef:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181f5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00181f9:	0f 8d 97 00 00 00    	jge    c0018296 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00181ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018203:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018207:	83 c2 2a             	add    edx,0x2a
c001820a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001820e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018213:	75 78                	jne    c001828d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018215:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018219:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001821d:	83 c2 2a             	add    edx,0x2a
c0018220:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018224:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018228:	75 63                	jne    c001828d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001822a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001822f:	74 3a                	je     c001826b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018231:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018235:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018239:	83 c2 2a             	add    edx,0x2a
c001823c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018240:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018247:	39 c2                	cmp    edx,eax
c0018249:	74 10                	je     c001825b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001824b:	83 ec 0c             	sub    esp,0xc
c001824e:	68 18 b5 02 c0       	push   0xc002b518
c0018253:	e8 13 23 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0018258:	83 c4 10             	add    esp,0x10
c001825b:	83 ec 0c             	sub    esp,0xc
c001825e:	68 84 b3 02 c0       	push   0xc002b384
c0018263:	e8 03 23 00 00       	call   c001a56b <Krnl::panic(char const*)>
c0018268:	83 c4 10             	add    esp,0x10
c001826b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001826f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018273:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018277:	83 c2 2a             	add    edx,0x2a
c001827a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001827e:	8b 02                	mov    eax,DWORD PTR [edx]
c0018280:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018283:	89 01                	mov    DWORD PTR [ecx],eax
c0018285:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018288:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001828d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018291:	e9 55 ff ff ff       	jmp    c00181eb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018296:	90                   	nop
c0018297:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001829b:	83 c4 2c             	add    esp,0x2c
c001829e:	c2 04 00             	ret    0x4
c00182a1:	90                   	nop

c00182a2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00182a2:	83 ec 1c             	sub    esp,0x1c
c00182a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182a9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00182ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182b1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182b6:	88 c8                	mov    al,cl
c00182b8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00182bc:	88 d0                	mov    al,dl
c00182be:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c6:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182d0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00182d3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00182d7:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00182db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182df:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00182e9:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00182ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182f0:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00182f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182f9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182ff:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018303:	8d 48 01             	lea    ecx,[eax+0x1]
c0018306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001830a:	83 c2 2a             	add    edx,0x2a
c001830d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018315:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001831b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001831f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018322:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018326:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001832a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001832e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018334:	8d 50 01             	lea    edx,[eax+0x1]
c0018337:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001833b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018345:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001834b:	3d 00 02 00 00       	cmp    eax,0x200
c0018350:	75 10                	jne    c0018362 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018352:	83 ec 0c             	sub    esp,0xc
c0018355:	68 93 b3 02 c0       	push   0xc002b393
c001835a:	e8 0c 22 00 00       	call   c001a56b <Krnl::panic(char const*)>
c001835f:	83 c4 10             	add    esp,0x10
c0018362:	90                   	nop
c0018363:	83 c4 1c             	add    esp,0x1c
c0018366:	c3                   	ret    
c0018367:	90                   	nop

c0018368 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018368:	b8 00 00 00 00       	mov    eax,0x0
c001836d:	c3                   	ret    

c001836e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001836e:	83 ec 1c             	sub    esp,0x1c
c0018371:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018375:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018378:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001837c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018381:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018386:	83 ec 08             	sub    esp,0x8
c0018389:	52                   	push   edx
c001838a:	50                   	push   eax
c001838b:	e8 c8 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018390:	83 c4 10             	add    esp,0x10
c0018393:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018397:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001839c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183a1:	83 ec 04             	sub    esp,0x4
c00183a4:	6a 01                	push   0x1
c00183a6:	52                   	push   edx
c00183a7:	50                   	push   eax
c00183a8:	e8 c1 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00183ad:	83 c4 10             	add    esp,0x10
c00183b0:	90                   	nop
c00183b1:	83 c4 1c             	add    esp,0x1c
c00183b4:	c3                   	ret    
c00183b5:	90                   	nop

c00183b6 <ACPI::open(int, int, void*)>:
c00183b6:	53                   	push   ebx
c00183b7:	83 ec 28             	sub    esp,0x28
c00183ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183be:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00183c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c9:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183d0:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c00183d5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183db:	83 e0 04             	and    eax,0x4
c00183de:	84 c0                	test   al,al
c00183e0:	74 47                	je     c0018429 <ACPI::open(int, int, void*)+0x73>
c00183e2:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c00183e7:	83 ec 08             	sub    esp,0x8
c00183ea:	68 b0 b3 02 c0       	push   0xc002b3b0
c00183ef:	50                   	push   eax
c00183f0:	e8 3f f8 ff ff       	call   c0017c34 <findDataTable(unsigned char*, char*)>
c00183f5:	83 c4 10             	add    esp,0x10
c00183f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00183fc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018401:	74 26                	je     c0018429 <ACPI::open(int, int, void*)+0x73>
c0018403:	83 ec 0c             	sub    esp,0xc
c0018406:	68 b5 b3 02 c0       	push   0xc002b3b5
c001840b:	e8 b6 aa ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018410:	83 c4 10             	add    esp,0x10
c0018413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018417:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001841e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018422:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018429:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018431:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018435:	8a 00                	mov    al,BYTE PTR [eax]
c0018437:	3c 01                	cmp    al,0x1
c0018439:	75 28                	jne    c0018463 <ACPI::open(int, int, void*)+0xad>
c001843b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001843f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018446:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001844a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018451:	83 ec 0c             	sub    esp,0xc
c0018454:	68 c6 b3 02 c0       	push   0xc002b3c6
c0018459:	e8 68 aa ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001845e:	83 c4 10             	add    esp,0x10
c0018461:	eb 25                	jmp    c0018488 <ACPI::open(int, int, void*)+0xd2>
c0018463:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018467:	8a 00                	mov    al,BYTE PTR [eax]
c0018469:	3c 02                	cmp    al,0x2
c001846b:	75 1b                	jne    c0018488 <ACPI::open(int, int, void*)+0xd2>
c001846d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018471:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018478:	83 ec 0c             	sub    esp,0xc
c001847b:	68 ce b3 02 c0       	push   0xc002b3ce
c0018480:	e8 41 aa ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018485:	83 c4 10             	add    esp,0x10
c0018488:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001848c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018492:	83 f0 01             	xor    eax,0x1
c0018495:	84 c0                	test   al,al
c0018497:	74 6a                	je     c0018503 <ACPI::open(int, int, void*)+0x14d>
c0018499:	83 ec 0c             	sub    esp,0xc
c001849c:	68 d6 b3 02 c0       	push   0xc002b3d6
c00184a1:	e8 20 aa ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00184a6:	83 c4 10             	add    esp,0x10
c00184a9:	e8 a2 7c fe ff       	call   c0000150 <manualPCIProbe>
c00184ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184b2:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00184b7:	75 28                	jne    c00184e1 <ACPI::open(int, int, void*)+0x12b>
c00184b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184bd:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184c8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184cf:	83 ec 0c             	sub    esp,0xc
c00184d2:	68 e4 b3 02 c0       	push   0xc002b3e4
c00184d7:	e8 ea a9 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00184dc:	83 c4 10             	add    esp,0x10
c00184df:	eb 22                	jmp    c0018503 <ACPI::open(int, int, void*)+0x14d>
c00184e1:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00184e6:	75 1b                	jne    c0018503 <ACPI::open(int, int, void*)+0x14d>
c00184e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ec:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184f3:	83 ec 0c             	sub    esp,0xc
c00184f6:	68 ee b3 02 c0       	push   0xc002b3ee
c00184fb:	e8 c6 a9 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018500:	83 c4 10             	add    esp,0x10
c0018503:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018507:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001850d:	84 c0                	test   al,al
c001850f:	74 13                	je     c0018524 <ACPI::open(int, int, void*)+0x16e>
c0018511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018515:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001851b:	83 f0 01             	xor    eax,0x1
c001851e:	0f b6 c0             	movzx  eax,al
c0018521:	40                   	inc    eax
c0018522:	eb 05                	jmp    c0018529 <ACPI::open(int, int, void*)+0x173>
c0018524:	b8 00 00 00 00       	mov    eax,0x0
c0018529:	83 ec 08             	sub    esp,0x8
c001852c:	50                   	push   eax
c001852d:	68 f8 b3 02 c0       	push   0xc002b3f8
c0018532:	e8 8f a9 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018537:	83 c4 10             	add    esp,0x10
c001853a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001853e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018544:	84 c0                	test   al,al
c0018546:	74 67                	je     c00185af <ACPI::open(int, int, void*)+0x1f9>
c0018548:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018550:	83 ec 0c             	sub    esp,0xc
c0018553:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018557:	e8 e7 72 ff ff       	call   c000f843 <malloc>
c001855c:	83 c4 10             	add    esp,0x10
c001855f:	89 c3                	mov    ebx,eax
c0018561:	83 ec 0c             	sub    esp,0xc
c0018564:	53                   	push   ebx
c0018565:	e8 2c a3 00 00       	call   c0022896 <PCI::PCI()>
c001856a:	83 c4 10             	add    esp,0x10
c001856d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018571:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018575:	83 ec 08             	sub    esp,0x8
c0018578:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001857c:	50                   	push   eax
c001857d:	e8 6a bd ff ff       	call   c00142ec <Device::addChild(Device*)>
c0018582:	83 c4 10             	add    esp,0x10
c0018585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018589:	8b 00                	mov    eax,DWORD PTR [eax]
c001858b:	83 c0 08             	add    eax,0x8
c001858e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018590:	6a 00                	push   0x0
c0018592:	6a 00                	push   0x0
c0018594:	6a 00                	push   0x0
c0018596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001859a:	ff d0                	call   eax
c001859c:	83 c4 10             	add    esp,0x10
c001859f:	83 ec 0c             	sub    esp,0xc
c00185a2:	68 01 b4 02 c0       	push   0xc002b401
c00185a7:	e8 1a a9 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00185ac:	83 c4 10             	add    esp,0x10
c00185af:	e8 05 98 ff ff       	call   c0011db9 <Virt::swappingSetup()>
c00185b4:	83 ec 0c             	sub    esp,0xc
c00185b7:	68 0c b4 02 c0       	push   0xc002b40c
c00185bc:	e8 80 46 00 00       	call   c001cc41 <Thr::loadKernelSymbolTable(char const*)>
c00185c1:	83 c4 10             	add    esp,0x10
c00185c4:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c00185ca:	83 ec 08             	sub    esp,0x8
c00185cd:	6a 01                	push   0x1
c00185cf:	68 2a b4 02 c0       	push   0xc002b42a
c00185d4:	e8 c5 50 00 00       	call   c001d69e <Thr::loadDLL(char const*, bool)>
c00185d9:	83 c4 10             	add    esp,0x10
c00185dc:	83 ec 08             	sub    esp,0x8
c00185df:	53                   	push   ebx
c00185e0:	50                   	push   eax
c00185e1:	e8 07 53 00 00       	call   c001d8ed <Thr::executeDLL(unsigned long, void*)>
c00185e6:	83 c4 10             	add    esp,0x10
c00185e9:	8b 1d 88 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e388
c00185ef:	83 ec 08             	sub    esp,0x8
c00185f2:	6a 01                	push   0x1
c00185f4:	68 47 b4 02 c0       	push   0xc002b447
c00185f9:	e8 a0 50 00 00       	call   c001d69e <Thr::loadDLL(char const*, bool)>
c00185fe:	83 c4 10             	add    esp,0x10
c0018601:	83 ec 08             	sub    esp,0x8
c0018604:	53                   	push   ebx
c0018605:	50                   	push   eax
c0018606:	e8 e2 52 00 00       	call   c001d8ed <Thr::executeDLL(unsigned long, void*)>
c001860b:	83 c4 10             	add    esp,0x10
c001860e:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0018613:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018619:	83 e0 04             	and    eax,0x4
c001861c:	84 c0                	test   al,al
c001861e:	0f 84 d2 00 00 00    	je     c00186f6 <ACPI::open(int, int, void*)+0x340>
c0018624:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001862b:	83 ec 0c             	sub    esp,0xc
c001862e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018632:	e8 0c 72 ff ff       	call   c000f843 <malloc>
c0018637:	83 c4 10             	add    esp,0x10
c001863a:	89 c3                	mov    ebx,eax
c001863c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c0018641:	83 ec 04             	sub    esp,0x4
c0018644:	50                   	push   eax
c0018645:	68 64 b4 02 c0       	push   0xc002b464
c001864a:	53                   	push   ebx
c001864b:	e8 ce ad ff ff       	call   c001341e <File::File(char const*, Process*)>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018657:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001865c:	74 17                	je     c0018675 <ACPI::open(int, int, void*)+0x2bf>
c001865e:	83 ec 0c             	sub    esp,0xc
c0018661:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018665:	e8 86 b0 ff ff       	call   c00136f0 <File::exists()>
c001866a:	83 c4 10             	add    esp,0x10
c001866d:	84 c0                	test   al,al
c001866f:	74 04                	je     c0018675 <ACPI::open(int, int, void*)+0x2bf>
c0018671:	b0 01                	mov    al,0x1
c0018673:	eb 02                	jmp    c0018677 <ACPI::open(int, int, void*)+0x2c1>
c0018675:	b0 00                	mov    al,0x0
c0018677:	84 c0                	test   al,al
c0018679:	74 22                	je     c001869d <ACPI::open(int, int, void*)+0x2e7>
c001867b:	83 ec 08             	sub    esp,0x8
c001867e:	6a 01                	push   0x1
c0018680:	68 64 b4 02 c0       	push   0xc002b464
c0018685:	e8 14 50 00 00       	call   c001d69e <Thr::loadDLL(char const*, bool)>
c001868a:	83 c4 10             	add    esp,0x10
c001868d:	83 ec 08             	sub    esp,0x8
c0018690:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018694:	50                   	push   eax
c0018695:	e8 53 52 00 00       	call   c001d8ed <Thr::executeDLL(unsigned long, void*)>
c001869a:	83 c4 10             	add    esp,0x10
c001869d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186a2:	74 1e                	je     c00186c2 <ACPI::open(int, int, void*)+0x30c>
c00186a4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186a9:	74 17                	je     c00186c2 <ACPI::open(int, int, void*)+0x30c>
c00186ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186af:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b1:	83 c0 08             	add    eax,0x8
c00186b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b6:	83 ec 0c             	sub    esp,0xc
c00186b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186bd:	ff d0                	call   eax
c00186bf:	83 c4 10             	add    esp,0x10
c00186c2:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c00186c7:	83 ec 08             	sub    esp,0x8
c00186ca:	68 81 b4 02 c0       	push   0xc002b481
c00186cf:	50                   	push   eax
c00186d0:	e8 5f f5 ff ff       	call   c0017c34 <findDataTable(unsigned char*, char*)>
c00186d5:	83 c4 10             	add    esp,0x10
c00186d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00186dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00186e1:	74 13                	je     c00186f6 <ACPI::open(int, int, void*)+0x340>
c00186e3:	83 ec 08             	sub    esp,0x8
c00186e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186ee:	e8 7b fc ff ff       	call   c001836e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00186f3:	83 c4 10             	add    esp,0x10
c00186f6:	b8 00 00 00 00       	mov    eax,0x0
c00186fb:	83 c4 28             	add    esp,0x28
c00186fe:	5b                   	pop    ebx
c00186ff:	c3                   	ret    

c0018700 <ACPI::sleep()>:
c0018700:	83 ec 0c             	sub    esp,0xc
c0018703:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c0018708:	85 c0                	test   eax,eax
c001870a:	74 07                	je     c0018713 <ACPI::sleep()+0x13>
c001870c:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c0018711:	ff d0                	call   eax
c0018713:	90                   	nop
c0018714:	83 c4 0c             	add    esp,0xc
c0018717:	c3                   	ret    

c0018718 <CPU::close(int, int, void*)>:
c0018718:	31 c0                	xor    eax,eax
c001871a:	c3                   	ret    
c001871b:	90                   	nop

c001871c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001871c:	55                   	push   ebp
c001871d:	57                   	push   edi
c001871e:	56                   	push   esi
c001871f:	53                   	push   ebx
c0018720:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018724:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018728:	89 ce                	mov    esi,ecx
c001872a:	89 d5                	mov    ebp,edx
c001872c:	80 f9 04             	cmp    cl,0x4
c001872f:	75 28                	jne    c0018759 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018731:	8d 42 f9             	lea    eax,[edx-0x7]
c0018734:	3c 03                	cmp    al,0x3
c0018736:	0f 86 63 01 00 00    	jbe    c001889f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001873c:	80 fa 03             	cmp    dl,0x3
c001873f:	0f 84 5a 01 00 00    	je     c001889f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018745:	8d 7a f2             	lea    edi,[edx-0xe]
c0018748:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c001874d:	89 fb                	mov    ebx,edi
c001874f:	80 fb 01             	cmp    bl,0x1
c0018752:	77 4e                	ja     c00187a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018754:	e9 52 01 00 00       	jmp    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018759:	80 f9 05             	cmp    cl,0x5
c001875c:	75 4d                	jne    c00187ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001875e:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018763:	80 fa 03             	cmp    dl,0x3
c0018766:	0f 86 3f 01 00 00    	jbe    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876c:	8d 7a fa             	lea    edi,[edx-0x6]
c001876f:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018774:	89 fb                	mov    ebx,edi
c0018776:	80 fb 01             	cmp    bl,0x1
c0018779:	0f 86 2c 01 00 00    	jbe    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001877f:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018784:	80 fa 08             	cmp    dl,0x8
c0018787:	0f 84 1e 01 00 00    	je     c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878d:	89 d7                	mov    edi,edx
c001878f:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018794:	83 e7 fb             	and    edi,0xfffffffb
c0018797:	89 fb                	mov    ebx,edi
c0018799:	80 fb 09             	cmp    bl,0x9
c001879c:	0f 84 09 01 00 00    	je     c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a2:	31 c0                	xor    eax,eax
c00187a4:	89 eb                	mov    ebx,ebp
c00187a6:	0f b6 fb             	movzx  edi,bl
c00187a9:	eb 30                	jmp    c00187db <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187ab:	31 c0                	xor    eax,eax
c00187ad:	80 f9 06             	cmp    cl,0x6
c00187b0:	75 f2                	jne    c00187a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187b2:	80 fa 0a             	cmp    dl,0xa
c00187b5:	77 ed                	ja     c00187a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187b7:	bf de 05 00 00       	mov    edi,0x5de
c00187bc:	0f a3 d7             	bt     edi,edx
c00187bf:	73 e3                	jae    c00187a4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187c1:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c00187c6:	e9 e0 00 00 00       	jmp    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187cb:	39 c7                	cmp    edi,eax
c00187cd:	0f 84 d3 00 00 00    	je     c00188a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00187d3:	40                   	inc    eax
c00187d4:	3d d0 00 00 00       	cmp    eax,0xd0
c00187d9:	74 09                	je     c00187e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00187db:	89 f3                	mov    ebx,esi
c00187dd:	80 fb 0f             	cmp    bl,0xf
c00187e0:	75 f1                	jne    c00187d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00187e2:	eb e7                	jmp    c00187cb <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00187e4:	80 f9 10             	cmp    cl,0x10
c00187e7:	75 14                	jne    c00187fd <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00187e9:	8d 42 fc             	lea    eax,[edx-0x4]
c00187ec:	83 e0 fb             	and    eax,0xfffffffb
c00187ef:	3c 02                	cmp    al,0x2
c00187f1:	76 34                	jbe    c0018827 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00187f3:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c00187f8:	80 fa 02             	cmp    dl,0x2
c00187fb:	eb 24                	jmp    c0018821 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00187fd:	80 f9 11             	cmp    cl,0x11
c0018800:	75 13                	jne    c0018815 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018802:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018807:	80 fa 03             	cmp    dl,0x3
c001880a:	0f 85 9b 00 00 00    	jne    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018810:	e9 91 00 00 00       	jmp    c00188a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018815:	80 f9 12             	cmp    cl,0x12
c0018818:	75 14                	jne    c001882e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001881a:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c001881f:	fe ca                	dec    dl
c0018821:	0f 85 84 00 00 00    	jne    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018827:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c001882c:	eb 7d                	jmp    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001882e:	80 f9 14             	cmp    cl,0x14
c0018831:	75 12                	jne    c0018845 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018833:	4a                   	dec    edx
c0018834:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018839:	80 fa 01             	cmp    dl,0x1
c001883c:	77 6d                	ja     c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001883e:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018843:	eb 66                	jmp    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018845:	80 f9 15             	cmp    cl,0x15
c0018848:	75 31                	jne    c001887b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001884a:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c001884f:	80 fa 01             	cmp    dl,0x1
c0018852:	74 57                	je     c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018854:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018859:	80 fa 13             	cmp    dl,0x13
c001885c:	76 0c                	jbe    c001886a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001885e:	80 fa 30             	cmp    dl,0x30
c0018861:	75 48                	jne    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018863:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018868:	eb 41                	jmp    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001886a:	b9 04 00 09 00       	mov    ecx,0x90004
c001886f:	0f a3 d1             	bt     ecx,edx
c0018872:	73 37                	jae    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018874:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018879:	eb 30                	jmp    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887b:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018880:	80 f9 16             	cmp    cl,0x16
c0018883:	75 26                	jne    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018885:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c001888a:	84 d2                	test   dl,dl
c001888c:	74 1d                	je     c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888e:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018893:	80 fa 30             	cmp    dl,0x30
c0018896:	75 13                	jne    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018898:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c001889d:	eb 0c                	jmp    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889f:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c00188a4:	eb 05                	jmp    c00188ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a6:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c00188ab:	5b                   	pop    ebx
c00188ac:	5e                   	pop    esi
c00188ad:	5f                   	pop    edi
c00188ae:	5d                   	pop    ebp
c00188af:	c3                   	ret    

c00188b0 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188b0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188b8:	80 f9 04             	cmp    cl,0x4
c00188bb:	75 6b                	jne    c0018928 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00188bd:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00188c2:	80 fa 01             	cmp    dl,0x1
c00188c5:	0f 86 92 02 00 00    	jbe    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188cb:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c00188d0:	80 fa 02             	cmp    dl,0x2
c00188d3:	0f 84 84 02 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d9:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c00188de:	80 fa 03             	cmp    dl,0x3
c00188e1:	0f 84 76 02 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e7:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c00188ec:	80 fa 04             	cmp    dl,0x4
c00188ef:	0f 84 68 02 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f5:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00188fa:	80 fa 05             	cmp    dl,0x5
c00188fd:	0f 84 5a 02 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018903:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018908:	80 fa 07             	cmp    dl,0x7
c001890b:	0f 84 4c 02 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018911:	83 ea 08             	sub    edx,0x8
c0018914:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018919:	80 fa 01             	cmp    dl,0x1
c001891c:	0f 87 3b 02 00 00    	ja     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018922:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018927:	c3                   	ret    
c0018928:	80 f9 05             	cmp    cl,0x5
c001892b:	75 45                	jne    c0018972 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001892d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018930:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0018935:	80 f9 02             	cmp    cl,0x2
c0018938:	0f 86 1f 02 00 00    	jbe    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893e:	80 fa 04             	cmp    dl,0x4
c0018941:	0f 84 f3 01 00 00    	je     c0018b3a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018947:	80 fa 07             	cmp    dl,0x7
c001894a:	0f 84 0d 02 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018950:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018955:	80 fa 08             	cmp    dl,0x8
c0018958:	0f 84 ff 01 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895e:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018963:	80 fa 09             	cmp    dl,0x9
c0018966:	0f 85 f1 01 00 00    	jne    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896c:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018971:	c3                   	ret    
c0018972:	80 f9 06             	cmp    cl,0x6
c0018975:	0f 85 85 01 00 00    	jne    c0018b00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001897b:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018980:	80 fa 01             	cmp    dl,0x1
c0018983:	0f 84 d4 01 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018989:	8d 42 fb             	lea    eax,[edx-0x5]
c001898c:	3c 01                	cmp    al,0x1
c001898e:	0f 86 ac 01 00 00    	jbe    c0018b40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018994:	80 fa 03             	cmp    dl,0x3
c0018997:	0f 84 a3 01 00 00    	je     c0018b40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001899d:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189a0:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c00189a5:	80 f9 01             	cmp    cl,0x1
c00189a8:	0f 86 af 01 00 00    	jbe    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ae:	80 fa 09             	cmp    dl,0x9
c00189b1:	0f 84 8f 01 00 00    	je     c0018b46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189b7:	8d 4a f6             	lea    ecx,[edx-0xa]
c00189ba:	80 f9 01             	cmp    cl,0x1
c00189bd:	0f 86 9a 01 00 00    	jbe    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c3:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00189c8:	80 fa 0d             	cmp    dl,0xd
c00189cb:	0f 84 8c 01 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d1:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c00189d6:	80 fa 0e             	cmp    dl,0xe
c00189d9:	0f 84 7e 01 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189df:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c00189e4:	80 fa 0f             	cmp    dl,0xf
c00189e7:	0f 84 70 01 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ed:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c00189f2:	80 fa 15             	cmp    dl,0x15
c00189f5:	0f 84 62 01 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fb:	8d 4a ea             	lea    ecx,[edx-0x16]
c00189fe:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a03:	80 f9 01             	cmp    cl,0x1
c0018a06:	0f 86 51 01 00 00    	jbe    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0c:	80 fa 1a             	cmp    dl,0x1a
c0018a0f:	0f 84 37 01 00 00    	je     c0018b4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a15:	80 fa 1c             	cmp    dl,0x1c
c0018a18:	0f 84 34 01 00 00    	je     c0018b52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a1e:	80 fa 1d             	cmp    dl,0x1d
c0018a21:	0f 84 36 01 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a27:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a2c:	80 fa 25             	cmp    dl,0x25
c0018a2f:	0f 84 28 01 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a35:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a38:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a3d:	80 f9 01             	cmp    cl,0x1
c0018a40:	0f 86 17 01 00 00    	jbe    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a46:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a4b:	80 fa 2a             	cmp    dl,0x2a
c0018a4e:	0f 84 09 01 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a54:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a59:	80 fa 2c             	cmp    dl,0x2c
c0018a5c:	0f 84 fb 00 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a62:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018a67:	80 fa 2d             	cmp    dl,0x2d
c0018a6a:	0f 84 ed 00 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a70:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a75:	80 fa 2e             	cmp    dl,0x2e
c0018a78:	0f 84 df 00 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7e:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018a83:	80 fa 2f             	cmp    dl,0x2f
c0018a86:	0f 84 d1 00 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8c:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018a8f:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a94:	80 f9 01             	cmp    cl,0x1
c0018a97:	0f 86 c0 00 00 00    	jbe    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9d:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018aa2:	80 fa 37             	cmp    dl,0x37
c0018aa5:	0f 84 b2 00 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aab:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018ab0:	80 fa 3a             	cmp    dl,0x3a
c0018ab3:	0f 84 a4 00 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab9:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018abe:	80 fa 3c             	cmp    dl,0x3c
c0018ac1:	0f 84 96 00 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac7:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018acc:	80 fa 3d             	cmp    dl,0x3d
c0018acf:	0f 84 88 00 00 00    	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad5:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018ada:	80 fa 3e             	cmp    dl,0x3e
c0018add:	74 7e                	je     c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018adf:	8d 42 bb             	lea    eax,[edx-0x45]
c0018ae2:	3c 01                	cmp    al,0x1
c0018ae4:	76 72                	jbe    c0018b58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018ae6:	80 fa 3f             	cmp    dl,0x3f
c0018ae9:	74 6d                	je     c0018b58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018aeb:	80 fa 4a             	cmp    dl,0x4a
c0018aee:	74 0a                	je     c0018afa <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018af0:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018af5:	80 fa 4d             	cmp    dl,0x4d
c0018af8:	75 63                	jne    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afa:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018aff:	c3                   	ret    
c0018b00:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018b05:	80 f9 0b             	cmp    cl,0xb
c0018b08:	75 0a                	jne    c0018b14 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b0a:	fe ca                	dec    dl
c0018b0c:	75 4f                	jne    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0e:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b13:	c3                   	ret    
c0018b14:	80 f9 0f             	cmp    cl,0xf
c0018b17:	75 44                	jne    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b19:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018b1e:	80 fa 02             	cmp    dl,0x2
c0018b21:	76 3a                	jbe    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b23:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b26:	3c 01                	cmp    al,0x1
c0018b28:	76 0a                	jbe    c0018b34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b2a:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018b2f:	80 fa 06             	cmp    dl,0x6
c0018b32:	75 29                	jne    c0018b5d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b34:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018b39:	c3                   	ret    
c0018b3a:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018b3f:	c3                   	ret    
c0018b40:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018b45:	c3                   	ret    
c0018b46:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018b4b:	c3                   	ret    
c0018b4c:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018b51:	c3                   	ret    
c0018b52:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018b57:	c3                   	ret    
c0018b58:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b5d:	c3                   	ret    

c0018b5e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b5e:	60                   	pusha  
c0018b5f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b6b:	9c                   	pushf  
c0018b6c:	fa                   	cli    
c0018b6d:	0f 09                	wbinvd 
c0018b6f:	0f 30                	wrmsr  
c0018b71:	9d                   	popf   
c0018b72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b76:	89 02                	mov    DWORD PTR [edx],eax
c0018b78:	61                   	popa   
c0018b79:	c3                   	ret    

c0018b7a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018b7a:	60                   	pusha  
c0018b7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b7f:	9c                   	pushf  
c0018b80:	fa                   	cli    
c0018b81:	0f 09                	wbinvd 
c0018b83:	31 c0                	xor    eax,eax
c0018b85:	31 d2                	xor    edx,edx
c0018b87:	0f 32                	rdmsr  
c0018b89:	9d                   	popf   
c0018b8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b8e:	89 02                	mov    DWORD PTR [edx],eax
c0018b90:	61                   	popa   
c0018b91:	c3                   	ret    

c0018b92 <CPU::AMD_K6_writeback(int, int, int)>:
c0018b92:	56                   	push   esi
c0018b93:	53                   	push   ebx
c0018b94:	83 ec 10             	sub    esp,0x10
c0018b97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b9b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ba0:	75 5d                	jne    c0018bff <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ba2:	83 f8 08             	cmp    eax,0x8
c0018ba5:	75 09                	jne    c0018bb0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ba7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bac:	7e 13                	jle    c0018bc1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bae:	eb 30                	jmp    c0018be0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bb0:	83 f8 06             	cmp    eax,0x6
c0018bb3:	7c 4a                	jl     c0018bff <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bb5:	83 f8 07             	cmp    eax,0x7
c0018bb8:	7e 07                	jle    c0018bc1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bba:	83 f8 09             	cmp    eax,0x9
c0018bbd:	74 21                	je     c0018be0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bbf:	eb 3e                	jmp    c0018bff <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bc1:	89 e6                	mov    esi,esp
c0018bc3:	8b 1d c8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3c8
c0018bc9:	56                   	push   esi
c0018bca:	c1 eb 15             	shr    ebx,0x15
c0018bcd:	68 82 00 00 c0       	push   0xc0000082
c0018bd2:	83 e3 7e             	and    ebx,0x7e
c0018bd5:	e8 a0 ff ff ff       	call   c0018b7a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bda:	56                   	push   esi
c0018bdb:	6a 00                	push   0x0
c0018bdd:	53                   	push   ebx
c0018bde:	eb 12                	jmp    c0018bf2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018be0:	89 e3                	mov    ebx,esp
c0018be2:	53                   	push   ebx
c0018be3:	68 82 00 00 c0       	push   0xc0000082
c0018be8:	e8 8d ff ff ff       	call   c0018b7a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bed:	53                   	push   ebx
c0018bee:	6a 00                	push   0x0
c0018bf0:	6a 00                	push   0x0
c0018bf2:	68 82 00 00 c0       	push   0xc0000082
c0018bf7:	e8 62 ff ff ff       	call   c0018b5e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018bfc:	83 c4 18             	add    esp,0x18
c0018bff:	83 c4 10             	add    esp,0x10
c0018c02:	5b                   	pop    ebx
c0018c03:	5e                   	pop    esi
c0018c04:	c3                   	ret    
c0018c05:	90                   	nop

c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c06:	55                   	push   ebp
c0018c07:	57                   	push   edi
c0018c08:	56                   	push   esi
c0018c09:	53                   	push   ebx
c0018c0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c0e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c12:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c16:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c1a:	39 05 a0 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a0,eax
c0018c20:	75 23                	jne    c0018c45 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c22:	a1 0c 11 03 c0       	mov    eax,ds:0xc003110c
c0018c27:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c2b:	89 06                	mov    DWORD PTR [esi],eax
c0018c2d:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0018c32:	89 07                	mov    DWORD PTR [edi],eax
c0018c34:	a1 04 11 03 c0       	mov    eax,ds:0xc0031104
c0018c39:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c3c:	a1 00 11 03 c0       	mov    eax,ds:0xc0031100
c0018c41:	89 02                	mov    DWORD PTR [edx],eax
c0018c43:	eb 3f                	jmp    c0018c84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c45:	31 c9                	xor    ecx,ecx
c0018c47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c4b:	0f a2                	cpuid  
c0018c4d:	89 06                	mov    DWORD PTR [esi],eax
c0018c4f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c55:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c58:	89 10                	mov    DWORD PTR [eax],edx
c0018c5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c5e:	a3 a0 d8 02 c0       	mov    ds:0xc002d8a0,eax
c0018c63:	8b 06                	mov    eax,DWORD PTR [esi]
c0018c65:	a3 0c 11 03 c0       	mov    ds:0xc003110c,eax
c0018c6a:	8b 07                	mov    eax,DWORD PTR [edi]
c0018c6c:	a3 08 11 03 c0       	mov    ds:0xc0031108,eax
c0018c71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c74:	a3 04 11 03 c0       	mov    ds:0xc0031104,eax
c0018c79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c7f:	a3 00 11 03 c0       	mov    ds:0xc0031100,eax
c0018c84:	5b                   	pop    ebx
c0018c85:	5e                   	pop    esi
c0018c86:	5f                   	pop    edi
c0018c87:	5d                   	pop    ebp
c0018c88:	c3                   	ret    
c0018c89:	90                   	nop

c0018c8a <CPU::cpuidCheckEDX(unsigned int)>:
c0018c8a:	83 ec 10             	sub    esp,0x10
c0018c8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c91:	50                   	push   eax
c0018c92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c96:	50                   	push   eax
c0018c97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c9b:	50                   	push   eax
c0018c9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ca0:	50                   	push   eax
c0018ca1:	6a 01                	push   0x1
c0018ca3:	e8 5e ff ff ff       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ca8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cac:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018cb0:	0f 95 c0             	setne  al
c0018cb3:	83 c4 24             	add    esp,0x24
c0018cb6:	c3                   	ret    
c0018cb7:	90                   	nop

c0018cb8 <CPU::cpuidCheckECX(unsigned int)>:
c0018cb8:	83 ec 10             	sub    esp,0x10
c0018cbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cbf:	50                   	push   eax
c0018cc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc4:	50                   	push   eax
c0018cc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cc9:	50                   	push   eax
c0018cca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cce:	50                   	push   eax
c0018ccf:	6a 01                	push   0x1
c0018cd1:	e8 30 ff ff ff       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cda:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018cde:	0f 95 c0             	setne  al
c0018ce1:	83 c4 24             	add    esp,0x24
c0018ce4:	c3                   	ret    
c0018ce5:	90                   	nop

c0018ce6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018ce6:	83 ec 10             	sub    esp,0x10
c0018ce9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ced:	50                   	push   eax
c0018cee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf2:	50                   	push   eax
c0018cf3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cf7:	50                   	push   eax
c0018cf8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cfc:	50                   	push   eax
c0018cfd:	6a 07                	push   0x7
c0018cff:	e8 02 ff ff ff       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d08:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d0c:	0f 95 c0             	setne  al
c0018d0f:	83 c4 24             	add    esp,0x24
c0018d12:	c3                   	ret    
c0018d13:	90                   	nop

c0018d14 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d14:	83 ec 10             	sub    esp,0x10
c0018d17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d1b:	50                   	push   eax
c0018d1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d20:	50                   	push   eax
c0018d21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d25:	50                   	push   eax
c0018d26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d2a:	50                   	push   eax
c0018d2b:	6a 07                	push   0x7
c0018d2d:	e8 d4 fe ff ff       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d36:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d3a:	0f 95 c0             	setne  al
c0018d3d:	83 c4 24             	add    esp,0x24
c0018d40:	c3                   	ret    
c0018d41:	90                   	nop

c0018d42 <CPU::CPU()>:
c0018d42:	83 ec 0c             	sub    esp,0xc
c0018d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d49:	83 ec 08             	sub    esp,0x8
c0018d4c:	68 66 b8 02 c0       	push   0xc002b866
c0018d51:	50                   	push   eax
c0018d52:	e8 85 b7 ff ff       	call   c00144dc <Device::Device(char const*)>
c0018d57:	83 c4 10             	add    esp,0x10
c0018d5a:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c0018d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d63:	89 10                	mov    DWORD PTR [eax],edx
c0018d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d69:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d77:	05 78 01 00 00       	add    eax,0x178
c0018d7c:	83 ec 0c             	sub    esp,0xc
c0018d7f:	50                   	push   eax
c0018d80:	e8 d3 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018d85:	83 c4 10             	add    esp,0x10
c0018d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d8c:	05 7c 09 00 00       	add    eax,0x97c
c0018d91:	83 ec 0c             	sub    esp,0xc
c0018d94:	50                   	push   eax
c0018d95:	e8 20 65 ff ff       	call   c000f2ba <IDT::IDT()>
c0018d9a:	83 c4 10             	add    esp,0x10
c0018d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018da1:	05 7c 11 00 00       	add    eax,0x117c
c0018da6:	83 ec 0c             	sub    esp,0xc
c0018da9:	50                   	push   eax
c0018daa:	e8 fd 86 ff ff       	call   c00114ac <TSS::TSS()>
c0018daf:	83 c4 10             	add    esp,0x10
c0018db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dc1:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018dcb:	90                   	nop
c0018dcc:	83 c4 0c             	add    esp,0xc
c0018dcf:	c3                   	ret    

c0018dd0 <CPU::displayFeatures()>:
c0018dd0:	53                   	push   ebx
c0018dd1:	83 ec 10             	sub    esp,0x10
c0018dd4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018dd8:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018dde:	68 74 b5 02 c0       	push   0xc002b574
c0018de3:	e8 de a0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018de8:	59                   	pop    ecx
c0018de9:	58                   	pop    eax
c0018dea:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018df0:	50                   	push   eax
c0018df1:	68 85 b5 02 c0       	push   0xc002b585
c0018df6:	e8 cb a0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018dfb:	58                   	pop    eax
c0018dfc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e02:	5a                   	pop    edx
c0018e03:	c1 e8 0e             	shr    eax,0xe
c0018e06:	0f b6 c0             	movzx  eax,al
c0018e09:	50                   	push   eax
c0018e0a:	68 96 b5 02 c0       	push   0xc002b596
c0018e0f:	e8 b2 a0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018e14:	59                   	pop    ecx
c0018e15:	58                   	pop    eax
c0018e16:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e1c:	66 c1 e8 06          	shr    ax,0x6
c0018e20:	0f b6 c0             	movzx  eax,al
c0018e23:	50                   	push   eax
c0018e24:	68 a7 b5 02 c0       	push   0xc002b5a7
c0018e29:	e8 98 a0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018e2e:	c7 04 24 54 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba54
c0018e35:	e8 8c a0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018e3a:	83 c4 10             	add    esp,0x10
c0018e3d:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e42:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e49:	74 05                	je     c0018e50 <CPU::displayFeatures()+0x80>
c0018e4b:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e50:	52                   	push   edx
c0018e51:	52                   	push   edx
c0018e52:	50                   	push   eax
c0018e53:	68 b8 b5 02 c0       	push   0xc002b5b8
c0018e58:	e8 69 a0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e65:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018e6c:	78 05                	js     c0018e73 <CPU::displayFeatures()+0xa3>
c0018e6e:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e73:	51                   	push   ecx
c0018e74:	51                   	push   ecx
c0018e75:	50                   	push   eax
c0018e76:	68 cf b5 02 c0       	push   0xc002b5cf
c0018e7b:	e8 46 a0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018e80:	83 c4 10             	add    esp,0x10
c0018e83:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018e88:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018e8f:	75 05                	jne    c0018e96 <CPU::displayFeatures()+0xc6>
c0018e91:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018e96:	52                   	push   edx
c0018e97:	52                   	push   edx
c0018e98:	50                   	push   eax
c0018e99:	68 e6 b5 02 c0       	push   0xc002b5e6
c0018e9e:	e8 23 a0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018eab:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018eb2:	75 05                	jne    c0018eb9 <CPU::displayFeatures()+0xe9>
c0018eb4:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018eb9:	51                   	push   ecx
c0018eba:	51                   	push   ecx
c0018ebb:	50                   	push   eax
c0018ebc:	68 fd b5 02 c0       	push   0xc002b5fd
c0018ec1:	e8 00 a0 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018ec6:	83 c4 10             	add    esp,0x10
c0018ec9:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ece:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ed5:	75 05                	jne    c0018edc <CPU::displayFeatures()+0x10c>
c0018ed7:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018edc:	52                   	push   edx
c0018edd:	52                   	push   edx
c0018ede:	50                   	push   eax
c0018edf:	68 14 b6 02 c0       	push   0xc002b614
c0018ee4:	e8 dd 9f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018ee9:	83 c4 10             	add    esp,0x10
c0018eec:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018ef1:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018ef8:	75 05                	jne    c0018eff <CPU::displayFeatures()+0x12f>
c0018efa:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018eff:	51                   	push   ecx
c0018f00:	51                   	push   ecx
c0018f01:	50                   	push   eax
c0018f02:	68 2b b6 02 c0       	push   0xc002b62b
c0018f07:	e8 ba 9f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018f0c:	83 c4 10             	add    esp,0x10
c0018f0f:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f14:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f1b:	75 05                	jne    c0018f22 <CPU::displayFeatures()+0x152>
c0018f1d:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f22:	52                   	push   edx
c0018f23:	52                   	push   edx
c0018f24:	50                   	push   eax
c0018f25:	68 42 b6 02 c0       	push   0xc002b642
c0018f2a:	e8 97 9f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018f2f:	83 c4 10             	add    esp,0x10
c0018f32:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f37:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018f3e:	75 05                	jne    c0018f45 <CPU::displayFeatures()+0x175>
c0018f40:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f45:	51                   	push   ecx
c0018f46:	51                   	push   ecx
c0018f47:	50                   	push   eax
c0018f48:	68 59 b6 02 c0       	push   0xc002b659
c0018f4d:	e8 74 9f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018f52:	83 c4 10             	add    esp,0x10
c0018f55:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f5a:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018f61:	75 05                	jne    c0018f68 <CPU::displayFeatures()+0x198>
c0018f63:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f68:	52                   	push   edx
c0018f69:	52                   	push   edx
c0018f6a:	50                   	push   eax
c0018f6b:	68 70 b6 02 c0       	push   0xc002b670
c0018f70:	e8 51 9f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018f75:	83 c4 10             	add    esp,0x10
c0018f78:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018f7d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018f84:	75 05                	jne    c0018f8b <CPU::displayFeatures()+0x1bb>
c0018f86:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018f8b:	51                   	push   ecx
c0018f8c:	51                   	push   ecx
c0018f8d:	50                   	push   eax
c0018f8e:	68 87 b6 02 c0       	push   0xc002b687
c0018f93:	e8 2e 9f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018f98:	83 c4 10             	add    esp,0x10
c0018f9b:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018fa0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018fa7:	75 05                	jne    c0018fae <CPU::displayFeatures()+0x1de>
c0018fa9:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018fae:	52                   	push   edx
c0018faf:	52                   	push   edx
c0018fb0:	50                   	push   eax
c0018fb1:	68 9e b6 02 c0       	push   0xc002b69e
c0018fb6:	e8 0b 9f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018fbb:	83 c4 10             	add    esp,0x10
c0018fbe:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018fc3:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018fca:	75 05                	jne    c0018fd1 <CPU::displayFeatures()+0x201>
c0018fcc:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018fd1:	51                   	push   ecx
c0018fd2:	51                   	push   ecx
c0018fd3:	50                   	push   eax
c0018fd4:	68 b5 b6 02 c0       	push   0xc002b6b5
c0018fd9:	e8 e8 9e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0018fde:	83 c4 10             	add    esp,0x10
c0018fe1:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0018fe6:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018fed:	75 05                	jne    c0018ff4 <CPU::displayFeatures()+0x224>
c0018fef:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0018ff4:	52                   	push   edx
c0018ff5:	52                   	push   edx
c0018ff6:	50                   	push   eax
c0018ff7:	68 cc b6 02 c0       	push   0xc002b6cc
c0018ffc:	e8 c5 9e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0019001:	83 c4 10             	add    esp,0x10
c0019004:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c0019009:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019010:	78 05                	js     c0019017 <CPU::displayFeatures()+0x247>
c0019012:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c0019017:	51                   	push   ecx
c0019018:	51                   	push   ecx
c0019019:	50                   	push   eax
c001901a:	68 e3 b6 02 c0       	push   0xc002b6e3
c001901f:	e8 a2 9e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0019024:	83 c4 10             	add    esp,0x10
c0019027:	b8 d2 9f 02 c0       	mov    eax,0xc0029fd2
c001902c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019033:	75 05                	jne    c001903a <CPU::displayFeatures()+0x26a>
c0019035:	b8 d6 9f 02 c0       	mov    eax,0xc0029fd6
c001903a:	52                   	push   edx
c001903b:	52                   	push   edx
c001903c:	50                   	push   eax
c001903d:	68 fa b6 02 c0       	push   0xc002b6fa
c0019042:	e8 7f 9e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0019047:	83 c4 18             	add    esp,0x18
c001904a:	5b                   	pop    ebx
c001904b:	c3                   	ret    

c001904c <CPU::detectFeatures()>:
c001904c:	55                   	push   ebp
c001904d:	57                   	push   edi
c001904e:	56                   	push   esi
c001904f:	53                   	push   ebx
c0019050:	83 ec 50             	sub    esp,0x50
c0019053:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019057:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019061:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019068:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001906e:	6a 0d                	push   0xd
c0019070:	6a 00                	push   0x0
c0019072:	57                   	push   edi
c0019073:	e8 00 77 fe ff       	call   c0000778 <memset>
c0019078:	83 c4 10             	add    esp,0x10
c001907b:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019080:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019087:	0f 84 20 09 00 00    	je     c00199ad <CPU::detectFeatures()+0x961>
c001908d:	83 ec 0c             	sub    esp,0xc
c0019090:	6a 10                	push   0x10
c0019092:	e8 f3 fb ff ff       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c0019097:	83 e0 01             	and    eax,0x1
c001909a:	8d 14 00             	lea    edx,[eax+eax*1]
c001909d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190a3:	83 e0 fd             	and    eax,0xfffffffd
c00190a6:	09 d0                	or     eax,edx
c00190a8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190ae:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00190b5:	e8 d0 fb ff ff       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c00190ba:	83 e0 01             	and    eax,0x1
c00190bd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190c4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190ca:	83 e0 fb             	and    eax,0xfffffffb
c00190cd:	09 d0                	or     eax,edx
c00190cf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190d5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00190dc:	e8 a9 fb ff ff       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c00190e1:	83 e0 01             	and    eax,0x1
c00190e4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190eb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190f1:	83 e0 f7             	and    eax,0xfffffff7
c00190f4:	09 d0                	or     eax,edx
c00190f6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190fc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019103:	e8 82 fb ff ff       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c0019108:	83 e0 01             	and    eax,0x1
c001910b:	c1 e0 04             	shl    eax,0x4
c001910e:	88 c2                	mov    dl,al
c0019110:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019116:	83 e0 ef             	and    eax,0xffffffef
c0019119:	09 d0                	or     eax,edx
c001911b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019121:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019128:	e8 5d fb ff ff       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c001912d:	83 e0 01             	and    eax,0x1
c0019130:	c1 e0 05             	shl    eax,0x5
c0019133:	88 c2                	mov    dl,al
c0019135:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001913b:	83 e0 df             	and    eax,0xffffffdf
c001913e:	09 d0                	or     eax,edx
c0019140:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019146:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001914d:	e8 38 fb ff ff       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c0019152:	83 e0 01             	and    eax,0x1
c0019155:	8d 14 00             	lea    edx,[eax+eax*1]
c0019158:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001915e:	83 e0 fd             	and    eax,0xfffffffd
c0019161:	09 d0                	or     eax,edx
c0019163:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019169:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019170:	e8 15 fb ff ff       	call   c0018c8a <CPU::cpuidCheckEDX(unsigned int)>
c0019175:	83 e0 01             	and    eax,0x1
c0019178:	c1 e0 06             	shl    eax,0x6
c001917b:	88 c2                	mov    dl,al
c001917d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019183:	83 e0 bf             	and    eax,0xffffffbf
c0019186:	09 d0                	or     eax,edx
c0019188:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001918e:	58                   	pop    eax
c001918f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019193:	56                   	push   esi
c0019194:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019198:	55                   	push   ebp
c0019199:	8d 44 24 28          	lea    eax,[esp+0x28]
c001919d:	50                   	push   eax
c001919e:	8d 54 24 28          	lea    edx,[esp+0x28]
c00191a2:	52                   	push   edx
c00191a3:	6a 00                	push   0x0
c00191a5:	e8 5c fa ff ff       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191aa:	83 c4 1c             	add    esp,0x1c
c00191ad:	6a 04                	push   0x4
c00191af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191b3:	50                   	push   eax
c00191b4:	57                   	push   edi
c00191b5:	e8 8a 75 fe ff       	call   c0000744 <memcpy>
c00191ba:	83 c4 0c             	add    esp,0xc
c00191bd:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00191c3:	6a 04                	push   0x4
c00191c5:	56                   	push   esi
c00191c6:	50                   	push   eax
c00191c7:	e8 78 75 fe ff       	call   c0000744 <memcpy>
c00191cc:	83 c4 0c             	add    esp,0xc
c00191cf:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00191d5:	6a 04                	push   0x4
c00191d7:	55                   	push   ebp
c00191d8:	50                   	push   eax
c00191d9:	e8 66 75 fe ff       	call   c0000744 <memcpy>
c00191de:	58                   	pop    eax
c00191df:	5a                   	pop    edx
c00191e0:	68 11 b7 02 c0       	push   0xc002b711
c00191e5:	57                   	push   edi
c00191e6:	e8 d5 76 fe ff       	call   c00008c0 <strcmp>
c00191eb:	83 c4 10             	add    esp,0x10
c00191ee:	85 c0                	test   eax,eax
c00191f0:	75 0f                	jne    c0019201 <CPU::detectFeatures()+0x1b5>
c00191f2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00191fc:	e9 22 02 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c0019201:	50                   	push   eax
c0019202:	50                   	push   eax
c0019203:	68 1e b7 02 c0       	push   0xc002b71e
c0019208:	57                   	push   edi
c0019209:	e8 b2 76 fe ff       	call   c00008c0 <strcmp>
c001920e:	83 c4 10             	add    esp,0x10
c0019211:	85 c0                	test   eax,eax
c0019213:	74 dd                	je     c00191f2 <CPU::detectFeatures()+0x1a6>
c0019215:	51                   	push   ecx
c0019216:	51                   	push   ecx
c0019217:	68 2b b7 02 c0       	push   0xc002b72b
c001921c:	57                   	push   edi
c001921d:	e8 9e 76 fe ff       	call   c00008c0 <strcmp>
c0019222:	83 c4 10             	add    esp,0x10
c0019225:	85 c0                	test   eax,eax
c0019227:	74 2a                	je     c0019253 <CPU::detectFeatures()+0x207>
c0019229:	52                   	push   edx
c001922a:	52                   	push   edx
c001922b:	68 38 b7 02 c0       	push   0xc002b738
c0019230:	57                   	push   edi
c0019231:	e8 8a 76 fe ff       	call   c00008c0 <strcmp>
c0019236:	83 c4 10             	add    esp,0x10
c0019239:	85 c0                	test   eax,eax
c001923b:	74 16                	je     c0019253 <CPU::detectFeatures()+0x207>
c001923d:	50                   	push   eax
c001923e:	50                   	push   eax
c001923f:	68 45 b7 02 c0       	push   0xc002b745
c0019244:	57                   	push   edi
c0019245:	e8 76 76 fe ff       	call   c00008c0 <strcmp>
c001924a:	83 c4 10             	add    esp,0x10
c001924d:	85 c0                	test   eax,eax
c001924f:	74 48                	je     c0019299 <CPU::detectFeatures()+0x24d>
c0019251:	eb 0f                	jmp    c0019262 <CPU::detectFeatures()+0x216>
c0019253:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001925d:	e9 c1 01 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c0019262:	50                   	push   eax
c0019263:	50                   	push   eax
c0019264:	68 52 b7 02 c0       	push   0xc002b752
c0019269:	57                   	push   edi
c001926a:	e8 51 76 fe ff       	call   c00008c0 <strcmp>
c001926f:	83 c4 10             	add    esp,0x10
c0019272:	85 c0                	test   eax,eax
c0019274:	74 23                	je     c0019299 <CPU::detectFeatures()+0x24d>
c0019276:	50                   	push   eax
c0019277:	50                   	push   eax
c0019278:	68 5f b7 02 c0       	push   0xc002b75f
c001927d:	57                   	push   edi
c001927e:	e8 3d 76 fe ff       	call   c00008c0 <strcmp>
c0019283:	83 c4 10             	add    esp,0x10
c0019286:	85 c0                	test   eax,eax
c0019288:	75 1e                	jne    c00192a8 <CPU::detectFeatures()+0x25c>
c001928a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019294:	e9 8a 01 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c0019299:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00192a3:	e9 7b 01 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c00192a8:	50                   	push   eax
c00192a9:	50                   	push   eax
c00192aa:	68 6c b7 02 c0       	push   0xc002b76c
c00192af:	57                   	push   edi
c00192b0:	e8 0b 76 fe ff       	call   c00008c0 <strcmp>
c00192b5:	83 c4 10             	add    esp,0x10
c00192b8:	85 c0                	test   eax,eax
c00192ba:	75 0f                	jne    c00192cb <CPU::detectFeatures()+0x27f>
c00192bc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00192c6:	e9 58 01 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c00192cb:	50                   	push   eax
c00192cc:	50                   	push   eax
c00192cd:	68 2b b7 02 c0       	push   0xc002b72b
c00192d2:	57                   	push   edi
c00192d3:	e8 e8 75 fe ff       	call   c00008c0 <strcmp>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	85 c0                	test   eax,eax
c00192dd:	75 0f                	jne    c00192ee <CPU::detectFeatures()+0x2a2>
c00192df:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00192e9:	e9 35 01 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c00192ee:	50                   	push   eax
c00192ef:	50                   	push   eax
c00192f0:	68 79 b7 02 c0       	push   0xc002b779
c00192f5:	57                   	push   edi
c00192f6:	e8 c5 75 fe ff       	call   c00008c0 <strcmp>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	85 c0                	test   eax,eax
c0019300:	75 0f                	jne    c0019311 <CPU::detectFeatures()+0x2c5>
c0019302:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001930c:	e9 12 01 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c0019311:	51                   	push   ecx
c0019312:	51                   	push   ecx
c0019313:	68 86 b7 02 c0       	push   0xc002b786
c0019318:	57                   	push   edi
c0019319:	e8 a2 75 fe ff       	call   c00008c0 <strcmp>
c001931e:	83 c4 10             	add    esp,0x10
c0019321:	85 c0                	test   eax,eax
c0019323:	75 0f                	jne    c0019334 <CPU::detectFeatures()+0x2e8>
c0019325:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001932f:	e9 ef 00 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c0019334:	52                   	push   edx
c0019335:	52                   	push   edx
c0019336:	68 93 b7 02 c0       	push   0xc002b793
c001933b:	57                   	push   edi
c001933c:	e8 7f 75 fe ff       	call   c00008c0 <strcmp>
c0019341:	83 c4 10             	add    esp,0x10
c0019344:	85 c0                	test   eax,eax
c0019346:	75 0f                	jne    c0019357 <CPU::detectFeatures()+0x30b>
c0019348:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019352:	e9 cc 00 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c0019357:	50                   	push   eax
c0019358:	50                   	push   eax
c0019359:	68 a0 b7 02 c0       	push   0xc002b7a0
c001935e:	57                   	push   edi
c001935f:	e8 5c 75 fe ff       	call   c00008c0 <strcmp>
c0019364:	83 c4 10             	add    esp,0x10
c0019367:	85 c0                	test   eax,eax
c0019369:	75 0f                	jne    c001937a <CPU::detectFeatures()+0x32e>
c001936b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019375:	e9 a9 00 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c001937a:	50                   	push   eax
c001937b:	50                   	push   eax
c001937c:	68 ad b7 02 c0       	push   0xc002b7ad
c0019381:	57                   	push   edi
c0019382:	e8 39 75 fe ff       	call   c00008c0 <strcmp>
c0019387:	83 c4 10             	add    esp,0x10
c001938a:	85 c0                	test   eax,eax
c001938c:	75 0f                	jne    c001939d <CPU::detectFeatures()+0x351>
c001938e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019398:	e9 86 00 00 00       	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c001939d:	50                   	push   eax
c001939e:	50                   	push   eax
c001939f:	68 ba b7 02 c0       	push   0xc002b7ba
c00193a4:	57                   	push   edi
c00193a5:	e8 16 75 fe ff       	call   c00008c0 <strcmp>
c00193aa:	83 c4 10             	add    esp,0x10
c00193ad:	85 c0                	test   eax,eax
c00193af:	75 0c                	jne    c00193bd <CPU::detectFeatures()+0x371>
c00193b1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00193bb:	eb 66                	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c00193bd:	50                   	push   eax
c00193be:	50                   	push   eax
c00193bf:	68 c7 b7 02 c0       	push   0xc002b7c7
c00193c4:	57                   	push   edi
c00193c5:	e8 f6 74 fe ff       	call   c00008c0 <strcmp>
c00193ca:	83 c4 10             	add    esp,0x10
c00193cd:	85 c0                	test   eax,eax
c00193cf:	75 0c                	jne    c00193dd <CPU::detectFeatures()+0x391>
c00193d1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00193db:	eb 46                	jmp    c0019423 <CPU::detectFeatures()+0x3d7>
c00193dd:	50                   	push   eax
c00193de:	50                   	push   eax
c00193df:	68 d4 b7 02 c0       	push   0xc002b7d4
c00193e4:	57                   	push   edi
c00193e5:	e8 d6 74 fe ff       	call   c00008c0 <strcmp>
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	85 c0                	test   eax,eax
c00193ef:	74 e0                	je     c00193d1 <CPU::detectFeatures()+0x385>
c00193f1:	50                   	push   eax
c00193f2:	50                   	push   eax
c00193f3:	68 e1 b7 02 c0       	push   0xc002b7e1
c00193f8:	57                   	push   edi
c00193f9:	e8 c2 74 fe ff       	call   c00008c0 <strcmp>
c00193fe:	83 c4 10             	add    esp,0x10
c0019401:	85 c0                	test   eax,eax
c0019403:	74 cc                	je     c00193d1 <CPU::detectFeatures()+0x385>
c0019405:	51                   	push   ecx
c0019406:	51                   	push   ecx
c0019407:	68 ee b7 02 c0       	push   0xc002b7ee
c001940c:	57                   	push   edi
c001940d:	e8 ae 74 fe ff       	call   c00008c0 <strcmp>
c0019412:	83 c4 10             	add    esp,0x10
c0019415:	85 c0                	test   eax,eax
c0019417:	74 b8                	je     c00193d1 <CPU::detectFeatures()+0x385>
c0019419:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019423:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019428:	0f 86 be 00 00 00    	jbe    c00194ec <CPU::detectFeatures()+0x4a0>
c001942e:	83 ec 0c             	sub    esp,0xc
c0019431:	68 80 00 00 00       	push   0x80
c0019436:	e8 ab f8 ff ff       	call   c0018ce6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001943b:	83 e0 01             	and    eax,0x1
c001943e:	c1 e0 06             	shl    eax,0x6
c0019441:	88 c2                	mov    dl,al
c0019443:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019449:	83 e0 bf             	and    eax,0xffffffbf
c001944c:	09 d0                	or     eax,edx
c001944e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019454:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001945b:	e8 86 f8 ff ff       	call   c0018ce6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019460:	83 e0 01             	and    eax,0x1
c0019463:	c1 e0 04             	shl    eax,0x4
c0019466:	88 c2                	mov    dl,al
c0019468:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001946e:	83 e0 ef             	and    eax,0xffffffef
c0019471:	09 d0                	or     eax,edx
c0019473:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019479:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019480:	e8 61 f8 ff ff       	call   c0018ce6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019485:	c1 e0 07             	shl    eax,0x7
c0019488:	88 c2                	mov    dl,al
c001948a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019490:	83 e0 7f             	and    eax,0x7f
c0019493:	09 d0                	or     eax,edx
c0019495:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001949b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194a2:	e8 6d f8 ff ff       	call   c0018d14 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194a7:	83 e0 01             	and    eax,0x1
c00194aa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00194b1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194b7:	83 e0 f7             	and    eax,0xfffffff7
c00194ba:	09 d0                	or     eax,edx
c00194bc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194c2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00194c9:	e8 46 f8 ff ff       	call   c0018d14 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194ce:	83 c4 10             	add    esp,0x10
c00194d1:	83 e0 01             	and    eax,0x1
c00194d4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00194db:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194e1:	83 e0 fb             	and    eax,0xfffffffb
c00194e4:	09 d0                	or     eax,edx
c00194e6:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194ec:	83 ec 0c             	sub    esp,0xc
c00194ef:	56                   	push   esi
c00194f0:	55                   	push   ebp
c00194f1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00194f5:	57                   	push   edi
c00194f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194fa:	50                   	push   eax
c00194fb:	6a 01                	push   0x1
c00194fd:	e8 04 f7 ff ff       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019502:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019506:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001950c:	88 ca                	mov    dl,cl
c001950e:	83 e0 f0             	and    eax,0xfffffff0
c0019511:	83 e2 0f             	and    edx,0xf
c0019514:	09 d0                	or     eax,edx
c0019516:	88 ca                	mov    dl,cl
c0019518:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001951e:	c0 ea 04             	shr    dl,0x4
c0019521:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019525:	0f b6 c2             	movzx  eax,dl
c0019528:	83 c4 20             	add    esp,0x20
c001952b:	c1 e0 06             	shl    eax,0x6
c001952e:	89 c5                	mov    ebp,eax
c0019530:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019536:	66 25 3f c0          	and    ax,0xc03f
c001953a:	09 e8                	or     eax,ebp
c001953c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019543:	89 c8                	mov    eax,ecx
c0019545:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001954b:	c1 e8 08             	shr    eax,0x8
c001954e:	83 e2 3f             	and    edx,0x3f
c0019551:	83 e0 0f             	and    eax,0xf
c0019554:	89 c5                	mov    ebp,eax
c0019556:	c1 e5 06             	shl    ebp,0x6
c0019559:	09 d5                	or     ebp,edx
c001955b:	89 ea                	mov    edx,ebp
c001955d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019563:	88 c2                	mov    dl,al
c0019565:	c0 ea 02             	shr    dl,0x2
c0019568:	89 d5                	mov    ebp,edx
c001956a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019570:	83 e2 c0             	and    edx,0xffffffc0
c0019573:	09 d5                	or     ebp,edx
c0019575:	89 ea                	mov    edx,ebp
c0019577:	89 cd                	mov    ebp,ecx
c0019579:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001957f:	c1 ed 0c             	shr    ebp,0xc
c0019582:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019588:	83 e5 03             	and    ebp,0x3
c001958b:	83 e2 cf             	and    edx,0xffffffcf
c001958e:	c1 e5 04             	shl    ebp,0x4
c0019591:	09 d5                	or     ebp,edx
c0019593:	3c 06                	cmp    al,0x6
c0019595:	89 ea                	mov    edx,ebp
c0019597:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001959d:	74 04                	je     c00195a3 <CPU::detectFeatures()+0x557>
c001959f:	3c 0f                	cmp    al,0xf
c00195a1:	75 5c                	jne    c00195ff <CPU::detectFeatures()+0x5b3>
c00195a3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00195a7:	89 cd                	mov    ebp,ecx
c00195a9:	c1 ed 10             	shr    ebp,0x10
c00195ac:	c1 e5 04             	shl    ebp,0x4
c00195af:	09 ea                	or     edx,ebp
c00195b1:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00195b7:	0f b6 d2             	movzx  edx,dl
c00195ba:	66 81 e5 3f c0       	and    bp,0xc03f
c00195bf:	c1 e2 06             	shl    edx,0x6
c00195c2:	09 ea                	or     edx,ebp
c00195c4:	3c 0f                	cmp    al,0xf
c00195c6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00195cd:	75 30                	jne    c00195ff <CPU::detectFeatures()+0x5b3>
c00195cf:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00195d5:	c1 e9 14             	shr    ecx,0x14
c00195d8:	83 e0 3f             	and    eax,0x3f
c00195db:	83 c1 0f             	add    ecx,0xf
c00195de:	88 ca                	mov    dl,cl
c00195e0:	c0 e9 02             	shr    cl,0x2
c00195e3:	c1 e2 06             	shl    edx,0x6
c00195e6:	09 d0                	or     eax,edx
c00195e8:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00195ee:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00195f4:	83 e0 c0             	and    eax,0xffffffc0
c00195f7:	09 c1                	or     ecx,eax
c00195f9:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00195ff:	83 ec 0c             	sub    esp,0xc
c0019602:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019609:	56                   	push   esi
c001960a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001960e:	50                   	push   eax
c001960f:	57                   	push   edi
c0019610:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019614:	55                   	push   ebp
c0019615:	68 00 00 00 80       	push   0x80000000
c001961a:	e8 e7 f5 ff ff       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001961f:	83 c4 20             	add    esp,0x20
c0019622:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001962a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001962e:	76 1e                	jbe    c001964e <CPU::detectFeatures()+0x602>
c0019630:	83 ec 0c             	sub    esp,0xc
c0019633:	56                   	push   esi
c0019634:	50                   	push   eax
c0019635:	57                   	push   edi
c0019636:	55                   	push   ebp
c0019637:	68 01 00 00 80       	push   0x80000001
c001963c:	e8 c5 f5 ff ff       	call   c0018c06 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019641:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001964b:	83 c4 20             	add    esp,0x20
c001964e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019654:	83 f8 01             	cmp    eax,0x1
c0019657:	75 6f                	jne    c00196c8 <CPU::detectFeatures()+0x67c>
c0019659:	51                   	push   ecx
c001965a:	51                   	push   ecx
c001965b:	68 fa b7 02 c0       	push   0xc002b7fa
c0019660:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019664:	56                   	push   esi
c0019665:	e8 ca 71 fe ff       	call   c0000834 <strcpy>
c001966a:	5f                   	pop    edi
c001966b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019671:	5d                   	pop    ebp
c0019672:	66 c1 e8 06          	shr    ax,0x6
c0019676:	0f b6 c0             	movzx  eax,al
c0019679:	50                   	push   eax
c001967a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019680:	c1 e8 0e             	shr    eax,0xe
c0019683:	0f b6 c0             	movzx  eax,al
c0019686:	50                   	push   eax
c0019687:	e8 24 f2 ff ff       	call   c00188b0 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001968c:	5a                   	pop    edx
c001968d:	59                   	pop    ecx
c001968e:	50                   	push   eax
c001968f:	56                   	push   esi
c0019690:	e8 df 72 fe ff       	call   c0000974 <strcat>
c0019695:	5f                   	pop    edi
c0019696:	5d                   	pop    ebp
c0019697:	56                   	push   esi
c0019698:	53                   	push   ebx
c0019699:	e8 30 ae ff ff       	call   c00144ce <Device::setName(char const*)>
c001969e:	58                   	pop    eax
c001969f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196a5:	5a                   	pop    edx
c00196a6:	68 01 b8 02 c0       	push   0xc002b801
c00196ab:	50                   	push   eax
c00196ac:	e8 0f 72 fe ff       	call   c00008c0 <strcmp>
c00196b1:	83 c4 10             	add    esp,0x10
c00196b4:	85 c0                	test   eax,eax
c00196b6:	0f 85 71 03 00 00    	jne    c0019a2d <CPU::detectFeatures()+0x9e1>
c00196bc:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00196c3:	e9 65 03 00 00       	jmp    c0019a2d <CPU::detectFeatures()+0x9e1>
c00196c8:	83 f8 02             	cmp    eax,0x2
c00196cb:	0f 85 b5 00 00 00    	jne    c0019786 <CPU::detectFeatures()+0x73a>
c00196d1:	57                   	push   edi
c00196d2:	57                   	push   edi
c00196d3:	68 13 b8 02 c0       	push   0xc002b813
c00196d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196dc:	56                   	push   esi
c00196dd:	e8 52 71 fe ff       	call   c0000834 <strcpy>
c00196e2:	5d                   	pop    ebp
c00196e3:	58                   	pop    eax
c00196e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196ea:	66 c1 e8 06          	shr    ax,0x6
c00196ee:	0f b6 c0             	movzx  eax,al
c00196f1:	50                   	push   eax
c00196f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196f8:	c1 e8 0e             	shr    eax,0xe
c00196fb:	0f b6 c0             	movzx  eax,al
c00196fe:	50                   	push   eax
c00196ff:	e8 18 f0 ff ff       	call   c001871c <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019704:	5a                   	pop    edx
c0019705:	59                   	pop    ecx
c0019706:	50                   	push   eax
c0019707:	56                   	push   esi
c0019708:	e8 67 72 fe ff       	call   c0000974 <strcat>
c001970d:	5f                   	pop    edi
c001970e:	5d                   	pop    ebp
c001970f:	56                   	push   esi
c0019710:	53                   	push   ebx
c0019711:	e8 b8 ad ff ff       	call   c00144ce <Device::setName(char const*)>
c0019716:	58                   	pop    eax
c0019717:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001971d:	5a                   	pop    edx
c001971e:	68 18 b8 02 c0       	push   0xc002b818
c0019723:	50                   	push   eax
c0019724:	e8 97 71 fe ff       	call   c00008c0 <strcmp>
c0019729:	83 c4 10             	add    esp,0x10
c001972c:	85 c0                	test   eax,eax
c001972e:	75 20                	jne    c0019750 <CPU::detectFeatures()+0x704>
c0019730:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0019736:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001973c:	a8 01                	test   al,0x1
c001973e:	74 10                	je     c0019750 <CPU::detectFeatures()+0x704>
c0019740:	83 e0 fe             	and    eax,0xfffffffe
c0019743:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019749:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019750:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019756:	c1 e8 0e             	shr    eax,0xe
c0019759:	3c 05                	cmp    al,0x5
c001975b:	0f 85 cc 02 00 00    	jne    c0019a2d <CPU::detectFeatures()+0x9e1>
c0019761:	56                   	push   esi
c0019762:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019768:	83 e0 0f             	and    eax,0xf
c001976b:	50                   	push   eax
c001976c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019772:	66 c1 e8 06          	shr    ax,0x6
c0019776:	0f b6 c0             	movzx  eax,al
c0019779:	50                   	push   eax
c001977a:	6a 05                	push   0x5
c001977c:	e8 11 f4 ff ff       	call   c0018b92 <CPU::AMD_K6_writeback(int, int, int)>
c0019781:	e9 1f 02 00 00       	jmp    c00199a5 <CPU::detectFeatures()+0x959>
c0019786:	8d 50 fd             	lea    edx,[eax-0x3]
c0019789:	83 fa 01             	cmp    edx,0x1
c001978c:	76 09                	jbe    c0019797 <CPU::detectFeatures()+0x74b>
c001978e:	83 f8 06             	cmp    eax,0x6
c0019791:	0f 85 91 01 00 00    	jne    c0019928 <CPU::detectFeatures()+0x8dc>
c0019797:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001979d:	c1 ea 0e             	shr    edx,0xe
c00197a0:	80 fa 05             	cmp    dl,0x5
c00197a3:	75 7b                	jne    c0019820 <CPU::detectFeatures()+0x7d4>
c00197a5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197ab:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197b0:	66 81 fa 00 01       	cmp    dx,0x100
c00197b5:	75 0c                	jne    c00197c3 <CPU::detectFeatures()+0x777>
c00197b7:	51                   	push   ecx
c00197b8:	51                   	push   ecx
c00197b9:	68 1f b8 02 c0       	push   0xc002b81f
c00197be:	e9 dc 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c00197c3:	66 81 fa 00 02       	cmp    dx,0x200
c00197c8:	75 0c                	jne    c00197d6 <CPU::detectFeatures()+0x78a>
c00197ca:	52                   	push   edx
c00197cb:	52                   	push   edx
c00197cc:	68 32 b8 02 c0       	push   0xc002b832
c00197d1:	e9 c9 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c00197d6:	66 81 fa 40 02       	cmp    dx,0x240
c00197db:	75 0c                	jne    c00197e9 <CPU::detectFeatures()+0x79d>
c00197dd:	50                   	push   eax
c00197de:	50                   	push   eax
c00197df:	68 44 b8 02 c0       	push   0xc002b844
c00197e4:	e9 b6 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c00197e9:	83 f8 06             	cmp    eax,0x6
c00197ec:	75 0c                	jne    c00197fa <CPU::detectFeatures()+0x7ae>
c00197ee:	50                   	push   eax
c00197ef:	50                   	push   eax
c00197f0:	68 56 b8 02 c0       	push   0xc002b856
c00197f5:	e9 a5 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c00197fa:	83 f8 04             	cmp    eax,0x4
c00197fd:	75 0c                	jne    c001980b <CPU::detectFeatures()+0x7bf>
c00197ff:	50                   	push   eax
c0019800:	50                   	push   eax
c0019801:	68 62 b8 02 c0       	push   0xc002b862
c0019806:	e9 94 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c001980b:	83 f8 03             	cmp    eax,0x3
c001980e:	0f 85 19 02 00 00    	jne    c0019a2d <CPU::detectFeatures()+0x9e1>
c0019814:	50                   	push   eax
c0019815:	50                   	push   eax
c0019816:	68 6a b8 02 c0       	push   0xc002b86a
c001981b:	e9 7f 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019820:	80 fa 06             	cmp    dl,0x6
c0019823:	0f 85 db 00 00 00    	jne    c0019904 <CPU::detectFeatures()+0x8b8>
c0019829:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001982f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019834:	66 81 fa 80 01       	cmp    dx,0x180
c0019839:	75 0c                	jne    c0019847 <CPU::detectFeatures()+0x7fb>
c001983b:	50                   	push   eax
c001983c:	50                   	push   eax
c001983d:	68 75 b8 02 c0       	push   0xc002b875
c0019842:	e9 58 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019847:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001984d:	66 f7 c1 80 ff       	test   cx,0xff80
c0019852:	75 0c                	jne    c0019860 <CPU::detectFeatures()+0x814>
c0019854:	50                   	push   eax
c0019855:	50                   	push   eax
c0019856:	68 85 b8 02 c0       	push   0xc002b885
c001985b:	e9 3f 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019860:	66 81 fa 40 02       	cmp    dx,0x240
c0019865:	75 0c                	jne    c0019873 <CPU::detectFeatures()+0x827>
c0019867:	55                   	push   ebp
c0019868:	55                   	push   ebp
c0019869:	68 8c b8 02 c0       	push   0xc002b88c
c001986e:	e9 2c 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019873:	66 81 fa 80 02       	cmp    dx,0x280
c0019878:	75 0c                	jne    c0019886 <CPU::detectFeatures()+0x83a>
c001987a:	57                   	push   edi
c001987b:	57                   	push   edi
c001987c:	68 95 b8 02 c0       	push   0xc002b895
c0019881:	e9 19 01 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019886:	66 81 fa 40 03       	cmp    dx,0x340
c001988b:	74 ed                	je     c001987a <CPU::detectFeatures()+0x82e>
c001988d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019892:	75 0c                	jne    c00198a0 <CPU::detectFeatures()+0x854>
c0019894:	56                   	push   esi
c0019895:	56                   	push   esi
c0019896:	68 9c b8 02 c0       	push   0xc002b89c
c001989b:	e9 ff 00 00 00       	jmp    c001999f <CPU::detectFeatures()+0x953>
c00198a0:	83 f8 06             	cmp    eax,0x6
c00198a3:	0f 84 45 ff ff ff    	je     c00197ee <CPU::detectFeatures()+0x7a2>
c00198a9:	83 f8 04             	cmp    eax,0x4
c00198ac:	0f 84 4d ff ff ff    	je     c00197ff <CPU::detectFeatures()+0x7b3>
c00198b2:	83 f8 03             	cmp    eax,0x3
c00198b5:	0f 85 72 01 00 00    	jne    c0019a2d <CPU::detectFeatures()+0x9e1>
c00198bb:	51                   	push   ecx
c00198bc:	51                   	push   ecx
c00198bd:	68 a5 b8 02 c0       	push   0xc002b8a5
c00198c2:	53                   	push   ebx
c00198c3:	e8 06 ac ff ff       	call   c00144ce <Device::setName(char const*)>
c00198c8:	b1 c1                	mov    cl,0xc1
c00198ca:	88 c8                	mov    al,cl
c00198cc:	e6 22                	out    0x22,al
c00198ce:	e4 23                	in     al,0x23
c00198d0:	88 c2                	mov    dl,al
c00198d2:	88 c8                	mov    al,cl
c00198d4:	e6 22                	out    0x22,al
c00198d6:	88 d0                	mov    al,dl
c00198d8:	83 c8 10             	or     eax,0x10
c00198db:	e6 23                	out    0x23,al
c00198dd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00198e4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00198e7:	89 d0                	mov    eax,edx
c00198e9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00198ef:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00198f3:	40                   	inc    eax
c00198f4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00198fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00198ff:	e9 a1 00 00 00       	jmp    c00199a5 <CPU::detectFeatures()+0x959>
c0019904:	83 f8 06             	cmp    eax,0x6
c0019907:	0f 84 e1 fe ff ff    	je     c00197ee <CPU::detectFeatures()+0x7a2>
c001990d:	83 f8 04             	cmp    eax,0x4
c0019910:	0f 84 e9 fe ff ff    	je     c00197ff <CPU::detectFeatures()+0x7b3>
c0019916:	83 f8 03             	cmp    eax,0x3
c0019919:	0f 85 0e 01 00 00    	jne    c0019a2d <CPU::detectFeatures()+0x9e1>
c001991f:	52                   	push   edx
c0019920:	52                   	push   edx
c0019921:	68 b0 b8 02 c0       	push   0xc002b8b0
c0019926:	eb 77                	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019928:	83 f8 07             	cmp    eax,0x7
c001992b:	75 09                	jne    c0019936 <CPU::detectFeatures()+0x8ea>
c001992d:	50                   	push   eax
c001992e:	50                   	push   eax
c001992f:	68 ba b8 02 c0       	push   0xc002b8ba
c0019934:	eb 69                	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019936:	83 f8 0a             	cmp    eax,0xa
c0019939:	75 09                	jne    c0019944 <CPU::detectFeatures()+0x8f8>
c001993b:	50                   	push   eax
c001993c:	50                   	push   eax
c001993d:	68 c5 b8 02 c0       	push   0xc002b8c5
c0019942:	eb 5b                	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019944:	83 f8 0b             	cmp    eax,0xb
c0019947:	75 09                	jne    c0019952 <CPU::detectFeatures()+0x906>
c0019949:	50                   	push   eax
c001994a:	50                   	push   eax
c001994b:	68 cd b8 02 c0       	push   0xc002b8cd
c0019950:	eb 4d                	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019952:	83 f8 08             	cmp    eax,0x8
c0019955:	75 09                	jne    c0019960 <CPU::detectFeatures()+0x914>
c0019957:	50                   	push   eax
c0019958:	50                   	push   eax
c0019959:	68 d6 b8 02 c0       	push   0xc002b8d6
c001995e:	eb 3f                	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019960:	83 f8 09             	cmp    eax,0x9
c0019963:	75 09                	jne    c001996e <CPU::detectFeatures()+0x922>
c0019965:	50                   	push   eax
c0019966:	50                   	push   eax
c0019967:	68 de b8 02 c0       	push   0xc002b8de
c001996c:	eb 31                	jmp    c001999f <CPU::detectFeatures()+0x953>
c001996e:	83 f8 05             	cmp    eax,0x5
c0019971:	75 09                	jne    c001997c <CPU::detectFeatures()+0x930>
c0019973:	50                   	push   eax
c0019974:	50                   	push   eax
c0019975:	68 e6 b8 02 c0       	push   0xc002b8e6
c001997a:	eb 23                	jmp    c001999f <CPU::detectFeatures()+0x953>
c001997c:	83 f8 0c             	cmp    eax,0xc
c001997f:	75 09                	jne    c001998a <CPU::detectFeatures()+0x93e>
c0019981:	55                   	push   ebp
c0019982:	55                   	push   ebp
c0019983:	68 f4 b8 02 c0       	push   0xc002b8f4
c0019988:	eb 15                	jmp    c001999f <CPU::detectFeatures()+0x953>
c001998a:	83 f8 0d             	cmp    eax,0xd
c001998d:	75 09                	jne    c0019998 <CPU::detectFeatures()+0x94c>
c001998f:	57                   	push   edi
c0019990:	57                   	push   edi
c0019991:	68 ff b8 02 c0       	push   0xc002b8ff
c0019996:	eb 07                	jmp    c001999f <CPU::detectFeatures()+0x953>
c0019998:	56                   	push   esi
c0019999:	56                   	push   esi
c001999a:	68 13 b9 02 c0       	push   0xc002b913
c001999f:	53                   	push   ebx
c00199a0:	e8 29 ab ff ff       	call   c00144ce <Device::setName(char const*)>
c00199a5:	83 c4 10             	add    esp,0x10
c00199a8:	e9 80 00 00 00       	jmp    c0019a2d <CPU::detectFeatures()+0x9e1>
c00199ad:	51                   	push   ecx
c00199ae:	51                   	push   ecx
c00199af:	68 5f b7 02 c0       	push   0xc002b75f
c00199b4:	57                   	push   edi
c00199b5:	e8 7a 6e fe ff       	call   c0000834 <strcpy>
c00199ba:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00199c4:	e8 e5 68 fe ff       	call   c00002ae <is486>
c00199c9:	83 c4 10             	add    esp,0x10
c00199cc:	85 c0                	test   eax,eax
c00199ce:	74 2b                	je     c00199fb <CPU::detectFeatures()+0x9af>
c00199d0:	52                   	push   edx
c00199d1:	52                   	push   edx
c00199d2:	68 1f b9 02 c0       	push   0xc002b91f
c00199d7:	53                   	push   ebx
c00199d8:	e8 f1 aa ff ff       	call   c00144ce <Device::setName(char const*)>
c00199dd:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00199e4:	0f 20 c0             	mov    eax,cr0
c00199e7:	83 e0 14             	and    eax,0x14
c00199ea:	83 c4 10             	add    esp,0x10
c00199ed:	83 f8 04             	cmp    eax,0x4
c00199f0:	75 1f                	jne    c0019a11 <CPU::detectFeatures()+0x9c5>
c00199f2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00199f9:	eb 32                	jmp    c0019a2d <CPU::detectFeatures()+0x9e1>
c00199fb:	50                   	push   eax
c00199fc:	50                   	push   eax
c00199fd:	68 2a b9 02 c0       	push   0xc002b92a
c0019a02:	53                   	push   ebx
c0019a03:	e8 c6 aa ff ff       	call   c00144ce <Device::setName(char const*)>
c0019a08:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a0f:	eb d3                	jmp    c00199e4 <CPU::detectFeatures()+0x998>
c0019a11:	e8 73 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a16:	83 e0 01             	and    eax,0x1
c0019a19:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a1c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a22:	83 e0 fd             	and    eax,0xfffffffd
c0019a25:	09 d0                	or     eax,edx
c0019a27:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a2d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a34:	83 c4 4c             	add    esp,0x4c
c0019a37:	5b                   	pop    ebx
c0019a38:	5e                   	pop    esi
c0019a39:	5f                   	pop    edi
c0019a3a:	5d                   	pop    ebp
c0019a3b:	c3                   	ret    

c0019a3c <CPU::setupSMEP()>:
c0019a3c:	0f 20 e0             	mov    eax,cr4
c0019a3f:	0d 00 00 10 00       	or     eax,0x100000
c0019a44:	0f 22 e0             	mov    cr4,eax
c0019a47:	c3                   	ret    

c0019a48 <CPU::setupUMIP()>:
c0019a48:	0f 20 e0             	mov    eax,cr4
c0019a4b:	80 cc 08             	or     ah,0x8
c0019a4e:	0f 22 e0             	mov    cr4,eax
c0019a51:	c3                   	ret    

c0019a52 <CPU::setupTSC()>:
c0019a52:	0f 20 e0             	mov    eax,cr4
c0019a55:	83 c8 04             	or     eax,0x4
c0019a58:	0f 22 e0             	mov    cr4,eax
c0019a5b:	c3                   	ret    

c0019a5c <CPU::setupLargePages()>:
c0019a5c:	0f 20 e0             	mov    eax,cr4
c0019a5f:	83 c8 10             	or     eax,0x10
c0019a62:	0f 22 e0             	mov    cr4,eax
c0019a65:	c3                   	ret    

c0019a66 <CPU::setupPAT()>:
c0019a66:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019a6b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a72:	74 2c                	je     c0019aa0 <CPU::setupPAT()+0x3a>
c0019a74:	53                   	push   ebx
c0019a75:	83 ec 10             	sub    esp,0x10
c0019a78:	68 77 02 00 00       	push   0x277
c0019a7d:	50                   	push   eax
c0019a7e:	e8 65 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019a83:	83 e2 f8             	and    edx,0xfffffff8
c0019a86:	83 ca 01             	or     edx,0x1
c0019a89:	52                   	push   edx
c0019a8a:	50                   	push   eax
c0019a8b:	68 77 02 00 00       	push   0x277
c0019a90:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019a96:	e8 79 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019a9b:	83 c4 28             	add    esp,0x28
c0019a9e:	5b                   	pop    ebx
c0019a9f:	c3                   	ret    
c0019aa0:	c3                   	ret    
c0019aa1:	90                   	nop

c0019aa2 <CPU::setupMTRR()>:
c0019aa2:	c3                   	ret    
c0019aa3:	90                   	nop

c0019aa4 <CPU::setupGlobalPages()>:
c0019aa4:	0f 20 e0             	mov    eax,cr4
c0019aa7:	0c 80                	or     al,0x80
c0019aa9:	0f 22 e0             	mov    cr4,eax
c0019aac:	c3                   	ret    
c0019aad:	90                   	nop

c0019aae <CPU::allowUsermodeDataAccess()>:
c0019aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ab2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ab9:	74 03                	je     c0019abe <CPU::allowUsermodeDataAccess()+0x10>
c0019abb:	0f 01 cb             	stac   
c0019abe:	c3                   	ret    
c0019abf:	90                   	nop

c0019ac0 <CPU::prohibitUsermodeDataAccess()>:
c0019ac0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ac4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019acb:	74 03                	je     c0019ad0 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019acd:	0f 01 ca             	clac   
c0019ad0:	c3                   	ret    
c0019ad1:	90                   	nop

c0019ad2 <CPU::setupSMAP()>:
c0019ad2:	0f 20 e0             	mov    eax,cr4
c0019ad5:	0d 00 00 20 00       	or     eax,0x200000
c0019ada:	0f 22 e0             	mov    cr4,eax
c0019add:	eb e1                	jmp    c0019ac0 <CPU::prohibitUsermodeDataAccess()>
c0019adf:	90                   	nop

c0019ae0 <CPU::setupFeatures()>:
c0019ae0:	83 ec 0c             	sub    esp,0xc
c0019ae3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ae7:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019aee:	74 07                	je     c0019af7 <CPU::setupFeatures()+0x17>
c0019af0:	52                   	push   edx
c0019af1:	e8 46 ff ff ff       	call   c0019a3c <CPU::setupSMEP()>
c0019af6:	58                   	pop    eax
c0019af7:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019afe:	74 07                	je     c0019b07 <CPU::setupFeatures()+0x27>
c0019b00:	52                   	push   edx
c0019b01:	e8 cc ff ff ff       	call   c0019ad2 <CPU::setupSMAP()>
c0019b06:	58                   	pop    eax
c0019b07:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b0e:	74 07                	je     c0019b17 <CPU::setupFeatures()+0x37>
c0019b10:	52                   	push   edx
c0019b11:	e8 32 ff ff ff       	call   c0019a48 <CPU::setupUMIP()>
c0019b16:	58                   	pop    eax
c0019b17:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b1e:	74 07                	je     c0019b27 <CPU::setupFeatures()+0x47>
c0019b20:	52                   	push   edx
c0019b21:	e8 2c ff ff ff       	call   c0019a52 <CPU::setupTSC()>
c0019b26:	58                   	pop    eax
c0019b27:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b2e:	74 07                	je     c0019b37 <CPU::setupFeatures()+0x57>
c0019b30:	52                   	push   edx
c0019b31:	e8 26 ff ff ff       	call   c0019a5c <CPU::setupLargePages()>
c0019b36:	59                   	pop    ecx
c0019b37:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019b3e:	74 07                	je     c0019b47 <CPU::setupFeatures()+0x67>
c0019b40:	52                   	push   edx
c0019b41:	e8 5e ff ff ff       	call   c0019aa4 <CPU::setupGlobalPages()>
c0019b46:	58                   	pop    eax
c0019b47:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019b4e:	74 0c                	je     c0019b5c <CPU::setupFeatures()+0x7c>
c0019b50:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019b54:	83 c4 0c             	add    esp,0xc
c0019b57:	e9 0a ff ff ff       	jmp    c0019a66 <CPU::setupPAT()>
c0019b5c:	83 c4 0c             	add    esp,0xc
c0019b5f:	c3                   	ret    

c0019b60 <CPU::open(int, int, void*)>:
c0019b60:	57                   	push   edi
c0019b61:	56                   	push   esi
c0019b62:	53                   	push   ebx
c0019b63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b6b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019b71:	83 ec 0c             	sub    esp,0xc
c0019b74:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019b7a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019b80:	50                   	push   eax
c0019b81:	e8 4e 55 ff ff       	call   c000f0d4 <GDT::setup()>
c0019b86:	83 c4 0c             	add    esp,0xc
c0019b89:	6a 00                	push   0x0
c0019b8b:	68 ef be ad de       	push   0xdeadbeef
c0019b90:	57                   	push   edi
c0019b91:	e8 56 79 ff ff       	call   c00114ec <TSS::setup(unsigned long, unsigned long)>
c0019b96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019b99:	e8 2e 79 ff ff       	call   c00114cc <TSS::flush()>
c0019b9e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ba4:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ba7:	e8 84 57 ff ff       	call   c000f330 <IDT::setup()>
c0019bac:	b8 00 04 00 00       	mov    eax,0x400
c0019bb1:	0f 23 f8             	mov    db7,eax
c0019bb4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019bbe:	e8 1d 63 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0019bc3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019bc9:	89 30                	mov    DWORD PTR [eax],esi
c0019bcb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019bd1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019bd4:	58                   	pop    eax
c0019bd5:	5a                   	pop    edx
c0019bd6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bdc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019be0:	e8 49 8a ff ff       	call   c001262e <VAS::setCPUSpecific(unsigned long)>
c0019be5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019be8:	e8 5f f4 ff ff       	call   c001904c <CPU::detectFeatures()>
c0019bed:	e8 ca bc ff ff       	call   c00158bc <setupInterruptController()>
c0019bf2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019bf8:	a1 a0 e3 02 c0       	mov    eax,ds:0xc002e3a0
c0019bfd:	83 e0 10             	and    eax,0x10
c0019c00:	83 f8 01             	cmp    eax,0x1
c0019c03:	19 c0                	sbb    eax,eax
c0019c05:	83 e0 46             	and    eax,0x46
c0019c08:	83 c0 1e             	add    eax,0x1e
c0019c0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c0e:	e8 b7 d1 ff ff       	call   c0016dca <setupTimer(int)>
c0019c13:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c1c:	e8 bf fe ff ff       	call   c0019ae0 <CPU::setupFeatures()>
c0019c21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c24:	e8 a7 f1 ff ff       	call   c0018dd0 <CPU::displayFeatures()>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	31 c0                	xor    eax,eax
c0019c2e:	5b                   	pop    ebx
c0019c2f:	5e                   	pop    esi
c0019c30:	5f                   	pop    edi
c0019c31:	c3                   	ret    

c0019c32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c32:	57                   	push   edi
c0019c33:	56                   	push   esi
c0019c34:	53                   	push   ebx
c0019c35:	51                   	push   ecx
c0019c36:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c3a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c3d:	0f 02 c0             	lar    eax,ax
c0019c40:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c43:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c47:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c4a:	88 ca                	mov    dl,cl
c0019c4c:	c0 ea 06             	shr    dl,0x6
c0019c4f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019c53:	89 ca                	mov    edx,ecx
c0019c55:	66 c1 ea 03          	shr    dx,0x3
c0019c59:	83 e2 07             	and    edx,0x7
c0019c5c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019c61:	88 17                	mov    BYTE PTR [edi],dl
c0019c63:	0f 84 a6 01 00 00    	je     c0019e0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019c69:	83 e1 07             	and    ecx,0x7
c0019c6c:	80 f9 04             	cmp    cl,0x4
c0019c6f:	0f 84 98 00 00 00    	je     c0019d0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019c75:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c7a:	0f 95 c0             	setne  al
c0019c7d:	80 f9 05             	cmp    cl,0x5
c0019c80:	0f 95 c2             	setne  dl
c0019c83:	08 c2                	or     dl,al
c0019c85:	74 79                	je     c0019d00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019c87:	84 c9                	test   cl,cl
c0019c89:	75 05                	jne    c0019c90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019c8b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c8e:	eb 3c                	jmp    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c90:	80 f9 01             	cmp    cl,0x1
c0019c93:	75 05                	jne    c0019c9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019c95:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c98:	eb 32                	jmp    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019c9a:	80 f9 02             	cmp    cl,0x2
c0019c9d:	75 05                	jne    c0019ca4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019c9f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ca2:	eb 28                	jmp    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ca4:	31 c0                	xor    eax,eax
c0019ca6:	80 f9 03             	cmp    cl,0x3
c0019ca9:	75 05                	jne    c0019cb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019cab:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cae:	eb 1c                	jmp    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cb0:	80 f9 05             	cmp    cl,0x5
c0019cb3:	75 05                	jne    c0019cba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019cb5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cb8:	eb 12                	jmp    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cba:	80 f9 06             	cmp    cl,0x6
c0019cbd:	75 05                	jne    c0019cc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019cbf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019cc2:	eb 08                	jmp    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cc4:	80 f9 07             	cmp    cl,0x7
c0019cc7:	75 03                	jne    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cc9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ccc:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019cd1:	75 10                	jne    c0019ce3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019cd3:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019cd7:	b9 03 00 00 00       	mov    ecx,0x3
c0019cdc:	01 d0                	add    eax,edx
c0019cde:	e9 37 01 00 00       	jmp    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ce3:	b9 02 00 00 00       	mov    ecx,0x2
c0019ce8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019ced:	0f 85 27 01 00 00    	jne    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019cf3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019cf6:	b9 06 00 00 00       	mov    ecx,0x6
c0019cfb:	e9 1a 01 00 00       	jmp    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d00:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d03:	b9 06 00 00 00       	mov    ecx,0x6
c0019d08:	e9 0f 01 00 00       	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d0d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d10:	88 ca                	mov    dl,cl
c0019d12:	c0 ea 06             	shr    dl,0x6
c0019d15:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d19:	89 ca                	mov    edx,ecx
c0019d1b:	66 c1 ea 03          	shr    dx,0x3
c0019d1f:	83 e2 07             	and    edx,0x7
c0019d22:	80 e1 07             	and    cl,0x7
c0019d25:	75 05                	jne    c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d27:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d2a:	eb 4c                	jmp    c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d2c:	80 f9 01             	cmp    cl,0x1
c0019d2f:	75 05                	jne    c0019d36 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d31:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d34:	eb 42                	jmp    c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d36:	80 f9 02             	cmp    cl,0x2
c0019d39:	75 05                	jne    c0019d40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d3b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019d3e:	eb 38                	jmp    c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d40:	80 f9 03             	cmp    cl,0x3
c0019d43:	75 05                	jne    c0019d4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d45:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d48:	eb 2e                	jmp    c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d4a:	80 f9 04             	cmp    cl,0x4
c0019d4d:	75 12                	jne    c0019d61 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019d4f:	f6 c4 60             	test   ah,0x60
c0019d52:	75 08                	jne    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019d54:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019d57:	8d 78 14             	lea    edi,[eax+0x14]
c0019d5a:	eb 1c                	jmp    c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d5c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019d5f:	eb 17                	jmp    c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d61:	80 f9 05             	cmp    cl,0x5
c0019d64:	75 05                	jne    c0019d6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019d66:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019d69:	eb 0d                	jmp    c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d6b:	80 f9 06             	cmp    cl,0x6
c0019d6e:	75 05                	jne    c0019d75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019d70:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019d73:	eb 03                	jmp    c0019d78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d75:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019d78:	84 d2                	test   dl,dl
c0019d7a:	75 05                	jne    c0019d81 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019d7c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d7f:	eb 3c                	jmp    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d81:	80 fa 01             	cmp    dl,0x1
c0019d84:	75 05                	jne    c0019d8b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019d86:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d89:	eb 32                	jmp    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d8b:	80 fa 02             	cmp    dl,0x2
c0019d8e:	75 05                	jne    c0019d95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019d90:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d93:	eb 28                	jmp    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d95:	80 fa 03             	cmp    dl,0x3
c0019d98:	75 05                	jne    c0019d9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019d9a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d9d:	eb 1e                	jmp    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d9f:	31 c0                	xor    eax,eax
c0019da1:	80 fa 04             	cmp    dl,0x4
c0019da4:	74 17                	je     c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019da6:	80 fa 05             	cmp    dl,0x5
c0019da9:	75 05                	jne    c0019db0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019dab:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dae:	eb 0d                	jmp    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019db0:	80 fa 06             	cmp    dl,0x6
c0019db3:	75 05                	jne    c0019dba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019db5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019db8:	eb 03                	jmp    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dba:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dbd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019dc2:	0f 94 c2             	sete   dl
c0019dc5:	80 f9 05             	cmp    cl,0x5
c0019dc8:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019dcc:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019dd1:	d3 e0                	shl    eax,cl
c0019dd3:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019dd7:	74 0a                	je     c0019de3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019dd9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ddc:	b9 07 00 00 00       	mov    ecx,0x7
c0019de1:	eb 37                	jmp    c0019e1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019de3:	01 f8                	add    eax,edi
c0019de5:	b9 03 00 00 00       	mov    ecx,0x3
c0019dea:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019def:	74 2b                	je     c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019df1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019df6:	75 0d                	jne    c0019e05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019df8:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019dfc:	01 c8                	add    eax,ecx
c0019dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0019e03:	eb 17                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e05:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e08:	b9 07 00 00 00       	mov    ecx,0x7
c0019e0d:	eb 0d                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e0f:	b9 02 00 00 00       	mov    ecx,0x2
c0019e14:	b2 01                	mov    dl,0x1
c0019e16:	31 c0                	xor    eax,eax
c0019e18:	eb 02                	jmp    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e1a:	31 d2                	xor    edx,edx
c0019e1c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e20:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e26:	88 11                	mov    BYTE PTR [ecx],dl
c0019e28:	5a                   	pop    edx
c0019e29:	5b                   	pop    ebx
c0019e2a:	5e                   	pop    esi
c0019e2b:	5f                   	pop    edi
c0019e2c:	c3                   	ret    

c0019e2d <Krnl::smpEntry()>:
c0019e2d:	eb fe                	jmp    c0019e2d <Krnl::smpEntry()>

c0019e2f <Krnl::startCPU(int)>:
c0019e2f:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019e34:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e3b:	0f 84 36 01 00 00    	je     c0019f77 <Krnl::startCPU(int)+0x148>
c0019e41:	53                   	push   ebx
c0019e42:	83 ec 08             	sub    esp,0x8
c0019e45:	e8 1b 3f 00 00       	call   c001dd65 <lockScheduler()>
c0019e4a:	52                   	push   edx
c0019e4b:	52                   	push   edx
c0019e4c:	6a 1b                	push   0x1b
c0019e4e:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c0019e54:	e8 8f 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019e59:	59                   	pop    ecx
c0019e5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019e5f:	89 c3                	mov    ebx,eax
c0019e61:	58                   	pop    eax
c0019e62:	53                   	push   ebx
c0019e63:	68 64 b9 02 c0       	push   0xc002b964
c0019e68:	e8 59 90 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0019e6d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e7b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e85:	c1 e0 18             	shl    eax,0x18
c0019e88:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019e8e:	83 c4 10             	add    esp,0x10
c0019e91:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019e97:	09 c2                	or     edx,eax
c0019e99:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019e9f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ea5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019eab:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019eb1:	80 cd c5             	or     ch,0xc5
c0019eb4:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019eba:	f3 90                	pause  
c0019ebc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ebe:	0f ba e1 0c          	bt     ecx,0xc
c0019ec2:	72 f6                	jb     c0019eba <Krnl::startCPU(int)+0x8b>
c0019ec4:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019eca:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ed0:	09 c1                	or     ecx,eax
c0019ed2:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019ed8:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ede:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ee4:	80 cd 85             	or     ch,0x85
c0019ee7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019eed:	f3 90                	pause  
c0019eef:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ef1:	0f ba e1 0c          	bt     ecx,0xc
c0019ef5:	72 f6                	jb     c0019eed <Krnl::startCPU(int)+0xbe>
c0019ef7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f01:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f07:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f0d:	09 c1                	or     ecx,eax
c0019f0f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f15:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f1b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f21:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f27:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f2d:	f3 90                	pause  
c0019f2f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f31:	0f ba e1 0c          	bt     ecx,0xc
c0019f35:	72 f6                	jb     c0019f2d <Krnl::startCPU(int)+0xfe>
c0019f37:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f41:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f47:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f4d:	09 c8                	or     eax,ecx
c0019f4f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019f55:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019f5b:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019f60:	0d 02 06 00 00       	or     eax,0x602
c0019f65:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019f6b:	f3 90                	pause  
c0019f6d:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f6f:	0f ba e0 0c          	bt     eax,0xc
c0019f73:	72 f6                	jb     c0019f6b <Krnl::startCPU(int)+0x13c>
c0019f75:	eb fe                	jmp    c0019f75 <Krnl::startCPU(int)+0x146>
c0019f77:	c3                   	ret    

c0019f78 <Krnl::startCPUs()>:
c0019f78:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0019f7d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019f83:	88 c2                	mov    dl,al
c0019f85:	83 e2 0a             	and    edx,0xa
c0019f88:	80 fa 0a             	cmp    dl,0xa
c0019f8b:	75 09                	jne    c0019f96 <Krnl::startCPUs()+0x1e>
c0019f8d:	a8 01                	test   al,0x1
c0019f8f:	74 05                	je     c0019f96 <Krnl::startCPUs()+0x1e>
c0019f91:	e9 05 62 fe ff       	jmp    c000019b <prepareTramp>
c0019f96:	c3                   	ret    
c0019f97:	90                   	nop

c0019f98 <EnvVarContainer::getEnv(char const*)>:
c0019f98:	57                   	push   edi
c0019f99:	56                   	push   esi
c0019f9a:	53                   	push   ebx
c0019f9b:	31 db                	xor    ebx,ebx
c0019f9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fa1:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019fa3:	7e 2b                	jle    c0019fd0 <EnvVarContainer::getEnv(char const*)+0x38>
c0019fa5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019fac:	50                   	push   eax
c0019fad:	50                   	push   eax
c0019fae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fb1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019fb4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019fb8:	e8 03 69 fe ff       	call   c00008c0 <strcmp>
c0019fbd:	83 c4 10             	add    esp,0x10
c0019fc0:	85 c0                	test   eax,eax
c0019fc2:	75 09                	jne    c0019fcd <EnvVarContainer::getEnv(char const*)+0x35>
c0019fc4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fc7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019fcb:	eb 05                	jmp    c0019fd2 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019fcd:	43                   	inc    ebx
c0019fce:	eb d1                	jmp    c0019fa1 <EnvVarContainer::getEnv(char const*)+0x9>
c0019fd0:	31 c0                	xor    eax,eax
c0019fd2:	5b                   	pop    ebx
c0019fd3:	5e                   	pop    esi
c0019fd4:	5f                   	pop    edi
c0019fd5:	c3                   	ret    

c0019fd6 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019fd6:	57                   	push   edi
c0019fd7:	56                   	push   esi
c0019fd8:	53                   	push   ebx
c0019fd9:	83 ec 1c             	sub    esp,0x1c
c0019fdc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019fe0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019fe4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019fe8:	57                   	push   edi
c0019fe9:	e8 a6 67 fe ff       	call   c0000794 <strlen>
c0019fee:	40                   	inc    eax
c0019fef:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ff2:	e8 4c 58 ff ff       	call   c000f843 <malloc>
c0019ff7:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ffa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ffe:	e8 91 67 fe ff       	call   c0000794 <strlen>
c001a003:	40                   	inc    eax
c001a004:	89 04 24             	mov    DWORD PTR [esp],eax
c001a007:	e8 37 58 ff ff       	call   c000f843 <malloc>
c001a00c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a00f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a013:	e8 7c 67 fe ff       	call   c0000794 <strlen>
c001a018:	83 c4 0c             	add    esp,0xc
c001a01b:	40                   	inc    eax
c001a01c:	50                   	push   eax
c001a01d:	6a 00                	push   0x0
c001a01f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a023:	e8 50 67 fe ff       	call   c0000778 <memset>
c001a028:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a02b:	e8 64 67 fe ff       	call   c0000794 <strlen>
c001a030:	83 c4 0c             	add    esp,0xc
c001a033:	40                   	inc    eax
c001a034:	50                   	push   eax
c001a035:	57                   	push   edi
c001a036:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a03a:	e8 05 67 fe ff       	call   c0000744 <memcpy>
c001a03f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a042:	e8 4d 67 fe ff       	call   c0000794 <strlen>
c001a047:	83 c4 0c             	add    esp,0xc
c001a04a:	40                   	inc    eax
c001a04b:	50                   	push   eax
c001a04c:	6a 00                	push   0x0
c001a04e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a052:	e8 21 67 fe ff       	call   c0000778 <memset>
c001a057:	89 34 24             	mov    DWORD PTR [esp],esi
c001a05a:	e8 35 67 fe ff       	call   c0000794 <strlen>
c001a05f:	83 c4 0c             	add    esp,0xc
c001a062:	40                   	inc    eax
c001a063:	50                   	push   eax
c001a064:	56                   	push   esi
c001a065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a069:	e8 d6 66 fe ff       	call   c0000744 <memcpy>
c001a06e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a070:	40                   	inc    eax
c001a071:	89 03                	mov    DWORD PTR [ebx],eax
c001a073:	c1 e0 03             	shl    eax,0x3
c001a076:	5a                   	pop    edx
c001a077:	59                   	pop    ecx
c001a078:	50                   	push   eax
c001a079:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a07c:	e8 ae 57 ff ff       	call   c000f82f <realloc>
c001a081:	83 c4 0c             	add    esp,0xc
c001a084:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a087:	6a 08                	push   0x8
c001a089:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a08d:	52                   	push   edx
c001a08e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a090:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a094:	50                   	push   eax
c001a095:	e8 aa 66 fe ff       	call   c0000744 <memcpy>
c001a09a:	83 c4 20             	add    esp,0x20
c001a09d:	5b                   	pop    ebx
c001a09e:	5e                   	pop    esi
c001a09f:	5f                   	pop    edi
c001a0a0:	c3                   	ret    
c001a0a1:	90                   	nop

c001a0a2 <EnvVarContainer::deleteEnv(char const*)>:
c001a0a2:	c3                   	ret    
c001a0a3:	90                   	nop

c001a0a4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a0a4:	55                   	push   ebp
c001a0a5:	57                   	push   edi
c001a0a6:	56                   	push   esi
c001a0a7:	53                   	push   ebx
c001a0a8:	81 ec 38 01 00 00    	sub    esp,0x138
c001a0ae:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a0b5:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a0bc:	68 14 01 00 00       	push   0x114
c001a0c1:	e8 7d 57 ff ff       	call   c000f843 <malloc>
c001a0c6:	83 c4 0c             	add    esp,0xc
c001a0c9:	89 c7                	mov    edi,eax
c001a0cb:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a0ce:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a0d5:	50                   	push   eax
c001a0d6:	e8 43 93 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001a0db:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0de:	e8 0d 96 ff ff       	call   c00136f0 <File::exists()>
c001a0e3:	83 c4 10             	add    esp,0x10
c001a0e6:	84 c0                	test   al,al
c001a0e8:	75 31                	jne    c001a11b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a0ea:	51                   	push   ecx
c001a0eb:	51                   	push   ecx
c001a0ec:	6a 12                	push   0x12
c001a0ee:	57                   	push   edi
c001a0ef:	e8 8e 93 ff ff       	call   c0013482 <File::open(FileOpenMode)>
c001a0f4:	8b 07                	mov    eax,DWORD PTR [edi]
c001a0f6:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a0f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a0fc:	e8 93 66 fe ff       	call   c0000794 <strlen>
c001a101:	5a                   	pop    edx
c001a102:	31 d2                	xor    edx,edx
c001a104:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a108:	51                   	push   ecx
c001a109:	55                   	push   ebp
c001a10a:	52                   	push   edx
c001a10b:	50                   	push   eax
c001a10c:	57                   	push   edi
c001a10d:	ff d3                	call   ebx
c001a10f:	83 c4 14             	add    esp,0x14
c001a112:	57                   	push   edi
c001a113:	e8 c8 93 ff ff       	call   c00134e0 <File::close()>
c001a118:	83 c4 10             	add    esp,0x10
c001a11b:	31 db                	xor    ebx,ebx
c001a11d:	50                   	push   eax
c001a11e:	31 ed                	xor    ebp,ebp
c001a120:	68 00 01 00 00       	push   0x100
c001a125:	6a 00                	push   0x0
c001a127:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a12b:	50                   	push   eax
c001a12c:	e8 47 66 fe ff       	call   c0000778 <memset>
c001a131:	58                   	pop    eax
c001a132:	5a                   	pop    edx
c001a133:	6a 01                	push   0x1
c001a135:	57                   	push   edi
c001a136:	e8 47 93 ff ff       	call   c0013482 <File::open(FileOpenMode)>
c001a13b:	83 c4 10             	add    esp,0x10
c001a13e:	83 ec 0c             	sub    esp,0xc
c001a141:	8b 07                	mov    eax,DWORD PTR [edi]
c001a143:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a147:	51                   	push   ecx
c001a148:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a14c:	52                   	push   edx
c001a14d:	6a 00                	push   0x0
c001a14f:	6a 01                	push   0x1
c001a151:	57                   	push   edi
c001a152:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a155:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a159:	83 c4 20             	add    esp,0x20
c001a15c:	3c 0d                	cmp    al,0xd
c001a15e:	0f 84 12 01 00 00    	je     c001a276 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a164:	85 db                	test   ebx,ebx
c001a166:	0f 84 fd 00 00 00    	je     c001a269 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a16c:	3c 0a                	cmp    al,0xa
c001a16e:	74 13                	je     c001a183 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a170:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a175:	74 0c                	je     c001a183 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a177:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a17d:	0f 8e e6 00 00 00    	jle    c001a269 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a183:	83 ec 0c             	sub    esp,0xc
c001a186:	8d 53 01             	lea    edx,[ebx+0x1]
c001a189:	29 dd                	sub    ebp,ebx
c001a18b:	52                   	push   edx
c001a18c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a190:	e8 ae 56 ff ff       	call   c000f843 <malloc>
c001a195:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a198:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a19c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a19f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a1a3:	e8 9b 56 ff ff       	call   c000f843 <malloc>
c001a1a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1ac:	83 c4 0c             	add    esp,0xc
c001a1af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1b3:	52                   	push   edx
c001a1b4:	6a 00                	push   0x0
c001a1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1ba:	e8 b9 65 fe ff       	call   c0000778 <memset>
c001a1bf:	83 c4 0c             	add    esp,0xc
c001a1c2:	53                   	push   ebx
c001a1c3:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a1c7:	55                   	push   ebp
c001a1c8:	01 eb                	add    ebx,ebp
c001a1ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1ce:	e8 71 65 fe ff       	call   c0000744 <memcpy>
c001a1d3:	83 c4 0c             	add    esp,0xc
c001a1d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a1da:	51                   	push   ecx
c001a1db:	6a 00                	push   0x0
c001a1dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1e1:	e8 92 65 fe ff       	call   c0000778 <memset>
c001a1e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1e9:	e8 a6 65 fe ff       	call   c0000794 <strlen>
c001a1ee:	83 c4 0c             	add    esp,0xc
c001a1f1:	50                   	push   eax
c001a1f2:	53                   	push   ebx
c001a1f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1f7:	e8 48 65 fe ff       	call   c0000744 <memcpy>
c001a1fc:	5b                   	pop    ebx
c001a1fd:	58                   	pop    eax
c001a1fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a202:	68 75 b9 02 c0       	push   0xc002b975
c001a207:	e8 ba 8c ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001a20c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a20e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a211:	40                   	inc    eax
c001a212:	83 c4 10             	add    esp,0x10
c001a215:	89 06                	mov    DWORD PTR [esi],eax
c001a217:	85 d2                	test   edx,edx
c001a219:	75 0c                	jne    c001a227 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a21b:	83 ec 0c             	sub    esp,0xc
c001a21e:	6a 08                	push   0x8
c001a220:	e8 1e 56 ff ff       	call   c000f843 <malloc>
c001a225:	eb 0c                	jmp    c001a233 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a227:	c1 e0 03             	shl    eax,0x3
c001a22a:	51                   	push   ecx
c001a22b:	51                   	push   ecx
c001a22c:	50                   	push   eax
c001a22d:	52                   	push   edx
c001a22e:	e8 fc 55 ff ff       	call   c000f82f <realloc>
c001a233:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a236:	83 c4 10             	add    esp,0x10
c001a239:	31 db                	xor    ebx,ebx
c001a23b:	52                   	push   edx
c001a23c:	6a 08                	push   0x8
c001a23e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a242:	50                   	push   eax
c001a243:	8b 16                	mov    edx,DWORD PTR [esi]
c001a245:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a248:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a24c:	50                   	push   eax
c001a24d:	e8 f2 64 fe ff       	call   c0000744 <memcpy>
c001a252:	83 c4 0c             	add    esp,0xc
c001a255:	68 00 01 00 00       	push   0x100
c001a25a:	6a 00                	push   0x0
c001a25c:	55                   	push   ebp
c001a25d:	31 ed                	xor    ebp,ebp
c001a25f:	e8 14 65 fe ff       	call   c0000778 <memset>
c001a264:	83 c4 10             	add    esp,0x10
c001a267:	eb 0d                	jmp    c001a276 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a269:	3c 3d                	cmp    al,0x3d
c001a26b:	74 07                	je     c001a274 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a26d:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a271:	45                   	inc    ebp
c001a272:	eb 02                	jmp    c001a276 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a274:	89 eb                	mov    ebx,ebp
c001a276:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a27b:	0f 85 bd fe ff ff    	jne    c001a13e <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a281:	50                   	push   eax
c001a282:	50                   	push   eax
c001a283:	ff 36                	push   DWORD PTR [esi]
c001a285:	68 83 b9 02 c0       	push   0xc002b983
c001a28a:	e8 37 8c ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001a28f:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a295:	5b                   	pop    ebx
c001a296:	5e                   	pop    esi
c001a297:	5f                   	pop    edi
c001a298:	5d                   	pop    ebp
c001a299:	c3                   	ret    

c001a29a <EnvVarContainer::__loadSystem()>:
c001a29a:	83 ec 10             	sub    esp,0x10
c001a29d:	68 c0 d8 02 c0       	push   0xc002d8c0
c001a2a2:	68 ae b9 02 c0       	push   0xc002b9ae
c001a2a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2ab:	e8 f4 fd ff ff       	call   c001a0a4 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a2b0:	83 c4 1c             	add    esp,0x1c
c001a2b3:	c3                   	ret    

c001a2b4 <EnvVarContainer::__loadUser()>:
c001a2b4:	c3                   	ret    
c001a2b5:	90                   	nop

c001a2b6 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a2b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a2c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a2cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a2d6:	90                   	nop
c001a2d7:	c3                   	ret    

c001a2d8 <EnvVarContainer::~EnvVarContainer()>:
c001a2d8:	83 ec 0c             	sub    esp,0xc
c001a2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2e2:	85 c0                	test   eax,eax
c001a2e4:	74 1d                	je     c001a303 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2ea:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2ec:	85 c0                	test   eax,eax
c001a2ee:	74 13                	je     c001a303 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2f7:	83 ec 0c             	sub    esp,0xc
c001a2fa:	50                   	push   eax
c001a2fb:	e8 53 55 ff ff       	call   c000f853 <free>
c001a300:	83 c4 10             	add    esp,0x10
c001a303:	90                   	nop
c001a304:	83 c4 0c             	add    esp,0xc
c001a307:	c3                   	ret    

c001a308 <Krnl::getEnv(Process*, char const*)>:
c001a308:	53                   	push   ebx
c001a309:	83 ec 08             	sub    esp,0x8
c001a30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a310:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a314:	39 05 34 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b34,eax
c001a31a:	74 04                	je     c001a320 <Krnl::getEnv(Process*, char const*)+0x18>
c001a31c:	85 c0                	test   eax,eax
c001a31e:	75 0b                	jne    c001a32b <Krnl::getEnv(Process*, char const*)+0x23>
c001a320:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c001a325:	85 c0                	test   eax,eax
c001a327:	75 19                	jne    c001a342 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a329:	eb 27                	jmp    c001a352 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a32b:	52                   	push   edx
c001a32c:	52                   	push   edx
c001a32d:	53                   	push   ebx
c001a32e:	ff b0 3a 1b 00 00    	push   DWORD PTR [eax+0x1b3a]
c001a334:	e8 5f fc ff ff       	call   c0019f98 <EnvVarContainer::getEnv(char const*)>
c001a339:	83 c4 10             	add    esp,0x10
c001a33c:	85 c0                	test   eax,eax
c001a33e:	75 28                	jne    c001a368 <Krnl::getEnv(Process*, char const*)+0x60>
c001a340:	eb de                	jmp    c001a320 <Krnl::getEnv(Process*, char const*)+0x18>
c001a342:	52                   	push   edx
c001a343:	52                   	push   edx
c001a344:	53                   	push   ebx
c001a345:	50                   	push   eax
c001a346:	e8 4d fc ff ff       	call   c0019f98 <EnvVarContainer::getEnv(char const*)>
c001a34b:	83 c4 10             	add    esp,0x10
c001a34e:	85 c0                	test   eax,eax
c001a350:	75 16                	jne    c001a368 <Krnl::getEnv(Process*, char const*)+0x60>
c001a352:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a356:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a35b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a35f:	83 c4 08             	add    esp,0x8
c001a362:	5b                   	pop    ebx
c001a363:	e9 30 fc ff ff       	jmp    c0019f98 <EnvVarContainer::getEnv(char const*)>
c001a368:	83 c4 08             	add    esp,0x8
c001a36b:	5b                   	pop    ebx
c001a36c:	c3                   	ret    

c001a36d <Krnl::setEnvSystem(char const*, char const*)>:
c001a36d:	83 ec 10             	sub    esp,0x10
c001a370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a374:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a378:	ff 35 18 11 03 c0    	push   DWORD PTR ds:0xc0031118
c001a37e:	e8 53 fc ff ff       	call   c0019fd6 <EnvVarContainer::setEnv(char const*, char const*)>
c001a383:	83 c4 1c             	add    esp,0x1c
c001a386:	c3                   	ret    

c001a387 <Krnl::setEnvUser(char const*, char const*)>:
c001a387:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c001a38c:	85 c0                	test   eax,eax
c001a38e:	74 15                	je     c001a3a5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a390:	83 ec 10             	sub    esp,0x10
c001a393:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a397:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a39b:	50                   	push   eax
c001a39c:	e8 35 fc ff ff       	call   c0019fd6 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3a1:	83 c4 1c             	add    esp,0x1c
c001a3a4:	c3                   	ret    
c001a3a5:	c3                   	ret    

c001a3a6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a3a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3aa:	8b 80 3a 1b 00 00    	mov    eax,DWORD PTR [eax+0x1b3a]
c001a3b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3b4:	e9 1d fc ff ff       	jmp    c0019fd6 <EnvVarContainer::setEnv(char const*, char const*)>

c001a3b9 <Krnl::deleteEnvSystem(char const*)>:
c001a3b9:	c3                   	ret    

c001a3ba <Krnl::deleteEnvUser(char const*)>:
c001a3ba:	c3                   	ret    

c001a3bb <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a3bb:	c3                   	ret    

c001a3bc <Krnl::newProcessEnv(Process*)>:
c001a3bc:	83 ec 28             	sub    esp,0x28
c001a3bf:	6a 0c                	push   0xc
c001a3c1:	e8 7d 54 ff ff       	call   c000f843 <malloc>
c001a3c6:	5a                   	pop    edx
c001a3c7:	59                   	pop    ecx
c001a3c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a3cc:	50                   	push   eax
c001a3cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3d1:	e8 e0 fe ff ff       	call   c001a2b6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a3d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3da:	83 c4 2c             	add    esp,0x2c
c001a3dd:	c3                   	ret    

c001a3de <Krnl::copyProcessEnv(Process*, Process*)>:
c001a3de:	56                   	push   esi
c001a3df:	53                   	push   ebx
c001a3e0:	83 ec 10             	sub    esp,0x10
c001a3e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3e7:	8b b0 3a 1b 00 00    	mov    esi,DWORD PTR [eax+0x1b3a]
c001a3ed:	6a 0c                	push   0xc
c001a3ef:	e8 4f 54 ff ff       	call   c000f843 <malloc>
c001a3f4:	89 c3                	mov    ebx,eax
c001a3f6:	58                   	pop    eax
c001a3f7:	5a                   	pop    edx
c001a3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3fc:	53                   	push   ebx
c001a3fd:	e8 b4 fe ff ff       	call   c001a2b6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a402:	8b 06                	mov    eax,DWORD PTR [esi]
c001a404:	89 03                	mov    DWORD PTR [ebx],eax
c001a406:	c1 e0 03             	shl    eax,0x3
c001a409:	89 04 24             	mov    DWORD PTR [esp],eax
c001a40c:	e8 32 54 ff ff       	call   c000f843 <malloc>
c001a411:	83 c4 0c             	add    esp,0xc
c001a414:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a417:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a419:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a420:	52                   	push   edx
c001a421:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a424:	50                   	push   eax
c001a425:	e8 1a 63 fe ff       	call   c0000744 <memcpy>
c001a42a:	89 d8                	mov    eax,ebx
c001a42c:	83 c4 14             	add    esp,0x14
c001a42f:	5b                   	pop    ebx
c001a430:	5e                   	pop    esi
c001a431:	c3                   	ret    

c001a432 <Krnl::loadSystemEnv()>:
c001a432:	53                   	push   ebx
c001a433:	83 ec 14             	sub    esp,0x14
c001a436:	6a 0c                	push   0xc
c001a438:	e8 06 54 ff ff       	call   c000f843 <malloc>
c001a43d:	89 c3                	mov    ebx,eax
c001a43f:	58                   	pop    eax
c001a440:	5a                   	pop    edx
c001a441:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001a447:	53                   	push   ebx
c001a448:	e8 69 fe ff ff       	call   c001a2b6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a44d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a450:	89 1d 18 11 03 c0    	mov    DWORD PTR ds:0xc0031118,ebx
c001a456:	e8 3f fe ff ff       	call   c001a29a <EnvVarContainer::__loadSystem()>
c001a45b:	83 c4 18             	add    esp,0x18
c001a45e:	5b                   	pop    ebx
c001a45f:	c3                   	ret    

c001a460 <Krnl::loadUserEnv()>:
c001a460:	53                   	push   ebx
c001a461:	83 ec 14             	sub    esp,0x14
c001a464:	6a 0c                	push   0xc
c001a466:	e8 d8 53 ff ff       	call   c000f843 <malloc>
c001a46b:	89 c3                	mov    ebx,eax
c001a46d:	58                   	pop    eax
c001a46e:	5a                   	pop    edx
c001a46f:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001a475:	53                   	push   ebx
c001a476:	e8 3b fe ff ff       	call   c001a2b6 <EnvVarContainer::EnvVarContainer(Process*)>
c001a47b:	89 1d 14 11 03 c0    	mov    DWORD PTR ds:0xc0031114,ebx
c001a481:	83 c4 18             	add    esp,0x18
c001a484:	5b                   	pop    ebx
c001a485:	c3                   	ret    

c001a486 <Krnl::flushEnv()>:
c001a486:	c3                   	ret    

c001a487 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a487:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a48b:	8b 15 14 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031114
c001a491:	8b 88 3a 1b 00 00    	mov    ecx,DWORD PTR [eax+0x1b3a]
c001a497:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a49c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a49e:	03 01                	add    eax,DWORD PTR [ecx]
c001a4a0:	85 d2                	test   edx,edx
c001a4a2:	74 02                	je     c001a4a6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a4a4:	03 02                	add    eax,DWORD PTR [edx]
c001a4a6:	c3                   	ret    

c001a4a7 <Krnl::getProcessEnvPair(Process*, int)>:
c001a4a7:	57                   	push   edi
c001a4a8:	8b 0d 14 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031114
c001a4ae:	56                   	push   esi
c001a4af:	85 c9                	test   ecx,ecx
c001a4b1:	53                   	push   ebx
c001a4b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4ba:	8b 97 3a 1b 00 00    	mov    edx,DWORD PTR [edi+0x1b3a]
c001a4c0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4c4:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4c6:	75 47                	jne    c001a50f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a4c8:	39 c3                	cmp    ebx,eax
c001a4ca:	7c 47                	jl     c001a513 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a4cc:	8b 15 18 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031118
c001a4d2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a4d4:	01 c1                	add    ecx,eax
c001a4d6:	39 d9                	cmp    ecx,ebx
c001a4d8:	7e 6c                	jle    c001a546 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a4da:	51                   	push   ecx
c001a4db:	89 d9                	mov    ecx,ebx
c001a4dd:	29 c1                	sub    ecx,eax
c001a4df:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a4e2:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a4e6:	53                   	push   ebx
c001a4e7:	68 d0 b9 02 c0       	push   0xc002b9d0
c001a4ec:	e8 d5 89 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001a4f1:	8b 87 3a 1b 00 00    	mov    eax,DWORD PTR [edi+0x1b3a]
c001a4f7:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a4f9:	a1 18 11 03 c0       	mov    eax,ds:0xc0031118
c001a4fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a501:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a505:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a508:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a50b:	89 06                	mov    DWORD PTR [esi],eax
c001a50d:	eb 51                	jmp    c001a560 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a50f:	39 c3                	cmp    ebx,eax
c001a511:	7d 05                	jge    c001a518 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a513:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a516:	eb 20                	jmp    c001a538 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a518:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a51a:	8d 14 07             	lea    edx,[edi+eax*1]
c001a51d:	39 da                	cmp    edx,ebx
c001a51f:	7e 04                	jle    c001a525 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a521:	29 c3                	sub    ebx,eax
c001a523:	eb 10                	jmp    c001a535 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a525:	8b 0d 18 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031118
c001a52b:	03 11                	add    edx,DWORD PTR [ecx]
c001a52d:	39 da                	cmp    edx,ebx
c001a52f:	7e 15                	jle    c001a546 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a531:	29 c3                	sub    ebx,eax
c001a533:	29 fb                	sub    ebx,edi
c001a535:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a538:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a53c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a53f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a542:	89 06                	mov    DWORD PTR [esi],eax
c001a544:	eb 1d                	jmp    c001a563 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a546:	83 ec 0c             	sub    esp,0xc
c001a549:	68 e4 b9 02 c0       	push   0xc002b9e4
c001a54e:	e8 18 00 00 00       	call   c001a56b <Krnl::panic(char const*)>
c001a553:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a559:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a560:	83 c4 10             	add    esp,0x10
c001a563:	89 f0                	mov    eax,esi
c001a565:	5b                   	pop    ebx
c001a566:	5e                   	pop    esi
c001a567:	5f                   	pop    edi
c001a568:	c2 04 00             	ret    0x4

c001a56b <Krnl::panic(char const*)>:
c001a56b:	55                   	push   ebp
c001a56c:	89 e5                	mov    ebp,esp
c001a56e:	53                   	push   ebx
c001a56f:	83 ec 0c             	sub    esp,0xc
c001a572:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a575:	fa                   	cli    
c001a576:	c6 05 24 11 03 c0 01 	mov    BYTE PTR ds:0xc0031124,0x1
c001a57d:	53                   	push   ebx
c001a57e:	c6 05 c4 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2c4,0x0
c001a585:	68 fe b9 02 c0       	push   0xc002b9fe
c001a58a:	e8 37 89 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001a58f:	58                   	pop    eax
c001a590:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a595:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a59b:	e8 8d 67 ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c001a5a0:	83 c4 0c             	add    esp,0xc
c001a5a3:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a5a8:	6a 01                	push   0x1
c001a5aa:	6a 0f                	push   0xf
c001a5ac:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5b2:	e8 a7 61 ff ff       	call   c001075e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a5b7:	58                   	pop    eax
c001a5b8:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a5bd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5c3:	e8 06 6a ff ff       	call   c0010fce <VgaText::clearScreen()>
c001a5c8:	58                   	pop    eax
c001a5c9:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a5ce:	5a                   	pop    edx
c001a5cf:	68 17 ba 02 c0       	push   0xc002ba17
c001a5d4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5da:	e8 6d 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a5df:	59                   	pop    ecx
c001a5e0:	58                   	pop    eax
c001a5e1:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a5e6:	68 bc ba 02 c0       	push   0xc002babc
c001a5eb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5f1:	e8 56 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a5f6:	58                   	pop    eax
c001a5f7:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a5fc:	5a                   	pop    edx
c001a5fd:	68 33 ba 02 c0       	push   0xc002ba33
c001a602:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a608:	e8 3f 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a60d:	59                   	pop    ecx
c001a60e:	58                   	pop    eax
c001a60f:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a614:	53                   	push   ebx
c001a615:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a61b:	e8 2c 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a620:	58                   	pop    eax
c001a621:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a626:	5a                   	pop    edx
c001a627:	68 53 ba 02 c0       	push   0xc002ba53
c001a62c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a632:	e8 15 6b ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a637:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c001a63c:	83 c4 10             	add    esp,0x10
c001a63f:	85 c0                	test   eax,eax
c001a641:	74 02                	je     c001a645 <Krnl::panic(char const*)+0xda>
c001a643:	ff d0                	call   eax
c001a645:	83 ec 0c             	sub    esp,0xc
c001a648:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a64b:	e8 fd 2f 00 00       	call   c001d64d <Thr::getDriverNameFromAddress(unsigned long)>
c001a650:	83 c4 10             	add    esp,0x10
c001a653:	89 c3                	mov    ebx,eax
c001a655:	85 c0                	test   eax,eax
c001a657:	0f 84 50 02 00 00    	je     c001a8ad <Krnl::panic(char const*)+0x342>
c001a65d:	83 ec 08             	sub    esp,0x8
c001a660:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a666:	68 f8 ba 02 c0       	push   0xc002baf8
c001a66b:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a671:	e8 d6 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a676:	58                   	pop    eax
c001a677:	5a                   	pop    edx
c001a678:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a67e:	68 33 ba 02 c0       	push   0xc002ba33
c001a683:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a689:	e8 be 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a68e:	59                   	pop    ecx
c001a68f:	58                   	pop    eax
c001a690:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a695:	53                   	push   ebx
c001a696:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a69c:	e8 ab 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a6a1:	83 c4 10             	add    esp,0x10
c001a6a4:	83 ec 08             	sub    esp,0x8
c001a6a7:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a6ac:	68 52 ba 02 c0       	push   0xc002ba52
c001a6b1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6b7:	e8 90 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a6bc:	58                   	pop    eax
c001a6bd:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a6c2:	5a                   	pop    edx
c001a6c3:	68 50 bb 02 c0       	push   0xc002bb50
c001a6c8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6ce:	e8 79 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a6d3:	59                   	pop    ecx
c001a6d4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a6d9:	5b                   	pop    ebx
c001a6da:	68 90 bb 02 c0       	push   0xc002bb90
c001a6df:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6e5:	e8 62 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a6ea:	58                   	pop    eax
c001a6eb:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a6f0:	5a                   	pop    edx
c001a6f1:	68 3e ba 02 c0       	push   0xc002ba3e
c001a6f6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6fc:	e8 4b 6a ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a701:	59                   	pop    ecx
c001a702:	5b                   	pop    ebx
c001a703:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a706:	68 56 ba 02 c0       	push   0xc002ba56
c001a70b:	e8 b6 87 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001a710:	58                   	pop    eax
c001a711:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a714:	5a                   	pop    edx
c001a715:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a718:	68 5f ba 02 c0       	push   0xc002ba5f
c001a71d:	e8 a4 87 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001a722:	59                   	pop    ecx
c001a723:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a726:	5b                   	pop    ebx
c001a727:	8b 00                	mov    eax,DWORD PTR [eax]
c001a729:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a72c:	68 68 ba 02 c0       	push   0xc002ba68
c001a731:	e8 90 87 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001a736:	58                   	pop    eax
c001a737:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a73c:	5a                   	pop    edx
c001a73d:	68 d4 bb 02 c0       	push   0xc002bbd4
c001a742:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a748:	e8 ff 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a74d:	59                   	pop    ecx
c001a74e:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a753:	5b                   	pop    ebx
c001a754:	68 71 ba 02 c0       	push   0xc002ba71
c001a759:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a75f:	e8 e8 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a764:	0f 20 c0             	mov    eax,cr0
c001a767:	5a                   	pop    edx
c001a768:	59                   	pop    ecx
c001a769:	50                   	push   eax
c001a76a:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a76f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a775:	e8 f8 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a77a:	5b                   	pop    ebx
c001a77b:	58                   	pop    eax
c001a77c:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a781:	68 7b ba 02 c0       	push   0xc002ba7b
c001a786:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a78c:	e8 bb 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a791:	0f 20 d0             	mov    eax,cr2
c001a794:	5a                   	pop    edx
c001a795:	59                   	pop    ecx
c001a796:	50                   	push   eax
c001a797:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a79c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7a2:	e8 cb 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a7a7:	5b                   	pop    ebx
c001a7a8:	58                   	pop    eax
c001a7a9:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7ae:	68 85 ba 02 c0       	push   0xc002ba85
c001a7b3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7b9:	e8 8e 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a7be:	0f 20 d8             	mov    eax,cr3
c001a7c1:	5a                   	pop    edx
c001a7c2:	59                   	pop    ecx
c001a7c3:	50                   	push   eax
c001a7c4:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7c9:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7cf:	e8 9e 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a7d4:	5b                   	pop    ebx
c001a7d5:	58                   	pop    eax
c001a7d6:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7db:	68 98 ba 02 c0       	push   0xc002ba98
c001a7e0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7e6:	e8 61 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a7eb:	0f 20 e0             	mov    eax,cr4
c001a7ee:	5a                   	pop    edx
c001a7ef:	59                   	pop    ecx
c001a7f0:	50                   	push   eax
c001a7f1:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a7f6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7fc:	e8 71 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a801:	5b                   	pop    ebx
c001a802:	58                   	pop    eax
c001a803:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a808:	68 a2 ba 02 c0       	push   0xc002baa2
c001a80d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a813:	e8 34 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a818:	5a                   	pop    edx
c001a819:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a81e:	59                   	pop    ecx
c001a81f:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a825:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a828:	50                   	push   eax
c001a829:	e8 44 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a82e:	5b                   	pop    ebx
c001a82f:	58                   	pop    eax
c001a830:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a835:	68 b9 ba 02 c0       	push   0xc002bab9
c001a83a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a840:	e8 07 69 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a845:	5a                   	pop    edx
c001a846:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a84b:	59                   	pop    ecx
c001a84c:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a852:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a855:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a858:	50                   	push   eax
c001a859:	e8 14 69 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a85e:	5b                   	pop    ebx
c001a85f:	58                   	pop    eax
c001a860:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a865:	68 b9 ba 02 c0       	push   0xc002bab9
c001a86a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a870:	e8 d7 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a875:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a87a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a87d:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a883:	8b 12                	mov    edx,DWORD PTR [edx]
c001a885:	59                   	pop    ecx
c001a886:	5b                   	pop    ebx
c001a887:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a88a:	50                   	push   eax
c001a88b:	e8 e2 68 ff ff       	call   c0011172 <VgaText::putx(unsigned int)>
c001a890:	83 c4 10             	add    esp,0x10
c001a893:	b2 fe                	mov    dl,0xfe
c001a895:	e4 60                	in     al,0x60
c001a897:	3c 1c                	cmp    al,0x1c
c001a899:	74 04                	je     c001a89f <Krnl::panic(char const*)+0x334>
c001a89b:	3c 5a                	cmp    al,0x5a
c001a89d:	75 f6                	jne    c001a895 <Krnl::panic(char const*)+0x32a>
c001a89f:	e4 64                	in     al,0x64
c001a8a1:	a8 02                	test   al,0x2
c001a8a3:	75 fa                	jne    c001a89f <Krnl::panic(char const*)+0x334>
c001a8a5:	88 d0                	mov    al,dl
c001a8a7:	e6 64                	out    0x64,al
c001a8a9:	fa                   	cli    
c001a8aa:	f4                   	hlt    
c001a8ab:	eb e8                	jmp    c001a895 <Krnl::panic(char const*)+0x32a>
c001a8ad:	50                   	push   eax
c001a8ae:	50                   	push   eax
c001a8af:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8b4:	68 24 bb 02 c0       	push   0xc002bb24
c001a8b9:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a8bf:	e8 88 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a8c4:	58                   	pop    eax
c001a8c5:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8ca:	5a                   	pop    edx
c001a8cb:	68 33 ba 02 c0       	push   0xc002ba33
c001a8d0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a8d6:	e8 71 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a8db:	59                   	pop    ecx
c001a8dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8e1:	5b                   	pop    ebx
c001a8e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8e5:	83 c0 0c             	add    eax,0xc
c001a8e8:	50                   	push   eax
c001a8e9:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a8ee:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a8f4:	e8 53 68 ff ff       	call   c001114c <VgaText::puts(char const*)>
c001a8f9:	83 c4 10             	add    esp,0x10
c001a8fc:	e9 a3 fd ff ff       	jmp    c001a6a4 <Krnl::panic(char const*)+0x139>

c001a901 <Net::switchEndian16(unsigned short)>:
c001a901:	83 ec 04             	sub    esp,0x4
c001a904:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a908:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a90c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a910:	c1 f8 08             	sar    eax,0x8
c001a913:	89 c2                	mov    edx,eax
c001a915:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a919:	c1 e0 08             	shl    eax,0x8
c001a91c:	09 d0                	or     eax,edx
c001a91e:	83 c4 04             	add    esp,0x4
c001a921:	c3                   	ret    

c001a922 <Net::switchEndian32(unsigned int)>:
c001a922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a926:	c1 e8 18             	shr    eax,0x18
c001a929:	89 c2                	mov    edx,eax
c001a92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a92f:	c1 e0 08             	shl    eax,0x8
c001a932:	25 00 00 ff 00       	and    eax,0xff0000
c001a937:	09 c2                	or     edx,eax
c001a939:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a93d:	c1 e8 08             	shr    eax,0x8
c001a940:	25 00 ff 00 00       	and    eax,0xff00
c001a945:	09 c2                	or     edx,eax
c001a947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a94b:	c1 e0 18             	shl    eax,0x18
c001a94e:	09 d0                	or     eax,edx
c001a950:	c3                   	ret    

c001a951 <Net::crc32Calc(unsigned char*, int)>:
c001a951:	83 ec 10             	sub    esp,0x10
c001a954:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a959:	75 07                	jne    c001a962 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a95b:	b8 00 00 00 00       	mov    eax,0x0
c001a960:	eb 7c                	jmp    c001a9de <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a962:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a967:	7f 07                	jg     c001a970 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a969:	b8 00 00 00 00       	mov    eax,0x0
c001a96e:	eb 6e                	jmp    c001a9de <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a970:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a978:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a984:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a988:	7d 4e                	jge    c001a9d8 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a98a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a98e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a992:	01 d0                	add    eax,edx
c001a994:	8a 00                	mov    al,BYTE PTR [eax]
c001a996:	0f b6 c0             	movzx  eax,al
c001a999:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a99d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9a5:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a9aa:	7f 26                	jg     c001a9d2 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b0:	83 e0 01             	and    eax,0x1
c001a9b3:	74 0d                	je     c001a9c2 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a9b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b9:	d1 e8                	shr    eax,1
c001a9bb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a9c0:	eb 06                	jmp    c001a9c8 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c6:	d1 e8                	shr    eax,1
c001a9c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9cc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9d0:	eb d3                	jmp    c001a9a5 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a9d2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a9d6:	eb a8                	jmp    c001a980 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9dc:	f7 d0                	not    eax
c001a9de:	83 c4 10             	add    esp,0x10
c001a9e1:	c3                   	ret    

c001a9e2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a9e2:	83 ec 1c             	sub    esp,0x1c
c001a9e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a9ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9f5:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a9fa:	7f 14                	jg     c001aa10 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a9fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa00:	8d 50 01             	lea    edx,[eax+0x1]
c001aa03:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa07:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa0a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa0e:	eb e5                	jmp    c001a9f5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa14:	8d 50 01             	lea    edx,[eax+0x1]
c001aa17:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa1b:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa1e:	83 ec 04             	sub    esp,0x4
c001aa21:	6a 06                	push   0x6
c001aa23:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa27:	50                   	push   eax
c001aa28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa2c:	e8 13 5d fe ff       	call   c0000744 <memcpy>
c001aa31:	83 c4 10             	add    esp,0x10
c001aa34:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa39:	83 ec 04             	sub    esp,0x4
c001aa3c:	6a 06                	push   0x6
c001aa3e:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa42:	50                   	push   eax
c001aa43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa47:	e8 f8 5c fe ff       	call   c0000744 <memcpy>
c001aa4c:	83 c4 10             	add    esp,0x10
c001aa4f:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa58:	0f b7 c0             	movzx  eax,ax
c001aa5b:	c1 f8 08             	sar    eax,0x8
c001aa5e:	89 c1                	mov    ecx,eax
c001aa60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa64:	8d 50 01             	lea    edx,[eax+0x1]
c001aa67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa6b:	88 ca                	mov    dl,cl
c001aa6d:	88 10                	mov    BYTE PTR [eax],dl
c001aa6f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa77:	8d 48 01             	lea    ecx,[eax+0x1]
c001aa7a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aa7e:	88 10                	mov    BYTE PTR [eax],dl
c001aa80:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa88:	83 ec 04             	sub    esp,0x4
c001aa8b:	52                   	push   edx
c001aa8c:	50                   	push   eax
c001aa8d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa91:	e8 ae 5c fe ff       	call   c0000744 <memcpy>
c001aa96:	83 c4 10             	add    esp,0x10
c001aa99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa9d:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aaa1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aaa9:	83 ec 08             	sub    esp,0x8
c001aaac:	50                   	push   eax
c001aaad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aab1:	e8 9b fe ff ff       	call   c001a951 <Net::crc32Calc(unsigned char*, int)>
c001aab6:	83 c4 10             	add    esp,0x10
c001aab9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aabd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac1:	c1 e8 18             	shr    eax,0x18
c001aac4:	89 c1                	mov    ecx,eax
c001aac6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaca:	8d 50 01             	lea    edx,[eax+0x1]
c001aacd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aad1:	88 ca                	mov    dl,cl
c001aad3:	88 10                	mov    BYTE PTR [eax],dl
c001aad5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aad9:	c1 e8 10             	shr    eax,0x10
c001aadc:	89 c1                	mov    ecx,eax
c001aade:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aae2:	8d 50 01             	lea    edx,[eax+0x1]
c001aae5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aae9:	88 ca                	mov    dl,cl
c001aaeb:	88 10                	mov    BYTE PTR [eax],dl
c001aaed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf1:	c1 e8 08             	shr    eax,0x8
c001aaf4:	89 c1                	mov    ecx,eax
c001aaf6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aafa:	8d 50 01             	lea    edx,[eax+0x1]
c001aafd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab01:	88 ca                	mov    dl,cl
c001ab03:	88 10                	mov    BYTE PTR [eax],dl
c001ab05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab09:	8d 50 01             	lea    edx,[eax+0x1]
c001ab0c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab14:	88 10                	mov    BYTE PTR [eax],dl
c001ab16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab1a:	83 c4 1c             	add    esp,0x1c
c001ab1d:	c3                   	ret    

c001ab1e <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab1e:	83 ec 2c             	sub    esp,0x2c
c001ab21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab29:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab2e:	83 ec 04             	sub    esp,0x4
c001ab31:	6a 06                	push   0x6
c001ab33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab3b:	83 c0 0e             	add    eax,0xe
c001ab3e:	50                   	push   eax
c001ab3f:	e8 00 5c fe ff       	call   c0000744 <memcpy>
c001ab44:	83 c4 10             	add    esp,0x10
c001ab47:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab4c:	83 ec 04             	sub    esp,0x4
c001ab4f:	6a 06                	push   0x6
c001ab51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab59:	83 c0 08             	add    eax,0x8
c001ab5c:	50                   	push   eax
c001ab5d:	e8 e2 5b fe ff       	call   c0000744 <memcpy>
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab6e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab75:	8a 00                	mov    al,BYTE PTR [eax]
c001ab77:	0f b6 c0             	movzx  eax,al
c001ab7a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ab7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab83:	8d 50 01             	lea    edx,[eax+0x1]
c001ab86:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab8a:	8a 00                	mov    al,BYTE PTR [eax]
c001ab8c:	0f b6 c0             	movzx  eax,al
c001ab8f:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ab94:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ab99:	c1 e0 08             	shl    eax,0x8
c001ab9c:	89 c2                	mov    edx,eax
c001ab9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aba2:	09 d0                	or     eax,edx
c001aba4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aba8:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001abac:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001abb1:	75 3a                	jne    c001abed <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abb7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abba:	66 3d dc 05          	cmp    ax,0x5dc
c001abbe:	77 10                	ja     c001abd0 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001abc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abc4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abc7:	0f b7 c0             	movzx  eax,ax
c001abca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001abce:	eb 1d                	jmp    c001abed <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abd0:	83 ec 0c             	sub    esp,0xc
c001abd3:	68 fc bb 02 c0       	push   0xc002bbfc
c001abd8:	e8 e9 82 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001abdd:	83 c4 10             	add    esp,0x10
c001abe0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abe4:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001abe8:	e9 c0 00 00 00       	jmp    c001acad <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001abed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001abf7:	83 ec 04             	sub    esp,0x4
c001abfa:	52                   	push   edx
c001abfb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abff:	50                   	push   eax
c001ac00:	e8 3f 5b fe ff       	call   c0000744 <memcpy>
c001ac05:	83 c4 10             	add    esp,0x10
c001ac08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac0c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac14:	8d 50 01             	lea    edx,[eax+0x1]
c001ac17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac1b:	8a 00                	mov    al,BYTE PTR [eax]
c001ac1d:	0f b6 c0             	movzx  eax,al
c001ac20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac28:	8d 50 01             	lea    edx,[eax+0x1]
c001ac2b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac2f:	8a 00                	mov    al,BYTE PTR [eax]
c001ac31:	0f b6 c0             	movzx  eax,al
c001ac34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac3c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac43:	8a 00                	mov    al,BYTE PTR [eax]
c001ac45:	0f b6 c0             	movzx  eax,al
c001ac48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac50:	8d 50 01             	lea    edx,[eax+0x1]
c001ac53:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac57:	8a 00                	mov    al,BYTE PTR [eax]
c001ac59:	0f b6 c0             	movzx  eax,al
c001ac5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac64:	c1 e0 18             	shl    eax,0x18
c001ac67:	89 c2                	mov    edx,eax
c001ac69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac6d:	c1 e0 10             	shl    eax,0x10
c001ac70:	09 c2                	or     edx,eax
c001ac72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac76:	c1 e0 08             	shl    eax,0x8
c001ac79:	09 d0                	or     eax,edx
c001ac7b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ac7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac87:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ac8b:	83 e8 04             	sub    eax,0x4
c001ac8e:	83 ec 08             	sub    esp,0x8
c001ac91:	50                   	push   eax
c001ac92:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ac96:	e8 b6 fc ff ff       	call   c001a951 <Net::crc32Calc(unsigned char*, int)>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aca2:	0f 94 c2             	sete   dl
c001aca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aca9:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acac:	90                   	nop
c001acad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acb1:	83 c4 2c             	add    esp,0x2c
c001acb4:	c2 04 00             	ret    0x4

c001acb7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acb7:	55                   	push   ebp
c001acb8:	57                   	push   edi
c001acb9:	56                   	push   esi
c001acba:	53                   	push   ebx
c001acbb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acc1:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001acc8:	8a 1e                	mov    bl,BYTE PTR [esi]
c001acca:	8d 6e 01             	lea    ebp,[esi+0x1]
c001accd:	80 fb 40             	cmp    bl,0x40
c001acd0:	75 1b                	jne    c001aced <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001acd2:	8a 16                	mov    dl,BYTE PTR [esi]
c001acd4:	84 d2                	test   dl,dl
c001acd6:	0f 84 f1 00 00 00    	je     c001adcd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acdc:	8d 46 01             	lea    eax,[esi+0x1]
c001acdf:	80 fa 3a             	cmp    dl,0x3a
c001ace2:	74 04                	je     c001ace8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ace4:	89 c6                	mov    esi,eax
c001ace6:	eb ea                	jmp    c001acd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ace8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001aceb:	89 c6                	mov    esi,eax
c001aced:	50                   	push   eax
c001acee:	6a 40                	push   0x40
c001acf0:	6a 00                	push   0x0
c001acf2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acf6:	50                   	push   eax
c001acf7:	e8 7c 5a fe ff       	call   c0000778 <memset>
c001acfc:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad03:	31 c0                	xor    eax,eax
c001ad05:	83 c4 10             	add    esp,0x10
c001ad08:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad0a:	84 c9                	test   cl,cl
c001ad0c:	0f 84 bb 00 00 00    	je     c001adcd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad12:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad17:	0f 8f b0 00 00 00    	jg     c001adcd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad1d:	80 f9 0a             	cmp    cl,0xa
c001ad20:	0f 85 98 00 00 00    	jne    c001adbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad26:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad2b:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad2f:	a8 df                	test   al,0xdf
c001ad31:	0f 94 c1             	sete   cl
c001ad34:	3c 23                	cmp    al,0x23
c001ad36:	0f 94 c2             	sete   dl
c001ad39:	08 d1                	or     cl,dl
c001ad3b:	75 4a                	jne    c001ad87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad3d:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad40:	80 fa 01             	cmp    dl,0x1
c001ad43:	76 42                	jbe    c001ad87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad45:	3c 5b                	cmp    al,0x5b
c001ad47:	75 42                	jne    c001ad8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad49:	80 fb 40             	cmp    bl,0x40
c001ad4c:	75 39                	jne    c001ad87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad4e:	83 ec 0c             	sub    esp,0xc
c001ad51:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad55:	52                   	push   edx
c001ad56:	e8 39 5a fe ff       	call   c0000794 <strlen>
c001ad5b:	83 c4 10             	add    esp,0x10
c001ad5e:	83 f8 3f             	cmp    eax,0x3f
c001ad61:	77 6a                	ja     c001adcd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad63:	50                   	push   eax
c001ad64:	50                   	push   eax
c001ad65:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad69:	52                   	push   edx
c001ad6a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad6e:	52                   	push   edx
c001ad6f:	e8 c0 5a fe ff       	call   c0000834 <strcpy>
c001ad74:	58                   	pop    eax
c001ad75:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad79:	52                   	push   edx
c001ad7a:	e8 15 5a fe ff       	call   c0000794 <strlen>
c001ad7f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad84:	83 c4 10             	add    esp,0x10
c001ad87:	31 d2                	xor    edx,edx
c001ad89:	eb 3a                	jmp    c001adc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad8b:	80 fb 40             	cmp    bl,0x40
c001ad8e:	74 06                	je     c001ad96 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad90:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad94:	eb 20                	jmp    c001adb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad96:	50                   	push   eax
c001ad97:	50                   	push   eax
c001ad98:	55                   	push   ebp
c001ad99:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad9d:	50                   	push   eax
c001ad9e:	e8 1d 5b fe ff       	call   c00008c0 <strcmp>
c001ada3:	83 c4 10             	add    esp,0x10
c001ada6:	85 c0                	test   eax,eax
c001ada8:	75 dd                	jne    c001ad87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adaa:	eb e4                	jmp    c001ad90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adac:	8d 50 01             	lea    edx,[eax+0x1]
c001adaf:	80 f9 3d             	cmp    cl,0x3d
c001adb2:	74 1d                	je     c001add1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001adb4:	89 d0                	mov    eax,edx
c001adb6:	8a 08                	mov    cl,BYTE PTR [eax]
c001adb8:	84 c9                	test   cl,cl
c001adba:	75 f0                	jne    c001adac <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adbc:	eb 0f                	jmp    c001adcd <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adbe:	8d 50 01             	lea    edx,[eax+0x1]
c001adc1:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001adc5:	47                   	inc    edi
c001adc6:	89 d0                	mov    eax,edx
c001adc8:	e9 3b ff ff ff       	jmp    c001ad08 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001adcd:	31 c0                	xor    eax,eax
c001adcf:	eb 33                	jmp    c001ae04 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001add1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001add5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001add8:	50                   	push   eax
c001add9:	50                   	push   eax
c001adda:	8d 44 24 60          	lea    eax,[esp+0x60]
c001adde:	50                   	push   eax
c001addf:	56                   	push   esi
c001ade0:	e8 db 5a fe ff       	call   c00008c0 <strcmp>
c001ade5:	83 c4 10             	add    esp,0x10
c001ade8:	85 c0                	test   eax,eax
c001adea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001adee:	75 97                	jne    c001ad87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adf0:	51                   	push   ecx
c001adf1:	51                   	push   ecx
c001adf2:	52                   	push   edx
c001adf3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001adfa:	e8 35 5a fe ff       	call   c0000834 <strcpy>
c001adff:	83 c4 10             	add    esp,0x10
c001ae02:	b0 01                	mov    al,0x1
c001ae04:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae0a:	5b                   	pop    ebx
c001ae0b:	5e                   	pop    esi
c001ae0c:	5f                   	pop    edi
c001ae0d:	5d                   	pop    ebp
c001ae0e:	c3                   	ret    

c001ae0f <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae0f:	57                   	push   edi
c001ae10:	56                   	push   esi
c001ae11:	53                   	push   ebx
c001ae12:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae18:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae1f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae26:	53                   	push   ebx
c001ae27:	e8 68 59 fe ff       	call   c0000794 <strlen>
c001ae2c:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae2f:	89 c7                	mov    edi,eax
c001ae31:	e8 5e 59 fe ff       	call   c0000794 <strlen>
c001ae36:	83 c4 10             	add    esp,0x10
c001ae39:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae3d:	3d ff 00 00 00       	cmp    eax,0xff
c001ae42:	0f 87 d3 00 00 00    	ja     c001af1b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae48:	57                   	push   edi
c001ae49:	57                   	push   edi
c001ae4a:	56                   	push   esi
c001ae4b:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae4f:	56                   	push   esi
c001ae50:	e8 df 59 fe ff       	call   c0000834 <strcpy>
c001ae55:	58                   	pop    eax
c001ae56:	5a                   	pop    edx
c001ae57:	68 5c c1 02 c0       	push   0xc002c15c
c001ae5c:	56                   	push   esi
c001ae5d:	e8 12 5b fe ff       	call   c0000974 <strcat>
c001ae62:	59                   	pop    ecx
c001ae63:	5f                   	pop    edi
c001ae64:	53                   	push   ebx
c001ae65:	56                   	push   esi
c001ae66:	e8 09 5b fe ff       	call   c0000974 <strcat>
c001ae6b:	58                   	pop    eax
c001ae6c:	5a                   	pop    edx
c001ae6d:	68 48 bc 02 c0       	push   0xc002bc48
c001ae72:	56                   	push   esi
c001ae73:	e8 fc 5a fe ff       	call   c0000974 <strcat>
c001ae78:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae7f:	e8 bf 49 ff ff       	call   c000f843 <malloc>
c001ae84:	83 c4 0c             	add    esp,0xc
c001ae87:	89 c3                	mov    ebx,eax
c001ae89:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001ae8f:	56                   	push   esi
c001ae90:	50                   	push   eax
c001ae91:	e8 88 85 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001ae96:	83 c4 10             	add    esp,0x10
c001ae99:	85 db                	test   ebx,ebx
c001ae9b:	74 7e                	je     c001af1b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae9d:	51                   	push   ecx
c001ae9e:	51                   	push   ecx
c001ae9f:	6a 01                	push   0x1
c001aea1:	53                   	push   ebx
c001aea2:	e8 db 85 ff ff       	call   c0013482 <File::open(FileOpenMode)>
c001aea7:	83 c4 10             	add    esp,0x10
c001aeaa:	85 c0                	test   eax,eax
c001aeac:	74 08                	je     c001aeb6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aeae:	83 ec 0c             	sub    esp,0xc
c001aeb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeb3:	53                   	push   ebx
c001aeb4:	eb 5f                	jmp    c001af15 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aeb6:	52                   	push   edx
c001aeb7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aebb:	50                   	push   eax
c001aebc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aec0:	50                   	push   eax
c001aec1:	53                   	push   ebx
c001aec2:	e8 67 88 ff ff       	call   c001372e <File::stat(unsigned long long*, bool*)>
c001aec7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aecb:	83 c4 10             	add    esp,0x10
c001aece:	89 c1                	mov    ecx,eax
c001aed0:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aed4:	74 31                	je     c001af07 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aed6:	83 ec 0c             	sub    esp,0xc
c001aed9:	50                   	push   eax
c001aeda:	e8 64 49 ff ff       	call   c000f843 <malloc>
c001aedf:	89 c6                	mov    esi,eax
c001aee1:	58                   	pop    eax
c001aee2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aee4:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aee8:	52                   	push   edx
c001aee9:	56                   	push   esi
c001aeea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aef2:	53                   	push   ebx
c001aef3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aef6:	83 c4 20             	add    esp,0x20
c001aef9:	85 c0                	test   eax,eax
c001aefb:	75 0a                	jne    c001af07 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aefd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af01:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af05:	74 18                	je     c001af1f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af07:	83 ec 0c             	sub    esp,0xc
c001af0a:	53                   	push   ebx
c001af0b:	e8 d0 85 ff ff       	call   c00134e0 <File::close()>
c001af10:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af18:	83 c4 10             	add    esp,0x10
c001af1b:	31 c0                	xor    eax,eax
c001af1d:	eb 3b                	jmp    c001af5a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af1f:	83 ec 0c             	sub    esp,0xc
c001af22:	53                   	push   ebx
c001af23:	e8 b8 85 ff ff       	call   c00134e0 <File::close()>
c001af28:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af30:	83 c4 0c             	add    esp,0xc
c001af33:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af3a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af41:	56                   	push   esi
c001af42:	e8 70 fd ff ff       	call   c001acb7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af47:	89 34 24             	mov    DWORD PTR [esp],esi
c001af4a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af4e:	e8 00 49 ff ff       	call   c000f853 <free>
c001af53:	83 c4 10             	add    esp,0x10
c001af56:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af5a:	81 c4 20 01 00 00    	add    esp,0x120
c001af60:	5b                   	pop    ebx
c001af61:	5e                   	pop    esi
c001af62:	5f                   	pop    edi
c001af63:	c3                   	ret    

c001af64 <Reg::getLine(char*, char*, char*)>:
c001af64:	57                   	push   edi
c001af65:	56                   	push   esi
c001af66:	53                   	push   ebx
c001af67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af6f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af73:	57                   	push   edi
c001af74:	56                   	push   esi
c001af75:	53                   	push   ebx
c001af76:	68 4d bc 02 c0       	push   0xc002bc4d
c001af7b:	e8 8f fe ff ff       	call   c001ae0f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af80:	83 c4 10             	add    esp,0x10
c001af83:	84 c0                	test   al,al
c001af85:	75 10                	jne    c001af97 <Reg::getLine(char*, char*, char*)+0x33>
c001af87:	57                   	push   edi
c001af88:	56                   	push   esi
c001af89:	53                   	push   ebx
c001af8a:	68 72 bc 02 c0       	push   0xc002bc72
c001af8f:	e8 7b fe ff ff       	call   c001ae0f <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af94:	83 c4 10             	add    esp,0x10
c001af97:	5b                   	pop    ebx
c001af98:	5e                   	pop    esi
c001af99:	5f                   	pop    edi
c001af9a:	c3                   	ret    

c001af9b <Reg::readInt(char*, char*, int*)>:
c001af9b:	55                   	push   ebp
c001af9c:	57                   	push   edi
c001af9d:	56                   	push   esi
c001af9e:	53                   	push   ebx
c001af9f:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afa5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afa9:	57                   	push   edi
c001afaa:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afb1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afb8:	e8 a7 ff ff ff       	call   c001af64 <Reg::getLine(char*, char*, char*)>
c001afbd:	83 c4 10             	add    esp,0x10
c001afc0:	84 c0                	test   al,al
c001afc2:	0f 84 b3 00 00 00    	je     c001b07b <Reg::readInt(char*, char*, int*)+0xe0>
c001afc8:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001afcc:	80 fa 2b             	cmp    dl,0x2b
c001afcf:	74 0c                	je     c001afdd <Reg::readInt(char*, char*, int*)+0x42>
c001afd1:	80 fa 2d             	cmp    dl,0x2d
c001afd4:	75 0e                	jne    c001afe4 <Reg::readInt(char*, char*, int*)+0x49>
c001afd6:	ba 01 00 00 00       	mov    edx,0x1
c001afdb:	eb 0b                	jmp    c001afe8 <Reg::readInt(char*, char*, int*)+0x4d>
c001afdd:	ba 01 00 00 00       	mov    edx,0x1
c001afe2:	eb 02                	jmp    c001afe6 <Reg::readInt(char*, char*, int*)+0x4b>
c001afe4:	31 d2                	xor    edx,edx
c001afe6:	31 c0                	xor    eax,eax
c001afe8:	be 0a 00 00 00       	mov    esi,0xa
c001afed:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aff2:	75 20                	jne    c001b014 <Reg::readInt(char*, char*, int*)+0x79>
c001aff4:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aff8:	80 f9 78             	cmp    cl,0x78
c001affb:	75 0a                	jne    c001b007 <Reg::readInt(char*, char*, int*)+0x6c>
c001affd:	83 c2 02             	add    edx,0x2
c001b000:	be 10 00 00 00       	mov    esi,0x10
c001b005:	eb 0d                	jmp    c001b014 <Reg::readInt(char*, char*, int*)+0x79>
c001b007:	80 f9 62             	cmp    cl,0x62
c001b00a:	75 08                	jne    c001b014 <Reg::readInt(char*, char*, int*)+0x79>
c001b00c:	83 c2 02             	add    edx,0x2
c001b00f:	be 02 00 00 00       	mov    esi,0x2
c001b014:	01 d7                	add    edi,edx
c001b016:	31 d2                	xor    edx,edx
c001b018:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b01a:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b01e:	80 fb 0d             	cmp    bl,0xd
c001b021:	0f 94 c3             	sete   bl
c001b024:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b029:	0f 94 c1             	sete   cl
c001b02c:	08 cb                	or     bl,cl
c001b02e:	75 3a                	jne    c001b06a <Reg::readInt(char*, char*, int*)+0xcf>
c001b030:	0f af d6             	imul   edx,esi
c001b033:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b038:	83 fe 10             	cmp    esi,0x10
c001b03b:	75 26                	jne    c001b063 <Reg::readInt(char*, char*, int*)+0xc8>
c001b03d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b041:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b044:	89 e9                	mov    ecx,ebp
c001b046:	80 f9 05             	cmp    cl,0x5
c001b049:	77 06                	ja     c001b051 <Reg::readInt(char*, char*, int*)+0xb6>
c001b04b:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b04f:	eb 16                	jmp    c001b067 <Reg::readInt(char*, char*, int*)+0xcc>
c001b051:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b055:	83 e9 61             	sub    ecx,0x61
c001b058:	80 f9 05             	cmp    cl,0x5
c001b05b:	77 06                	ja     c001b063 <Reg::readInt(char*, char*, int*)+0xc8>
c001b05d:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b061:	eb 04                	jmp    c001b067 <Reg::readInt(char*, char*, int*)+0xcc>
c001b063:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b067:	47                   	inc    edi
c001b068:	eb ae                	jmp    c001b018 <Reg::readInt(char*, char*, int*)+0x7d>
c001b06a:	84 c0                	test   al,al
c001b06c:	74 02                	je     c001b070 <Reg::readInt(char*, char*, int*)+0xd5>
c001b06e:	f7 da                	neg    edx
c001b070:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b077:	89 10                	mov    DWORD PTR [eax],edx
c001b079:	88 d8                	mov    al,bl
c001b07b:	81 c4 ec 00 00 00    	add    esp,0xec
c001b081:	5b                   	pop    ebx
c001b082:	5e                   	pop    esi
c001b083:	5f                   	pop    edi
c001b084:	5d                   	pop    ebp
c001b085:	c3                   	ret    

c001b086 <Reg::readString(char*, char*, char*, int)>:
c001b086:	57                   	push   edi
c001b087:	56                   	push   esi
c001b088:	53                   	push   ebx
c001b089:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b08f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b096:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b09a:	57                   	push   edi
c001b09b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0a2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0a9:	e8 b6 fe ff ff       	call   c001af64 <Reg::getLine(char*, char*, char*)>
c001b0ae:	83 c4 10             	add    esp,0x10
c001b0b1:	89 c6                	mov    esi,eax
c001b0b3:	84 c0                	test   al,al
c001b0b5:	74 44                	je     c001b0fb <Reg::readString(char*, char*, char*, int)+0x75>
c001b0b7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0be:	31 c0                	xor    eax,eax
c001b0c0:	4a                   	dec    edx
c001b0c1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0c4:	84 c9                	test   cl,cl
c001b0c6:	74 0f                	je     c001b0d7 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0c8:	39 c2                	cmp    edx,eax
c001b0ca:	7e 0b                	jle    c001b0d7 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0cc:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0cf:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0d4:	40                   	inc    eax
c001b0d5:	eb ea                	jmp    c001b0c1 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0d7:	83 ec 0c             	sub    esp,0xc
c001b0da:	53                   	push   ebx
c001b0db:	e8 b4 56 fe ff       	call   c0000794 <strlen>
c001b0e0:	83 c4 10             	add    esp,0x10
c001b0e3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b0e8:	75 11                	jne    c001b0fb <Reg::readString(char*, char*, char*, int)+0x75>
c001b0ea:	83 ec 0c             	sub    esp,0xc
c001b0ed:	53                   	push   ebx
c001b0ee:	e8 a1 56 fe ff       	call   c0000794 <strlen>
c001b0f3:	83 c4 10             	add    esp,0x10
c001b0f6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b0fb:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b101:	89 f0                	mov    eax,esi
c001b103:	5b                   	pop    ebx
c001b104:	5e                   	pop    esi
c001b105:	5f                   	pop    edi
c001b106:	c3                   	ret    

c001b107 <Reg::readBool(char*, char*, bool*)>:
c001b107:	83 ec 20             	sub    esp,0x20
c001b10a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b10e:	50                   	push   eax
c001b10f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b113:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b117:	e8 7f fe ff ff       	call   c001af9b <Reg::readInt(char*, char*, int*)>
c001b11c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b121:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b125:	0f 95 02             	setne  BYTE PTR [edx]
c001b128:	83 c4 2c             	add    esp,0x2c
c001b12b:	c3                   	ret    

c001b12c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b12c:	53                   	push   ebx
c001b12d:	83 ec 1c             	sub    esp,0x1c
c001b130:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b134:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b138:	50                   	push   eax
c001b139:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b13d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b141:	e8 c1 ff ff ff       	call   c001b107 <Reg::readBool(char*, char*, bool*)>
c001b146:	83 c4 10             	add    esp,0x10
c001b149:	84 c0                	test   al,al
c001b14b:	74 04                	je     c001b151 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b14d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b151:	88 d8                	mov    al,bl
c001b153:	83 c4 18             	add    esp,0x18
c001b156:	5b                   	pop    ebx
c001b157:	c3                   	ret    

c001b158 <Reg::readIntWithDefault(char*, char*, int)>:
c001b158:	53                   	push   ebx
c001b159:	83 ec 1c             	sub    esp,0x1c
c001b15c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b160:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b164:	50                   	push   eax
c001b165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b169:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b16d:	e8 29 fe ff ff       	call   c001af9b <Reg::readInt(char*, char*, int*)>
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	84 c0                	test   al,al
c001b177:	74 04                	je     c001b17d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b179:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b17d:	89 d8                	mov    eax,ebx
c001b17f:	83 c4 18             	add    esp,0x18
c001b182:	5b                   	pop    ebx
c001b183:	c3                   	ret    

c001b184 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b184:	57                   	push   edi
c001b185:	56                   	push   esi
c001b186:	53                   	push   ebx
c001b187:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b18b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b18f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b193:	56                   	push   esi
c001b194:	53                   	push   ebx
c001b195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b19d:	e8 e4 fe ff ff       	call   c001b086 <Reg::readString(char*, char*, char*, int)>
c001b1a2:	83 c4 10             	add    esp,0x10
c001b1a5:	84 c0                	test   al,al
c001b1a7:	75 1b                	jne    c001b1c4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b1a9:	50                   	push   eax
c001b1aa:	56                   	push   esi
c001b1ab:	4e                   	dec    esi
c001b1ac:	6a 00                	push   0x0
c001b1ae:	53                   	push   ebx
c001b1af:	e8 c4 55 fe ff       	call   c0000778 <memset>
c001b1b4:	83 c4 0c             	add    esp,0xc
c001b1b7:	56                   	push   esi
c001b1b8:	57                   	push   edi
c001b1b9:	53                   	push   ebx
c001b1ba:	89 fb                	mov    ebx,edi
c001b1bc:	e8 83 55 fe ff       	call   c0000744 <memcpy>
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	89 d8                	mov    eax,ebx
c001b1c6:	5b                   	pop    ebx
c001b1c7:	5e                   	pop    esi
c001b1c8:	5f                   	pop    edi
c001b1c9:	c3                   	ret    

c001b1ca <Sys::eject(regs*)>:
c001b1ca:	83 ec 0c             	sub    esp,0xc
c001b1cd:	83 ca ff             	or     edx,0xffffffff
c001b1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1d7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1dc:	83 e9 41             	sub    ecx,0x41
c001b1df:	83 f9 19             	cmp    ecx,0x19
c001b1e2:	77 18                	ja     c001b1fc <Sys::eject(regs*)+0x32>
c001b1e4:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c001b1eb:	85 c9                	test   ecx,ecx
c001b1ed:	74 0d                	je     c001b1fc <Sys::eject(regs*)+0x32>
c001b1ef:	83 ec 0c             	sub    esp,0xc
c001b1f2:	51                   	push   ecx
c001b1f3:	e8 74 b4 ff ff       	call   c001666c <LogicalDisk::eject()>
c001b1f8:	83 c4 10             	add    esp,0x10
c001b1fb:	99                   	cdq    
c001b1fc:	83 c4 0c             	add    esp,0xc
c001b1ff:	c3                   	ret    

c001b200 <Sys::exit(regs*)>:
c001b200:	83 ec 18             	sub    esp,0x18
c001b203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b207:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b20a:	e8 99 35 00 00       	call   c001e7a8 <terminateTask(int)>
c001b20f:	83 c8 ff             	or     eax,0xffffffff
c001b212:	83 c4 1c             	add    esp,0x1c
c001b215:	89 c2                	mov    edx,eax
c001b217:	c3                   	ret    

c001b218 <Sys::getCwd(regs*)>:
c001b218:	83 ec 10             	sub    esp,0x10
c001b21b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b21f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b222:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b22a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b22d:	e8 ee 7f ff ff       	call   c0013220 <Fs::getcwd(Process*, char*, int)>
c001b232:	83 c4 1c             	add    esp,0x1c
c001b235:	99                   	cdq    
c001b236:	c3                   	ret    

c001b237 <Sys::getPID(regs*)>:
c001b237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b23c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b23f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b241:	99                   	cdq    
c001b242:	c3                   	ret    

c001b243 <Sys::getRAMData(regs*)>:
c001b243:	8b 0d d4 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3d4
c001b249:	6b 05 d0 e3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e3d0,0x64
c001b250:	99                   	cdq    
c001b251:	f7 f9                	idiv   ecx
c001b253:	c1 e0 18             	shl    eax,0x18
c001b256:	09 c8                	or     eax,ecx
c001b258:	99                   	cdq    
c001b259:	c3                   	ret    

c001b25a <Sys::loadDLL(regs*)>:
c001b25a:	56                   	push   esi
c001b25b:	53                   	push   ebx
c001b25c:	31 d2                	xor    edx,edx
c001b25e:	51                   	push   ecx
c001b25f:	b8 01 00 00 00       	mov    eax,0x1
c001b264:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b268:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b26c:	0f 84 8c 00 00 00    	je     c001b2fe <Sys::loadDLL(regs*)+0xa4>
c001b272:	83 ec 0c             	sub    esp,0xc
c001b275:	68 14 01 00 00       	push   0x114
c001b27a:	e8 c4 45 ff ff       	call   c000f843 <malloc>
c001b27f:	83 c4 0c             	add    esp,0xc
c001b282:	89 c3                	mov    ebx,eax
c001b284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b289:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b28c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b28f:	53                   	push   ebx
c001b290:	e8 89 81 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001b295:	83 c4 10             	add    esp,0x10
c001b298:	31 d2                	xor    edx,edx
c001b29a:	b8 02 00 00 00       	mov    eax,0x2
c001b29f:	85 db                	test   ebx,ebx
c001b2a1:	74 5b                	je     c001b2fe <Sys::loadDLL(regs*)+0xa4>
c001b2a3:	83 ec 0c             	sub    esp,0xc
c001b2a6:	53                   	push   ebx
c001b2a7:	e8 44 84 ff ff       	call   c00136f0 <File::exists()>
c001b2ac:	83 c4 10             	add    esp,0x10
c001b2af:	84 c0                	test   al,al
c001b2b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2b3:	75 11                	jne    c001b2c6 <Sys::loadDLL(regs*)+0x6c>
c001b2b5:	83 ec 0c             	sub    esp,0xc
c001b2b8:	53                   	push   ebx
c001b2b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2bc:	83 c4 10             	add    esp,0x10
c001b2bf:	b8 03 00 00 00       	mov    eax,0x3
c001b2c4:	eb 36                	jmp    c001b2fc <Sys::loadDLL(regs*)+0xa2>
c001b2c6:	83 ec 0c             	sub    esp,0xc
c001b2c9:	53                   	push   ebx
c001b2ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2cd:	58                   	pop    eax
c001b2ce:	5a                   	pop    edx
c001b2cf:	6a 00                	push   0x0
c001b2d1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2d4:	e8 c5 23 00 00       	call   c001d69e <Thr::loadDLL(char const*, bool)>
c001b2d9:	83 c4 10             	add    esp,0x10
c001b2dc:	89 c1                	mov    ecx,eax
c001b2de:	31 d2                	xor    edx,edx
c001b2e0:	b8 04 00 00 00       	mov    eax,0x4
c001b2e5:	85 c9                	test   ecx,ecx
c001b2e7:	74 15                	je     c001b2fe <Sys::loadDLL(regs*)+0xa4>
c001b2e9:	53                   	push   ebx
c001b2ea:	53                   	push   ebx
c001b2eb:	ff 35 88 e3 02 c0    	push   DWORD PTR ds:0xc002e388
c001b2f1:	51                   	push   ecx
c001b2f2:	e8 f6 25 00 00       	call   c001d8ed <Thr::executeDLL(unsigned long, void*)>
c001b2f7:	83 c4 10             	add    esp,0x10
c001b2fa:	31 c0                	xor    eax,eax
c001b2fc:	31 d2                	xor    edx,edx
c001b2fe:	59                   	pop    ecx
c001b2ff:	5b                   	pop    ebx
c001b300:	5e                   	pop    esi
c001b301:	c3                   	ret    

c001b302 <Sys::read(regs*)>:
c001b302:	57                   	push   edi
c001b303:	56                   	push   esi
c001b304:	53                   	push   ebx
c001b305:	83 ec 10             	sub    esp,0x10
c001b308:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b30c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b30f:	83 f8 02             	cmp    eax,0x2
c001b312:	77 10                	ja     c001b324 <Sys::read(regs*)+0x22>
c001b314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b319:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b31c:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b322:	eb 0e                	jmp    c001b332 <Sys::read(regs*)+0x30>
c001b324:	83 ec 0c             	sub    esp,0xc
c001b327:	50                   	push   eax
c001b328:	e8 f8 66 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b32d:	83 c4 10             	add    esp,0x10
c001b330:	89 c1                	mov    ecx,eax
c001b332:	83 c8 ff             	or     eax,0xffffffff
c001b335:	85 c9                	test   ecx,ecx
c001b337:	89 c2                	mov    edx,eax
c001b339:	74 28                	je     c001b363 <Sys::read(regs*)+0x61>
c001b33b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b343:	31 ff                	xor    edi,edi
c001b345:	83 ec 0c             	sub    esp,0xc
c001b348:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b34a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b34e:	52                   	push   edx
c001b34f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b352:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b355:	57                   	push   edi
c001b356:	56                   	push   esi
c001b357:	51                   	push   ecx
c001b358:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b35b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b35f:	83 c4 20             	add    esp,0x20
c001b362:	99                   	cdq    
c001b363:	83 c4 10             	add    esp,0x10
c001b366:	5b                   	pop    ebx
c001b367:	5e                   	pop    esi
c001b368:	5f                   	pop    edi
c001b369:	c3                   	ret    

c001b36a <Sys::sbrk(regs*)>:
c001b36a:	56                   	push   esi
c001b36b:	53                   	push   ebx
c001b36c:	50                   	push   eax
c001b36d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b376:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b379:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b37c:	8b 88 32 19 00 00    	mov    ecx,DWORD PTR [eax+0x1932]
c001b382:	85 db                	test   ebx,ebx
c001b384:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b387:	74 02                	je     c001b38b <Sys::sbrk(regs*)+0x21>
c001b389:	79 06                	jns    c001b391 <Sys::sbrk(regs*)+0x27>
c001b38b:	89 f0                	mov    eax,esi
c001b38d:	31 d2                	xor    edx,edx
c001b38f:	eb 2a                	jmp    c001b3bb <Sys::sbrk(regs*)+0x51>
c001b391:	83 c8 ff             	or     eax,0xffffffff
c001b394:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b39a:	89 c2                	mov    edx,eax
c001b39c:	77 1d                	ja     c001b3bb <Sys::sbrk(regs*)+0x51>
c001b39e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b3a4:	50                   	push   eax
c001b3a5:	c1 ea 0c             	shr    edx,0xc
c001b3a8:	68 07 0c 00 00       	push   0xc07
c001b3ad:	52                   	push   edx
c001b3ae:	51                   	push   ecx
c001b3af:	e8 a2 70 ff ff       	call   c0012456 <VAS::allocatePages(int, int)>
c001b3b4:	89 f0                	mov    eax,esi
c001b3b6:	31 d2                	xor    edx,edx
c001b3b8:	83 c4 10             	add    esp,0x10
c001b3bb:	59                   	pop    ecx
c001b3bc:	5b                   	pop    ebx
c001b3bd:	5e                   	pop    esi
c001b3be:	c3                   	ret    

c001b3bf <Sys::setCwd(regs*)>:
c001b3bf:	83 ec 14             	sub    esp,0x14
c001b3c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3d1:	e8 b9 83 ff ff       	call   c001378f <Fs::setcwd(Process*, char*)>
c001b3d6:	83 c4 1c             	add    esp,0x1c
c001b3d9:	99                   	cdq    
c001b3da:	c3                   	ret    

c001b3db <Sys::setTime(regs*)>:
c001b3db:	55                   	push   ebp
c001b3dc:	31 d2                	xor    edx,edx
c001b3de:	57                   	push   edi
c001b3df:	bf 18 00 00 00       	mov    edi,0x18
c001b3e4:	56                   	push   esi
c001b3e5:	53                   	push   ebx
c001b3e6:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b3eb:	83 ec 30             	sub    esp,0x30
c001b3ee:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b3f2:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b3f5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3f8:	f7 f3                	div    ebx
c001b3fa:	89 d6                	mov    esi,edx
c001b3fc:	31 d2                	xor    edx,edx
c001b3fe:	f7 f3                	div    ebx
c001b400:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b403:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b407:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b40c:	31 d2                	xor    edx,edx
c001b40e:	f7 f3                	div    ebx
c001b410:	31 d2                	xor    edx,edx
c001b412:	bb 0c 00 00 00       	mov    ebx,0xc
c001b417:	f7 f7                	div    edi
c001b419:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b41c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b420:	0f b7 cd             	movzx  ecx,bp
c001b423:	56                   	push   esi
c001b424:	89 c7                	mov    edi,eax
c001b426:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b42a:	c1 e6 10             	shl    esi,0x10
c001b42d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b431:	83 e7 1f             	and    edi,0x1f
c001b434:	51                   	push   ecx
c001b435:	47                   	inc    edi
c001b436:	c1 e8 05             	shr    eax,0x5
c001b439:	31 d2                	xor    edx,edx
c001b43b:	f7 f3                	div    ebx
c001b43d:	31 db                	xor    ebx,ebx
c001b43f:	52                   	push   edx
c001b440:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b444:	57                   	push   edi
c001b445:	68 8d bc 02 c0       	push   0xc002bc8d
c001b44a:	e8 77 7a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001b44f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b453:	89 f8                	mov    eax,edi
c001b455:	31 c9                	xor    ecx,ecx
c001b457:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b45b:	88 c1                	mov    cl,al
c001b45d:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b463:	88 d5                	mov    ch,dl
c001b465:	c1 e0 10             	shl    eax,0x10
c001b468:	0f b7 d1             	movzx  edx,cx
c001b46b:	09 c2                	or     edx,eax
c001b46d:	89 d8                	mov    eax,ebx
c001b46f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b474:	09 f0                	or     eax,esi
c001b476:	89 c3                	mov    ebx,eax
c001b478:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b47c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b480:	83 c4 18             	add    esp,0x18
c001b483:	53                   	push   ebx
c001b484:	52                   	push   edx
c001b485:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b489:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b48d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b491:	e8 13 8a ff ff       	call   c0013ea9 <datetimeToSeconds(datetime_t)>
c001b496:	83 c4 0c             	add    esp,0xc
c001b499:	52                   	push   edx
c001b49a:	50                   	push   eax
c001b49b:	56                   	push   esi
c001b49c:	e8 8f 8b ff ff       	call   c0014030 <secondsToDatetime(unsigned long long)>
c001b4a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4a9:	51                   	push   ecx
c001b4aa:	89 d6                	mov    esi,edx
c001b4ac:	51                   	push   ecx
c001b4ad:	c1 ee 10             	shr    esi,0x10
c001b4b0:	89 f3                	mov    ebx,esi
c001b4b2:	0f b6 f3             	movzx  esi,bl
c001b4b5:	56                   	push   esi
c001b4b6:	0f b6 f6             	movzx  esi,dh
c001b4b9:	0f b6 d2             	movzx  edx,dl
c001b4bc:	56                   	push   esi
c001b4bd:	52                   	push   edx
c001b4be:	89 c2                	mov    edx,eax
c001b4c0:	c1 ea 10             	shr    edx,0x10
c001b4c3:	52                   	push   edx
c001b4c4:	0f b6 d4             	movzx  edx,ah
c001b4c7:	0f b6 c0             	movzx  eax,al
c001b4ca:	52                   	push   edx
c001b4cb:	50                   	push   eax
c001b4cc:	68 a9 bc 02 c0       	push   0xc002bca9
c001b4d1:	e8 f0 79 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001b4d6:	83 c4 2c             	add    esp,0x2c
c001b4d9:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b4de:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b4e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b4e6:	53                   	push   ebx
c001b4e7:	51                   	push   ecx
c001b4e8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4ee:	e8 dd 8a ff ff       	call   c0013fd0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4f3:	83 f0 01             	xor    eax,0x1
c001b4f6:	31 d2                	xor    edx,edx
c001b4f8:	0f b6 c0             	movzx  eax,al
c001b4fb:	83 c4 3c             	add    esp,0x3c
c001b4fe:	5b                   	pop    ebx
c001b4ff:	5e                   	pop    esi
c001b500:	5f                   	pop    edi
c001b501:	5d                   	pop    ebp
c001b502:	c3                   	ret    

c001b503 <Sys::timezone(regs*)>:
c001b503:	53                   	push   ebx
c001b504:	83 ec 08             	sub    esp,0x8
c001b507:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b50b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b50f:	75 17                	jne    c001b528 <Sys::timezone(regs*)+0x25>
c001b511:	83 ec 0c             	sub    esp,0xc
c001b514:	68 c5 bc 02 c0       	push   0xc002bcc5
c001b519:	e8 a8 79 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001b51e:	83 c8 ff             	or     eax,0xffffffff
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	89 c2                	mov    edx,eax
c001b526:	eb 20                	jmp    c001b548 <Sys::timezone(regs*)+0x45>
c001b528:	83 ec 0c             	sub    esp,0xc
c001b52b:	68 fd bc 02 c0       	push   0xc002bcfd
c001b530:	e8 91 79 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001b535:	58                   	pop    eax
c001b536:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b539:	e8 f4 87 ff ff       	call   c0013d32 <User::loadClockSettings(int)>
c001b53e:	83 c4 10             	add    esp,0x10
c001b541:	b8 01 00 00 00       	mov    eax,0x1
c001b546:	31 d2                	xor    edx,edx
c001b548:	83 c4 08             	add    esp,0x8
c001b54b:	5b                   	pop    ebx
c001b54c:	c3                   	ret    

c001b54d <Sys::write(regs*)>:
c001b54d:	57                   	push   edi
c001b54e:	56                   	push   esi
c001b54f:	53                   	push   ebx
c001b550:	83 ec 10             	sub    esp,0x10
c001b553:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b557:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b55a:	83 f8 02             	cmp    eax,0x2
c001b55d:	77 10                	ja     c001b56f <Sys::write(regs*)+0x22>
c001b55f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b564:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b567:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b56d:	eb 0e                	jmp    c001b57d <Sys::write(regs*)+0x30>
c001b56f:	83 ec 0c             	sub    esp,0xc
c001b572:	50                   	push   eax
c001b573:	e8 ad 64 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b578:	83 c4 10             	add    esp,0x10
c001b57b:	89 c1                	mov    ecx,eax
c001b57d:	83 c8 ff             	or     eax,0xffffffff
c001b580:	85 c9                	test   ecx,ecx
c001b582:	89 c2                	mov    edx,eax
c001b584:	74 28                	je     c001b5ae <Sys::write(regs*)+0x61>
c001b586:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b58e:	31 ff                	xor    edi,edi
c001b590:	83 ec 0c             	sub    esp,0xc
c001b593:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b595:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b599:	52                   	push   edx
c001b59a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b59d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b5a0:	57                   	push   edi
c001b5a1:	56                   	push   esi
c001b5a2:	51                   	push   ecx
c001b5a3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5aa:	83 c4 20             	add    esp,0x20
c001b5ad:	99                   	cdq    
c001b5ae:	83 c4 10             	add    esp,0x10
c001b5b1:	5b                   	pop    ebx
c001b5b2:	5e                   	pop    esi
c001b5b3:	5f                   	pop    edi
c001b5b4:	c3                   	ret    

c001b5b5 <Sys::wsbe(regs*)>:
c001b5b5:	57                   	push   edi
c001b5b6:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5bb:	56                   	push   esi
c001b5bc:	be 3c bd 02 c0       	mov    esi,0xc002bd3c
c001b5c1:	53                   	push   ebx
c001b5c2:	83 ec 30             	sub    esp,0x30
c001b5c5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5c9:	fc                   	cld    
c001b5ca:	83 ec 0c             	sub    esp,0xc
c001b5cd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5cf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5db:	8b b0 26 19 00 00    	mov    esi,DWORD PTR [eax+0x1926]
c001b5e1:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5e3:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5e6:	57                   	push   edi
c001b5e7:	e8 a8 51 fe ff       	call   c0000794 <strlen>
c001b5ec:	5a                   	pop    edx
c001b5ed:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5f1:	52                   	push   edx
c001b5f2:	31 d2                	xor    edx,edx
c001b5f4:	57                   	push   edi
c001b5f5:	52                   	push   edx
c001b5f6:	50                   	push   eax
c001b5f7:	56                   	push   esi
c001b5f8:	ff d3                	call   ebx
c001b5fa:	83 c4 14             	add    esp,0x14
c001b5fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b601:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b604:	e8 9f 31 00 00       	call   c001e7a8 <terminateTask(int)>
c001b609:	83 c4 40             	add    esp,0x40
c001b60c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b611:	5b                   	pop    ebx
c001b612:	31 d2                	xor    edx,edx
c001b614:	5e                   	pop    esi
c001b615:	5f                   	pop    edi
c001b616:	c3                   	ret    

c001b617 <Sys::yield(regs*)>:
c001b617:	57                   	push   edi
c001b618:	56                   	push   esi
c001b619:	53                   	push   ebx
c001b61a:	e8 46 27 00 00       	call   c001dd65 <lockScheduler()>
c001b61f:	e8 7c 2a 00 00       	call   c001e0a0 <schedule()>
c001b624:	e8 3e 27 00 00       	call   c001dd67 <unlockScheduler()>
c001b629:	8b 35 50 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec50
c001b62f:	8b 3d 54 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec54
c001b635:	89 f0                	mov    eax,esi
c001b637:	89 fb                	mov    ebx,edi
c001b639:	89 f1                	mov    ecx,esi
c001b63b:	c1 e0 07             	shl    eax,0x7
c001b63e:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b642:	25 80 30 0f 00       	and    eax,0xf3080
c001b647:	c1 eb 17             	shr    ebx,0x17
c001b64a:	31 c8                	xor    eax,ecx
c001b64c:	89 da                	mov    edx,ebx
c001b64e:	5b                   	pop    ebx
c001b64f:	5e                   	pop    esi
c001b650:	5f                   	pop    edi
c001b651:	c3                   	ret    

c001b652 <sysCallSeekDir(regs*)>:
c001b652:	31 c0                	xor    eax,eax
c001b654:	31 d2                	xor    edx,edx
c001b656:	c3                   	ret    

c001b657 <sysCallTellDir(regs*)>:
c001b657:	31 c0                	xor    eax,eax
c001b659:	31 d2                	xor    edx,edx
c001b65b:	c3                   	ret    

c001b65c <sysCallVerify(regs*)>:
c001b65c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b660:	31 d2                	xor    edx,edx
c001b662:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b665:	c3                   	ret    

c001b666 <sysFormatDisk(regs*)>:
c001b666:	56                   	push   esi
c001b667:	53                   	push   ebx
c001b668:	53                   	push   ebx
c001b669:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b66d:	8b 1d 48 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e748
c001b673:	eb 25                	jmp    c001b69a <sysFormatDisk(regs*)+0x34>
c001b675:	83 ec 0c             	sub    esp,0xc
c001b678:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b67b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b67d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b680:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b683:	50                   	push   eax
c001b684:	ff 34 85 e0 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1420]
c001b68b:	53                   	push   ebx
c001b68c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b68f:	83 c4 20             	add    esp,0x20
c001b692:	83 f8 08             	cmp    eax,0x8
c001b695:	75 12                	jne    c001b6a9 <sysFormatDisk(regs*)+0x43>
c001b697:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b69a:	85 db                	test   ebx,ebx
c001b69c:	75 d7                	jne    c001b675 <sysFormatDisk(regs*)+0xf>
c001b69e:	59                   	pop    ecx
c001b69f:	b8 03 00 00 00       	mov    eax,0x3
c001b6a4:	31 d2                	xor    edx,edx
c001b6a6:	5b                   	pop    ebx
c001b6a7:	5e                   	pop    esi
c001b6a8:	c3                   	ret    
c001b6a9:	85 c0                	test   eax,eax
c001b6ab:	74 1b                	je     c001b6c8 <sysFormatDisk(regs*)+0x62>
c001b6ad:	83 f8 09             	cmp    eax,0x9
c001b6b0:	74 0b                	je     c001b6bd <sysFormatDisk(regs*)+0x57>
c001b6b2:	59                   	pop    ecx
c001b6b3:	b8 02 00 00 00       	mov    eax,0x2
c001b6b8:	31 d2                	xor    edx,edx
c001b6ba:	5b                   	pop    ebx
c001b6bb:	5e                   	pop    esi
c001b6bc:	c3                   	ret    
c001b6bd:	59                   	pop    ecx
c001b6be:	b8 01 00 00 00       	mov    eax,0x1
c001b6c3:	31 d2                	xor    edx,edx
c001b6c5:	5b                   	pop    ebx
c001b6c6:	5e                   	pop    esi
c001b6c7:	c3                   	ret    
c001b6c8:	59                   	pop    ecx
c001b6c9:	31 c0                	xor    eax,eax
c001b6cb:	31 d2                	xor    edx,edx
c001b6cd:	5b                   	pop    ebx
c001b6ce:	5e                   	pop    esi
c001b6cf:	c3                   	ret    

c001b6d0 <sysSetDiskVolumeLabel(regs*)>:
c001b6d0:	56                   	push   esi
c001b6d1:	53                   	push   ebx
c001b6d2:	53                   	push   ebx
c001b6d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6d7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6da:	83 f8 19             	cmp    eax,0x19
c001b6dd:	77 29                	ja     c001b708 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6df:	8b 0c 85 e0 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1420]
c001b6e6:	85 c9                	test   ecx,ecx
c001b6e8:	74 1e                	je     c001b708 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6ea:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6ed:	85 d2                	test   edx,edx
c001b6ef:	74 17                	je     c001b708 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6f1:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b6f7:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b6f9:	52                   	push   edx
c001b6fa:	50                   	push   eax
c001b6fb:	51                   	push   ecx
c001b6fc:	53                   	push   ebx
c001b6fd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b700:	83 c4 10             	add    esp,0x10
c001b703:	99                   	cdq    
c001b704:	59                   	pop    ecx
c001b705:	5b                   	pop    ebx
c001b706:	5e                   	pop    esi
c001b707:	c3                   	ret    
c001b708:	59                   	pop    ecx
c001b709:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b70e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b713:	5b                   	pop    ebx
c001b714:	5e                   	pop    esi
c001b715:	c3                   	ret    

c001b716 <sysGetDiskVolumeLabel(regs*)>:
c001b716:	57                   	push   edi
c001b717:	56                   	push   esi
c001b718:	53                   	push   ebx
c001b719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b71d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b720:	83 fa 19             	cmp    edx,0x19
c001b723:	77 34                	ja     c001b759 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b725:	8b 0c 95 e0 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1420]
c001b72c:	85 c9                	test   ecx,ecx
c001b72e:	74 29                	je     c001b759 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b730:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b733:	85 db                	test   ebx,ebx
c001b735:	74 22                	je     c001b759 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b737:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b73a:	85 c0                	test   eax,eax
c001b73c:	74 1b                	je     c001b759 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b73e:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b744:	83 ec 0c             	sub    esp,0xc
c001b747:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b749:	50                   	push   eax
c001b74a:	53                   	push   ebx
c001b74b:	52                   	push   edx
c001b74c:	51                   	push   ecx
c001b74d:	56                   	push   esi
c001b74e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b751:	83 c4 20             	add    esp,0x20
c001b754:	99                   	cdq    
c001b755:	5b                   	pop    ebx
c001b756:	5e                   	pop    esi
c001b757:	5f                   	pop    edi
c001b758:	c3                   	ret    
c001b759:	5b                   	pop    ebx
c001b75a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b75f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b764:	5e                   	pop    esi
c001b765:	5f                   	pop    edi
c001b766:	c3                   	ret    

c001b767 <sysShutdown(regs*)>:
c001b767:	83 ec 0c             	sub    esp,0xc
c001b76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b76e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b771:	85 c0                	test   eax,eax
c001b773:	74 18                	je     c001b78d <sysShutdown(regs*)+0x26>
c001b775:	83 f8 01             	cmp    eax,0x1
c001b778:	74 38                	je     c001b7b2 <sysShutdown(regs*)+0x4b>
c001b77a:	83 f8 02             	cmp    eax,0x2
c001b77d:	74 24                	je     c001b7a3 <sysShutdown(regs*)+0x3c>
c001b77f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b784:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b789:	83 c4 0c             	add    esp,0xc
c001b78c:	c3                   	ret    
c001b78d:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b792:	8b 10                	mov    edx,DWORD PTR [eax]
c001b794:	6a 00                	push   0x0
c001b796:	6a 00                	push   0x0
c001b798:	6a 00                	push   0x0
c001b79a:	50                   	push   eax
c001b79b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b79e:	83 c4 10             	add    esp,0x10
c001b7a1:	eb dc                	jmp    c001b77f <sysShutdown(regs*)+0x18>
c001b7a3:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001b7a8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7aa:	6a 00                	push   0x0
c001b7ac:	6a 00                	push   0x0
c001b7ae:	6a 01                	push   0x1
c001b7b0:	eb e8                	jmp    c001b79a <sysShutdown(regs*)+0x33>
c001b7b2:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001b7b7:	85 c0                	test   eax,eax
c001b7b9:	74 02                	je     c001b7bd <sysShutdown(regs*)+0x56>
c001b7bb:	ff d0                	call   eax
c001b7bd:	31 c0                	xor    eax,eax
c001b7bf:	31 d2                	xor    edx,edx
c001b7c1:	83 c4 0c             	add    esp,0xc
c001b7c4:	c3                   	ret    

c001b7c5 <sysCallRealpath(regs*)>:
c001b7c5:	83 ec 0c             	sub    esp,0xc
c001b7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7cc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7cf:	85 d2                	test   edx,edx
c001b7d1:	74 07                	je     c001b7da <sysCallRealpath(regs*)+0x15>
c001b7d3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7d6:	85 c0                	test   eax,eax
c001b7d8:	75 0b                	jne    c001b7e5 <sysCallRealpath(regs*)+0x20>
c001b7da:	b8 01 00 00 00       	mov    eax,0x1
c001b7df:	31 d2                	xor    edx,edx
c001b7e1:	83 c4 0c             	add    esp,0xc
c001b7e4:	c3                   	ret    
c001b7e5:	51                   	push   ecx
c001b7e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7ec:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7ef:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b7f5:	51                   	push   ecx
c001b7f6:	52                   	push   edx
c001b7f7:	50                   	push   eax
c001b7f8:	e8 77 7a ff ff       	call   c0013274 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7fd:	83 c4 10             	add    esp,0x10
c001b800:	31 c0                	xor    eax,eax
c001b802:	31 d2                	xor    edx,edx
c001b804:	83 c4 0c             	add    esp,0xc
c001b807:	c3                   	ret    

c001b808 <sysCallGetArgc(regs*)>:
c001b808:	83 ec 14             	sub    esp,0x14
c001b80b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b810:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b813:	ff b0 36 19 00 00    	push   DWORD PTR [eax+0x1936]
c001b819:	68 68 bd 02 c0       	push   0xc002bd68
c001b81e:	e8 a3 76 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001b823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b828:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b82b:	8b 80 36 19 00 00    	mov    eax,DWORD PTR [eax+0x1936]
c001b831:	83 c4 1c             	add    esp,0x1c
c001b834:	99                   	cdq    
c001b835:	c3                   	ret    

c001b836 <sysCallReadDir(regs*)>:
c001b836:	53                   	push   ebx
c001b837:	83 ec 18             	sub    esp,0x18
c001b83a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b83e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b841:	83 f8 02             	cmp    eax,0x2
c001b844:	76 53                	jbe    c001b899 <sysCallReadDir(regs*)+0x63>
c001b846:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b849:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b84f:	77 4f                	ja     c001b8a0 <sysCallReadDir(regs*)+0x6a>
c001b851:	83 ec 0c             	sub    esp,0xc
c001b854:	50                   	push   eax
c001b855:	e8 cb 61 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b85a:	83 c4 10             	add    esp,0x10
c001b85d:	85 c0                	test   eax,eax
c001b85f:	74 50                	je     c001b8b1 <sysCallReadDir(regs*)+0x7b>
c001b861:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b869:	83 ec 0c             	sub    esp,0xc
c001b86c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b86e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b872:	51                   	push   ecx
c001b873:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b876:	6a 00                	push   0x0
c001b878:	68 10 01 00 00       	push   0x110
c001b87d:	50                   	push   eax
c001b87e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b881:	83 c4 20             	add    esp,0x20
c001b884:	85 c0                	test   eax,eax
c001b886:	74 38                	je     c001b8c0 <sysCallReadDir(regs*)+0x8a>
c001b888:	83 f8 07             	cmp    eax,0x7
c001b88b:	74 0c                	je     c001b899 <sysCallReadDir(regs*)+0x63>
c001b88d:	b8 02 00 00 00       	mov    eax,0x2
c001b892:	31 d2                	xor    edx,edx
c001b894:	83 c4 18             	add    esp,0x18
c001b897:	5b                   	pop    ebx
c001b898:	c3                   	ret    
c001b899:	b8 01 00 00 00       	mov    eax,0x1
c001b89e:	eb f2                	jmp    c001b892 <sysCallReadDir(regs*)+0x5c>
c001b8a0:	83 ec 08             	sub    esp,0x8
c001b8a3:	52                   	push   edx
c001b8a4:	68 80 be 02 c0       	push   0xc002be80
c001b8a9:	e8 18 76 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001b8ae:	83 c4 10             	add    esp,0x10
c001b8b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8bb:	83 c4 18             	add    esp,0x18
c001b8be:	5b                   	pop    ebx
c001b8bf:	c3                   	ret    
c001b8c0:	31 c0                	xor    eax,eax
c001b8c2:	eb ce                	jmp    c001b892 <sysCallReadDir(regs*)+0x5c>

c001b8c4 <sysCallIsATTY(regs*)>:
c001b8c4:	83 ec 0c             	sub    esp,0xc
c001b8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8ce:	83 f8 02             	cmp    eax,0x2
c001b8d1:	76 07                	jbe    c001b8da <sysCallIsATTY(regs*)+0x16>
c001b8d3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8d8:	75 26                	jne    c001b900 <sysCallIsATTY(regs*)+0x3c>
c001b8da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8e2:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001b8e8:	85 c0                	test   eax,eax
c001b8ea:	74 24                	je     c001b910 <sysCallIsATTY(regs*)+0x4c>
c001b8ec:	83 ec 0c             	sub    esp,0xc
c001b8ef:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8f1:	50                   	push   eax
c001b8f2:	ff 12                	call   DWORD PTR [edx]
c001b8f4:	31 d2                	xor    edx,edx
c001b8f6:	0f b6 c0             	movzx  eax,al
c001b8f9:	83 c4 10             	add    esp,0x10
c001b8fc:	83 c4 0c             	add    esp,0xc
c001b8ff:	c3                   	ret    
c001b900:	83 ec 0c             	sub    esp,0xc
c001b903:	50                   	push   eax
c001b904:	e8 1c 61 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b909:	83 c4 10             	add    esp,0x10
c001b90c:	85 c0                	test   eax,eax
c001b90e:	75 dc                	jne    c001b8ec <sysCallIsATTY(regs*)+0x28>
c001b910:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b915:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b91a:	83 c4 0c             	add    esp,0xc
c001b91d:	c3                   	ret    

c001b91e <sysCallSeek(regs*)>:
c001b91e:	53                   	push   ebx
c001b91f:	83 ec 08             	sub    esp,0x8
c001b922:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b926:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b929:	83 f8 02             	cmp    eax,0x2
c001b92c:	76 4a                	jbe    c001b978 <sysCallSeek(regs*)+0x5a>
c001b92e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b933:	77 32                	ja     c001b967 <sysCallSeek(regs*)+0x49>
c001b935:	83 ec 0c             	sub    esp,0xc
c001b938:	50                   	push   eax
c001b939:	e8 e7 60 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b93e:	83 c4 0c             	add    esp,0xc
c001b941:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b944:	31 db                	xor    ebx,ebx
c001b946:	53                   	push   ebx
c001b947:	51                   	push   ecx
c001b948:	50                   	push   eax
c001b949:	e8 f2 7b ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001b94e:	83 c4 10             	add    esp,0x10
c001b951:	85 c0                	test   eax,eax
c001b953:	0f 95 c0             	setne  al
c001b956:	31 d2                	xor    edx,edx
c001b958:	0f b6 c0             	movzx  eax,al
c001b95b:	f7 d8                	neg    eax
c001b95d:	83 d2 00             	adc    edx,0x0
c001b960:	83 c4 08             	add    esp,0x8
c001b963:	f7 da                	neg    edx
c001b965:	5b                   	pop    ebx
c001b966:	c3                   	ret    
c001b967:	83 ec 08             	sub    esp,0x8
c001b96a:	50                   	push   eax
c001b96b:	68 73 bd 02 c0       	push   0xc002bd73
c001b970:	e8 51 75 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001b975:	83 c4 10             	add    esp,0x10
c001b978:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b97d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b982:	83 c4 08             	add    esp,0x8
c001b985:	5b                   	pop    ebx
c001b986:	c3                   	ret    

c001b987 <sysCallTell(regs*)>:
c001b987:	53                   	push   ebx
c001b988:	83 ec 08             	sub    esp,0x8
c001b98b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b98f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b992:	83 f8 02             	cmp    eax,0x2
c001b995:	76 5e                	jbe    c001b9f5 <sysCallTell(regs*)+0x6e>
c001b997:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b99c:	77 2d                	ja     c001b9cb <sysCallTell(regs*)+0x44>
c001b99e:	83 ec 0c             	sub    esp,0xc
c001b9a1:	50                   	push   eax
c001b9a2:	e8 7e 60 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001b9a7:	5a                   	pop    edx
c001b9a8:	59                   	pop    ecx
c001b9a9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9ac:	50                   	push   eax
c001b9ad:	e8 e4 7b ff ff       	call   c0013596 <File::tell(unsigned long long*)>
c001b9b2:	83 c4 10             	add    esp,0x10
c001b9b5:	85 c0                	test   eax,eax
c001b9b7:	0f 95 c0             	setne  al
c001b9ba:	31 d2                	xor    edx,edx
c001b9bc:	0f b6 c0             	movzx  eax,al
c001b9bf:	f7 d8                	neg    eax
c001b9c1:	83 d2 00             	adc    edx,0x0
c001b9c4:	83 c4 08             	add    esp,0x8
c001b9c7:	f7 da                	neg    edx
c001b9c9:	5b                   	pop    ebx
c001b9ca:	c3                   	ret    
c001b9cb:	83 ec 08             	sub    esp,0x8
c001b9ce:	50                   	push   eax
c001b9cf:	68 8d bd 02 c0       	push   0xc002bd8d
c001b9d4:	e8 ed 74 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001b9d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9dc:	83 c4 10             	add    esp,0x10
c001b9df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9ec:	31 d2                	xor    edx,edx
c001b9ee:	31 c0                	xor    eax,eax
c001b9f0:	83 c4 08             	add    esp,0x8
c001b9f3:	5b                   	pop    ebx
c001b9f4:	c3                   	ret    
c001b9f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ff:	83 c4 08             	add    esp,0x8
c001ba02:	5b                   	pop    ebx
c001ba03:	c3                   	ret    

c001ba04 <sysCallSize(regs*)>:
c001ba04:	53                   	push   ebx
c001ba05:	83 ec 18             	sub    esp,0x18
c001ba08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba0c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba0f:	83 f8 02             	cmp    eax,0x2
c001ba12:	76 64                	jbe    c001ba78 <sysCallSize(regs*)+0x74>
c001ba14:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba19:	77 33                	ja     c001ba4e <sysCallSize(regs*)+0x4a>
c001ba1b:	83 ec 0c             	sub    esp,0xc
c001ba1e:	50                   	push   eax
c001ba1f:	e8 01 60 ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001ba24:	83 c4 0c             	add    esp,0xc
c001ba27:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba2b:	52                   	push   edx
c001ba2c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba2f:	50                   	push   eax
c001ba30:	e8 f9 7c ff ff       	call   c001372e <File::stat(unsigned long long*, bool*)>
c001ba35:	83 c4 10             	add    esp,0x10
c001ba38:	85 c0                	test   eax,eax
c001ba3a:	0f 95 c0             	setne  al
c001ba3d:	31 d2                	xor    edx,edx
c001ba3f:	0f b6 c0             	movzx  eax,al
c001ba42:	f7 d8                	neg    eax
c001ba44:	83 d2 00             	adc    edx,0x0
c001ba47:	83 c4 18             	add    esp,0x18
c001ba4a:	f7 da                	neg    edx
c001ba4c:	5b                   	pop    ebx
c001ba4d:	c3                   	ret    
c001ba4e:	83 ec 08             	sub    esp,0x8
c001ba51:	50                   	push   eax
c001ba52:	68 a7 bd 02 c0       	push   0xc002bda7
c001ba57:	e8 6a 74 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001ba5c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba5f:	83 c4 10             	add    esp,0x10
c001ba62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba6f:	31 d2                	xor    edx,edx
c001ba71:	31 c0                	xor    eax,eax
c001ba73:	83 c4 18             	add    esp,0x18
c001ba76:	5b                   	pop    ebx
c001ba77:	c3                   	ret    
c001ba78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba7d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba82:	83 c4 18             	add    esp,0x18
c001ba85:	5b                   	pop    ebx
c001ba86:	c3                   	ret    

c001ba87 <sysCallSizeFromFilename(regs*)>:
c001ba87:	57                   	push   edi
c001ba88:	56                   	push   esi
c001ba89:	53                   	push   ebx
c001ba8a:	83 ec 20             	sub    esp,0x20
c001ba8d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba91:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba94:	83 fb 02             	cmp    ebx,0x2
c001ba97:	0f 86 99 00 00 00    	jbe    c001bb36 <sysCallSizeFromFilename(regs*)+0xaf>
c001ba9d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001baa3:	77 65                	ja     c001bb0a <sysCallSizeFromFilename(regs*)+0x83>
c001baa5:	83 ec 0c             	sub    esp,0xc
c001baa8:	68 14 01 00 00       	push   0x114
c001baad:	e8 91 3d ff ff       	call   c000f843 <malloc>
c001bab2:	83 c4 0c             	add    esp,0xc
c001bab5:	89 c6                	mov    esi,eax
c001bab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001babc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001babf:	53                   	push   ebx
c001bac0:	56                   	push   esi
c001bac1:	e8 58 79 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001bac6:	83 c4 0c             	add    esp,0xc
c001bac9:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bacd:	50                   	push   eax
c001bace:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bad1:	56                   	push   esi
c001bad2:	e8 57 7c ff ff       	call   c001372e <File::stat(unsigned long long*, bool*)>
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	85 f6                	test   esi,esi
c001badc:	74 14                	je     c001baf2 <sysCallSizeFromFilename(regs*)+0x6b>
c001bade:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bae2:	8b 16                	mov    edx,DWORD PTR [esi]
c001bae4:	83 ec 0c             	sub    esp,0xc
c001bae7:	56                   	push   esi
c001bae8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baeb:	83 c4 10             	add    esp,0x10
c001baee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baf2:	85 c0                	test   eax,eax
c001baf4:	0f 95 c0             	setne  al
c001baf7:	31 d2                	xor    edx,edx
c001baf9:	0f b6 c0             	movzx  eax,al
c001bafc:	f7 d8                	neg    eax
c001bafe:	83 d2 00             	adc    edx,0x0
c001bb01:	83 c4 20             	add    esp,0x20
c001bb04:	f7 da                	neg    edx
c001bb06:	5b                   	pop    ebx
c001bb07:	5e                   	pop    esi
c001bb08:	5f                   	pop    edi
c001bb09:	c3                   	ret    
c001bb0a:	83 ec 08             	sub    esp,0x8
c001bb0d:	53                   	push   ebx
c001bb0e:	68 a7 bd 02 c0       	push   0xc002bda7
c001bb13:	e8 ae 73 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001bb18:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb1b:	83 c4 10             	add    esp,0x10
c001bb1e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb2b:	31 d2                	xor    edx,edx
c001bb2d:	83 c4 20             	add    esp,0x20
c001bb30:	31 c0                	xor    eax,eax
c001bb32:	5b                   	pop    ebx
c001bb33:	5e                   	pop    esi
c001bb34:	5f                   	pop    edi
c001bb35:	c3                   	ret    
c001bb36:	83 c4 20             	add    esp,0x20
c001bb39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb3e:	5b                   	pop    ebx
c001bb3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb44:	5e                   	pop    esi
c001bb45:	5f                   	pop    edi
c001bb46:	c3                   	ret    

c001bb47 <sysCallClose(regs*)>:
c001bb47:	53                   	push   ebx
c001bb48:	83 ec 08             	sub    esp,0x8
c001bb4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb52:	83 f8 02             	cmp    eax,0x2
c001bb55:	76 50                	jbe    c001bba7 <sysCallClose(regs*)+0x60>
c001bb57:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb5c:	74 58                	je     c001bbb6 <sysCallClose(regs*)+0x6f>
c001bb5e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb63:	74 60                	je     c001bbc5 <sysCallClose(regs*)+0x7e>
c001bb65:	77 2f                	ja     c001bb96 <sysCallClose(regs*)+0x4f>
c001bb67:	83 ec 0c             	sub    esp,0xc
c001bb6a:	50                   	push   eax
c001bb6b:	e8 b5 5e ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001bb70:	89 c3                	mov    ebx,eax
c001bb72:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb75:	e8 66 79 ff ff       	call   c00134e0 <File::close()>
c001bb7a:	83 c4 10             	add    esp,0x10
c001bb7d:	85 db                	test   ebx,ebx
c001bb7f:	74 0c                	je     c001bb8d <sysCallClose(regs*)+0x46>
c001bb81:	83 ec 0c             	sub    esp,0xc
c001bb84:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb86:	53                   	push   ebx
c001bb87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb8a:	83 c4 10             	add    esp,0x10
c001bb8d:	31 c0                	xor    eax,eax
c001bb8f:	31 d2                	xor    edx,edx
c001bb91:	83 c4 08             	add    esp,0x8
c001bb94:	5b                   	pop    ebx
c001bb95:	c3                   	ret    
c001bb96:	83 ec 08             	sub    esp,0x8
c001bb99:	50                   	push   eax
c001bb9a:	68 a4 be 02 c0       	push   0xc002bea4
c001bb9f:	e8 22 73 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001bba4:	83 c4 10             	add    esp,0x10
c001bba7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbb1:	83 c4 08             	add    esp,0x8
c001bbb4:	5b                   	pop    ebx
c001bbb5:	c3                   	ret    
c001bbb6:	83 ec 0c             	sub    esp,0xc
c001bbb9:	68 c2 bd 02 c0       	push   0xc002bdc2
c001bbbe:	e8 03 73 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001bbc3:	eb c5                	jmp    c001bb8a <sysCallClose(regs*)+0x43>
c001bbc5:	83 ec 0c             	sub    esp,0xc
c001bbc8:	68 d0 bd 02 c0       	push   0xc002bdd0
c001bbcd:	eb ef                	jmp    c001bbbe <sysCallClose(regs*)+0x77>

c001bbcf <sysCallOpenDir(regs*)>:
c001bbcf:	56                   	push   esi
c001bbd0:	53                   	push   ebx
c001bbd1:	53                   	push   ebx
c001bbd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbd6:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bbd9:	85 f6                	test   esi,esi
c001bbdb:	74 59                	je     c001bc36 <sysCallOpenDir(regs*)+0x67>
c001bbdd:	83 ec 0c             	sub    esp,0xc
c001bbe0:	68 14 01 00 00       	push   0x114
c001bbe5:	e8 59 3c ff ff       	call   c000f843 <malloc>
c001bbea:	83 c4 0c             	add    esp,0xc
c001bbed:	89 c6                	mov    esi,eax
c001bbef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbf4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbf7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbfa:	56                   	push   esi
c001bbfb:	e8 ca 7c ff ff       	call   c00138ca <Directory::Directory(char const*, Process*)>
c001bc00:	83 c4 10             	add    esp,0x10
c001bc03:	85 f6                	test   esi,esi
c001bc05:	74 2f                	je     c001bc36 <sysCallOpenDir(regs*)+0x67>
c001bc07:	83 ec 0c             	sub    esp,0xc
c001bc0a:	56                   	push   esi
c001bc0b:	e8 1e 7d ff ff       	call   c001392e <Directory::open()>
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	85 c0                	test   eax,eax
c001bc15:	75 1f                	jne    c001bc36 <sysCallOpenDir(regs*)+0x67>
c001bc17:	83 ec 0c             	sub    esp,0xc
c001bc1a:	56                   	push   esi
c001bc1b:	e8 10 5b ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001bc20:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc23:	83 c4 10             	add    esp,0x10
c001bc26:	89 02                	mov    DWORD PTR [edx],eax
c001bc28:	c1 f8 1f             	sar    eax,0x1f
c001bc2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc2e:	31 c0                	xor    eax,eax
c001bc30:	59                   	pop    ecx
c001bc31:	31 d2                	xor    edx,edx
c001bc33:	5b                   	pop    ebx
c001bc34:	5e                   	pop    esi
c001bc35:	c3                   	ret    
c001bc36:	59                   	pop    ecx
c001bc37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc41:	5b                   	pop    ebx
c001bc42:	5e                   	pop    esi
c001bc43:	c3                   	ret    

c001bc44 <sysCallCloseDir(regs*)>:
c001bc44:	53                   	push   ebx
c001bc45:	83 ec 08             	sub    esp,0x8
c001bc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc4f:	83 f8 02             	cmp    eax,0x2
c001bc52:	76 47                	jbe    c001bc9b <sysCallCloseDir(regs*)+0x57>
c001bc54:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc59:	77 2f                	ja     c001bc8a <sysCallCloseDir(regs*)+0x46>
c001bc5b:	83 ec 0c             	sub    esp,0xc
c001bc5e:	50                   	push   eax
c001bc5f:	e8 c1 5d ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001bc64:	89 c3                	mov    ebx,eax
c001bc66:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc69:	e8 1c 7d ff ff       	call   c001398a <Directory::close()>
c001bc6e:	83 c4 10             	add    esp,0x10
c001bc71:	85 db                	test   ebx,ebx
c001bc73:	74 0c                	je     c001bc81 <sysCallCloseDir(regs*)+0x3d>
c001bc75:	83 ec 0c             	sub    esp,0xc
c001bc78:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc7a:	53                   	push   ebx
c001bc7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	31 c0                	xor    eax,eax
c001bc83:	31 d2                	xor    edx,edx
c001bc85:	83 c4 08             	add    esp,0x8
c001bc88:	5b                   	pop    ebx
c001bc89:	c3                   	ret    
c001bc8a:	83 ec 08             	sub    esp,0x8
c001bc8d:	50                   	push   eax
c001bc8e:	68 cc be 02 c0       	push   0xc002becc
c001bc93:	e8 2e 72 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001bc98:	83 c4 10             	add    esp,0x10
c001bc9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bca0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bca5:	83 c4 08             	add    esp,0x8
c001bca8:	5b                   	pop    ebx
c001bca9:	c3                   	ret    

c001bcaa <sysCallMakeDir(regs*)>:
c001bcaa:	56                   	push   esi
c001bcab:	53                   	push   ebx
c001bcac:	83 ec 10             	sub    esp,0x10
c001bcaf:	68 14 01 00 00       	push   0x114
c001bcb4:	e8 8a 3b ff ff       	call   c000f843 <malloc>
c001bcb9:	83 c4 0c             	add    esp,0xc
c001bcbc:	89 c3                	mov    ebx,eax
c001bcbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcc3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcca:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bccd:	53                   	push   ebx
c001bcce:	e8 f7 7b ff ff       	call   c00138ca <Directory::Directory(char const*, Process*)>
c001bcd3:	83 c4 10             	add    esp,0x10
c001bcd6:	85 db                	test   ebx,ebx
c001bcd8:	74 32                	je     c001bd0c <sysCallMakeDir(regs*)+0x62>
c001bcda:	83 ec 0c             	sub    esp,0xc
c001bcdd:	53                   	push   ebx
c001bcde:	e8 2b 7e ff ff       	call   c0013b0e <Directory::create()>
c001bce3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bce6:	89 c6                	mov    esi,eax
c001bce8:	e8 9d 7c ff ff       	call   c001398a <Directory::close()>
c001bced:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcf5:	83 c4 10             	add    esp,0x10
c001bcf8:	31 c0                	xor    eax,eax
c001bcfa:	59                   	pop    ecx
c001bcfb:	85 f6                	test   esi,esi
c001bcfd:	5b                   	pop    ebx
c001bcfe:	0f 95 c0             	setne  al
c001bd01:	5e                   	pop    esi
c001bd02:	31 d2                	xor    edx,edx
c001bd04:	f7 d8                	neg    eax
c001bd06:	83 d2 00             	adc    edx,0x0
c001bd09:	f7 da                	neg    edx
c001bd0b:	c3                   	ret    
c001bd0c:	59                   	pop    ecx
c001bd0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd12:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd17:	5b                   	pop    ebx
c001bd18:	5e                   	pop    esi
c001bd19:	c3                   	ret    

c001bd1a <sysCallWait(regs*)>:
c001bd1a:	83 ec 10             	sub    esp,0x10
c001bd1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd21:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd24:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd27:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd2a:	e8 ec 24 00 00       	call   c001e21b <waitTask(int, int*, int)>
c001bd2f:	83 c4 1c             	add    esp,0x1c
c001bd32:	99                   	cdq    
c001bd33:	c3                   	ret    

c001bd34 <sysCallNotImpl(regs*)>:
c001bd34:	83 ec 18             	sub    esp,0x18
c001bd37:	68 de bd 02 c0       	push   0xc002bdde
c001bd3c:	e8 2a e8 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001bd41:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd46:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd4b:	83 c4 1c             	add    esp,0x1c
c001bd4e:	c3                   	ret    

c001bd4f <sysPanic(regs*)>:
c001bd4f:	83 ec 18             	sub    esp,0x18
c001bd52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd56:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd59:	e8 0d e8 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001bd5e:	c7 04 24 f8 bd 02 c0 	mov    DWORD PTR [esp],0xc002bdf8
c001bd65:	e8 01 e8 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001bd6a:	b8 01 00 00 00       	mov    eax,0x1
c001bd6f:	31 d2                	xor    edx,edx
c001bd71:	83 c4 1c             	add    esp,0x1c
c001bd74:	c3                   	ret    

c001bd75 <sysCallRmdir(regs*)>:
c001bd75:	56                   	push   esi
c001bd76:	53                   	push   ebx
c001bd77:	83 ec 20             	sub    esp,0x20
c001bd7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd7e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd81:	68 14 01 00 00       	push   0x114
c001bd86:	e8 b8 3a ff ff       	call   c000f843 <malloc>
c001bd8b:	83 c4 0c             	add    esp,0xc
c001bd8e:	89 c3                	mov    ebx,eax
c001bd90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd95:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd98:	56                   	push   esi
c001bd99:	53                   	push   ebx
c001bd9a:	e8 7f 76 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001bd9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bda2:	e8 53 78 ff ff       	call   c00135fa <File::unlink()>
c001bda7:	83 c4 10             	add    esp,0x10
c001bdaa:	85 db                	test   ebx,ebx
c001bdac:	74 14                	je     c001bdc2 <sysCallRmdir(regs*)+0x4d>
c001bdae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdb2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdb4:	83 ec 0c             	sub    esp,0xc
c001bdb7:	53                   	push   ebx
c001bdb8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdbb:	83 c4 10             	add    esp,0x10
c001bdbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdc2:	85 c0                	test   eax,eax
c001bdc4:	0f 95 c0             	setne  al
c001bdc7:	31 d2                	xor    edx,edx
c001bdc9:	0f b6 c0             	movzx  eax,al
c001bdcc:	f7 d8                	neg    eax
c001bdce:	83 d2 00             	adc    edx,0x0
c001bdd1:	83 c4 14             	add    esp,0x14
c001bdd4:	f7 da                	neg    edx
c001bdd6:	5b                   	pop    ebx
c001bdd7:	5e                   	pop    esi
c001bdd8:	c3                   	ret    

c001bdd9 <sysCallUnlink(regs*)>:
c001bdd9:	56                   	push   esi
c001bdda:	53                   	push   ebx
c001bddb:	83 ec 20             	sub    esp,0x20
c001bdde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bde2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bde5:	68 14 01 00 00       	push   0x114
c001bdea:	e8 54 3a ff ff       	call   c000f843 <malloc>
c001bdef:	83 c4 0c             	add    esp,0xc
c001bdf2:	89 c3                	mov    ebx,eax
c001bdf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdf9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdfc:	56                   	push   esi
c001bdfd:	53                   	push   ebx
c001bdfe:	e8 1b 76 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001be03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be06:	e8 ef 77 ff ff       	call   c00135fa <File::unlink()>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	85 db                	test   ebx,ebx
c001be10:	74 14                	je     c001be26 <sysCallUnlink(regs*)+0x4d>
c001be12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be16:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be18:	83 ec 0c             	sub    esp,0xc
c001be1b:	53                   	push   ebx
c001be1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be1f:	83 c4 10             	add    esp,0x10
c001be22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be26:	85 c0                	test   eax,eax
c001be28:	0f 95 c0             	setne  al
c001be2b:	31 d2                	xor    edx,edx
c001be2d:	0f b6 c0             	movzx  eax,al
c001be30:	f7 d8                	neg    eax
c001be32:	83 d2 00             	adc    edx,0x0
c001be35:	83 c4 14             	add    esp,0x14
c001be38:	f7 da                	neg    edx
c001be3a:	5b                   	pop    ebx
c001be3b:	5e                   	pop    esi
c001be3c:	c3                   	ret    

c001be3d <sysCallGetArgv(regs*)>:
c001be3d:	83 ec 0c             	sub    esp,0xc
c001be40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be44:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be47:	85 c0                	test   eax,eax
c001be49:	78 2b                	js     c001be76 <sysCallGetArgv(regs*)+0x39>
c001be4b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be51:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be54:	3b 81 36 19 00 00    	cmp    eax,DWORD PTR [ecx+0x1936]
c001be5a:	7d 1a                	jge    c001be76 <sysCallGetArgv(regs*)+0x39>
c001be5c:	8b 84 81 3a 19 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x193a]
c001be63:	85 c0                	test   eax,eax
c001be65:	74 17                	je     c001be7e <sysCallGetArgv(regs*)+0x41>
c001be67:	83 ec 08             	sub    esp,0x8
c001be6a:	50                   	push   eax
c001be6b:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be6e:	e8 c1 49 fe ff       	call   c0000834 <strcpy>
c001be73:	83 c4 10             	add    esp,0x10
c001be76:	31 c0                	xor    eax,eax
c001be78:	31 d2                	xor    edx,edx
c001be7a:	83 c4 0c             	add    esp,0xc
c001be7d:	c3                   	ret    
c001be7e:	b8 01 00 00 00       	mov    eax,0x1
c001be83:	31 d2                	xor    edx,edx
c001be85:	83 c4 0c             	add    esp,0xc
c001be88:	c3                   	ret    

c001be89 <sysCallTTYName(regs*)>:
c001be89:	56                   	push   esi
c001be8a:	53                   	push   ebx
c001be8b:	53                   	push   ebx
c001be8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be90:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be93:	85 c0                	test   eax,eax
c001be95:	74 5f                	je     c001bef6 <sysCallTTYName(regs*)+0x6d>
c001be97:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be9a:	83 f8 02             	cmp    eax,0x2
c001be9d:	77 3e                	ja     c001bedd <sysCallTTYName(regs*)+0x54>
c001be9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bea4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bea7:	8b 98 26 19 00 00    	mov    ebx,DWORD PTR [eax+0x1926]
c001bead:	85 db                	test   ebx,ebx
c001beaf:	74 45                	je     c001bef6 <sysCallTTYName(regs*)+0x6d>
c001beb1:	83 ec 0c             	sub    esp,0xc
c001beb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001beb6:	53                   	push   ebx
c001beb7:	ff 10                	call   DWORD PTR [eax]
c001beb9:	83 c4 10             	add    esp,0x10
c001bebc:	84 c0                	test   al,al
c001bebe:	74 41                	je     c001bf01 <sysCallTTYName(regs*)+0x78>
c001bec0:	83 ec 08             	sub    esp,0x8
c001bec3:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bec9:	53                   	push   ebx
c001beca:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001becd:	e8 62 49 fe ff       	call   c0000834 <strcpy>
c001bed2:	83 c4 10             	add    esp,0x10
c001bed5:	31 c0                	xor    eax,eax
c001bed7:	59                   	pop    ecx
c001bed8:	31 d2                	xor    edx,edx
c001beda:	5b                   	pop    ebx
c001bedb:	5e                   	pop    esi
c001bedc:	c3                   	ret    
c001bedd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bee2:	74 bb                	je     c001be9f <sysCallTTYName(regs*)+0x16>
c001bee4:	83 ec 0c             	sub    esp,0xc
c001bee7:	50                   	push   eax
c001bee8:	e8 38 5b ff ff       	call   c0011a25 <getFromFileDescriptor(int)>
c001beed:	83 c4 10             	add    esp,0x10
c001bef0:	89 c3                	mov    ebx,eax
c001bef2:	85 db                	test   ebx,ebx
c001bef4:	75 bb                	jne    c001beb1 <sysCallTTYName(regs*)+0x28>
c001bef6:	59                   	pop    ecx
c001bef7:	b8 01 00 00 00       	mov    eax,0x1
c001befc:	31 d2                	xor    edx,edx
c001befe:	5b                   	pop    ebx
c001beff:	5e                   	pop    esi
c001bf00:	c3                   	ret    
c001bf01:	59                   	pop    ecx
c001bf02:	b8 02 00 00 00       	mov    eax,0x2
c001bf07:	31 d2                	xor    edx,edx
c001bf09:	5b                   	pop    ebx
c001bf0a:	5e                   	pop    esi
c001bf0b:	c3                   	ret    

c001bf0c <sysCallUSleep(regs*)>:
c001bf0c:	83 ec 14             	sub    esp,0x14
c001bf0f:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf18:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf1f:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf22:	01 ca                	add    edx,ecx
c001bf24:	52                   	push   edx
c001bf25:	50                   	push   eax
c001bf26:	e8 89 23 00 00       	call   c001e2b4 <nanoSleep(unsigned long long)>
c001bf2b:	31 c0                	xor    eax,eax
c001bf2d:	31 d2                	xor    edx,edx
c001bf2f:	83 c4 1c             	add    esp,0x1c
c001bf32:	c3                   	ret    

c001bf33 <sysCallSpawn(regs*)>:
c001bf33:	56                   	push   esi
c001bf34:	53                   	push   ebx
c001bf35:	53                   	push   ebx
c001bf36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf3a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bf3d:	85 f6                	test   esi,esi
c001bf3f:	75 08                	jne    c001bf49 <sysCallSpawn(regs*)+0x16>
c001bf41:	59                   	pop    ecx
c001bf42:	31 c0                	xor    eax,eax
c001bf44:	31 d2                	xor    edx,edx
c001bf46:	5b                   	pop    ebx
c001bf47:	5e                   	pop    esi
c001bf48:	c3                   	ret    
c001bf49:	83 ec 0c             	sub    esp,0xc
c001bf4c:	68 3f 1b 00 00       	push   0x1b3f
c001bf51:	e8 ed 38 ff ff       	call   c000f843 <malloc>
c001bf56:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf59:	89 c6                	mov    esi,eax
c001bf5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf60:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf63:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf66:	56                   	push   esi
c001bf67:	e8 44 1a 00 00       	call   c001d9b0 <Process::Process(char const*, Process*, char**)>
c001bf6c:	83 c4 20             	add    esp,0x20
c001bf6f:	80 be 3e 1b 00 00 00 	cmp    BYTE PTR [esi+0x1b3e],0x0
c001bf76:	75 c9                	jne    c001bf41 <sysCallSpawn(regs*)+0xe>
c001bf78:	83 ec 0c             	sub    esp,0xc
c001bf7b:	56                   	push   esi
c001bf7c:	e8 f9 1f 00 00       	call   c001df7a <Process::createUserThread()>
c001bf81:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf83:	83 c4 10             	add    esp,0x10
c001bf86:	99                   	cdq    
c001bf87:	59                   	pop    ecx
c001bf88:	5b                   	pop    ebx
c001bf89:	5e                   	pop    esi
c001bf8a:	c3                   	ret    

c001bf8b <sysCallGetEnv(regs*)>:
c001bf8b:	55                   	push   ebp
c001bf8c:	57                   	push   edi
c001bf8d:	56                   	push   esi
c001bf8e:	53                   	push   ebx
c001bf8f:	83 ec 28             	sub    esp,0x28
c001bf92:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bf96:	68 07 be 02 c0       	push   0xc002be07
c001bf9b:	e8 26 6f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001bfa0:	5f                   	pop    edi
c001bfa1:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfa4:	5d                   	pop    ebp
c001bfa5:	53                   	push   ebx
c001bfa6:	68 4d c1 02 c0       	push   0xc002c14d
c001bfab:	e8 16 6f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001bfb0:	58                   	pop    eax
c001bfb1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bfb4:	5a                   	pop    edx
c001bfb5:	57                   	push   edi
c001bfb6:	68 10 be 02 c0       	push   0xc002be10
c001bfbb:	e8 06 6f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001bfc0:	59                   	pop    ecx
c001bfc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfc6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfc9:	e8 b9 e4 ff ff       	call   c001a487 <Krnl::getProcessTotalEnvCount(Process*)>
c001bfce:	5a                   	pop    edx
c001bfcf:	89 c5                	mov    ebp,eax
c001bfd1:	59                   	pop    ecx
c001bfd2:	50                   	push   eax
c001bfd3:	68 1a be 02 c0       	push   0xc002be1a
c001bfd8:	e8 e9 6e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001bfdd:	83 c4 10             	add    esp,0x10
c001bfe0:	39 ef                	cmp    edi,ebp
c001bfe2:	7c 15                	jl     c001bff9 <sysCallGetEnv(regs*)+0x6e>
c001bfe4:	85 db                	test   ebx,ebx
c001bfe6:	75 0c                	jne    c001bff4 <sysCallGetEnv(regs*)+0x69>
c001bfe8:	83 c4 1c             	add    esp,0x1c
c001bfeb:	31 c0                	xor    eax,eax
c001bfed:	5b                   	pop    ebx
c001bfee:	31 d2                	xor    edx,edx
c001bff0:	5e                   	pop    esi
c001bff1:	5f                   	pop    edi
c001bff2:	5d                   	pop    ebp
c001bff3:	c3                   	ret    
c001bff4:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bff7:	eb ef                	jmp    c001bfe8 <sysCallGetEnv(regs*)+0x5d>
c001bff9:	83 ec 0c             	sub    esp,0xc
c001bffc:	68 26 be 02 c0       	push   0xc002be26
c001c001:	e8 c0 6e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c006:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c00a:	83 c4 0c             	add    esp,0xc
c001c00d:	57                   	push   edi
c001c00e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c014:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c017:	50                   	push   eax
c001c018:	e8 8a e4 ff ff       	call   c001a4a7 <Krnl::getProcessEnvPair(Process*, int)>
c001c01d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c021:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c025:	68 cc c1 02 c0       	push   0xc002c1cc
c001c02a:	e8 97 6e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c02f:	83 c4 10             	add    esp,0x10
c001c032:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c035:	85 f6                	test   esi,esi
c001c037:	75 47                	jne    c001c080 <sysCallGetEnv(regs*)+0xf5>
c001c039:	83 ec 0c             	sub    esp,0xc
c001c03c:	55                   	push   ebp
c001c03d:	e8 52 47 fe ff       	call   c0000794 <strlen>
c001c042:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c045:	89 c3                	mov    ebx,eax
c001c047:	e8 48 47 fe ff       	call   c0000794 <strlen>
c001c04c:	5a                   	pop    edx
c001c04d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c051:	59                   	pop    ecx
c001c052:	50                   	push   eax
c001c053:	68 29 be 02 c0       	push   0xc002be29
c001c058:	e8 69 6e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c05d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c060:	e8 2f 47 fe ff       	call   c0000794 <strlen>
c001c065:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c068:	89 c3                	mov    ebx,eax
c001c06a:	e8 25 47 fe ff       	call   c0000794 <strlen>
c001c06f:	83 c4 10             	add    esp,0x10
c001c072:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c076:	83 c4 1c             	add    esp,0x1c
c001c079:	31 d2                	xor    edx,edx
c001c07b:	5b                   	pop    ebx
c001c07c:	5e                   	pop    esi
c001c07d:	5f                   	pop    edi
c001c07e:	5d                   	pop    ebp
c001c07f:	c3                   	ret    
c001c080:	83 ec 0c             	sub    esp,0xc
c001c083:	68 e6 c1 02 c0       	push   0xc002c1e6
c001c088:	e8 39 6e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c08d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c090:	58                   	pop    eax
c001c091:	5a                   	pop    edx
c001c092:	55                   	push   ebp
c001c093:	53                   	push   ebx
c001c094:	e8 9b 47 fe ff       	call   c0000834 <strcpy>
c001c099:	59                   	pop    ecx
c001c09a:	5e                   	pop    esi
c001c09b:	68 33 be 02 c0       	push   0xc002be33
c001c0a0:	53                   	push   ebx
c001c0a1:	e8 ce 48 fe ff       	call   c0000974 <strcat>
c001c0a6:	5d                   	pop    ebp
c001c0a7:	58                   	pop    eax
c001c0a8:	57                   	push   edi
c001c0a9:	53                   	push   ebx
c001c0aa:	e8 c5 48 fe ff       	call   c0000974 <strcat>
c001c0af:	c7 04 24 00 c2 02 c0 	mov    DWORD PTR [esp],0xc002c200
c001c0b6:	e8 0b 6e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c0bb:	83 c4 10             	add    esp,0x10
c001c0be:	e9 25 ff ff ff       	jmp    c001bfe8 <sysCallGetEnv(regs*)+0x5d>

c001c0c3 <sysAppSettings(regs*)>:
c001c0c3:	53                   	push   ebx
c001c0c4:	83 ec 08             	sub    esp,0x8
c001c0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0cb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c0ce:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c0d4:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c0d9:	66 3d c0 09          	cmp    ax,0x9c0
c001c0dd:	75 2f                	jne    c001c10e <sysAppSettings(regs*)+0x4b>
c001c0df:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c0e5:	83 e0 1f             	and    eax,0x1f
c001c0e8:	3c 01                	cmp    al,0x1
c001c0ea:	74 2e                	je     c001c11a <sysAppSettings(regs*)+0x57>
c001c0ec:	3c 07                	cmp    al,0x7
c001c0ee:	0f 84 bd 00 00 00    	je     c001c1b1 <sysAppSettings(regs*)+0xee>
c001c0f4:	84 c0                	test   al,al
c001c0f6:	0f 84 dc 00 00 00    	je     c001c1d8 <sysAppSettings(regs*)+0x115>
c001c0fc:	3c 08                	cmp    al,0x8
c001c0fe:	74 6d                	je     c001c16d <sysAppSettings(regs*)+0xaa>
c001c100:	0f b6 c0             	movzx  eax,al
c001c103:	83 c4 08             	add    esp,0x8
c001c106:	05 e8 03 00 00       	add    eax,0x3e8
c001c10b:	5b                   	pop    ebx
c001c10c:	99                   	cdq    
c001c10d:	c3                   	ret    
c001c10e:	b8 01 00 00 00       	mov    eax,0x1
c001c113:	31 d2                	xor    edx,edx
c001c115:	83 c4 08             	add    esp,0x8
c001c118:	5b                   	pop    ebx
c001c119:	c3                   	ret    
c001c11a:	51                   	push   ecx
c001c11b:	68 00 01 00 00       	push   0x100
c001c120:	6a 00                	push   0x0
c001c122:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c127:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c12a:	83 c0 0c             	add    eax,0xc
c001c12d:	50                   	push   eax
c001c12e:	e8 45 46 fe ff       	call   c0000778 <memset>
c001c133:	83 c4 0c             	add    esp,0xc
c001c136:	68 ff 00 00 00       	push   0xff
c001c13b:	53                   	push   ebx
c001c13c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c141:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c144:	83 c0 0c             	add    eax,0xc
c001c147:	50                   	push   eax
c001c148:	e8 f7 45 fe ff       	call   c0000744 <memcpy>
c001c14d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c152:	5b                   	pop    ebx
c001c153:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c156:	5a                   	pop    edx
c001c157:	8d 50 0c             	lea    edx,[eax+0xc]
c001c15a:	52                   	push   edx
c001c15b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c161:	e8 3a 4a ff ff       	call   c0010ba0 <VgaText::setTitle(char*)>
c001c166:	83 c4 10             	add    esp,0x10
c001c169:	31 c0                	xor    eax,eax
c001c16b:	eb a6                	jmp    c001c113 <sysAppSettings(regs*)+0x50>
c001c16d:	83 ec 08             	sub    esp,0x8
c001c170:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c176:	83 e0 0f             	and    eax,0xf
c001c179:	50                   	push   eax
c001c17a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c17f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c182:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c188:	e8 03 4a ff ff       	call   c0010b90 <VgaText::setTitleColour(VgaColour)>
c001c18d:	58                   	pop    eax
c001c18e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c194:	5a                   	pop    edx
c001c195:	c1 e8 04             	shr    eax,0x4
c001c198:	83 e0 0f             	and    eax,0xf
c001c19b:	50                   	push   eax
c001c19c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c1aa:	e8 d1 49 ff ff       	call   c0010b80 <VgaText::setTitleTextColour(VgaColour)>
c001c1af:	eb b5                	jmp    c001c166 <sysAppSettings(regs*)+0xa3>
c001c1b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b9:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001c1bf:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c1c5:	c0 e8 06             	shr    al,0x6
c001c1c8:	83 e0 01             	and    eax,0x1
c001c1cb:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c1d1:	31 c0                	xor    eax,eax
c001c1d3:	e9 3b ff ff ff       	jmp    c001c113 <sysAppSettings(regs*)+0x50>
c001c1d8:	b8 02 00 00 00       	mov    eax,0x2
c001c1dd:	e9 31 ff ff ff       	jmp    c001c113 <sysAppSettings(regs*)+0x50>

c001c1e2 <sysSetFatAttrib(regs*)>:
c001c1e2:	57                   	push   edi
c001c1e3:	56                   	push   esi
c001c1e4:	53                   	push   ebx
c001c1e5:	83 ec 1c             	sub    esp,0x1c
c001c1e8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c1ec:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c1ef:	68 14 01 00 00       	push   0x114
c001c1f4:	e8 4a 36 ff ff       	call   c000f843 <malloc>
c001c1f9:	83 c4 0c             	add    esp,0xc
c001c1fc:	89 c3                	mov    ebx,eax
c001c1fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c203:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c206:	57                   	push   edi
c001c207:	53                   	push   ebx
c001c208:	e8 11 72 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001c20d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c210:	83 c4 0c             	add    esp,0xc
c001c213:	0f b6 d4             	movzx  edx,ah
c001c216:	0f b6 c0             	movzx  eax,al
c001c219:	52                   	push   edx
c001c21a:	50                   	push   eax
c001c21b:	53                   	push   ebx
c001c21c:	e8 73 74 ff ff       	call   c0013694 <File::chfatattr(unsigned char, unsigned char)>
c001c221:	83 c4 10             	add    esp,0x10
c001c224:	85 db                	test   ebx,ebx
c001c226:	74 14                	je     c001c23c <sysSetFatAttrib(regs*)+0x5a>
c001c228:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c22c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c22e:	83 ec 0c             	sub    esp,0xc
c001c231:	53                   	push   ebx
c001c232:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c235:	83 c4 10             	add    esp,0x10
c001c238:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c23c:	85 c0                	test   eax,eax
c001c23e:	0f 95 c0             	setne  al
c001c241:	31 d2                	xor    edx,edx
c001c243:	0f b6 c0             	movzx  eax,al
c001c246:	f7 d8                	neg    eax
c001c248:	83 d2 00             	adc    edx,0x0
c001c24b:	83 c4 10             	add    esp,0x10
c001c24e:	f7 da                	neg    edx
c001c250:	5b                   	pop    ebx
c001c251:	5e                   	pop    esi
c001c252:	5f                   	pop    edi
c001c253:	c3                   	ret    

c001c254 <sysPipe(regs*)>:
c001c254:	57                   	push   edi
c001c255:	56                   	push   esi
c001c256:	53                   	push   ebx
c001c257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c25b:	83 ec 0c             	sub    esp,0xc
c001c25e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c261:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c264:	6a 20                	push   0x20
c001c266:	e8 d8 35 ff ff       	call   c000f843 <malloc>
c001c26b:	89 c3                	mov    ebx,eax
c001c26d:	58                   	pop    eax
c001c26e:	5a                   	pop    edx
c001c26f:	68 00 50 00 00       	push   0x5000
c001c274:	53                   	push   ebx
c001c275:	e8 56 42 ff ff       	call   c00104d0 <Pipe::Pipe(int)>
c001c27a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c27d:	e8 ae 54 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001c282:	89 07                	mov    DWORD PTR [edi],eax
c001c284:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c287:	e8 a4 54 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001c28c:	83 c4 10             	add    esp,0x10
c001c28f:	89 06                	mov    DWORD PTR [esi],eax
c001c291:	31 d2                	xor    edx,edx
c001c293:	5b                   	pop    ebx
c001c294:	31 c0                	xor    eax,eax
c001c296:	5e                   	pop    esi
c001c297:	5f                   	pop    edi
c001c298:	c3                   	ret    

c001c299 <sysGetUnixTime(regs*)>:
c001c299:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001c29e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2a8:	e9 5b 7b ff ff       	jmp    c0013e08 <Clock::timeInSecondsLocal()>

c001c2ad <string_ends_with(char const*, char const*)>:
c001c2ad:	57                   	push   edi
c001c2ae:	56                   	push   esi
c001c2af:	53                   	push   ebx
c001c2b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2b4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2b8:	83 ec 0c             	sub    esp,0xc
c001c2bb:	53                   	push   ebx
c001c2bc:	e8 d3 44 fe ff       	call   c0000794 <strlen>
c001c2c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2c4:	89 c6                	mov    esi,eax
c001c2c6:	e8 c9 44 fe ff       	call   c0000794 <strlen>
c001c2cb:	83 c4 10             	add    esp,0x10
c001c2ce:	39 c6                	cmp    esi,eax
c001c2d0:	7d 06                	jge    c001c2d8 <string_ends_with(char const*, char const*)+0x2b>
c001c2d2:	5b                   	pop    ebx
c001c2d3:	31 c0                	xor    eax,eax
c001c2d5:	5e                   	pop    esi
c001c2d6:	5f                   	pop    edi
c001c2d7:	c3                   	ret    
c001c2d8:	83 ec 08             	sub    esp,0x8
c001c2db:	29 c6                	sub    esi,eax
c001c2dd:	57                   	push   edi
c001c2de:	01 f3                	add    ebx,esi
c001c2e0:	53                   	push   ebx
c001c2e1:	e8 da 45 fe ff       	call   c00008c0 <strcmp>
c001c2e6:	83 c4 10             	add    esp,0x10
c001c2e9:	85 c0                	test   eax,eax
c001c2eb:	5b                   	pop    ebx
c001c2ec:	0f 94 c0             	sete   al
c001c2ef:	5e                   	pop    esi
c001c2f0:	0f b6 c0             	movzx  eax,al
c001c2f3:	5f                   	pop    edi
c001c2f4:	c3                   	ret    

c001c2f5 <sysCallOpen(regs*)>:
c001c2f5:	56                   	push   esi
c001c2f6:	53                   	push   ebx
c001c2f7:	81 ec 04 01 00 00    	sub    esp,0x104
c001c2fd:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c304:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c307:	85 c9                	test   ecx,ecx
c001c309:	0f 84 b3 00 00 00    	je     c001c3c2 <sysCallOpen(regs*)+0xcd>
c001c30f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c312:	85 c0                	test   eax,eax
c001c314:	0f 84 a8 00 00 00    	je     c001c3c2 <sysCallOpen(regs*)+0xcd>
c001c31a:	52                   	push   edx
c001c31b:	68 35 be 02 c0       	push   0xc002be35
c001c320:	50                   	push   eax
c001c321:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c325:	56                   	push   esi
c001c326:	e8 49 6f ff ff       	call   c0013274 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c32b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c32e:	e8 61 44 fe ff       	call   c0000794 <strlen>
c001c333:	83 c4 10             	add    esp,0x10
c001c336:	48                   	dec    eax
c001c337:	74 1d                	je     c001c356 <sysCallOpen(regs*)+0x61>
c001c339:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c33c:	eb 0f                	jmp    c001c34d <sysCallOpen(regs*)+0x58>
c001c33e:	80 fa 3a             	cmp    dl,0x3a
c001c341:	74 0f                	je     c001c352 <sysCallOpen(regs*)+0x5d>
c001c343:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c347:	48                   	dec    eax
c001c348:	74 0c                	je     c001c356 <sysCallOpen(regs*)+0x61>
c001c34a:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c34d:	80 fa 2e             	cmp    dl,0x2e
c001c350:	75 ec                	jne    c001c33e <sysCallOpen(regs*)+0x49>
c001c352:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c356:	83 ec 08             	sub    esp,0x8
c001c359:	68 39 be 02 c0       	push   0xc002be39
c001c35e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c361:	e8 47 ff ff ff       	call   c001c2ad <string_ends_with(char const*, char const*)>
c001c366:	83 c4 10             	add    esp,0x10
c001c369:	85 c0                	test   eax,eax
c001c36b:	75 17                	jne    c001c384 <sysCallOpen(regs*)+0x8f>
c001c36d:	83 ec 08             	sub    esp,0x8
c001c370:	68 5a be 02 c0       	push   0xc002be5a
c001c375:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c378:	e8 30 ff ff ff       	call   c001c2ad <string_ends_with(char const*, char const*)>
c001c37d:	83 c4 10             	add    esp,0x10
c001c380:	85 c0                	test   eax,eax
c001c382:	74 51                	je     c001c3d5 <sysCallOpen(regs*)+0xe0>
c001c384:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c387:	83 ec 08             	sub    esp,0x8
c001c38a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c390:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c397:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c39a:	ff 30                	push   DWORD PTR [eax]
c001c39c:	68 3e be 02 c0       	push   0xc002be3e
c001c3a1:	e8 20 6b ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c3a6:	c7 04 24 4d be 02 c0 	mov    DWORD PTR [esp],0xc002be4d
c001c3ad:	e8 14 6b ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c3b2:	83 c4 10             	add    esp,0x10
c001c3b5:	81 c4 04 01 00 00    	add    esp,0x104
c001c3bb:	31 c0                	xor    eax,eax
c001c3bd:	31 d2                	xor    edx,edx
c001c3bf:	5b                   	pop    ebx
c001c3c0:	5e                   	pop    esi
c001c3c1:	c3                   	ret    
c001c3c2:	81 c4 04 01 00 00    	add    esp,0x104
c001c3c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3d2:	5b                   	pop    ebx
c001c3d3:	5e                   	pop    esi
c001c3d4:	c3                   	ret    
c001c3d5:	83 ec 08             	sub    esp,0x8
c001c3d8:	68 3a be 02 c0       	push   0xc002be3a
c001c3dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3e0:	e8 db 44 fe ff       	call   c00008c0 <strcmp>
c001c3e5:	83 c4 10             	add    esp,0x10
c001c3e8:	85 c0                	test   eax,eax
c001c3ea:	74 98                	je     c001c384 <sysCallOpen(regs*)+0x8f>
c001c3ec:	83 ec 08             	sub    esp,0x8
c001c3ef:	68 39 be 02 c0       	push   0xc002be39
c001c3f4:	56                   	push   esi
c001c3f5:	e8 b3 fe ff ff       	call   c001c2ad <string_ends_with(char const*, char const*)>
c001c3fa:	83 c4 10             	add    esp,0x10
c001c3fd:	85 c0                	test   eax,eax
c001c3ff:	75 83                	jne    c001c384 <sysCallOpen(regs*)+0x8f>
c001c401:	83 ec 08             	sub    esp,0x8
c001c404:	68 5f be 02 c0       	push   0xc002be5f
c001c409:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c40c:	e8 9c fe ff ff       	call   c001c2ad <string_ends_with(char const*, char const*)>
c001c411:	83 c4 10             	add    esp,0x10
c001c414:	85 c0                	test   eax,eax
c001c416:	0f 85 d9 00 00 00    	jne    c001c4f5 <sysCallOpen(regs*)+0x200>
c001c41c:	83 ec 08             	sub    esp,0x8
c001c41f:	68 64 be 02 c0       	push   0xc002be64
c001c424:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c427:	e8 81 fe ff ff       	call   c001c2ad <string_ends_with(char const*, char const*)>
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	85 c0                	test   eax,eax
c001c431:	0f 85 be 00 00 00    	jne    c001c4f5 <sysCallOpen(regs*)+0x200>
c001c437:	83 ec 08             	sub    esp,0x8
c001c43a:	68 60 be 02 c0       	push   0xc002be60
c001c43f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c442:	e8 79 44 fe ff       	call   c00008c0 <strcmp>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	85 c0                	test   eax,eax
c001c44c:	0f 84 a3 00 00 00    	je     c001c4f5 <sysCallOpen(regs*)+0x200>
c001c452:	83 ec 08             	sub    esp,0x8
c001c455:	68 5f be 02 c0       	push   0xc002be5f
c001c45a:	56                   	push   esi
c001c45b:	e8 4d fe ff ff       	call   c001c2ad <string_ends_with(char const*, char const*)>
c001c460:	83 c4 10             	add    esp,0x10
c001c463:	85 c0                	test   eax,eax
c001c465:	0f 85 8a 00 00 00    	jne    c001c4f5 <sysCallOpen(regs*)+0x200>
c001c46b:	83 ec 0c             	sub    esp,0xc
c001c46e:	68 14 01 00 00       	push   0x114
c001c473:	e8 cb 33 ff ff       	call   c000f843 <malloc>
c001c478:	83 c4 0c             	add    esp,0xc
c001c47b:	89 c6                	mov    esi,eax
c001c47d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c482:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c485:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c488:	56                   	push   esi
c001c489:	e8 90 6f ff ff       	call   c001341e <File::File(char const*, Process*)>
c001c48e:	83 c4 10             	add    esp,0x10
c001c491:	85 f6                	test   esi,esi
c001c493:	0f 84 29 ff ff ff    	je     c001c3c2 <sysCallOpen(regs*)+0xcd>
c001c499:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c49c:	0f b6 c2             	movzx  eax,dl
c001c49f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4a2:	89 d0                	mov    eax,edx
c001c4a4:	83 e0 01             	and    eax,0x1
c001c4a7:	f6 c2 02             	test   dl,0x2
c001c4aa:	74 03                	je     c001c4af <sysCallOpen(regs*)+0x1ba>
c001c4ac:	83 c8 02             	or     eax,0x2
c001c4af:	f6 c2 04             	test   dl,0x4
c001c4b2:	74 03                	je     c001c4b7 <sysCallOpen(regs*)+0x1c2>
c001c4b4:	83 c8 04             	or     eax,0x4
c001c4b7:	f6 c2 08             	test   dl,0x8
c001c4ba:	74 03                	je     c001c4bf <sysCallOpen(regs*)+0x1ca>
c001c4bc:	83 c8 0a             	or     eax,0xa
c001c4bf:	83 e2 10             	and    edx,0x10
c001c4c2:	74 03                	je     c001c4c7 <sysCallOpen(regs*)+0x1d2>
c001c4c4:	83 c8 12             	or     eax,0x12
c001c4c7:	83 ec 08             	sub    esp,0x8
c001c4ca:	50                   	push   eax
c001c4cb:	56                   	push   esi
c001c4cc:	e8 b1 6f ff ff       	call   c0013482 <File::open(FileOpenMode)>
c001c4d1:	83 c4 10             	add    esp,0x10
c001c4d4:	85 c0                	test   eax,eax
c001c4d6:	0f 85 e6 fe ff ff    	jne    c001c3c2 <sysCallOpen(regs*)+0xcd>
c001c4dc:	83 ec 0c             	sub    esp,0xc
c001c4df:	56                   	push   esi
c001c4e0:	e8 4b 52 ff ff       	call   c0011730 <UnixFile::getFileDescriptor()>
c001c4e5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c4e8:	89 02                	mov    DWORD PTR [edx],eax
c001c4ea:	c1 f8 1f             	sar    eax,0x1f
c001c4ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4f0:	e9 bd fe ff ff       	jmp    c001c3b2 <sysCallOpen(regs*)+0xbd>
c001c4f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4f8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c4fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c505:	e9 ab fe ff ff       	jmp    c001c3b5 <sysCallOpen(regs*)+0xc0>

c001c50a <Sys::loadSyscalls()>:
c001c50a:	c7 05 40 11 03 c0 17 b6 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001b617
c001c514:	c7 05 44 11 03 c0 00 b2 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001b200
c001c51e:	c7 05 48 11 03 c0 6a b3 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001b36a
c001c528:	c7 05 4c 11 03 c0 4d b5 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b54d
c001c532:	c7 05 50 11 03 c0 02 b3 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001b302
c001c53c:	c7 05 54 11 03 c0 37 b2 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b237
c001c546:	c7 05 58 11 03 c0 18 b2 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001b218
c001c550:	c7 05 5c 11 03 c0 bf b3 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001b3bf
c001c55a:	c7 05 64 11 03 c0 47 bb 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001bb47
c001c564:	c7 05 60 11 03 c0 f5 c2 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001c2f5
c001c56e:	c7 05 68 11 03 c0 cf bb 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001bbcf
c001c578:	c7 05 6c 11 03 c0 36 b8 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b836
c001c582:	c7 05 70 11 03 c0 52 b6 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001b652
c001c58c:	c7 05 74 11 03 c0 57 b6 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001b657
c001c596:	c7 05 78 11 03 c0 aa bc 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001bcaa
c001c5a0:	c7 05 7c 11 03 c0 44 bc 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001bc44
c001c5aa:	c7 05 80 11 03 c0 1e b9 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001b91e
c001c5b4:	c7 05 84 11 03 c0 87 b9 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001b987
c001c5be:	c7 05 88 11 03 c0 04 ba 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001ba04
c001c5c8:	c7 05 8c 11 03 c0 5c b6 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b65c
c001c5d2:	c7 05 90 11 03 c0 1a bd 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001bd1a
c001c5dc:	c7 05 94 11 03 c0 34 bd 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001bd34
c001c5e6:	c7 05 98 11 03 c0 34 bd 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001bd34
c001c5f0:	c7 05 9c 11 03 c0 75 bd 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001bd75
c001c5fa:	c7 05 a0 11 03 c0 d9 bd 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001bdd9
c001c604:	c7 05 a4 11 03 c0 08 b8 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001b808
c001c60e:	c7 05 a8 11 03 c0 3d be 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001be3d
c001c618:	c7 05 ac 11 03 c0 c5 b7 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b7c5
c001c622:	c7 05 b0 11 03 c0 89 be 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001be89
c001c62c:	c7 05 b4 11 03 c0 c4 b8 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b8c4
c001c636:	c7 05 b8 11 03 c0 0c bf 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001bf0c
c001c640:	c7 05 bc 11 03 c0 87 ba 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001ba87
c001c64a:	c7 05 c0 11 03 c0 33 bf 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001bf33
c001c654:	c7 05 c4 11 03 c0 8b bf 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001bf8b
c001c65e:	c7 05 c8 11 03 c0 c3 c0 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001c0c3
c001c668:	c7 05 cc 11 03 c0 66 b6 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b666
c001c672:	c7 05 d0 11 03 c0 d0 b6 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001b6d0
c001c67c:	c7 05 d4 11 03 c0 16 b7 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b716
c001c686:	c7 05 d8 11 03 c0 e2 c1 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001c1e2
c001c690:	c7 05 dc 11 03 c0 4f bd 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001bd4f
c001c69a:	c7 05 e0 11 03 c0 67 b7 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001b767
c001c6a4:	c7 05 e4 11 03 c0 54 c2 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001c254
c001c6ae:	c7 05 e8 11 03 c0 99 c2 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001c299
c001c6b8:	c7 05 ec 11 03 c0 5a b2 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b25a
c001c6c2:	c7 05 f0 11 03 c0 db b3 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001b3db
c001c6cc:	c7 05 f4 11 03 c0 03 b5 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b503
c001c6d6:	c7 05 f8 11 03 c0 ca b1 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001b1ca
c001c6e0:	c7 05 fc 11 03 c0 b5 b5 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001b5b5
c001c6ea:	c7 05 00 12 03 c0 43 b2 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001b243
c001c6f4:	c3                   	ret    

c001c6f5 <Sys::systemCall(regs*, void*)>:
c001c6f5:	53                   	push   ebx
c001c6f6:	83 ec 08             	sub    esp,0x8
c001c6f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6fd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c700:	83 f8 7f             	cmp    eax,0x7f
c001c703:	77 16                	ja     c001c71b <Sys::systemCall(regs*, void*)+0x26>
c001c705:	8b 14 85 40 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceec0]
c001c70c:	85 d2                	test   edx,edx
c001c70e:	74 0b                	je     c001c71b <Sys::systemCall(regs*, void*)+0x26>
c001c710:	83 ec 0c             	sub    esp,0xc
c001c713:	53                   	push   ebx
c001c714:	ff d2                	call   edx
c001c716:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c719:	eb 0d                	jmp    c001c728 <Sys::systemCall(regs*, void*)+0x33>
c001c71b:	52                   	push   edx
c001c71c:	52                   	push   edx
c001c71d:	50                   	push   eax
c001c71e:	68 69 be 02 c0       	push   0xc002be69
c001c723:	e8 9e 67 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c728:	83 c4 10             	add    esp,0x10
c001c72b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c730:	31 d2                	xor    edx,edx
c001c732:	83 c4 08             	add    esp,0x8
c001c735:	5b                   	pop    ebx
c001c736:	c3                   	ret    

c001c737 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c737:	55                   	push   ebp
c001c738:	57                   	push   edi
c001c739:	56                   	push   esi
c001c73a:	53                   	push   ebx
c001c73b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c741:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c748:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c74f:	85 c0                	test   eax,eax
c001c751:	0f 95 c1             	setne  cl
c001c754:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c75c:	0f 94 c2             	sete   dl
c001c75f:	84 d1                	test   cl,dl
c001c761:	74 23                	je     c001c786 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c763:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c769:	74 1b                	je     c001c786 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c76b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c771:	89 da                	mov    edx,ebx
c001c773:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c779:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c77f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c786:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c78d:	05 ff 0f 00 00       	add    eax,0xfff
c001c792:	83 ec 0c             	sub    esp,0xc
c001c795:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c799:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c79f:	c1 e8 0c             	shr    eax,0xc
c001c7a2:	89 ef                	mov    edi,ebp
c001c7a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7a8:	c1 ef 0c             	shr    edi,0xc
c001c7ab:	6a 01                	push   0x1
c001c7ad:	e8 c9 53 ff ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c001c7b2:	89 c6                	mov    esi,eax
c001c7b4:	58                   	pop    eax
c001c7b5:	5a                   	pop    edx
c001c7b6:	57                   	push   edi
c001c7b7:	68 ef be 02 c0       	push   0xc002beef
c001c7bc:	e8 05 67 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c7c1:	59                   	pop    ecx
c001c7c2:	58                   	pop    eax
c001c7c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7c7:	68 01 bf 02 c0       	push   0xc002bf01
c001c7cc:	e8 f5 66 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c7d1:	83 c4 10             	add    esp,0x10
c001c7d4:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c7da:	0f 86 24 01 00 00    	jbe    c001c904 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c7e0:	c1 e7 0c             	shl    edi,0xc
c001c7e3:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c7e6:	89 df                	mov    edi,ebx
c001c7e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ec:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c7f3:	01 dd                	add    ebp,ebx
c001c7f5:	29 fd                	sub    ebp,edi
c001c7f7:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c7fb:	0f 84 01 01 00 00    	je     c001c902 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c801:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c807:	76 05                	jbe    c001c80e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c809:	bd 00 10 00 00       	mov    ebp,0x1000
c001c80e:	83 ec 0c             	sub    esp,0xc
c001c811:	31 d2                	xor    edx,edx
c001c813:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c81a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c81c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c820:	50                   	push   eax
c001c821:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c825:	50                   	push   eax
c001c826:	52                   	push   edx
c001c827:	55                   	push   ebp
c001c828:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c82f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c832:	83 c4 20             	add    esp,0x20
c001c835:	85 c0                	test   eax,eax
c001c837:	74 0a                	je     c001c843 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c839:	53                   	push   ebx
c001c83a:	53                   	push   ebx
c001c83b:	50                   	push   eax
c001c83c:	68 13 bf 02 c0       	push   0xc002bf13
c001c841:	eb 0f                	jmp    c001c852 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c843:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c847:	74 20                	je     c001c869 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c849:	51                   	push   ecx
c001c84a:	51                   	push   ecx
c001c84b:	6a 00                	push   0x0
c001c84d:	68 3e bf 02 c0       	push   0xc002bf3e
c001c852:	e8 6f 66 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001c857:	89 34 24             	mov    DWORD PTR [esp],esi
c001c85a:	e8 90 57 ff ff       	call   c0011fef <Virt::freeKernelVirtualPages(unsigned long)>
c001c85f:	83 c4 10             	add    esp,0x10
c001c862:	31 c0                	xor    eax,eax
c001c864:	e9 55 01 00 00       	jmp    c001c9be <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c869:	e8 f7 14 00 00       	call   c001dd65 <lockScheduler()>
c001c86e:	e8 6d 36 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001c873:	6a 07                	push   0x7
c001c875:	89 c5                	mov    ebp,eax
c001c877:	56                   	push   esi
c001c878:	50                   	push   eax
c001c879:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c87e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c881:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c887:	e8 ca 5a ff ff       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c88c:	83 c4 0c             	add    esp,0xc
c001c88f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c896:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c89c:	6a 00                	push   0x0
c001c89e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8a6:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8ac:	e8 0f 59 ff ff       	call   c00121c0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8b1:	58                   	pop    eax
c001c8b2:	5a                   	pop    edx
c001c8b3:	68 07 0c 00 00       	push   0xc07
c001c8b8:	57                   	push   edi
c001c8b9:	81 c7 00 10 00 00    	add    edi,0x1000
c001c8bf:	55                   	push   ebp
c001c8c0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8c7:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8cd:	6a 00                	push   0x0
c001c8cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8d7:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8dd:	e8 2e 5e ff ff       	call   c0012710 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8e2:	83 c4 1c             	add    esp,0x1c
c001c8e5:	68 00 10 00 00       	push   0x1000
c001c8ea:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8ee:	50                   	push   eax
c001c8ef:	56                   	push   esi
c001c8f0:	e8 4f 3e fe ff       	call   c0000744 <memcpy>
c001c8f5:	e8 6d 14 00 00       	call   c001dd67 <unlockScheduler()>
c001c8fa:	83 c4 10             	add    esp,0x10
c001c8fd:	e9 ea fe ff ff       	jmp    c001c7ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c902:	89 fb                	mov    ebx,edi
c001c904:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c90c:	0f 86 9e 00 00 00    	jbe    c001c9b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c912:	e8 4e 14 00 00       	call   c001dd65 <lockScheduler()>
c001c917:	51                   	push   ecx
c001c918:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c91f:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c925:	6a 00                	push   0x0
c001c927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c92c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c92f:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c935:	e8 86 58 ff ff       	call   c00121c0 <VAS::mapOtherVASIn(bool, VAS*)>
c001c93a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c93e:	c1 e7 0c             	shl    edi,0xc
c001c941:	01 df                	add    edi,ebx
c001c943:	83 c4 10             	add    esp,0x10
c001c946:	39 fb                	cmp    ebx,edi
c001c948:	74 61                	je     c001c9ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c94a:	e8 91 35 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001c94f:	6a 07                	push   0x7
c001c951:	89 c5                	mov    ebp,eax
c001c953:	56                   	push   esi
c001c954:	50                   	push   eax
c001c955:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c95a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c95d:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c963:	e8 ee 59 ff ff       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c968:	58                   	pop    eax
c001c969:	5a                   	pop    edx
c001c96a:	68 07 0c 00 00       	push   0xc07
c001c96f:	53                   	push   ebx
c001c970:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c976:	55                   	push   ebp
c001c977:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c97e:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c984:	6a 00                	push   0x0
c001c986:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c98b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c98e:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c994:	e8 77 5d ff ff       	call   c0012710 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c999:	83 c4 1c             	add    esp,0x1c
c001c99c:	68 00 10 00 00       	push   0x1000
c001c9a1:	6a 00                	push   0x0
c001c9a3:	56                   	push   esi
c001c9a4:	e8 cf 3d fe ff       	call   c0000778 <memset>
c001c9a9:	eb 98                	jmp    c001c943 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c9ab:	e8 b7 13 00 00       	call   c001dd67 <unlockScheduler()>
c001c9b0:	83 ec 0c             	sub    esp,0xc
c001c9b3:	56                   	push   esi
c001c9b4:	e8 36 56 ff ff       	call   c0011fef <Virt::freeKernelVirtualPages(unsigned long)>
c001c9b9:	83 c4 10             	add    esp,0x10
c001c9bc:	b0 01                	mov    al,0x1
c001c9be:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c9c4:	5b                   	pop    ebx
c001c9c5:	5e                   	pop    esi
c001c9c6:	5f                   	pop    edi
c001c9c7:	5d                   	pop    ebp
c001c9c8:	c3                   	ret    

c001c9c9 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c9c9:	55                   	push   ebp
c001c9ca:	57                   	push   edi
c001c9cb:	56                   	push   esi
c001c9cc:	53                   	push   ebx
c001c9cd:	83 ec 48             	sub    esp,0x48
c001c9d0:	68 14 01 00 00       	push   0x114
c001c9d5:	e8 69 2e ff ff       	call   c000f843 <malloc>
c001c9da:	83 c4 0c             	add    esp,0xc
c001c9dd:	89 c6                	mov    esi,eax
c001c9df:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c9e3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c9e7:	50                   	push   eax
c001c9e8:	e8 31 6a ff ff       	call   c001341e <File::File(char const*, Process*)>
c001c9ed:	58                   	pop    eax
c001c9ee:	5a                   	pop    edx
c001c9ef:	6a 01                	push   0x1
c001c9f1:	56                   	push   esi
c001c9f2:	e8 8b 6a ff ff       	call   c0013482 <File::open(FileOpenMode)>
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	85 c0                	test   eax,eax
c001c9fc:	0f 85 47 01 00 00    	jne    c001cb49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca02:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca0a:	83 ec 0c             	sub    esp,0xc
c001ca0d:	6a 34                	push   0x34
c001ca0f:	e8 2f 2e ff ff       	call   c000f843 <malloc>
c001ca14:	89 c3                	mov    ebx,eax
c001ca16:	58                   	pop    eax
c001ca17:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca19:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca1d:	57                   	push   edi
c001ca1e:	53                   	push   ebx
c001ca1f:	6a 00                	push   0x0
c001ca21:	6a 34                	push   0x34
c001ca23:	56                   	push   esi
c001ca24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca27:	83 c4 20             	add    esp,0x20
c001ca2a:	85 c0                	test   eax,eax
c001ca2c:	0f 85 17 01 00 00    	jne    c001cb49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca32:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca38:	0f 85 0b 01 00 00    	jne    c001cb49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca3e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca41:	85 c0                	test   eax,eax
c001ca43:	0f 84 00 01 00 00    	je     c001cb49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca49:	31 d2                	xor    edx,edx
c001ca4b:	55                   	push   ebp
c001ca4c:	52                   	push   edx
c001ca4d:	50                   	push   eax
c001ca4e:	56                   	push   esi
c001ca4f:	e8 ec 6a ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001ca54:	83 c4 10             	add    esp,0x10
c001ca57:	85 c0                	test   eax,eax
c001ca59:	0f 85 ea 00 00 00    	jne    c001cb49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca5f:	83 ec 0c             	sub    esp,0xc
c001ca62:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ca65:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca6d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca71:	0f af c2             	imul   eax,edx
c001ca74:	50                   	push   eax
c001ca75:	e8 c9 2d ff ff       	call   c000f843 <malloc>
c001ca7a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca80:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca87:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca8b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca8f:	0f af c2             	imul   eax,edx
c001ca92:	99                   	cdq    
c001ca93:	52                   	push   edx
c001ca94:	50                   	push   eax
c001ca95:	56                   	push   esi
c001ca96:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca99:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ca9c:	83 c4 20             	add    esp,0x20
c001ca9f:	85 c0                	test   eax,eax
c001caa1:	0f 84 a2 00 00 00    	je     c001cb49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caa7:	31 d2                	xor    edx,edx
c001caa9:	51                   	push   ecx
c001caaa:	52                   	push   edx
c001caab:	50                   	push   eax
c001caac:	56                   	push   esi
c001caad:	e8 8e 6a ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001cab2:	83 c4 10             	add    esp,0x10
c001cab5:	85 c0                	test   eax,eax
c001cab7:	0f 85 8c 00 00 00    	jne    c001cb49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cabd:	83 ec 0c             	sub    esp,0xc
c001cac0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cac4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cac8:	31 ed                	xor    ebp,ebp
c001caca:	0f af c2             	imul   eax,edx
c001cacd:	50                   	push   eax
c001cace:	e8 70 2d ff ff       	call   c000f843 <malloc>
c001cad3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cad5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cad9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cadc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cae4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cae8:	0f af c2             	imul   eax,edx
c001caeb:	99                   	cdq    
c001caec:	52                   	push   edx
c001caed:	50                   	push   eax
c001caee:	56                   	push   esi
c001caef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caf2:	83 c4 20             	add    esp,0x20
c001caf5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cafd:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb01:	0f 86 80 00 00 00    	jbe    c001cb87 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb07:	0f b7 fd             	movzx  edi,bp
c001cb0a:	c1 e7 05             	shl    edi,0x5
c001cb0d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb11:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb14:	75 6b                	jne    c001cb81 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb1d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb24:	52                   	push   edx
c001cb25:	31 d2                	xor    edx,edx
c001cb27:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb2a:	52                   	push   edx
c001cb2b:	50                   	push   eax
c001cb2c:	56                   	push   esi
c001cb2d:	e8 0e 6a ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001cb32:	83 c4 10             	add    esp,0x10
c001cb35:	85 c0                	test   eax,eax
c001cb37:	74 17                	je     c001cb50 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb39:	83 ec 0c             	sub    esp,0xc
c001cb3c:	68 6a bf 02 c0       	push   0xc002bf6a
c001cb41:	e8 80 63 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001cb46:	83 c4 10             	add    esp,0x10
c001cb49:	31 c0                	xor    eax,eax
c001cb4b:	e9 87 00 00 00       	jmp    c001cbd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb50:	83 ec 0c             	sub    esp,0xc
c001cb53:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb56:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb59:	50                   	push   eax
c001cb5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb62:	56                   	push   esi
c001cb63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cb67:	e8 cb fb ff ff       	call   c001c737 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb70:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb74:	83 c4 20             	add    esp,0x20
c001cb77:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cb7b:	73 04                	jae    c001cb81 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb81:	45                   	inc    ebp
c001cb82:	e9 76 ff ff ff       	jmp    c001cafd <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cb87:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cb8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb93:	89 91 2e 19 00 00    	mov    DWORD PTR [ecx+0x192e],edx
c001cb99:	83 ec 0c             	sub    esp,0xc
c001cb9c:	8b 91 32 19 00 00    	mov    edx,DWORD PTR [ecx+0x1932]
c001cba2:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cba7:	05 00 10 00 00       	add    eax,0x1000
c001cbac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbb3:	e8 9b 2c ff ff       	call   c000f853 <free>
c001cbb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbbb:	e8 93 2c ff ff       	call   c000f853 <free>
c001cbc0:	58                   	pop    eax
c001cbc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbc5:	e8 89 2c ff ff       	call   c000f853 <free>
c001cbca:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbcd:	e8 0e 69 ff ff       	call   c00134e0 <File::close()>
c001cbd2:	83 c4 10             	add    esp,0x10
c001cbd5:	b0 01                	mov    al,0x1
c001cbd7:	83 c4 3c             	add    esp,0x3c
c001cbda:	5b                   	pop    ebx
c001cbdb:	5e                   	pop    esi
c001cbdc:	5f                   	pop    edi
c001cbdd:	5d                   	pop    ebp
c001cbde:	c3                   	ret    

c001cbdf <Thr::runtimeReferenceHelper()>:
c001cbdf:	83 ec 18             	sub    esp,0x18
c001cbe2:	68 72 bf 02 c0       	push   0xc002bf72
c001cbe7:	e8 da 62 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001cbec:	fa                   	cli    
c001cbed:	83 c4 10             	add    esp,0x10
c001cbf0:	eb fe                	jmp    c001cbf0 <Thr::runtimeReferenceHelper()+0x11>

c001cbf2 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cbf2:	57                   	push   edi
c001cbf3:	56                   	push   esi
c001cbf4:	53                   	push   ebx
c001cbf5:	31 db                	xor    ebx,ebx
c001cbf7:	39 1d e0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031ae0,ebx
c001cbfd:	7e 3c                	jle    c001cc3b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cbff:	8b 34 9d 60 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce5a0]
c001cc06:	31 ff                	xor    edi,edi
c001cc08:	39 3c 9d 60 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce6a0],edi
c001cc0f:	7e 27                	jle    c001cc38 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc11:	50                   	push   eax
c001cc12:	50                   	push   eax
c001cc13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc17:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc19:	03 04 9d e0 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce620]
c001cc20:	50                   	push   eax
c001cc21:	e8 9a 3c fe ff       	call   c00008c0 <strcmp>
c001cc26:	83 c4 10             	add    esp,0x10
c001cc29:	85 c0                	test   eax,eax
c001cc2b:	75 05                	jne    c001cc32 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc2d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc30:	eb 0b                	jmp    c001cc3d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc32:	83 c6 10             	add    esi,0x10
c001cc35:	47                   	inc    edi
c001cc36:	eb d0                	jmp    c001cc08 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc38:	43                   	inc    ebx
c001cc39:	eb bc                	jmp    c001cbf7 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc3b:	31 c0                	xor    eax,eax
c001cc3d:	5b                   	pop    ebx
c001cc3e:	5e                   	pop    esi
c001cc3f:	5f                   	pop    edi
c001cc40:	c3                   	ret    

c001cc41 <Thr::loadKernelSymbolTable(char const*)>:
c001cc41:	55                   	push   ebp
c001cc42:	57                   	push   edi
c001cc43:	56                   	push   esi
c001cc44:	53                   	push   ebx
c001cc45:	83 ec 68             	sub    esp,0x68
c001cc48:	8b 35 34 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b34
c001cc4e:	68 14 01 00 00       	push   0x114
c001cc53:	e8 eb 2b ff ff       	call   c000f843 <malloc>
c001cc58:	83 c4 0c             	add    esp,0xc
c001cc5b:	89 c3                	mov    ebx,eax
c001cc5d:	56                   	push   esi
c001cc5e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc62:	50                   	push   eax
c001cc63:	e8 b6 67 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001cc68:	5e                   	pop    esi
c001cc69:	5f                   	pop    edi
c001cc6a:	6a 01                	push   0x1
c001cc6c:	53                   	push   ebx
c001cc6d:	e8 10 68 ff ff       	call   c0013482 <File::open(FileOpenMode)>
c001cc72:	83 c4 10             	add    esp,0x10
c001cc75:	85 c0                	test   eax,eax
c001cc77:	74 0a                	je     c001cc83 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc79:	83 ec 0c             	sub    esp,0xc
c001cc7c:	68 94 bf 02 c0       	push   0xc002bf94
c001cc81:	eb 34                	jmp    c001ccb7 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cc83:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cc8b:	83 ec 0c             	sub    esp,0xc
c001cc8e:	6a 34                	push   0x34
c001cc90:	e8 ae 2b ff ff       	call   c000f843 <malloc>
c001cc95:	59                   	pop    ecx
c001cc96:	89 c7                	mov    edi,eax
c001cc98:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cc9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc9e:	56                   	push   esi
c001cc9f:	57                   	push   edi
c001cca0:	6a 00                	push   0x0
c001cca2:	6a 34                	push   0x34
c001cca4:	53                   	push   ebx
c001cca5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cca8:	83 c4 20             	add    esp,0x20
c001ccab:	85 c0                	test   eax,eax
c001ccad:	74 17                	je     c001ccc6 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ccaf:	83 ec 0c             	sub    esp,0xc
c001ccb2:	68 ab bf 02 c0       	push   0xc002bfab
c001ccb7:	e8 af d8 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001ccbc:	83 c4 10             	add    esp,0x10
c001ccbf:	31 c0                	xor    eax,eax
c001ccc1:	e9 31 02 00 00       	jmp    c001cef7 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ccc6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cccc:	75 e1                	jne    c001ccaf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccce:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ccd1:	85 c0                	test   eax,eax
c001ccd3:	74 da                	je     c001ccaf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccd5:	52                   	push   edx
c001ccd6:	31 d2                	xor    edx,edx
c001ccd8:	52                   	push   edx
c001ccd9:	50                   	push   eax
c001ccda:	53                   	push   ebx
c001ccdb:	e8 60 68 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001cce0:	83 c4 10             	add    esp,0x10
c001cce3:	85 c0                	test   eax,eax
c001cce5:	75 c8                	jne    c001ccaf <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cce7:	83 ec 0c             	sub    esp,0xc
c001ccea:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccee:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccf2:	31 ed                	xor    ebp,ebp
c001ccf4:	0f af c2             	imul   eax,edx
c001ccf7:	50                   	push   eax
c001ccf8:	e8 46 2b ff ff       	call   c000f843 <malloc>
c001ccfd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ccff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd03:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd0a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd0e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd12:	0f af c2             	imul   eax,edx
c001cd15:	99                   	cdq    
c001cd16:	52                   	push   edx
c001cd17:	50                   	push   eax
c001cd18:	53                   	push   ebx
c001cd19:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd1c:	83 c4 20             	add    esp,0x20
c001cd1f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd27:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd2f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd37:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd3f:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd43:	0f 86 aa 00 00 00    	jbe    c001cdf3 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd49:	0f b7 f5             	movzx  esi,bp
c001cd4c:	6b f6 28             	imul   esi,esi,0x28
c001cd4f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd53:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd5a:	50                   	push   eax
c001cd5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd5f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cd63:	8b 16                	mov    edx,DWORD PTR [esi]
c001cd65:	6b c0 28             	imul   eax,eax,0x28
c001cd68:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd6c:	89 d0                	mov    eax,edx
c001cd6e:	31 d2                	xor    edx,edx
c001cd70:	52                   	push   edx
c001cd71:	50                   	push   eax
c001cd72:	53                   	push   ebx
c001cd73:	e8 c8 67 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001cd78:	83 c4 0c             	add    esp,0xc
c001cd7b:	6a 20                	push   0x20
c001cd7d:	6a 00                	push   0x0
c001cd7f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd83:	52                   	push   edx
c001cd84:	e8 ef 39 fe ff       	call   c0000778 <memset>
c001cd89:	58                   	pop    eax
c001cd8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd8c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cd90:	51                   	push   ecx
c001cd91:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cd95:	52                   	push   edx
c001cd96:	6a 00                	push   0x0
c001cd98:	6a 1f                	push   0x1f
c001cd9a:	53                   	push   ebx
c001cd9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd9e:	83 c4 18             	add    esp,0x18
c001cda1:	68 c2 bf 02 c0       	push   0xc002bfc2
c001cda6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdaa:	52                   	push   edx
c001cdab:	e8 10 3b fe ff       	call   c00008c0 <strcmp>
c001cdb0:	83 c4 10             	add    esp,0x10
c001cdb3:	85 c0                	test   eax,eax
c001cdb5:	75 0f                	jne    c001cdc6 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cdb7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdc6:	50                   	push   eax
c001cdc7:	50                   	push   eax
c001cdc8:	68 ca bf 02 c0       	push   0xc002bfca
c001cdcd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cdd1:	50                   	push   eax
c001cdd2:	e8 e9 3a fe ff       	call   c00008c0 <strcmp>
c001cdd7:	83 c4 10             	add    esp,0x10
c001cdda:	85 c0                	test   eax,eax
c001cddc:	75 0f                	jne    c001cded <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cdde:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cde1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cde5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cde9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cded:	45                   	inc    ebp
c001cdee:	e9 4c ff ff ff       	jmp    c001cd3f <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cdf3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cdf8:	75 10                	jne    c001ce0a <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cdfa:	83 ec 0c             	sub    esp,0xc
c001cdfd:	68 d2 bf 02 c0       	push   0xc002bfd2
c001ce02:	e8 64 d7 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001ce07:	83 c4 10             	add    esp,0x10
c001ce0a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce0f:	75 10                	jne    c001ce21 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce11:	83 ec 0c             	sub    esp,0xc
c001ce14:	68 d2 bf 02 c0       	push   0xc002bfd2
c001ce19:	e8 4d d7 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001ce1e:	83 c4 10             	add    esp,0x10
c001ce21:	31 d2                	xor    edx,edx
c001ce23:	50                   	push   eax
c001ce24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce28:	52                   	push   edx
c001ce29:	50                   	push   eax
c001ce2a:	53                   	push   ebx
c001ce2b:	e8 10 67 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001ce30:	5a                   	pop    edx
c001ce31:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce35:	e8 09 2a ff ff       	call   c000f843 <malloc>
c001ce3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce42:	31 c9                	xor    ecx,ecx
c001ce44:	5e                   	pop    esi
c001ce45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce47:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce4b:	55                   	push   ebp
c001ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce50:	51                   	push   ecx
c001ce51:	52                   	push   edx
c001ce52:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce56:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce5a:	53                   	push   ebx
c001ce5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce5e:	83 c4 14             	add    esp,0x14
c001ce61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce65:	e8 d9 29 ff ff       	call   c000f843 <malloc>
c001ce6a:	89 c6                	mov    esi,eax
c001ce6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce6e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce71:	56                   	push   esi
c001ce72:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce76:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce7a:	51                   	push   ecx
c001ce7b:	52                   	push   edx
c001ce7c:	53                   	push   ebx
c001ce7d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce84:	8b 15 e0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ae0
c001ce8a:	83 c4 1c             	add    esp,0x1c
c001ce8d:	c1 e8 04             	shr    eax,0x4
c001ce90:	89 04 95 60 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce6a0],eax
c001ce97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce9b:	31 d2                	xor    edx,edx
c001ce9d:	52                   	push   edx
c001ce9e:	50                   	push   eax
c001ce9f:	53                   	push   ebx
c001cea0:	e8 9b 66 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001cea5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cea7:	31 d2                	xor    edx,edx
c001cea9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceac:	56                   	push   esi
c001cead:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ceb1:	52                   	push   edx
c001ceb2:	50                   	push   eax
c001ceb3:	53                   	push   ebx
c001ceb4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceb7:	83 c4 14             	add    esp,0x14
c001ceba:	53                   	push   ebx
c001cebb:	e8 20 66 ff ff       	call   c00134e0 <File::close()>
c001cec0:	5d                   	pop    ebp
c001cec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cec5:	e8 89 29 ff ff       	call   c000f853 <free>
c001ceca:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cecd:	e8 81 29 ff ff       	call   c000f853 <free>
c001ced2:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c001ced7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cedb:	8d 50 01             	lea    edx,[eax+0x1]
c001cede:	89 0c 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],ecx
c001cee5:	89 34 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],esi
c001ceec:	89 15 e0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ae0,edx
c001cef2:	83 c4 10             	add    esp,0x10
c001cef5:	b0 01                	mov    al,0x1
c001cef7:	83 c4 5c             	add    esp,0x5c
c001cefa:	5b                   	pop    ebx
c001cefb:	5e                   	pop    esi
c001cefc:	5f                   	pop    edi
c001cefd:	5d                   	pop    ebp
c001cefe:	c3                   	ret    

c001ceff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ceff:	55                   	push   ebp
c001cf00:	57                   	push   edi
c001cf01:	56                   	push   esi
c001cf02:	53                   	push   ebx
c001cf03:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf09:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf10:	8b 1d 34 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b34
c001cf16:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf1a:	68 14 01 00 00       	push   0x114
c001cf1f:	e8 1f 29 ff ff       	call   c000f843 <malloc>
c001cf24:	83 c4 0c             	add    esp,0xc
c001cf27:	89 c5                	mov    ebp,eax
c001cf29:	53                   	push   ebx
c001cf2a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf31:	50                   	push   eax
c001cf32:	e8 e7 64 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001cf37:	5e                   	pop    esi
c001cf38:	5f                   	pop    edi
c001cf39:	6a 01                	push   0x1
c001cf3b:	55                   	push   ebp
c001cf3c:	e8 41 65 ff ff       	call   c0013482 <File::open(FileOpenMode)>
c001cf41:	83 c4 10             	add    esp,0x10
c001cf44:	85 c0                	test   eax,eax
c001cf46:	0f 85 8d 06 00 00    	jne    c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf4c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf54:	83 ec 0c             	sub    esp,0xc
c001cf57:	6a 34                	push   0x34
c001cf59:	e8 e5 28 ff ff       	call   c000f843 <malloc>
c001cf5e:	5b                   	pop    ebx
c001cf5f:	89 c7                	mov    edi,eax
c001cf61:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf65:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf68:	53                   	push   ebx
c001cf69:	57                   	push   edi
c001cf6a:	6a 00                	push   0x0
c001cf6c:	6a 34                	push   0x34
c001cf6e:	55                   	push   ebp
c001cf6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf72:	83 c4 20             	add    esp,0x20
c001cf75:	85 c0                	test   eax,eax
c001cf77:	0f 85 5c 06 00 00    	jne    c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf7d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cf83:	0f 85 50 06 00 00    	jne    c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf89:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cf8c:	85 c0                	test   eax,eax
c001cf8e:	0f 84 45 06 00 00    	je     c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf94:	31 d2                	xor    edx,edx
c001cf96:	51                   	push   ecx
c001cf97:	52                   	push   edx
c001cf98:	50                   	push   eax
c001cf99:	55                   	push   ebp
c001cf9a:	e8 a1 65 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001cf9f:	83 c4 10             	add    esp,0x10
c001cfa2:	85 c0                	test   eax,eax
c001cfa4:	0f 85 2f 06 00 00    	jne    c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfaa:	83 ec 0c             	sub    esp,0xc
c001cfad:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cfb0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfb4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cfb8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfbc:	0f af c2             	imul   eax,edx
c001cfbf:	50                   	push   eax
c001cfc0:	e8 7e 28 ff ff       	call   c000f843 <malloc>
c001cfc5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfcf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfd3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfd7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfdb:	0f af c2             	imul   eax,edx
c001cfde:	99                   	cdq    
c001cfdf:	52                   	push   edx
c001cfe0:	50                   	push   eax
c001cfe1:	55                   	push   ebp
c001cfe2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfe5:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cfe8:	83 c4 20             	add    esp,0x20
c001cfeb:	85 c0                	test   eax,eax
c001cfed:	0f 84 e6 05 00 00    	je     c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cff3:	52                   	push   edx
c001cff4:	31 d2                	xor    edx,edx
c001cff6:	52                   	push   edx
c001cff7:	50                   	push   eax
c001cff8:	55                   	push   ebp
c001cff9:	e8 42 65 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001cffe:	83 c4 10             	add    esp,0x10
c001d001:	85 c0                	test   eax,eax
c001d003:	0f 85 d0 05 00 00    	jne    c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d009:	83 ec 0c             	sub    esp,0xc
c001d00c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d010:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d014:	31 f6                	xor    esi,esi
c001d016:	0f af c2             	imul   eax,edx
c001d019:	50                   	push   eax
c001d01a:	e8 24 28 ff ff       	call   c000f843 <malloc>
c001d01f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d022:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d029:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d02d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d031:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d035:	0f af c2             	imul   eax,edx
c001d038:	99                   	cdq    
c001d039:	52                   	push   edx
c001d03a:	50                   	push   eax
c001d03b:	55                   	push   ebp
c001d03c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d03f:	83 c4 20             	add    esp,0x20
c001d042:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d046:	0f 86 8a 00 00 00    	jbe    c001d0d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d04c:	0f b7 de             	movzx  ebx,si
c001d04f:	c1 e3 05             	shl    ebx,0x5
c001d052:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d056:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d059:	75 75                	jne    c001d0d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d05b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d05e:	31 d2                	xor    edx,edx
c001d060:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d064:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d06b:	50                   	push   eax
c001d06c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d06f:	52                   	push   edx
c001d070:	50                   	push   eax
c001d071:	55                   	push   ebp
c001d072:	e8 c9 64 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001d077:	83 c4 10             	add    esp,0x10
c001d07a:	85 c0                	test   eax,eax
c001d07c:	0f 85 57 05 00 00    	jne    c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d082:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d089:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d08c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d090:	31 d2                	xor    edx,edx
c001d092:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d096:	83 ec 0c             	sub    esp,0xc
c001d099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d09d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0a4:	50                   	push   eax
c001d0a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ad:	52                   	push   edx
c001d0ae:	50                   	push   eax
c001d0af:	55                   	push   ebp
c001d0b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0b3:	83 c4 1c             	add    esp,0x1c
c001d0b6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0b9:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d0bc:	50                   	push   eax
c001d0bd:	6a 00                	push   0x0
c001d0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0c3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d0c7:	50                   	push   eax
c001d0c8:	e8 ab 36 fe ff       	call   c0000778 <memset>
c001d0cd:	83 c4 10             	add    esp,0x10
c001d0d0:	46                   	inc    esi
c001d0d1:	e9 6c ff ff ff       	jmp    c001d042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d0d6:	53                   	push   ebx
c001d0d7:	31 db                	xor    ebx,ebx
c001d0d9:	68 00 01 00 00       	push   0x100
c001d0de:	6a 00                	push   0x0
c001d0e0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d0e4:	50                   	push   eax
c001d0e5:	e8 8e 36 fe ff       	call   c0000778 <memset>
c001d0ea:	83 c4 0c             	add    esp,0xc
c001d0ed:	68 00 01 00 00       	push   0x100
c001d0f2:	6a 00                	push   0x0
c001d0f4:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d0fb:	50                   	push   eax
c001d0fc:	e8 77 36 fe ff       	call   c0000778 <memset>
c001d101:	83 c4 10             	add    esp,0x10
c001d104:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d10c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d114:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d11c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d124:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d12c:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d130:	0f 86 30 01 00 00    	jbe    c001d266 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d136:	0f b7 f3             	movzx  esi,bx
c001d139:	6b f6 28             	imul   esi,esi,0x28
c001d13c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d140:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d143:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d147:	52                   	push   edx
c001d148:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d14c:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d150:	8b 06                	mov    eax,DWORD PTR [esi]
c001d152:	6b d2 28             	imul   edx,edx,0x28
c001d155:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d159:	31 d2                	xor    edx,edx
c001d15b:	52                   	push   edx
c001d15c:	50                   	push   eax
c001d15d:	55                   	push   ebp
c001d15e:	e8 dd 63 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001d163:	83 c4 0c             	add    esp,0xc
c001d166:	6a 20                	push   0x20
c001d168:	6a 00                	push   0x0
c001d16a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d171:	51                   	push   ecx
c001d172:	e8 01 36 fe ff       	call   c0000778 <memset>
c001d177:	59                   	pop    ecx
c001d178:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d17b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d17f:	52                   	push   edx
c001d180:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d187:	51                   	push   ecx
c001d188:	6a 00                	push   0x0
c001d18a:	6a 1f                	push   0x1f
c001d18c:	55                   	push   ebp
c001d18d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d190:	83 c4 1c             	add    esp,0x1c
c001d193:	6a 09                	push   0x9
c001d195:	68 ec bf 02 c0       	push   0xc002bfec
c001d19a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1a1:	51                   	push   ecx
c001d1a2:	e8 99 34 fe ff       	call   c0000640 <memcmp>
c001d1a7:	83 c4 10             	add    esp,0x10
c001d1aa:	85 c0                	test   eax,eax
c001d1ac:	75 21                	jne    c001d1cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1b6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1c1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d1c8:	89 d0                	mov    eax,edx
c001d1ca:	40                   	inc    eax
c001d1cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1cf:	50                   	push   eax
c001d1d0:	6a 09                	push   0x9
c001d1d2:	68 f6 bf 02 c0       	push   0xc002bff6
c001d1d7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1de:	50                   	push   eax
c001d1df:	e8 5c 34 fe ff       	call   c0000640 <memcmp>
c001d1e4:	83 c4 10             	add    esp,0x10
c001d1e7:	85 c0                	test   eax,eax
c001d1e9:	75 21                	jne    c001d20c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d1eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1f3:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1fe:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d205:	89 d0                	mov    eax,edx
c001d207:	40                   	inc    eax
c001d208:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d20c:	50                   	push   eax
c001d20d:	50                   	push   eax
c001d20e:	68 c2 bf 02 c0       	push   0xc002bfc2
c001d213:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d21a:	50                   	push   eax
c001d21b:	e8 a0 36 fe ff       	call   c00008c0 <strcmp>
c001d220:	83 c4 10             	add    esp,0x10
c001d223:	85 c0                	test   eax,eax
c001d225:	75 0f                	jne    c001d236 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d227:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d22a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d22e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d232:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d236:	50                   	push   eax
c001d237:	50                   	push   eax
c001d238:	68 ca bf 02 c0       	push   0xc002bfca
c001d23d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d244:	50                   	push   eax
c001d245:	e8 76 36 fe ff       	call   c00008c0 <strcmp>
c001d24a:	83 c4 10             	add    esp,0x10
c001d24d:	85 c0                	test   eax,eax
c001d24f:	75 0f                	jne    c001d260 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d251:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d254:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d258:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d25c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d260:	43                   	inc    ebx
c001d261:	e9 c6 fe ff ff       	jmp    c001d12c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d266:	31 d2                	xor    edx,edx
c001d268:	50                   	push   eax
c001d269:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d26d:	52                   	push   edx
c001d26e:	50                   	push   eax
c001d26f:	55                   	push   ebp
c001d270:	e8 cb 62 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001d275:	58                   	pop    eax
c001d276:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d27a:	e8 c4 25 ff ff       	call   c000f843 <malloc>
c001d27f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d282:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d286:	31 d2                	xor    edx,edx
c001d288:	58                   	pop    eax
c001d289:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d28d:	53                   	push   ebx
c001d28e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d292:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d296:	52                   	push   edx
c001d297:	50                   	push   eax
c001d298:	55                   	push   ebp
c001d299:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d29c:	83 c4 14             	add    esp,0x14
c001d29f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2a3:	e8 9b 25 ff ff       	call   c000f843 <malloc>
c001d2a8:	31 d2                	xor    edx,edx
c001d2aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2ae:	83 c4 0c             	add    esp,0xc
c001d2b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2b5:	52                   	push   edx
c001d2b6:	50                   	push   eax
c001d2b7:	55                   	push   ebp
c001d2b8:	e8 83 62 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001d2bd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2c0:	31 d2                	xor    edx,edx
c001d2c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d2c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2cd:	52                   	push   edx
c001d2ce:	50                   	push   eax
c001d2cf:	55                   	push   ebp
c001d2d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2d3:	83 c4 20             	add    esp,0x20
c001d2d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2de:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d2e2:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d2e6:	0f 84 f1 02 00 00    	je     c001d5dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d2ec:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d2f3:	31 d2                	xor    edx,edx
c001d2f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2f9:	c1 e8 03             	shr    eax,0x3
c001d2fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d300:	51                   	push   ecx
c001d301:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d305:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d309:	52                   	push   edx
c001d30a:	50                   	push   eax
c001d30b:	55                   	push   ebp
c001d30c:	e8 2f 62 ff ff       	call   c0013540 <File::seek(unsigned long long)>
c001d311:	5b                   	pop    ebx
c001d312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d316:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d31d:	e8 21 25 ff ff       	call   c000f843 <malloc>
c001d322:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d325:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d329:	31 d2                	xor    edx,edx
c001d32b:	5e                   	pop    esi
c001d32c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d330:	50                   	push   eax
c001d331:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d335:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d339:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d340:	52                   	push   edx
c001d341:	50                   	push   eax
c001d342:	55                   	push   ebp
c001d343:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d346:	83 c4 20             	add    esp,0x20
c001d349:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d351:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d355:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d359:	0f 8d 62 02 00 00    	jge    c001d5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d35f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d363:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d367:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d36c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d36f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d377:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d37b:	89 d8                	mov    eax,ebx
c001d37d:	c1 e8 08             	shr    eax,0x8
c001d380:	89 c6                	mov    esi,eax
c001d382:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d386:	c1 e6 04             	shl    esi,0x4
c001d389:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d38d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d390:	85 d2                	test   edx,edx
c001d392:	0f 85 bf 00 00 00    	jne    c001d457 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d398:	83 ec 0c             	sub    esp,0xc
c001d39b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d39f:	03 06                	add    eax,DWORD PTR [esi]
c001d3a1:	50                   	push   eax
c001d3a2:	e8 4b f8 ff ff       	call   c001cbf2 <Thr::getAddressOfKernelSymbol(char const*)>
c001d3a7:	83 c4 10             	add    esp,0x10
c001d3aa:	89 c2                	mov    edx,eax
c001d3ac:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3b1:	85 c0                	test   eax,eax
c001d3b3:	0f 85 9e 00 00 00    	jne    c001d457 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3b9:	83 ec 0c             	sub    esp,0xc
c001d3bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3c0:	03 06                	add    eax,DWORD PTR [esi]
c001d3c2:	50                   	push   eax
c001d3c3:	e8 2d 11 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d3c8:	83 c4 10             	add    esp,0x10
c001d3cb:	89 c2                	mov    edx,eax
c001d3cd:	85 c0                	test   eax,eax
c001d3cf:	0f 85 82 00 00 00    	jne    c001d457 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3d5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d3d9:	50                   	push   eax
c001d3da:	50                   	push   eax
c001d3db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3df:	03 06                	add    eax,DWORD PTR [esi]
c001d3e1:	50                   	push   eax
c001d3e2:	68 00 c0 02 c0       	push   0xc002c000
c001d3e7:	e8 da 5a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001d3ec:	58                   	pop    eax
c001d3ed:	5a                   	pop    edx
c001d3ee:	68 1a c0 02 c0       	push   0xc002c01a
c001d3f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3fa:	50                   	push   eax
c001d3fb:	e8 34 34 fe ff       	call   c0000834 <strcpy>
c001d400:	59                   	pop    ecx
c001d401:	58                   	pop    eax
c001d402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d406:	03 06                	add    eax,DWORD PTR [esi]
c001d408:	50                   	push   eax
c001d409:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d410:	50                   	push   eax
c001d411:	e8 5e 35 fe ff       	call   c0000974 <strcat>
c001d416:	58                   	pop    eax
c001d417:	5a                   	pop    edx
c001d418:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d41d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d424:	50                   	push   eax
c001d425:	e8 4a 35 fe ff       	call   c0000974 <strcat>
c001d42a:	83 c4 10             	add    esp,0x10
c001d42d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d432:	0f 84 43 01 00 00    	je     c001d57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d438:	83 ec 0c             	sub    esp,0xc
c001d43b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d442:	50                   	push   eax
c001d443:	e8 23 d1 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001d448:	83 c4 10             	add    esp,0x10
c001d44b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d44f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d453:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d457:	80 fb 01             	cmp    bl,0x1
c001d45a:	75 7d                	jne    c001d4d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d45c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d463:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d467:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d46b:	01 ce                	add    esi,ecx
c001d46d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d473:	0f 94 c0             	sete   al
c001d476:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d47c:	0f 94 c3             	sete   bl
c001d47f:	09 c3                	or     ebx,eax
c001d481:	8b 06                	mov    eax,DWORD PTR [esi]
c001d483:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d488:	74 36                	je     c001d4c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d48a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d48d:	84 db                	test   bl,bl
c001d48f:	75 0a                	jne    c001d49b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d491:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d495:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d499:	76 37                	jbe    c001d4d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d49b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d49f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4a4:	0f 84 d1 00 00 00    	je     c001d57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	68 31 c0 02 c0       	push   0xc002c031
c001d4b2:	e8 b4 d0 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001d4b7:	83 c4 10             	add    esp,0x10
c001d4ba:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4be:	eb 12                	jmp    c001d4d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4c0:	01 c1                	add    ecx,eax
c001d4c2:	84 db                	test   bl,bl
c001d4c4:	75 0c                	jne    c001d4d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4c6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4ca:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4ce:	77 02                	ja     c001d4d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4d0:	01 d1                	add    ecx,edx
c001d4d2:	89 0e                	mov    DWORD PTR [esi],ecx
c001d4d4:	e9 df 00 00 00       	jmp    c001d5b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4d9:	80 fb 02             	cmp    bl,0x2
c001d4dc:	75 71                	jne    c001d54f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d4de:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d4e5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d4e9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d4ed:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4f3:	74 15                	je     c001d50a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d4f5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4fb:	74 0d                	je     c001d50a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d4fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d501:	83 e8 04             	sub    eax,0x4
c001d504:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d508:	76 1f                	jbe    c001d529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d50a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d50e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d513:	74 66                	je     c001d57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d515:	83 ec 0c             	sub    esp,0xc
c001d518:	68 4d c0 02 c0       	push   0xc002c04d
c001d51d:	e8 49 d0 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001d522:	83 c4 10             	add    esp,0x10
c001d525:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d529:	8b 06                	mov    eax,DWORD PTR [esi]
c001d52b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d530:	74 13                	je     c001d545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d532:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d536:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d53d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d541:	01 c8                	add    eax,ecx
c001d543:	eb 04                	jmp    c001d549 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d545:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d549:	01 c2                	add    edx,eax
c001d54b:	89 16                	mov    DWORD PTR [esi],edx
c001d54d:	eb 69                	jmp    c001d5b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d54f:	0f b6 db             	movzx  ebx,bl
c001d552:	50                   	push   eax
c001d553:	50                   	push   eax
c001d554:	53                   	push   ebx
c001d555:	68 69 c0 02 c0       	push   0xc002c069
c001d55a:	e8 67 59 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001d55f:	83 c4 10             	add    esp,0x10
c001d562:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d567:	74 12                	je     c001d57b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d569:	83 ec 0c             	sub    esp,0xc
c001d56c:	68 74 c0 02 c0       	push   0xc002c074
c001d571:	e8 f5 cf ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001d576:	83 c4 10             	add    esp,0x10
c001d579:	eb 3d                	jmp    c001d5b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d57b:	83 ec 0c             	sub    esp,0xc
c001d57e:	55                   	push   ebp
c001d57f:	e8 5c 5f ff ff       	call   c00134e0 <File::close()>
c001d584:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d587:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d58a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d58d:	59                   	pop    ecx
c001d58e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d592:	e8 bc 22 ff ff       	call   c000f853 <free>
c001d597:	5b                   	pop    ebx
c001d598:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d59c:	e8 b2 22 ff ff       	call   c000f853 <free>
c001d5a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5a4:	e8 aa 22 ff ff       	call   c000f853 <free>
c001d5a9:	5e                   	pop    esi
c001d5aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5ae:	e8 a0 22 ff ff       	call   c000f853 <free>
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	eb 21                	jmp    c001d5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d5b8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d5bc:	e9 90 fd ff ff       	jmp    c001d351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d5c1:	83 ec 0c             	sub    esp,0xc
c001d5c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5c8:	e8 86 22 ff ff       	call   c000f853 <free>
c001d5cd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d5d1:	83 c4 10             	add    esp,0x10
c001d5d4:	e9 05 fd ff ff       	jmp    c001d2de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d5d9:	31 c0                	xor    eax,eax
c001d5db:	eb 33                	jmp    c001d610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d5dd:	83 ec 0c             	sub    esp,0xc
c001d5e0:	55                   	push   ebp
c001d5e1:	e8 fa 5e ff ff       	call   c00134e0 <File::close()>
c001d5e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5ef:	58                   	pop    eax
c001d5f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5f4:	e8 5a 22 ff ff       	call   c000f853 <free>
c001d5f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5fc:	e8 52 22 ff ff       	call   c000f853 <free>
c001d601:	5a                   	pop    edx
c001d602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d606:	e8 48 22 ff ff       	call   c000f853 <free>
c001d60b:	83 c4 10             	add    esp,0x10
c001d60e:	b0 01                	mov    al,0x1
c001d610:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d616:	5b                   	pop    ebx
c001d617:	5e                   	pop    esi
c001d618:	5f                   	pop    edi
c001d619:	5d                   	pop    ebp
c001d61a:	c3                   	ret    

c001d61b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d61b:	56                   	push   esi
c001d61c:	31 d2                	xor    edx,edx
c001d61e:	53                   	push   ebx
c001d61f:	8b 1d 40 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031340
c001d625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d629:	39 d3                	cmp    ebx,edx
c001d62b:	7e 1b                	jle    c001d648 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d62d:	8b 04 95 60 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceaa0]
c001d634:	39 c8                	cmp    eax,ecx
c001d636:	77 0d                	ja     c001d645 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d638:	8b 34 95 60 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffceca0]
c001d63f:	01 c6                	add    esi,eax
c001d641:	39 ce                	cmp    esi,ecx
c001d643:	77 05                	ja     c001d64a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d645:	42                   	inc    edx
c001d646:	eb e1                	jmp    c001d629 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d648:	31 c0                	xor    eax,eax
c001d64a:	5b                   	pop    ebx
c001d64b:	5e                   	pop    esi
c001d64c:	c3                   	ret    

c001d64d <Thr::getDriverNameFromAddress(unsigned long)>:
c001d64d:	53                   	push   ebx
c001d64e:	31 c0                	xor    eax,eax
c001d650:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d654:	8b 1d 40 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031340
c001d65a:	39 c3                	cmp    ebx,eax
c001d65c:	7e 22                	jle    c001d680 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d65e:	8b 14 85 60 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceaa0]
c001d665:	39 ca                	cmp    edx,ecx
c001d667:	77 14                	ja     c001d67d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d669:	03 14 85 60 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffceca0]
c001d670:	39 ca                	cmp    edx,ecx
c001d672:	76 09                	jbe    c001d67d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d674:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c001d67b:	eb 05                	jmp    c001d682 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d67d:	40                   	inc    eax
c001d67e:	eb da                	jmp    c001d65a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d680:	31 c0                	xor    eax,eax
c001d682:	5b                   	pop    ebx
c001d683:	c3                   	ret    

c001d684 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d684:	53                   	push   ebx
c001d685:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d689:	53                   	push   ebx
c001d68a:	e8 8c ff ff ff       	call   c001d61b <Thr::getDriverBaseFromAddress(unsigned long)>
c001d68f:	5a                   	pop    edx
c001d690:	31 d2                	xor    edx,edx
c001d692:	85 c0                	test   eax,eax
c001d694:	74 04                	je     c001d69a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d696:	89 da                	mov    edx,ebx
c001d698:	29 c2                	sub    edx,eax
c001d69a:	89 d0                	mov    eax,edx
c001d69c:	5b                   	pop    ebx
c001d69d:	c3                   	ret    

c001d69e <Thr::loadDLL(char const*, bool)>:
c001d69e:	55                   	push   ebp
c001d69f:	57                   	push   edi
c001d6a0:	56                   	push   esi
c001d6a1:	53                   	push   ebx
c001d6a2:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6a8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d6af:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d6b6:	56                   	push   esi
c001d6b7:	68 8c c0 02 c0       	push   0xc002c08c
c001d6bc:	e8 05 58 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001d6c1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d6c8:	e8 76 21 ff ff       	call   c000f843 <malloc>
c001d6cd:	83 c4 0c             	add    esp,0xc
c001d6d0:	89 c3                	mov    ebx,eax
c001d6d2:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001d6d8:	56                   	push   esi
c001d6d9:	50                   	push   eax
c001d6da:	e8 3f 5d ff ff       	call   c001341e <File::File(char const*, Process*)>
c001d6df:	83 c4 10             	add    esp,0x10
c001d6e2:	85 db                	test   ebx,ebx
c001d6e4:	75 3c                	jne    c001d722 <Thr::loadDLL(char const*, bool)+0x84>
c001d6e6:	89 e8                	mov    eax,ebp
c001d6e8:	84 c0                	test   al,al
c001d6ea:	0f 84 f0 01 00 00    	je     c001d8e0 <Thr::loadDLL(char const*, bool)+0x242>
c001d6f0:	50                   	push   eax
c001d6f1:	50                   	push   eax
c001d6f2:	68 9d c0 02 c0       	push   0xc002c09d
c001d6f7:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d6fb:	57                   	push   edi
c001d6fc:	e8 33 31 fe ff       	call   c0000834 <strcpy>
c001d701:	58                   	pop    eax
c001d702:	5a                   	pop    edx
c001d703:	56                   	push   esi
c001d704:	57                   	push   edi
c001d705:	e8 6a 32 fe ff       	call   c0000974 <strcat>
c001d70a:	59                   	pop    ecx
c001d70b:	58                   	pop    eax
c001d70c:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d711:	57                   	push   edi
c001d712:	e8 5d 32 fe ff       	call   c0000974 <strcat>
c001d717:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d71a:	e8 4c ce ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	50                   	push   eax
c001d723:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d727:	50                   	push   eax
c001d728:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d72c:	50                   	push   eax
c001d72d:	53                   	push   ebx
c001d72e:	e8 fb 5f ff ff       	call   c001372e <File::stat(unsigned long long*, bool*)>
c001d733:	83 c4 10             	add    esp,0x10
c001d736:	85 db                	test   ebx,ebx
c001d738:	74 0c                	je     c001d746 <Thr::loadDLL(char const*, bool)+0xa8>
c001d73a:	83 ec 0c             	sub    esp,0xc
c001d73d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d73f:	53                   	push   ebx
c001d740:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d743:	83 c4 10             	add    esp,0x10
c001d746:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d74b:	75 0a                	jne    c001d757 <Thr::loadDLL(char const*, bool)+0xb9>
c001d74d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d751:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d755:	75 3c                	jne    c001d793 <Thr::loadDLL(char const*, bool)+0xf5>
c001d757:	89 e8                	mov    eax,ebp
c001d759:	84 c0                	test   al,al
c001d75b:	0f 84 67 01 00 00    	je     c001d8c8 <Thr::loadDLL(char const*, bool)+0x22a>
c001d761:	50                   	push   eax
c001d762:	50                   	push   eax
c001d763:	68 9d c0 02 c0       	push   0xc002c09d
c001d768:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d76c:	53                   	push   ebx
c001d76d:	e8 c2 30 fe ff       	call   c0000834 <strcpy>
c001d772:	58                   	pop    eax
c001d773:	5a                   	pop    edx
c001d774:	56                   	push   esi
c001d775:	53                   	push   ebx
c001d776:	e8 f9 31 fe ff       	call   c0000974 <strcat>
c001d77b:	59                   	pop    ecx
c001d77c:	5f                   	pop    edi
c001d77d:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d782:	53                   	push   ebx
c001d783:	e8 ec 31 fe ff       	call   c0000974 <strcat>
c001d788:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d78b:	e8 db cd ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001d790:	83 c4 10             	add    esp,0x10
c001d793:	e8 9b 47 ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c001d798:	51                   	push   ecx
c001d799:	68 03 08 00 00       	push   0x803
c001d79e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d7a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d7a6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d7ac:	83 d3 00             	adc    ebx,0x0
c001d7af:	89 ca                	mov    edx,ecx
c001d7b1:	89 d1                	mov    ecx,edx
c001d7b3:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d7b7:	51                   	push   ecx
c001d7b8:	50                   	push   eax
c001d7b9:	e8 98 4c ff ff       	call   c0012456 <VAS::allocatePages(int, int)>
c001d7be:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d7c2:	89 c3                	mov    ebx,eax
c001d7c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d7c8:	05 ff 0f 00 00       	add    eax,0xfff
c001d7cd:	83 d2 00             	adc    edx,0x0
c001d7d0:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7d4:	c1 ea 0c             	shr    edx,0xc
c001d7d7:	52                   	push   edx
c001d7d8:	50                   	push   eax
c001d7d9:	53                   	push   ebx
c001d7da:	68 b2 c0 02 c0       	push   0xc002c0b2
c001d7df:	e8 e2 56 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001d7e4:	83 c4 14             	add    esp,0x14
c001d7e7:	56                   	push   esi
c001d7e8:	e8 a7 2f fe ff       	call   c0000794 <strlen>
c001d7ed:	8b 3d 40 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031340
c001d7f3:	40                   	inc    eax
c001d7f4:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7f7:	e8 47 20 ff ff       	call   c000f843 <malloc>
c001d7fc:	89 04 bd 60 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce8a0],eax
c001d803:	5f                   	pop    edi
c001d804:	58                   	pop    eax
c001d805:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c001d80a:	56                   	push   esi
c001d80b:	ff 34 85 60 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce8a0]
c001d812:	e8 1d 30 fe ff       	call   c0000834 <strcpy>
c001d817:	a1 40 13 03 c0       	mov    eax,ds:0xc0031340
c001d81c:	8d 50 01             	lea    edx,[eax+0x1]
c001d81f:	89 1c 85 60 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceaa0],ebx
c001d826:	89 15 40 13 03 c0    	mov    DWORD PTR ds:0xc0031340,edx
c001d82c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d830:	83 c4 0c             	add    esp,0xc
c001d833:	89 14 85 60 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffceca0],edx
c001d83a:	6a 01                	push   0x1
c001d83c:	53                   	push   ebx
c001d83d:	56                   	push   esi
c001d83e:	e8 bc f6 ff ff       	call   c001ceff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d843:	83 c4 10             	add    esp,0x10
c001d846:	89 c7                	mov    edi,eax
c001d848:	84 c0                	test   al,al
c001d84a:	0f 85 8c 00 00 00    	jne    c001d8dc <Thr::loadDLL(char const*, bool)+0x23e>
c001d850:	89 e8                	mov    eax,ebp
c001d852:	84 c0                	test   al,al
c001d854:	74 76                	je     c001d8cc <Thr::loadDLL(char const*, bool)+0x22e>
c001d856:	83 ec 0c             	sub    esp,0xc
c001d859:	68 d6 c0 02 c0       	push   0xc002c0d6
c001d85e:	e8 08 cd ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001d863:	83 c4 10             	add    esp,0x10
c001d866:	eb 64                	jmp    c001d8cc <Thr::loadDLL(char const*, bool)+0x22e>
c001d868:	e8 c6 46 ff ff       	call   c0011f33 <Virt::getAKernelVAS()>
c001d86d:	89 f5                	mov    ebp,esi
c001d86f:	c1 e5 0c             	shl    ebp,0xc
c001d872:	52                   	push   edx
c001d873:	01 dd                	add    ebp,ebx
c001d875:	52                   	push   edx
c001d876:	55                   	push   ebp
c001d877:	50                   	push   eax
c001d878:	e8 53 47 ff ff       	call   c0011fd0 <VAS::getPageTableEntry(unsigned long)>
c001d87d:	83 c4 10             	add    esp,0x10
c001d880:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d883:	75 0c                	jne    c001d891 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d885:	83 ec 0c             	sub    esp,0xc
c001d888:	55                   	push   ebp
c001d889:	e8 c8 25 ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c001d88e:	83 c4 10             	add    esp,0x10
c001d891:	46                   	inc    esi
c001d892:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d896:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d89a:	05 ff 0f 00 00       	add    eax,0xfff
c001d89f:	83 d2 00             	adc    edx,0x0
c001d8a2:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8a6:	c1 ea 0c             	shr    edx,0xc
c001d8a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d8b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d8b5:	ba 00 00 00 00       	mov    edx,0x0
c001d8ba:	89 d0                	mov    eax,edx
c001d8bc:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d8c0:	72 a6                	jb     c001d868 <Thr::loadDLL(char const*, bool)+0x1ca>
c001d8c2:	89 f8                	mov    eax,edi
c001d8c4:	84 c0                	test   al,al
c001d8c6:	75 18                	jne    c001d8e0 <Thr::loadDLL(char const*, bool)+0x242>
c001d8c8:	31 db                	xor    ebx,ebx
c001d8ca:	eb 14                	jmp    c001d8e0 <Thr::loadDLL(char const*, bool)+0x242>
c001d8cc:	83 ec 0c             	sub    esp,0xc
c001d8cf:	68 f5 c0 02 c0       	push   0xc002c0f5
c001d8d4:	e8 92 cc ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001d8d9:	83 c4 10             	add    esp,0x10
c001d8dc:	31 f6                	xor    esi,esi
c001d8de:	eb b2                	jmp    c001d892 <Thr::loadDLL(char const*, bool)+0x1f4>
c001d8e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8e6:	89 d8                	mov    eax,ebx
c001d8e8:	5b                   	pop    ebx
c001d8e9:	5e                   	pop    esi
c001d8ea:	5f                   	pop    edi
c001d8eb:	5d                   	pop    ebp
c001d8ec:	c3                   	ret    

c001d8ed <Thr::executeDLL(unsigned long, void*)>:
c001d8ed:	56                   	push   esi
c001d8ee:	53                   	push   ebx
c001d8ef:	52                   	push   edx
c001d8f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8f4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d8f8:	85 db                	test   ebx,ebx
c001d8fa:	75 10                	jne    c001d90c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d8fc:	83 ec 0c             	sub    esp,0xc
c001d8ff:	68 11 c1 02 c0       	push   0xc002c111
c001d904:	e8 62 cc ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001d909:	83 c4 10             	add    esp,0x10
c001d90c:	50                   	push   eax
c001d90d:	50                   	push   eax
c001d90e:	53                   	push   ebx
c001d90f:	68 3b c1 02 c0       	push   0xc002c13b
c001d914:	e8 ad 55 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001d919:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d91d:	89 d8                	mov    eax,ebx
c001d91f:	83 c4 14             	add    esp,0x14
c001d922:	5b                   	pop    ebx
c001d923:	5e                   	pop    esi
c001d924:	ff e0                	jmp    eax

c001d926 <changeTSS>:
c001d926:	83 ec 14             	sub    esp,0x14
c001d929:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d92e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d931:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d936:	c1 e2 15             	shl    edx,0x15
c001d939:	29 d0                	sub    eax,edx
c001d93b:	50                   	push   eax
c001d93c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001d941:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d947:	05 7c 11 00 00       	add    eax,0x117c
c001d94c:	50                   	push   eax
c001d94d:	e8 68 3b ff ff       	call   c00114ba <TSS::setESP(unsigned long)>
c001d952:	83 c4 1c             	add    esp,0x1c
c001d955:	c3                   	ret    

c001d956 <Process::addArgs(char**)>:
c001d956:	57                   	push   edi
c001d957:	56                   	push   esi
c001d958:	53                   	push   ebx
c001d959:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d95d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d961:	c7 86 36 19 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1936],0x0
c001d96b:	85 ff                	test   edi,edi
c001d96d:	74 3d                	je     c001d9ac <Process::addArgs(char**)+0x56>
c001d96f:	8b 07                	mov    eax,DWORD PTR [edi]
c001d971:	85 c0                	test   eax,eax
c001d973:	74 37                	je     c001d9ac <Process::addArgs(char**)+0x56>
c001d975:	31 db                	xor    ebx,ebx
c001d977:	83 ec 0c             	sub    esp,0xc
c001d97a:	50                   	push   eax
c001d97b:	e8 14 2e fe ff       	call   c0000794 <strlen>
c001d980:	40                   	inc    eax
c001d981:	89 04 24             	mov    DWORD PTR [esp],eax
c001d984:	e8 ba 1e ff ff       	call   c000f843 <malloc>
c001d989:	89 84 9e 3a 19 00 00 	mov    DWORD PTR [esi+ebx*4+0x193a],eax
c001d990:	5a                   	pop    edx
c001d991:	59                   	pop    ecx
c001d992:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d995:	43                   	inc    ebx
c001d996:	50                   	push   eax
c001d997:	e8 98 2e fe ff       	call   c0000834 <strcpy>
c001d99c:	ff 86 36 19 00 00    	inc    DWORD PTR [esi+0x1936]
c001d9a2:	83 c4 10             	add    esp,0x10
c001d9a5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9a8:	85 c0                	test   eax,eax
c001d9aa:	75 cb                	jne    c001d977 <Process::addArgs(char**)+0x21>
c001d9ac:	5b                   	pop    ebx
c001d9ad:	5e                   	pop    esi
c001d9ae:	5f                   	pop    edi
c001d9af:	c3                   	ret    

c001d9b0 <Process::Process(char const*, Process*, char**)>:
c001d9b0:	56                   	push   esi
c001d9b1:	53                   	push   ebx
c001d9b2:	83 ec 14             	sub    esp,0x14
c001d9b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9b9:	05 0c 02 00 00       	add    eax,0x20c
c001d9be:	bb 07 00 00 00       	mov    ebx,0x7
c001d9c3:	89 c6                	mov    esi,eax
c001d9c5:	85 db                	test   ebx,ebx
c001d9c7:	78 15                	js     c001d9de <Process::Process(char const*, Process*, char**)+0x2e>
c001d9c9:	83 ec 0c             	sub    esp,0xc
c001d9cc:	56                   	push   esi
c001d9cd:	e8 50 b2 00 00       	call   c0028c22 <ThreadControlBlock::ThreadControlBlock()>
c001d9d2:	83 c4 10             	add    esp,0x10
c001d9d5:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001d9db:	4b                   	dec    ebx
c001d9dc:	eb e7                	jmp    c001d9c5 <Process::Process(char const*, Process*, char**)+0x15>
c001d9de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e2:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001d9e9:	83 ec 0c             	sub    esp,0xc
c001d9ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9f0:	e8 c7 c9 ff ff       	call   c001a3bc <Krnl::newProcessEnv(Process*)>
c001d9f5:	83 c4 10             	add    esp,0x10
c001d9f8:	89 c2                	mov    edx,eax
c001d9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9fe:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001da04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da08:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001da11:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001da16:	8d 50 01             	lea    edx,[eax+0x1]
c001da19:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001da1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da23:	89 02                	mov    DWORD PTR [edx],eax
c001da25:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001da2d:	83 ec 0c             	sub    esp,0xc
c001da30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da34:	e8 0a 1e ff ff       	call   c000f843 <malloc>
c001da39:	83 c4 10             	add    esp,0x10
c001da3c:	89 c3                	mov    ebx,eax
c001da3e:	83 ec 08             	sub    esp,0x8
c001da41:	6a 00                	push   0x0
c001da43:	53                   	push   ebx
c001da44:	e8 b5 4d ff ff       	call   c00127fe <VAS::VAS(bool)>
c001da49:	83 c4 10             	add    esp,0x10
c001da4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da50:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001da56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da5a:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001da64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da6c:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001da72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da76:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001da7c:	85 c0                	test   eax,eax
c001da7e:	74 42                	je     c001dac2 <Process::Process(char const*, Process*, char**)+0x112>
c001da80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da84:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001da8a:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001da90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da94:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001da9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da9e:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001daa4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001daaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daae:	05 0c 01 00 00       	add    eax,0x10c
c001dab3:	83 ec 08             	sub    esp,0x8
c001dab6:	52                   	push   edx
c001dab7:	50                   	push   eax
c001dab8:	e8 77 2d fe ff       	call   c0000834 <strcpy>
c001dabd:	83 c4 10             	add    esp,0x10
c001dac0:	eb 63                	jmp    c001db25 <Process::Process(char const*, Process*, char**)+0x175>
c001dac2:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001daca:	83 ec 0c             	sub    esp,0xc
c001dacd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dad1:	e8 6d 1d ff ff       	call   c000f843 <malloc>
c001dad6:	83 c4 10             	add    esp,0x10
c001dad9:	89 c3                	mov    ebx,eax
c001dadb:	83 ec 08             	sub    esp,0x8
c001dade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dae2:	53                   	push   ebx
c001dae3:	e8 d0 36 ff ff       	call   c00111b8 <VgaText::VgaText(char const*)>
c001dae8:	83 c4 10             	add    esp,0x10
c001daeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daef:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001daf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf9:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001daff:	83 ec 0c             	sub    esp,0xc
c001db02:	50                   	push   eax
c001db03:	e8 a3 2a ff ff       	call   c00105ab <addToTerminalCycle(VgaText*)>
c001db08:	83 c4 10             	add    esp,0x10
c001db0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0f:	05 0c 01 00 00       	add    eax,0x10c
c001db14:	83 ec 08             	sub    esp,0x8
c001db17:	68 5a c1 02 c0       	push   0xc002c15a
c001db1c:	50                   	push   eax
c001db1d:	e8 12 2d fe ff       	call   c0000834 <strcpy>
c001db22:	83 c4 10             	add    esp,0x10
c001db25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db29:	83 c0 0c             	add    eax,0xc
c001db2c:	83 ec 08             	sub    esp,0x8
c001db2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db33:	50                   	push   eax
c001db34:	e8 fb 2c fe ff       	call   c0000834 <strcpy>
c001db39:	83 c4 10             	add    esp,0x10
c001db3c:	83 ec 08             	sub    esp,0x8
c001db3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001db43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db47:	e8 0a fe ff ff       	call   c001d956 <Process::addArgs(char**)>
c001db4c:	83 c4 10             	add    esp,0x10
c001db4f:	83 ec 08             	sub    esp,0x8
c001db52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db5a:	e8 6a ee ff ff       	call   c001c9c9 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001db5f:	83 c4 10             	add    esp,0x10
c001db62:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db66:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db6a:	83 f0 01             	xor    eax,0x1
c001db6d:	88 c2                	mov    dl,al
c001db6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db73:	88 90 3e 1b 00 00    	mov    BYTE PTR [eax+0x1b3e],dl
c001db79:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001db7e:	83 ec 08             	sub    esp,0x8
c001db81:	50                   	push   eax
c001db82:	68 58 c2 02 c0       	push   0xc002c258
c001db87:	e8 3a 53 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001db8c:	83 c4 10             	add    esp,0x10
c001db8f:	90                   	nop
c001db90:	83 c4 14             	add    esp,0x14
c001db93:	5b                   	pop    ebx
c001db94:	5e                   	pop    esi
c001db95:	c3                   	ret    

c001db96 <Process::Process(bool, char const*, Process*, char**)>:
c001db96:	56                   	push   esi
c001db97:	53                   	push   ebx
c001db98:	83 ec 24             	sub    esp,0x24
c001db9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001db9f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dba3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba7:	05 0c 02 00 00       	add    eax,0x20c
c001dbac:	bb 07 00 00 00       	mov    ebx,0x7
c001dbb1:	89 c6                	mov    esi,eax
c001dbb3:	85 db                	test   ebx,ebx
c001dbb5:	78 15                	js     c001dbcc <Process::Process(bool, char const*, Process*, char**)+0x36>
c001dbb7:	83 ec 0c             	sub    esp,0xc
c001dbba:	56                   	push   esi
c001dbbb:	e8 62 b0 00 00       	call   c0028c22 <ThreadControlBlock::ThreadControlBlock()>
c001dbc0:	83 c4 10             	add    esp,0x10
c001dbc3:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001dbc9:	4b                   	dec    ebx
c001dbca:	eb e7                	jmp    c001dbb3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dbcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbd0:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001dbd7:	83 ec 0c             	sub    esp,0xc
c001dbda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dbde:	e8 d9 c7 ff ff       	call   c001a3bc <Krnl::newProcessEnv(Process*)>
c001dbe3:	83 c4 10             	add    esp,0x10
c001dbe6:	89 c2                	mov    edx,eax
c001dbe8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbec:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001dbf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf6:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001dbff:	a1 10 d9 02 c0       	mov    eax,ds:0xc002d910
c001dc04:	8d 50 01             	lea    edx,[eax+0x1]
c001dc07:	89 15 10 d9 02 c0    	mov    DWORD PTR ds:0xc002d910,edx
c001dc0d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc11:	89 02                	mov    DWORD PTR [edx],eax
c001dc13:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dc1b:	83 ec 0c             	sub    esp,0xc
c001dc1e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc22:	e8 1c 1c ff ff       	call   c000f843 <malloc>
c001dc27:	83 c4 10             	add    esp,0x10
c001dc2a:	89 c3                	mov    ebx,eax
c001dc2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc31:	83 ec 08             	sub    esp,0x8
c001dc34:	50                   	push   eax
c001dc35:	53                   	push   ebx
c001dc36:	e8 c3 4b ff ff       	call   c00127fe <VAS::VAS(bool)>
c001dc3b:	83 c4 10             	add    esp,0x10
c001dc3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc42:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001dc48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc4c:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001dc56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc5e:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001dc64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc68:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dc6e:	85 c0                	test   eax,eax
c001dc70:	74 42                	je     c001dcb4 <Process::Process(bool, char const*, Process*, char**)+0x11e>
c001dc72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc76:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dc7c:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001dc82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc86:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001dc8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc90:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dc96:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca0:	05 0c 01 00 00       	add    eax,0x10c
c001dca5:	83 ec 08             	sub    esp,0x8
c001dca8:	52                   	push   edx
c001dca9:	50                   	push   eax
c001dcaa:	e8 85 2b fe ff       	call   c0000834 <strcpy>
c001dcaf:	83 c4 10             	add    esp,0x10
c001dcb2:	eb 63                	jmp    c001dd17 <Process::Process(bool, char const*, Process*, char**)+0x181>
c001dcb4:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dcbc:	83 ec 0c             	sub    esp,0xc
c001dcbf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dcc3:	e8 7b 1b ff ff       	call   c000f843 <malloc>
c001dcc8:	83 c4 10             	add    esp,0x10
c001dccb:	89 c3                	mov    ebx,eax
c001dccd:	83 ec 08             	sub    esp,0x8
c001dcd0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dcd4:	53                   	push   ebx
c001dcd5:	e8 de 34 ff ff       	call   c00111b8 <VgaText::VgaText(char const*)>
c001dcda:	83 c4 10             	add    esp,0x10
c001dcdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce1:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001dce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dceb:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001dcf1:	83 ec 0c             	sub    esp,0xc
c001dcf4:	50                   	push   eax
c001dcf5:	e8 b1 28 ff ff       	call   c00105ab <addToTerminalCycle(VgaText*)>
c001dcfa:	83 c4 10             	add    esp,0x10
c001dcfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd01:	05 0c 01 00 00       	add    eax,0x10c
c001dd06:	83 ec 08             	sub    esp,0x8
c001dd09:	68 5a c1 02 c0       	push   0xc002c15a
c001dd0e:	50                   	push   eax
c001dd0f:	e8 20 2b fe ff       	call   c0000834 <strcpy>
c001dd14:	83 c4 10             	add    esp,0x10
c001dd17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1b:	83 c0 0c             	add    eax,0xc
c001dd1e:	83 ec 08             	sub    esp,0x8
c001dd21:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd25:	50                   	push   eax
c001dd26:	e8 09 2b fe ff       	call   c0000834 <strcpy>
c001dd2b:	83 c4 10             	add    esp,0x10
c001dd2e:	83 ec 08             	sub    esp,0x8
c001dd31:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd39:	e8 18 fc ff ff       	call   c001d956 <Process::addArgs(char**)>
c001dd3e:	83 c4 10             	add    esp,0x10
c001dd41:	90                   	nop
c001dd42:	83 c4 24             	add    esp,0x24
c001dd45:	5b                   	pop    ebx
c001dd46:	5e                   	pop    esi
c001dd47:	c3                   	ret    

c001dd48 <disableIRQs()>:
c001dd48:	fa                   	cli    
c001dd49:	ff 05 0c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b0c
c001dd4f:	c3                   	ret    

c001dd50 <getIRQNestingLevel()>:
c001dd50:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c001dd55:	c3                   	ret    

c001dd56 <enableIRQs()>:
c001dd56:	a1 0c 1b 03 c0       	mov    eax,ds:0xc0031b0c
c001dd5b:	48                   	dec    eax
c001dd5c:	a3 0c 1b 03 c0       	mov    ds:0xc0031b0c,eax
c001dd61:	75 01                	jne    c001dd64 <enableIRQs()+0xe>
c001dd63:	fb                   	sti    
c001dd64:	c3                   	ret    

c001dd65 <lockScheduler()>:
c001dd65:	eb e1                	jmp    c001dd48 <disableIRQs()>

c001dd67 <unlockScheduler()>:
c001dd67:	eb ed                	jmp    c001dd56 <enableIRQs()>

c001dd69 <userModeEntryPoint(void*)>:
c001dd69:	83 ec 0c             	sub    esp,0xc
c001dd6c:	e8 f6 ff ff ff       	call   c001dd67 <unlockScheduler()>
c001dd71:	fb                   	sti    
c001dd72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd7a:	8b 80 2e 19 00 00    	mov    eax,DWORD PTR [eax+0x192e]
c001dd80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd84:	83 c4 0c             	add    esp,0xc
c001dd87:	e9 9e 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd8c <lockStuff()>:
c001dd8c:	e8 b7 ff ff ff       	call   c001dd48 <disableIRQs()>
c001dd91:	ff 05 08 1b 03 c0    	inc    DWORD PTR ds:0xc0031b08
c001dd97:	c3                   	ret    

c001dd98 <taskStartupFunction>:
c001dd98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd9d:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dda0:	c3                   	ret    

c001dda1 <updateTimeUsed()>:
c001dda1:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c001dda6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddac:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ddb3:	74 50                	je     c001de05 <updateTimeUsed()+0x64>
c001ddb5:	57                   	push   edi
c001ddb6:	56                   	push   esi
c001ddb7:	53                   	push   ebx
c001ddb8:	0f 31                	rdtsc  
c001ddba:	89 c1                	mov    ecx,eax
c001ddbc:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c001ddc1:	2b 0d 38 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b38
c001ddc7:	89 d3                	mov    ebx,edx
c001ddc9:	89 0d 40 1b 03 c0    	mov    DWORD PTR ds:0xc0031b40,ecx
c001ddcf:	1b 1d 3c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b3c
c001ddd5:	a3 38 1b 03 c0       	mov    ds:0xc0031b38,eax
c001ddda:	89 1d 44 1b 03 c0    	mov    DWORD PTR ds:0xc0031b44,ebx
c001dde0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dde5:	89 15 4c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b4c,edx
c001ddeb:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001ddee:	89 15 3c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b3c,edx
c001ddf4:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001ddf7:	01 f1                	add    ecx,esi
c001ddf9:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ddfc:	11 fb                	adc    ebx,edi
c001ddfe:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de01:	5b                   	pop    ebx
c001de02:	5e                   	pop    esi
c001de03:	5f                   	pop    edi
c001de04:	c3                   	ret    
c001de05:	c3                   	ret    

c001de06 <switchToThread(ThreadControlBlock*)>:
c001de06:	53                   	push   ebx
c001de07:	83 ec 08             	sub    esp,0x8
c001de0a:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001de0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de13:	85 c0                	test   eax,eax
c001de15:	75 30                	jne    c001de47 <switchToThread(ThreadControlBlock*)+0x41>
c001de17:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de1a:	3c ff                	cmp    al,0xff
c001de1c:	74 25                	je     c001de43 <switchToThread(ThreadControlBlock*)+0x3d>
c001de1e:	0f b6 d0             	movzx  edx,al
c001de21:	b8 84 03 00 00       	mov    eax,0x384
c001de26:	29 d0                	sub    eax,edx
c001de28:	c1 e0 10             	shl    eax,0x10
c001de2b:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001de2e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001de31:	e8 6b ff ff ff       	call   c001dda1 <updateTimeUsed()>
c001de36:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001de3a:	83 c4 08             	add    esp,0x8
c001de3d:	5b                   	pop    ebx
c001de3e:	e9 1f 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de43:	31 c0                	xor    eax,eax
c001de45:	eb e7                	jmp    c001de2e <switchToThread(ThreadControlBlock*)+0x28>
c001de47:	c7 05 04 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x1
c001de51:	83 c4 08             	add    esp,0x8
c001de54:	5b                   	pop    ebx
c001de55:	c3                   	ret    

c001de56 <Semaphore::Semaphore(int)>:
c001de56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de5e:	89 10                	mov    DWORD PTR [eax],edx
c001de60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de64:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de6f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de7a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de81:	90                   	nop
c001de82:	c3                   	ret    
c001de83:	90                   	nop

c001de84 <Mutex::Mutex()>:
c001de84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de88:	6a 01                	push   0x1
c001de8a:	50                   	push   eax
c001de8b:	e8 c6 ff ff ff       	call   c001de56 <Semaphore::Semaphore(int)>
c001de90:	83 c4 08             	add    esp,0x8
c001de93:	90                   	nop
c001de94:	c3                   	ret    
c001de95:	90                   	nop

c001de96 <Process::createThread(void (*)(void*), void*, int)>:
c001de96:	55                   	push   ebp
c001de97:	31 c9                	xor    ecx,ecx
c001de99:	57                   	push   edi
c001de9a:	56                   	push   esi
c001de9b:	53                   	push   ebx
c001de9c:	83 ec 1c             	sub    esp,0x1c
c001de9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dea3:	66 8b b3 24 19 00 00 	mov    si,WORD PTR [ebx+0x1924]
c001deaa:	89 f2                	mov    edx,esi
c001deac:	0f b7 c2             	movzx  eax,dx
c001deaf:	83 e2 01             	and    edx,0x1
c001deb2:	74 14                	je     c001dec8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001deb4:	d1 f8                	sar    eax,1
c001deb6:	41                   	inc    ecx
c001deb7:	89 c2                	mov    edx,eax
c001deb9:	83 f9 10             	cmp    ecx,0x10
c001debc:	75 ee                	jne    c001deac <Process::createThread(void (*)(void*), void*, int)+0x16>
c001debe:	83 c4 1c             	add    esp,0x1c
c001dec1:	31 c0                	xor    eax,eax
c001dec3:	5b                   	pop    ebx
c001dec4:	5e                   	pop    esi
c001dec5:	5f                   	pop    edi
c001dec6:	5d                   	pop    ebp
c001dec7:	c3                   	ret    
c001dec8:	83 ec 08             	sub    esp,0x8
c001decb:	b8 01 00 00 00       	mov    eax,0x1
c001ded0:	d3 e0                	shl    eax,cl
c001ded2:	09 c6                	or     esi,eax
c001ded4:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001deda:	66 89 b3 24 19 00 00 	mov    WORD PTR [ebx+0x1924],si
c001dee1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dee4:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001dee7:	8d 04 c1             	lea    eax,[ecx+eax*8]
c001deea:	8d 34 c0             	lea    esi,[eax+eax*8]
c001deed:	01 f6                	add    esi,esi
c001deef:	01 ce                	add    esi,ecx
c001def1:	8d 04 33             	lea    eax,[ebx+esi*1]
c001def4:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001defa:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df00:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df04:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df0a:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df10:	89 ca                	mov    edx,ecx
c001df12:	f7 da                	neg    edx
c001df14:	c1 e2 15             	shl    edx,0x15
c001df17:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df1d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df23:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df27:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df31:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df37:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df3b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001df41:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df4b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df55:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001df5c:	50                   	push   eax
c001df5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df61:	68 28 1b 03 c0       	push   0xc0031b28
c001df66:	e8 45 ab 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df6b:	83 c4 10             	add    esp,0x10
c001df6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df72:	83 c4 1c             	add    esp,0x1c
c001df75:	5b                   	pop    ebx
c001df76:	5e                   	pop    esi
c001df77:	5f                   	pop    edi
c001df78:	5d                   	pop    ebp
c001df79:	c3                   	ret    

c001df7a <Process::createUserThread()>:
c001df7a:	83 ec 0c             	sub    esp,0xc
c001df7d:	68 80 00 00 00       	push   0x80
c001df82:	6a 00                	push   0x0
c001df84:	68 69 dd 01 c0       	push   0xc001dd69
c001df89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df8d:	e8 04 ff ff ff       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c001df92:	83 c4 1c             	add    esp,0x1c
c001df95:	c3                   	ret    

c001df96 <setupMultitasking(void (*)())>:
c001df96:	56                   	push   esi
c001df97:	53                   	push   ebx
c001df98:	53                   	push   ebx
c001df99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df9d:	eb 10                	jmp    c001dfaf <setupMultitasking(void (*)())+0x19>
c001df9f:	83 ec 0c             	sub    esp,0xc
c001dfa2:	68 28 1b 03 c0       	push   0xc0031b28
c001dfa7:	e8 56 aa 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfac:	83 c4 10             	add    esp,0x10
c001dfaf:	83 ec 0c             	sub    esp,0xc
c001dfb2:	68 28 1b 03 c0       	push   0xc0031b28
c001dfb7:	e8 2a aa 00 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfbc:	83 c4 10             	add    esp,0x10
c001dfbf:	84 c0                	test   al,al
c001dfc1:	74 dc                	je     c001df9f <setupMultitasking(void (*)())+0x9>
c001dfc3:	83 ec 0c             	sub    esp,0xc
c001dfc6:	68 3f 1b 00 00       	push   0x1b3f
c001dfcb:	e8 73 18 ff ff       	call   c000f843 <malloc>
c001dfd0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfd7:	89 c3                	mov    ebx,eax
c001dfd9:	6a 00                	push   0x0
c001dfdb:	68 5e c1 02 c0       	push   0xc002c15e
c001dfe0:	6a 01                	push   0x1
c001dfe2:	50                   	push   eax
c001dfe3:	e8 ae fb ff ff       	call   c001db96 <Process::Process(bool, char const*, Process*, char**)>
c001dfe8:	83 c4 18             	add    esp,0x18
c001dfeb:	89 1d 34 1b 03 c0    	mov    DWORD PTR ds:0xc0031b34,ebx
c001dff1:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001dff7:	68 80 c2 02 c0       	push   0xc002c280
c001dffc:	e8 c5 4e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e001:	58                   	pop    eax
c001e002:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001e008:	e8 20 2d ff ff       	call   c0010d2d <setActiveTerminal(VgaText*)>
c001e00d:	66 83 8b 24 19 00 00 01 	or     WORD PTR [ebx+0x1924],0x1
c001e015:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001e01b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e01e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e028:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e02e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e034:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e03e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e048:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e052:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e058:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e05e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e068:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e06e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e078:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e07e:	5a                   	pop    edx
c001e07f:	59                   	pop    ecx
c001e080:	68 5a c1 02 c0       	push   0xc002c15a
c001e085:	50                   	push   eax
c001e086:	e8 a9 27 fe ff       	call   c0000834 <strcpy>
c001e08b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e092:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e096:	83 c4 14             	add    esp,0x14
c001e099:	5b                   	pop    ebx
c001e09a:	5e                   	pop    esi
c001e09b:	e9 b4 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0a0 <schedule()>:
c001e0a0:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e0a5:	85 c0                	test   eax,eax
c001e0a7:	74 0b                	je     c001e0b4 <schedule()+0x14>
c001e0a9:	c7 05 04 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x1
c001e0b3:	c3                   	ret    
c001e0b4:	53                   	push   ebx
c001e0b5:	83 ec 14             	sub    esp,0x14
c001e0b8:	68 28 1b 03 c0       	push   0xc0031b28
c001e0bd:	e8 24 a9 00 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0c2:	83 c4 10             	add    esp,0x10
c001e0c5:	84 c0                	test   al,al
c001e0c7:	75 38                	jne    c001e101 <schedule()+0x61>
c001e0c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e0d1:	4a                   	dec    edx
c001e0d2:	74 32                	je     c001e106 <schedule()+0x66>
c001e0d4:	83 ec 0c             	sub    esp,0xc
c001e0d7:	68 28 1b 03 c0       	push   0xc0031b28
c001e0dc:	e8 fd a8 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0e1:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e0e8:	89 c3                	mov    ebx,eax
c001e0ea:	e8 13 a9 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0ef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e0f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0f9:	e8 08 fd ff ff       	call   c001de06 <switchToThread(ThreadControlBlock*)>
c001e0fe:	83 c4 10             	add    esp,0x10
c001e101:	83 c4 08             	add    esp,0x8
c001e104:	5b                   	pop    ebx
c001e105:	c3                   	ret    
c001e106:	83 ec 08             	sub    esp,0x8
c001e109:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e110:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e116:	68 28 1b 03 c0       	push   0xc0031b28
c001e11b:	e8 90 a9 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e120:	83 c4 10             	add    esp,0x10
c001e123:	eb af                	jmp    c001e0d4 <schedule()+0x34>

c001e125 <unlockStuff()>:
c001e125:	a1 08 1b 03 c0       	mov    eax,ds:0xc0031b08
c001e12a:	48                   	dec    eax
c001e12b:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c001e130:	75 09                	jne    c001e13b <unlockStuff()+0x16>
c001e132:	a1 04 1b 03 c0       	mov    eax,ds:0xc0031b04
c001e137:	85 c0                	test   eax,eax
c001e139:	75 05                	jne    c001e140 <unlockStuff()+0x1b>
c001e13b:	e9 16 fc ff ff       	jmp    c001dd56 <enableIRQs()>
c001e140:	83 ec 0c             	sub    esp,0xc
c001e143:	c7 05 04 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b04,0x0
c001e14d:	e8 4e ff ff ff       	call   c001e0a0 <schedule()>
c001e152:	83 c4 0c             	add    esp,0xc
c001e155:	e9 fc fb ff ff       	jmp    c001dd56 <enableIRQs()>

c001e15a <Semaphore::tryAcquire()>:
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e161:	e8 26 fc ff ff       	call   c001dd8c <lockStuff()>
c001e166:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e169:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e16b:	7c 0b                	jl     c001e178 <Semaphore::tryAcquire()+0x1e>
c001e16d:	e8 b3 ff ff ff       	call   c001e125 <unlockStuff()>
c001e172:	31 c0                	xor    eax,eax
c001e174:	83 c4 0c             	add    esp,0xc
c001e177:	c3                   	ret    
c001e178:	42                   	inc    edx
c001e179:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e17c:	e8 a4 ff ff ff       	call   c001e125 <unlockStuff()>
c001e181:	b0 01                	mov    al,0x1
c001e183:	83 c4 0c             	add    esp,0xc
c001e186:	c3                   	ret    
c001e187:	90                   	nop

c001e188 <Semaphore::assertLocked(char const*)>:
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e18f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e193:	e8 f4 fb ff ff       	call   c001dd8c <lockStuff()>
c001e198:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e19a:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e19d:	7c 05                	jl     c001e1a4 <Semaphore::assertLocked(char const*)+0x1c>
c001e19f:	83 c4 0c             	add    esp,0xc
c001e1a2:	eb 81                	jmp    c001e125 <unlockStuff()>
c001e1a4:	83 ec 0c             	sub    esp,0xc
c001e1a7:	52                   	push   edx
c001e1a8:	e8 be c3 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001e1ad:	83 c4 10             	add    esp,0x10
c001e1b0:	83 c4 0c             	add    esp,0xc
c001e1b3:	e9 6d ff ff ff       	jmp    c001e125 <unlockStuff()>

c001e1b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e1b8:	83 ec 0c             	sub    esp,0xc
c001e1bb:	e8 90 fb ff ff       	call   c001dd50 <getIRQNestingLevel()>
c001e1c0:	83 ec 08             	sub    esp,0x8
c001e1c3:	50                   	push   eax
c001e1c4:	68 b4 c2 02 c0       	push   0xc002c2b4
c001e1c9:	e8 f8 4c ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e1ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e1d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1d7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1da:	e8 c1 fe ff ff       	call   c001e0a0 <schedule()>
c001e1df:	e8 83 fb ff ff       	call   c001dd67 <unlockScheduler()>
c001e1e4:	e8 67 fb ff ff       	call   c001dd50 <getIRQNestingLevel()>
c001e1e9:	5a                   	pop    edx
c001e1ea:	59                   	pop    ecx
c001e1eb:	50                   	push   eax
c001e1ec:	68 e8 c2 02 c0       	push   0xc002c2e8
c001e1f1:	e8 d0 4c ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e1f6:	83 c4 1c             	add    esp,0x1c
c001e1f9:	c3                   	ret    

c001e1fa <blockTask(TaskState)>:
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e201:	e8 5f fb ff ff       	call   c001dd65 <lockScheduler()>
c001e206:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e20b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e20e:	e8 8d fe ff ff       	call   c001e0a0 <schedule()>
c001e213:	83 c4 0c             	add    esp,0xc
c001e216:	e9 4c fb ff ff       	jmp    c001dd67 <unlockScheduler()>

c001e21b <waitTask(int, int*, int)>:
c001e21b:	83 ec 18             	sub    esp,0x18
c001e21e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e223:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e227:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e22a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e22e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e233:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e236:	6a 07                	push   0x7
c001e238:	e8 bd ff ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e23d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e242:	83 c4 10             	add    esp,0x10
c001e245:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e248:	85 d2                	test   edx,edx
c001e24a:	74 0a                	je     c001e256 <waitTask(int, int*, int)+0x3b>
c001e24c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e24f:	89 02                	mov    DWORD PTR [edx],eax
c001e251:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e256:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e259:	83 c4 0c             	add    esp,0xc
c001e25c:	c3                   	ret    

c001e25d <nanoSleepUntil(unsigned long long)>:
c001e25d:	83 ec 0c             	sub    esp,0xc
c001e260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e264:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e268:	3b 05 50 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec50
c001e26e:	89 d1                	mov    ecx,edx
c001e270:	1b 0d 54 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec54
c001e276:	73 04                	jae    c001e27c <nanoSleepUntil(unsigned long long)+0x1f>
c001e278:	83 c4 0c             	add    esp,0xc
c001e27b:	c3                   	ret    
c001e27c:	e8 0b fb ff ff       	call   c001dd8c <lockStuff()>
c001e281:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e287:	83 ec 08             	sub    esp,0x8
c001e28a:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e28d:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e290:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e296:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e29b:	e8 10 a8 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2a0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e2a7:	e8 4e ff ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e2ac:	83 c4 1c             	add    esp,0x1c
c001e2af:	e9 71 fe ff ff       	jmp    c001e125 <unlockStuff()>

c001e2b4 <nanoSleep(unsigned long long)>:
c001e2b4:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c001e2b9:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c001e2bf:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e2c3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e2c7:	eb 94                	jmp    c001e25d <nanoSleepUntil(unsigned long long)>

c001e2c9 <sleep(unsigned long long)>:
c001e2c9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e2d1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e2d6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e2da:	01 ca                	add    edx,ecx
c001e2dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e2e0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e2e4:	eb ce                	jmp    c001e2b4 <nanoSleep(unsigned long long)>

c001e2e6 <Semaphore::acquire()>:
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ed:	e8 9a fa ff ff       	call   c001dd8c <lockStuff()>
c001e2f2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2f5:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2f7:	7d 0c                	jge    c001e305 <Semaphore::acquire()+0x1f>
c001e2f9:	42                   	inc    edx
c001e2fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2fd:	83 c4 0c             	add    esp,0xc
c001e300:	e9 20 fe ff ff       	jmp    c001e125 <unlockStuff()>
c001e305:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e30b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e312:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e315:	85 d2                	test   edx,edx
c001e317:	74 2a                	je     c001e343 <Semaphore::acquire()+0x5d>
c001e319:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e31c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e322:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e325:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e32b:	83 ec 0c             	sub    esp,0xc
c001e32e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e331:	6a 05                	push   0x5
c001e333:	e8 c2 fe ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	83 c4 0c             	add    esp,0xc
c001e33e:	e9 e2 fd ff ff       	jmp    c001e125 <unlockStuff()>
c001e343:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e349:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e34c:	eb d7                	jmp    c001e325 <Semaphore::acquire()+0x3f>

c001e34e <taskReturned>:
c001e34e:	83 ec 18             	sub    esp,0x18
c001e351:	68 1c c3 02 c0       	push   0xc002c31c
c001e356:	e8 10 c2 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001e35b:	83 c4 10             	add    esp,0x10
c001e35e:	83 ec 0c             	sub    esp,0xc
c001e361:	6a 02                	push   0x2
c001e363:	e8 92 fe ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e368:	e8 f8 f9 ff ff       	call   c001dd65 <lockScheduler()>
c001e36d:	e8 2e fd ff ff       	call   c001e0a0 <schedule()>
c001e372:	e8 f0 f9 ff ff       	call   c001dd67 <unlockScheduler()>
c001e377:	83 c4 10             	add    esp,0x10
c001e37a:	eb e2                	jmp    c001e35e <taskReturned+0x10>

c001e37c <unblockTask(ThreadControlBlock*)>:
c001e37c:	53                   	push   ebx
c001e37d:	83 ec 08             	sub    esp,0x8
c001e380:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e384:	e8 dc f9 ff ff       	call   c001dd65 <lockScheduler()>
c001e389:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e38c:	85 c0                	test   eax,eax
c001e38e:	74 5c                	je     c001e3ec <unblockTask(ThreadControlBlock*)+0x70>
c001e390:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e393:	48                   	dec    eax
c001e394:	74 31                	je     c001e3c7 <unblockTask(ThreadControlBlock*)+0x4b>
c001e396:	83 ec 0c             	sub    esp,0xc
c001e399:	68 28 1b 03 c0       	push   0xc0031b28
c001e39e:	e8 3b a6 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3a3:	83 c4 10             	add    esp,0x10
c001e3a6:	85 c0                	test   eax,eax
c001e3a8:	75 17                	jne    c001e3c1 <unblockTask(ThreadControlBlock*)+0x45>
c001e3aa:	eb 65                	jmp    c001e411 <unblockTask(ThreadControlBlock*)+0x95>
c001e3ac:	83 ec 08             	sub    esp,0x8
c001e3af:	50                   	push   eax
c001e3b0:	68 28 1b 03 c0       	push   0xc0031b28
c001e3b5:	e8 fe a8 00 00       	call   c0028cb8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e3ba:	83 c4 10             	add    esp,0x10
c001e3bd:	85 c0                	test   eax,eax
c001e3bf:	74 50                	je     c001e411 <unblockTask(ThreadControlBlock*)+0x95>
c001e3c1:	39 c3                	cmp    ebx,eax
c001e3c3:	75 e7                	jne    c001e3ac <unblockTask(ThreadControlBlock*)+0x30>
c001e3c5:	eb 1c                	jmp    c001e3e3 <unblockTask(ThreadControlBlock*)+0x67>
c001e3c7:	83 ec 0c             	sub    esp,0xc
c001e3ca:	68 0c c4 02 c0       	push   0xc002c40c
c001e3cf:	e8 f2 4a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e3d4:	c7 04 24 98 c3 02 c0 	mov    DWORD PTR [esp],0xc002c398
c001e3db:	e8 e6 4a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e3e0:	83 c4 10             	add    esp,0x10
c001e3e3:	83 c4 08             	add    esp,0x8
c001e3e6:	5b                   	pop    ebx
c001e3e7:	e9 7b f9 ff ff       	jmp    c001dd67 <unlockScheduler()>
c001e3ec:	83 ec 0c             	sub    esp,0xc
c001e3ef:	68 50 c3 02 c0       	push   0xc002c350
c001e3f4:	e8 cd 4a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e3f9:	c7 04 24 98 c3 02 c0 	mov    DWORD PTR [esp],0xc002c398
c001e400:	e8 c1 4a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e405:	83 c4 10             	add    esp,0x10
c001e408:	83 c4 08             	add    esp,0x8
c001e40b:	5b                   	pop    ebx
c001e40c:	e9 56 f9 ff ff       	jmp    c001dd67 <unlockScheduler()>
c001e411:	83 ec 08             	sub    esp,0x8
c001e414:	53                   	push   ebx
c001e415:	68 28 1b 03 c0       	push   0xc0031b28
c001e41a:	e8 91 a6 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e41f:	83 c4 10             	add    esp,0x10
c001e422:	83 c4 08             	add    esp,0x8
c001e425:	5b                   	pop    ebx
c001e426:	e9 3c f9 ff ff       	jmp    c001dd67 <unlockScheduler()>

c001e42b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e42b:	55                   	push   ebp
c001e42c:	57                   	push   edi
c001e42d:	56                   	push   esi
c001e42e:	53                   	push   ebx
c001e42f:	83 ec 1c             	sub    esp,0x1c
c001e432:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e436:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e439:	8b b8 36 19 00 00    	mov    edi,DWORD PTR [eax+0x1936]
c001e43f:	85 ff                	test   edi,edi
c001e441:	7e 20                	jle    c001e463 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e443:	31 f6                	xor    esi,esi
c001e445:	83 ec 0c             	sub    esp,0xc
c001e448:	ff b4 b0 3a 19 00 00 	push   DWORD PTR [eax+esi*4+0x193a]
c001e44f:	46                   	inc    esi
c001e450:	e8 fe 13 ff ff       	call   c000f853 <free>
c001e455:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e458:	83 c4 10             	add    esp,0x10
c001e45b:	39 b0 36 19 00 00    	cmp    DWORD PTR [eax+0x1936],esi
c001e461:	7f e2                	jg     c001e445 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e463:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001e46d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e472:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e475:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e478:	d3 c0                	rol    eax,cl
c001e47a:	66 21 82 24 19 00 00 	and    WORD PTR [edx+0x1924],ax
c001e481:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e484:	89 f7                	mov    edi,esi
c001e486:	66 83 be 24 19 00 00 00 	cmp    WORD PTR [esi+0x1924],0x0
c001e48e:	0f 85 75 01 00 00    	jne    c001e609 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001e494:	8b ae 3a 1b 00 00    	mov    ebp,DWORD PTR [esi+0x1b3a]
c001e49a:	85 ed                	test   ebp,ebp
c001e49c:	74 1b                	je     c001e4b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e49e:	83 ec 0c             	sub    esp,0xc
c001e4a1:	55                   	push   ebp
c001e4a2:	e8 31 be ff ff       	call   c001a2d8 <EnvVarContainer::~EnvVarContainer()>
c001e4a7:	59                   	pop    ecx
c001e4a8:	5e                   	pop    esi
c001e4a9:	6a 0c                	push   0xc
c001e4ab:	55                   	push   ebp
c001e4ac:	e8 35 49 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c001e4b1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4b4:	83 c4 10             	add    esp,0x10
c001e4b7:	89 f7                	mov    edi,esi
c001e4b9:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e4bf:	85 c0                	test   eax,eax
c001e4c1:	0f 84 ab 00 00 00    	je     c001e572 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e4c7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e4ca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4ce:	31 c9                	xor    ecx,ecx
c001e4d0:	eb 10                	jmp    c001e4e2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e4d2:	41                   	inc    ecx
c001e4d3:	83 f9 10             	cmp    ecx,0x10
c001e4d6:	0f 84 96 00 00 00    	je     c001e572 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e4dc:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e4e2:	0f b7 90 24 19 00 00 	movzx  edx,WORD PTR [eax+0x1924]
c001e4e9:	d3 fa                	sar    edx,cl
c001e4eb:	83 e2 01             	and    edx,0x1
c001e4ee:	74 e2                	je     c001e4d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4f0:	8d 14 89             	lea    edx,[ecx+ecx*4]
c001e4f3:	8d 14 d1             	lea    edx,[ecx+edx*8]
c001e4f6:	8d 14 d2             	lea    edx,[edx+edx*8]
c001e4f9:	01 d2                	add    edx,edx
c001e4fb:	01 ca                	add    edx,ecx
c001e4fd:	01 d0                	add    eax,edx
c001e4ff:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e505:	83 fd 07             	cmp    ebp,0x7
c001e508:	75 c8                	jne    c001e4d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e50a:	05 40 02 00 00       	add    eax,0x240
c001e50f:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e512:	83 fd ff             	cmp    ebp,0xffffffff
c001e515:	0f 8c 08 01 00 00    	jl     c001e623 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001e51b:	0f 84 b9 01 00 00    	je     c001e6da <cleanupTerminatedTask(ThreadControlBlock*)+0x2af>
c001e521:	85 ed                	test   ebp,ebp
c001e523:	0f 84 a0 01 00 00    	je     c001e6c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x29e>
c001e529:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e52b:	75 a5                	jne    c001e4d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e52d:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e533:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e537:	01 d0                	add    eax,edx
c001e539:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e53d:	83 ec 0c             	sub    esp,0xc
c001e540:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e546:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e549:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001e54f:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e556:	50                   	push   eax
c001e557:	e8 20 fe ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001e55c:	83 c4 10             	add    esp,0x10
c001e55f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e562:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e566:	89 f7                	mov    edi,esi
c001e568:	41                   	inc    ecx
c001e569:	83 f9 10             	cmp    ecx,0x10
c001e56c:	0f 85 6a ff ff ff    	jne    c001e4dc <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e572:	8b 86 26 19 00 00    	mov    eax,DWORD PTR [esi+0x1926]
c001e578:	85 c0                	test   eax,eax
c001e57a:	74 5d                	je     c001e5d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e57c:	8b 96 2a 19 00 00    	mov    edx,DWORD PTR [esi+0x192a]
c001e582:	3b 82 26 19 00 00    	cmp    eax,DWORD PTR [edx+0x1926]
c001e588:	74 4f                	je     c001e5d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e58a:	83 ec 0c             	sub    esp,0xc
c001e58d:	68 28 1b 03 c0       	push   0xc0031b28
c001e592:	e8 47 a4 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e597:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e59e:	89 c7                	mov    edi,eax
c001e5a0:	e8 41 a4 00 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5a5:	83 c4 10             	add    esp,0x10
c001e5a8:	84 c0                	test   al,al
c001e5aa:	0f 84 e4 00 00 00    	je     c001e694 <cleanupTerminatedTask(ThreadControlBlock*)+0x269>
c001e5b0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b3:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001e5b9:	85 d2                	test   edx,edx
c001e5bb:	74 0f                	je     c001e5cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a1>
c001e5bd:	83 ec 0c             	sub    esp,0xc
c001e5c0:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5c2:	52                   	push   edx
c001e5c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5c6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5c9:	83 c4 10             	add    esp,0x10
c001e5cc:	c7 80 26 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1926],0x0
c001e5d6:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e5d9:	8b 9f 32 19 00 00    	mov    ebx,DWORD PTR [edi+0x1932]
c001e5df:	85 db                	test   ebx,ebx
c001e5e1:	74 16                	je     c001e5f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001e5e3:	83 ec 0c             	sub    esp,0xc
c001e5e6:	53                   	push   ebx
c001e5e7:	e8 fe 3b ff ff       	call   c00121ea <VAS::~VAS()>
c001e5ec:	58                   	pop    eax
c001e5ed:	5a                   	pop    edx
c001e5ee:	6a 14                	push   0x14
c001e5f0:	53                   	push   ebx
c001e5f1:	e8 f0 47 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c001e5f6:	83 c4 10             	add    esp,0x10
c001e5f9:	83 ec 0c             	sub    esp,0xc
c001e5fc:	68 65 c1 02 c0       	push   0xc002c165
c001e601:	e8 c0 48 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e606:	83 c4 10             	add    esp,0x10
c001e609:	83 ec 08             	sub    esp,0x8
c001e60c:	68 3f 1b 00 00       	push   0x1b3f
c001e611:	68 73 c1 02 c0       	push   0xc002c173
c001e616:	e8 ab 48 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e61b:	83 c4 2c             	add    esp,0x2c
c001e61e:	5b                   	pop    ebx
c001e61f:	5e                   	pop    esi
c001e620:	5f                   	pop    edi
c001e621:	5d                   	pop    ebp
c001e622:	c3                   	ret    
c001e623:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e627:	83 ec 0c             	sub    esp,0xc
c001e62a:	68 50 c4 02 c0       	push   0xc002c450
c001e62f:	e8 37 bf ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001e634:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e637:	83 c4 10             	add    esp,0x10
c001e63a:	89 f7                	mov    edi,esi
c001e63c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e640:	e9 8d fe ff ff       	jmp    c001e4d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e645:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001e64b:	39 82 26 19 00 00    	cmp    DWORD PTR [edx+0x1926],eax
c001e651:	75 1c                	jne    c001e66f <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e653:	83 ec 0c             	sub    esp,0xc
c001e656:	68 b8 c4 02 c0       	push   0xc002c4b8
c001e65b:	e8 66 48 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e660:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e667:	e8 8e fb ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e66c:	83 c4 10             	add    esp,0x10
c001e66f:	83 ec 08             	sub    esp,0x8
c001e672:	56                   	push   esi
c001e673:	68 28 1b 03 c0       	push   0xc0031b28
c001e678:	e8 33 a4 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e67d:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e684:	e8 55 a3 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e689:	83 c4 10             	add    esp,0x10
c001e68c:	39 f8                	cmp    eax,edi
c001e68e:	0f 84 1c ff ff ff    	je     c001e5b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001e694:	83 ec 0c             	sub    esp,0xc
c001e697:	68 28 1b 03 c0       	push   0xc0031b28
c001e69c:	e8 3d a3 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6a1:	c7 04 24 28 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b28
c001e6a8:	89 c6                	mov    esi,eax
c001e6aa:	e8 53 a3 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6af:	83 c4 10             	add    esp,0x10
c001e6b2:	39 f3                	cmp    ebx,esi
c001e6b4:	74 b9                	je     c001e66f <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e6b6:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e6b9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6bc:	39 82 2a 19 00 00    	cmp    DWORD PTR [edx+0x192a],eax
c001e6c2:	75 ab                	jne    c001e66f <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e6c4:	e9 7c ff ff ff       	jmp    c001e645 <cleanupTerminatedTask(ThreadControlBlock*)+0x21a>
c001e6c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6cd:	83 ec 0c             	sub    esp,0xc
c001e6d0:	68 84 c4 02 c0       	push   0xc002c484
c001e6d5:	e9 55 ff ff ff       	jmp    c001e62f <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c001e6da:	8b 36                	mov    esi,DWORD PTR [esi]
c001e6dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6e0:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e6e3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e6:	8b b8 2a 19 00 00    	mov    edi,DWORD PTR [eax+0x192a]
c001e6ec:	01 d7                	add    edi,edx
c001e6ee:	89 f8                	mov    eax,edi
c001e6f0:	e9 44 fe ff ff       	jmp    c001e539 <cleanupTerminatedTask(ThreadControlBlock*)+0x10e>

c001e6f5 <cleanerTaskFunction(void*)>:
c001e6f5:	53                   	push   ebx
c001e6f6:	83 ec 08             	sub    esp,0x8
c001e6f9:	e8 69 f6 ff ff       	call   c001dd67 <unlockScheduler()>
c001e6fe:	e8 62 f6 ff ff       	call   c001dd65 <lockScheduler()>
c001e703:	80 3d ec 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aec,0x0
c001e70a:	0f 85 8e 00 00 00    	jne    c001e79e <cleanerTaskFunction(void*)+0xa9>
c001e710:	83 ec 0c             	sub    esp,0xc
c001e713:	6a 02                	push   0x2
c001e715:	e8 9e fa ff ff       	call   c001e1b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e71a:	83 c4 10             	add    esp,0x10
c001e71d:	c6 05 ec 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031aec,0x0
c001e724:	e8 63 f6 ff ff       	call   c001dd8c <lockStuff()>
c001e729:	e8 37 f6 ff ff       	call   c001dd65 <lockScheduler()>
c001e72e:	83 ec 0c             	sub    esp,0xc
c001e731:	68 10 1b 03 c0       	push   0xc0031b10
c001e736:	e8 ab a2 00 00       	call   c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e73b:	83 c4 10             	add    esp,0x10
c001e73e:	84 c0                	test   al,al
c001e740:	75 40                	jne    c001e782 <cleanerTaskFunction(void*)+0x8d>
c001e742:	83 ec 0c             	sub    esp,0xc
c001e745:	68 10 1b 03 c0       	push   0xc0031b10
c001e74a:	e8 8f a2 00 00       	call   c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e74f:	c7 04 24 10 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b10
c001e756:	89 c3                	mov    ebx,eax
c001e758:	e8 a5 a2 00 00       	call   c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e75d:	c7 04 24 89 c1 02 c0 	mov    DWORD PTR [esp],0xc002c189
c001e764:	e8 5d 47 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e769:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e76c:	e8 ba fc ff ff       	call   c001e42b <cleanupTerminatedTask(ThreadControlBlock*)>
c001e771:	c7 04 24 a2 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1a2
c001e778:	e8 49 47 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e77d:	83 c4 10             	add    esp,0x10
c001e780:	eb ac                	jmp    c001e72e <cleanerTaskFunction(void*)+0x39>
c001e782:	e8 e0 f5 ff ff       	call   c001dd67 <unlockScheduler()>
c001e787:	e8 99 f9 ff ff       	call   c001e125 <unlockStuff()>
c001e78c:	e8 d4 f5 ff ff       	call   c001dd65 <lockScheduler()>
c001e791:	80 3d ec 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aec,0x0
c001e798:	0f 84 72 ff ff ff    	je     c001e710 <cleanerTaskFunction(void*)+0x1b>
c001e79e:	e8 c4 f5 ff ff       	call   c001dd67 <unlockScheduler()>
c001e7a3:	e9 75 ff ff ff       	jmp    c001e71d <cleanerTaskFunction(void*)+0x28>

c001e7a8 <terminateTask(int)>:
c001e7a8:	83 ec 14             	sub    esp,0x14
c001e7ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e7b3:	83 c0 0c             	add    eax,0xc
c001e7b6:	50                   	push   eax
c001e7b7:	68 e0 c4 02 c0       	push   0xc002c4e0
c001e7bc:	e8 05 47 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e7c1:	e8 c6 f5 ff ff       	call   c001dd8c <lockStuff()>
c001e7c6:	e8 9a f5 ff ff       	call   c001dd65 <lockScheduler()>
c001e7cb:	c7 04 24 b5 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1b5
c001e7d2:	e8 ef 46 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e7d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e7db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7e0:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e7e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7e8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e7eb:	5a                   	pop    edx
c001e7ec:	59                   	pop    ecx
c001e7ed:	50                   	push   eax
c001e7ee:	68 10 1b 03 c0       	push   0xc0031b10
c001e7f3:	e8 b8 a2 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7fd:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e804:	c7 04 24 cf c1 02 c0 	mov    DWORD PTR [esp],0xc002c1cf
c001e80b:	e8 b6 46 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e810:	83 c4 10             	add    esp,0x10
c001e813:	a1 e8 1a 03 c0       	mov    eax,ds:0xc0031ae8
c001e818:	85 c0                	test   eax,eax
c001e81a:	74 5a                	je     c001e876 <terminateTask(int)+0xce>
c001e81c:	83 ec 0c             	sub    esp,0xc
c001e81f:	68 e9 c1 02 c0       	push   0xc002c1e9
c001e824:	e8 9d 46 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e829:	58                   	pop    eax
c001e82a:	c6 05 ec 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aec,0x1
c001e831:	ff 35 e8 1a 03 c0    	push   DWORD PTR ds:0xc0031ae8
c001e837:	e8 40 fb ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001e83c:	c7 04 24 03 c2 02 c0 	mov    DWORD PTR [esp],0xc002c203
c001e843:	e8 7e 46 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e848:	83 c4 10             	add    esp,0x10
c001e84b:	e8 17 f5 ff ff       	call   c001dd67 <unlockScheduler()>
c001e850:	e8 d0 f8 ff ff       	call   c001e125 <unlockStuff()>
c001e855:	83 ec 0c             	sub    esp,0xc
c001e858:	68 3b c2 02 c0       	push   0xc002c23b
c001e85d:	e8 64 46 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e862:	83 c4 10             	add    esp,0x10
c001e865:	e8 fb f4 ff ff       	call   c001dd65 <lockScheduler()>
c001e86a:	e8 31 f8 ff ff       	call   c001e0a0 <schedule()>
c001e86f:	e8 f3 f4 ff ff       	call   c001dd67 <unlockScheduler()>
c001e874:	eb ef                	jmp    c001e865 <terminateTask(int)+0xbd>
c001e876:	83 ec 0c             	sub    esp,0xc
c001e879:	68 1d c2 02 c0       	push   0xc002c21d
c001e87e:	e8 43 46 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e883:	83 c4 10             	add    esp,0x10
c001e886:	eb c3                	jmp    c001e84b <terminateTask(int)+0xa3>

c001e888 <Thr::terminateFromIRQ(int)>:
c001e888:	83 ec 18             	sub    esp,0x18
c001e88b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e88f:	e8 14 ff ff ff       	call   c001e7a8 <terminateTask(int)>

c001e894 <Semaphore::release()>:
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89b:	e8 ec f4 ff ff       	call   c001dd8c <lockStuff()>
c001e8a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e8a3:	85 d2                	test   edx,edx
c001e8a5:	74 1a                	je     c001e8c1 <Semaphore::release()+0x2d>
c001e8a7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e8aa:	83 ec 0c             	sub    esp,0xc
c001e8ad:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e8b0:	52                   	push   edx
c001e8b1:	e8 c6 fa ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001e8b6:	83 c4 10             	add    esp,0x10
c001e8b9:	83 c4 0c             	add    esp,0xc
c001e8bc:	e9 64 f8 ff ff       	jmp    c001e125 <unlockStuff()>
c001e8c1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e8c4:	83 c4 0c             	add    esp,0xc
c001e8c7:	e9 59 f8 ff ff       	jmp    c001e125 <unlockStuff()>

c001e8cc <__static_initialization_and_destruction_0(int, int)>:
c001e8cc:	83 ec 0c             	sub    esp,0xc
c001e8cf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e8d4:	0f 85 88 00 00 00    	jne    c001e962 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e8e2:	75 7e                	jne    c001e962 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8e4:	83 ec 0c             	sub    esp,0xc
c001e8e7:	68 28 1b 03 c0       	push   0xc0031b28
c001e8ec:	e8 6f a3 00 00       	call   c0028c60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8f1:	83 c4 10             	add    esp,0x10
c001e8f4:	83 ec 04             	sub    esp,0x4
c001e8f7:	68 98 d2 02 c0       	push   0xc002d298
c001e8fc:	68 28 1b 03 c0       	push   0xc0031b28
c001e901:	68 20 8c 02 c0       	push   0xc0028c20
c001e906:	e8 55 44 ff ff       	call   c0012d60 <__cxa_atexit>
c001e90b:	83 c4 10             	add    esp,0x10
c001e90e:	83 ec 0c             	sub    esp,0xc
c001e911:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e916:	e8 45 a3 00 00       	call   c0028c60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e91b:	83 c4 10             	add    esp,0x10
c001e91e:	83 ec 04             	sub    esp,0x4
c001e921:	68 98 d2 02 c0       	push   0xc002d298
c001e926:	68 1c 1b 03 c0       	push   0xc0031b1c
c001e92b:	68 20 8c 02 c0       	push   0xc0028c20
c001e930:	e8 2b 44 ff ff       	call   c0012d60 <__cxa_atexit>
c001e935:	83 c4 10             	add    esp,0x10
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	68 10 1b 03 c0       	push   0xc0031b10
c001e940:	e8 1b a3 00 00       	call   c0028c60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e945:	83 c4 10             	add    esp,0x10
c001e948:	83 ec 04             	sub    esp,0x4
c001e94b:	68 98 d2 02 c0       	push   0xc002d298
c001e950:	68 10 1b 03 c0       	push   0xc0031b10
c001e955:	68 20 8c 02 c0       	push   0xc0028c20
c001e95a:	e8 01 44 ff ff       	call   c0012d60 <__cxa_atexit>
c001e95f:	83 c4 10             	add    esp,0x10
c001e962:	90                   	nop
c001e963:	83 c4 0c             	add    esp,0xc
c001e966:	c3                   	ret    

c001e967 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e967:	83 ec 0c             	sub    esp,0xc
c001e96a:	83 ec 08             	sub    esp,0x8
c001e96d:	68 ff ff 00 00       	push   0xffff
c001e972:	6a 01                	push   0x1
c001e974:	e8 53 ff ff ff       	call   c001e8cc <__static_initialization_and_destruction_0(int, int)>
c001e979:	83 c4 10             	add    esp,0x10
c001e97c:	83 c4 0c             	add    esp,0xc
c001e97f:	c3                   	ret    

c001e980 <Vm::inbv(unsigned short)>:
c001e980:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e984:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e989:	75 06                	jne    c001e991 <Vm::inbv(unsigned short)+0x11>
c001e98b:	a0 6c 1b 03 c0       	mov    al,ds:0xc0031b6c
c001e990:	c3                   	ret    
c001e991:	ec                   	in     al,dx
c001e992:	c3                   	ret    

c001e993 <Vm::outbv(unsigned short, unsigned char)>:
c001e993:	53                   	push   ebx
c001e994:	83 ec 08             	sub    esp,0x8
c001e997:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e99b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e99f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9a4:	75 38                	jne    c001e9de <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e9a6:	0f b6 c3             	movzx  eax,bl
c001e9a9:	51                   	push   ecx
c001e9aa:	51                   	push   ecx
c001e9ab:	50                   	push   eax
c001e9ac:	68 ff c4 02 c0       	push   0xc002c4ff
c001e9b1:	e8 10 45 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001e9b6:	8b 15 6c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b6c
c001e9bc:	83 c4 10             	add    esp,0x10
c001e9bf:	8d 42 01             	lea    eax,[edx+0x1]
c001e9c2:	88 9a 80 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce480],bl
c001e9c8:	a3 6c 1b 03 c0       	mov    ds:0xc0031b6c,eax
c001e9cd:	83 f8 20             	cmp    eax,0x20
c001e9d0:	75 0f                	jne    c001e9e1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e9d2:	c7 05 6c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x1f
c001e9dc:	eb 03                	jmp    c001e9e1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e9de:	88 d8                	mov    al,bl
c001e9e0:	ee                   	out    dx,al
c001e9e1:	83 c4 08             	add    esp,0x8
c001e9e4:	5b                   	pop    ebx
c001e9e5:	c3                   	ret    

c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e9e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9f0:	c1 e0 04             	shl    eax,0x4
c001e9f3:	01 d0                	add    eax,edx
c001e9f5:	c3                   	ret    

c001e9f6 <Vm::getSegment(unsigned int)>:
c001e9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9fa:	c1 e8 10             	shr    eax,0x10
c001e9fd:	c3                   	ret    

c001e9fe <Vm::getOffset(unsigned int)>:
c001e9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea02:	c3                   	ret    

c001ea03 <Vm::mainloop2()>:
c001ea03:	83 ec 0c             	sub    esp,0xc
c001ea06:	e8 5a f3 ff ff       	call   c001dd65 <lockScheduler()>
c001ea0b:	83 ec 0c             	sub    esp,0xc
c001ea0e:	c6 05 65 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b65,0x1
c001ea15:	6a 02                	push   0x2
c001ea17:	e8 9c f7 ff ff       	call   c001e1b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea21:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea25:	52                   	push   edx
c001ea26:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea2a:	52                   	push   edx
c001ea2b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea2f:	52                   	push   edx
c001ea30:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea34:	50                   	push   eax
c001ea35:	e8 c0 18 fe ff       	call   c00002fa <goToVM86>
c001ea3a:	83 c4 2c             	add    esp,0x2c
c001ea3d:	c3                   	ret    

c001ea3e <Vm::mainVm8086Loop(void*)>:
c001ea3e:	83 ec 0c             	sub    esp,0xc
c001ea41:	e8 21 f3 ff ff       	call   c001dd67 <unlockScheduler()>
c001ea46:	83 c4 0c             	add    esp,0xc
c001ea49:	eb b8                	jmp    c001ea03 <Vm::mainloop2()>

c001ea4b <Vm::mainloop3(unsigned long)>:
c001ea4b:	53                   	push   ebx
c001ea4c:	83 ec 08             	sub    esp,0x8
c001ea4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea53:	e8 0d f3 ff ff       	call   c001dd65 <lockScheduler()>
c001ea58:	83 ec 0c             	sub    esp,0xc
c001ea5b:	89 1d 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,ebx
c001ea61:	6a 02                	push   0x2
c001ea63:	c6 05 64 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b64,0x1
c001ea6a:	e8 49 f7 ff ff       	call   c001e1b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea6f:	83 c4 18             	add    esp,0x18
c001ea72:	5b                   	pop    ebx
c001ea73:	eb 8e                	jmp    c001ea03 <Vm::mainloop2()>

c001ea75 <Vm::initialise8086()>:
c001ea75:	83 ec 0c             	sub    esp,0xc
c001ea78:	68 80 00 00 00       	push   0x80
c001ea7d:	6a 00                	push   0x0
c001ea7f:	68 3e ea 01 c0       	push   0xc001ea3e
c001ea84:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001ea8a:	e8 07 f4 ff ff       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c001ea8f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ea96:	a3 68 1b 03 c0       	mov    ds:0xc0031b68,eax
c001ea9b:	68 00 01 00 00       	push   0x100
c001eaa0:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001eaa5:	6a 00                	push   0x0
c001eaa7:	6a 00                	push   0x0
c001eaa9:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001eaaf:	e8 96 3b ff ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eab4:	83 c4 2c             	add    esp,0x2c
c001eab7:	c3                   	ret    

c001eab8 <Vm::finish8086()>:
c001eab8:	53                   	push   ebx
c001eab9:	83 ec 08             	sub    esp,0x8
c001eabc:	e8 a4 f2 ff ff       	call   c001dd65 <lockScheduler()>
c001eac1:	80 3d 64 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b64,0x0
c001eac8:	75 0c                	jne    c001ead6 <Vm::finish8086()+0x1e>
c001eaca:	e8 d1 f5 ff ff       	call   c001e0a0 <schedule()>
c001eacf:	e8 93 f2 ff ff       	call   c001dd67 <unlockScheduler()>
c001ead4:	eb e6                	jmp    c001eabc <Vm::finish8086()+0x4>
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	8b 1d 60 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b60
c001eadf:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001eae5:	c6 05 64 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b64,0x0
c001eaec:	e8 8b f8 ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001eaf1:	e8 71 f2 ff ff       	call   c001dd67 <unlockScheduler()>
c001eaf6:	89 d8                	mov    eax,ebx
c001eaf8:	83 c4 18             	add    esp,0x18
c001eafb:	5b                   	pop    ebx
c001eafc:	c3                   	ret    

c001eafd <Vm::getOutput8086(unsigned char*)>:
c001eafd:	83 ec 10             	sub    esp,0x10
c001eb00:	ff 35 6c 1b 03 c0    	push   DWORD PTR ds:0xc0031b6c
c001eb06:	68 80 1b 03 c0       	push   0xc0031b80
c001eb0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb0f:	e8 30 1c fe ff       	call   c0000744 <memcpy>
c001eb14:	a1 6c 1b 03 c0       	mov    eax,ds:0xc0031b6c
c001eb19:	c7 05 6c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x0
c001eb23:	83 c4 1c             	add    esp,0x1c
c001eb26:	c3                   	ret    

c001eb27 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb27:	55                   	push   ebp
c001eb28:	57                   	push   edi
c001eb29:	56                   	push   esi
c001eb2a:	53                   	push   ebx
c001eb2b:	83 ec 2c             	sub    esp,0x2c
c001eb2e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eb32:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eb36:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eb3a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eb3e:	e8 22 f2 ff ff       	call   c001dd65 <lockScheduler()>
c001eb43:	a0 65 1b 03 c0       	mov    al,ds:0xc0031b65
c001eb48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb4c:	84 c0                	test   al,al
c001eb4e:	75 0c                	jne    c001eb5c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eb50:	e8 4b f5 ff ff       	call   c001e0a0 <schedule()>
c001eb55:	e8 0d f2 ff ff       	call   c001dd67 <unlockScheduler()>
c001eb5a:	eb e2                	jmp    c001eb3e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb5c:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c001eb61:	c7 05 6c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b6c,0x0
c001eb6b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eb6f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eb73:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eb77:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eb7b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eb7f:	50                   	push   eax
c001eb80:	6a 20                	push   0x20
c001eb82:	6a 00                	push   0x0
c001eb84:	68 80 1b 03 c0       	push   0xc0031b80
c001eb89:	e8 ea 1b fe ff       	call   c0000778 <memset>
c001eb8e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eb95:	e8 a9 0c ff ff       	call   c000f843 <malloc>
c001eb9a:	83 c4 0c             	add    esp,0xc
c001eb9d:	89 c7                	mov    edi,eax
c001eb9f:	ff 35 34 1b 03 c0    	push   DWORD PTR ds:0xc0031b34
c001eba5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eba9:	50                   	push   eax
c001ebaa:	e8 6f 48 ff ff       	call   c001341e <File::File(char const*, Process*)>
c001ebaf:	83 c4 10             	add    esp,0x10
c001ebb2:	85 ff                	test   edi,edi
c001ebb4:	75 0a                	jne    c001ebc0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	68 1b c5 02 c0       	push   0xc002c51b
c001ebbe:	eb 27                	jmp    c001ebe7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ebc0:	50                   	push   eax
c001ebc1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ebc5:	50                   	push   eax
c001ebc6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ebca:	50                   	push   eax
c001ebcb:	57                   	push   edi
c001ebcc:	e8 5d 4b ff ff       	call   c001372e <File::stat(unsigned long long*, bool*)>
c001ebd1:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ebd6:	83 c4 10             	add    esp,0x10
c001ebd9:	89 e8                	mov    eax,ebp
c001ebdb:	84 c0                	test   al,al
c001ebdd:	74 19                	je     c001ebf8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ebdf:	83 ec 0c             	sub    esp,0xc
c001ebe2:	68 2f c5 02 c0       	push   0xc002c52f
c001ebe7:	e8 7f b9 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001ebec:	31 ed                	xor    ebp,ebp
c001ebee:	e8 74 f1 ff ff       	call   c001dd67 <unlockScheduler()>
c001ebf3:	83 c4 10             	add    esp,0x10
c001ebf6:	eb 75                	jmp    c001ec6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ebf8:	50                   	push   eax
c001ebf9:	50                   	push   eax
c001ebfa:	6a 01                	push   0x1
c001ebfc:	57                   	push   edi
c001ebfd:	e8 80 48 ff ff       	call   c0013482 <File::open(FileOpenMode)>
c001ec02:	83 c4 10             	add    esp,0x10
c001ec05:	85 c0                	test   eax,eax
c001ec07:	74 17                	je     c001ec20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec09:	83 ec 0c             	sub    esp,0xc
c001ec0c:	68 48 c5 02 c0       	push   0xc002c548
c001ec11:	e8 55 b9 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001ec16:	e8 4c f1 ff ff       	call   c001dd67 <unlockScheduler()>
c001ec1b:	83 c4 10             	add    esp,0x10
c001ec1e:	eb 4d                	jmp    c001ec6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec20:	0f b7 f6             	movzx  esi,si
c001ec23:	50                   	push   eax
c001ec24:	0f b7 db             	movzx  ebx,bx
c001ec27:	50                   	push   eax
c001ec28:	56                   	push   esi
c001ec29:	53                   	push   ebx
c001ec2a:	e8 b7 fd ff ff       	call   c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec2f:	5a                   	pop    edx
c001ec30:	8b 17                	mov    edx,DWORD PTR [edi]
c001ec32:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec36:	51                   	push   ecx
c001ec37:	50                   	push   eax
c001ec38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec40:	57                   	push   edi
c001ec41:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec44:	83 c4 14             	add    esp,0x14
c001ec47:	57                   	push   edi
c001ec48:	e8 93 48 ff ff       	call   c00134e0 <File::close()>
c001ec4d:	c6 05 65 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b65,0x0
c001ec54:	e8 0e f1 ff ff       	call   c001dd67 <unlockScheduler()>
c001ec59:	59                   	pop    ecx
c001ec5a:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001ec60:	e8 17 f7 ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001ec65:	83 c4 10             	add    esp,0x10
c001ec68:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ec6d:	83 c4 2c             	add    esp,0x2c
c001ec70:	89 e8                	mov    eax,ebp
c001ec72:	5b                   	pop    ebx
c001ec73:	5e                   	pop    esi
c001ec74:	5f                   	pop    edi
c001ec75:	5d                   	pop    ebp
c001ec76:	c3                   	ret    

c001ec77 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec77:	57                   	push   edi
c001ec78:	56                   	push   esi
c001ec79:	53                   	push   ebx
c001ec7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec86:	83 e8 06             	sub    eax,0x6
c001ec89:	0f b7 c0             	movzx  eax,ax
c001ec8c:	50                   	push   eax
c001ec8d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ec92:	50                   	push   eax
c001ec93:	e8 4e fd ff ff       	call   c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec98:	5a                   	pop    edx
c001ec99:	5e                   	pop    esi
c001ec9a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ec9d:	8d 56 fa             	lea    edx,[esi-0x6]
c001eca0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eca6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eca9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ecac:	83 c2 02             	add    edx,0x2
c001ecaf:	66 89 10             	mov    WORD PTR [eax],dx
c001ecb2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ecb5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ecb9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ecbc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ecc0:	89 d6                	mov    esi,edx
c001ecc2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ecc8:	66 81 e6 ff fd       	and    si,0xfdff
c001eccd:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ecd1:	74 07                	je     c001ecda <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ecd3:	89 d6                	mov    esi,edx
c001ecd5:	66 81 ce 00 02       	or     si,0x200
c001ecda:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ecde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ece3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ece7:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ecef:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ecf2:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ecfa:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ecfd:	5b                   	pop    ebx
c001ecfe:	5e                   	pop    esi
c001ecff:	5f                   	pop    edi
c001ed00:	c3                   	ret    

c001ed01 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed01:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed06:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed0b:	c1 e0 04             	shl    eax,0x4
c001ed0e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed11:	c3                   	ret    

c001ed12 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed1c:	c1 e0 04             	shl    eax,0x4
c001ed1f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed23:	c3                   	ret    

c001ed24 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed2e:	c1 e0 04             	shl    eax,0x4
c001ed31:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed34:	c3                   	ret    

c001ed35 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed3f:	c1 e0 04             	shl    eax,0x4
c001ed42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed46:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ed49:	c3                   	ret    

c001ed4a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ed4a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed4f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed54:	c1 e0 04             	shl    eax,0x4
c001ed57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed5b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed5f:	c3                   	ret    

c001ed60 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed65:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed6a:	c1 e0 04             	shl    eax,0x4
c001ed6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed71:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed74:	c3                   	ret    

c001ed75 <Vm::faultHandler(regs*)>:
c001ed75:	55                   	push   ebp
c001ed76:	57                   	push   edi
c001ed77:	56                   	push   esi
c001ed78:	53                   	push   ebx
c001ed79:	83 ec 1c             	sub    esp,0x1c
c001ed7c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed80:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ed83:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ed86:	0f b7 c1             	movzx  eax,cx
c001ed89:	50                   	push   eax
c001ed8a:	0f b7 c3             	movzx  eax,bx
c001ed8d:	c1 e3 04             	shl    ebx,0x4
c001ed90:	50                   	push   eax
c001ed91:	e8 50 fc ff ff       	call   c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed96:	5a                   	pop    edx
c001ed97:	89 c5                	mov    ebp,eax
c001ed99:	5e                   	pop    esi
c001ed9a:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ed9e:	50                   	push   eax
c001ed9f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eda3:	50                   	push   eax
c001eda4:	e8 3d fc ff ff       	call   c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>
c001eda9:	01 cb                	add    ebx,ecx
c001edab:	89 c6                	mov    esi,eax
c001edad:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001edb1:	50                   	push   eax
c001edb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edb6:	50                   	push   eax
c001edb7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001edbb:	50                   	push   eax
c001edbc:	55                   	push   ebp
c001edbd:	53                   	push   ebx
c001edbe:	b3 06                	mov    bl,0x6
c001edc0:	68 61 c5 02 c0       	push   0xc002c561
c001edc5:	e8 fc 40 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001edca:	83 c4 20             	add    esp,0x20
c001edcd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001edd2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001edd7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eddb:	3c 9d                	cmp    al,0x9d
c001eddd:	0f 84 d7 02 00 00    	je     c001f0ba <Vm::faultHandler(regs*)+0x345>
c001ede3:	0f 87 a3 00 00 00    	ja     c001ee8c <Vm::faultHandler(regs*)+0x117>
c001ede9:	3c 66                	cmp    al,0x66
c001edeb:	0f 84 15 02 00 00    	je     c001f006 <Vm::faultHandler(regs*)+0x291>
c001edf1:	77 5f                	ja     c001ee52 <Vm::faultHandler(regs*)+0xdd>
c001edf3:	3c 36                	cmp    al,0x36
c001edf5:	0f 84 f1 01 00 00    	je     c001efec <Vm::faultHandler(regs*)+0x277>
c001edfb:	77 28                	ja     c001ee25 <Vm::faultHandler(regs*)+0xb0>
c001edfd:	3c 26                	cmp    al,0x26
c001edff:	0f 84 99 01 00 00    	je     c001ef9e <Vm::faultHandler(regs*)+0x229>
c001ee05:	3c 2e                	cmp    al,0x2e
c001ee07:	0f 85 3b 07 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ee0d:	83 ec 0c             	sub    esp,0xc
c001ee10:	31 db                	xor    ebx,ebx
c001ee12:	68 76 c5 02 c0       	push   0xc002c576
c001ee17:	e8 aa 40 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001ee1c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee1f:	83 c4 10             	add    esp,0x10
c001ee22:	45                   	inc    ebp
c001ee23:	eb b2                	jmp    c001edd7 <Vm::faultHandler(regs*)+0x62>
c001ee25:	3c 64                	cmp    al,0x64
c001ee27:	0f 84 8b 01 00 00    	je     c001efb8 <Vm::faultHandler(regs*)+0x243>
c001ee2d:	0f 87 9f 01 00 00    	ja     c001efd2 <Vm::faultHandler(regs*)+0x25d>
c001ee33:	3c 3e                	cmp    al,0x3e
c001ee35:	0f 85 0d 07 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ee3b:	83 ec 0c             	sub    esp,0xc
c001ee3e:	b3 01                	mov    bl,0x1
c001ee40:	68 7a c5 02 c0       	push   0xc002c57a
c001ee45:	e8 7c 40 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001ee4a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee4d:	83 c4 10             	add    esp,0x10
c001ee50:	eb d0                	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001ee52:	3c 6d                	cmp    al,0x6d
c001ee54:	0f 84 af 03 00 00    	je     c001f209 <Vm::faultHandler(regs*)+0x494>
c001ee5a:	77 15                	ja     c001ee71 <Vm::faultHandler(regs*)+0xfc>
c001ee5c:	3c 67                	cmp    al,0x67
c001ee5e:	0f 84 bf 01 00 00    	je     c001f023 <Vm::faultHandler(regs*)+0x2ae>
c001ee64:	3c 6c                	cmp    al,0x6c
c001ee66:	0f 84 3f 03 00 00    	je     c001f1ab <Vm::faultHandler(regs*)+0x436>
c001ee6c:	e9 d7 06 00 00       	jmp    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ee71:	3c 6f                	cmp    al,0x6f
c001ee73:	0f 84 a4 04 00 00    	je     c001f31d <Vm::faultHandler(regs*)+0x5a8>
c001ee79:	0f 82 11 04 00 00    	jb     c001f290 <Vm::faultHandler(regs*)+0x51b>
c001ee7f:	3c 9c                	cmp    al,0x9c
c001ee81:	0f 84 ba 01 00 00    	je     c001f041 <Vm::faultHandler(regs*)+0x2cc>
c001ee87:	e9 bc 06 00 00       	jmp    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ee8c:	3c ec                	cmp    al,0xec
c001ee8e:	0f 84 24 06 00 00    	je     c001f4b8 <Vm::faultHandler(regs*)+0x743>
c001ee94:	0f 87 93 00 00 00    	ja     c001ef2d <Vm::faultHandler(regs*)+0x1b8>
c001ee9a:	3c e4                	cmp    al,0xe4
c001ee9c:	0f 84 5c 05 00 00    	je     c001f3fe <Vm::faultHandler(regs*)+0x689>
c001eea2:	77 6a                	ja     c001ef0e <Vm::faultHandler(regs*)+0x199>
c001eea4:	3c cd                	cmp    al,0xcd
c001eea6:	0f 84 7e 02 00 00    	je     c001f12a <Vm::faultHandler(regs*)+0x3b5>
c001eeac:	3c cf                	cmp    al,0xcf
c001eeae:	0f 85 94 06 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001eeb4:	83 ec 0c             	sub    esp,0xc
c001eeb7:	68 be c5 02 c0       	push   0xc002c5be
c001eebc:	e8 05 40 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001eec1:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eec4:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eec7:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001eecb:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001eece:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001eed2:	0d 00 02 02 00       	or     eax,0x20200
c001eed7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001eeda:	56                   	push   esi
c001eedb:	53                   	push   ebx
c001eedc:	52                   	push   edx
c001eedd:	68 c4 c5 02 c0       	push   0xc002c5c4
c001eee2:	e8 df 3f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001eee7:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001eeeb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eef1:	66 c1 e8 09          	shr    ax,0x9
c001eef5:	83 e0 01             	and    eax,0x1
c001eef8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eefb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eefe:	83 c0 06             	add    eax,0x6
c001ef01:	25 ff ff 00 00       	and    eax,0xffff
c001ef06:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef09:	e9 95 02 00 00       	jmp    c001f1a3 <Vm::faultHandler(regs*)+0x42e>
c001ef0e:	3c e6                	cmp    al,0xe6
c001ef10:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef14:	0f 84 4e 05 00 00    	je     c001f468 <Vm::faultHandler(regs*)+0x6f3>
c001ef1a:	0f 82 0a 05 00 00    	jb     c001f42a <Vm::faultHandler(regs*)+0x6b5>
c001ef20:	3c e7                	cmp    al,0xe7
c001ef22:	0f 84 69 05 00 00    	je     c001f491 <Vm::faultHandler(regs*)+0x71c>
c001ef28:	e9 1b 06 00 00       	jmp    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ef2d:	3c ef                	cmp    al,0xef
c001ef2f:	0f 84 e6 05 00 00    	je     c001f51b <Vm::faultHandler(regs*)+0x7a6>
c001ef35:	77 37                	ja     c001ef6e <Vm::faultHandler(regs*)+0x1f9>
c001ef37:	3c ed                	cmp    al,0xed
c001ef39:	0f 84 a3 05 00 00    	je     c001f4e2 <Vm::faultHandler(regs*)+0x76d>
c001ef3f:	3c ee                	cmp    al,0xee
c001ef41:	0f 85 01 06 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ef47:	52                   	push   edx
c001ef48:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ef4b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ef4e:	68 5f c6 02 c0       	push   0xc002c65f
c001ef53:	e8 6e 3f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001ef58:	59                   	pop    ecx
c001ef59:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ef5d:	5b                   	pop    ebx
c001ef5e:	50                   	push   eax
c001ef5f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ef63:	50                   	push   eax
c001ef64:	e8 2a fa ff ff       	call   c001e993 <Vm::outbv(unsigned short, unsigned char)>
c001ef69:	e9 a5 05 00 00       	jmp    c001f513 <Vm::faultHandler(regs*)+0x79e>
c001ef6e:	3c fa                	cmp    al,0xfa
c001ef70:	0f 84 f7 01 00 00    	je     c001f16d <Vm::faultHandler(regs*)+0x3f8>
c001ef76:	3c fb                	cmp    al,0xfb
c001ef78:	0f 84 0a 02 00 00    	je     c001f188 <Vm::faultHandler(regs*)+0x413>
c001ef7e:	3c f3                	cmp    al,0xf3
c001ef80:	0f 85 c2 05 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ef86:	83 ec 0c             	sub    esp,0xc
c001ef89:	68 97 c5 02 c0       	push   0xc002c597
c001ef8e:	e8 33 3f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001ef93:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef96:	83 c4 10             	add    esp,0x10
c001ef99:	e9 84 fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001ef9e:	83 ec 0c             	sub    esp,0xc
c001efa1:	b3 02                	mov    bl,0x2
c001efa3:	68 72 c5 02 c0       	push   0xc002c572
c001efa8:	e8 19 3f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001efad:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efb0:	83 c4 10             	add    esp,0x10
c001efb3:	e9 6a fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	b3 03                	mov    bl,0x3
c001efbd:	68 7e c5 02 c0       	push   0xc002c57e
c001efc2:	e8 ff 3e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001efc7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efca:	83 c4 10             	add    esp,0x10
c001efcd:	e9 50 fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001efd2:	83 ec 0c             	sub    esp,0xc
c001efd5:	b3 04                	mov    bl,0x4
c001efd7:	68 82 c5 02 c0       	push   0xc002c582
c001efdc:	e8 e5 3e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001efe1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efe4:	83 c4 10             	add    esp,0x10
c001efe7:	e9 36 fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001efec:	83 ec 0c             	sub    esp,0xc
c001efef:	b3 05                	mov    bl,0x5
c001eff1:	68 86 c5 02 c0       	push   0xc002c586
c001eff6:	e8 cb 3e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001effb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001effe:	83 c4 10             	add    esp,0x10
c001f001:	e9 1c fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001f006:	83 ec 0c             	sub    esp,0xc
c001f009:	68 8a c5 02 c0       	push   0xc002c58a
c001f00e:	e8 b3 3e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f013:	83 c4 10             	add    esp,0x10
c001f016:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f019:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f01e:	e9 ff fd ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001f023:	50                   	push   eax
c001f024:	50                   	push   eax
c001f025:	6a 01                	push   0x1
c001f027:	68 8f c5 02 c0       	push   0xc002c58f
c001f02c:	e8 95 3e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f037:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f03c:	e9 e1 fd ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001f041:	83 ec 0c             	sub    esp,0xc
c001f044:	68 9d c5 02 c0       	push   0xc002c59d
c001f049:	e8 78 3e ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f04e:	83 c4 10             	add    esp,0x10
c001f051:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f054:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f059:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f05c:	74 2f                	je     c001f08d <Vm::faultHandler(regs*)+0x318>
c001f05e:	83 ea 04             	sub    edx,0x4
c001f061:	25 ff 0d 00 00       	and    eax,0xdff
c001f066:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f06c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f06f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f072:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f078:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f07c:	0f 84 bf 04 00 00    	je     c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f082:	80 cc 02             	or     ah,0x2
c001f085:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f088:	e9 b4 04 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f08d:	83 ea 02             	sub    edx,0x2
c001f090:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f096:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f099:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f09d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0a3:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0a7:	74 05                	je     c001f0ae <Vm::faultHandler(regs*)+0x339>
c001f0a9:	80 cc 02             	or     ah,0x2
c001f0ac:	eb 03                	jmp    c001f0b1 <Vm::faultHandler(regs*)+0x33c>
c001f0ae:	80 e4 fd             	and    ah,0xfd
c001f0b1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0b5:	e9 87 04 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f0ba:	83 ec 0c             	sub    esp,0xc
c001f0bd:	68 a4 c5 02 c0       	push   0xc002c5a4
c001f0c2:	e8 ff 3d ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f0c7:	83 c4 10             	add    esp,0x10
c001f0ca:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0cf:	74 28                	je     c001f0f9 <Vm::faultHandler(regs*)+0x384>
c001f0d1:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0d3:	25 ff 0d 00 00       	and    eax,0xdff
c001f0d8:	0d 00 02 02 00       	or     eax,0x20200
c001f0dd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f0e0:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0e8:	c1 e8 09             	shr    eax,0x9
c001f0eb:	83 e0 01             	and    eax,0x1
c001f0ee:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0f1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f0f4:	83 c0 04             	add    eax,0x4
c001f0f7:	eb 24                	jmp    c001f11d <Vm::faultHandler(regs*)+0x3a8>
c001f0f9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f0fc:	0d 00 02 02 00       	or     eax,0x20200
c001f101:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f104:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f107:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f10d:	66 c1 e8 09          	shr    ax,0x9
c001f111:	83 e0 01             	and    eax,0x1
c001f114:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f117:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f11a:	83 c0 02             	add    eax,0x2
c001f11d:	25 ff ff 00 00       	and    eax,0xffff
c001f122:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f125:	e9 17 04 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f12a:	53                   	push   ebx
c001f12b:	53                   	push   ebx
c001f12c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f130:	50                   	push   eax
c001f131:	68 aa c5 02 c0       	push   0xc002c5aa
c001f136:	e8 8b 3d ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f13b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f13f:	83 c4 10             	add    esp,0x10
c001f142:	3c ee                	cmp    al,0xee
c001f144:	75 10                	jne    c001f156 <Vm::faultHandler(regs*)+0x3e1>
c001f146:	83 ec 0c             	sub    esp,0xc
c001f149:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f14c:	e8 fa f8 ff ff       	call   c001ea4b <Vm::mainloop3(unsigned long)>
c001f151:	e9 c0 03 00 00       	jmp    c001f516 <Vm::faultHandler(regs*)+0x7a1>
c001f156:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f15a:	83 ec 0c             	sub    esp,0xc
c001f15d:	53                   	push   ebx
c001f15e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f162:	53                   	push   ebx
c001f163:	55                   	push   ebp
c001f164:	50                   	push   eax
c001f165:	57                   	push   edi
c001f166:	e8 0c fb ff ff       	call   c001ec77 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f16b:	eb 36                	jmp    c001f1a3 <Vm::faultHandler(regs*)+0x42e>
c001f16d:	83 ec 0c             	sub    esp,0xc
c001f170:	68 b4 c5 02 c0       	push   0xc002c5b4
c001f175:	e8 4c 3d ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f17a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f17f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f183:	e9 8b 03 00 00       	jmp    c001f513 <Vm::faultHandler(regs*)+0x79e>
c001f188:	83 ec 0c             	sub    esp,0xc
c001f18b:	68 b9 c5 02 c0       	push   0xc002c5b9
c001f190:	e8 31 3d ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f19a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f19e:	e9 70 03 00 00       	jmp    c001f513 <Vm::faultHandler(regs*)+0x79e>
c001f1a3:	83 c4 20             	add    esp,0x20
c001f1a6:	e9 99 03 00 00       	jmp    c001f544 <Vm::faultHandler(regs*)+0x7cf>
c001f1ab:	83 ec 0c             	sub    esp,0xc
c001f1ae:	68 f7 c5 02 c0       	push   0xc002c5f7
c001f1b3:	e8 0e 3d ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f1b8:	83 c4 10             	add    esp,0x10
c001f1bb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f1be:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1c3:	74 0d                	je     c001f1d2 <Vm::faultHandler(regs*)+0x45d>
c001f1c5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f1cc:	0f 87 9e 01 00 00    	ja     c001f370 <Vm::faultHandler(regs*)+0x5fb>
c001f1d2:	83 ec 0c             	sub    esp,0xc
c001f1d5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1d9:	0f b7 db             	movzx  ebx,bx
c001f1dc:	50                   	push   eax
c001f1dd:	e8 9e f7 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f1e2:	83 c4 0c             	add    esp,0xc
c001f1e5:	0f b6 c0             	movzx  eax,al
c001f1e8:	50                   	push   eax
c001f1e9:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f1ed:	50                   	push   eax
c001f1ee:	53                   	push   ebx
c001f1ef:	e8 41 fb ff ff       	call   c001ed35 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f1f4:	83 c4 10             	add    esp,0x10
c001f1f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f1fa:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1fe:	74 03                	je     c001f203 <Vm::faultHandler(regs*)+0x48e>
c001f200:	48                   	dec    eax
c001f201:	eb 01                	jmp    c001f204 <Vm::faultHandler(regs*)+0x48f>
c001f203:	40                   	inc    eax
c001f204:	0f b7 c0             	movzx  eax,ax
c001f207:	eb 7f                	jmp    c001f288 <Vm::faultHandler(regs*)+0x513>
c001f209:	83 ec 0c             	sub    esp,0xc
c001f20c:	68 29 c6 02 c0       	push   0xc002c629
c001f211:	e8 b0 3c ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f216:	83 c4 10             	add    esp,0x10
c001f219:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f21c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f221:	74 0d                	je     c001f230 <Vm::faultHandler(regs*)+0x4bb>
c001f223:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f22a:	0f 87 40 01 00 00    	ja     c001f370 <Vm::faultHandler(regs*)+0x5fb>
c001f230:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f233:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f237:	0f b7 db             	movzx  ebx,bx
c001f23a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f23f:	74 20                	je     c001f261 <Vm::faultHandler(regs*)+0x4ec>
c001f241:	ed                   	in     eax,dx
c001f242:	51                   	push   ecx
c001f243:	50                   	push   eax
c001f244:	56                   	push   esi
c001f245:	53                   	push   ebx
c001f246:	e8 15 fb ff ff       	call   c001ed60 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f24b:	83 c4 10             	add    esp,0x10
c001f24e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f251:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f255:	74 05                	je     c001f25c <Vm::faultHandler(regs*)+0x4e7>
c001f257:	83 e8 04             	sub    eax,0x4
c001f25a:	eb 27                	jmp    c001f283 <Vm::faultHandler(regs*)+0x50e>
c001f25c:	83 c0 04             	add    eax,0x4
c001f25f:	eb 22                	jmp    c001f283 <Vm::faultHandler(regs*)+0x50e>
c001f261:	66 ed                	in     ax,dx
c001f263:	0f b7 c0             	movzx  eax,ax
c001f266:	52                   	push   edx
c001f267:	50                   	push   eax
c001f268:	56                   	push   esi
c001f269:	53                   	push   ebx
c001f26a:	e8 db fa ff ff       	call   c001ed4a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f275:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f279:	74 05                	je     c001f280 <Vm::faultHandler(regs*)+0x50b>
c001f27b:	83 e8 02             	sub    eax,0x2
c001f27e:	eb 03                	jmp    c001f283 <Vm::faultHandler(regs*)+0x50e>
c001f280:	83 c0 02             	add    eax,0x2
c001f283:	25 ff ff 00 00       	and    eax,0xffff
c001f288:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f28b:	e9 b1 02 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f290:	83 ec 0c             	sub    esp,0xc
c001f293:	4b                   	dec    ebx
c001f294:	68 2f c6 02 c0       	push   0xc002c62f
c001f299:	e8 28 3c ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f29e:	83 c4 10             	add    esp,0x10
c001f2a1:	80 fb 05             	cmp    bl,0x5
c001f2a4:	77 0a                	ja     c001f2b0 <Vm::faultHandler(regs*)+0x53b>
c001f2a6:	0f b6 db             	movzx  ebx,bl
c001f2a9:	ff 24 9d a0 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3960]
c001f2b0:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f2b4:	eb 1b                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2b6:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f2ba:	eb 15                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2bc:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f2c0:	eb 0f                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2c2:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f2c6:	eb 09                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2c8:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f2cb:	eb 04                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2cd:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f2d1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2d6:	74 0d                	je     c001f2e5 <Vm::faultHandler(regs*)+0x570>
c001f2d8:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f2df:	0f 87 8b 00 00 00    	ja     c001f370 <Vm::faultHandler(regs*)+0x5fb>
c001f2e5:	53                   	push   ebx
c001f2e6:	53                   	push   ebx
c001f2e7:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f2eb:	52                   	push   edx
c001f2ec:	50                   	push   eax
c001f2ed:	e8 0f fa ff ff       	call   c001ed01 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f2f2:	5e                   	pop    esi
c001f2f3:	0f b6 c0             	movzx  eax,al
c001f2f6:	5d                   	pop    ebp
c001f2f7:	50                   	push   eax
c001f2f8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2fc:	50                   	push   eax
c001f2fd:	e8 91 f6 ff ff       	call   c001e993 <Vm::outbv(unsigned short, unsigned char)>
c001f302:	83 c4 10             	add    esp,0x10
c001f305:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f308:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f30c:	74 03                	je     c001f311 <Vm::faultHandler(regs*)+0x59c>
c001f30e:	48                   	dec    eax
c001f30f:	eb 01                	jmp    c001f312 <Vm::faultHandler(regs*)+0x59d>
c001f311:	40                   	inc    eax
c001f312:	0f b7 c0             	movzx  eax,ax
c001f315:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f318:	e9 24 02 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f31d:	83 ec 0c             	sub    esp,0xc
c001f320:	4b                   	dec    ebx
c001f321:	68 2f c6 02 c0       	push   0xc002c62f
c001f326:	e8 9b 3b ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f32b:	83 c4 10             	add    esp,0x10
c001f32e:	80 fb 05             	cmp    bl,0x5
c001f331:	77 0a                	ja     c001f33d <Vm::faultHandler(regs*)+0x5c8>
c001f333:	0f b6 db             	movzx  ebx,bl
c001f336:	ff 24 9d b8 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3948]
c001f33d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f341:	eb 1b                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f343:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f347:	eb 15                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f349:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f34d:	eb 0f                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f34f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f353:	eb 09                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f355:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f358:	eb 04                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f35a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f35e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f361:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f366:	74 39                	je     c001f3a1 <Vm::faultHandler(regs*)+0x62c>
c001f368:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f36e:	76 31                	jbe    c001f3a1 <Vm::faultHandler(regs*)+0x62c>
c001f370:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f374:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f378:	51                   	push   ecx
c001f379:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f37d:	51                   	push   ecx
c001f37e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f382:	51                   	push   ecx
c001f383:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f387:	51                   	push   ecx
c001f388:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f38c:	52                   	push   edx
c001f38d:	50                   	push   eax
c001f38e:	50                   	push   eax
c001f38f:	68 fc c5 02 c0       	push   0xc002c5fc
c001f394:	e8 2d 3b ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f399:	83 c4 20             	add    esp,0x20
c001f39c:	e9 fb 01 00 00       	jmp    c001f59c <Vm::faultHandler(regs*)+0x827>
c001f3a1:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f3a4:	0f b7 d3             	movzx  edx,bx
c001f3a7:	81 e6 00 04 00 00    	and    esi,0x400
c001f3ad:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f3b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3b5:	74 1d                	je     c001f3d4 <Vm::faultHandler(regs*)+0x65f>
c001f3b7:	51                   	push   ecx
c001f3b8:	51                   	push   ecx
c001f3b9:	52                   	push   edx
c001f3ba:	50                   	push   eax
c001f3bb:	e8 64 f9 ff ff       	call   c001ed24 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f3c0:	83 c4 10             	add    esp,0x10
c001f3c3:	89 ea                	mov    edx,ebp
c001f3c5:	ef                   	out    dx,eax
c001f3c6:	85 f6                	test   esi,esi
c001f3c8:	74 05                	je     c001f3cf <Vm::faultHandler(regs*)+0x65a>
c001f3ca:	83 eb 04             	sub    ebx,0x4
c001f3cd:	eb 21                	jmp    c001f3f0 <Vm::faultHandler(regs*)+0x67b>
c001f3cf:	83 c3 04             	add    ebx,0x4
c001f3d2:	eb 1c                	jmp    c001f3f0 <Vm::faultHandler(regs*)+0x67b>
c001f3d4:	51                   	push   ecx
c001f3d5:	51                   	push   ecx
c001f3d6:	52                   	push   edx
c001f3d7:	50                   	push   eax
c001f3d8:	e8 35 f9 ff ff       	call   c001ed12 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f3dd:	83 c4 10             	add    esp,0x10
c001f3e0:	89 ea                	mov    edx,ebp
c001f3e2:	66 ef                	out    dx,ax
c001f3e4:	85 f6                	test   esi,esi
c001f3e6:	74 05                	je     c001f3ed <Vm::faultHandler(regs*)+0x678>
c001f3e8:	83 eb 02             	sub    ebx,0x2
c001f3eb:	eb 03                	jmp    c001f3f0 <Vm::faultHandler(regs*)+0x67b>
c001f3ed:	83 c3 02             	add    ebx,0x2
c001f3f0:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f3f6:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f3f9:	e9 43 01 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f3fe:	53                   	push   ebx
c001f3ff:	53                   	push   ebx
c001f400:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f404:	50                   	push   eax
c001f405:	68 35 c6 02 c0       	push   0xc002c635
c001f40a:	e8 b7 3a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f40f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f416:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f41a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f41d:	e8 5e f5 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f422:	0f b6 c0             	movzx  eax,al
c001f425:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f428:	eb 5e                	jmp    c001f488 <Vm::faultHandler(regs*)+0x713>
c001f42a:	51                   	push   ecx
c001f42b:	51                   	push   ecx
c001f42c:	53                   	push   ebx
c001f42d:	68 3b c6 02 c0       	push   0xc002c63b
c001f432:	e8 8f 3a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f437:	83 c4 10             	add    esp,0x10
c001f43a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f43f:	74 07                	je     c001f448 <Vm::faultHandler(regs*)+0x6d3>
c001f441:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f445:	ed                   	in     eax,dx
c001f446:	eb 14                	jmp    c001f45c <Vm::faultHandler(regs*)+0x6e7>
c001f448:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f44b:	66 31 db             	xor    bx,bx
c001f44e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f451:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f455:	66 ed                	in     ax,dx
c001f457:	0f b7 c0             	movzx  eax,ax
c001f45a:	09 d8                	or     eax,ebx
c001f45c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f45f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f463:	e9 dc 00 00 00       	jmp    c001f544 <Vm::faultHandler(regs*)+0x7cf>
c001f468:	50                   	push   eax
c001f469:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f46c:	53                   	push   ebx
c001f46d:	68 41 c6 02 c0       	push   0xc002c641
c001f472:	e8 4f 3a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f477:	58                   	pop    eax
c001f478:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f47c:	5a                   	pop    edx
c001f47d:	50                   	push   eax
c001f47e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f482:	50                   	push   eax
c001f483:	e8 0b f5 ff ff       	call   c001e993 <Vm::outbv(unsigned short, unsigned char)>
c001f488:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f48c:	e9 85 00 00 00       	jmp    c001f516 <Vm::faultHandler(regs*)+0x7a1>
c001f491:	50                   	push   eax
c001f492:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f495:	53                   	push   ebx
c001f496:	68 4a c6 02 c0       	push   0xc002c64a
c001f49b:	e8 26 3a ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f4a0:	83 c4 10             	add    esp,0x10
c001f4a3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4a7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4ac:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f4af:	74 03                	je     c001f4b4 <Vm::faultHandler(regs*)+0x73f>
c001f4b1:	ef                   	out    dx,eax
c001f4b2:	eb ab                	jmp    c001f45f <Vm::faultHandler(regs*)+0x6ea>
c001f4b4:	66 ef                	out    dx,ax
c001f4b6:	eb a7                	jmp    c001f45f <Vm::faultHandler(regs*)+0x6ea>
c001f4b8:	55                   	push   ebp
c001f4b9:	55                   	push   ebp
c001f4ba:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4bd:	68 53 c6 02 c0       	push   0xc002c653
c001f4c2:	e8 ff 39 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f4c7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4ce:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f4d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4d5:	e8 a6 f4 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f4da:	0f b6 c0             	movzx  eax,al
c001f4dd:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4e0:	eb 31                	jmp    c001f513 <Vm::faultHandler(regs*)+0x79e>
c001f4e2:	56                   	push   esi
c001f4e3:	56                   	push   esi
c001f4e4:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4e7:	68 59 c6 02 c0       	push   0xc002c659
c001f4ec:	e8 d5 39 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f4f1:	83 c4 10             	add    esp,0x10
c001f4f4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f4f7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4fc:	74 03                	je     c001f501 <Vm::faultHandler(regs*)+0x78c>
c001f4fe:	ed                   	in     eax,dx
c001f4ff:	eb 0d                	jmp    c001f50e <Vm::faultHandler(regs*)+0x799>
c001f501:	66 ed                	in     ax,dx
c001f503:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f506:	0f b7 c0             	movzx  eax,ax
c001f509:	66 31 d2             	xor    dx,dx
c001f50c:	09 d0                	or     eax,edx
c001f50e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f511:	eb 2e                	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f513:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f516:	83 c4 10             	add    esp,0x10
c001f519:	eb 29                	jmp    c001f544 <Vm::faultHandler(regs*)+0x7cf>
c001f51b:	50                   	push   eax
c001f51c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f51f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f522:	68 68 c6 02 c0       	push   0xc002c668
c001f527:	e8 9a 39 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f52c:	83 c4 10             	add    esp,0x10
c001f52f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f532:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f537:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f53a:	74 03                	je     c001f53f <Vm::faultHandler(regs*)+0x7ca>
c001f53c:	ef                   	out    dx,eax
c001f53d:	eb 02                	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f53f:	66 ef                	out    dx,ax
c001f541:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f544:	b0 01                	mov    al,0x1
c001f546:	eb 56                	jmp    c001f59e <Vm::faultHandler(regs*)+0x829>
c001f548:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f54c:	51                   	push   ecx
c001f54d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f551:	51                   	push   ecx
c001f552:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f556:	51                   	push   ecx
c001f557:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f55b:	51                   	push   ecx
c001f55c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f560:	52                   	push   edx
c001f561:	50                   	push   eax
c001f562:	50                   	push   eax
c001f563:	68 71 c6 02 c0       	push   0xc002c671
c001f568:	e8 59 39 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c001f56d:	83 c4 20             	add    esp,0x20
c001f570:	83 ec 0c             	sub    esp,0xc
c001f573:	6a 60                	push   0x60
c001f575:	e8 06 f4 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f57a:	83 c4 10             	add    esp,0x10
c001f57d:	3c 1c                	cmp    al,0x1c
c001f57f:	74 04                	je     c001f585 <Vm::faultHandler(regs*)+0x810>
c001f581:	3c 5a                	cmp    al,0x5a
c001f583:	75 eb                	jne    c001f570 <Vm::faultHandler(regs*)+0x7fb>
c001f585:	3c 1c                	cmp    al,0x1c
c001f587:	74 04                	je     c001f58d <Vm::faultHandler(regs*)+0x818>
c001f589:	3c 5a                	cmp    al,0x5a
c001f58b:	75 0f                	jne    c001f59c <Vm::faultHandler(regs*)+0x827>
c001f58d:	83 ec 0c             	sub    esp,0xc
c001f590:	6a 60                	push   0x60
c001f592:	e8 e9 f3 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f597:	83 c4 10             	add    esp,0x10
c001f59a:	eb e9                	jmp    c001f585 <Vm::faultHandler(regs*)+0x810>
c001f59c:	31 c0                	xor    eax,eax
c001f59e:	83 c4 1c             	add    esp,0x1c
c001f5a1:	5b                   	pop    ebx
c001f5a2:	5e                   	pop    esi
c001f5a3:	5f                   	pop    edi
c001f5a4:	5d                   	pop    ebp
c001f5a5:	c3                   	ret    

c001f5a6 <Vm::x87Save(void*)>:
c001f5a6:	83 ec 10             	sub    esp,0x10
c001f5a9:	6a 48                	push   0x48
c001f5ab:	68 a0 1b 03 c0       	push   0xc0031ba0
c001f5b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b4:	e8 8b 11 fe ff       	call   c0000744 <memcpy>
c001f5b9:	83 c4 1c             	add    esp,0x1c
c001f5bc:	c3                   	ret    

c001f5bd <Vm::x87Load(void*)>:
c001f5bd:	83 ec 10             	sub    esp,0x10
c001f5c0:	6a 48                	push   0x48
c001f5c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f5c6:	68 a0 1b 03 c0       	push   0xc0031ba0
c001f5cb:	e8 74 11 fe ff       	call   c0000744 <memcpy>
c001f5d0:	83 c4 1c             	add    esp,0x1c
c001f5d3:	c3                   	ret    

c001f5d4 <Vm::fpuInternalTo32(unsigned long long)>:
c001f5d4:	57                   	push   edi
c001f5d5:	56                   	push   esi
c001f5d6:	53                   	push   ebx
c001f5d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5df:	89 d6                	mov    esi,edx
c001f5e1:	89 d7                	mov    edi,edx
c001f5e3:	89 c1                	mov    ecx,eax
c001f5e5:	c1 ef 14             	shr    edi,0x14
c001f5e8:	89 d3                	mov    ebx,edx
c001f5ea:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f5f0:	31 d2                	xor    edx,edx
c001f5f2:	89 f8                	mov    eax,edi
c001f5f4:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f5fa:	bf ff 00 00 00       	mov    edi,0xff
c001f5ff:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f604:	83 d2 ff             	adc    edx,0xffffffff
c001f607:	39 c7                	cmp    edi,eax
c001f609:	bf 00 00 00 00       	mov    edi,0x0
c001f60e:	19 d7                	sbb    edi,edx
c001f610:	72 15                	jb     c001f627 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f612:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f616:	c1 e0 17             	shl    eax,0x17
c001f619:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f61f:	09 f1                	or     ecx,esi
c001f621:	09 c1                	or     ecx,eax
c001f623:	89 cf                	mov    edi,ecx
c001f625:	eb 02                	jmp    c001f629 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f627:	31 ff                	xor    edi,edi
c001f629:	89 f8                	mov    eax,edi
c001f62b:	5b                   	pop    ebx
c001f62c:	5e                   	pop    esi
c001f62d:	5f                   	pop    edi
c001f62e:	c3                   	ret    

c001f62f <Vm::fpuInternalTo64(unsigned long long)>:
c001f62f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f633:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f637:	c3                   	ret    

c001f638 <Vm::fpu32ToInternal(unsigned int)>:
c001f638:	57                   	push   edi
c001f639:	31 ff                	xor    edi,edi
c001f63b:	56                   	push   esi
c001f63c:	53                   	push   ebx
c001f63d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f641:	89 cb                	mov    ebx,ecx
c001f643:	89 ce                	mov    esi,ecx
c001f645:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f64b:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f651:	c1 e9 17             	shr    ecx,0x17
c001f654:	89 f0                	mov    eax,esi
c001f656:	0f b6 d1             	movzx  edx,cl
c001f659:	81 c2 80 03 00 00    	add    edx,0x380
c001f65f:	89 d1                	mov    ecx,edx
c001f661:	89 fa                	mov    edx,edi
c001f663:	c1 e1 14             	shl    ecx,0x14
c001f666:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f66a:	c1 e0 1d             	shl    eax,0x1d
c001f66d:	89 d7                	mov    edi,edx
c001f66f:	89 c6                	mov    esi,eax
c001f671:	89 ca                	mov    edx,ecx
c001f673:	89 f0                	mov    eax,esi
c001f675:	09 fa                	or     edx,edi
c001f677:	09 da                	or     edx,ebx
c001f679:	5b                   	pop    ebx
c001f67a:	5e                   	pop    esi
c001f67b:	5f                   	pop    edi
c001f67c:	c3                   	ret    

c001f67d <Vm::fpu64ToInternal(unsigned long long)>:
c001f67d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f681:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f685:	c3                   	ret    

c001f686 <Vm::fpuFloatToLong(unsigned long long)>:
c001f686:	57                   	push   edi
c001f687:	31 c0                	xor    eax,eax
c001f689:	56                   	push   esi
c001f68a:	31 d2                	xor    edx,edx
c001f68c:	53                   	push   ebx
c001f68d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f691:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f695:	89 d9                	mov    ecx,ebx
c001f697:	c1 e9 14             	shr    ecx,0x14
c001f69a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f6a0:	89 cf                	mov    edi,ecx
c001f6a2:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f6a8:	78 33                	js     c001f6dd <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6aa:	89 d9                	mov    ecx,ebx
c001f6ac:	89 f0                	mov    eax,esi
c001f6ae:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f6b4:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f6ba:	89 ca                	mov    edx,ecx
c001f6bc:	b9 34 00 00 00       	mov    ecx,0x34
c001f6c1:	29 f9                	sub    ecx,edi
c001f6c3:	0f ad d0             	shrd   eax,edx,cl
c001f6c6:	d3 fa                	sar    edx,cl
c001f6c8:	f6 c1 20             	test   cl,0x20
c001f6cb:	74 05                	je     c001f6d2 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f6cd:	89 d0                	mov    eax,edx
c001f6cf:	c1 fa 1f             	sar    edx,0x1f
c001f6d2:	85 db                	test   ebx,ebx
c001f6d4:	79 07                	jns    c001f6dd <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6d6:	f7 d8                	neg    eax
c001f6d8:	83 d2 00             	adc    edx,0x0
c001f6db:	f7 da                	neg    edx
c001f6dd:	5b                   	pop    ebx
c001f6de:	5e                   	pop    esi
c001f6df:	5f                   	pop    edi
c001f6e0:	c3                   	ret    

c001f6e1 <Vm::fpuULongToFloat(unsigned long long)>:
c001f6e1:	57                   	push   edi
c001f6e2:	31 c9                	xor    ecx,ecx
c001f6e4:	56                   	push   esi
c001f6e5:	53                   	push   ebx
c001f6e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f6ee:	0f ba e7 14          	bt     edi,0x14
c001f6f2:	72 07                	jb     c001f6fb <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f6f4:	01 f6                	add    esi,esi
c001f6f6:	11 ff                	adc    edi,edi
c001f6f8:	41                   	inc    ecx
c001f6f9:	eb f3                	jmp    c001f6ee <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f6fb:	89 fa                	mov    edx,edi
c001f6fd:	89 f0                	mov    eax,esi
c001f6ff:	bb 33 04 00 00       	mov    ebx,0x433
c001f704:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f70a:	29 cb                	sub    ebx,ecx
c001f70c:	89 d9                	mov    ecx,ebx
c001f70e:	5b                   	pop    ebx
c001f70f:	c1 e1 14             	shl    ecx,0x14
c001f712:	5e                   	pop    esi
c001f713:	09 ca                	or     edx,ecx
c001f715:	5f                   	pop    edi
c001f716:	c3                   	ret    

c001f717 <Vm::fpuLongToFloat(long long)>:
c001f717:	56                   	push   esi
c001f718:	31 c0                	xor    eax,eax
c001f71a:	53                   	push   ebx
c001f71b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f71f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f723:	39 c8                	cmp    eax,ecx
c001f725:	19 d8                	sbb    eax,ebx
c001f727:	7d 04                	jge    c001f72d <Vm::fpuLongToFloat(long long)+0x16>
c001f729:	31 f6                	xor    esi,esi
c001f72b:	eb 0c                	jmp    c001f739 <Vm::fpuLongToFloat(long long)+0x22>
c001f72d:	f7 d9                	neg    ecx
c001f72f:	be 01 00 00 00       	mov    esi,0x1
c001f734:	83 d3 00             	adc    ebx,0x0
c001f737:	f7 db                	neg    ebx
c001f739:	31 c0                	xor    eax,eax
c001f73b:	0f ba e3 14          	bt     ebx,0x14
c001f73f:	72 07                	jb     c001f748 <Vm::fpuLongToFloat(long long)+0x31>
c001f741:	01 c9                	add    ecx,ecx
c001f743:	11 db                	adc    ebx,ebx
c001f745:	40                   	inc    eax
c001f746:	eb f3                	jmp    c001f73b <Vm::fpuLongToFloat(long long)+0x24>
c001f748:	ba 33 04 00 00       	mov    edx,0x433
c001f74d:	29 c2                	sub    edx,eax
c001f74f:	89 c8                	mov    eax,ecx
c001f751:	c1 e2 14             	shl    edx,0x14
c001f754:	89 d9                	mov    ecx,ebx
c001f756:	89 f3                	mov    ebx,esi
c001f758:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f75e:	09 ca                	or     edx,ecx
c001f760:	84 db                	test   bl,bl
c001f762:	74 06                	je     c001f76a <Vm::fpuLongToFloat(long long)+0x53>
c001f764:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f76a:	5b                   	pop    ebx
c001f76b:	5e                   	pop    esi
c001f76c:	c3                   	ret    

c001f76d <Vm::fpuGet0()>:
c001f76d:	31 c0                	xor    eax,eax
c001f76f:	31 d2                	xor    edx,edx
c001f771:	c3                   	ret    

c001f772 <Vm::fpuGet1()>:
c001f772:	b8 01 00 00 00       	mov    eax,0x1
c001f777:	31 d2                	xor    edx,edx
c001f779:	c3                   	ret    

c001f77a <Vm::fpuGetPi()>:
c001f77a:	b8 03 00 00 00       	mov    eax,0x3
c001f77f:	31 d2                	xor    edx,edx
c001f781:	c3                   	ret    

c001f782 <Vm::fpuGetLog2E()>:
c001f782:	83 ec 18             	sub    esp,0x18
c001f785:	68 d0 c6 02 c0       	push   0xc002c6d0
c001f78a:	e8 dc ad ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001f78f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f794:	31 d2                	xor    edx,edx
c001f796:	83 c4 1c             	add    esp,0x1c
c001f799:	c3                   	ret    

c001f79a <Vm::fpuGetLogE2()>:
c001f79a:	83 ec 18             	sub    esp,0x18
c001f79d:	68 dc c6 02 c0       	push   0xc002c6dc
c001f7a2:	e8 c4 ad ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001f7a7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7ac:	31 d2                	xor    edx,edx
c001f7ae:	83 c4 1c             	add    esp,0x1c
c001f7b1:	c3                   	ret    

c001f7b2 <Vm::fpuGetLog210()>:
c001f7b2:	83 ec 18             	sub    esp,0x18
c001f7b5:	68 e8 c6 02 c0       	push   0xc002c6e8
c001f7ba:	e8 ac ad ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001f7bf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7c4:	31 d2                	xor    edx,edx
c001f7c6:	83 c4 1c             	add    esp,0x1c
c001f7c9:	c3                   	ret    

c001f7ca <Vm::fpuGetLog102()>:
c001f7ca:	83 ec 18             	sub    esp,0x18
c001f7cd:	68 f5 c6 02 c0       	push   0xc002c6f5
c001f7d2:	e8 94 ad ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001f7d7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7dc:	31 d2                	xor    edx,edx
c001f7de:	83 c4 1c             	add    esp,0x1c
c001f7e1:	c3                   	ret    

c001f7e2 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f7e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7e6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f7ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7ee:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f7f2:	0f 92 c0             	setb   al
c001f7f5:	c3                   	ret    

c001f7f6 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f7f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fe:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f802:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f806:	09 c2                	or     edx,eax
c001f808:	0f 94 c0             	sete   al
c001f80b:	c3                   	ret    

c001f80c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f80c:	57                   	push   edi
c001f80d:	56                   	push   esi
c001f80e:	53                   	push   ebx
c001f80f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f813:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f817:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f81b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f81f:	57                   	push   edi
c001f820:	56                   	push   esi
c001f821:	53                   	push   ebx
c001f822:	51                   	push   ecx
c001f823:	e8 ce ff ff ff       	call   c001f7f6 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f828:	83 c4 10             	add    esp,0x10
c001f82b:	88 c2                	mov    dl,al
c001f82d:	31 c0                	xor    eax,eax
c001f82f:	84 d2                	test   dl,dl
c001f831:	75 0c                	jne    c001f83f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f833:	57                   	push   edi
c001f834:	56                   	push   esi
c001f835:	53                   	push   ebx
c001f836:	51                   	push   ecx
c001f837:	e8 a6 ff ff ff       	call   c001f7e2 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f83c:	83 c4 10             	add    esp,0x10
c001f83f:	83 e0 01             	and    eax,0x1
c001f842:	5b                   	pop    ebx
c001f843:	88 c1                	mov    cl,al
c001f845:	83 e2 01             	and    edx,0x1
c001f848:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f84d:	c1 e2 06             	shl    edx,0x6
c001f850:	83 e0 ba             	and    eax,0xffffffba
c001f853:	5e                   	pop    esi
c001f854:	09 c8                	or     eax,ecx
c001f856:	5f                   	pop    edi
c001f857:	09 d0                	or     eax,edx
c001f859:	a2 a1 1b 03 c0       	mov    ds:0xc0031ba1,al
c001f85e:	c3                   	ret    

c001f85f <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f85f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f863:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f867:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f86b:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f86f:	c3                   	ret    

c001f870 <Vm::fpuAbs(unsigned long long)>:
c001f870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f874:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f878:	c3                   	ret    

c001f879 <Vm::fpuChs(unsigned long long)>:
c001f879:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f87d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f881:	f7 d8                	neg    eax
c001f883:	83 d2 00             	adc    edx,0x0
c001f886:	f7 da                	neg    edx
c001f888:	c3                   	ret    

c001f889 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f889:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f88d:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f892:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f896:	eb c7                	jmp    c001f85f <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f898 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f898:	53                   	push   ebx
c001f899:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f89d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8a9:	0f af ca             	imul   ecx,edx
c001f8ac:	0f af d8             	imul   ebx,eax
c001f8af:	f7 e2                	mul    edx
c001f8b1:	01 d9                	add    ecx,ebx
c001f8b3:	5b                   	pop    ebx
c001f8b4:	01 ca                	add    edx,ecx
c001f8b6:	c3                   	ret    

c001f8b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f8b7:	83 ec 0c             	sub    esp,0xc
c001f8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ca:	e8 9d 70 00 00       	call   c002696c <__udivdi3>
c001f8cf:	83 c4 1c             	add    esp,0x1c
c001f8d2:	c3                   	ret    

c001f8d3 <Vm::fpuSquare(unsigned long long)>:
c001f8d3:	50                   	push   eax
c001f8d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8dc:	52                   	push   edx
c001f8dd:	50                   	push   eax
c001f8de:	52                   	push   edx
c001f8df:	50                   	push   eax
c001f8e0:	e8 b3 ff ff ff       	call   c001f898 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8e5:	83 c4 14             	add    esp,0x14
c001f8e8:	c3                   	ret    

c001f8e9 <Vm::fpuGetReg(int)>:
c001f8e9:	83 ec 0c             	sub    esp,0xc
c001f8ec:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f8f1:	76 10                	jbe    c001f903 <Vm::fpuGetReg(int)+0x1a>
c001f8f3:	83 ec 0c             	sub    esp,0xc
c001f8f6:	68 02 c7 02 c0       	push   0xc002c702
c001f8fb:	e8 6b ac ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001f900:	83 c4 10             	add    esp,0x10
c001f903:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f908:	b9 08 00 00 00       	mov    ecx,0x8
c001f90d:	c0 e8 03             	shr    al,0x3
c001f910:	83 e0 07             	and    eax,0x7
c001f913:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f917:	99                   	cdq    
c001f918:	f7 f9                	idiv   ecx
c001f91a:	8b 04 d5 a4 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce45c]
c001f921:	8b 14 d5 a8 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce458]
c001f928:	83 c4 0c             	add    esp,0xc
c001f92b:	c3                   	ret    

c001f92c <Vm::fpuSetReg(int, unsigned long long)>:
c001f92c:	57                   	push   edi
c001f92d:	56                   	push   esi
c001f92e:	52                   	push   edx
c001f92f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f933:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f937:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f93c:	76 10                	jbe    c001f94e <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f93e:	83 ec 0c             	sub    esp,0xc
c001f941:	68 15 c7 02 c0       	push   0xc002c715
c001f946:	e8 20 ac ff ff       	call   c001a56b <Krnl::panic(char const*)>
c001f94b:	83 c4 10             	add    esp,0x10
c001f94e:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f953:	b9 08 00 00 00       	mov    ecx,0x8
c001f958:	c0 e8 03             	shr    al,0x3
c001f95b:	83 e0 07             	and    eax,0x7
c001f95e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f962:	99                   	cdq    
c001f963:	f7 f9                	idiv   ecx
c001f965:	89 34 d5 a4 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce45c],esi
c001f96c:	89 3c d5 a8 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce458],edi
c001f973:	58                   	pop    eax
c001f974:	5e                   	pop    esi
c001f975:	5f                   	pop    edi
c001f976:	c3                   	ret    

c001f977 <Vm::fpuPush(unsigned long long)>:
c001f977:	a0 a1 1b 03 c0       	mov    al,ds:0xc0031ba1
c001f97c:	c0 e8 03             	shr    al,0x3
c001f97f:	83 e0 07             	and    eax,0x7
c001f982:	83 c0 07             	add    eax,0x7
c001f985:	88 c2                	mov    dl,al
c001f987:	83 e0 07             	and    eax,0x7
c001f98a:	83 e2 07             	and    edx,0x7
c001f98d:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f994:	8a 15 a1 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031ba1
c001f99a:	83 e2 c7             	and    edx,0xffffffc7
c001f99d:	09 ca                	or     edx,ecx
c001f99f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9a3:	88 15 a1 1b 03 c0    	mov    BYTE PTR ds:0xc0031ba1,dl
c001f9a9:	89 0c c5 a8 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce458],ecx
c001f9b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9b4:	89 14 c5 a4 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce45c],edx
c001f9bb:	a1 e4 1b 03 c0       	mov    eax,ds:0xc0031be4
c001f9c0:	83 f8 08             	cmp    eax,0x8
c001f9c3:	75 08                	jne    c001f9cd <Vm::fpuPush(unsigned long long)+0x56>
c001f9c5:	80 0d a0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031ba0,0x40
c001f9cc:	c3                   	ret    
c001f9cd:	40                   	inc    eax
c001f9ce:	a3 e4 1b 03 c0       	mov    ds:0xc0031be4,eax
c001f9d3:	c3                   	ret    

c001f9d4 <Vm::fpuPop()>:
c001f9d4:	8a 0d a1 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031ba1
c001f9da:	53                   	push   ebx
c001f9db:	c0 e9 03             	shr    cl,0x3
c001f9de:	8a 1d a1 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031ba1
c001f9e4:	83 e1 07             	and    ecx,0x7
c001f9e7:	83 e3 c7             	and    ebx,0xffffffc7
c001f9ea:	8b 04 cd a4 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce45c]
c001f9f1:	8b 14 cd a8 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce458]
c001f9f8:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f9ff:	83 e1 38             	and    ecx,0x38
c001fa02:	09 d9                	or     ecx,ebx
c001fa04:	88 0d a1 1b 03 c0    	mov    BYTE PTR ds:0xc0031ba1,cl
c001fa0a:	8b 0d e4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031be4
c001fa10:	85 c9                	test   ecx,ecx
c001fa12:	74 09                	je     c001fa1d <Vm::fpuPop()+0x49>
c001fa14:	49                   	dec    ecx
c001fa15:	89 0d e4 1b 03 c0    	mov    DWORD PTR ds:0xc0031be4,ecx
c001fa1b:	eb 07                	jmp    c001fa24 <Vm::fpuPop()+0x50>
c001fa1d:	80 0d a0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031ba0,0x40
c001fa24:	5b                   	pop    ebx
c001fa25:	c3                   	ret    

c001fa26 <Vm::x87Handler(regs*)>:
c001fa26:	55                   	push   ebp
c001fa27:	57                   	push   edi
c001fa28:	56                   	push   esi
c001fa29:	53                   	push   ebx
c001fa2a:	83 ec 1c             	sub    esp,0x1c
c001fa2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa31:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa36:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa39:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa41:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa45:	50                   	push   eax
c001fa46:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa4a:	50                   	push   eax
c001fa4b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa4f:	50                   	push   eax
c001fa50:	53                   	push   ebx
c001fa51:	e8 dc a1 ff ff       	call   c0019c32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa56:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa59:	83 c4 10             	add    esp,0x10
c001fa5c:	89 c6                	mov    esi,eax
c001fa5e:	80 fa d9             	cmp    dl,0xd9
c001fa61:	0f 85 52 01 00 00    	jne    c001fbb9 <Vm::x87Handler(regs*)+0x193>
c001fa67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa6b:	8d 50 20             	lea    edx,[eax+0x20]
c001fa6e:	80 fa 0e             	cmp    dl,0xe
c001fa71:	0f 87 86 00 00 00    	ja     c001fafd <Vm::x87Handler(regs*)+0xd7>
c001fa77:	0f b6 d2             	movzx  edx,dl
c001fa7a:	ff 24 95 28 c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd38d8]
c001fa81:	e8 e7 fc ff ff       	call   c001f76d <Vm::fpuGet0()>
c001fa86:	eb 05                	jmp    c001fa8d <Vm::x87Handler(regs*)+0x67>
c001fa88:	e8 e5 fc ff ff       	call   c001f772 <Vm::fpuGet1()>
c001fa8d:	57                   	push   edi
c001fa8e:	57                   	push   edi
c001fa8f:	52                   	push   edx
c001fa90:	50                   	push   eax
c001fa91:	e8 e1 fe ff ff       	call   c001f977 <Vm::fpuPush(unsigned long long)>
c001fa96:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa9a:	83 c4 10             	add    esp,0x10
c001fa9d:	b0 01                	mov    al,0x1
c001fa9f:	e9 e3 09 00 00       	jmp    c0020487 <Vm::x87Handler(regs*)+0xa61>
c001faa4:	83 ec 0c             	sub    esp,0xc
c001faa7:	6a 00                	push   0x0
c001faa9:	e8 3b fe ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001faae:	59                   	pop    ecx
c001faaf:	5e                   	pop    esi
c001fab0:	52                   	push   edx
c001fab1:	50                   	push   eax
c001fab2:	e8 c2 fd ff ff       	call   c001f879 <Vm::fpuChs(unsigned long long)>
c001fab7:	eb 13                	jmp    c001facc <Vm::x87Handler(regs*)+0xa6>
c001fab9:	83 ec 0c             	sub    esp,0xc
c001fabc:	6a 00                	push   0x0
c001fabe:	e8 26 fe ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fac3:	5f                   	pop    edi
c001fac4:	5d                   	pop    ebp
c001fac5:	52                   	push   edx
c001fac6:	50                   	push   eax
c001fac7:	e8 a4 fd ff ff       	call   c001f870 <Vm::fpuAbs(unsigned long long)>
c001facc:	83 c4 0c             	add    esp,0xc
c001facf:	52                   	push   edx
c001fad0:	50                   	push   eax
c001fad1:	6a 00                	push   0x0
c001fad3:	e8 54 fe ff ff       	call   c001f92c <Vm::fpuSetReg(int, unsigned long long)>
c001fad8:	eb bc                	jmp    c001fa96 <Vm::x87Handler(regs*)+0x70>
c001fada:	e8 d3 fc ff ff       	call   c001f7b2 <Vm::fpuGetLog210()>
c001fadf:	eb ac                	jmp    c001fa8d <Vm::x87Handler(regs*)+0x67>
c001fae1:	e8 9c fc ff ff       	call   c001f782 <Vm::fpuGetLog2E()>
c001fae6:	eb a5                	jmp    c001fa8d <Vm::x87Handler(regs*)+0x67>
c001fae8:	e8 8d fc ff ff       	call   c001f77a <Vm::fpuGetPi()>
c001faed:	eb 9e                	jmp    c001fa8d <Vm::x87Handler(regs*)+0x67>
c001faef:	e8 d6 fc ff ff       	call   c001f7ca <Vm::fpuGetLog102()>
c001faf4:	eb 97                	jmp    c001fa8d <Vm::x87Handler(regs*)+0x67>
c001faf6:	e8 9f fc ff ff       	call   c001f79a <Vm::fpuGetLogE2()>
c001fafb:	eb 90                	jmp    c001fa8d <Vm::x87Handler(regs*)+0x67>
c001fafd:	8d 50 40             	lea    edx,[eax+0x40]
c001fb00:	80 fa 07             	cmp    dl,0x7
c001fb03:	77 15                	ja     c001fb1a <Vm::x87Handler(regs*)+0xf4>
c001fb05:	83 ec 0c             	sub    esp,0xc
c001fb08:	2d c0 00 00 00       	sub    eax,0xc0
c001fb0d:	50                   	push   eax
c001fb0e:	e8 d6 fd ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fb13:	59                   	pop    ecx
c001fb14:	5e                   	pop    esi
c001fb15:	e9 75 ff ff ff       	jmp    c001fa8f <Vm::x87Handler(regs*)+0x69>
c001fb1a:	8d 50 38             	lea    edx,[eax+0x38]
c001fb1d:	80 fa 07             	cmp    dl,0x7
c001fb20:	77 3c                	ja     c001fb5e <Vm::x87Handler(regs*)+0x138>
c001fb22:	83 ec 0c             	sub    esp,0xc
c001fb25:	2d c8 00 00 00       	sub    eax,0xc8
c001fb2a:	50                   	push   eax
c001fb2b:	e8 b9 fd ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fb30:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb37:	89 c6                	mov    esi,eax
c001fb39:	89 d7                	mov    edi,edx
c001fb3b:	e8 a9 fd ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fb40:	83 c4 0c             	add    esp,0xc
c001fb43:	52                   	push   edx
c001fb44:	50                   	push   eax
c001fb45:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb49:	2d c8 00 00 00       	sub    eax,0xc8
c001fb4e:	50                   	push   eax
c001fb4f:	e8 d8 fd ff ff       	call   c001f92c <Vm::fpuSetReg(int, unsigned long long)>
c001fb54:	83 c4 0c             	add    esp,0xc
c001fb57:	57                   	push   edi
c001fb58:	56                   	push   esi
c001fb59:	e9 73 ff ff ff       	jmp    c001fad1 <Vm::x87Handler(regs*)+0xab>
c001fb5e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb62:	84 d2                	test   dl,dl
c001fb64:	75 0f                	jne    c001fb75 <Vm::x87Handler(regs*)+0x14f>
c001fb66:	83 ec 0c             	sub    esp,0xc
c001fb69:	ff 36                	push   DWORD PTR [esi]
c001fb6b:	e8 c8 fa ff ff       	call   c001f638 <Vm::fpu32ToInternal(unsigned int)>
c001fb70:	e9 bf 00 00 00       	jmp    c001fc34 <Vm::x87Handler(regs*)+0x20e>
c001fb75:	80 fa 03             	cmp    dl,0x3
c001fb78:	75 13                	jne    c001fb8d <Vm::x87Handler(regs*)+0x167>
c001fb7a:	e8 55 fe ff ff       	call   c001f9d4 <Vm::fpuPop()>
c001fb7f:	55                   	push   ebp
c001fb80:	55                   	push   ebp
c001fb81:	52                   	push   edx
c001fb82:	50                   	push   eax
c001fb83:	e8 4c fa ff ff       	call   c001f5d4 <Vm::fpuInternalTo32(unsigned long long)>
c001fb88:	e9 88 00 00 00       	jmp    c001fc15 <Vm::x87Handler(regs*)+0x1ef>
c001fb8d:	80 fa 05             	cmp    dl,0x5
c001fb90:	75 0e                	jne    c001fba0 <Vm::x87Handler(regs*)+0x17a>
c001fb92:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fb95:	66 a3 a2 1b 03 c0    	mov    ds:0xc0031ba2,ax
c001fb9b:	e9 df 00 00 00       	jmp    c001fc7f <Vm::x87Handler(regs*)+0x259>
c001fba0:	31 c0                	xor    eax,eax
c001fba2:	80 fa 07             	cmp    dl,0x7
c001fba5:	0f 85 dc 08 00 00    	jne    c0020487 <Vm::x87Handler(regs*)+0xa61>
c001fbab:	66 a1 a2 1b 03 c0    	mov    ax,ds:0xc0031ba2
c001fbb1:	66 89 06             	mov    WORD PTR [esi],ax
c001fbb4:	e9 c6 00 00 00       	jmp    c001fc7f <Vm::x87Handler(regs*)+0x259>
c001fbb9:	80 fa d8             	cmp    dl,0xd8
c001fbbc:	0f 84 c9 00 00 00    	je     c001fc8b <Vm::x87Handler(regs*)+0x265>
c001fbc2:	80 fa dc             	cmp    dl,0xdc
c001fbc5:	0f 84 0d 02 00 00    	je     c001fdd8 <Vm::x87Handler(regs*)+0x3b2>
c001fbcb:	80 fa de             	cmp    dl,0xde
c001fbce:	0f 84 cd 02 00 00    	je     c001fea1 <Vm::x87Handler(regs*)+0x47b>
c001fbd4:	80 fa dd             	cmp    dl,0xdd
c001fbd7:	0f 84 5f 04 00 00    	je     c002003c <Vm::x87Handler(regs*)+0x616>
c001fbdd:	80 fa da             	cmp    dl,0xda
c001fbe0:	0f 84 24 05 00 00    	je     c002010a <Vm::x87Handler(regs*)+0x6e4>
c001fbe6:	80 fa df             	cmp    dl,0xdf
c001fbe9:	0f 84 68 05 00 00    	je     c0020157 <Vm::x87Handler(regs*)+0x731>
c001fbef:	31 c0                	xor    eax,eax
c001fbf1:	80 fa db             	cmp    dl,0xdb
c001fbf4:	0f 85 8d 08 00 00    	jne    c0020487 <Vm::x87Handler(regs*)+0xa61>
c001fbfa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbfe:	80 fa 03             	cmp    dl,0x3
c001fc01:	0f 85 70 06 00 00    	jne    c0020277 <Vm::x87Handler(regs*)+0x851>
c001fc07:	e8 c8 fd ff ff       	call   c001f9d4 <Vm::fpuPop()>
c001fc0c:	55                   	push   ebp
c001fc0d:	55                   	push   ebp
c001fc0e:	52                   	push   edx
c001fc0f:	50                   	push   eax
c001fc10:	e8 71 fa ff ff       	call   c001f686 <Vm::fpuFloatToLong(unsigned long long)>
c001fc15:	83 c4 10             	add    esp,0x10
c001fc18:	89 06                	mov    DWORD PTR [esi],eax
c001fc1a:	eb 63                	jmp    c001fc7f <Vm::x87Handler(regs*)+0x259>
c001fc1c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc20:	84 d2                	test   dl,dl
c001fc22:	0f 85 e6 05 00 00    	jne    c002020e <Vm::x87Handler(regs*)+0x7e8>
c001fc28:	57                   	push   edi
c001fc29:	57                   	push   edi
c001fc2a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc2d:	ff 36                	push   DWORD PTR [esi]
c001fc2f:	e8 49 fa ff ff       	call   c001f67d <Vm::fpu64ToInternal(unsigned long long)>
c001fc34:	5e                   	pop    esi
c001fc35:	5f                   	pop    edi
c001fc36:	52                   	push   edx
c001fc37:	50                   	push   eax
c001fc38:	e8 3a fd ff ff       	call   c001f977 <Vm::fpuPush(unsigned long long)>
c001fc3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc41:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc44:	e9 51 fe ff ff       	jmp    c001fa9a <Vm::x87Handler(regs*)+0x74>
c001fc49:	80 fa 03             	cmp    dl,0x3
c001fc4c:	0f 85 d7 06 00 00    	jne    c0020329 <Vm::x87Handler(regs*)+0x903>
c001fc52:	57                   	push   edi
c001fc53:	57                   	push   edi
c001fc54:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc57:	ff 36                	push   DWORD PTR [esi]
c001fc59:	e8 1f fa ff ff       	call   c001f67d <Vm::fpu64ToInternal(unsigned long long)>
c001fc5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc65:	89 c6                	mov    esi,eax
c001fc67:	89 d7                	mov    edi,edx
c001fc69:	e8 7b fc ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fc6e:	57                   	push   edi
c001fc6f:	56                   	push   esi
c001fc70:	52                   	push   edx
c001fc71:	50                   	push   eax
c001fc72:	e8 95 fb ff ff       	call   c001f80c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc77:	83 c4 20             	add    esp,0x20
c001fc7a:	e8 55 fd ff ff       	call   c001f9d4 <Vm::fpuPop()>
c001fc7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc83:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc86:	e9 12 fe ff ff       	jmp    c001fa9d <Vm::x87Handler(regs*)+0x77>
c001fc8b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc8f:	8d 50 40             	lea    edx,[eax+0x40]
c001fc92:	80 fa 07             	cmp    dl,0x7
c001fc95:	77 29                	ja     c001fcc0 <Vm::x87Handler(regs*)+0x29a>
c001fc97:	83 ec 0c             	sub    esp,0xc
c001fc9a:	2d c0 00 00 00       	sub    eax,0xc0
c001fc9f:	50                   	push   eax
c001fca0:	e8 44 fc ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fca5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcac:	89 c6                	mov    esi,eax
c001fcae:	89 d7                	mov    edi,edx
c001fcb0:	e8 34 fc ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fcb5:	57                   	push   edi
c001fcb6:	56                   	push   esi
c001fcb7:	52                   	push   edx
c001fcb8:	50                   	push   eax
c001fcb9:	e8 a1 fb ff ff       	call   c001f85f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcbe:	eb 2f                	jmp    c001fcef <Vm::x87Handler(regs*)+0x2c9>
c001fcc0:	8d 50 38             	lea    edx,[eax+0x38]
c001fcc3:	80 fa 07             	cmp    dl,0x7
c001fcc6:	77 2f                	ja     c001fcf7 <Vm::x87Handler(regs*)+0x2d1>
c001fcc8:	83 ec 0c             	sub    esp,0xc
c001fccb:	2d c8 00 00 00       	sub    eax,0xc8
c001fcd0:	50                   	push   eax
c001fcd1:	e8 13 fc ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fcd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcdd:	89 c6                	mov    esi,eax
c001fcdf:	89 d7                	mov    edi,edx
c001fce1:	e8 03 fc ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fce6:	57                   	push   edi
c001fce7:	56                   	push   esi
c001fce8:	52                   	push   edx
c001fce9:	50                   	push   eax
c001fcea:	e8 a9 fb ff ff       	call   c001f898 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcef:	83 c4 1c             	add    esp,0x1c
c001fcf2:	e9 d8 fd ff ff       	jmp    c001facf <Vm::x87Handler(regs*)+0xa9>
c001fcf7:	8d 50 30             	lea    edx,[eax+0x30]
c001fcfa:	80 fa 07             	cmp    dl,0x7
c001fcfd:	77 0d                	ja     c001fd0c <Vm::x87Handler(regs*)+0x2e6>
c001fcff:	83 ec 0c             	sub    esp,0xc
c001fd02:	2d d0 00 00 00       	sub    eax,0xd0
c001fd07:	e9 99 03 00 00       	jmp    c00200a5 <Vm::x87Handler(regs*)+0x67f>
c001fd0c:	8d 50 28             	lea    edx,[eax+0x28]
c001fd0f:	80 fa 07             	cmp    dl,0x7
c001fd12:	77 0d                	ja     c001fd21 <Vm::x87Handler(regs*)+0x2fb>
c001fd14:	83 ec 0c             	sub    esp,0xc
c001fd17:	2d d8 00 00 00       	sub    eax,0xd8
c001fd1c:	e9 c0 03 00 00       	jmp    c00200e1 <Vm::x87Handler(regs*)+0x6bb>
c001fd21:	8d 50 20             	lea    edx,[eax+0x20]
c001fd24:	80 fa 07             	cmp    dl,0x7
c001fd27:	77 1b                	ja     c001fd44 <Vm::x87Handler(regs*)+0x31e>
c001fd29:	83 ec 0c             	sub    esp,0xc
c001fd2c:	2d e0 00 00 00       	sub    eax,0xe0
c001fd31:	50                   	push   eax
c001fd32:	e8 b2 fb ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fd37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd3e:	89 c6                	mov    esi,eax
c001fd40:	89 d7                	mov    edi,edx
c001fd42:	eb 22                	jmp    c001fd66 <Vm::x87Handler(regs*)+0x340>
c001fd44:	8d 50 18             	lea    edx,[eax+0x18]
c001fd47:	80 fa 07             	cmp    dl,0x7
c001fd4a:	77 2d                	ja     c001fd79 <Vm::x87Handler(regs*)+0x353>
c001fd4c:	83 ec 0c             	sub    esp,0xc
c001fd4f:	6a 00                	push   0x0
c001fd51:	e8 93 fb ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fd56:	89 c6                	mov    esi,eax
c001fd58:	89 d7                	mov    edi,edx
c001fd5a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd5e:	2d e8 00 00 00       	sub    eax,0xe8
c001fd63:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd66:	e8 7e fb ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fd6b:	57                   	push   edi
c001fd6c:	56                   	push   esi
c001fd6d:	52                   	push   edx
c001fd6e:	50                   	push   eax
c001fd6f:	e8 15 fb ff ff       	call   c001f889 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd74:	e9 76 ff ff ff       	jmp    c001fcef <Vm::x87Handler(regs*)+0x2c9>
c001fd79:	8d 50 10             	lea    edx,[eax+0x10]
c001fd7c:	80 fa 07             	cmp    dl,0x7
c001fd7f:	77 1b                	ja     c001fd9c <Vm::x87Handler(regs*)+0x376>
c001fd81:	83 ec 0c             	sub    esp,0xc
c001fd84:	2d f0 00 00 00       	sub    eax,0xf0
c001fd89:	50                   	push   eax
c001fd8a:	e8 5a fb ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fd8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd96:	89 c6                	mov    esi,eax
c001fd98:	89 d7                	mov    edi,edx
c001fd9a:	eb 22                	jmp    c001fdbe <Vm::x87Handler(regs*)+0x398>
c001fd9c:	3c f7                	cmp    al,0xf7
c001fd9e:	0f 86 d1 03 00 00    	jbe    c0020175 <Vm::x87Handler(regs*)+0x74f>
c001fda4:	83 ec 0c             	sub    esp,0xc
c001fda7:	6a 00                	push   0x0
c001fda9:	e8 3b fb ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fdae:	89 c6                	mov    esi,eax
c001fdb0:	89 d7                	mov    edi,edx
c001fdb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb6:	2d f8 00 00 00       	sub    eax,0xf8
c001fdbb:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdbe:	e8 26 fb ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fdc3:	57                   	push   edi
c001fdc4:	56                   	push   esi
c001fdc5:	52                   	push   edx
c001fdc6:	50                   	push   eax
c001fdc7:	e8 eb fa ff ff       	call   c001f8b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fdcc:	83 c4 1c             	add    esp,0x1c
c001fdcf:	52                   	push   edx
c001fdd0:	50                   	push   eax
c001fdd1:	6a 00                	push   0x0
c001fdd3:	e9 51 02 00 00       	jmp    c0020029 <Vm::x87Handler(regs*)+0x603>
c001fdd8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fddc:	8d 50 40             	lea    edx,[eax+0x40]
c001fddf:	80 fa 07             	cmp    dl,0x7
c001fde2:	77 37                	ja     c001fe1b <Vm::x87Handler(regs*)+0x3f5>
c001fde4:	83 ec 0c             	sub    esp,0xc
c001fde7:	2d c0 00 00 00       	sub    eax,0xc0
c001fdec:	50                   	push   eax
c001fded:	e8 f7 fa ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fdf2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdf9:	89 c6                	mov    esi,eax
c001fdfb:	89 d7                	mov    edi,edx
c001fdfd:	e8 e7 fa ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fe02:	57                   	push   edi
c001fe03:	56                   	push   esi
c001fe04:	52                   	push   edx
c001fe05:	50                   	push   eax
c001fe06:	e8 54 fa ff ff       	call   c001f85f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe0b:	83 c4 1c             	add    esp,0x1c
c001fe0e:	52                   	push   edx
c001fe0f:	50                   	push   eax
c001fe10:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe14:	2d c0 00 00 00       	sub    eax,0xc0
c001fe19:	eb 3d                	jmp    c001fe58 <Vm::x87Handler(regs*)+0x432>
c001fe1b:	8d 50 38             	lea    edx,[eax+0x38]
c001fe1e:	80 fa 07             	cmp    dl,0x7
c001fe21:	77 3b                	ja     c001fe5e <Vm::x87Handler(regs*)+0x438>
c001fe23:	83 ec 0c             	sub    esp,0xc
c001fe26:	2d c8 00 00 00       	sub    eax,0xc8
c001fe2b:	50                   	push   eax
c001fe2c:	e8 b8 fa ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fe31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe38:	89 c6                	mov    esi,eax
c001fe3a:	89 d7                	mov    edi,edx
c001fe3c:	e8 a8 fa ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fe41:	57                   	push   edi
c001fe42:	56                   	push   esi
c001fe43:	52                   	push   edx
c001fe44:	50                   	push   eax
c001fe45:	e8 4e fa ff ff       	call   c001f898 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe4a:	83 c4 1c             	add    esp,0x1c
c001fe4d:	52                   	push   edx
c001fe4e:	50                   	push   eax
c001fe4f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe53:	2d c8 00 00 00       	sub    eax,0xc8
c001fe58:	50                   	push   eax
c001fe59:	e9 75 fc ff ff       	jmp    c001fad3 <Vm::x87Handler(regs*)+0xad>
c001fe5e:	83 c0 18             	add    eax,0x18
c001fe61:	3c 07                	cmp    al,0x7
c001fe63:	0f 87 3b 04 00 00    	ja     c00202a4 <Vm::x87Handler(regs*)+0x87e>
c001fe69:	83 ec 0c             	sub    esp,0xc
c001fe6c:	6a 00                	push   0x0
c001fe6e:	e8 76 fa ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fe73:	89 c6                	mov    esi,eax
c001fe75:	89 d7                	mov    edi,edx
c001fe77:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe7b:	2d e8 00 00 00       	sub    eax,0xe8
c001fe80:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe83:	e8 61 fa ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fe88:	57                   	push   edi
c001fe89:	56                   	push   esi
c001fe8a:	52                   	push   edx
c001fe8b:	50                   	push   eax
c001fe8c:	e8 f8 f9 ff ff       	call   c001f889 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe91:	83 c4 1c             	add    esp,0x1c
c001fe94:	52                   	push   edx
c001fe95:	50                   	push   eax
c001fe96:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe9a:	2d e8 00 00 00       	sub    eax,0xe8
c001fe9f:	eb b7                	jmp    c001fe58 <Vm::x87Handler(regs*)+0x432>
c001fea1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea5:	8d 50 40             	lea    edx,[eax+0x40]
c001fea8:	80 fa 07             	cmp    dl,0x7
c001feab:	77 3a                	ja     c001fee7 <Vm::x87Handler(regs*)+0x4c1>
c001fead:	83 ec 0c             	sub    esp,0xc
c001feb0:	2d c0 00 00 00       	sub    eax,0xc0
c001feb5:	50                   	push   eax
c001feb6:	e8 2e fa ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001febb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec2:	89 c6                	mov    esi,eax
c001fec4:	89 d7                	mov    edi,edx
c001fec6:	e8 1e fa ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fecb:	57                   	push   edi
c001fecc:	56                   	push   esi
c001fecd:	52                   	push   edx
c001fece:	50                   	push   eax
c001fecf:	e8 8b f9 ff ff       	call   c001f85f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fed4:	83 c4 1c             	add    esp,0x1c
c001fed7:	52                   	push   edx
c001fed8:	50                   	push   eax
c001fed9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fedd:	2d c0 00 00 00       	sub    eax,0xc0
c001fee2:	e9 9e 01 00 00       	jmp    c0020085 <Vm::x87Handler(regs*)+0x65f>
c001fee7:	8d 50 20             	lea    edx,[eax+0x20]
c001feea:	80 fa 07             	cmp    dl,0x7
c001feed:	77 3a                	ja     c001ff29 <Vm::x87Handler(regs*)+0x503>
c001feef:	83 ec 0c             	sub    esp,0xc
c001fef2:	2d e0 00 00 00       	sub    eax,0xe0
c001fef7:	50                   	push   eax
c001fef8:	e8 ec f9 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001fefd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff04:	89 c6                	mov    esi,eax
c001ff06:	89 d7                	mov    edi,edx
c001ff08:	e8 dc f9 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001ff0d:	57                   	push   edi
c001ff0e:	56                   	push   esi
c001ff0f:	52                   	push   edx
c001ff10:	50                   	push   eax
c001ff11:	e8 73 f9 ff ff       	call   c001f889 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff16:	83 c4 1c             	add    esp,0x1c
c001ff19:	52                   	push   edx
c001ff1a:	50                   	push   eax
c001ff1b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff1f:	2d e0 00 00 00       	sub    eax,0xe0
c001ff24:	e9 5c 01 00 00       	jmp    c0020085 <Vm::x87Handler(regs*)+0x65f>
c001ff29:	8d 50 18             	lea    edx,[eax+0x18]
c001ff2c:	80 fa 07             	cmp    dl,0x7
c001ff2f:	77 3b                	ja     c001ff6c <Vm::x87Handler(regs*)+0x546>
c001ff31:	83 ec 0c             	sub    esp,0xc
c001ff34:	6a 00                	push   0x0
c001ff36:	e8 ae f9 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001ff3b:	89 c6                	mov    esi,eax
c001ff3d:	89 d7                	mov    edi,edx
c001ff3f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff43:	2d e8 00 00 00       	sub    eax,0xe8
c001ff48:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff4b:	e8 99 f9 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001ff50:	57                   	push   edi
c001ff51:	56                   	push   esi
c001ff52:	52                   	push   edx
c001ff53:	50                   	push   eax
c001ff54:	e8 30 f9 ff ff       	call   c001f889 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff59:	83 c4 1c             	add    esp,0x1c
c001ff5c:	52                   	push   edx
c001ff5d:	50                   	push   eax
c001ff5e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff62:	2d e8 00 00 00       	sub    eax,0xe8
c001ff67:	e9 19 01 00 00       	jmp    c0020085 <Vm::x87Handler(regs*)+0x65f>
c001ff6c:	8d 50 38             	lea    edx,[eax+0x38]
c001ff6f:	80 fa 07             	cmp    dl,0x7
c001ff72:	77 37                	ja     c001ffab <Vm::x87Handler(regs*)+0x585>
c001ff74:	83 ec 0c             	sub    esp,0xc
c001ff77:	2d c8 00 00 00       	sub    eax,0xc8
c001ff7c:	50                   	push   eax
c001ff7d:	e8 67 f9 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001ff82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff89:	89 c6                	mov    esi,eax
c001ff8b:	89 d7                	mov    edi,edx
c001ff8d:	e8 57 f9 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001ff92:	57                   	push   edi
c001ff93:	56                   	push   esi
c001ff94:	52                   	push   edx
c001ff95:	50                   	push   eax
c001ff96:	e8 fd f8 ff ff       	call   c001f898 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff9b:	83 c4 1c             	add    esp,0x1c
c001ff9e:	52                   	push   edx
c001ff9f:	50                   	push   eax
c001ffa0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa4:	2d c8 00 00 00       	sub    eax,0xc8
c001ffa9:	eb 7d                	jmp    c0020028 <Vm::x87Handler(regs*)+0x602>
c001ffab:	3c f7                	cmp    al,0xf7
c001ffad:	76 38                	jbe    c001ffe7 <Vm::x87Handler(regs*)+0x5c1>
c001ffaf:	83 ec 0c             	sub    esp,0xc
c001ffb2:	6a 00                	push   0x0
c001ffb4:	e8 30 f9 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001ffb9:	89 c6                	mov    esi,eax
c001ffbb:	89 d7                	mov    edi,edx
c001ffbd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc1:	2d f8 00 00 00       	sub    eax,0xf8
c001ffc6:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffc9:	e8 1b f9 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c001ffce:	57                   	push   edi
c001ffcf:	56                   	push   esi
c001ffd0:	52                   	push   edx
c001ffd1:	50                   	push   eax
c001ffd2:	e8 e0 f8 ff ff       	call   c001f8b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffd7:	83 c4 1c             	add    esp,0x1c
c001ffda:	52                   	push   edx
c001ffdb:	50                   	push   eax
c001ffdc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe0:	2d f8 00 00 00       	sub    eax,0xf8
c001ffe5:	eb 41                	jmp    c0020028 <Vm::x87Handler(regs*)+0x602>
c001ffe7:	8d 50 10             	lea    edx,[eax+0x10]
c001ffea:	80 fa 07             	cmp    dl,0x7
c001ffed:	0f 87 5a 01 00 00    	ja     c002014d <Vm::x87Handler(regs*)+0x727>
c001fff3:	83 ec 0c             	sub    esp,0xc
c001fff6:	2d f0 00 00 00       	sub    eax,0xf0
c001fffb:	50                   	push   eax
c001fffc:	e8 e8 f8 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c0020001:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020008:	89 c6                	mov    esi,eax
c002000a:	89 d7                	mov    edi,edx
c002000c:	e8 d8 f8 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c0020011:	57                   	push   edi
c0020012:	56                   	push   esi
c0020013:	52                   	push   edx
c0020014:	50                   	push   eax
c0020015:	e8 9d f8 ff ff       	call   c001f8b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002001a:	83 c4 1c             	add    esp,0x1c
c002001d:	52                   	push   edx
c002001e:	50                   	push   eax
c002001f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020023:	2d f0 00 00 00       	sub    eax,0xf0
c0020028:	50                   	push   eax
c0020029:	e8 fe f8 ff ff       	call   c001f92c <Vm::fpuSetReg(int, unsigned long long)>
c002002e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020032:	e8 9d f9 ff ff       	call   c001f9d4 <Vm::fpuPop()>
c0020037:	e9 5e fa ff ff       	jmp    c001fa9a <Vm::x87Handler(regs*)+0x74>
c002003c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020040:	8d 50 30             	lea    edx,[eax+0x30]
c0020043:	80 fa 07             	cmp    dl,0x7
c0020046:	77 1d                	ja     c0020065 <Vm::x87Handler(regs*)+0x63f>
c0020048:	83 ec 0c             	sub    esp,0xc
c002004b:	6a 00                	push   0x0
c002004d:	e8 97 f8 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c0020052:	83 c4 0c             	add    esp,0xc
c0020055:	52                   	push   edx
c0020056:	50                   	push   eax
c0020057:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002005b:	2d d0 00 00 00       	sub    eax,0xd0
c0020060:	e9 f3 fd ff ff       	jmp    c001fe58 <Vm::x87Handler(regs*)+0x432>
c0020065:	8d 50 28             	lea    edx,[eax+0x28]
c0020068:	80 fa 07             	cmp    dl,0x7
c002006b:	77 28                	ja     c0020095 <Vm::x87Handler(regs*)+0x66f>
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	6a 00                	push   0x0
c0020072:	e8 72 f8 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c0020077:	83 c4 0c             	add    esp,0xc
c002007a:	52                   	push   edx
c002007b:	50                   	push   eax
c002007c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020080:	2d d8 00 00 00       	sub    eax,0xd8
c0020085:	50                   	push   eax
c0020086:	e8 a1 f8 ff ff       	call   c001f92c <Vm::fpuSetReg(int, unsigned long long)>
c002008b:	e8 44 f9 ff ff       	call   c001f9d4 <Vm::fpuPop()>
c0020090:	e9 01 fa ff ff       	jmp    c001fa96 <Vm::x87Handler(regs*)+0x70>
c0020095:	8d 50 20             	lea    edx,[eax+0x20]
c0020098:	80 fa 07             	cmp    dl,0x7
c002009b:	77 30                	ja     c00200cd <Vm::x87Handler(regs*)+0x6a7>
c002009d:	83 ec 0c             	sub    esp,0xc
c00200a0:	2d e0 00 00 00       	sub    eax,0xe0
c00200a5:	50                   	push   eax
c00200a6:	e8 3e f8 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00200ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200b2:	89 c6                	mov    esi,eax
c00200b4:	89 d7                	mov    edi,edx
c00200b6:	e8 2e f8 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00200bb:	57                   	push   edi
c00200bc:	56                   	push   esi
c00200bd:	52                   	push   edx
c00200be:	50                   	push   eax
c00200bf:	e8 48 f7 ff ff       	call   c001f80c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200c4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200c8:	e9 54 02 00 00       	jmp    c0020321 <Vm::x87Handler(regs*)+0x8fb>
c00200cd:	8d 50 18             	lea    edx,[eax+0x18]
c00200d0:	80 fa 07             	cmp    dl,0x7
c00200d3:	0f 87 43 fb ff ff    	ja     c001fc1c <Vm::x87Handler(regs*)+0x1f6>
c00200d9:	83 ec 0c             	sub    esp,0xc
c00200dc:	2d e8 00 00 00       	sub    eax,0xe8
c00200e1:	50                   	push   eax
c00200e2:	e8 02 f8 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00200e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200ee:	89 c6                	mov    esi,eax
c00200f0:	89 d7                	mov    edi,edx
c00200f2:	e8 f2 f7 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00200f7:	57                   	push   edi
c00200f8:	56                   	push   esi
c00200f9:	52                   	push   edx
c00200fa:	50                   	push   eax
c00200fb:	e8 0c f7 ff ff       	call   c001f80c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020100:	83 c4 20             	add    esp,0x20
c0020103:	e8 cc f8 ff ff       	call   c001f9d4 <Vm::fpuPop()>
c0020108:	eb 62                	jmp    c002016c <Vm::x87Handler(regs*)+0x746>
c002010a:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002010e:	0f 85 0f 01 00 00    	jne    c0020223 <Vm::x87Handler(regs*)+0x7fd>
c0020114:	83 ec 0c             	sub    esp,0xc
c0020117:	6a 01                	push   0x1
c0020119:	e8 cb f7 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c002011e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020125:	89 c6                	mov    esi,eax
c0020127:	89 d7                	mov    edi,edx
c0020129:	e8 bb f7 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c002012e:	57                   	push   edi
c002012f:	56                   	push   esi
c0020130:	52                   	push   edx
c0020131:	50                   	push   eax
c0020132:	e8 d5 f6 ff ff       	call   c001f80c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020137:	83 c4 20             	add    esp,0x20
c002013a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002013e:	e8 91 f8 ff ff       	call   c001f9d4 <Vm::fpuPop()>
c0020143:	e8 8c f8 ff ff       	call   c001f9d4 <Vm::fpuPop()>
c0020148:	e9 50 f9 ff ff       	jmp    c001fa9d <Vm::x87Handler(regs*)+0x77>
c002014d:	3c d9                	cmp    al,0xd9
c002014f:	0f 85 b5 02 00 00    	jne    c002040a <Vm::x87Handler(regs*)+0x9e4>
c0020155:	eb bd                	jmp    c0020114 <Vm::x87Handler(regs*)+0x6ee>
c0020157:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002015b:	0f 85 ea 02 00 00    	jne    c002044b <Vm::x87Handler(regs*)+0xa25>
c0020161:	0f b7 05 a0 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031ba0
c0020168:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002016c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020170:	e9 28 f9 ff ff       	jmp    c001fa9d <Vm::x87Handler(regs*)+0x77>
c0020175:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020179:	84 d2                	test   dl,dl
c002017b:	75 0f                	jne    c002018c <Vm::x87Handler(regs*)+0x766>
c002017d:	83 ec 0c             	sub    esp,0xc
c0020180:	ff 36                	push   DWORD PTR [esi]
c0020182:	e8 b1 f4 ff ff       	call   c001f638 <Vm::fpu32ToInternal(unsigned int)>
c0020187:	e9 2c 01 00 00       	jmp    c00202b8 <Vm::x87Handler(regs*)+0x892>
c002018c:	80 fa 01             	cmp    dl,0x1
c002018f:	75 0f                	jne    c00201a0 <Vm::x87Handler(regs*)+0x77a>
c0020191:	83 ec 0c             	sub    esp,0xc
c0020194:	ff 36                	push   DWORD PTR [esi]
c0020196:	e8 9d f4 ff ff       	call   c001f638 <Vm::fpu32ToInternal(unsigned int)>
c002019b:	e9 81 02 00 00       	jmp    c0020421 <Vm::x87Handler(regs*)+0x9fb>
c00201a0:	80 fa 04             	cmp    dl,0x4
c00201a3:	75 0f                	jne    c00201b4 <Vm::x87Handler(regs*)+0x78e>
c00201a5:	83 ec 0c             	sub    esp,0xc
c00201a8:	ff 36                	push   DWORD PTR [esi]
c00201aa:	e8 89 f4 ff ff       	call   c001f638 <Vm::fpu32ToInternal(unsigned int)>
c00201af:	e9 86 01 00 00       	jmp    c002033a <Vm::x87Handler(regs*)+0x914>
c00201b4:	80 fa 05             	cmp    dl,0x5
c00201b7:	75 1b                	jne    c00201d4 <Vm::x87Handler(regs*)+0x7ae>
c00201b9:	83 ec 0c             	sub    esp,0xc
c00201bc:	6a 00                	push   0x0
c00201be:	e8 26 f7 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00201c3:	89 c7                	mov    edi,eax
c00201c5:	89 d5                	mov    ebp,edx
c00201c7:	58                   	pop    eax
c00201c8:	ff 36                	push   DWORD PTR [esi]
c00201ca:	e8 69 f4 ff ff       	call   c001f638 <Vm::fpu32ToInternal(unsigned int)>
c00201cf:	e9 a3 01 00 00       	jmp    c0020377 <Vm::x87Handler(regs*)+0x951>
c00201d4:	80 fa 06             	cmp    dl,0x6
c00201d7:	75 0f                	jne    c00201e8 <Vm::x87Handler(regs*)+0x7c2>
c00201d9:	83 ec 0c             	sub    esp,0xc
c00201dc:	ff 36                	push   DWORD PTR [esi]
c00201de:	e8 55 f4 ff ff       	call   c001f638 <Vm::fpu32ToInternal(unsigned int)>
c00201e3:	e9 ae 01 00 00       	jmp    c0020396 <Vm::x87Handler(regs*)+0x970>
c00201e8:	31 c0                	xor    eax,eax
c00201ea:	80 fa 07             	cmp    dl,0x7
c00201ed:	0f 85 94 02 00 00    	jne    c0020487 <Vm::x87Handler(regs*)+0xa61>
c00201f3:	83 ec 0c             	sub    esp,0xc
c00201f6:	6a 00                	push   0x0
c00201f8:	e8 ec f6 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00201fd:	89 c7                	mov    edi,eax
c00201ff:	89 d5                	mov    ebp,edx
c0020201:	58                   	pop    eax
c0020202:	ff 36                	push   DWORD PTR [esi]
c0020204:	e8 2f f4 ff ff       	call   c001f638 <Vm::fpu32ToInternal(unsigned int)>
c0020209:	e9 cb 01 00 00       	jmp    c00203d9 <Vm::x87Handler(regs*)+0x9b3>
c002020e:	80 fa 03             	cmp    dl,0x3
c0020211:	0f 85 d3 01 00 00    	jne    c00203ea <Vm::x87Handler(regs*)+0x9c4>
c0020217:	e8 b8 f7 ff ff       	call   c001f9d4 <Vm::fpuPop()>
c002021c:	51                   	push   ecx
c002021d:	51                   	push   ecx
c002021e:	e9 de 01 00 00       	jmp    c0020401 <Vm::x87Handler(regs*)+0x9db>
c0020223:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020227:	80 fa 01             	cmp    dl,0x1
c002022a:	75 09                	jne    c0020235 <Vm::x87Handler(regs*)+0x80f>
c002022c:	57                   	push   edi
c002022d:	57                   	push   edi
c002022e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020230:	e9 e3 01 00 00       	jmp    c0020418 <Vm::x87Handler(regs*)+0x9f2>
c0020235:	80 fa 04             	cmp    dl,0x4
c0020238:	75 12                	jne    c002024c <Vm::x87Handler(regs*)+0x826>
c002023a:	31 d2                	xor    edx,edx
c002023c:	51                   	push   ecx
c002023d:	51                   	push   ecx
c002023e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020240:	52                   	push   edx
c0020241:	50                   	push   eax
c0020242:	e8 d0 f4 ff ff       	call   c001f717 <Vm::fpuLongToFloat(long long)>
c0020247:	e9 ee 00 00 00       	jmp    c002033a <Vm::x87Handler(regs*)+0x914>
c002024c:	31 c0                	xor    eax,eax
c002024e:	80 fa 07             	cmp    dl,0x7
c0020251:	0f 85 30 02 00 00    	jne    c0020487 <Vm::x87Handler(regs*)+0xa61>
c0020257:	83 ec 0c             	sub    esp,0xc
c002025a:	6a 00                	push   0x0
c002025c:	e8 88 f6 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c0020261:	89 c7                	mov    edi,eax
c0020263:	89 d5                	mov    ebp,edx
c0020265:	58                   	pop    eax
c0020266:	8b 06                	mov    eax,DWORD PTR [esi]
c0020268:	5a                   	pop    edx
c0020269:	31 d2                	xor    edx,edx
c002026b:	52                   	push   edx
c002026c:	50                   	push   eax
c002026d:	e8 a5 f4 ff ff       	call   c001f717 <Vm::fpuLongToFloat(long long)>
c0020272:	e9 62 01 00 00       	jmp    c00203d9 <Vm::x87Handler(regs*)+0x9b3>
c0020277:	84 d2                	test   dl,dl
c0020279:	75 0d                	jne    c0020288 <Vm::x87Handler(regs*)+0x862>
c002027b:	31 d2                	xor    edx,edx
c002027d:	55                   	push   ebp
c002027e:	55                   	push   ebp
c002027f:	8b 06                	mov    eax,DWORD PTR [esi]
c0020281:	52                   	push   edx
c0020282:	50                   	push   eax
c0020283:	e9 d3 01 00 00       	jmp    c002045b <Vm::x87Handler(regs*)+0xa35>
c0020288:	31 c0                	xor    eax,eax
c002028a:	80 fa 02             	cmp    dl,0x2
c002028d:	0f 85 f4 01 00 00    	jne    c0020487 <Vm::x87Handler(regs*)+0xa61>
c0020293:	83 ec 0c             	sub    esp,0xc
c0020296:	6a 00                	push   0x0
c0020298:	e8 4c f6 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c002029d:	59                   	pop    ecx
c002029e:	5f                   	pop    edi
c002029f:	e9 6a f9 ff ff       	jmp    c001fc0e <Vm::x87Handler(regs*)+0x1e8>
c00202a4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202a8:	84 d2                	test   dl,dl
c00202aa:	75 2a                	jne    c00202d6 <Vm::x87Handler(regs*)+0x8b0>
c00202ac:	50                   	push   eax
c00202ad:	50                   	push   eax
c00202ae:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202b1:	ff 36                	push   DWORD PTR [esi]
c00202b3:	e8 c5 f3 ff ff       	call   c001f67d <Vm::fpu64ToInternal(unsigned long long)>
c00202b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202bf:	89 c6                	mov    esi,eax
c00202c1:	89 d7                	mov    edi,edx
c00202c3:	e8 21 f6 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00202c8:	57                   	push   edi
c00202c9:	56                   	push   esi
c00202ca:	52                   	push   edx
c00202cb:	50                   	push   eax
c00202cc:	e8 8e f5 ff ff       	call   c001f85f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00202d1:	e9 64 01 00 00       	jmp    c002043a <Vm::x87Handler(regs*)+0xa14>
c00202d6:	80 fa 01             	cmp    dl,0x1
c00202d9:	75 11                	jne    c00202ec <Vm::x87Handler(regs*)+0x8c6>
c00202db:	50                   	push   eax
c00202dc:	50                   	push   eax
c00202dd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202e0:	ff 36                	push   DWORD PTR [esi]
c00202e2:	e8 96 f3 ff ff       	call   c001f67d <Vm::fpu64ToInternal(unsigned long long)>
c00202e7:	e9 35 01 00 00       	jmp    c0020421 <Vm::x87Handler(regs*)+0x9fb>
c00202ec:	80 fa 02             	cmp    dl,0x2
c00202ef:	0f 85 54 f9 ff ff    	jne    c001fc49 <Vm::x87Handler(regs*)+0x223>
c00202f5:	55                   	push   ebp
c00202f6:	55                   	push   ebp
c00202f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202fa:	ff 36                	push   DWORD PTR [esi]
c00202fc:	e8 7c f3 ff ff       	call   c001f67d <Vm::fpu64ToInternal(unsigned long long)>
c0020301:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020308:	89 c6                	mov    esi,eax
c002030a:	89 d7                	mov    edi,edx
c002030c:	e8 d8 f5 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c0020311:	57                   	push   edi
c0020312:	56                   	push   esi
c0020313:	52                   	push   edx
c0020314:	50                   	push   eax
c0020315:	e8 f2 f4 ff ff       	call   c001f80c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002031a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002031e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020321:	83 c4 20             	add    esp,0x20
c0020324:	e9 74 f7 ff ff       	jmp    c001fa9d <Vm::x87Handler(regs*)+0x77>
c0020329:	80 fa 04             	cmp    dl,0x4
c002032c:	75 2a                	jne    c0020358 <Vm::x87Handler(regs*)+0x932>
c002032e:	51                   	push   ecx
c002032f:	51                   	push   ecx
c0020330:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020333:	ff 36                	push   DWORD PTR [esi]
c0020335:	e8 43 f3 ff ff       	call   c001f67d <Vm::fpu64ToInternal(unsigned long long)>
c002033a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020341:	89 c6                	mov    esi,eax
c0020343:	89 d7                	mov    edi,edx
c0020345:	e8 9f f5 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c002034a:	57                   	push   edi
c002034b:	56                   	push   esi
c002034c:	52                   	push   edx
c002034d:	50                   	push   eax
c002034e:	e8 36 f5 ff ff       	call   c001f889 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020353:	e9 e2 00 00 00       	jmp    c002043a <Vm::x87Handler(regs*)+0xa14>
c0020358:	80 fa 05             	cmp    dl,0x5
c002035b:	75 28                	jne    c0020385 <Vm::x87Handler(regs*)+0x95f>
c002035d:	83 ec 0c             	sub    esp,0xc
c0020360:	6a 00                	push   0x0
c0020362:	e8 82 f5 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c0020367:	89 c7                	mov    edi,eax
c0020369:	89 d5                	mov    ebp,edx
c002036b:	58                   	pop    eax
c002036c:	5a                   	pop    edx
c002036d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020370:	ff 36                	push   DWORD PTR [esi]
c0020372:	e8 06 f3 ff ff       	call   c001f67d <Vm::fpu64ToInternal(unsigned long long)>
c0020377:	83 c4 10             	add    esp,0x10
c002037a:	55                   	push   ebp
c002037b:	57                   	push   edi
c002037c:	52                   	push   edx
c002037d:	50                   	push   eax
c002037e:	e8 06 f5 ff ff       	call   c001f889 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020383:	eb 60                	jmp    c00203e5 <Vm::x87Handler(regs*)+0x9bf>
c0020385:	80 fa 06             	cmp    dl,0x6
c0020388:	75 2a                	jne    c00203b4 <Vm::x87Handler(regs*)+0x98e>
c002038a:	51                   	push   ecx
c002038b:	51                   	push   ecx
c002038c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002038f:	ff 36                	push   DWORD PTR [esi]
c0020391:	e8 e7 f2 ff ff       	call   c001f67d <Vm::fpu64ToInternal(unsigned long long)>
c0020396:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002039d:	89 c6                	mov    esi,eax
c002039f:	89 d7                	mov    edi,edx
c00203a1:	e8 43 f5 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00203a6:	57                   	push   edi
c00203a7:	56                   	push   esi
c00203a8:	52                   	push   edx
c00203a9:	50                   	push   eax
c00203aa:	e8 08 f5 ff ff       	call   c001f8b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203af:	e9 86 00 00 00       	jmp    c002043a <Vm::x87Handler(regs*)+0xa14>
c00203b4:	31 c0                	xor    eax,eax
c00203b6:	80 fa 07             	cmp    dl,0x7
c00203b9:	0f 85 c8 00 00 00    	jne    c0020487 <Vm::x87Handler(regs*)+0xa61>
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	6a 00                	push   0x0
c00203c4:	e8 20 f5 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00203c9:	89 c7                	mov    edi,eax
c00203cb:	89 d5                	mov    ebp,edx
c00203cd:	58                   	pop    eax
c00203ce:	5a                   	pop    edx
c00203cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203d2:	ff 36                	push   DWORD PTR [esi]
c00203d4:	e8 a4 f2 ff ff       	call   c001f67d <Vm::fpu64ToInternal(unsigned long long)>
c00203d9:	83 c4 10             	add    esp,0x10
c00203dc:	55                   	push   ebp
c00203dd:	57                   	push   edi
c00203de:	52                   	push   edx
c00203df:	50                   	push   eax
c00203e0:	e8 d2 f4 ff ff       	call   c001f8b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203e5:	83 c4 0c             	add    esp,0xc
c00203e8:	eb 53                	jmp    c002043d <Vm::x87Handler(regs*)+0xa17>
c00203ea:	31 c0                	xor    eax,eax
c00203ec:	80 fa 02             	cmp    dl,0x2
c00203ef:	0f 85 92 00 00 00    	jne    c0020487 <Vm::x87Handler(regs*)+0xa61>
c00203f5:	83 ec 0c             	sub    esp,0xc
c00203f8:	6a 00                	push   0x0
c00203fa:	e8 ea f4 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c00203ff:	59                   	pop    ecx
c0020400:	5f                   	pop    edi
c0020401:	52                   	push   edx
c0020402:	50                   	push   eax
c0020403:	e8 27 f2 ff ff       	call   c001f62f <Vm::fpuInternalTo64(unsigned long long)>
c0020408:	eb 70                	jmp    c002047a <Vm::x87Handler(regs*)+0xa54>
c002040a:	31 c0                	xor    eax,eax
c002040c:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020411:	75 74                	jne    c0020487 <Vm::x87Handler(regs*)+0xa61>
c0020413:	50                   	push   eax
c0020414:	50                   	push   eax
c0020415:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020418:	31 d2                	xor    edx,edx
c002041a:	52                   	push   edx
c002041b:	50                   	push   eax
c002041c:	e8 f6 f2 ff ff       	call   c001f717 <Vm::fpuLongToFloat(long long)>
c0020421:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020428:	89 c6                	mov    esi,eax
c002042a:	89 d7                	mov    edi,edx
c002042c:	e8 b8 f4 ff ff       	call   c001f8e9 <Vm::fpuGetReg(int)>
c0020431:	57                   	push   edi
c0020432:	56                   	push   esi
c0020433:	52                   	push   edx
c0020434:	50                   	push   eax
c0020435:	e8 5e f4 ff ff       	call   c001f898 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002043a:	83 c4 1c             	add    esp,0x1c
c002043d:	52                   	push   edx
c002043e:	50                   	push   eax
c002043f:	6a 00                	push   0x0
c0020441:	e8 e6 f4 ff ff       	call   c001f92c <Vm::fpuSetReg(int, unsigned long long)>
c0020446:	e9 f2 f7 ff ff       	jmp    c001fc3d <Vm::x87Handler(regs*)+0x217>
c002044b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002044f:	80 fa 05             	cmp    dl,0x5
c0020452:	75 11                	jne    c0020465 <Vm::x87Handler(regs*)+0xa3f>
c0020454:	55                   	push   ebp
c0020455:	55                   	push   ebp
c0020456:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020459:	ff 36                	push   DWORD PTR [esi]
c002045b:	e8 81 f2 ff ff       	call   c001f6e1 <Vm::fpuULongToFloat(unsigned long long)>
c0020460:	e9 cf f7 ff ff       	jmp    c001fc34 <Vm::x87Handler(regs*)+0x20e>
c0020465:	31 c0                	xor    eax,eax
c0020467:	80 fa 07             	cmp    dl,0x7
c002046a:	75 1b                	jne    c0020487 <Vm::x87Handler(regs*)+0xa61>
c002046c:	e8 63 f5 ff ff       	call   c001f9d4 <Vm::fpuPop()>
c0020471:	51                   	push   ecx
c0020472:	51                   	push   ecx
c0020473:	52                   	push   edx
c0020474:	50                   	push   eax
c0020475:	e8 0c f2 ff ff       	call   c001f686 <Vm::fpuFloatToLong(unsigned long long)>
c002047a:	83 c4 10             	add    esp,0x10
c002047d:	89 06                	mov    DWORD PTR [esi],eax
c002047f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020482:	e9 f8 f7 ff ff       	jmp    c001fc7f <Vm::x87Handler(regs*)+0x259>
c0020487:	83 c4 1c             	add    esp,0x1c
c002048a:	5b                   	pop    ebx
c002048b:	5e                   	pop    esi
c002048c:	5f                   	pop    edi
c002048d:	5d                   	pop    ebp
c002048e:	c3                   	ret    

c002048f <__static_initialization_and_destruction_0(int, int)>:
c002048f:	83 ec 0c             	sub    esp,0xc
c0020492:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020497:	75 1a                	jne    c00204b3 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020499:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00204a1:	75 10                	jne    c00204b3 <__static_initialization_and_destruction_0(int, int)+0x24>
c00204a3:	83 ec 0c             	sub    esp,0xc
c00204a6:	68 a0 1b 03 c0       	push   0xc0031ba0
c00204ab:	e8 10 88 00 00       	call   c0028cc0 <Vm::_FPUState::_FPUState()>
c00204b0:	83 c4 10             	add    esp,0x10
c00204b3:	90                   	nop
c00204b4:	83 c4 0c             	add    esp,0xc
c00204b7:	c3                   	ret    

c00204b8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00204b8:	83 ec 0c             	sub    esp,0xc
c00204bb:	83 ec 08             	sub    esp,0x8
c00204be:	68 ff ff 00 00       	push   0xffff
c00204c3:	6a 01                	push   0x1
c00204c5:	e8 c5 ff ff ff       	call   c002048f <__static_initialization_and_destruction_0(int, int)>
c00204ca:	83 c4 10             	add    esp,0x10
c00204cd:	83 c4 0c             	add    esp,0xc
c00204d0:	c3                   	ret    
c00204d1:	90                   	nop

c00204d2 <FAT::getName()>:
c00204d2:	b8 64 c7 02 c0       	mov    eax,0xc002c764
c00204d7:	c3                   	ret    

c00204d8 <FAT::tell(void*, unsigned long long*)>:
c00204d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00204dd:	75 06                	jne    c00204e5 <FAT::tell(void*, unsigned long long*)+0xd>
c00204df:	b8 04 00 00 00       	mov    eax,0x4
c00204e4:	c3                   	ret    
c00204e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204ea:	75 06                	jne    c00204f2 <FAT::tell(void*, unsigned long long*)+0x1a>
c00204ec:	b8 04 00 00 00       	mov    eax,0x4
c00204f1:	c3                   	ret    
c00204f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204f6:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00204f9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00204fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020500:	89 01                	mov    DWORD PTR [ecx],eax
c0020502:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020505:	b8 00 00 00 00       	mov    eax,0x0
c002050a:	c3                   	ret    
c002050b:	90                   	nop

c002050c <FAT::stat(void*, unsigned long long*)>:
c002050c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020511:	75 06                	jne    c0020519 <FAT::stat(void*, unsigned long long*)+0xd>
c0020513:	b8 04 00 00 00       	mov    eax,0x4
c0020518:	c3                   	ret    
c0020519:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002051e:	75 06                	jne    c0020526 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020520:	b8 04 00 00 00       	mov    eax,0x4
c0020525:	c3                   	ret    
c0020526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002052a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002052d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020530:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020534:	89 01                	mov    DWORD PTR [ecx],eax
c0020536:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020539:	b8 00 00 00 00       	mov    eax,0x0
c002053e:	c3                   	ret    
c002053f:	90                   	nop

c0020540 <FAT::~FAT()>:
c0020540:	83 ec 0c             	sub    esp,0xc
c0020543:	ba e8 c7 02 c0       	mov    edx,0xc002c7e8
c0020548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002054c:	89 10                	mov    DWORD PTR [eax],edx
c002054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020552:	83 ec 0c             	sub    esp,0xc
c0020555:	50                   	push   eax
c0020556:	e8 93 2c ff ff       	call   c00131ee <Filesystem::~Filesystem()>
c002055b:	83 c4 10             	add    esp,0x10
c002055e:	90                   	nop
c002055f:	83 c4 0c             	add    esp,0xc
c0020562:	c3                   	ret    
c0020563:	90                   	nop

c0020564 <FAT::~FAT()>:
c0020564:	83 ec 0c             	sub    esp,0xc
c0020567:	83 ec 0c             	sub    esp,0xc
c002056a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002056e:	e8 cd ff ff ff       	call   c0020540 <FAT::~FAT()>
c0020573:	83 c4 10             	add    esp,0x10
c0020576:	83 ec 08             	sub    esp,0x8
c0020579:	6a 08                	push   0x8
c002057b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002057f:	e8 62 28 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0020584:	83 c4 10             	add    esp,0x10
c0020587:	83 c4 0c             	add    esp,0xc
c002058a:	c3                   	ret    
c002058b:	90                   	nop

c002058c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002058c:	83 ec 1c             	sub    esp,0x1c
c002058f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020596:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002059b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002059f:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c00205a6:	83 f8 ff             	cmp    eax,0xffffffff
c00205a9:	75 34                	jne    c00205df <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00205ab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205af:	88 c2                	mov    dl,al
c00205b1:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00205b6:	01 d0                	add    eax,edx
c00205b8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205bc:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c00205c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205c6:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c00205cd:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00205d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00205d6:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00205dd:	eb 17                	jmp    c00205f6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00205df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205e3:	88 c2                	mov    dl,al
c00205e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205e9:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c00205f0:	01 d0                	add    eax,edx
c00205f2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205f6:	83 ec 04             	sub    esp,0x4
c00205f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00205fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020601:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020605:	50                   	push   eax
c0020606:	e8 2d 67 fe ff       	call   c0006d38 <f_getlabel>
c002060b:	83 c4 10             	add    esp,0x10
c002060e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020612:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020617:	75 07                	jne    c0020620 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020619:	b8 00 00 00 00       	mov    eax,0x0
c002061e:	eb 05                	jmp    c0020625 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020620:	b8 01 00 00 00       	mov    eax,0x1
c0020625:	83 c4 1c             	add    esp,0x1c
c0020628:	c3                   	ret    
c0020629:	90                   	nop

c002062a <FAT::setlabel(LogicalDisk*, int, char*)>:
c002062a:	57                   	push   edi
c002062b:	83 ec 58             	sub    esp,0x58
c002062e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020636:	8d 54 24 10          	lea    edx,[esp+0x10]
c002063a:	b9 0f 00 00 00       	mov    ecx,0xf
c002063f:	b8 00 00 00 00       	mov    eax,0x0
c0020644:	fc                   	cld    
c0020645:	89 d7                	mov    edi,edx
c0020647:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020649:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002064d:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020654:	83 f8 ff             	cmp    eax,0xffffffff
c0020657:	75 34                	jne    c002068d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020659:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002065d:	88 c2                	mov    dl,al
c002065f:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020664:	01 d0                	add    eax,edx
c0020666:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002066a:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c0020670:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020674:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c002067b:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020680:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020684:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c002068b:	eb 17                	jmp    c00206a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002068d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020691:	88 c2                	mov    dl,al
c0020693:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020697:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c002069e:	01 d0                	add    eax,edx
c00206a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206a4:	83 ec 08             	sub    esp,0x8
c00206a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00206ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206af:	50                   	push   eax
c00206b0:	e8 bf 02 fe ff       	call   c0000974 <strcat>
c00206b5:	83 c4 10             	add    esp,0x10
c00206b8:	83 ec 0c             	sub    esp,0xc
c00206bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00206bf:	50                   	push   eax
c00206c0:	e8 61 68 fe ff       	call   c0006f26 <f_setlabel>
c00206c5:	83 c4 10             	add    esp,0x10
c00206c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00206cc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00206d1:	75 07                	jne    c00206da <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00206d3:	b8 00 00 00 00       	mov    eax,0x0
c00206d8:	eb 05                	jmp    c00206df <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00206da:	b8 01 00 00 00       	mov    eax,0x1
c00206df:	83 c4 58             	add    esp,0x58
c00206e2:	5f                   	pop    edi
c00206e3:	c3                   	ret    

c00206e4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00206e4:	83 ec 2c             	sub    esp,0x2c
c00206e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00206ef:	83 ec 08             	sub    esp,0x8
c00206f2:	68 88 c7 02 c0       	push   0xc002c788
c00206f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206fb:	e8 c0 01 fe ff       	call   c00008c0 <strcmp>
c0020700:	83 c4 10             	add    esp,0x10
c0020703:	85 c0                	test   eax,eax
c0020705:	0f 94 c0             	sete   al
c0020708:	84 c0                	test   al,al
c002070a:	74 0d                	je     c0020719 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002070c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020714:	e9 a6 00 00 00       	jmp    c00207bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020719:	83 ec 08             	sub    esp,0x8
c002071c:	68 7a c7 02 c0       	push   0xc002c77a
c0020721:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020725:	e8 96 01 fe ff       	call   c00008c0 <strcmp>
c002072a:	83 c4 10             	add    esp,0x10
c002072d:	85 c0                	test   eax,eax
c002072f:	0f 94 c0             	sete   al
c0020732:	84 c0                	test   al,al
c0020734:	74 0a                	je     c0020740 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020736:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002073e:	eb 7f                	jmp    c00207bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020740:	83 ec 08             	sub    esp,0x8
c0020743:	68 80 c7 02 c0       	push   0xc002c780
c0020748:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002074c:	e8 6f 01 fe ff       	call   c00008c0 <strcmp>
c0020751:	83 c4 10             	add    esp,0x10
c0020754:	85 c0                	test   eax,eax
c0020756:	0f 94 c0             	sete   al
c0020759:	84 c0                	test   al,al
c002075b:	74 0a                	je     c0020767 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002075d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020765:	eb 58                	jmp    c00207bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020767:	83 ec 08             	sub    esp,0x8
c002076a:	68 2c 94 02 c0       	push   0xc002942c
c002076f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020773:	e8 48 01 fe ff       	call   c00008c0 <strcmp>
c0020778:	83 c4 10             	add    esp,0x10
c002077b:	85 c0                	test   eax,eax
c002077d:	0f 94 c0             	sete   al
c0020780:	84 c0                	test   al,al
c0020782:	74 0a                	je     c002078e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020784:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002078c:	eb 31                	jmp    c00207bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002078e:	83 ec 08             	sub    esp,0x8
c0020791:	68 86 c7 02 c0       	push   0xc002c786
c0020796:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002079a:	e8 21 01 fe ff       	call   c00008c0 <strcmp>
c002079f:	83 c4 10             	add    esp,0x10
c00207a2:	85 c0                	test   eax,eax
c00207a4:	0f 94 c0             	sete   al
c00207a7:	84 c0                	test   al,al
c00207a9:	74 0a                	je     c00207b5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00207ab:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00207b3:	eb 0a                	jmp    c00207bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207b5:	b8 08 00 00 00       	mov    eax,0x8
c00207ba:	e9 04 01 00 00       	jmp    c00208c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207bf:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00207c6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00207cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207cf:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c00207d6:	83 f8 ff             	cmp    eax,0xffffffff
c00207d9:	75 34                	jne    c002080f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00207db:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00207df:	88 c2                	mov    dl,al
c00207e1:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00207e6:	01 d0                	add    eax,edx
c00207e8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00207ec:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c00207f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207f6:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c00207fd:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020802:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020806:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c002080d:	eb 17                	jmp    c0020826 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002080f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020813:	88 c2                	mov    dl,al
c0020815:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020819:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020820:	01 d0                	add    eax,edx
c0020822:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020826:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002082a:	88 04 24             	mov    BYTE PTR [esp],al
c002082d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020831:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020835:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002083d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020842:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002084a:	83 ec 0c             	sub    esp,0xc
c002084d:	68 00 20 00 00       	push   0x2000
c0020852:	e8 ec ef fe ff       	call   c000f843 <malloc>
c0020857:	83 c4 10             	add    esp,0x10
c002085a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002085e:	68 00 20 00 00       	push   0x2000
c0020863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020867:	8d 44 24 08          	lea    eax,[esp+0x8]
c002086b:	50                   	push   eax
c002086c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020870:	50                   	push   eax
c0020871:	e8 fb 6a fe ff       	call   c0007371 <f_mkfs>
c0020876:	83 c4 10             	add    esp,0x10
c0020879:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002087d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020882:	75 07                	jne    c002088b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020884:	b8 00 00 00 00       	mov    eax,0x0
c0020889:	eb 38                	jmp    c00208c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002088b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020890:	75 17                	jne    c00208a9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020892:	83 ec 0c             	sub    esp,0xc
c0020895:	68 b8 c7 02 c0       	push   0xc002c7b8
c002089a:	e8 27 26 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c002089f:	83 c4 10             	add    esp,0x10
c00208a2:	b8 09 00 00 00       	mov    eax,0x9
c00208a7:	eb 1a                	jmp    c00208c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208ad:	83 ec 08             	sub    esp,0x8
c00208b0:	50                   	push   eax
c00208b1:	68 8c c7 02 c0       	push   0xc002c78c
c00208b6:	e8 0b 26 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00208bb:	83 c4 10             	add    esp,0x10
c00208be:	b8 01 00 00 00       	mov    eax,0x1
c00208c3:	83 c4 2c             	add    esp,0x2c
c00208c6:	c3                   	ret    
c00208c7:	90                   	nop

c00208c8 <FAT::tryMount(LogicalDisk*, int)>:
c00208c8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00208ce:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c00208d3:	83 f8 14             	cmp    eax,0x14
c00208d6:	75 17                	jne    c00208ef <FAT::tryMount(LogicalDisk*, int)+0x27>
c00208d8:	83 ec 0c             	sub    esp,0xc
c00208db:	68 9e c7 02 c0       	push   0xc002c79e
c00208e0:	e8 86 9c ff ff       	call   c001a56b <Krnl::panic(char const*)>
c00208e5:	83 c4 10             	add    esp,0x10
c00208e8:	b0 00                	mov    al,0x0
c00208ea:	e9 d7 01 00 00       	jmp    c0020ac6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208ef:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00208f6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208fc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020902:	3d 00 02 00 00       	cmp    eax,0x200
c0020907:	74 07                	je     c0020910 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020909:	b0 00                	mov    al,0x0
c002090b:	e9 b6 01 00 00       	jmp    c0020ac6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020910:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020918:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002091f:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020926:	83 f8 ff             	cmp    eax,0xffffffff
c0020929:	74 07                	je     c0020932 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002092b:	b0 01                	mov    al,0x1
c002092d:	e9 94 01 00 00       	jmp    c0020ac6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020932:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002093c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020944:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002094b:	88 c2                	mov    dl,al
c002094d:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020952:	01 d0                	add    eax,edx
c0020954:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002095b:	8b 15 00 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c00
c0020961:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020968:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c002096f:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020974:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002097b:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020982:	83 ec 0c             	sub    esp,0xc
c0020985:	68 54 02 00 00       	push   0x254
c002098a:	e8 b4 ee fe ff       	call   c000f843 <malloc>
c002098f:	83 c4 10             	add    esp,0x10
c0020992:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020999:	83 ec 04             	sub    esp,0x4
c002099c:	6a 00                	push   0x0
c002099e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209a5:	50                   	push   eax
c00209a6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209ad:	e8 7d 45 fe ff       	call   c0004f2f <f_mount>
c00209b2:	83 c4 10             	add    esp,0x10
c00209b5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00209bc:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00209c4:	74 19                	je     c00209df <FAT::tryMount(LogicalDisk*, int)+0x117>
c00209c6:	83 ec 0c             	sub    esp,0xc
c00209c9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209d0:	e8 8e ee fe ff       	call   c000f863 <rfree>
c00209d5:	83 c4 10             	add    esp,0x10
c00209d8:	b0 00                	mov    al,0x0
c00209da:	e9 e7 00 00 00       	jmp    c0020ac6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209df:	83 ec 04             	sub    esp,0x4
c00209e2:	68 00 01 00 00       	push   0x100
c00209e7:	6a 00                	push   0x0
c00209e9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209f0:	50                   	push   eax
c00209f1:	e8 82 fd fd ff       	call   c0000778 <memset>
c00209f6:	83 c4 10             	add    esp,0x10
c00209f9:	83 ec 08             	sub    esp,0x8
c00209fc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a03:	50                   	push   eax
c0020a04:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a0b:	50                   	push   eax
c0020a0c:	e8 63 ff fd ff       	call   c0000974 <strcat>
c0020a11:	83 c4 10             	add    esp,0x10
c0020a14:	83 ec 08             	sub    esp,0x8
c0020a17:	68 ac c7 02 c0       	push   0xc002c7ac
c0020a1c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a23:	50                   	push   eax
c0020a24:	e8 4b ff fd ff       	call   c0000974 <strcat>
c0020a29:	83 c4 10             	add    esp,0x10
c0020a2c:	83 ec 04             	sub    esp,0x4
c0020a2f:	6a 01                	push   0x1
c0020a31:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a38:	50                   	push   eax
c0020a39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a3d:	50                   	push   eax
c0020a3e:	e8 4e 45 fe ff       	call   c0004f91 <f_open>
c0020a43:	83 c4 10             	add    esp,0x10
c0020a46:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a4d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a54:	85 c0                	test   eax,eax
c0020a56:	74 0a                	je     c0020a62 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a58:	78 2d                	js     c0020a87 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a5a:	83 e8 04             	sub    eax,0x4
c0020a5d:	83 f8 01             	cmp    eax,0x1
c0020a60:	77 25                	ja     c0020a87 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a62:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020a6a:	83 ec 0c             	sub    esp,0xc
c0020a6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a71:	50                   	push   eax
c0020a72:	e8 6c 50 fe ff       	call   c0005ae3 <f_close>
c0020a77:	83 c4 10             	add    esp,0x10
c0020a7a:	90                   	nop
c0020a7b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020a83:	74 3a                	je     c0020abf <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020a85:	eb 2d                	jmp    c0020ab4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020a87:	83 ec 0c             	sub    esp,0xc
c0020a8a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a91:	e8 cd ed fe ff       	call   c000f863 <rfree>
c0020a96:	83 c4 10             	add    esp,0x10
c0020a99:	83 ec 04             	sub    esp,0x4
c0020a9c:	6a 00                	push   0x0
c0020a9e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aa5:	50                   	push   eax
c0020aa6:	6a 00                	push   0x0
c0020aa8:	e8 82 44 fe ff       	call   c0004f2f <f_mount>
c0020aad:	83 c4 10             	add    esp,0x10
c0020ab0:	b0 00                	mov    al,0x0
c0020ab2:	eb 12                	jmp    c0020ac6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ab4:	a1 00 1c 03 c0       	mov    eax,ds:0xc0031c00
c0020ab9:	40                   	inc    eax
c0020aba:	a3 00 1c 03 c0       	mov    ds:0xc0031c00,eax
c0020abf:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020ac6:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020acc:	c3                   	ret    
c0020acd:	90                   	nop

c0020ace <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020ace:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020ad4:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020adc:	74 0a                	je     c0020ae8 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020ade:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020ae6:	75 0a                	jne    c0020af2 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020ae8:	b8 04 00 00 00       	mov    eax,0x4
c0020aed:	e9 db 00 00 00       	jmp    c0020bcd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020af2:	83 ec 08             	sub    esp,0x8
c0020af5:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020afc:	50                   	push   eax
c0020afd:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b04:	e8 e4 55 fe ff       	call   c00060ed <f_readdir>
c0020b09:	83 c4 10             	add    esp,0x10
c0020b0c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b13:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b19:	83 ec 0c             	sub    esp,0xc
c0020b1c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020b23:	83 c0 1a             	add    eax,0x1a
c0020b26:	50                   	push   eax
c0020b27:	e8 68 fc fd ff       	call   c0000794 <strlen>
c0020b2c:	83 c4 10             	add    esp,0x10
c0020b2f:	ba 00 00 00 00       	mov    edx,0x0
c0020b34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b38:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b3c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b43:	0f b6 c0             	movzx  eax,al
c0020b46:	83 e0 10             	and    eax,0x10
c0020b49:	74 07                	je     c0020b52 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b4b:	b8 02 00 00 00       	mov    eax,0x2
c0020b50:	eb 05                	jmp    c0020b57 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b52:	b8 01 00 00 00       	mov    eax,0x1
c0020b57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b5b:	83 ec 08             	sub    esp,0x8
c0020b5e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b65:	83 c0 1a             	add    eax,0x1a
c0020b68:	50                   	push   eax
c0020b69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b6d:	83 c0 10             	add    eax,0x10
c0020b70:	50                   	push   eax
c0020b71:	e8 be fc fd ff       	call   c0000834 <strcpy>
c0020b76:	83 c4 10             	add    esp,0x10
c0020b79:	83 ec 04             	sub    esp,0x4
c0020b7c:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020b83:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b87:	50                   	push   eax
c0020b88:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020b8f:	e8 b0 fb fd ff       	call   c0000744 <memcpy>
c0020b94:	83 c4 10             	add    esp,0x10
c0020b97:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020b9e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ba4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020bab:	84 c0                	test   al,al
c0020bad:	75 07                	jne    c0020bb6 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020baf:	b8 07 00 00 00       	mov    eax,0x7
c0020bb4:	eb 17                	jmp    c0020bcd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bb6:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020bbd:	85 c0                	test   eax,eax
c0020bbf:	75 07                	jne    c0020bc8 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020bc1:	b8 00 00 00 00       	mov    eax,0x0
c0020bc6:	eb 05                	jmp    c0020bcd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bc8:	b8 01 00 00 00       	mov    eax,0x1
c0020bcd:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020bd3:	c3                   	ret    

c0020bd4 <FAT::read(void*, unsigned long, void*, int*)>:
c0020bd4:	83 ec 1c             	sub    esp,0x1c
c0020bd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bdc:	74 07                	je     c0020be5 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020bde:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020be3:	75 07                	jne    c0020bec <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020be5:	b8 04 00 00 00       	mov    eax,0x4
c0020bea:	eb 3d                	jmp    c0020c29 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020bec:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bf0:	50                   	push   eax
c0020bf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020bf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020bf9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bfd:	e8 cb 47 fe ff       	call   c00053cd <f_read>
c0020c02:	83 c4 10             	add    esp,0x10
c0020c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c0d:	89 c2                	mov    edx,eax
c0020c0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c13:	89 10                	mov    DWORD PTR [eax],edx
c0020c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c19:	85 c0                	test   eax,eax
c0020c1b:	75 07                	jne    c0020c24 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020c1d:	b8 00 00 00 00       	mov    eax,0x0
c0020c22:	eb 05                	jmp    c0020c29 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c24:	b8 01 00 00 00       	mov    eax,0x1
c0020c29:	83 c4 1c             	add    esp,0x1c
c0020c2c:	c3                   	ret    
c0020c2d:	90                   	nop

c0020c2e <FAT::write(void*, unsigned long, void*, int*)>:
c0020c2e:	83 ec 1c             	sub    esp,0x1c
c0020c31:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c36:	74 07                	je     c0020c3f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c38:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c3d:	75 07                	jne    c0020c46 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c3f:	b8 04 00 00 00       	mov    eax,0x4
c0020c44:	eb 3d                	jmp    c0020c83 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c46:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c4a:	50                   	push   eax
c0020c4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c53:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c57:	e8 f1 49 fe ff       	call   c000564d <f_write>
c0020c5c:	83 c4 10             	add    esp,0x10
c0020c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c67:	89 c2                	mov    edx,eax
c0020c69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c6d:	89 10                	mov    DWORD PTR [eax],edx
c0020c6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c73:	85 c0                	test   eax,eax
c0020c75:	75 07                	jne    c0020c7e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c77:	b8 00 00 00 00       	mov    eax,0x0
c0020c7c:	eb 05                	jmp    c0020c83 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c7e:	b8 01 00 00 00       	mov    eax,0x1
c0020c83:	83 c4 1c             	add    esp,0x1c
c0020c86:	c3                   	ret    
c0020c87:	90                   	nop

c0020c88 <FAT::close(void*)>:
c0020c88:	83 ec 1c             	sub    esp,0x1c
c0020c8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c90:	75 07                	jne    c0020c99 <FAT::close(void*)+0x11>
c0020c92:	b8 04 00 00 00       	mov    eax,0x4
c0020c97:	eb 36                	jmp    c0020ccf <FAT::close(void*)+0x47>
c0020c99:	83 ec 0c             	sub    esp,0xc
c0020c9c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ca0:	e8 3e 4e fe ff       	call   c0005ae3 <f_close>
c0020ca5:	83 c4 10             	add    esp,0x10
c0020ca8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cac:	83 ec 0c             	sub    esp,0xc
c0020caf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cb3:	e8 9b eb fe ff       	call   c000f853 <free>
c0020cb8:	83 c4 10             	add    esp,0x10
c0020cbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cbf:	85 c0                	test   eax,eax
c0020cc1:	75 07                	jne    c0020cca <FAT::close(void*)+0x42>
c0020cc3:	b8 00 00 00 00       	mov    eax,0x0
c0020cc8:	eb 05                	jmp    c0020ccf <FAT::close(void*)+0x47>
c0020cca:	b8 01 00 00 00       	mov    eax,0x1
c0020ccf:	83 c4 1c             	add    esp,0x1c
c0020cd2:	c3                   	ret    
c0020cd3:	90                   	nop

c0020cd4 <FAT::closeDir(void*)>:
c0020cd4:	83 ec 1c             	sub    esp,0x1c
c0020cd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cdc:	75 07                	jne    c0020ce5 <FAT::closeDir(void*)+0x11>
c0020cde:	b8 04 00 00 00       	mov    eax,0x4
c0020ce3:	eb 36                	jmp    c0020d1b <FAT::closeDir(void*)+0x47>
c0020ce5:	83 ec 0c             	sub    esp,0xc
c0020ce8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cec:	e8 da 53 fe ff       	call   c00060cb <f_closedir>
c0020cf1:	83 c4 10             	add    esp,0x10
c0020cf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cf8:	83 ec 0c             	sub    esp,0xc
c0020cfb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cff:	e8 4f eb fe ff       	call   c000f853 <free>
c0020d04:	83 c4 10             	add    esp,0x10
c0020d07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d0b:	85 c0                	test   eax,eax
c0020d0d:	75 07                	jne    c0020d16 <FAT::closeDir(void*)+0x42>
c0020d0f:	b8 00 00 00 00       	mov    eax,0x0
c0020d14:	eb 05                	jmp    c0020d1b <FAT::closeDir(void*)+0x47>
c0020d16:	b8 01 00 00 00       	mov    eax,0x1
c0020d1b:	83 c4 1c             	add    esp,0x1c
c0020d1e:	c3                   	ret    
c0020d1f:	90                   	nop

c0020d20 <FAT::seek(void*, unsigned long long)>:
c0020d20:	83 ec 2c             	sub    esp,0x2c
c0020d23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d33:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d38:	75 07                	jne    c0020d41 <FAT::seek(void*, unsigned long long)+0x21>
c0020d3a:	b8 04 00 00 00       	mov    eax,0x4
c0020d3f:	eb 2f                	jmp    c0020d70 <FAT::seek(void*, unsigned long long)+0x50>
c0020d41:	83 ec 04             	sub    esp,0x4
c0020d44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d50:	e8 bd 4d fe ff       	call   c0005b12 <f_lseek>
c0020d55:	83 c4 10             	add    esp,0x10
c0020d58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d60:	85 c0                	test   eax,eax
c0020d62:	75 07                	jne    c0020d6b <FAT::seek(void*, unsigned long long)+0x4b>
c0020d64:	b8 00 00 00 00       	mov    eax,0x0
c0020d69:	eb 05                	jmp    c0020d70 <FAT::seek(void*, unsigned long long)+0x50>
c0020d6b:	b8 01 00 00 00       	mov    eax,0x1
c0020d70:	83 c4 2c             	add    esp,0x2c
c0020d73:	c3                   	ret    

c0020d74 <fatWrapperReadDisk>:
c0020d74:	83 ec 1c             	sub    esp,0x1c
c0020d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d83:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d8e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d93:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020d9a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d9e:	83 ec 0c             	sub    esp,0xc
c0020da1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da5:	52                   	push   edx
c0020da6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020daa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dae:	50                   	push   eax
c0020daf:	e8 22 59 ff ff       	call   c00166d6 <LogicalDisk::read(unsigned long long, int, void*)>
c0020db4:	83 c4 20             	add    esp,0x20
c0020db7:	83 c4 1c             	add    esp,0x1c
c0020dba:	c3                   	ret    

c0020dbb <fatWrapperWriteDisk>:
c0020dbb:	83 ec 1c             	sub    esp,0x1c
c0020dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dc2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020dc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020dca:	89 04 24             	mov    DWORD PTR [esp],eax
c0020dcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020dd5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dda:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020de1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020de5:	83 ec 0c             	sub    esp,0xc
c0020de8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dec:	52                   	push   edx
c0020ded:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020df5:	50                   	push   eax
c0020df6:	e8 47 59 ff ff       	call   c0016742 <LogicalDisk::write(unsigned long long, int, void*)>
c0020dfb:	83 c4 20             	add    esp,0x20
c0020dfe:	83 c4 1c             	add    esp,0x1c
c0020e01:	c3                   	ret    

c0020e02 <fatWrapperIoctl>:
c0020e02:	53                   	push   ebx
c0020e03:	83 ec 28             	sub    esp,0x28
c0020e06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e0e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e16:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e1b:	75 31                	jne    c0020e4e <fatWrapperIoctl+0x4c>
c0020e1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e25:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e2a:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020e31:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e3d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e41:	66 89 02             	mov    WORD PTR [edx],ax
c0020e44:	b8 00 00 00 00       	mov    eax,0x0
c0020e49:	e9 b2 00 00 00       	jmp    c0020f00 <fatWrapperIoctl+0xfe>
c0020e4e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e53:	75 6a                	jne    c0020ebf <fatWrapperIoctl+0xbd>
c0020e55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e5d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e62:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c0020e69:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e6f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e75:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020e7b:	89 c8                	mov    eax,ecx
c0020e7d:	89 da                	mov    edx,ebx
c0020e7f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020e83:	c1 e0 0a             	shl    eax,0xa
c0020e86:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020e8b:	8b 0c 8d e0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1420]
c0020e92:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020e98:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020e9e:	89 cb                	mov    ebx,ecx
c0020ea0:	c1 fb 1f             	sar    ebx,0x1f
c0020ea3:	53                   	push   ebx
c0020ea4:	51                   	push   ecx
c0020ea5:	52                   	push   edx
c0020ea6:	50                   	push   eax
c0020ea7:	e8 c0 5a 00 00       	call   c002696c <__udivdi3>
c0020eac:	83 c4 10             	add    esp,0x10
c0020eaf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020eb3:	89 01                	mov    DWORD PTR [ecx],eax
c0020eb5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020eb8:	b8 00 00 00 00       	mov    eax,0x0
c0020ebd:	eb 41                	jmp    c0020f00 <fatWrapperIoctl+0xfe>
c0020ebf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ec4:	75 07                	jne    c0020ecd <fatWrapperIoctl+0xcb>
c0020ec6:	b8 00 00 00 00       	mov    eax,0x0
c0020ecb:	eb 33                	jmp    c0020f00 <fatWrapperIoctl+0xfe>
c0020ecd:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ed2:	75 19                	jne    c0020eed <fatWrapperIoctl+0xeb>
c0020ed4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ed8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020edc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ee0:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020ee6:	b8 00 00 00 00       	mov    eax,0x0
c0020eeb:	eb 13                	jmp    c0020f00 <fatWrapperIoctl+0xfe>
c0020eed:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ef2:	75 07                	jne    c0020efb <fatWrapperIoctl+0xf9>
c0020ef4:	b8 00 00 00 00       	mov    eax,0x0
c0020ef9:	eb 05                	jmp    c0020f00 <fatWrapperIoctl+0xfe>
c0020efb:	b8 04 00 00 00       	mov    eax,0x4
c0020f00:	83 c4 28             	add    esp,0x28
c0020f03:	5b                   	pop    ebx
c0020f04:	c3                   	ret    
c0020f05:	90                   	nop

c0020f06 <FAT::FAT()>:
c0020f06:	83 ec 1c             	sub    esp,0x1c
c0020f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f0d:	83 ec 0c             	sub    esp,0xc
c0020f10:	50                   	push   eax
c0020f11:	e8 b4 22 ff ff       	call   c00131ca <Filesystem::Filesystem()>
c0020f16:	83 c4 10             	add    esp,0x10
c0020f19:	ba e8 c7 02 c0       	mov    edx,0xc002c7e8
c0020f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f22:	89 10                	mov    DWORD PTR [eax],edx
c0020f24:	c7 05 00 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c00,0x0
c0020f2e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f36:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f3b:	7f 15                	jg     c0020f52 <FAT::FAT()+0x4c>
c0020f3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f41:	c7 04 85 20 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce3e0],0xffffffff
c0020f4c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f50:	eb e4                	jmp    c0020f36 <FAT::FAT()+0x30>
c0020f52:	90                   	nop
c0020f53:	83 c4 1c             	add    esp,0x1c
c0020f56:	c3                   	ret    
c0020f57:	90                   	nop

c0020f58 <FAT::fixFilepath(char*)>:
c0020f58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f5c:	8a 00                	mov    al,BYTE PTR [eax]
c0020f5e:	3c 40                	cmp    al,0x40
c0020f60:	7e 2c                	jle    c0020f8e <FAT::fixFilepath(char*)+0x36>
c0020f62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f66:	8a 00                	mov    al,BYTE PTR [eax]
c0020f68:	83 e8 41             	sub    eax,0x41
c0020f6b:	88 c2                	mov    dl,al
c0020f6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f71:	88 10                	mov    BYTE PTR [eax],dl
c0020f73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f77:	8a 00                	mov    al,BYTE PTR [eax]
c0020f79:	0f be c0             	movsx  eax,al
c0020f7c:	8b 04 85 20 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3e0]
c0020f83:	83 c0 30             	add    eax,0x30
c0020f86:	88 c2                	mov    dl,al
c0020f88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f8c:	88 10                	mov    BYTE PTR [eax],dl
c0020f8e:	90                   	nop
c0020f8f:	c3                   	ret    

c0020f90 <FAT::open(char const*, void**, FileOpenMode)>:
c0020f90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f96:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f9e:	74 0a                	je     c0020faa <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020fa0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fa8:	75 0a                	jne    c0020fb4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020faa:	b8 04 00 00 00       	mov    eax,0x4
c0020faf:	e9 fd 00 00 00       	jmp    c00210b1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fb4:	83 ec 08             	sub    esp,0x8
c0020fb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fc2:	50                   	push   eax
c0020fc3:	e8 6c f8 fd ff       	call   c0000834 <strcpy>
c0020fc8:	83 c4 10             	add    esp,0x10
c0020fcb:	83 ec 08             	sub    esp,0x8
c0020fce:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020fd2:	50                   	push   eax
c0020fd3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fda:	e8 79 ff ff ff       	call   c0020f58 <FAT::fixFilepath(char*)>
c0020fdf:	83 c4 10             	add    esp,0x10
c0020fe2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020fea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ff1:	83 e0 01             	and    eax,0x1
c0020ff4:	74 08                	je     c0020ffe <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020ff6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020ffe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021005:	83 e0 04             	and    eax,0x4
c0021008:	74 10                	je     c002101a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002100a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021012:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002101a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021021:	83 e0 02             	and    eax,0x2
c0021024:	74 08                	je     c002102e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021026:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002102e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021035:	83 e0 08             	and    eax,0x8
c0021038:	74 08                	je     c0021042 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002103a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021042:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021049:	83 e0 10             	and    eax,0x10
c002104c:	74 08                	je     c0021056 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002104e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021056:	83 ec 0c             	sub    esp,0xc
c0021059:	68 50 02 00 00       	push   0x250
c002105e:	e8 e0 e7 fe ff       	call   c000f843 <malloc>
c0021063:	83 c4 10             	add    esp,0x10
c0021066:	89 c2                	mov    edx,eax
c0021068:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002106f:	89 10                	mov    DWORD PTR [eax],edx
c0021071:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021079:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021080:	8b 00                	mov    eax,DWORD PTR [eax]
c0021082:	83 ec 04             	sub    esp,0x4
c0021085:	52                   	push   edx
c0021086:	8d 54 24 10          	lea    edx,[esp+0x10]
c002108a:	52                   	push   edx
c002108b:	50                   	push   eax
c002108c:	e8 00 3f fe ff       	call   c0004f91 <f_open>
c0021091:	83 c4 10             	add    esp,0x10
c0021094:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002109b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00210a3:	74 07                	je     c00210ac <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00210a5:	b8 01 00 00 00       	mov    eax,0x1
c00210aa:	eb 05                	jmp    c00210b1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210ac:	b8 00 00 00 00       	mov    eax,0x0
c00210b1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00210b7:	c3                   	ret    

c00210b8 <FAT::openDir(char const*, void**)>:
c00210b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210c6:	74 0a                	je     c00210d2 <FAT::openDir(char const*, void**)+0x1a>
c00210c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210d0:	75 07                	jne    c00210d9 <FAT::openDir(char const*, void**)+0x21>
c00210d2:	b8 04 00 00 00       	mov    eax,0x4
c00210d7:	eb 7d                	jmp    c0021156 <FAT::openDir(char const*, void**)+0x9e>
c00210d9:	83 ec 08             	sub    esp,0x8
c00210dc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210e7:	50                   	push   eax
c00210e8:	e8 47 f7 fd ff       	call   c0000834 <strcpy>
c00210ed:	83 c4 10             	add    esp,0x10
c00210f0:	83 ec 08             	sub    esp,0x8
c00210f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210f7:	50                   	push   eax
c00210f8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210ff:	e8 54 fe ff ff       	call   c0020f58 <FAT::fixFilepath(char*)>
c0021104:	83 c4 10             	add    esp,0x10
c0021107:	83 ec 0c             	sub    esp,0xc
c002110a:	6a 4c                	push   0x4c
c002110c:	e8 32 e7 fe ff       	call   c000f843 <malloc>
c0021111:	83 c4 10             	add    esp,0x10
c0021114:	89 c2                	mov    edx,eax
c0021116:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002111d:	89 10                	mov    DWORD PTR [eax],edx
c002111f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021126:	8b 00                	mov    eax,DWORD PTR [eax]
c0021128:	83 ec 08             	sub    esp,0x8
c002112b:	8d 54 24 14          	lea    edx,[esp+0x14]
c002112f:	52                   	push   edx
c0021130:	50                   	push   eax
c0021131:	e8 93 4e fe ff       	call   c0005fc9 <f_opendir>
c0021136:	83 c4 10             	add    esp,0x10
c0021139:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021140:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021148:	74 07                	je     c0021151 <FAT::openDir(char const*, void**)+0x99>
c002114a:	b8 01 00 00 00       	mov    eax,0x1
c002114f:	eb 05                	jmp    c0021156 <FAT::openDir(char const*, void**)+0x9e>
c0021151:	b8 00 00 00 00       	mov    eax,0x0
c0021156:	81 c4 1c 01 00 00    	add    esp,0x11c
c002115c:	c3                   	ret    
c002115d:	90                   	nop

c002115e <FAT::stat(char const*, unsigned long long*, bool*)>:
c002115e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021164:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002116c:	75 0a                	jne    c0021178 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002116e:	b8 04 00 00 00       	mov    eax,0x4
c0021173:	e9 c9 00 00 00       	jmp    c0021241 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021178:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021180:	75 0a                	jne    c002118c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021182:	b8 04 00 00 00       	mov    eax,0x4
c0021187:	e9 b5 00 00 00       	jmp    c0021241 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002118c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021194:	75 0a                	jne    c00211a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021196:	b8 04 00 00 00       	mov    eax,0x4
c002119b:	e9 a1 00 00 00       	jmp    c0021241 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211a0:	83 ec 08             	sub    esp,0x8
c00211a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211aa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211b1:	50                   	push   eax
c00211b2:	e8 7d f6 fd ff       	call   c0000834 <strcpy>
c00211b7:	83 c4 10             	add    esp,0x10
c00211ba:	83 ec 08             	sub    esp,0x8
c00211bd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00211c4:	50                   	push   eax
c00211c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211cc:	e8 87 fd ff ff       	call   c0020f58 <FAT::fixFilepath(char*)>
c00211d1:	83 c4 10             	add    esp,0x10
c00211d4:	83 ec 08             	sub    esp,0x8
c00211d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211db:	50                   	push   eax
c00211dc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211e3:	50                   	push   eax
c00211e4:	e8 9f 4f fe ff       	call   c0006188 <f_stat>
c00211e9:	83 c4 10             	add    esp,0x10
c00211ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00211f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00211fa:	85 c0                	test   eax,eax
c00211fc:	74 07                	je     c0021205 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00211fe:	83 f8 04             	cmp    eax,0x4
c0021201:	74 32                	je     c0021235 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021203:	eb 37                	jmp    c002123c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021205:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021209:	0f b6 c0             	movzx  eax,al
c002120c:	83 e0 10             	and    eax,0x10
c002120f:	0f 95 c2             	setne  dl
c0021212:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021219:	88 10                	mov    BYTE PTR [eax],dl
c002121b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002121e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021222:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021229:	89 01                	mov    DWORD PTR [ecx],eax
c002122b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002122e:	b8 00 00 00 00       	mov    eax,0x0
c0021233:	eb 0c                	jmp    c0021241 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021235:	b8 02 00 00 00       	mov    eax,0x2
c002123a:	eb 05                	jmp    c0021241 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002123c:	b8 01 00 00 00       	mov    eax,0x1
c0021241:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021247:	c3                   	ret    

c0021248 <FAT::unlink(char const*)>:
c0021248:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002124e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021256:	75 07                	jne    c002125f <FAT::unlink(char const*)+0x17>
c0021258:	b8 04 00 00 00       	mov    eax,0x4
c002125d:	eb 5c                	jmp    c00212bb <FAT::unlink(char const*)+0x73>
c002125f:	83 ec 08             	sub    esp,0x8
c0021262:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021269:	8d 44 24 18          	lea    eax,[esp+0x18]
c002126d:	50                   	push   eax
c002126e:	e8 c1 f5 fd ff       	call   c0000834 <strcpy>
c0021273:	83 c4 10             	add    esp,0x10
c0021276:	83 ec 08             	sub    esp,0x8
c0021279:	8d 44 24 14          	lea    eax,[esp+0x14]
c002127d:	50                   	push   eax
c002127e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021285:	e8 ce fc ff ff       	call   c0020f58 <FAT::fixFilepath(char*)>
c002128a:	83 c4 10             	add    esp,0x10
c002128d:	83 ec 0c             	sub    esp,0xc
c0021290:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021294:	50                   	push   eax
c0021295:	e8 40 52 fe ff       	call   c00064da <f_unlink>
c002129a:	83 c4 10             	add    esp,0x10
c002129d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212a4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00212ab:	85 c0                	test   eax,eax
c00212ad:	75 07                	jne    c00212b6 <FAT::unlink(char const*)+0x6e>
c00212af:	b8 00 00 00 00       	mov    eax,0x0
c00212b4:	eb 05                	jmp    c00212bb <FAT::unlink(char const*)+0x73>
c00212b6:	b8 01 00 00 00       	mov    eax,0x1
c00212bb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212c1:	c3                   	ret    

c00212c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00212c2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00212c8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212cf:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00212d6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00212da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00212de:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00212e6:	75 0a                	jne    c00212f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00212e8:	b8 04 00 00 00       	mov    eax,0x4
c00212ed:	e9 1c 01 00 00       	jmp    c002140e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212f2:	83 ec 08             	sub    esp,0x8
c00212f5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00212fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021300:	50                   	push   eax
c0021301:	e8 2e f5 fd ff       	call   c0000834 <strcpy>
c0021306:	83 c4 10             	add    esp,0x10
c0021309:	83 ec 08             	sub    esp,0x8
c002130c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021310:	50                   	push   eax
c0021311:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021318:	e8 3b fc ff ff       	call   c0020f58 <FAT::fixFilepath(char*)>
c002131d:	83 c4 10             	add    esp,0x10
c0021320:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021328:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021330:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021335:	83 e0 01             	and    eax,0x1
c0021338:	74 08                	je     c0021342 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002133a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021342:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021347:	83 e0 02             	and    eax,0x2
c002134a:	74 08                	je     c0021354 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002134c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021354:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021359:	83 e0 04             	and    eax,0x4
c002135c:	74 08                	je     c0021366 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002135e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021366:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002136b:	83 e0 08             	and    eax,0x8
c002136e:	74 08                	je     c0021378 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021370:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021378:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002137d:	83 e0 01             	and    eax,0x1
c0021380:	74 08                	je     c002138a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021382:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002138a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002138f:	83 e0 02             	and    eax,0x2
c0021392:	74 08                	je     c002139c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021394:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002139c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213a1:	83 e0 04             	and    eax,0x4
c00213a4:	74 08                	je     c00213ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00213a6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00213ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213b3:	83 e0 08             	and    eax,0x8
c00213b6:	74 08                	je     c00213c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00213b8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00213c0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00213c7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213ce:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00213d6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00213de:	83 ec 04             	sub    esp,0x4
c00213e1:	52                   	push   edx
c00213e2:	50                   	push   eax
c00213e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213e7:	50                   	push   eax
c00213e8:	e8 8f 57 fe ff       	call   c0006b7c <f_chmod>
c00213ed:	83 c4 10             	add    esp,0x10
c00213f0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00213f7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00213fe:	85 c0                	test   eax,eax
c0021400:	75 07                	jne    c0021409 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021402:	b8 00 00 00 00       	mov    eax,0x0
c0021407:	eb 05                	jmp    c002140e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021409:	b8 01 00 00 00       	mov    eax,0x1
c002140e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021414:	c3                   	ret    
c0021415:	90                   	nop

c0021416 <FAT::rename(char const*, char const*)>:
c0021416:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002141c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021424:	74 0a                	je     c0021430 <FAT::rename(char const*, char const*)+0x1a>
c0021426:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002142e:	75 0a                	jne    c002143a <FAT::rename(char const*, char const*)+0x24>
c0021430:	b8 04 00 00 00       	mov    eax,0x4
c0021435:	e9 98 00 00 00       	jmp    c00214d2 <FAT::rename(char const*, char const*)+0xbc>
c002143a:	83 ec 08             	sub    esp,0x8
c002143d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021444:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002144b:	50                   	push   eax
c002144c:	e8 e3 f3 fd ff       	call   c0000834 <strcpy>
c0021451:	83 c4 10             	add    esp,0x10
c0021454:	83 ec 08             	sub    esp,0x8
c0021457:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002145e:	50                   	push   eax
c002145f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021466:	e8 ed fa ff ff       	call   c0020f58 <FAT::fixFilepath(char*)>
c002146b:	83 c4 10             	add    esp,0x10
c002146e:	83 ec 08             	sub    esp,0x8
c0021471:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021478:	8d 44 24 18          	lea    eax,[esp+0x18]
c002147c:	50                   	push   eax
c002147d:	e8 b2 f3 fd ff       	call   c0000834 <strcpy>
c0021482:	83 c4 10             	add    esp,0x10
c0021485:	83 ec 08             	sub    esp,0x8
c0021488:	8d 44 24 14          	lea    eax,[esp+0x14]
c002148c:	50                   	push   eax
c002148d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021494:	e8 bf fa ff ff       	call   c0020f58 <FAT::fixFilepath(char*)>
c0021499:	83 c4 10             	add    esp,0x10
c002149c:	83 ec 08             	sub    esp,0x8
c002149f:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214a3:	50                   	push   eax
c00214a4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214ab:	50                   	push   eax
c00214ac:	e8 d8 53 fe ff       	call   c0006889 <f_rename>
c00214b1:	83 c4 10             	add    esp,0x10
c00214b4:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00214bb:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00214c2:	85 c0                	test   eax,eax
c00214c4:	75 07                	jne    c00214cd <FAT::rename(char const*, char const*)+0xb7>
c00214c6:	b8 00 00 00 00       	mov    eax,0x0
c00214cb:	eb 05                	jmp    c00214d2 <FAT::rename(char const*, char const*)+0xbc>
c00214cd:	b8 01 00 00 00       	mov    eax,0x1
c00214d2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00214d8:	c3                   	ret    
c00214d9:	90                   	nop

c00214da <FAT::mkdir(char const*)>:
c00214da:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214e0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214e8:	75 07                	jne    c00214f1 <FAT::mkdir(char const*)+0x17>
c00214ea:	b8 04 00 00 00       	mov    eax,0x4
c00214ef:	eb 5c                	jmp    c002154d <FAT::mkdir(char const*)+0x73>
c00214f1:	83 ec 08             	sub    esp,0x8
c00214f4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214ff:	50                   	push   eax
c0021500:	e8 2f f3 fd ff       	call   c0000834 <strcpy>
c0021505:	83 c4 10             	add    esp,0x10
c0021508:	83 ec 08             	sub    esp,0x8
c002150b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002150f:	50                   	push   eax
c0021510:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021517:	e8 3c fa ff ff       	call   c0020f58 <FAT::fixFilepath(char*)>
c002151c:	83 c4 10             	add    esp,0x10
c002151f:	83 ec 0c             	sub    esp,0xc
c0021522:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021526:	50                   	push   eax
c0021527:	e8 31 51 fe ff       	call   c000665d <f_mkdir>
c002152c:	83 c4 10             	add    esp,0x10
c002152f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021536:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002153d:	85 c0                	test   eax,eax
c002153f:	75 07                	jne    c0021548 <FAT::mkdir(char const*)+0x6e>
c0021541:	b8 00 00 00 00       	mov    eax,0x0
c0021546:	eb 05                	jmp    c002154d <FAT::mkdir(char const*)+0x73>
c0021548:	b8 01 00 00 00       	mov    eax,0x1
c002154d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021553:	c3                   	ret    

c0021554 <FAT::exists(char const*)>:
c0021554:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002155a:	83 ec 08             	sub    esp,0x8
c002155d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021564:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021568:	50                   	push   eax
c0021569:	e8 c6 f2 fd ff       	call   c0000834 <strcpy>
c002156e:	83 c4 10             	add    esp,0x10
c0021571:	83 ec 08             	sub    esp,0x8
c0021574:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021578:	50                   	push   eax
c0021579:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021580:	e8 d3 f9 ff ff       	call   c0020f58 <FAT::fixFilepath(char*)>
c0021585:	83 c4 10             	add    esp,0x10
c0021588:	83 ec 08             	sub    esp,0x8
c002158b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021592:	50                   	push   eax
c0021593:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021597:	50                   	push   eax
c0021598:	e8 eb 4b fe ff       	call   c0006188 <f_stat>
c002159d:	83 c4 10             	add    esp,0x10
c00215a0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00215a7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00215ae:	85 c0                	test   eax,eax
c00215b0:	75 04                	jne    c00215b6 <FAT::exists(char const*)+0x62>
c00215b2:	b0 01                	mov    al,0x1
c00215b4:	eb 02                	jmp    c00215b8 <FAT::exists(char const*)+0x64>
c00215b6:	b0 00                	mov    al,0x0
c00215b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215be:	c3                   	ret    
c00215bf:	90                   	nop

c00215c0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00215c0:	b8 08 00 00 00       	mov    eax,0x8
c00215c5:	c3                   	ret    

c00215c6 <ISO9660::seek(void*, unsigned long long)>:
c00215c6:	53                   	push   ebx
c00215c7:	b8 04 00 00 00       	mov    eax,0x4
c00215cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00215d8:	85 d2                	test   edx,edx
c00215da:	74 17                	je     c00215f3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215dc:	89 c8                	mov    eax,ecx
c00215de:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00215e1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00215e4:	b8 01 00 00 00       	mov    eax,0x1
c00215e9:	73 08                	jae    c00215f3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215eb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00215ee:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00215f1:	31 c0                	xor    eax,eax
c00215f3:	5b                   	pop    ebx
c00215f4:	c3                   	ret    
c00215f5:	90                   	nop

c00215f6 <ISO9660::tell(void*, unsigned long long*)>:
c00215f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215fe:	85 d2                	test   edx,edx
c0021600:	74 12                	je     c0021614 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021602:	85 c0                	test   eax,eax
c0021604:	74 0e                	je     c0021614 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021606:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021609:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002160c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002160f:	89 10                	mov    DWORD PTR [eax],edx
c0021611:	31 c0                	xor    eax,eax
c0021613:	c3                   	ret    
c0021614:	b8 04 00 00 00       	mov    eax,0x4
c0021619:	c3                   	ret    

c002161a <ISO9660::getName()>:
c002161a:	b8 44 c8 02 c0       	mov    eax,0xc002c844
c002161f:	c3                   	ret    

c0021620 <ISO9660::stat(void*, unsigned long long*)>:
c0021620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021624:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021628:	85 d2                	test   edx,edx
c002162a:	74 12                	je     c002163e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002162c:	85 c0                	test   eax,eax
c002162e:	74 0e                	je     c002163e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021630:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021633:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021636:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021639:	89 10                	mov    DWORD PTR [eax],edx
c002163b:	31 c0                	xor    eax,eax
c002163d:	c3                   	ret    
c002163e:	b8 04 00 00 00       	mov    eax,0x4
c0021643:	c3                   	ret    

c0021644 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021644:	b8 01 00 00 00       	mov    eax,0x1
c0021649:	c3                   	ret    

c002164a <ISO9660::unlink(char const*)>:
c002164a:	b8 01 00 00 00       	mov    eax,0x1
c002164f:	c3                   	ret    

c0021650 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021650:	b8 01 00 00 00       	mov    eax,0x1
c0021655:	c3                   	ret    

c0021656 <ISO9660::rename(char const*, char const*)>:
c0021656:	b8 01 00 00 00       	mov    eax,0x1
c002165b:	c3                   	ret    

c002165c <ISO9660::mkdir(char const*)>:
c002165c:	b8 01 00 00 00       	mov    eax,0x1
c0021661:	c3                   	ret    

c0021662 <ISO9660::close(void*)>:
c0021662:	83 ec 0c             	sub    esp,0xc
c0021665:	b8 04 00 00 00       	mov    eax,0x4
c002166a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002166e:	85 d2                	test   edx,edx
c0021670:	74 0e                	je     c0021680 <ISO9660::close(void*)+0x1e>
c0021672:	83 ec 0c             	sub    esp,0xc
c0021675:	52                   	push   edx
c0021676:	e8 d8 e1 fe ff       	call   c000f853 <free>
c002167b:	83 c4 10             	add    esp,0x10
c002167e:	31 c0                	xor    eax,eax
c0021680:	83 c4 0c             	add    esp,0xc
c0021683:	c3                   	ret    

c0021684 <ISO9660::closeDir(void*)>:
c0021684:	83 ec 0c             	sub    esp,0xc
c0021687:	b8 04 00 00 00       	mov    eax,0x4
c002168c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021690:	85 d2                	test   edx,edx
c0021692:	74 0e                	je     c00216a2 <ISO9660::closeDir(void*)+0x1e>
c0021694:	83 ec 0c             	sub    esp,0xc
c0021697:	52                   	push   edx
c0021698:	e8 b6 e1 fe ff       	call   c000f853 <free>
c002169d:	83 c4 10             	add    esp,0x10
c00216a0:	31 c0                	xor    eax,eax
c00216a2:	83 c4 0c             	add    esp,0xc
c00216a5:	c3                   	ret    

c00216a6 <ISO9660::~ISO9660()>:
c00216a6:	83 ec 0c             	sub    esp,0xc
c00216a9:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c00216ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b2:	89 10                	mov    DWORD PTR [eax],edx
c00216b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b8:	83 ec 0c             	sub    esp,0xc
c00216bb:	50                   	push   eax
c00216bc:	e8 2d 1b ff ff       	call   c00131ee <Filesystem::~Filesystem()>
c00216c1:	83 c4 10             	add    esp,0x10
c00216c4:	90                   	nop
c00216c5:	83 c4 0c             	add    esp,0xc
c00216c8:	c3                   	ret    
c00216c9:	90                   	nop

c00216ca <ISO9660::~ISO9660()>:
c00216ca:	83 ec 0c             	sub    esp,0xc
c00216cd:	83 ec 0c             	sub    esp,0xc
c00216d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216d4:	e8 cd ff ff ff       	call   c00216a6 <ISO9660::~ISO9660()>
c00216d9:	83 c4 10             	add    esp,0x10
c00216dc:	83 ec 08             	sub    esp,0x8
c00216df:	6a 08                	push   0x8
c00216e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216e5:	e8 fc 16 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00216ea:	83 c4 10             	add    esp,0x10
c00216ed:	83 c4 0c             	add    esp,0xc
c00216f0:	c3                   	ret    

c00216f1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00216f1:	55                   	push   ebp
c00216f2:	31 c9                	xor    ecx,ecx
c00216f4:	57                   	push   edi
c00216f5:	56                   	push   esi
c00216f6:	53                   	push   ebx
c00216f7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00216fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00216ff:	89 eb                	mov    ebx,ebp
c0021701:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021705:	39 ce                	cmp    esi,ecx
c0021707:	7e 17                	jle    c0021720 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021709:	31 d2                	xor    edx,edx
c002170b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002170f:	7d 13                	jge    c0021724 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021711:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021715:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021718:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002171b:	75 0d                	jne    c002172a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002171d:	42                   	inc    edx
c002171e:	eb eb                	jmp    c002170b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021720:	31 c0                	xor    eax,eax
c0021722:	eb 0a                	jmp    c002172e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021724:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021728:	eb 04                	jmp    c002172e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002172a:	41                   	inc    ecx
c002172b:	43                   	inc    ebx
c002172c:	eb d7                	jmp    c0021705 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002172e:	5b                   	pop    ebx
c002172f:	5e                   	pop    esi
c0021730:	5f                   	pop    edi
c0021731:	5d                   	pop    ebp
c0021732:	c3                   	ret    

c0021733 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021733:	56                   	push   esi
c0021734:	53                   	push   ebx
c0021735:	52                   	push   edx
c0021736:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002173a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002173e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021742:	39 0d 00 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d00,ecx
c0021748:	75 08                	jne    c0021752 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002174a:	38 05 14 d9 02 c0    	cmp    BYTE PTR ds:0xc002d914,al
c0021750:	74 2b                	je     c002177d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021752:	83 ec 0c             	sub    esp,0xc
c0021755:	a2 14 d9 02 c0       	mov    ds:0xc002d914,al
c002175a:	68 20 1d 03 c0       	push   0xc0031d20
c002175f:	0f be c0             	movsx  eax,al
c0021762:	6a 01                	push   0x1
c0021764:	89 0d 00 1d 03 c0    	mov    DWORD PTR ds:0xc0031d00,ecx
c002176a:	31 db                	xor    ebx,ebx
c002176c:	53                   	push   ebx
c002176d:	51                   	push   ecx
c002176e:	ff 34 85 dc ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1524]
c0021775:	e8 5c 4f ff ff       	call   c00166d6 <LogicalDisk::read(unsigned long long, int, void*)>
c002177a:	83 c4 20             	add    esp,0x20
c002177d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021785:	c7 44 24 14 20 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d20
c002178d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021791:	58                   	pop    eax
c0021792:	5b                   	pop    ebx
c0021793:	5e                   	pop    esi
c0021794:	e9 ab ef fd ff       	jmp    c0000744 <memcpy>
c0021799:	90                   	nop

c002179a <ISO9660::tryMount(LogicalDisk*, int)>:
c002179a:	81 ec 10 08 00 00    	sub    esp,0x810
c00217a0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00217a7:	83 c0 41             	add    eax,0x41
c00217aa:	0f be c0             	movsx  eax,al
c00217ad:	50                   	push   eax
c00217ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217b2:	50                   	push   eax
c00217b3:	6a 10                	push   0x10
c00217b5:	e8 79 ff ff ff       	call   c0021733 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217ba:	83 c4 10             	add    esp,0x10
c00217bd:	31 c0                	xor    eax,eax
c00217bf:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00217c4:	75 1d                	jne    c00217e3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217c6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00217cb:	75 16                	jne    c00217e3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217cd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217d2:	75 0f                	jne    c00217e3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217d4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00217d9:	75 08                	jne    c00217e3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217db:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00217e0:	0f 94 c0             	sete   al
c00217e3:	81 c4 0c 08 00 00    	add    esp,0x80c
c00217e9:	c3                   	ret    

c00217ea <ISO9660::read(void*, unsigned long, void*, int*)>:
c00217ea:	55                   	push   ebp
c00217eb:	57                   	push   edi
c00217ec:	56                   	push   esi
c00217ed:	53                   	push   ebx
c00217ee:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00217f4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00217fb:	85 ed                	test   ebp,ebp
c00217fd:	0f 84 d6 01 00 00    	je     c00219d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021803:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002180b:	0f 84 c8 01 00 00    	je     c00219d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021811:	b8 01 00 00 00       	mov    eax,0x1
c0021816:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002181a:	0f 85 be 01 00 00    	jne    c00219de <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021820:	31 d2                	xor    edx,edx
c0021822:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021829:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002182c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002182f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021833:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021836:	89 04 24             	mov    DWORD PTR [esp],eax
c0021839:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002183d:	01 f0                	add    eax,esi
c002183f:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021842:	11 fa                	adc    edx,edi
c0021844:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021848:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002184c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021850:	19 d1                	sbb    ecx,edx
c0021852:	72 0a                	jb     c002185e <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021854:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021858:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002185c:	eb 13                	jmp    c0021871 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002185e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021862:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021866:	29 f0                	sub    eax,esi
c0021868:	19 fa                	sbb    edx,edi
c002186a:	89 04 24             	mov    DWORD PTR [esp],eax
c002186d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021871:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021874:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021877:	0f a4 c2 0b          	shld   edx,eax,0xb
c002187b:	51                   	push   ecx
c002187c:	c1 e0 0b             	shl    eax,0xb
c002187f:	01 c6                	add    esi,eax
c0021881:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021885:	11 d7                	adc    edi,edx
c0021887:	50                   	push   eax
c0021888:	89 fa                	mov    edx,edi
c002188a:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002188e:	89 f0                	mov    eax,esi
c0021890:	53                   	push   ebx
c0021891:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021895:	50                   	push   eax
c0021896:	e8 98 fe ff ff       	call   c0021733 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002189b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002189f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00218a6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00218ac:	83 c4 10             	add    esp,0x10
c00218af:	b8 00 08 00 00       	mov    eax,0x800
c00218b4:	29 d0                	sub    eax,edx
c00218b6:	39 c1                	cmp    ecx,eax
c00218b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00218bc:	83 d9 00             	sbb    ecx,0x0
c00218bf:	7d 1c                	jge    c00218dd <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00218c1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00218c6:	75 12                	jne    c00218da <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00218c8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218d5:	e9 fb 00 00 00       	jmp    c00219d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00218da:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00218dd:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00218e0:	31 d2                	xor    edx,edx
c00218e2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00218e6:	39 c2                	cmp    edx,eax
c00218e8:	7d 14                	jge    c00218fe <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00218ea:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00218f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218f5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00218f8:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00218fb:	42                   	inc    edx
c00218fc:	eb e8                	jmp    c00218e6 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00218fe:	89 c3                	mov    ebx,eax
c0021900:	85 c0                	test   eax,eax
c0021902:	79 02                	jns    c0021906 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021904:	31 db                	xor    ebx,ebx
c0021906:	99                   	cdq    
c0021907:	01 c3                	add    ebx,eax
c0021909:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021910:	01 c6                	add    esi,eax
c0021912:	11 d7                	adc    edi,edx
c0021914:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021918:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002191c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002191f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021923:	29 c6                	sub    esi,eax
c0021925:	19 d7                	sbb    edi,edx
c0021927:	89 34 24             	mov    DWORD PTR [esp],esi
c002192a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002192e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021933:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021936:	b8 00 00 00 00       	mov    eax,0x0
c002193b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002193f:	7d 3e                	jge    c002197f <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021941:	52                   	push   edx
c0021942:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021946:	50                   	push   eax
c0021947:	53                   	push   ebx
c0021948:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002194c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021950:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021954:	50                   	push   eax
c0021955:	e8 d9 fd ff ff       	call   c0021733 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002195a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021962:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021967:	81 c3 00 08 00 00    	add    ebx,0x800
c002196d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021975:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002197a:	83 c4 10             	add    esp,0x10
c002197d:	eb af                	jmp    c002192e <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c002197f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021983:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021986:	74 32                	je     c00219ba <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021988:	50                   	push   eax
c0021989:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002198d:	50                   	push   eax
c002198e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021992:	50                   	push   eax
c0021993:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021997:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002199b:	0f ac fe 0b          	shrd   esi,edi,0xb
c002199f:	56                   	push   esi
c00219a0:	e8 8e fd ff ff       	call   c0021733 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219a5:	83 c4 0c             	add    esp,0xc
c00219a8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00219ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c00219b0:	50                   	push   eax
c00219b1:	53                   	push   ebx
c00219b2:	e8 8d ed fd ff       	call   c0000744 <memcpy>
c00219b7:	83 c4 10             	add    esp,0x10
c00219ba:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219c1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00219c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219c9:	89 38                	mov    DWORD PTR [eax],edi
c00219cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219cf:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219d2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219d5:	31 c0                	xor    eax,eax
c00219d7:	eb 05                	jmp    c00219de <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00219d9:	b8 04 00 00 00       	mov    eax,0x4
c00219de:	81 c4 2c 08 00 00    	add    esp,0x82c
c00219e4:	5b                   	pop    ebx
c00219e5:	5e                   	pop    esi
c00219e6:	5f                   	pop    edi
c00219e7:	5d                   	pop    ebp
c00219e8:	c3                   	ret    
c00219e9:	90                   	nop

c00219ea <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00219ea:	55                   	push   ebp
c00219eb:	57                   	push   edi
c00219ec:	56                   	push   esi
c00219ed:	53                   	push   ebx
c00219ee:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00219f4:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00219fb:	85 f6                	test   esi,esi
c00219fd:	0f 84 64 02 00 00    	je     c0021c67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a03:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a0b:	0f 84 56 02 00 00    	je     c0021c67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a11:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a14:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a17:	75 0a                	jne    c0021a23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a19:	b8 07 00 00 00       	mov    eax,0x7
c0021a1e:	e9 49 02 00 00       	jmp    c0021c6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021a23:	50                   	push   eax
c0021a24:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a28:	50                   	push   eax
c0021a29:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a30:	53                   	push   ebx
c0021a31:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a33:	c1 e0 0b             	shl    eax,0xb
c0021a36:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a39:	c1 e8 0b             	shr    eax,0xb
c0021a3c:	50                   	push   eax
c0021a3d:	e8 f1 fc ff ff       	call   c0021733 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a42:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a45:	83 c4 10             	add    esp,0x10
c0021a48:	89 c1                	mov    ecx,eax
c0021a4a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a4d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a53:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a56:	84 db                	test   bl,bl
c0021a58:	0f 85 90 00 00 00    	jne    c0021aee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021a5e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021a64:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a6a:	29 c7                	sub    edi,eax
c0021a6c:	89 fb                	mov    ebx,edi
c0021a6e:	c1 fb 1f             	sar    ebx,0x1f
c0021a71:	01 f8                	add    eax,edi
c0021a73:	11 da                	adc    edx,ebx
c0021a75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a7d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021a80:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021a83:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021a86:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021a89:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a90:	89 d8                	mov    eax,ebx
c0021a92:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021a95:	ba 00 00 00 00       	mov    edx,0x0
c0021a9a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a9e:	b8 00 00 00 00       	mov    eax,0x0
c0021aa3:	73 0b                	jae    c0021ab0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021aa5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021aa8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021aac:	29 f8                	sub    eax,edi
c0021aae:	19 da                	sbb    edx,ebx
c0021ab0:	89 d3                	mov    ebx,edx
c0021ab2:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ab5:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ab8:	09 c3                	or     ebx,eax
c0021aba:	0f 84 59 ff ff ff    	je     c0021a19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021ac0:	55                   	push   ebp
c0021ac1:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021ac5:	50                   	push   eax
c0021ac6:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021acd:	53                   	push   ebx
c0021ace:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ad0:	c1 e0 0b             	shl    eax,0xb
c0021ad3:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021ad7:	c1 e8 0b             	shr    eax,0xb
c0021ada:	50                   	push   eax
c0021adb:	e8 53 fc ff ff       	call   c0021733 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ae0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ae3:	83 c4 10             	add    esp,0x10
c0021ae6:	25 ff 07 00 00       	and    eax,0x7ff
c0021aeb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021aee:	57                   	push   edi
c0021aef:	6a 28                	push   0x28
c0021af1:	6a 00                	push   0x0
c0021af3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021af7:	50                   	push   eax
c0021af8:	e8 7b ec fd ff       	call   c0000778 <memset>
c0021afd:	31 d2                	xor    edx,edx
c0021aff:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b02:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b08:	89 f8                	mov    eax,edi
c0021b0a:	83 c0 21             	add    eax,0x21
c0021b0d:	83 d2 00             	adc    edx,0x0
c0021b10:	89 c7                	mov    edi,eax
c0021b12:	89 d5                	mov    ebp,edx
c0021b14:	83 c4 10             	add    esp,0x10
c0021b17:	31 c9                	xor    ecx,ecx
c0021b19:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021b20:	83 f9 28             	cmp    ecx,0x28
c0021b23:	88 04 24             	mov    BYTE PTR [esp],al
c0021b26:	0f 94 c2             	sete   dl
c0021b29:	88 d0                	mov    al,dl
c0021b2b:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b30:	39 fa                	cmp    edx,edi
c0021b32:	ba 00 00 00 00       	mov    edx,0x0
c0021b37:	19 ea                	sbb    edx,ebp
c0021b39:	0f 92 c2             	setb   dl
c0021b3c:	09 c2                	or     edx,eax
c0021b3e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b42:	0f 94 c0             	sete   al
c0021b45:	08 d0                	or     al,dl
c0021b47:	75 16                	jne    c0021b5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b49:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b4d:	74 10                	je     c0021b5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b4f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b52:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b56:	41                   	inc    ecx
c0021b57:	83 c7 01             	add    edi,0x1
c0021b5a:	83 d5 00             	adc    ebp,0x0
c0021b5d:	eb ba                	jmp    c0021b19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021b5f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b66:	83 ec 0c             	sub    esp,0xc
c0021b69:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021b6d:	57                   	push   edi
c0021b6e:	e8 21 ec fd ff       	call   c0000794 <strlen>
c0021b73:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021b7b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b7f:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021b86:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b89:	5a                   	pop    edx
c0021b8a:	25 ff 07 00 00       	and    eax,0x7ff
c0021b8f:	01 c8                	add    eax,ecx
c0021b91:	59                   	pop    ecx
c0021b92:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021b98:	83 e0 02             	and    eax,0x2
c0021b9b:	3c 01                	cmp    al,0x1
c0021b9d:	19 c0                	sbb    eax,eax
c0021b9f:	83 c0 02             	add    eax,0x2
c0021ba2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ba6:	57                   	push   edi
c0021ba7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021bab:	50                   	push   eax
c0021bac:	e8 83 ec fd ff       	call   c0000834 <strcpy>
c0021bb1:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021bb5:	83 c4 10             	add    esp,0x10
c0021bb8:	84 c0                	test   al,al
c0021bba:	75 21                	jne    c0021bdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021bbc:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021bc4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bcc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bd4:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021bdb:	eb 28                	jmp    c0021c05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021bdd:	fe c8                	dec    al
c0021bdf:	75 24                	jne    c0021c05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021be1:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021be9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bf1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bf9:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c00:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c05:	0f b6 fb             	movzx  edi,bl
c0021c08:	31 db                	xor    ebx,ebx
c0021c0a:	50                   	push   eax
c0021c0b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c12:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c16:	50                   	push   eax
c0021c17:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021c1e:	e8 21 eb fd ff       	call   c0000744 <memcpy>
c0021c23:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021c2a:	89 f9                	mov    ecx,edi
c0021c2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c32:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c35:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c38:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c3b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c3e:	83 c4 10             	add    esp,0x10
c0021c41:	39 c7                	cmp    edi,eax
c0021c43:	89 df                	mov    edi,ebx
c0021c45:	19 d7                	sbb    edi,edx
c0021c47:	72 10                	jb     c0021c59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c49:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c50:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c57:	eb 0a                	jmp    c0021c63 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c59:	29 c8                	sub    eax,ecx
c0021c5b:	19 da                	sbb    edx,ebx
c0021c5d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c60:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c63:	31 c0                	xor    eax,eax
c0021c65:	eb 05                	jmp    c0021c6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021c67:	b8 04 00 00 00       	mov    eax,0x4
c0021c6c:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c72:	5b                   	pop    ebx
c0021c73:	5e                   	pop    esi
c0021c74:	5f                   	pop    edi
c0021c75:	5d                   	pop    ebp
c0021c76:	c3                   	ret    

c0021c77 <readRoot(unsigned int*, unsigned int*, char)>:
c0021c77:	81 ec 40 08 00 00    	sub    esp,0x840
c0021c7d:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021c85:	50                   	push   eax
c0021c86:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021c8a:	50                   	push   eax
c0021c8b:	6a 10                	push   0x10
c0021c8d:	e8 a1 fa ff ff       	call   c0021733 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c92:	83 c4 0c             	add    esp,0xc
c0021c95:	6a 22                	push   0x22
c0021c97:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021c9e:	50                   	push   eax
c0021c9f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021ca3:	50                   	push   eax
c0021ca4:	e8 9b ea fd ff       	call   c0000744 <memcpy>
c0021ca9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021cb0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cb4:	89 10                	mov    DWORD PTR [eax],edx
c0021cb6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021cbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021cc1:	89 10                	mov    DWORD PTR [eax],edx
c0021cc3:	b0 01                	mov    al,0x1
c0021cc5:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021ccb:	c3                   	ret    

c0021ccc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021ccc:	55                   	push   ebp
c0021ccd:	57                   	push   edi
c0021cce:	56                   	push   esi
c0021ccf:	53                   	push   ebx
c0021cd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021cd6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021cdd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021ce4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ce8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021cec:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021cf0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021cf4:	75 03                	jne    c0021cf9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021cf6:	83 c3 02             	add    ebx,0x2
c0021cf9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021cfc:	75 03                	jne    c0021d01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021cfe:	43                   	inc    ebx
c0021cff:	eb f8                	jmp    c0021cf9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d01:	51                   	push   ecx
c0021d02:	68 00 01 00 00       	push   0x100
c0021d07:	6a 00                	push   0x0
c0021d09:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d0d:	50                   	push   eax
c0021d0e:	e8 65 ea fd ff       	call   c0000778 <memset>
c0021d13:	83 c4 10             	add    esp,0x10
c0021d16:	31 d2                	xor    edx,edx
c0021d18:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d1b:	84 c0                	test   al,al
c0021d1d:	74 21                	je     c0021d40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021d1f:	3c 2f                	cmp    al,0x2f
c0021d21:	75 0b                	jne    c0021d2e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021d23:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021d27:	bd 01 00 00 00       	mov    ebp,0x1
c0021d2c:	eb 14                	jmp    c0021d42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d2e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d31:	80 f9 19             	cmp    cl,0x19
c0021d34:	77 03                	ja     c0021d39 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d36:	83 e8 20             	sub    eax,0x20
c0021d39:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d3d:	42                   	inc    edx
c0021d3e:	eb d8                	jmp    c0021d18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d40:	31 ed                	xor    ebp,ebp
c0021d42:	83 ec 0c             	sub    esp,0xc
c0021d45:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d4c:	e8 f2 da fe ff       	call   c000f843 <malloc>
c0021d51:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d58:	89 c6                	mov    esi,eax
c0021d5a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d60:	c1 ef 0b             	shr    edi,0xb
c0021d63:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d6a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d6e:	83 c4 10             	add    esp,0x10
c0021d71:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d7a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d81:	74 28                	je     c0021dab <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d83:	52                   	push   edx
c0021d84:	57                   	push   edi
c0021d85:	50                   	push   eax
c0021d86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d8a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021d91:	e8 9d f9 ff ff       	call   c0021733 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d9a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021da1:	05 00 08 00 00       	add    eax,0x800
c0021da6:	83 c4 10             	add    esp,0x10
c0021da9:	eb cb                	jmp    c0021d76 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021dab:	83 ec 0c             	sub    esp,0xc
c0021dae:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021db2:	57                   	push   edi
c0021db3:	e8 dc e9 fd ff       	call   c0000794 <strlen>
c0021db8:	50                   	push   eax
c0021db9:	57                   	push   edi
c0021dba:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021dc1:	56                   	push   esi
c0021dc2:	e8 2a f9 ff ff       	call   c00216f1 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021dc7:	83 c4 20             	add    esp,0x20
c0021dca:	85 c0                	test   eax,eax
c0021dcc:	75 13                	jne    c0021de1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021dce:	83 ec 0c             	sub    esp,0xc
c0021dd1:	56                   	push   esi
c0021dd2:	e8 7c da fe ff       	call   c000f853 <free>
c0021dd7:	83 c4 10             	add    esp,0x10
c0021dda:	31 c0                	xor    eax,eax
c0021ddc:	e9 b3 00 00 00       	jmp    c0021e94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021de1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021de5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021de9:	c1 e7 08             	shl    edi,0x8
c0021dec:	c1 e2 10             	shl    edx,0x10
c0021def:	09 d7                	or     edi,edx
c0021df1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021df5:	09 d7                	or     edi,edx
c0021df7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021dfb:	c1 e2 18             	shl    edx,0x18
c0021dfe:	09 d7                	or     edi,edx
c0021e00:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e04:	89 d1                	mov    ecx,edx
c0021e06:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e0a:	c1 e1 08             	shl    ecx,0x8
c0021e0d:	c1 e2 10             	shl    edx,0x10
c0021e10:	09 ca                	or     edx,ecx
c0021e12:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e16:	09 ca                	or     edx,ecx
c0021e18:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021e1c:	c1 e1 18             	shl    ecx,0x18
c0021e1f:	09 ca                	or     edx,ecx
c0021e21:	89 e9                	mov    ecx,ebp
c0021e23:	84 c9                	test   cl,cl
c0021e25:	74 3c                	je     c0021e63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021e27:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e2b:	83 ec 0c             	sub    esp,0xc
c0021e2e:	56                   	push   esi
c0021e2f:	e8 1f da fe ff       	call   c000f853 <free>
c0021e34:	83 c4 0c             	add    esp,0xc
c0021e37:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e3e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e43:	50                   	push   eax
c0021e44:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e4b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e56:	52                   	push   edx
c0021e57:	57                   	push   edi
c0021e58:	53                   	push   ebx
c0021e59:	e8 6e fe ff ff       	call   c0021ccc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e5e:	83 c4 20             	add    esp,0x20
c0021e61:	eb 31                	jmp    c0021e94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e63:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e66:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e6d:	d0 e8                	shr    al,1
c0021e6f:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e71:	83 e0 01             	and    eax,0x1
c0021e74:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e7b:	83 ec 0c             	sub    esp,0xc
c0021e7e:	89 13                	mov    DWORD PTR [ebx],edx
c0021e80:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e87:	89 03                	mov    DWORD PTR [ebx],eax
c0021e89:	56                   	push   esi
c0021e8a:	e8 c4 d9 fe ff       	call   c000f853 <free>
c0021e8f:	83 c4 10             	add    esp,0x10
c0021e92:	b0 01                	mov    al,0x1
c0021e94:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021e9a:	5b                   	pop    ebx
c0021e9b:	5e                   	pop    esi
c0021e9c:	5f                   	pop    edi
c0021e9d:	5d                   	pop    ebp
c0021e9e:	c3                   	ret    

c0021e9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021e9f:	55                   	push   ebp
c0021ea0:	57                   	push   edi
c0021ea1:	56                   	push   esi
c0021ea2:	53                   	push   ebx
c0021ea3:	83 ec 20             	sub    esp,0x20
c0021ea6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021eaa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021eae:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021eb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021eba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ec2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021ec7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ecd:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ed3:	57                   	push   edi
c0021ed4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ed8:	50                   	push   eax
c0021ed9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021edd:	50                   	push   eax
c0021ede:	e8 94 fd ff ff       	call   c0021c77 <readRoot(unsigned int*, unsigned int*, char)>
c0021ee3:	5a                   	pop    edx
c0021ee4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021ee8:	e8 a7 e8 fd ff       	call   c0000794 <strlen>
c0021eed:	83 c4 10             	add    esp,0x10
c0021ef0:	83 f8 03             	cmp    eax,0x3
c0021ef3:	77 17                	ja     c0021f0c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ef9:	89 03                	mov    DWORD PTR [ebx],eax
c0021efb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021eff:	89 06                	mov    DWORD PTR [esi],eax
c0021f01:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f08:	b0 01                	mov    al,0x1
c0021f0a:	eb 19                	jmp    c0021f25 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f0c:	50                   	push   eax
c0021f0d:	55                   	push   ebp
c0021f0e:	57                   	push   edi
c0021f0f:	56                   	push   esi
c0021f10:	53                   	push   ebx
c0021f11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f1d:	e8 aa fd ff ff       	call   c0021ccc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f22:	83 c4 20             	add    esp,0x20
c0021f25:	83 c4 1c             	add    esp,0x1c
c0021f28:	5b                   	pop    ebx
c0021f29:	5e                   	pop    esi
c0021f2a:	5f                   	pop    edi
c0021f2b:	5d                   	pop    ebp
c0021f2c:	c3                   	ret    
c0021f2d:	90                   	nop

c0021f2e <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f2e:	57                   	push   edi
c0021f2f:	56                   	push   esi
c0021f30:	53                   	push   ebx
c0021f31:	83 ec 10             	sub    esp,0x10
c0021f34:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f3c:	85 ff                	test   edi,edi
c0021f3e:	0f 84 9d 00 00 00    	je     c0021fe1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f44:	85 f6                	test   esi,esi
c0021f46:	0f 84 95 00 00 00    	je     c0021fe1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f4c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f51:	74 17                	je     c0021f6a <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f53:	83 ec 0c             	sub    esp,0xc
c0021f56:	68 5f c8 02 c0       	push   0xc002c85f
c0021f5b:	e8 66 0f ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0021f60:	83 c4 10             	add    esp,0x10
c0021f63:	b8 03 00 00 00       	mov    eax,0x3
c0021f68:	eb 7c                	jmp    c0021fe6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f6a:	83 ec 0c             	sub    esp,0xc
c0021f6d:	6a 1c                	push   0x1c
c0021f6f:	e8 cf d8 fe ff       	call   c000f843 <malloc>
c0021f74:	89 07                	mov    DWORD PTR [edi],eax
c0021f76:	89 c3                	mov    ebx,eax
c0021f78:	58                   	pop    eax
c0021f79:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f7d:	50                   	push   eax
c0021f7e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f81:	50                   	push   eax
c0021f82:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f86:	50                   	push   eax
c0021f87:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f8b:	50                   	push   eax
c0021f8c:	56                   	push   esi
c0021f8d:	e8 0d ff ff ff       	call   c0021e9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f92:	83 c4 20             	add    esp,0x20
c0021f95:	84 c0                	test   al,al
c0021f97:	74 07                	je     c0021fa0 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021f99:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021f9e:	74 0b                	je     c0021fab <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021fa0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021fa4:	b8 01 00 00 00       	mov    eax,0x1
c0021fa9:	eb 3b                	jmp    c0021fe6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021faf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021fb3:	89 03                	mov    DWORD PTR [ebx],eax
c0021fb5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021fbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fc0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021fc7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fd1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021fd8:	8a 06                	mov    al,BYTE PTR [esi]
c0021fda:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021fdd:	31 c0                	xor    eax,eax
c0021fdf:	eb 05                	jmp    c0021fe6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fe1:	b8 04 00 00 00       	mov    eax,0x4
c0021fe6:	83 c4 10             	add    esp,0x10
c0021fe9:	5b                   	pop    ebx
c0021fea:	5e                   	pop    esi
c0021feb:	5f                   	pop    edi
c0021fec:	c3                   	ret    
c0021fed:	90                   	nop

c0021fee <ISO9660::exists(char const*)>:
c0021fee:	83 ec 28             	sub    esp,0x28
c0021ff1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ff5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021ff9:	52                   	push   edx
c0021ffa:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021ffd:	52                   	push   edx
c0021ffe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022002:	52                   	push   edx
c0022003:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022007:	52                   	push   edx
c0022008:	50                   	push   eax
c0022009:	e8 91 fe ff ff       	call   c0021e9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002200e:	83 c4 3c             	add    esp,0x3c
c0022011:	c3                   	ret    

c0022012 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022012:	56                   	push   esi
c0022013:	53                   	push   ebx
c0022014:	83 ec 14             	sub    esp,0x14
c0022017:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002201b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002201f:	85 db                	test   ebx,ebx
c0022021:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022025:	0f 94 c2             	sete   dl
c0022028:	85 f6                	test   esi,esi
c002202a:	0f 94 c0             	sete   al
c002202d:	08 c2                	or     dl,al
c002202f:	75 68                	jne    c0022099 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022031:	85 c9                	test   ecx,ecx
c0022033:	74 64                	je     c0022099 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022035:	83 ec 0c             	sub    esp,0xc
c0022038:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002203b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002203f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022045:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002204c:	50                   	push   eax
c002204d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022050:	50                   	push   eax
c0022051:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022055:	50                   	push   eax
c0022056:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002205a:	50                   	push   eax
c002205b:	51                   	push   ecx
c002205c:	e8 3e fe ff ff       	call   c0021e9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022061:	83 c4 20             	add    esp,0x20
c0022064:	ba 01 00 00 00       	mov    edx,0x1
c0022069:	84 c0                	test   al,al
c002206b:	74 31                	je     c002209e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002206d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022071:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022078:	89 03                	mov    DWORD PTR [ebx],eax
c002207a:	ba 00 00 00 00       	mov    edx,0x0
c002207f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022083:	85 c0                	test   eax,eax
c0022085:	0f 95 06             	setne  BYTE PTR [esi]
c0022088:	74 14                	je     c002209e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002208a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022090:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022097:	eb 05                	jmp    c002209e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022099:	ba 04 00 00 00       	mov    edx,0x4
c002209e:	83 c4 14             	add    esp,0x14
c00220a1:	89 d0                	mov    eax,edx
c00220a3:	5b                   	pop    ebx
c00220a4:	5e                   	pop    esi
c00220a5:	c3                   	ret    

c00220a6 <ISO9660::openDir(char const*, void**)>:
c00220a6:	57                   	push   edi
c00220a7:	56                   	push   esi
c00220a8:	53                   	push   ebx
c00220a9:	83 ec 10             	sub    esp,0x10
c00220ac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220b4:	85 ff                	test   edi,edi
c00220b6:	0f 84 95 00 00 00    	je     c0022151 <ISO9660::openDir(char const*, void**)+0xab>
c00220bc:	85 f6                	test   esi,esi
c00220be:	0f 84 8d 00 00 00    	je     c0022151 <ISO9660::openDir(char const*, void**)+0xab>
c00220c4:	83 ec 0c             	sub    esp,0xc
c00220c7:	6a 1c                	push   0x1c
c00220c9:	e8 75 d7 fe ff       	call   c000f843 <malloc>
c00220ce:	89 07                	mov    DWORD PTR [edi],eax
c00220d0:	89 c3                	mov    ebx,eax
c00220d2:	59                   	pop    ecx
c00220d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220d7:	50                   	push   eax
c00220d8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220db:	50                   	push   eax
c00220dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e0:	50                   	push   eax
c00220e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220e5:	50                   	push   eax
c00220e6:	56                   	push   esi
c00220e7:	e8 b3 fd ff ff       	call   c0021e9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220ec:	83 c4 20             	add    esp,0x20
c00220ef:	84 c0                	test   al,al
c00220f1:	74 07                	je     c00220fa <ISO9660::openDir(char const*, void**)+0x54>
c00220f3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220f8:	75 21                	jne    c002211b <ISO9660::openDir(char const*, void**)+0x75>
c00220fa:	0f b6 c0             	movzx  eax,al
c00220fd:	52                   	push   edx
c00220fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022102:	50                   	push   eax
c0022103:	68 85 c8 02 c0       	push   0xc002c885
c0022108:	e8 b9 0d ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c002210d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022111:	83 c4 10             	add    esp,0x10
c0022114:	b8 01 00 00 00       	mov    eax,0x1
c0022119:	eb 3b                	jmp    c0022156 <ISO9660::openDir(char const*, void**)+0xb0>
c002211b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002211f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022123:	89 03                	mov    DWORD PTR [ebx],eax
c0022125:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002212c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022130:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022137:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002213e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022141:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022148:	8a 06                	mov    al,BYTE PTR [esi]
c002214a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002214d:	31 c0                	xor    eax,eax
c002214f:	eb 05                	jmp    c0022156 <ISO9660::openDir(char const*, void**)+0xb0>
c0022151:	b8 04 00 00 00       	mov    eax,0x4
c0022156:	83 c4 10             	add    esp,0x10
c0022159:	5b                   	pop    ebx
c002215a:	5e                   	pop    esi
c002215b:	5f                   	pop    edi
c002215c:	c3                   	ret    
c002215d:	90                   	nop

c002215e <ISO9660::ISO9660()>:
c002215e:	83 ec 0c             	sub    esp,0xc
c0022161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022165:	83 ec 0c             	sub    esp,0xc
c0022168:	50                   	push   eax
c0022169:	e8 5c 10 ff ff       	call   c00131ca <Filesystem::Filesystem()>
c002216e:	83 c4 10             	add    esp,0x10
c0022171:	ba a8 c8 02 c0       	mov    edx,0xc002c8a8
c0022176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217a:	89 10                	mov    DWORD PTR [eax],edx
c002217c:	90                   	nop
c002217d:	83 c4 0c             	add    esp,0xc
c0022180:	c3                   	ret    
c0022181:	90                   	nop

c0022182 <SoundChannel::~SoundChannel()>:
c0022182:	83 ec 0c             	sub    esp,0xc
c0022185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022189:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002218c:	83 ec 0c             	sub    esp,0xc
c002218f:	50                   	push   eax
c0022190:	e8 be d6 fe ff       	call   c000f853 <free>
c0022195:	83 c4 10             	add    esp,0x10
c0022198:	90                   	nop
c0022199:	83 c4 0c             	add    esp,0xc
c002219c:	c3                   	ret    
c002219d:	90                   	nop

c002219e <SoundChannel::setSpeed(float)>:
c002219e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00221a6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00221a9:	c3                   	ret    

c00221aa <SoundChannel::getSpeed()>:
c00221aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ae:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00221b1:	c3                   	ret    

c00221b2 <SoundChannel::setVolume(int)>:
c00221b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221b6:	83 f8 64             	cmp    eax,0x64
c00221b9:	7e 05                	jle    c00221c0 <SoundChannel::setVolume(int)+0xe>
c00221bb:	b8 64 00 00 00       	mov    eax,0x64
c00221c0:	85 c0                	test   eax,eax
c00221c2:	79 02                	jns    c00221c6 <SoundChannel::setVolume(int)+0x14>
c00221c4:	31 c0                	xor    eax,eax
c00221c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00221ca:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00221cd:	c3                   	ret    

c00221ce <SoundChannel::getVolume()>:
c00221ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00221d5:	c3                   	ret    

c00221d6 <SoundChannel::pause()>:
c00221d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221da:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00221de:	c3                   	ret    
c00221df:	90                   	nop

c00221e0 <SoundChannel::SoundChannel(int, int, int, int)>:
c00221e0:	83 ec 1c             	sub    esp,0x1c
c00221e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00221e7:	e8 ea ff ff ff       	call   c00221d6 <SoundChannel::pause()>
c00221ec:	83 c4 04             	add    esp,0x4
c00221ef:	6a 50                	push   0x50
c00221f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00221f5:	e8 b8 ff ff ff       	call   c00221b2 <SoundChannel::setVolume(int)>
c00221fa:	83 c4 08             	add    esp,0x8
c00221fd:	a1 20 c9 02 c0       	mov    eax,ds:0xc002c920
c0022202:	50                   	push   eax
c0022203:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022207:	e8 92 ff ff ff       	call   c002219e <SoundChannel::setSpeed(float)>
c002220c:	83 c4 08             	add    esp,0x8
c002220f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022213:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022217:	89 10                	mov    DWORD PTR [eax],edx
c0022219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002221d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022221:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022228:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002222c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002222f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022234:	75 23                	jne    c0022259 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002223a:	8b 10                	mov    edx,DWORD PTR [eax]
c002223c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022240:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022243:	0f af c2             	imul   eax,edx
c0022246:	85 c0                	test   eax,eax
c0022248:	79 03                	jns    c002224d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002224a:	83 c0 03             	add    eax,0x3
c002224d:	c1 f8 02             	sar    eax,0x2
c0022250:	05 a0 0f 00 00       	add    eax,0xfa0
c0022255:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002225d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022268:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002226f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022273:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002227a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002227e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022281:	c1 e0 02             	shl    eax,0x2
c0022284:	83 ec 0c             	sub    esp,0xc
c0022287:	50                   	push   eax
c0022288:	e8 b6 d5 fe ff       	call   c000f843 <malloc>
c002228d:	83 c4 10             	add    esp,0x10
c0022290:	89 c2                	mov    edx,eax
c0022292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022296:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022299:	83 ec 04             	sub    esp,0x4
c002229c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00222a0:	50                   	push   eax
c00222a1:	6a 01                	push   0x1
c00222a3:	6a 04                	push   0x4
c00222a5:	e8 f5 68 fe ff       	call   c0008b9f <src_new>
c00222aa:	83 c4 10             	add    esp,0x10
c00222ad:	89 c2                	mov    edx,eax
c00222af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222b3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00222b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ba:	85 c0                	test   eax,eax
c00222bc:	74 10                	je     c00222ce <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00222be:	83 ec 0c             	sub    esp,0xc
c00222c1:	68 04 c9 02 c0       	push   0xc002c904
c00222c6:	e8 a0 82 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c00222cb:	83 c4 10             	add    esp,0x10
c00222ce:	a0 20 29 03 c0       	mov    al,ds:0xc0032920
c00222d3:	83 f0 01             	xor    eax,0x1
c00222d6:	84 c0                	test   al,al
c00222d8:	74 57                	je     c0022331 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00222da:	a1 24 c9 02 c0       	mov    eax,ds:0xc002c924
c00222df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222eb:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00222f3:	7f 35                	jg     c002232a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00222f5:	83 ec 0c             	sub    esp,0xc
c00222f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222fc:	e8 96 4f 00 00       	call   c0027297 <__floatsisf>
c0022301:	83 c4 10             	add    esp,0x10
c0022304:	8b 15 24 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c924
c002230a:	83 ec 08             	sub    esp,0x8
c002230d:	52                   	push   edx
c002230e:	50                   	push   eax
c002230f:	e8 95 4b 00 00       	call   c0026ea9 <__mulsf3>
c0022314:	83 c4 10             	add    esp,0x10
c0022317:	89 c2                	mov    edx,eax
c0022319:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002231d:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0022324:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022328:	eb c1                	jmp    c00222eb <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002232a:	c6 05 20 29 03 c0 01 	mov    BYTE PTR ds:0xc0032920,0x1
c0022331:	90                   	nop
c0022332:	83 c4 1c             	add    esp,0x1c
c0022335:	c3                   	ret    

c0022336 <SoundChannel::play()>:
c0022336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002233a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002233e:	c3                   	ret    
c002233f:	90                   	nop

c0022340 <SoundChannel::paused()>:
c0022340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022344:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022347:	c3                   	ret    

c0022348 <SoundChannel::getSampleRate()>:
c0022348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234c:	8b 00                	mov    eax,DWORD PTR [eax]
c002234e:	c3                   	ret    
c002234f:	90                   	nop

c0022350 <SoundChannel::getBits()>:
c0022350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022357:	c3                   	ret    

c0022358 <SoundChannel::getBufferUsed()>:
c0022358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002235c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002235f:	c3                   	ret    

c0022360 <SoundChannel::getBufferSize()>:
c0022360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022364:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022367:	c3                   	ret    

c0022368 <SoundChannel::unbuffer(float*, int, int)>:
c0022368:	56                   	push   esi
c0022369:	53                   	push   ebx
c002236a:	83 ec 40             	sub    esp,0x40
c002236d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022371:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022374:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022378:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002237b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002237f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022383:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022387:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002238b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002238f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022393:	e8 ff 4e 00 00       	call   c0027297 <__floatsisf>
c0022398:	5a                   	pop    edx
c0022399:	89 c6                	mov    esi,eax
c002239b:	ff 33                	push   DWORD PTR [ebx]
c002239d:	e8 f5 4e 00 00       	call   c0027297 <__floatsisf>
c00223a2:	59                   	pop    ecx
c00223a3:	5a                   	pop    edx
c00223a4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00223a7:	50                   	push   eax
c00223a8:	e8 fc 4a 00 00       	call   c0026ea9 <__mulsf3>
c00223ad:	59                   	pop    ecx
c00223ae:	5a                   	pop    edx
c00223af:	50                   	push   eax
c00223b0:	56                   	push   esi
c00223b1:	e8 b6 4c 00 00       	call   c002706c <__divsf3>
c00223b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00223b9:	e8 a9 61 00 00       	call   c0028567 <__extendsfdf2>
c00223be:	59                   	pop    ecx
c00223bf:	5e                   	pop    esi
c00223c0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223c4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00223c8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00223d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00223d4:	50                   	push   eax
c00223d5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00223d8:	e8 b7 63 fe ff       	call   c0008794 <src_process>
c00223dd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223e1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00223e4:	83 c4 0c             	add    esp,0xc
c00223e7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00223ea:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00223ed:	29 d0                	sub    eax,edx
c00223ef:	c1 e0 02             	shl    eax,0x2
c00223f2:	50                   	push   eax
c00223f3:	8d 04 91             	lea    eax,[ecx+edx*4]
c00223f6:	50                   	push   eax
c00223f7:	51                   	push   ecx
c00223f8:	e8 7f e2 fd ff       	call   c000067c <memmove>
c00223fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022401:	83 c4 44             	add    esp,0x44
c0022404:	5b                   	pop    ebx
c0022405:	5e                   	pop    esi
c0022406:	c3                   	ret    
c0022407:	90                   	nop

c0022408 <SoundChannel::buffer8(unsigned char*, int)>:
c0022408:	55                   	push   ebp
c0022409:	57                   	push   edi
c002240a:	56                   	push   esi
c002240b:	53                   	push   ebx
c002240c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022410:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022414:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022417:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002241b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002241e:	74 7a                	je     c002249a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022420:	85 ff                	test   edi,edi
c0022422:	7e 76                	jle    c002249a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022424:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022428:	8d 70 01             	lea    esi,[eax+0x1]
c002242b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002242e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022431:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c0022438:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002243b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002243e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022441:	74 5e                	je     c00224a1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022443:	83 ff 01             	cmp    edi,0x1
c0022446:	74 4b                	je     c0022493 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022448:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002244c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002244f:	8d 70 01             	lea    esi,[eax+0x1]
c0022452:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022455:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c002245c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002245f:	b8 02 00 00 00       	mov    eax,0x2
c0022464:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022467:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002246a:	75 23                	jne    c002248f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002246c:	eb 27                	jmp    c0022495 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002246e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022473:	8d 71 01             	lea    esi,[ecx+0x1]
c0022476:	40                   	inc    eax
c0022477:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002247a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002247d:	8b 1c 9d 20 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdae0]
c0022484:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022487:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002248a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002248d:	74 06                	je     c0022495 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002248f:	39 c7                	cmp    edi,eax
c0022491:	75 db                	jne    c002246e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022493:	89 f8                	mov    eax,edi
c0022495:	5b                   	pop    ebx
c0022496:	5e                   	pop    esi
c0022497:	5f                   	pop    edi
c0022498:	5d                   	pop    ebp
c0022499:	c3                   	ret    
c002249a:	5b                   	pop    ebx
c002249b:	31 c0                	xor    eax,eax
c002249d:	5e                   	pop    esi
c002249e:	5f                   	pop    edi
c002249f:	5d                   	pop    ebp
c00224a0:	c3                   	ret    
c00224a1:	b8 01 00 00 00       	mov    eax,0x1
c00224a6:	eb ed                	jmp    c0022495 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00224a8 <SoundDevice::SoundDevice(char const*)>:
c00224a8:	83 ec 1c             	sub    esp,0x1c
c00224ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224af:	83 ec 08             	sub    esp,0x8
c00224b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224b6:	50                   	push   eax
c00224b7:	e8 20 20 ff ff       	call   c00144dc <Device::Device(char const*)>
c00224bc:	83 c4 10             	add    esp,0x10
c00224bf:	ba 30 c9 02 c0       	mov    edx,0xc002c930
c00224c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224c8:	89 10                	mov    DWORD PTR [eax],edx
c00224ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ce:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00224d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224dc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00224e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224ee:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00224f3:	7f 19                	jg     c002250e <SoundDevice::SoundDevice(char const*)+0x66>
c00224f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224fd:	83 c2 54             	add    edx,0x54
c0022500:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022508:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002250c:	eb e0                	jmp    c00224ee <SoundDevice::SoundDevice(char const*)+0x46>
c002250e:	90                   	nop
c002250f:	83 c4 1c             	add    esp,0x1c
c0022512:	c3                   	ret    
c0022513:	90                   	nop

c0022514 <SoundDevice::~SoundDevice()>:
c0022514:	53                   	push   ebx
c0022515:	83 ec 18             	sub    esp,0x18
c0022518:	ba 30 c9 02 c0       	mov    edx,0xc002c930
c002251d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022521:	89 10                	mov    DWORD PTR [eax],edx
c0022523:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002252b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022530:	7f 46                	jg     c0022578 <SoundDevice::~SoundDevice()+0x64>
c0022532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022536:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002253a:	83 c2 54             	add    edx,0x54
c002253d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022541:	85 c0                	test   eax,eax
c0022543:	74 2d                	je     c0022572 <SoundDevice::~SoundDevice()+0x5e>
c0022545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022549:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002254d:	83 c2 54             	add    edx,0x54
c0022550:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022554:	85 db                	test   ebx,ebx
c0022556:	74 1a                	je     c0022572 <SoundDevice::~SoundDevice()+0x5e>
c0022558:	83 ec 0c             	sub    esp,0xc
c002255b:	53                   	push   ebx
c002255c:	e8 21 fc ff ff       	call   c0022182 <SoundChannel::~SoundChannel()>
c0022561:	83 c4 10             	add    esp,0x10
c0022564:	83 ec 08             	sub    esp,0x8
c0022567:	6a 2c                	push   0x2c
c0022569:	53                   	push   ebx
c002256a:	e8 77 08 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c002256f:	83 c4 10             	add    esp,0x10
c0022572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022576:	eb b3                	jmp    c002252b <SoundDevice::~SoundDevice()+0x17>
c0022578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257c:	83 ec 0c             	sub    esp,0xc
c002257f:	50                   	push   eax
c0022580:	e8 39 1c ff ff       	call   c00141be <Device::~Device()>
c0022585:	83 c4 10             	add    esp,0x10
c0022588:	90                   	nop
c0022589:	83 c4 18             	add    esp,0x18
c002258c:	5b                   	pop    ebx
c002258d:	c3                   	ret    

c002258e <SoundDevice::~SoundDevice()>:
c002258e:	83 ec 0c             	sub    esp,0xc
c0022591:	83 ec 0c             	sub    esp,0xc
c0022594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022598:	e8 77 ff ff ff       	call   c0022514 <SoundDevice::~SoundDevice()>
c002259d:	83 c4 10             	add    esp,0x10
c00225a0:	83 ec 08             	sub    esp,0x8
c00225a3:	68 e4 01 00 00       	push   0x1e4
c00225a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225ac:	e8 35 08 ff ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00225b1:	83 c4 10             	add    esp,0x10
c00225b4:	83 c4 0c             	add    esp,0xc
c00225b7:	c3                   	ret    

c00225b8 <SoundDevice::getFreeChannelNum()>:
c00225b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225bc:	31 c0                	xor    eax,eax
c00225be:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00225c6:	74 09                	je     c00225d1 <SoundDevice::getFreeChannelNum()+0x19>
c00225c8:	40                   	inc    eax
c00225c9:	83 f8 20             	cmp    eax,0x20
c00225cc:	75 f0                	jne    c00225be <SoundDevice::getFreeChannelNum()+0x6>
c00225ce:	83 c8 ff             	or     eax,0xffffffff
c00225d1:	c3                   	ret    

c00225d2 <SoundDevice::addChannel(SoundChannel*)>:
c00225d2:	56                   	push   esi
c00225d3:	53                   	push   ebx
c00225d4:	51                   	push   ecx
c00225d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00225d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00225dd:	53                   	push   ebx
c00225de:	e8 d5 ff ff ff       	call   c00225b8 <SoundDevice::getFreeChannelNum()>
c00225e3:	5a                   	pop    edx
c00225e4:	83 f8 ff             	cmp    eax,0xffffffff
c00225e7:	74 51                	je     c002263a <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225e9:	85 f6                	test   esi,esi
c00225eb:	74 4d                	je     c002263a <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225ed:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00225f4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00225fb:	75 30                	jne    c002262d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00225fd:	83 ec 0c             	sub    esp,0xc
c0022600:	56                   	push   esi
c0022601:	e8 42 fd ff ff       	call   c0022348 <SoundChannel::getSampleRate()>
c0022606:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002260c:	89 34 24             	mov    DWORD PTR [esp],esi
c002260f:	e8 3c fd ff ff       	call   c0022350 <SoundChannel::getBits()>
c0022614:	83 c4 0c             	add    esp,0xc
c0022617:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002261d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002261f:	50                   	push   eax
c0022620:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022626:	53                   	push   ebx
c0022627:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002262a:	83 c4 10             	add    esp,0x10
c002262d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022633:	b8 01 00 00 00       	mov    eax,0x1
c0022638:	eb 03                	jmp    c002263d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002263a:	83 c8 ff             	or     eax,0xffffffff
c002263d:	5a                   	pop    edx
c002263e:	5b                   	pop    ebx
c002263f:	5e                   	pop    esi
c0022640:	c3                   	ret    
c0022641:	90                   	nop

c0022642 <SoundDevice::removeChannel(int)>:
c0022642:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002264a:	83 fa 1f             	cmp    edx,0x1f
c002264d:	77 23                	ja     c0022672 <SoundDevice::removeChannel(int)+0x30>
c002264f:	8d 14 90             	lea    edx,[eax+edx*4]
c0022652:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022659:	74 17                	je     c0022672 <SoundDevice::removeChannel(int)+0x30>
c002265b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022665:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002266b:	75 05                	jne    c0022672 <SoundDevice::removeChannel(int)+0x30>
c002266d:	8b 00                	mov    eax,DWORD PTR [eax]
c002266f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022672:	c3                   	ret    
c0022673:	90                   	nop

c0022674 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022674:	57                   	push   edi
c0022675:	56                   	push   esi
c0022676:	53                   	push   ebx
c0022677:	31 db                	xor    ebx,ebx
c0022679:	83 ec 10             	sub    esp,0x10
c002267c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022680:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022684:	0f 8d cb 00 00 00    	jge    c0022755 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002268a:	83 ec 0c             	sub    esp,0xc
c002268d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022691:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022694:	e8 ce 5e 00 00       	call   c0028567 <__extendsfdf2>
c0022699:	83 c4 10             	add    esp,0x10
c002269c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226a4:	68 00 00 f0 3f       	push   0x3ff00000
c00226a9:	6a 00                	push   0x0
c00226ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226b3:	e8 3b 4e 00 00       	call   c00274f3 <__adddf3>
c00226b8:	83 c4 10             	add    esp,0x10
c00226bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226c3:	68 00 00 e0 3f       	push   0x3fe00000
c00226c8:	6a 00                	push   0x0
c00226ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226d2:	e8 99 54 00 00       	call   c0027b70 <__muldf3>
c00226d7:	83 c4 10             	add    esp,0x10
c00226da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226e2:	68 00 00 60 40       	push   0x40600000
c00226e7:	6a 00                	push   0x0
c00226e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226f1:	e8 7a 54 00 00       	call   c0027b70 <__muldf3>
c00226f6:	59                   	pop    ecx
c00226f7:	5f                   	pop    edi
c00226f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00226fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022700:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022704:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022708:	e8 36 5d 00 00       	call   c0028443 <__truncdfsf2>
c002270d:	5a                   	pop    edx
c002270e:	89 c7                	mov    edi,eax
c0022710:	59                   	pop    ecx
c0022711:	68 00 00 fe 42       	push   0x42fe0000
c0022716:	50                   	push   eax
c0022717:	e8 d1 4d 00 00       	call   c00274ed <__gesf2>
c002271c:	83 c4 10             	add    esp,0x10
c002271f:	85 c0                	test   eax,eax
c0022721:	78 06                	js     c0022729 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022723:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022727:	eb 26                	jmp    c002274f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022729:	50                   	push   eax
c002272a:	50                   	push   eax
c002272b:	6a 00                	push   0x0
c002272d:	57                   	push   edi
c002272e:	e8 be 4d 00 00       	call   c00274f1 <__lesf2>
c0022733:	83 c4 10             	add    esp,0x10
c0022736:	85 c0                	test   eax,eax
c0022738:	7f 06                	jg     c0022740 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002273a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002273e:	eb 0f                	jmp    c002274f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022740:	83 ec 0c             	sub    esp,0xc
c0022743:	57                   	push   edi
c0022744:	e8 b3 5e 00 00       	call   c00285fc <lrintf>
c0022749:	83 c4 10             	add    esp,0x10
c002274c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002274f:	43                   	inc    ebx
c0022750:	e9 2b ff ff ff       	jmp    c0022680 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022755:	83 c4 10             	add    esp,0x10
c0022758:	5b                   	pop    ebx
c0022759:	5e                   	pop    esi
c002275a:	5f                   	pop    edi
c002275b:	c3                   	ret    

c002275c <SoundDevice::getAudio(int, float*, float*)>:
c002275c:	55                   	push   ebp
c002275d:	57                   	push   edi
c002275e:	56                   	push   esi
c002275f:	53                   	push   ebx
c0022760:	31 db                	xor    ebx,ebx
c0022762:	83 ec 20             	sub    esp,0x20
c0022765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022769:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002276d:	c1 e0 02             	shl    eax,0x2
c0022770:	50                   	push   eax
c0022771:	6a 00                	push   0x0
c0022773:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022777:	e8 fc df fd ff       	call   c0000778 <memset>
c002277c:	83 c4 10             	add    esp,0x10
c002277f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022783:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002278a:	85 c0                	test   eax,eax
c002278c:	0f 84 d7 00 00 00    	je     c0022869 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022792:	83 ec 0c             	sub    esp,0xc
c0022795:	50                   	push   eax
c0022796:	e8 a5 fb ff ff       	call   c0022340 <SoundChannel::paused()>
c002279b:	83 c4 10             	add    esp,0x10
c002279e:	84 c0                	test   al,al
c00227a0:	0f 85 c3 00 00 00    	jne    c0022869 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227a6:	83 ec 0c             	sub    esp,0xc
c00227a9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227b0:	e8 19 fa ff ff       	call   c00221ce <SoundChannel::getVolume()>
c00227b5:	83 c4 10             	add    esp,0x10
c00227b8:	85 c0                	test   eax,eax
c00227ba:	0f 84 a9 00 00 00    	je     c0022869 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00227c0:	83 ec 0c             	sub    esp,0xc
c00227c3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227ca:	e8 ff f9 ff ff       	call   c00221ce <SoundChannel::getVolume()>
c00227cf:	83 ec 0c             	sub    esp,0xc
c00227d2:	50                   	push   eax
c00227d3:	e8 bf 4a 00 00       	call   c0027297 <__floatsisf>
c00227d8:	59                   	pop    ecx
c00227d9:	5d                   	pop    ebp
c00227da:	31 ed                	xor    ebp,ebp
c00227dc:	68 00 00 c8 42       	push   0x42c80000
c00227e1:	50                   	push   eax
c00227e2:	e8 85 48 00 00       	call   c002706c <__divsf3>
c00227e7:	83 c4 10             	add    esp,0x10
c00227ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00227ee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00227f2:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00227f8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00227fc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022803:	e8 60 fb ff ff       	call   c0022368 <SoundChannel::unbuffer(float*, int, int)>
c0022808:	83 c4 20             	add    esp,0x20
c002280b:	89 c1                	mov    ecx,eax
c002280d:	39 cd                	cmp    ebp,ecx
c002280f:	7d 52                	jge    c0022863 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022811:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022815:	50                   	push   eax
c0022816:	50                   	push   eax
c0022817:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002281b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002281e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022822:	e8 82 46 00 00       	call   c0026ea9 <__mulsf3>
c0022827:	5a                   	pop    edx
c0022828:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002282c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022832:	e8 60 4a 00 00       	call   c0027297 <__floatsisf>
c0022837:	59                   	pop    ecx
c0022838:	5a                   	pop    edx
c0022839:	50                   	push   eax
c002283a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002283e:	e8 29 48 00 00       	call   c002706c <__divsf3>
c0022843:	59                   	pop    ecx
c0022844:	5a                   	pop    edx
c0022845:	50                   	push   eax
c0022846:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002284a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002284d:	e8 34 43 00 00       	call   c0026b86 <__addsf3>
c0022852:	83 c4 10             	add    esp,0x10
c0022855:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022859:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002285d:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022860:	45                   	inc    ebp
c0022861:	eb aa                	jmp    c002280d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022863:	39 cf                	cmp    edi,ecx
c0022865:	7e 02                	jle    c0022869 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022867:	89 cf                	mov    edi,ecx
c0022869:	43                   	inc    ebx
c002286a:	83 fb 20             	cmp    ebx,0x20
c002286d:	0f 85 10 ff ff ff    	jne    c0022783 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022873:	83 c4 1c             	add    esp,0x1c
c0022876:	89 f8                	mov    eax,edi
c0022878:	5b                   	pop    ebx
c0022879:	5e                   	pop    esi
c002287a:	5f                   	pop    edi
c002287b:	5d                   	pop    ebp
c002287c:	c3                   	ret    
c002287d:	90                   	nop

c002287e <PCI::open(int, int, void*)>:
c002287e:	83 ec 18             	sub    esp,0x18
c0022881:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022885:	8b 10                	mov    edx,DWORD PTR [eax]
c0022887:	50                   	push   eax
c0022888:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002288b:	31 c0                	xor    eax,eax
c002288d:	83 c4 1c             	add    esp,0x1c
c0022890:	c3                   	ret    
c0022891:	90                   	nop

c0022892 <PCI::close(int, int, void*)>:
c0022892:	31 c0                	xor    eax,eax
c0022894:	c3                   	ret    
c0022895:	90                   	nop

c0022896 <PCI::PCI()>:
c0022896:	83 ec 0c             	sub    esp,0xc
c0022899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289d:	83 ec 08             	sub    esp,0x8
c00228a0:	68 60 c9 02 c0       	push   0xc002c960
c00228a5:	50                   	push   eax
c00228a6:	e8 b5 12 ff ff       	call   c0013b60 <Bus::Bus(char const*)>
c00228ab:	83 c4 10             	add    esp,0x10
c00228ae:	ba cc c9 02 c0       	mov    edx,0xc002c9cc
c00228b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b7:	89 10                	mov    DWORD PTR [eax],edx
c00228b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228c3:	0f b6 d0             	movzx  edx,al
c00228c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ca:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00228d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228db:	0f b6 d0             	movzx  edx,al
c00228de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e2:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00228e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228f1:	8d 50 01             	lea    edx,[eax+0x1]
c00228f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228f8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00228fe:	0f b6 d0             	movzx  edx,al
c0022901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022905:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022909:	83 c9 c0             	or     ecx,0xffffffc0
c002290c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022910:	90                   	nop
c0022911:	83 c4 0c             	add    esp,0xc
c0022914:	c3                   	ret    
c0022915:	90                   	nop

c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022916:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002291a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002291f:	89 ca                	mov    edx,ecx
c0022921:	c1 e0 10             	shl    eax,0x10
c0022924:	81 e2 fc 00 00 00    	and    edx,0xfc
c002292a:	09 d0                	or     eax,edx
c002292c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022931:	c1 e2 08             	shl    edx,0x8
c0022934:	09 d0                	or     eax,edx
c0022936:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002293b:	c1 e2 0b             	shl    edx,0xb
c002293e:	09 d0                	or     eax,edx
c0022940:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022945:	0d 00 00 00 80       	or     eax,0x80000000
c002294a:	ef                   	out    dx,eax
c002294b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022950:	ed                   	in     eax,dx
c0022951:	83 e1 02             	and    ecx,0x2
c0022954:	0f b6 c9             	movzx  ecx,cl
c0022957:	c1 e1 03             	shl    ecx,0x3
c002295a:	d3 e8                	shr    eax,cl
c002295c:	c3                   	ret    
c002295d:	90                   	nop

c002295e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002295e:	6a 00                	push   0x0
c0022960:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022965:	50                   	push   eax
c0022966:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002296b:	50                   	push   eax
c002296c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022971:	50                   	push   eax
c0022972:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022976:	e8 9b ff ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002297b:	83 c4 14             	add    esp,0x14
c002297e:	c3                   	ret    
c002297f:	90                   	nop

c0022980 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022980:	6a 0e                	push   0xe
c0022982:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022987:	50                   	push   eax
c0022988:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002298d:	50                   	push   eax
c002298e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022993:	50                   	push   eax
c0022994:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022998:	e8 79 ff ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002299d:	83 c4 14             	add    esp,0x14
c00229a0:	0f b6 c0             	movzx  eax,al
c00229a3:	c3                   	ret    

c00229a4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00229a4:	55                   	push   ebp
c00229a5:	57                   	push   edi
c00229a6:	56                   	push   esi
c00229a7:	53                   	push   ebx
c00229a8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00229ad:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00229b2:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00229b7:	6a 0a                	push   0xa
c00229b9:	56                   	push   esi
c00229ba:	55                   	push   ebp
c00229bb:	57                   	push   edi
c00229bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229c0:	e8 51 ff ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229c5:	6a 0a                	push   0xa
c00229c7:	89 c3                	mov    ebx,eax
c00229c9:	56                   	push   esi
c00229ca:	0f b6 db             	movzx  ebx,bl
c00229cd:	55                   	push   ebp
c00229ce:	57                   	push   edi
c00229cf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00229d3:	e8 3e ff ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229d8:	83 c4 28             	add    esp,0x28
c00229db:	25 00 ff 00 00       	and    eax,0xff00
c00229e0:	09 d8                	or     eax,ebx
c00229e2:	5b                   	pop    ebx
c00229e3:	5e                   	pop    esi
c00229e4:	5f                   	pop    edi
c00229e5:	5d                   	pop    ebp
c00229e6:	c3                   	ret    
c00229e7:	90                   	nop

c00229e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00229e8:	6a 08                	push   0x8
c00229ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ef:	50                   	push   eax
c00229f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f5:	50                   	push   eax
c00229f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229fb:	50                   	push   eax
c00229fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a00:	e8 11 ff ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a05:	83 c4 14             	add    esp,0x14
c0022a08:	0f b6 c4             	movzx  eax,ah
c0022a0b:	c3                   	ret    

c0022a0c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a0c:	6a 08                	push   0x8
c0022a0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a13:	50                   	push   eax
c0022a14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a19:	50                   	push   eax
c0022a1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1f:	50                   	push   eax
c0022a20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a24:	e8 ed fe ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a29:	83 c4 14             	add    esp,0x14
c0022a2c:	c3                   	ret    
c0022a2d:	90                   	nop

c0022a2e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a2e:	6a 3c                	push   0x3c
c0022a30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a35:	50                   	push   eax
c0022a36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3b:	50                   	push   eax
c0022a3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a41:	50                   	push   eax
c0022a42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a46:	e8 cb fe ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a4b:	83 c4 14             	add    esp,0x14
c0022a4e:	c3                   	ret    
c0022a4f:	90                   	nop

c0022a50 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a50:	6a 18                	push   0x18
c0022a52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a57:	50                   	push   eax
c0022a58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a5d:	50                   	push   eax
c0022a5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a63:	50                   	push   eax
c0022a64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a68:	e8 a9 fe ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a6d:	83 c4 14             	add    esp,0x14
c0022a70:	0f b6 c4             	movzx  eax,ah
c0022a73:	c3                   	ret    

c0022a74 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a74:	55                   	push   ebp
c0022a75:	57                   	push   edi
c0022a76:	56                   	push   esi
c0022a77:	53                   	push   ebx
c0022a78:	50                   	push   eax
c0022a79:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022a7d:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022a82:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022a87:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022a8c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022a93:	8d 43 12             	lea    eax,[ebx+0x12]
c0022a96:	83 c3 10             	add    ebx,0x10
c0022a99:	0f b6 c0             	movzx  eax,al
c0022a9c:	0f b6 db             	movzx  ebx,bl
c0022a9f:	50                   	push   eax
c0022aa0:	51                   	push   ecx
c0022aa1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022aa5:	57                   	push   edi
c0022aa6:	55                   	push   ebp
c0022aa7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022aab:	e8 66 fe ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ab0:	53                   	push   ebx
c0022ab1:	89 c6                	mov    esi,eax
c0022ab3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022ab7:	c1 e6 10             	shl    esi,0x10
c0022aba:	51                   	push   ecx
c0022abb:	57                   	push   edi
c0022abc:	55                   	push   ebp
c0022abd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ac1:	e8 50 fe ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac6:	83 c4 2c             	add    esp,0x2c
c0022ac9:	0f b7 c0             	movzx  eax,ax
c0022acc:	5b                   	pop    ebx
c0022acd:	09 f0                	or     eax,esi
c0022acf:	5e                   	pop    esi
c0022ad0:	5f                   	pop    edi
c0022ad1:	5d                   	pop    ebp
c0022ad2:	c3                   	ret    
c0022ad3:	90                   	nop

c0022ad4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022ad4:	53                   	push   ebx
c0022ad5:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ada:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022adf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ae3:	c1 e1 10             	shl    ecx,0x10
c0022ae6:	25 fc 00 00 00       	and    eax,0xfc
c0022aeb:	09 c1                	or     ecx,eax
c0022aed:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af2:	c1 e0 08             	shl    eax,0x8
c0022af5:	09 c1                	or     ecx,eax
c0022af7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022afc:	c1 e0 0b             	shl    eax,0xb
c0022aff:	09 c1                	or     ecx,eax
c0022b01:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b07:	89 c8                	mov    eax,ecx
c0022b09:	ef                   	out    dx,eax
c0022b0a:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b0f:	ed                   	in     eax,dx
c0022b10:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b15:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b1a:	74 0a                	je     c0022b26 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022b1c:	0f b7 d8             	movzx  ebx,ax
c0022b1f:	89 d0                	mov    eax,edx
c0022b21:	c1 e0 10             	shl    eax,0x10
c0022b24:	eb 05                	jmp    c0022b2b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022b26:	66 31 c0             	xor    ax,ax
c0022b29:	89 d3                	mov    ebx,edx
c0022b2b:	09 c3                	or     ebx,eax
c0022b2d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b32:	89 c8                	mov    eax,ecx
c0022b34:	ef                   	out    dx,eax
c0022b35:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b3a:	89 d8                	mov    eax,ebx
c0022b3c:	ef                   	out    dx,eax
c0022b3d:	5b                   	pop    ebx
c0022b3e:	c3                   	ret    
c0022b3f:	90                   	nop

c0022b40 <PCI::checkBus(unsigned char)>:
c0022b40:	56                   	push   esi
c0022b41:	53                   	push   ebx
c0022b42:	31 db                	xor    ebx,ebx
c0022b44:	51                   	push   ecx
c0022b45:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b4a:	52                   	push   edx
c0022b4b:	53                   	push   ebx
c0022b4c:	43                   	inc    ebx
c0022b4d:	56                   	push   esi
c0022b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b52:	e8 2b 03 00 00       	call   c0022e82 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b57:	83 c4 10             	add    esp,0x10
c0022b5a:	83 fb 20             	cmp    ebx,0x20
c0022b5d:	75 eb                	jne    c0022b4a <PCI::checkBus(unsigned char)+0xa>
c0022b5f:	58                   	pop    eax
c0022b60:	5b                   	pop    ebx
c0022b61:	5e                   	pop    esi
c0022b62:	c3                   	ret    
c0022b63:	90                   	nop

c0022b64 <PCI::foundDevice(PCIDeviceInfo)>:
c0022b64:	55                   	push   ebp
c0022b65:	57                   	push   edi
c0022b66:	56                   	push   esi
c0022b67:	53                   	push   ebx
c0022b68:	83 ec 1c             	sub    esp,0x1c
c0022b6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b6f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b75:	0f 84 52 01 00 00    	je     c0022ccd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b7b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b7f:	66 81 f9 06 04       	cmp    cx,0x406
c0022b84:	75 2c                	jne    c0022bb2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b86:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b8b:	50                   	push   eax
c0022b8c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b91:	50                   	push   eax
c0022b92:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b97:	50                   	push   eax
c0022b98:	56                   	push   esi
c0022b99:	e8 b2 fe ff ff       	call   c0022a50 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b9e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ba2:	0f b6 c0             	movzx  eax,al
c0022ba5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022ba9:	83 c4 2c             	add    esp,0x2c
c0022bac:	5b                   	pop    ebx
c0022bad:	5e                   	pop    esi
c0022bae:	5f                   	pop    edi
c0022baf:	5d                   	pop    ebp
c0022bb0:	eb 8e                	jmp    c0022b40 <PCI::checkBus(unsigned char)>
c0022bb2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bb6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022bc0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022bc4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022bc8:	88 d3                	mov    bl,dl
c0022bca:	85 c0                	test   eax,eax
c0022bcc:	74 33                	je     c0022c01 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022bce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022bd1:	85 d2                	test   edx,edx
c0022bd3:	74 28                	je     c0022bfd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bd5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022bdb:	31 ef                	xor    edi,ebp
c0022bdd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022be3:	75 18                	jne    c0022bfd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022be5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022be9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022bef:	75 0c                	jne    c0022bfd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bf1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022bf7:	0f 84 d0 00 00 00    	je     c0022ccd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bff:	eb c9                	jmp    c0022bca <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c01:	66 81 f9 01 06       	cmp    cx,0x601
c0022c06:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c0a:	75 19                	jne    c0022c25 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c0c:	83 ec 0c             	sub    esp,0xc
c0022c0f:	68 64 01 00 00       	push   0x164
c0022c14:	e8 2a cc fe ff       	call   c000f843 <malloc>
c0022c19:	89 c5                	mov    ebp,eax
c0022c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c1e:	e8 95 0f 00 00       	call   c0023bb8 <SATABus::SATABus()>
c0022c23:	eb 1e                	jmp    c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c25:	66 81 f9 01 01       	cmp    cx,0x101
c0022c2a:	75 60                	jne    c0022c8c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c2c:	83 ec 0c             	sub    esp,0xc
c0022c2f:	68 70 02 00 00       	push   0x270
c0022c34:	e8 0a cc fe ff       	call   c000f843 <malloc>
c0022c39:	89 c5                	mov    ebp,eax
c0022c3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c3e:	e8 03 03 00 00       	call   c0022f46 <IDE::IDE()>
c0022c43:	58                   	pop    eax
c0022c44:	5a                   	pop    edx
c0022c45:	55                   	push   ebp
c0022c46:	56                   	push   esi
c0022c47:	e8 a0 16 ff ff       	call   c00142ec <Device::addChild(Device*)>
c0022c4c:	83 ec 1c             	sub    esp,0x1c
c0022c4f:	b9 09 00 00 00       	mov    ecx,0x9
c0022c54:	fc                   	cld    
c0022c55:	89 e7                	mov    edi,esp
c0022c57:	89 de                	mov    esi,ebx
c0022c59:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c5b:	55                   	push   ebp
c0022c5c:	e8 95 15 ff ff       	call   c00141f6 <Device::preOpenPCI(PCIDeviceInfo)>
c0022c61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c64:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c68:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c70:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c78:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c83:	83 c4 4c             	add    esp,0x4c
c0022c86:	5b                   	pop    ebx
c0022c87:	5e                   	pop    esi
c0022c88:	5f                   	pop    edi
c0022c89:	5d                   	pop    ebp
c0022c8a:	ff e0                	jmp    eax
c0022c8c:	83 ec 0c             	sub    esp,0xc
c0022c8f:	68 58 01 00 00       	push   0x158
c0022c94:	e8 aa cb fe ff       	call   c000f843 <malloc>
c0022c99:	89 c5                	mov    ebp,eax
c0022c9b:	58                   	pop    eax
c0022c9c:	5a                   	pop    edx
c0022c9d:	68 68 c9 02 c0       	push   0xc002c968
c0022ca2:	55                   	push   ebp
c0022ca3:	e8 3a 19 ff ff       	call   c00145e2 <DriverlessDevice::DriverlessDevice(char const*)>
c0022ca8:	59                   	pop    ecx
c0022ca9:	5f                   	pop    edi
c0022caa:	55                   	push   ebp
c0022cab:	56                   	push   esi
c0022cac:	e8 3b 16 ff ff       	call   c00142ec <Device::addChild(Device*)>
c0022cb1:	b9 09 00 00 00       	mov    ecx,0x9
c0022cb6:	fc                   	cld    
c0022cb7:	89 df                	mov    edi,ebx
c0022cb9:	89 de                	mov    esi,ebx
c0022cbb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cbd:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022cc1:	83 c4 2c             	add    esp,0x2c
c0022cc4:	5b                   	pop    ebx
c0022cc5:	5e                   	pop    esi
c0022cc6:	5f                   	pop    edi
c0022cc7:	5d                   	pop    ebp
c0022cc8:	e9 29 15 ff ff       	jmp    c00141f6 <Device::preOpenPCI(PCIDeviceInfo)>
c0022ccd:	83 c4 1c             	add    esp,0x1c
c0022cd0:	5b                   	pop    ebx
c0022cd1:	5e                   	pop    esi
c0022cd2:	5f                   	pop    edi
c0022cd3:	5d                   	pop    ebp
c0022cd4:	c3                   	ret    
c0022cd5:	90                   	nop

c0022cd6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022cd6:	55                   	push   ebp
c0022cd7:	57                   	push   edi
c0022cd8:	56                   	push   esi
c0022cd9:	53                   	push   ebx
c0022cda:	83 ec 5c             	sub    esp,0x5c
c0022cdd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022ce1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ce5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022ce9:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022cee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022cf2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022cf6:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022cfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022cff:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d04:	6a 0c                	push   0xc
c0022d06:	55                   	push   ebp
c0022d07:	53                   	push   ebx
c0022d08:	57                   	push   edi
c0022d09:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d10:	e8 01 fc ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d15:	55                   	push   ebp
c0022d16:	53                   	push   ebx
c0022d17:	57                   	push   edi
c0022d18:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d1f:	e8 80 fc ff ff       	call   c00229a4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d24:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022d29:	83 c4 24             	add    esp,0x24
c0022d2c:	55                   	push   ebp
c0022d2d:	53                   	push   ebx
c0022d2e:	57                   	push   edi
c0022d2f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d33:	e8 f6 fc ff ff       	call   c0022a2e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d38:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d3c:	6a 3c                	push   0x3c
c0022d3e:	55                   	push   ebp
c0022d3f:	53                   	push   ebx
c0022d40:	57                   	push   edi
c0022d41:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d48:	e8 c9 fb ff ff       	call   c0022916 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d4d:	0f b6 c4             	movzx  eax,ah
c0022d50:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d54:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d58:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022d5c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0022d61:	83 c4 24             	add    esp,0x24
c0022d64:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d6a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d71:	74 6c                	je     c0022ddf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d73:	31 f6                	xor    esi,esi
c0022d75:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022d7b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d81:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022d87:	7e 56                	jle    c0022ddf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d89:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022d8c:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d93:	39 cb                	cmp    ebx,ecx
c0022d95:	75 45                	jne    c0022ddc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022d97:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d9e:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022da2:	75 38                	jne    c0022ddc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022da4:	83 ec 0c             	sub    esp,0xc
c0022da7:	68 82 c9 02 c0       	push   0xc002c982
c0022dac:	e8 15 01 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0022db1:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0022db7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dbd:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022dc5:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022dc9:	52                   	push   edx
c0022dca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022dce:	53                   	push   ebx
c0022dcf:	68 a7 c9 02 c0       	push   0xc002c9a7
c0022dd4:	e8 ed 00 ff ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0022dd9:	83 c4 20             	add    esp,0x20
c0022ddc:	46                   	inc    esi
c0022ddd:	eb 96                	jmp    c0022d75 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ddf:	31 d2                	xor    edx,edx
c0022de1:	83 ec 0c             	sub    esp,0xc
c0022de4:	55                   	push   ebp
c0022de5:	53                   	push   ebx
c0022de6:	57                   	push   edi
c0022de7:	52                   	push   edx
c0022de8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022dec:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022df3:	e8 7c fc ff ff       	call   c0022a74 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022df8:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022dfc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e00:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e04:	42                   	inc    edx
c0022e05:	83 c4 20             	add    esp,0x20
c0022e08:	83 fa 06             	cmp    edx,0x6
c0022e0b:	75 d4                	jne    c0022de1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e0d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e11:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e15:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e19:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022e1d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022e21:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022e25:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022e2a:	86 e0                	xchg   al,ah
c0022e2c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e31:	55                   	push   ebp
c0022e32:	53                   	push   ebx
c0022e33:	57                   	push   edi
c0022e34:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e38:	e8 ab fb ff ff       	call   c00229e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e3d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e41:	55                   	push   ebp
c0022e42:	53                   	push   ebx
c0022e43:	57                   	push   edi
c0022e44:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e4b:	e8 0e fb ff ff       	call   c002295e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e50:	83 ec 0c             	sub    esp,0xc
c0022e53:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e58:	b9 09 00 00 00       	mov    ecx,0x9
c0022e5d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022e61:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022e65:	fc                   	cld    
c0022e66:	89 e7                	mov    edi,esp
c0022e68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e6a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022e71:	e8 ee fc ff ff       	call   c0022b64 <PCI::foundDevice(PCIDeviceInfo)>
c0022e76:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e7c:	5b                   	pop    ebx
c0022e7d:	5e                   	pop    esi
c0022e7e:	5f                   	pop    edi
c0022e7f:	5d                   	pop    ebp
c0022e80:	c3                   	ret    
c0022e81:	90                   	nop

c0022e82 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e82:	55                   	push   ebp
c0022e83:	57                   	push   edi
c0022e84:	56                   	push   esi
c0022e85:	53                   	push   ebx
c0022e86:	83 ec 0c             	sub    esp,0xc
c0022e89:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e8d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e92:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e97:	6a 00                	push   0x0
c0022e99:	56                   	push   esi
c0022e9a:	57                   	push   edi
c0022e9b:	55                   	push   ebp
c0022e9c:	e8 bd fa ff ff       	call   c002295e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ea1:	6a 00                	push   0x0
c0022ea3:	56                   	push   esi
c0022ea4:	57                   	push   edi
c0022ea5:	55                   	push   ebp
c0022ea6:	e8 2b fe ff ff       	call   c0022cd6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022eab:	83 c4 20             	add    esp,0x20
c0022eae:	6a 00                	push   0x0
c0022eb0:	56                   	push   esi
c0022eb1:	57                   	push   edi
c0022eb2:	55                   	push   ebp
c0022eb3:	e8 c8 fa ff ff       	call   c0022980 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022eb8:	83 c4 10             	add    esp,0x10
c0022ebb:	84 c0                	test   al,al
c0022ebd:	79 27                	jns    c0022ee6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022ebf:	bb 01 00 00 00       	mov    ebx,0x1
c0022ec4:	53                   	push   ebx
c0022ec5:	56                   	push   esi
c0022ec6:	57                   	push   edi
c0022ec7:	55                   	push   ebp
c0022ec8:	e8 91 fa ff ff       	call   c002295e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ecd:	83 c4 10             	add    esp,0x10
c0022ed0:	66 40                	inc    ax
c0022ed2:	74 0c                	je     c0022ee0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022ed4:	53                   	push   ebx
c0022ed5:	56                   	push   esi
c0022ed6:	57                   	push   edi
c0022ed7:	55                   	push   ebp
c0022ed8:	e8 f9 fd ff ff       	call   c0022cd6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022edd:	83 c4 10             	add    esp,0x10
c0022ee0:	43                   	inc    ebx
c0022ee1:	83 fb 08             	cmp    ebx,0x8
c0022ee4:	75 de                	jne    c0022ec4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022ee6:	83 c4 0c             	add    esp,0xc
c0022ee9:	5b                   	pop    ebx
c0022eea:	5e                   	pop    esi
c0022eeb:	5f                   	pop    edi
c0022eec:	5d                   	pop    ebp
c0022eed:	c3                   	ret    

c0022eee <PCI::detect()>:
c0022eee:	56                   	push   esi
c0022eef:	53                   	push   ebx
c0022ef0:	53                   	push   ebx
c0022ef1:	31 db                	xor    ebx,ebx
c0022ef3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ef7:	6a 00                	push   0x0
c0022ef9:	6a 00                	push   0x0
c0022efb:	6a 00                	push   0x0
c0022efd:	56                   	push   esi
c0022efe:	e8 7d fa ff ff       	call   c0022980 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f03:	83 c4 10             	add    esp,0x10
c0022f06:	a8 80                	test   al,0x80
c0022f08:	75 21                	jne    c0022f2b <PCI::detect()+0x3d>
c0022f0a:	51                   	push   ecx
c0022f0b:	51                   	push   ecx
c0022f0c:	6a 00                	push   0x0
c0022f0e:	56                   	push   esi
c0022f0f:	e8 2c fc ff ff       	call   c0022b40 <PCI::checkBus(unsigned char)>
c0022f14:	83 c4 10             	add    esp,0x10
c0022f17:	eb 24                	jmp    c0022f3d <PCI::detect()+0x4f>
c0022f19:	52                   	push   edx
c0022f1a:	52                   	push   edx
c0022f1b:	53                   	push   ebx
c0022f1c:	43                   	inc    ebx
c0022f1d:	56                   	push   esi
c0022f1e:	e8 1d fc ff ff       	call   c0022b40 <PCI::checkBus(unsigned char)>
c0022f23:	83 c4 10             	add    esp,0x10
c0022f26:	83 fb 08             	cmp    ebx,0x8
c0022f29:	74 12                	je     c0022f3d <PCI::detect()+0x4f>
c0022f2b:	53                   	push   ebx
c0022f2c:	6a 00                	push   0x0
c0022f2e:	6a 00                	push   0x0
c0022f30:	56                   	push   esi
c0022f31:	e8 28 fa ff ff       	call   c002295e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f36:	83 c4 10             	add    esp,0x10
c0022f39:	66 40                	inc    ax
c0022f3b:	74 dc                	je     c0022f19 <PCI::detect()+0x2b>
c0022f3d:	58                   	pop    eax
c0022f3e:	5b                   	pop    ebx
c0022f3f:	5e                   	pop    esi
c0022f40:	c3                   	ret    
c0022f41:	90                   	nop

c0022f42 <IDE::close(int, int, void*)>:
c0022f42:	83 c8 ff             	or     eax,0xffffffff
c0022f45:	c3                   	ret    

c0022f46 <IDE::IDE()>:
c0022f46:	83 ec 0c             	sub    esp,0xc
c0022f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f4d:	83 ec 08             	sub    esp,0x8
c0022f50:	68 f0 c9 02 c0       	push   0xc002c9f0
c0022f55:	50                   	push   eax
c0022f56:	e8 1d 17 ff ff       	call   c0014678 <HardDiskController::HardDiskController(char const*)>
c0022f5b:	83 c4 10             	add    esp,0x10
c0022f5e:	ba 30 cc 02 c0       	mov    edx,0xc002cc30
c0022f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f67:	89 10                	mov    DWORD PTR [eax],edx
c0022f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f74:	90                   	nop
c0022f75:	83 c4 0c             	add    esp,0xc
c0022f78:	c3                   	ret    
c0022f79:	90                   	nop

c0022f7a <IDE::prepareInterrupt(unsigned char)>:
c0022f7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f7f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f83:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f8b:	c3                   	ret    

c0022f8c <selectDrive(unsigned char, unsigned char)>:
c0022f8c:	c3                   	ret    
c0022f8d:	90                   	nop

c0022f8e <IDE::getBase(unsigned char)>:
c0022f8e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f97:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f9f:	c3                   	ret    

c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fa0:	55                   	push   ebp
c0022fa1:	57                   	push   edi
c0022fa2:	56                   	push   esi
c0022fa3:	53                   	push   ebx
c0022fa4:	83 ec 1c             	sub    esp,0x1c
c0022fa7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022faf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022fb2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fb6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022fba:	80 f9 03             	cmp    cl,0x3
c0022fbd:	77 51                	ja     c0023010 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022fc3:	0f b6 f2             	movzx  esi,dl
c0022fc6:	0f b6 db             	movzx  ebx,bl
c0022fc9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fcc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022fd0:	83 ca 80             	or     edx,0xffffff80
c0022fd3:	0f b6 d2             	movzx  edx,dl
c0022fd6:	52                   	push   edx
c0022fd7:	6a 0c                	push   0xc
c0022fd9:	56                   	push   esi
c0022fda:	57                   	push   edi
c0022fdb:	e8 c0 ff ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fe0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022fe5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022fe9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022fed:	ee                   	out    dx,al
c0022fee:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022ff3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022ff7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022ffb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022fff:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023007:	83 c4 2c             	add    esp,0x2c
c002300a:	5b                   	pop    ebx
c002300b:	5e                   	pop    esi
c002300c:	5f                   	pop    edi
c002300d:	5d                   	pop    ebp
c002300e:	eb 90                	jmp    c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023010:	80 fb 07             	cmp    bl,0x7
c0023013:	77 12                	ja     c0023027 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023015:	0f b6 d2             	movzx  edx,dl
c0023018:	0f b6 db             	movzx  ebx,bl
c002301b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023023:	89 da                	mov    edx,ebx
c0023025:	eb 2f                	jmp    c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023027:	80 fb 0d             	cmp    bl,0xd
c002302a:	77 13                	ja     c002303f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002302c:	0f b6 d2             	movzx  edx,dl
c002302f:	0f b6 db             	movzx  ebx,bl
c0023032:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023039:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002303d:	eb 17                	jmp    c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002303f:	80 fb 15             	cmp    bl,0x15
c0023042:	77 13                	ja     c0023057 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023044:	0f b6 d2             	movzx  edx,dl
c0023047:	0f b6 db             	movzx  ebx,bl
c002304a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023052:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023056:	ee                   	out    dx,al
c0023057:	83 c4 1c             	add    esp,0x1c
c002305a:	5b                   	pop    ebx
c002305b:	5e                   	pop    esi
c002305c:	5f                   	pop    edi
c002305d:	5d                   	pop    ebp
c002305e:	c3                   	ret    
c002305f:	90                   	nop

c0023060 <IDE::read(unsigned char, unsigned char)>:
c0023060:	55                   	push   ebp
c0023061:	57                   	push   edi
c0023062:	56                   	push   esi
c0023063:	53                   	push   ebx
c0023064:	83 ec 1c             	sub    esp,0x1c
c0023067:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002306b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002306f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023072:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023076:	3c 03                	cmp    al,0x3
c0023078:	77 43                	ja     c00230bd <IDE::read(unsigned char, unsigned char)+0x5d>
c002307a:	0f b6 f2             	movzx  esi,dl
c002307d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023080:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023084:	83 c8 80             	or     eax,0xffffff80
c0023087:	0f b6 c0             	movzx  eax,al
c002308a:	50                   	push   eax
c002308b:	6a 0c                	push   0xc
c002308d:	56                   	push   esi
c002308e:	57                   	push   edi
c002308f:	e8 0c ff ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023094:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023099:	0f b6 c3             	movzx  eax,bl
c002309c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230a0:	ec                   	in     al,dx
c00230a1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230a5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230aa:	52                   	push   edx
c00230ab:	6a 0c                	push   0xc
c00230ad:	56                   	push   esi
c00230ae:	57                   	push   edi
c00230af:	e8 ec fe ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230b4:	83 c4 20             	add    esp,0x20
c00230b7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230bb:	eb 49                	jmp    c0023106 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230bd:	80 fb 07             	cmp    bl,0x7
c00230c0:	77 12                	ja     c00230d4 <IDE::read(unsigned char, unsigned char)+0x74>
c00230c2:	0f b6 d2             	movzx  edx,dl
c00230c5:	0f b6 c3             	movzx  eax,bl
c00230c8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00230d0:	89 c2                	mov    edx,eax
c00230d2:	eb 31                	jmp    c0023105 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230d4:	80 fb 0d             	cmp    bl,0xd
c00230d7:	77 13                	ja     c00230ec <IDE::read(unsigned char, unsigned char)+0x8c>
c00230d9:	0f b6 d2             	movzx  edx,dl
c00230dc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00230e3:	0f b6 d3             	movzx  edx,bl
c00230e6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00230ea:	eb 19                	jmp    c0023105 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230ec:	31 c0                	xor    eax,eax
c00230ee:	80 fb 15             	cmp    bl,0x15
c00230f1:	77 13                	ja     c0023106 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230f3:	0f b6 d2             	movzx  edx,dl
c00230f6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00230fe:	0f b6 d3             	movzx  edx,bl
c0023101:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023105:	ec                   	in     al,dx
c0023106:	83 c4 1c             	add    esp,0x1c
c0023109:	5b                   	pop    ebx
c002310a:	5e                   	pop    esi
c002310b:	5f                   	pop    edi
c002310c:	5d                   	pop    ebp
c002310d:	c3                   	ret    

c002310e <IDE::waitInterrupt(unsigned char)>:
c002310e:	55                   	push   ebp
c002310f:	57                   	push   edi
c0023110:	56                   	push   esi
c0023111:	53                   	push   ebx
c0023112:	31 db                	xor    ebx,ebx
c0023114:	83 ec 0c             	sub    esp,0xc
c0023117:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002311b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023120:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023128:	89 e8                	mov    eax,ebp
c002312a:	84 c0                	test   al,al
c002312c:	75 34                	jne    c0023162 <IDE::waitInterrupt(unsigned char)+0x54>
c002312e:	52                   	push   edx
c002312f:	6a 0c                	push   0xc
c0023131:	56                   	push   esi
c0023132:	57                   	push   edi
c0023133:	e8 28 ff ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023138:	83 c4 10             	add    esp,0x10
c002313b:	a8 01                	test   al,0x1
c002313d:	75 2b                	jne    c002316a <IDE::waitInterrupt(unsigned char)+0x5c>
c002313f:	f6 c3 04             	test   bl,0x4
c0023142:	75 16                	jne    c002315a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023144:	83 fb 32             	cmp    ebx,0x32
c0023147:	7e 11                	jle    c002315a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023149:	50                   	push   eax
c002314a:	50                   	push   eax
c002314b:	6a 00                	push   0x0
c002314d:	68 80 96 98 00       	push   0x989680
c0023152:	e8 5d b1 ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c0023157:	83 c4 10             	add    esp,0x10
c002315a:	83 fb 3c             	cmp    ebx,0x3c
c002315d:	74 0b                	je     c002316a <IDE::waitInterrupt(unsigned char)+0x5c>
c002315f:	43                   	inc    ebx
c0023160:	eb be                	jmp    c0023120 <IDE::waitInterrupt(unsigned char)+0x12>
c0023162:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002316a:	83 c4 0c             	add    esp,0xc
c002316d:	89 e8                	mov    eax,ebp
c002316f:	5b                   	pop    ebx
c0023170:	5e                   	pop    esi
c0023171:	5f                   	pop    edi
c0023172:	5d                   	pop    ebp
c0023173:	c3                   	ret    

c0023174 <ideChannel0IRQHandler(regs*, void*)>:
c0023174:	83 ec 10             	sub    esp,0x10
c0023177:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002317b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023182:	6a 07                	push   0x7
c0023184:	6a 00                	push   0x0
c0023186:	50                   	push   eax
c0023187:	e8 d4 fe ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c002318c:	83 c4 1c             	add    esp,0x1c
c002318f:	c3                   	ret    

c0023190 <ideChannel1IRQHandler(regs*, void*)>:
c0023190:	83 ec 10             	sub    esp,0x10
c0023193:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023197:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002319e:	6a 07                	push   0x7
c00231a0:	6a 01                	push   0x1
c00231a2:	50                   	push   eax
c00231a3:	e8 b8 fe ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c00231a8:	83 c4 1c             	add    esp,0x1c
c00231ab:	c3                   	ret    

c00231ac <IDE::enableIRQs(unsigned char, bool)>:
c00231ac:	57                   	push   edi
c00231ad:	56                   	push   esi
c00231ae:	be 04 00 00 00       	mov    esi,0x4
c00231b3:	53                   	push   ebx
c00231b4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00231bd:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00231c2:	0f 94 c0             	sete   al
c00231c5:	d1 e0                	shl    eax,1
c00231c7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231ce:	0f b6 c0             	movzx  eax,al
c00231d1:	50                   	push   eax
c00231d2:	6a 0c                	push   0xc
c00231d4:	57                   	push   edi
c00231d5:	53                   	push   ebx
c00231d6:	e8 c5 fd ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231db:	83 c4 10             	add    esp,0x10
c00231de:	50                   	push   eax
c00231df:	6a 0c                	push   0xc
c00231e1:	57                   	push   edi
c00231e2:	53                   	push   ebx
c00231e3:	e8 78 fe ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c00231e8:	83 c4 10             	add    esp,0x10
c00231eb:	4e                   	dec    esi
c00231ec:	75 f0                	jne    c00231de <IDE::enableIRQs(unsigned char, bool)+0x32>
c00231ee:	5b                   	pop    ebx
c00231ef:	5e                   	pop    esi
c00231f0:	5f                   	pop    edi
c00231f1:	c3                   	ret    

c00231f2 <IDE::open(int, int, void*)>:
c00231f2:	55                   	push   ebp
c00231f3:	57                   	push   edi
c00231f4:	56                   	push   esi
c00231f5:	53                   	push   ebx
c00231f6:	83 ec 1c             	sub    esp,0x1c
c00231f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00231fd:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023206:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002320f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023216:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002321d:	0f 85 b0 02 00 00    	jne    c00234d3 <IDE::open(int, int, void*)+0x2e1>
c0023223:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023229:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002322d:	83 e0 7f             	and    eax,0x7f
c0023230:	3c 05                	cmp    al,0x5
c0023232:	74 04                	je     c0023238 <IDE::open(int, int, void*)+0x46>
c0023234:	3c 0f                	cmp    al,0xf
c0023236:	75 32                	jne    c002326a <IDE::open(int, int, void*)+0x78>
c0023238:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002323e:	83 e0 fc             	and    eax,0xfffffffc
c0023241:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023248:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002324e:	83 e0 fc             	and    eax,0xfffffffc
c0023251:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023258:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002325e:	83 e0 fc             	and    eax,0xfffffffc
c0023261:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023268:	eb 14                	jmp    c002327e <IDE::open(int, int, void*)+0x8c>
c002326a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023274:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002327e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023285:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002328c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023290:	89 c6                	mov    esi,eax
c0023292:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023297:	c1 e6 10             	shl    esi,0x10
c002329a:	89 e8                	mov    eax,ebp
c002329c:	89 fa                	mov    edx,edi
c002329e:	c1 e0 0b             	shl    eax,0xb
c00232a1:	09 f0                	or     eax,esi
c00232a3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232aa:	c1 e6 08             	shl    esi,0x8
c00232ad:	09 c6                	or     esi,eax
c00232af:	89 f0                	mov    eax,esi
c00232b1:	0d 08 00 00 80       	or     eax,0x80000008
c00232b6:	ef                   	out    dx,eax
c00232b7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00232bc:	89 ca                	mov    edx,ecx
c00232be:	ed                   	in     eax,dx
c00232bf:	c1 e8 10             	shr    eax,0x10
c00232c2:	3d ff ff 00 00       	cmp    eax,0xffff
c00232c7:	0f 84 f5 00 00 00    	je     c00233c2 <IDE::open(int, int, void*)+0x1d0>
c00232cd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00232d3:	89 fa                	mov    edx,edi
c00232d5:	89 f0                	mov    eax,esi
c00232d7:	ef                   	out    dx,eax
c00232d8:	b0 fe                	mov    al,0xfe
c00232da:	89 ca                	mov    edx,ecx
c00232dc:	ee                   	out    dx,al
c00232dd:	89 f0                	mov    eax,esi
c00232df:	89 fa                	mov    edx,edi
c00232e1:	ef                   	out    dx,eax
c00232e2:	89 ca                	mov    edx,ecx
c00232e4:	ed                   	in     eax,dx
c00232e5:	3c fe                	cmp    al,0xfe
c00232e7:	0f 85 a9 00 00 00    	jne    c0023396 <IDE::open(int, int, void*)+0x1a4>
c00232ed:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c00232f3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00232fa:	74 33                	je     c002332f <IDE::open(int, int, void*)+0x13d>
c00232fc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023302:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023306:	40                   	inc    eax
c0023307:	83 ec 0c             	sub    esp,0xc
c002330a:	0f b6 c0             	movzx  eax,al
c002330d:	50                   	push   eax
c002330e:	55                   	push   ebp
c002330f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023313:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023319:	51                   	push   ecx
c002331a:	e8 a1 4e ff ff       	call   c00181c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002331f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023324:	83 c4 1c             	add    esp,0x1c
c0023327:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002332d:	eb 0a                	jmp    c0023339 <IDE::open(int, int, void*)+0x147>
c002332f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023339:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023340:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023347:	c1 e1 10             	shl    ecx,0x10
c002334a:	c1 e0 08             	shl    eax,0x8
c002334d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023352:	09 c1                	or     ecx,eax
c0023354:	89 fa                	mov    edx,edi
c0023356:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002335d:	c1 e0 0b             	shl    eax,0xb
c0023360:	09 c1                	or     ecx,eax
c0023362:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023368:	89 c8                	mov    eax,ecx
c002336a:	ef                   	out    dx,eax
c002336b:	be fc 0c 00 00       	mov    esi,0xcfc
c0023370:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023376:	89 f2                	mov    edx,esi
c0023378:	ee                   	out    dx,al
c0023379:	89 c8                	mov    eax,ecx
c002337b:	89 fa                	mov    edx,edi
c002337d:	ef                   	out    dx,eax
c002337e:	89 f2                	mov    edx,esi
c0023380:	ed                   	in     eax,dx
c0023381:	0f b6 c0             	movzx  eax,al
c0023384:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002338a:	74 46                	je     c00233d2 <IDE::open(int, int, void*)+0x1e0>
c002338c:	83 ec 0c             	sub    esp,0xc
c002338f:	68 08 ca 02 c0       	push   0xc002ca08
c0023394:	eb 34                	jmp    c00233ca <IDE::open(int, int, void*)+0x1d8>
c0023396:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002339f:	75 17                	jne    c00233b8 <IDE::open(int, int, void*)+0x1c6>
c00233a1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233a6:	74 07                	je     c00233af <IDE::open(int, int, void*)+0x1bd>
c00233a8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233ad:	75 09                	jne    c00233b8 <IDE::open(int, int, void*)+0x1c6>
c00233af:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233b6:	eb 1a                	jmp    c00233d2 <IDE::open(int, int, void*)+0x1e0>
c00233b8:	83 ec 0c             	sub    esp,0xc
c00233bb:	68 10 ca 02 c0       	push   0xc002ca10
c00233c0:	eb 08                	jmp    c00233ca <IDE::open(int, int, void*)+0x1d8>
c00233c2:	83 ec 0c             	sub    esp,0xc
c00233c5:	68 41 ca 02 c0       	push   0xc002ca41
c00233ca:	e8 9c 71 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c00233cf:	83 c4 10             	add    esp,0x10
c00233d2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00233d9:	79 1a                	jns    c00233f5 <IDE::open(int, int, void*)+0x203>
c00233db:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00233e1:	83 e0 fc             	and    eax,0xfffffffc
c00233e4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00233eb:	83 c0 08             	add    eax,0x8
c00233ee:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00233f5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00233fb:	89 c2                	mov    edx,eax
c00233fd:	83 e2 0f             	and    edx,0xf
c0023400:	66 83 fa 08          	cmp    dx,0x8
c0023404:	75 0a                	jne    c0023410 <IDE::open(int, int, void*)+0x21e>
c0023406:	83 e8 02             	sub    eax,0x2
c0023409:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023410:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023416:	89 c2                	mov    edx,eax
c0023418:	83 e2 0f             	and    edx,0xf
c002341b:	66 83 fa 08          	cmp    dx,0x8
c002341f:	75 0a                	jne    c002342b <IDE::open(int, int, void*)+0x239>
c0023421:	83 e8 02             	sub    eax,0x2
c0023424:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002342b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023432:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023439:	89 d0                	mov    eax,edx
c002343b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002343e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023442:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023446:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023449:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002344e:	0f b6 c9             	movzx  ecx,cl
c0023451:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023458:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002345b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002345f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023463:	8d 50 02             	lea    edx,[eax+0x2]
c0023466:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002346b:	0f b6 d2             	movzx  edx,dl
c002346e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023474:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023477:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002347b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002347f:	8d 48 03             	lea    ecx,[eax+0x3]
c0023482:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023487:	0f b6 c9             	movzx  ecx,cl
c002348a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023490:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023493:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023497:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002349b:	8d 50 04             	lea    edx,[eax+0x4]
c002349e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234a4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234a9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234b0:	66 85 f6             	test   si,si
c00234b3:	74 3e                	je     c00234f3 <IDE::open(int, int, void*)+0x301>
c00234b5:	0f b6 d2             	movzx  edx,dl
c00234b8:	83 c0 05             	add    eax,0x5
c00234bb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234be:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234c2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00234c6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00234cc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234d1:	eb 20                	jmp    c00234f3 <IDE::open(int, int, void*)+0x301>
c00234d3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00234dd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00234e7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234ee:	e9 02 ff ff ff       	jmp    c00233f5 <IDE::open(int, int, void*)+0x203>
c00234f3:	52                   	push   edx
c00234f4:	52                   	push   edx
c00234f5:	6a 00                	push   0x0
c00234f7:	53                   	push   ebx
c00234f8:	e8 7d fa ff ff       	call   c0022f7a <IDE::prepareInterrupt(unsigned char)>
c00234fd:	59                   	pop    ecx
c00234fe:	5e                   	pop    esi
c00234ff:	6a 01                	push   0x1
c0023501:	53                   	push   ebx
c0023502:	e8 73 fa ff ff       	call   c0022f7a <IDE::prepareInterrupt(unsigned char)>
c0023507:	83 c4 0c             	add    esp,0xc
c002350a:	6a 00                	push   0x0
c002350c:	6a 00                	push   0x0
c002350e:	53                   	push   ebx
c002350f:	e8 98 fc ff ff       	call   c00231ac <IDE::enableIRQs(unsigned char, bool)>
c0023514:	83 c4 0c             	add    esp,0xc
c0023517:	6a 00                	push   0x0
c0023519:	6a 01                	push   0x1
c002351b:	53                   	push   ebx
c002351c:	e8 8b fc ff ff       	call   c00231ac <IDE::enableIRQs(unsigned char, bool)>
c0023521:	83 c4 10             	add    esp,0x10
c0023524:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002352b:	74 40                	je     c002356d <IDE::open(int, int, void*)+0x37b>
c002352d:	83 ec 0c             	sub    esp,0xc
c0023530:	68 6b ca 02 c0       	push   0xc002ca6b
c0023535:	e8 8c f9 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c002353a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002353d:	6a 01                	push   0x1
c002353f:	68 74 31 02 c0       	push   0xc0023174
c0023544:	6a 0e                	push   0xe
c0023546:	53                   	push   ebx
c0023547:	e8 24 0d ff ff       	call   c0014270 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002354c:	83 c4 14             	add    esp,0x14
c002354f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023555:	53                   	push   ebx
c0023556:	6a 01                	push   0x1
c0023558:	68 90 31 02 c0       	push   0xc0023190
c002355d:	6a 0f                	push   0xf
c002355f:	53                   	push   ebx
c0023560:	e8 0b 0d ff ff       	call   c0014270 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023565:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002356b:	eb 4a                	jmp    c00235b7 <IDE::open(int, int, void*)+0x3c5>
c002356d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023577:	50                   	push   eax
c0023578:	6a 0f                	push   0xf
c002357a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023580:	68 87 ca 02 c0       	push   0xc002ca87
c0023585:	e8 3c f9 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c002358a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002358d:	6a 00                	push   0x0
c002358f:	68 74 31 02 c0       	push   0xc0023174
c0023594:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002359a:	53                   	push   ebx
c002359b:	e8 d0 0c ff ff       	call   c0014270 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235a0:	83 c4 14             	add    esp,0x14
c00235a3:	53                   	push   ebx
c00235a4:	6a 00                	push   0x0
c00235a6:	68 90 31 02 c0       	push   0xc0023190
c00235ab:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235b1:	53                   	push   ebx
c00235b2:	e8 b9 0c ff ff       	call   c0014270 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235b9:	83 c4 20             	add    esp,0x20
c00235bc:	83 ec 0c             	sub    esp,0xc
c00235bf:	53                   	push   ebx
c00235c0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00235c3:	83 c4 0c             	add    esp,0xc
c00235c6:	6a 07                	push   0x7
c00235c8:	6a 00                	push   0x0
c00235ca:	53                   	push   ebx
c00235cb:	e8 90 fa ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c00235d0:	83 c4 0c             	add    esp,0xc
c00235d3:	6a 07                	push   0x7
c00235d5:	6a 01                	push   0x1
c00235d7:	53                   	push   ebx
c00235d8:	e8 83 fa ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c00235dd:	83 c4 0c             	add    esp,0xc
c00235e0:	6a 01                	push   0x1
c00235e2:	6a 00                	push   0x0
c00235e4:	53                   	push   ebx
c00235e5:	e8 c2 fb ff ff       	call   c00231ac <IDE::enableIRQs(unsigned char, bool)>
c00235ea:	83 c4 0c             	add    esp,0xc
c00235ed:	6a 01                	push   0x1
c00235ef:	6a 01                	push   0x1
c00235f1:	53                   	push   ebx
c00235f2:	e8 b5 fb ff ff       	call   c00231ac <IDE::enableIRQs(unsigned char, bool)>
c00235f7:	83 c4 2c             	add    esp,0x2c
c00235fa:	31 c0                	xor    eax,eax
c00235fc:	5b                   	pop    ebx
c00235fd:	5e                   	pop    esi
c00235fe:	5f                   	pop    edi
c00235ff:	5d                   	pop    ebp
c0023600:	c3                   	ret    
c0023601:	90                   	nop

c0023602 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023602:	55                   	push   ebp
c0023603:	57                   	push   edi
c0023604:	56                   	push   esi
c0023605:	53                   	push   ebx
c0023606:	83 ec 1c             	sub    esp,0x1c
c0023609:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002360d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023611:	8d 50 f8             	lea    edx,[eax-0x8]
c0023614:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023618:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002361c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023620:	80 fa 03             	cmp    dl,0x3
c0023623:	77 5d                	ja     c0023682 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023625:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002362d:	0f b6 db             	movzx  ebx,bl
c0023630:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023633:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023637:	83 ca 80             	or     edx,0xffffff80
c002363a:	0f b6 d2             	movzx  edx,dl
c002363d:	52                   	push   edx
c002363e:	6a 0c                	push   0xc
c0023640:	53                   	push   ebx
c0023641:	56                   	push   esi
c0023642:	e8 59 f9 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023647:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002364c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023650:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023654:	0f b6 c0             	movzx  eax,al
c0023657:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002365b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002365d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023662:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023666:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002366a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002366e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023676:	83 c4 2c             	add    esp,0x2c
c0023679:	5b                   	pop    ebx
c002367a:	5e                   	pop    esi
c002367b:	5f                   	pop    edi
c002367c:	5d                   	pop    ebp
c002367d:	e9 1e f9 ff ff       	jmp    c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023682:	3c 07                	cmp    al,0x7
c0023684:	77 10                	ja     c0023696 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023686:	0f b6 db             	movzx  ebx,bl
c0023689:	0f b6 d0             	movzx  edx,al
c002368c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023694:	eb 2d                	jmp    c00236c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023696:	3c 0d                	cmp    al,0xd
c0023698:	77 13                	ja     c00236ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002369a:	0f b6 db             	movzx  ebx,bl
c002369d:	0f b6 c0             	movzx  eax,al
c00236a0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236a7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236ab:	eb 16                	jmp    c00236c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236ad:	3c 15                	cmp    al,0x15
c00236af:	77 14                	ja     c00236c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236b1:	0f b6 db             	movzx  ebx,bl
c00236b4:	0f b6 c0             	movzx  eax,al
c00236b7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00236bf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00236c3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236c5:	83 c4 1c             	add    esp,0x1c
c00236c8:	5b                   	pop    ebx
c00236c9:	5e                   	pop    esi
c00236ca:	5f                   	pop    edi
c00236cb:	5d                   	pop    ebp
c00236cc:	c3                   	ret    
c00236cd:	90                   	nop

c00236ce <IDE::detect()>:
c00236ce:	55                   	push   ebp
c00236cf:	57                   	push   edi
c00236d0:	56                   	push   esi
c00236d1:	53                   	push   ebx
c00236d2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00236d8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00236df:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00236e6:	0f 85 be 02 00 00    	jne    c00239aa <IDE::detect()+0x2dc>
c00236ec:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00236f3:	31 f6                	xor    esi,esi
c00236f5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00236fd:	31 ed                	xor    ebp,ebp
c00236ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023703:	c1 e0 06             	shl    eax,0x6
c0023706:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002370e:	89 e8                	mov    eax,ebp
c0023710:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023714:	c1 e0 04             	shl    eax,0x4
c0023717:	83 c8 a0             	or     eax,0xffffffa0
c002371a:	0f b6 c0             	movzx  eax,al
c002371d:	50                   	push   eax
c002371e:	6a 06                	push   0x6
c0023720:	56                   	push   esi
c0023721:	53                   	push   ebx
c0023722:	e8 79 f8 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023727:	83 c4 0c             	add    esp,0xc
c002372a:	6a 0c                	push   0xc
c002372c:	56                   	push   esi
c002372d:	53                   	push   ebx
c002372e:	e8 2d f9 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023733:	83 c4 0c             	add    esp,0xc
c0023736:	6a 0c                	push   0xc
c0023738:	56                   	push   esi
c0023739:	53                   	push   ebx
c002373a:	e8 21 f9 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c002373f:	83 c4 0c             	add    esp,0xc
c0023742:	6a 0c                	push   0xc
c0023744:	56                   	push   esi
c0023745:	53                   	push   ebx
c0023746:	e8 15 f9 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c002374b:	83 c4 0c             	add    esp,0xc
c002374e:	6a 0c                	push   0xc
c0023750:	56                   	push   esi
c0023751:	53                   	push   ebx
c0023752:	e8 09 f9 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023757:	68 ec 00 00 00       	push   0xec
c002375c:	6a 07                	push   0x7
c002375e:	56                   	push   esi
c002375f:	53                   	push   ebx
c0023760:	e8 3b f8 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023765:	83 c4 1c             	add    esp,0x1c
c0023768:	6a 0c                	push   0xc
c002376a:	56                   	push   esi
c002376b:	53                   	push   ebx
c002376c:	e8 ef f8 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023771:	83 c4 0c             	add    esp,0xc
c0023774:	6a 0c                	push   0xc
c0023776:	56                   	push   esi
c0023777:	53                   	push   ebx
c0023778:	e8 e3 f8 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c002377d:	83 c4 0c             	add    esp,0xc
c0023780:	6a 0c                	push   0xc
c0023782:	56                   	push   esi
c0023783:	53                   	push   ebx
c0023784:	e8 d7 f8 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023789:	83 c4 0c             	add    esp,0xc
c002378c:	6a 0c                	push   0xc
c002378e:	56                   	push   esi
c002378f:	53                   	push   ebx
c0023790:	e8 cb f8 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023795:	83 c4 0c             	add    esp,0xc
c0023798:	6a 0c                	push   0xc
c002379a:	56                   	push   esi
c002379b:	53                   	push   ebx
c002379c:	e8 bf f8 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c00237a1:	83 c4 10             	add    esp,0x10
c00237a4:	84 c0                	test   al,al
c00237a6:	0f 84 8b 01 00 00    	je     c0023937 <IDE::detect()+0x269>
c00237ac:	31 ff                	xor    edi,edi
c00237ae:	50                   	push   eax
c00237af:	6a 0c                	push   0xc
c00237b1:	56                   	push   esi
c00237b2:	53                   	push   ebx
c00237b3:	e8 a8 f8 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c00237b8:	83 c4 10             	add    esp,0x10
c00237bb:	a8 01                	test   al,0x1
c00237bd:	0f 85 8e 01 00 00    	jne    c0023951 <IDE::detect()+0x283>
c00237c3:	84 c0                	test   al,al
c00237c5:	78 04                	js     c00237cb <IDE::detect()+0xfd>
c00237c7:	a8 08                	test   al,0x8
c00237c9:	75 27                	jne    c00237f2 <IDE::detect()+0x124>
c00237cb:	47                   	inc    edi
c00237cc:	81 ff 17 01 00 00    	cmp    edi,0x117
c00237d2:	7e da                	jle    c00237ae <IDE::detect()+0xe0>
c00237d4:	50                   	push   eax
c00237d5:	50                   	push   eax
c00237d6:	6a 00                	push   0x0
c00237d8:	68 40 4b 4c 00       	push   0x4c4b40
c00237dd:	e8 d2 aa ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c00237e2:	83 c4 10             	add    esp,0x10
c00237e5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00237eb:	75 c1                	jne    c00237ae <IDE::detect()+0xe0>
c00237ed:	e9 5f 01 00 00       	jmp    c0023951 <IDE::detect()+0x283>
c00237f2:	31 c9                	xor    ecx,ecx
c00237f4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00237f8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00237fc:	83 ec 0c             	sub    esp,0xc
c00237ff:	68 80 00 00 00       	push   0x80
c0023804:	57                   	push   edi
c0023805:	6a 00                	push   0x0
c0023807:	56                   	push   esi
c0023808:	53                   	push   ebx
c0023809:	e8 f4 fd ff ff       	call   c0023602 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002380e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023813:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023817:	89 d1                	mov    ecx,edx
c0023819:	c1 e0 06             	shl    eax,0x6
c002381c:	01 d8                	add    eax,ebx
c002381e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023825:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002382c:	89 f2                	mov    edx,esi
c002382e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023834:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023838:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002383e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023842:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023849:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023851:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023858:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023860:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023866:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002386d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023873:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023877:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002387b:	83 c4 20             	add    esp,0x20
c002387e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023881:	83 c0 02             	add    eax,0x2
c0023884:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002388a:	83 c7 02             	add    edi,0x2
c002388d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023890:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023896:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002389a:	75 e2                	jne    c002387e <IDE::detect()+0x1b0>
c002389c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238a0:	c1 e0 06             	shl    eax,0x6
c00238a3:	01 d8                	add    eax,ebx
c00238a5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238ab:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238b2:	66 c1 ea 09          	shr    dx,0x9
c00238b6:	83 e2 01             	and    edx,0x1
c00238b9:	84 c9                	test   cl,cl
c00238bb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00238c1:	75 2f                	jne    c00238f2 <IDE::detect()+0x224>
c00238c3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00238c9:	85 c0                	test   eax,eax
c00238cb:	74 66                	je     c0023933 <IDE::detect()+0x265>
c00238cd:	50                   	push   eax
c00238ce:	55                   	push   ebp
c00238cf:	56                   	push   esi
c00238d0:	68 a3 ca 02 c0       	push   0xc002caa3
c00238d5:	e8 ec f5 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00238da:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00238e1:	e8 5d bf fe ff       	call   c000f843 <malloc>
c00238e6:	89 c7                	mov    edi,eax
c00238e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00238eb:	e8 78 06 00 00       	call   c0023f68 <ATA::ATA()>
c00238f0:	eb 28                	jmp    c002391a <IDE::detect()+0x24c>
c00238f2:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00238f8:	55                   	push   ebp
c00238f9:	56                   	push   esi
c00238fa:	68 d2 ca 02 c0       	push   0xc002cad2
c00238ff:	e8 c2 f5 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023904:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002390b:	e8 33 bf fe ff       	call   c000f843 <malloc>
c0023910:	89 c7                	mov    edi,eax
c0023912:	89 04 24             	mov    DWORD PTR [esp],eax
c0023915:	e8 8e 0c 00 00       	call   c00245a8 <ATAPI::ATAPI()>
c002391a:	5a                   	pop    edx
c002391b:	59                   	pop    ecx
c002391c:	57                   	push   edi
c002391d:	53                   	push   ebx
c002391e:	e8 c9 09 ff ff       	call   c00142ec <Device::addChild(Device*)>
c0023923:	8b 07                	mov    eax,DWORD PTR [edi]
c0023925:	53                   	push   ebx
c0023926:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002392a:	6a 00                	push   0x0
c002392c:	57                   	push   edi
c002392d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023930:	83 c4 20             	add    esp,0x20
c0023933:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023937:	4d                   	dec    ebp
c0023938:	74 0a                	je     c0023944 <IDE::detect()+0x276>
c002393a:	bd 01 00 00 00       	mov    ebp,0x1
c002393f:	e9 bb fd ff ff       	jmp    c00236ff <IDE::detect()+0x31>
c0023944:	4e                   	dec    esi
c0023945:	74 63                	je     c00239aa <IDE::detect()+0x2dc>
c0023947:	be 01 00 00 00       	mov    esi,0x1
c002394c:	e9 ac fd ff ff       	jmp    c00236fd <IDE::detect()+0x2f>
c0023951:	50                   	push   eax
c0023952:	6a 04                	push   0x4
c0023954:	56                   	push   esi
c0023955:	53                   	push   ebx
c0023956:	e8 05 f7 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c002395b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002395f:	83 c4 0c             	add    esp,0xc
c0023962:	6a 05                	push   0x5
c0023964:	56                   	push   esi
c0023965:	53                   	push   ebx
c0023966:	e8 f5 f6 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c002396b:	83 c4 10             	add    esp,0x10
c002396e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023972:	80 fa 14             	cmp    dl,0x14
c0023975:	75 04                	jne    c002397b <IDE::detect()+0x2ad>
c0023977:	3c eb                	cmp    al,0xeb
c0023979:	eb 07                	jmp    c0023982 <IDE::detect()+0x2b4>
c002397b:	3c 96                	cmp    al,0x96
c002397d:	75 b8                	jne    c0023937 <IDE::detect()+0x269>
c002397f:	80 fa 69             	cmp    dl,0x69
c0023982:	75 b3                	jne    c0023937 <IDE::detect()+0x269>
c0023984:	68 a1 00 00 00       	push   0xa1
c0023989:	6a 07                	push   0x7
c002398b:	56                   	push   esi
c002398c:	53                   	push   ebx
c002398d:	e8 0e f6 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023992:	5f                   	pop    edi
c0023993:	58                   	pop    eax
c0023994:	6a 00                	push   0x0
c0023996:	68 40 42 0f 00       	push   0xf4240
c002399b:	e8 14 a9 ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c00239a0:	83 c4 10             	add    esp,0x10
c00239a3:	b1 01                	mov    cl,0x1
c00239a5:	e9 4a fe ff ff       	jmp    c00237f4 <IDE::detect()+0x126>
c00239aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239b0:	5b                   	pop    ebx
c00239b1:	5e                   	pop    esi
c00239b2:	5f                   	pop    edi
c00239b3:	5d                   	pop    ebp
c00239b4:	c3                   	ret    
c00239b5:	90                   	nop

c00239b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239b6:	55                   	push   ebp
c00239b7:	57                   	push   edi
c00239b8:	56                   	push   esi
c00239b9:	53                   	push   ebx
c00239ba:	83 ec 1c             	sub    esp,0x1c
c00239bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239c5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239c9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239cd:	88 c3                	mov    bl,al
c00239cf:	84 c0                	test   al,al
c00239d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239d5:	0f 84 67 01 00 00    	je     c0023b42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00239db:	83 ec 0c             	sub    esp,0xc
c00239de:	68 03 cb 02 c0       	push   0xc002cb03
c00239e3:	e8 de f4 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00239e8:	83 c4 10             	add    esp,0x10
c00239eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00239ef:	3c 01                	cmp    al,0x1
c00239f1:	75 17                	jne    c0023a0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00239f3:	83 ec 0c             	sub    esp,0xc
c00239f6:	b3 13                	mov    bl,0x13
c00239f8:	68 0f cb 02 c0       	push   0xc002cb0f
c00239fd:	e8 c4 f4 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023a02:	83 c4 10             	add    esp,0x10
c0023a05:	e9 25 01 00 00       	jmp    c0023b2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a0a:	3c 02                	cmp    al,0x2
c0023a0c:	0f 85 ef 00 00 00    	jne    c0023b01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a12:	d1 e6                	shl    esi,1
c0023a14:	09 ee                	or     esi,ebp
c0023a16:	52                   	push   edx
c0023a17:	89 f0                	mov    eax,esi
c0023a19:	6a 01                	push   0x1
c0023a1b:	0f b6 f0             	movzx  esi,al
c0023a1e:	c1 e6 06             	shl    esi,0x6
c0023a21:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a29:	50                   	push   eax
c0023a2a:	57                   	push   edi
c0023a2b:	e8 30 f6 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023a30:	83 c4 10             	add    esp,0x10
c0023a33:	89 c6                	mov    esi,eax
c0023a35:	a8 01                	test   al,0x1
c0023a37:	74 12                	je     c0023a4b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a39:	83 ec 0c             	sub    esp,0xc
c0023a3c:	b3 07                	mov    bl,0x7
c0023a3e:	68 24 cb 02 c0       	push   0xc002cb24
c0023a43:	e8 7e f4 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023a48:	83 c4 10             	add    esp,0x10
c0023a4b:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a51:	74 12                	je     c0023a65 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a53:	83 ec 0c             	sub    esp,0xc
c0023a56:	b3 03                	mov    bl,0x3
c0023a58:	68 42 cb 02 c0       	push   0xc002cb42
c0023a5d:	e8 64 f4 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023a62:	83 c4 10             	add    esp,0x10
c0023a65:	f7 c6 04 00 00 00    	test   esi,0x4
c0023a6b:	74 12                	je     c0023a7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023a6d:	83 ec 0c             	sub    esp,0xc
c0023a70:	b3 14                	mov    bl,0x14
c0023a72:	68 62 cb 02 c0       	push   0xc002cb62
c0023a77:	e8 4a f4 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023a7c:	83 c4 10             	add    esp,0x10
c0023a7f:	f7 c6 08 00 00 00    	test   esi,0x8
c0023a85:	74 12                	je     c0023a99 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023a87:	83 ec 0c             	sub    esp,0xc
c0023a8a:	b3 03                	mov    bl,0x3
c0023a8c:	68 42 cb 02 c0       	push   0xc002cb42
c0023a91:	e8 30 f4 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023a96:	83 c4 10             	add    esp,0x10
c0023a99:	f7 c6 10 00 00 00    	test   esi,0x10
c0023a9f:	74 12                	je     c0023ab3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023aa1:	83 ec 0c             	sub    esp,0xc
c0023aa4:	b3 15                	mov    bl,0x15
c0023aa6:	68 7a cb 02 c0       	push   0xc002cb7a
c0023aab:	e8 16 f4 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023ab0:	83 c4 10             	add    esp,0x10
c0023ab3:	f7 c6 20 00 00 00    	test   esi,0x20
c0023ab9:	74 12                	je     c0023acd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023abb:	83 ec 0c             	sub    esp,0xc
c0023abe:	b3 03                	mov    bl,0x3
c0023ac0:	68 42 cb 02 c0       	push   0xc002cb42
c0023ac5:	e8 fc f3 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023aca:	83 c4 10             	add    esp,0x10
c0023acd:	f7 c6 40 00 00 00    	test   esi,0x40
c0023ad3:	74 12                	je     c0023ae7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023ad5:	83 ec 0c             	sub    esp,0xc
c0023ad8:	b3 16                	mov    bl,0x16
c0023ada:	68 94 cb 02 c0       	push   0xc002cb94
c0023adf:	e8 e2 f3 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023ae4:	83 c4 10             	add    esp,0x10
c0023ae7:	89 f0                	mov    eax,esi
c0023ae9:	84 c0                	test   al,al
c0023aeb:	79 42                	jns    c0023b2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023aed:	83 ec 0c             	sub    esp,0xc
c0023af0:	b3 0d                	mov    bl,0xd
c0023af2:	68 b5 cb 02 c0       	push   0xc002cbb5
c0023af7:	e8 ca f3 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023afc:	83 c4 10             	add    esp,0x10
c0023aff:	eb 2e                	jmp    c0023b2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b01:	3c 03                	cmp    al,0x3
c0023b03:	75 14                	jne    c0023b19 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b05:	83 ec 0c             	sub    esp,0xc
c0023b08:	b3 17                	mov    bl,0x17
c0023b0a:	68 c9 cb 02 c0       	push   0xc002cbc9
c0023b0f:	e8 b2 f3 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023b14:	83 c4 10             	add    esp,0x10
c0023b17:	eb 16                	jmp    c0023b2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b19:	3c 04                	cmp    al,0x4
c0023b1b:	75 12                	jne    c0023b2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b1d:	83 ec 0c             	sub    esp,0xc
c0023b20:	b3 08                	mov    bl,0x8
c0023b22:	68 df cb 02 c0       	push   0xc002cbdf
c0023b27:	e8 9a f3 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023b2c:	83 c4 10             	add    esp,0x10
c0023b2f:	50                   	push   eax
c0023b30:	50                   	push   eax
c0023b31:	0f b6 c3             	movzx  eax,bl
c0023b34:	50                   	push   eax
c0023b35:	68 f7 cb 02 c0       	push   0xc002cbf7
c0023b3a:	e8 87 f3 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023b3f:	83 c4 10             	add    esp,0x10
c0023b42:	83 c4 1c             	add    esp,0x1c
c0023b45:	88 d8                	mov    al,bl
c0023b47:	5b                   	pop    ebx
c0023b48:	5e                   	pop    esi
c0023b49:	5f                   	pop    edi
c0023b4a:	5d                   	pop    ebp
c0023b4b:	c3                   	ret    

c0023b4c <IDE::polling(unsigned char, unsigned int)>:
c0023b4c:	57                   	push   edi
c0023b4d:	56                   	push   esi
c0023b4e:	53                   	push   ebx
c0023b4f:	bb 04 00 00 00       	mov    ebx,0x4
c0023b54:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b58:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b5d:	52                   	push   edx
c0023b5e:	6a 0c                	push   0xc
c0023b60:	56                   	push   esi
c0023b61:	57                   	push   edi
c0023b62:	e8 f9 f4 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023b67:	83 c4 10             	add    esp,0x10
c0023b6a:	4b                   	dec    ebx
c0023b6b:	75 f0                	jne    c0023b5d <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b6d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b72:	50                   	push   eax
c0023b73:	6a 0c                	push   0xc
c0023b75:	56                   	push   esi
c0023b76:	57                   	push   edi
c0023b77:	e8 e4 f4 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023b7c:	83 c4 10             	add    esp,0x10
c0023b7f:	a8 01                	test   al,0x1
c0023b81:	74 12                	je     c0023b95 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023b83:	83 ec 0c             	sub    esp,0xc
c0023b86:	68 11 cc 02 c0       	push   0xc002cc11
c0023b8b:	e8 36 f3 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023b90:	83 c4 10             	add    esp,0x10
c0023b93:	eb 17                	jmp    c0023bac <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b95:	a8 20                	test   al,0x20
c0023b97:	75 0f                	jne    c0023ba8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023b99:	4b                   	dec    ebx
c0023b9a:	74 10                	je     c0023bac <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b9c:	84 c0                	test   al,al
c0023b9e:	78 d2                	js     c0023b72 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ba0:	a8 08                	test   al,0x8
c0023ba2:	74 ce                	je     c0023b72 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ba4:	31 c0                	xor    eax,eax
c0023ba6:	eb 06                	jmp    c0023bae <IDE::polling(unsigned char, unsigned int)+0x62>
c0023ba8:	b0 01                	mov    al,0x1
c0023baa:	eb 02                	jmp    c0023bae <IDE::polling(unsigned char, unsigned int)+0x62>
c0023bac:	b0 02                	mov    al,0x2
c0023bae:	5b                   	pop    ebx
c0023baf:	5e                   	pop    esi
c0023bb0:	5f                   	pop    edi
c0023bb1:	c3                   	ret    

c0023bb2 <SATABus::close(int, int, void*)>:
c0023bb2:	31 c0                	xor    eax,eax
c0023bb4:	c3                   	ret    
c0023bb5:	90                   	nop

c0023bb6 <SATABus::detect()>:
c0023bb6:	c3                   	ret    
c0023bb7:	90                   	nop

c0023bb8 <SATABus::SATABus()>:
c0023bb8:	83 ec 0c             	sub    esp,0xc
c0023bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bbf:	83 ec 08             	sub    esp,0x8
c0023bc2:	68 54 cc 02 c0       	push   0xc002cc54
c0023bc7:	50                   	push   eax
c0023bc8:	e8 ab 0a ff ff       	call   c0014678 <HardDiskController::HardDiskController(char const*)>
c0023bcd:	83 c4 10             	add    esp,0x10
c0023bd0:	ba 10 cd 02 c0       	mov    edx,0xc002cd10
c0023bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd9:	89 10                	mov    DWORD PTR [eax],edx
c0023bdb:	83 ec 0c             	sub    esp,0xc
c0023bde:	6a 50                	push   0x50
c0023be0:	e8 1c c4 fe ff       	call   c0010001 <Phys::allocateContiguousPages(int)>
c0023be5:	83 c4 10             	add    esp,0x10
c0023be8:	89 c2                	mov    edx,eax
c0023bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023bf4:	83 ec 0c             	sub    esp,0xc
c0023bf7:	6a 50                	push   0x50
c0023bf9:	e8 7d df fe ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0023bfe:	83 c4 10             	add    esp,0x10
c0023c01:	89 c2                	mov    edx,eax
c0023c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c0d:	e8 21 e3 fe ff       	call   c0011f33 <Virt::getAKernelVAS()>
c0023c12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c16:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023c1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c20:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023c26:	83 ec 0c             	sub    esp,0xc
c0023c29:	6a 03                	push   0x3
c0023c2b:	6a 50                	push   0x50
c0023c2d:	51                   	push   ecx
c0023c2e:	52                   	push   edx
c0023c2f:	50                   	push   eax
c0023c30:	e8 15 ea fe ff       	call   c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c35:	83 c4 20             	add    esp,0x20
c0023c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c3c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c46:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c4c:	83 ec 04             	sub    esp,0x4
c0023c4f:	52                   	push   edx
c0023c50:	50                   	push   eax
c0023c51:	68 78 cc 02 c0       	push   0xc002cc78
c0023c56:	e8 6b f2 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023c5b:	83 c4 10             	add    esp,0x10
c0023c5e:	90                   	nop
c0023c5f:	83 c4 0c             	add    esp,0xc
c0023c62:	c3                   	ret    
c0023c63:	90                   	nop

c0023c64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c64:	83 ec 0c             	sub    esp,0xc
c0023c67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c6b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c71:	09 c2                	or     edx,eax
c0023c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c7d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c7f:	31 c0                	xor    eax,eax
c0023c81:	c1 e9 08             	shr    ecx,0x8
c0023c84:	83 e1 0f             	and    ecx,0xf
c0023c87:	39 c8                	cmp    eax,ecx
c0023c89:	74 0a                	je     c0023c95 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c8b:	f6 c2 01             	test   dl,0x1
c0023c8e:	74 18                	je     c0023ca8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c90:	d1 ea                	shr    edx,1
c0023c92:	40                   	inc    eax
c0023c93:	eb f2                	jmp    c0023c87 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023c95:	83 ec 0c             	sub    esp,0xc
c0023c98:	68 9c cc 02 c0       	push   0xc002cc9c
c0023c9d:	e8 c9 68 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0023ca2:	83 c4 10             	add    esp,0x10
c0023ca5:	83 c8 ff             	or     eax,0xffffffff
c0023ca8:	83 c4 0c             	add    esp,0xc
c0023cab:	c3                   	ret    

c0023cac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023cac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023cb0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023cb3:	89 c2                	mov    edx,eax
c0023cb5:	c1 ea 08             	shr    edx,0x8
c0023cb8:	83 e2 0f             	and    edx,0xf
c0023cbb:	fe ca                	dec    dl
c0023cbd:	75 31                	jne    c0023cf0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cbf:	83 e0 0f             	and    eax,0xf
c0023cc2:	3c 03                	cmp    al,0x3
c0023cc4:	75 2a                	jne    c0023cf0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023cc6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023cc9:	b8 02 00 00 00       	mov    eax,0x2
c0023cce:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023cd4:	74 1c                	je     c0023cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cd6:	b8 04 00 00 00       	mov    eax,0x4
c0023cdb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023ce1:	74 0f                	je     c0023cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ce3:	31 c0                	xor    eax,eax
c0023ce5:	83 fa 03             	cmp    edx,0x3
c0023ce8:	0f 94 c0             	sete   al
c0023ceb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023cef:	c3                   	ret    
c0023cf0:	31 c0                	xor    eax,eax
c0023cf2:	c3                   	ret    
c0023cf3:	90                   	nop

c0023cf4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023cf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023cf8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cfb:	0f ba e2 0f          	bt     edx,0xf
c0023cff:	72 f7                	jb     c0023cf8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d01:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d04:	83 ca 10             	or     edx,0x10
c0023d07:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d0d:	83 ca 01             	or     edx,0x1
c0023d10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d13:	c3                   	ret    

c0023d14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d18:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d1b:	83 e2 fe             	and    edx,0xfffffffe
c0023d1e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d21:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d24:	83 e2 ef             	and    edx,0xffffffef
c0023d27:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d2d:	0f ba e2 0e          	bt     edx,0xe
c0023d31:	72 f7                	jb     c0023d2a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d36:	0f ba e2 0f          	bt     edx,0xf
c0023d3a:	72 ee                	jb     c0023d2a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d3c:	c3                   	ret    
c0023d3d:	90                   	nop

c0023d3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d3e:	55                   	push   ebp
c0023d3f:	57                   	push   edi
c0023d40:	56                   	push   esi
c0023d41:	53                   	push   ebx
c0023d42:	83 ec 1c             	sub    esp,0x1c
c0023d45:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d4d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d51:	53                   	push   ebx
c0023d52:	89 fd                	mov    ebp,edi
c0023d54:	56                   	push   esi
c0023d55:	c1 e5 0a             	shl    ebp,0xa
c0023d58:	e8 b7 ff ff ff       	call   c0023d14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d5d:	83 ec 0c             	sub    esp,0xc
c0023d60:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d66:	01 e8                	add    eax,ebp
c0023d68:	89 03                	mov    DWORD PTR [ebx],eax
c0023d6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d6c:	68 00 04 00 00       	push   0x400
c0023d71:	6a 00                	push   0x0
c0023d73:	50                   	push   eax
c0023d74:	e8 ff c9 fd ff       	call   c0000778 <memset>
c0023d79:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d7f:	89 fa                	mov    edx,edi
c0023d81:	01 e8                	add    eax,ebp
c0023d83:	c1 e7 0d             	shl    edi,0xd
c0023d86:	89 03                	mov    DWORD PTR [ebx],eax
c0023d88:	c1 e2 08             	shl    edx,0x8
c0023d8b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023d92:	81 c2 00 80 00 00    	add    edx,0x8000
c0023d98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023d9c:	89 d0                	mov    eax,edx
c0023d9e:	83 c4 1c             	add    esp,0x1c
c0023da1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023da7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023daa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023dad:	68 00 01 00 00       	push   0x100
c0023db2:	6a 00                	push   0x0
c0023db4:	50                   	push   eax
c0023db5:	e8 be c9 fd ff       	call   c0000778 <memset>
c0023dba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023dbe:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023dc4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023dca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023dce:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023dd1:	83 c4 10             	add    esp,0x10
c0023dd4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ddb:	31 ff                	xor    edi,edi
c0023ddd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023de3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023de9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ded:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023df3:	83 c5 20             	add    ebp,0x20
c0023df6:	01 f8                	add    eax,edi
c0023df8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023dfb:	52                   	push   edx
c0023dfc:	68 00 01 00 00       	push   0x100
c0023e01:	6a 00                	push   0x0
c0023e03:	50                   	push   eax
c0023e04:	e8 6f c9 fd ff       	call   c0000778 <memset>
c0023e09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e0d:	83 c4 10             	add    esp,0x10
c0023e10:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e16:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023e1d:	01 f8                	add    eax,edi
c0023e1f:	81 c7 00 01 00 00    	add    edi,0x100
c0023e25:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e28:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e2e:	75 b3                	jne    c0023de3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e30:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e34:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e38:	83 c4 1c             	add    esp,0x1c
c0023e3b:	5b                   	pop    ebx
c0023e3c:	5e                   	pop    esi
c0023e3d:	5f                   	pop    edi
c0023e3e:	5d                   	pop    ebp
c0023e3f:	e9 b0 fe ff ff       	jmp    c0023cf4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e44:	55                   	push   ebp
c0023e45:	57                   	push   edi
c0023e46:	56                   	push   esi
c0023e47:	53                   	push   ebx
c0023e48:	31 db                	xor    ebx,ebx
c0023e4a:	83 ec 0c             	sub    esp,0xc
c0023e4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e51:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e55:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e58:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e5e:	0f 84 aa 00 00 00    	je     c0023f0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e64:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023e68:	89 d8                	mov    eax,ebx
c0023e6a:	c1 e0 07             	shl    eax,0x7
c0023e6d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023e74:	55                   	push   ebp
c0023e75:	56                   	push   esi
c0023e76:	e8 31 fe ff ff       	call   c0023cac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e7b:	5a                   	pop    edx
c0023e7c:	83 f8 01             	cmp    eax,0x1
c0023e7f:	59                   	pop    ecx
c0023e80:	75 30                	jne    c0023eb2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023e82:	50                   	push   eax
c0023e83:	50                   	push   eax
c0023e84:	53                   	push   ebx
c0023e85:	68 c1 cc 02 c0       	push   0xc002ccc1
c0023e8a:	e8 37 f0 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023e8f:	83 c4 0c             	add    esp,0xc
c0023e92:	53                   	push   ebx
c0023e93:	55                   	push   ebp
c0023e94:	56                   	push   esi
c0023e95:	e8 a4 fe ff ff       	call   c0023d3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e9a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023ea1:	e8 9d b9 fe ff       	call   c000f843 <malloc>
c0023ea6:	89 c5                	mov    ebp,eax
c0023ea8:	89 04 24             	mov    DWORD PTR [esp],eax
c0023eab:	e8 60 0d 00 00       	call   c0024c10 <SATA::SATA()>
c0023eb0:	eb 33                	jmp    c0023ee5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023eb2:	83 f8 04             	cmp    eax,0x4
c0023eb5:	75 47                	jne    c0023efe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023eb7:	50                   	push   eax
c0023eb8:	50                   	push   eax
c0023eb9:	53                   	push   ebx
c0023eba:	68 d8 cc 02 c0       	push   0xc002ccd8
c0023ebf:	e8 02 f0 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023ec4:	83 c4 0c             	add    esp,0xc
c0023ec7:	53                   	push   ebx
c0023ec8:	55                   	push   ebp
c0023ec9:	56                   	push   esi
c0023eca:	e8 6f fe ff ff       	call   c0023d3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ecf:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ed6:	e8 68 b9 fe ff       	call   c000f843 <malloc>
c0023edb:	89 c5                	mov    ebp,eax
c0023edd:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ee0:	e8 d7 10 00 00       	call   c0024fbc <SATAPI::SATAPI()>
c0023ee5:	5a                   	pop    edx
c0023ee6:	59                   	pop    ecx
c0023ee7:	55                   	push   ebp
c0023ee8:	56                   	push   esi
c0023ee9:	e8 fe 03 ff ff       	call   c00142ec <Device::addChild(Device*)>
c0023eee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023ef1:	56                   	push   esi
c0023ef2:	6a 00                	push   0x0
c0023ef4:	53                   	push   ebx
c0023ef5:	55                   	push   ebp
c0023ef6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023ef9:	83 c4 20             	add    esp,0x20
c0023efc:	eb 10                	jmp    c0023f0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023efe:	50                   	push   eax
c0023eff:	50                   	push   eax
c0023f00:	53                   	push   ebx
c0023f01:	68 f1 cc 02 c0       	push   0xc002ccf1
c0023f06:	e8 bb ef fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0023f0b:	83 c4 10             	add    esp,0x10
c0023f0e:	d1 ef                	shr    edi,1
c0023f10:	43                   	inc    ebx
c0023f11:	83 fb 20             	cmp    ebx,0x20
c0023f14:	0f 85 3e ff ff ff    	jne    c0023e58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f1a:	83 c4 0c             	add    esp,0xc
c0023f1d:	5b                   	pop    ebx
c0023f1e:	5e                   	pop    esi
c0023f1f:	5f                   	pop    edi
c0023f20:	5d                   	pop    ebp
c0023f21:	c3                   	ret    

c0023f22 <SATABus::open(int, int, void*)>:
c0023f22:	83 ec 14             	sub    esp,0x14
c0023f25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f29:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f2f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f35:	52                   	push   edx
c0023f36:	50                   	push   eax
c0023f37:	e8 08 ff ff ff       	call   c0023e44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f3c:	31 c0                	xor    eax,eax
c0023f3e:	83 c4 1c             	add    esp,0x1c
c0023f41:	c3                   	ret    

c0023f42 <ATA::close(int, int, void*)>:
c0023f42:	83 ec 0c             	sub    esp,0xc
c0023f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f49:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f4f:	85 c0                	test   eax,eax
c0023f51:	74 0c                	je     c0023f5f <ATA::close(int, int, void*)+0x1d>
c0023f53:	83 ec 0c             	sub    esp,0xc
c0023f56:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f58:	50                   	push   eax
c0023f59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f5c:	83 c4 10             	add    esp,0x10
c0023f5f:	31 c0                	xor    eax,eax
c0023f61:	83 c4 0c             	add    esp,0xc
c0023f64:	c3                   	ret    
c0023f65:	90                   	nop

c0023f66 <ATA::powerSaving(PowerSavingLevel)>:
c0023f66:	c3                   	ret    
c0023f67:	90                   	nop

c0023f68 <ATA::ATA()>:
c0023f68:	83 ec 0c             	sub    esp,0xc
c0023f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f6f:	83 ec 04             	sub    esp,0x4
c0023f72:	68 00 02 00 00       	push   0x200
c0023f77:	68 d9 cd 02 c0       	push   0xc002cdd9
c0023f7c:	50                   	push   eax
c0023f7d:	e8 8e 07 ff ff       	call   c0014710 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f82:	83 c4 10             	add    esp,0x10
c0023f85:	ba 5c cd 02 c0       	mov    edx,0xc002cd5c
c0023f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f8e:	89 10                	mov    DWORD PTR [eax],edx
c0023f90:	90                   	nop
c0023f91:	83 c4 0c             	add    esp,0xc
c0023f94:	c3                   	ret    
c0023f95:	90                   	nop

c0023f96 <ATA::flush(bool)>:
c0023f96:	53                   	push   ebx
c0023f97:	83 ec 08             	sub    esp,0x8
c0023f9a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023f9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023fa3:	19 c0                	sbb    eax,eax
c0023fa5:	83 e0 fd             	and    eax,0xfffffffd
c0023fa8:	05 ea 00 00 00       	add    eax,0xea
c0023fad:	50                   	push   eax
c0023fae:	6a 07                	push   0x7
c0023fb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fb7:	50                   	push   eax
c0023fb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fbe:	e8 dd ef ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fc3:	83 c4 0c             	add    esp,0xc
c0023fc6:	6a 00                	push   0x0
c0023fc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fcf:	50                   	push   eax
c0023fd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fd6:	e8 71 fb ff ff       	call   c0023b4c <IDE::polling(unsigned char, unsigned int)>
c0023fdb:	83 c4 18             	add    esp,0x18
c0023fde:	5b                   	pop    ebx
c0023fdf:	c3                   	ret    

c0023fe0 <ATA::readyForCommand()>:
c0023fe0:	56                   	push   esi
c0023fe1:	53                   	push   ebx
c0023fe2:	31 db                	xor    ebx,ebx
c0023fe4:	50                   	push   eax
c0023fe5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023fe9:	50                   	push   eax
c0023fea:	6a 0c                	push   0xc
c0023fec:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023ff3:	50                   	push   eax
c0023ff4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023ffa:	e8 61 f0 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c0023fff:	83 c4 10             	add    esp,0x10
c0024002:	a8 88                	test   al,0x88
c0024004:	74 23                	je     c0024029 <ATA::readyForCommand()+0x49>
c0024006:	43                   	inc    ebx
c0024007:	83 fb 63             	cmp    ebx,0x63
c002400a:	7e dd                	jle    c0023fe9 <ATA::readyForCommand()+0x9>
c002400c:	51                   	push   ecx
c002400d:	51                   	push   ecx
c002400e:	6a 00                	push   0x0
c0024010:	68 40 42 0f 00       	push   0xf4240
c0024015:	e8 9a a2 ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c002401a:	83 c4 10             	add    esp,0x10
c002401d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024023:	75 c4                	jne    c0023fe9 <ATA::readyForCommand()+0x9>
c0024025:	31 c0                	xor    eax,eax
c0024027:	eb 02                	jmp    c002402b <ATA::readyForCommand()+0x4b>
c0024029:	b0 01                	mov    al,0x1
c002402b:	5a                   	pop    edx
c002402c:	5b                   	pop    ebx
c002402d:	5e                   	pop    esi
c002402e:	c3                   	ret    
c002402f:	90                   	nop

c0024030 <ATA::access(unsigned long long, int, void*, bool)>:
c0024030:	55                   	push   ebp
c0024031:	57                   	push   edi
c0024032:	56                   	push   esi
c0024033:	53                   	push   ebx
c0024034:	83 ec 2c             	sub    esp,0x2c
c0024037:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002403b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002403f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024043:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024047:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002404b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002404f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024053:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024059:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002405d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024063:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024067:	c1 e0 06             	shl    eax,0x6
c002406a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024072:	74 5d                	je     c00240d1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024074:	89 fa                	mov    edx,edi
c0024076:	89 f0                	mov    eax,esi
c0024078:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002407c:	c1 ea 1c             	shr    edx,0x1c
c002407f:	89 d1                	mov    ecx,edx
c0024081:	09 c1                	or     ecx,eax
c0024083:	74 25                	je     c00240aa <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024085:	31 ed                	xor    ebp,ebp
c0024087:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002408e:	89 fa                	mov    edx,edi
c0024090:	89 f0                	mov    eax,esi
c0024092:	0f ad d0             	shrd   eax,edx,cl
c0024095:	d3 ea                	shr    edx,cl
c0024097:	f6 c1 20             	test   cl,0x20
c002409a:	74 02                	je     c002409e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002409c:	89 d0                	mov    eax,edx
c002409e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00240a2:	45                   	inc    ebp
c00240a3:	83 fd 06             	cmp    ebp,0x6
c00240a6:	75 df                	jne    c0024087 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00240a8:	eb 76                	jmp    c0024120 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00240aa:	89 f0                	mov    eax,esi
c00240ac:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00240b1:	89 fa                	mov    edx,edi
c00240b3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240ba:	0f ac d0 10          	shrd   eax,edx,0x10
c00240be:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240c3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00240c7:	c1 ee 18             	shr    esi,0x18
c00240ca:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00240cf:	eb 56                	jmp    c0024127 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00240d1:	6a 00                	push   0x0
c00240d3:	6a 3f                	push   0x3f
c00240d5:	57                   	push   edi
c00240d6:	56                   	push   esi
c00240d7:	e8 90 29 00 00       	call   c0026a6c <__umoddi3>
c00240dc:	83 c4 10             	add    esp,0x10
c00240df:	40                   	inc    eax
c00240e0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00240e4:	6a 00                	push   0x0
c00240e6:	68 f0 03 00 00       	push   0x3f0
c00240eb:	57                   	push   edi
c00240ec:	56                   	push   esi
c00240ed:	e8 7a 28 00 00       	call   c002696c <__udivdi3>
c00240f2:	83 c4 10             	add    esp,0x10
c00240f5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00240fa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024101:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024106:	6a 00                	push   0x0
c0024108:	6a 3f                	push   0x3f
c002410a:	57                   	push   edi
c002410b:	56                   	push   esi
c002410c:	e8 5b 28 00 00       	call   c002696c <__udivdi3>
c0024111:	83 c4 10             	add    esp,0x10
c0024114:	89 c6                	mov    esi,eax
c0024116:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002411b:	83 e6 0f             	and    esi,0xf
c002411e:	eb 07                	jmp    c0024127 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024120:	31 f6                	xor    esi,esi
c0024122:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024127:	bf 01 00 00 00       	mov    edi,0x1
c002412c:	50                   	push   eax
c002412d:	6a 00                	push   0x0
c002412f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024136:	50                   	push   eax
c0024137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002413b:	e8 6c f0 ff ff       	call   c00231ac <IDE::enableIRQs(unsigned char, bool)>
c0024140:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024143:	e8 98 fe ff ff       	call   c0023fe0 <ATA::readyForCommand()>
c0024148:	83 c4 10             	add    esp,0x10
c002414b:	84 c0                	test   al,al
c002414d:	0f 84 5a 02 00 00    	je     c00243ad <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024153:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024159:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002415f:	c1 e0 04             	shl    eax,0x4
c0024162:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024169:	09 c6                	or     esi,eax
c002416b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024170:	75 05                	jne    c0024177 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024172:	83 ce a0             	or     esi,0xffffffa0
c0024175:	eb 03                	jmp    c002417a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024177:	83 ce e0             	or     esi,0xffffffe0
c002417a:	89 f0                	mov    eax,esi
c002417c:	0f b6 f0             	movzx  esi,al
c002417f:	56                   	push   esi
c0024180:	6a 06                	push   0x6
c0024182:	51                   	push   ecx
c0024183:	52                   	push   edx
c0024184:	e8 17 ee ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024189:	83 c4 10             	add    esp,0x10
c002418c:	6a 00                	push   0x0
c002418e:	6a 01                	push   0x1
c0024190:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024197:	50                   	push   eax
c0024198:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002419e:	e8 fd ed ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241a3:	83 c4 10             	add    esp,0x10
c00241a6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241ab:	75 6e                	jne    c002421b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00241ad:	6a 00                	push   0x0
c00241af:	6a 08                	push   0x8
c00241b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241b8:	50                   	push   eax
c00241b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241bf:	e8 dc ed ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241c4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00241c9:	50                   	push   eax
c00241ca:	6a 09                	push   0x9
c00241cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241d3:	50                   	push   eax
c00241d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241da:	e8 c1 ed ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241df:	83 c4 20             	add    esp,0x20
c00241e2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00241e7:	50                   	push   eax
c00241e8:	6a 0a                	push   0xa
c00241ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f1:	50                   	push   eax
c00241f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241f8:	e8 a3 ed ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241fd:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024202:	50                   	push   eax
c0024203:	6a 0b                	push   0xb
c0024205:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002420c:	50                   	push   eax
c002420d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024213:	e8 88 ed ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024218:	83 c4 20             	add    esp,0x20
c002421b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024220:	50                   	push   eax
c0024221:	6a 02                	push   0x2
c0024223:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002422a:	50                   	push   eax
c002422b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024231:	e8 6a ed ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024236:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002423b:	50                   	push   eax
c002423c:	6a 03                	push   0x3
c002423e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024245:	50                   	push   eax
c0024246:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002424c:	e8 4f ed ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024251:	83 c4 20             	add    esp,0x20
c0024254:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024259:	50                   	push   eax
c002425a:	6a 04                	push   0x4
c002425c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024263:	50                   	push   eax
c0024264:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002426a:	e8 31 ed ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002426f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024274:	50                   	push   eax
c0024275:	6a 05                	push   0x5
c0024277:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002427e:	50                   	push   eax
c002427f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024285:	e8 16 ed ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428a:	83 c4 20             	add    esp,0x20
c002428d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024292:	0f 94 c0             	sete   al
c0024295:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002429a:	74 09                	je     c00242a5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002429c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00242a3:	eb 07                	jmp    c00242ac <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00242a5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00242ac:	0f b6 c0             	movzx  eax,al
c00242af:	50                   	push   eax
c00242b0:	6a 07                	push   0x7
c00242b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b9:	50                   	push   eax
c00242ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c0:	e8 db ec ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00242c9:	83 c4 10             	add    esp,0x10
c00242cc:	85 f6                	test   esi,esi
c00242ce:	0f 84 ba 00 00 00    	je     c002438e <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00242d4:	50                   	push   eax
c00242d5:	6a 01                	push   0x1
c00242d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242de:	50                   	push   eax
c00242df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e5:	e8 62 f8 ff ff       	call   c0023b4c <IDE::polling(unsigned char, unsigned int)>
c00242ea:	83 c4 10             	add    esp,0x10
c00242ed:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00242f3:	84 c0                	test   al,al
c00242f5:	74 2c                	je     c0024323 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00242f7:	0f b6 f8             	movzx  edi,al
c00242fa:	0f b6 d2             	movzx  edx,dl
c00242fd:	57                   	push   edi
c00242fe:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024305:	50                   	push   eax
c0024306:	52                   	push   edx
c0024307:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002430d:	e8 a4 f6 ff ff       	call   c00239b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024312:	c7 04 24 34 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd34
c0024319:	e8 a8 eb fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c002431e:	e9 87 00 00 00       	jmp    c00243aa <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024323:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024328:	74 33                	je     c002435d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002432a:	31 ed                	xor    ebp,ebp
c002432c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024330:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024334:	50                   	push   eax
c0024335:	50                   	push   eax
c0024336:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002433d:	50                   	push   eax
c002433e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024344:	e8 45 ec ff ff       	call   c0022f8e <IDE::getBase(unsigned char)>
c0024349:	89 c2                	mov    edx,eax
c002434b:	89 f8                	mov    eax,edi
c002434d:	66 ef                	out    dx,ax
c002434f:	45                   	inc    ebp
c0024350:	83 c4 10             	add    esp,0x10
c0024353:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024359:	75 d1                	jne    c002432c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002435b:	eb 23                	jmp    c0024380 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002435d:	0f b6 d2             	movzx  edx,dl
c0024360:	51                   	push   ecx
c0024361:	51                   	push   ecx
c0024362:	52                   	push   edx
c0024363:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024369:	e8 20 ec ff ff       	call   c0022f8e <IDE::getBase(unsigned char)>
c002436e:	b9 00 01 00 00       	mov    ecx,0x100
c0024373:	89 c2                	mov    edx,eax
c0024375:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024379:	fc                   	cld    
c002437a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002437d:	83 c4 10             	add    esp,0x10
c0024380:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024388:	4e                   	dec    esi
c0024389:	e9 3e ff ff ff       	jmp    c00242cc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002438e:	31 ff                	xor    edi,edi
c0024390:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024395:	74 16                	je     c00243ad <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024397:	50                   	push   eax
c0024398:	50                   	push   eax
c0024399:	31 c0                	xor    eax,eax
c002439b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00243a0:	0f 94 c0             	sete   al
c00243a3:	50                   	push   eax
c00243a4:	53                   	push   ebx
c00243a5:	e8 ec fb ff ff       	call   c0023f96 <ATA::flush(bool)>
c00243aa:	83 c4 10             	add    esp,0x10
c00243ad:	83 c4 2c             	add    esp,0x2c
c00243b0:	89 f8                	mov    eax,edi
c00243b2:	5b                   	pop    ebx
c00243b3:	5e                   	pop    esi
c00243b4:	5f                   	pop    edi
c00243b5:	5d                   	pop    ebp
c00243b6:	c3                   	ret    
c00243b7:	90                   	nop

c00243b8 <ATA::read(unsigned long long, int, void*)>:
c00243b8:	57                   	push   edi
c00243b9:	b8 04 00 00 00       	mov    eax,0x4
c00243be:	56                   	push   esi
c00243bf:	53                   	push   ebx
c00243c0:	83 ec 10             	sub    esp,0x10
c00243c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00243c7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00243cb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00243ce:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00243d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00243d6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00243dc:	77 3b                	ja     c0024419 <ATA::read(unsigned long long, int, void*)+0x61>
c00243de:	b8 06 00 00 00       	mov    eax,0x6
c00243e3:	85 d2                	test   edx,edx
c00243e5:	74 32                	je     c0024419 <ATA::read(unsigned long long, int, void*)+0x61>
c00243e7:	50                   	push   eax
c00243e8:	50                   	push   eax
c00243e9:	6a 00                	push   0x0
c00243eb:	52                   	push   edx
c00243ec:	53                   	push   ebx
c00243ed:	57                   	push   edi
c00243ee:	56                   	push   esi
c00243ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00243f3:	e8 38 fc ff ff       	call   c0024030 <ATA::access(unsigned long long, int, void*, bool)>
c00243f8:	83 c4 20             	add    esp,0x20
c00243fb:	85 c0                	test   eax,eax
c00243fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024401:	75 11                	jne    c0024414 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024403:	01 1d 28 29 03 c0    	add    DWORD PTR ds:0xc0032928,ebx
c0024409:	e8 c2 c5 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c002440e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024412:	eb 05                	jmp    c0024419 <ATA::read(unsigned long long, int, void*)+0x61>
c0024414:	b8 01 00 00 00       	mov    eax,0x1
c0024419:	83 c4 10             	add    esp,0x10
c002441c:	5b                   	pop    ebx
c002441d:	5e                   	pop    esi
c002441e:	5f                   	pop    edi
c002441f:	c3                   	ret    

c0024420 <ATA::write(unsigned long long, int, void*)>:
c0024420:	57                   	push   edi
c0024421:	b8 04 00 00 00       	mov    eax,0x4
c0024426:	56                   	push   esi
c0024427:	53                   	push   ebx
c0024428:	83 ec 10             	sub    esp,0x10
c002442b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002442f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024433:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024436:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002443a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002443e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024444:	77 3b                	ja     c0024481 <ATA::write(unsigned long long, int, void*)+0x61>
c0024446:	b8 06 00 00 00       	mov    eax,0x6
c002444b:	85 d2                	test   edx,edx
c002444d:	74 32                	je     c0024481 <ATA::write(unsigned long long, int, void*)+0x61>
c002444f:	50                   	push   eax
c0024450:	50                   	push   eax
c0024451:	6a 01                	push   0x1
c0024453:	52                   	push   edx
c0024454:	53                   	push   ebx
c0024455:	57                   	push   edi
c0024456:	56                   	push   esi
c0024457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002445b:	e8 d0 fb ff ff       	call   c0024030 <ATA::access(unsigned long long, int, void*, bool)>
c0024460:	83 c4 20             	add    esp,0x20
c0024463:	85 c0                	test   eax,eax
c0024465:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024469:	75 11                	jne    c002447c <ATA::write(unsigned long long, int, void*)+0x5c>
c002446b:	01 1d 24 29 03 c0    	add    DWORD PTR ds:0xc0032924,ebx
c0024471:	e8 5a c5 fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024476:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002447a:	eb 05                	jmp    c0024481 <ATA::write(unsigned long long, int, void*)+0x61>
c002447c:	b8 01 00 00 00       	mov    eax,0x1
c0024481:	83 c4 10             	add    esp,0x10
c0024484:	5b                   	pop    ebx
c0024485:	5e                   	pop    esi
c0024486:	5f                   	pop    edi
c0024487:	c3                   	ret    

c0024488 <ATA::detectCHS()>:
c0024488:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002448c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024492:	c1 e0 06             	shl    eax,0x6
c0024495:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002449b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00244a5:	c7 44 24 04 3f cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cd3f
c00244ad:	e9 b9 60 ff ff       	jmp    c001a56b <Krnl::panic(char const*)>

c00244b2 <ATA::open(int, int, void*)>:
c00244b2:	53                   	push   ebx
c00244b3:	83 ec 08             	sub    esp,0x8
c00244b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00244be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244c2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00244c8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244ce:	c1 e0 06             	shl    eax,0x6
c00244d1:	01 d0                	add    eax,edx
c00244d3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00244da:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00244e0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00244e7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244f1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00244f7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00244fe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024505:	75 0c                	jne    c0024513 <ATA::open(int, int, void*)+0x61>
c0024507:	83 ec 0c             	sub    esp,0xc
c002450a:	53                   	push   ebx
c002450b:	e8 78 ff ff ff       	call   c0024488 <ATA::detectCHS()>
c0024510:	83 c4 10             	add    esp,0x10
c0024513:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024519:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002451f:	c1 e0 06             	shl    eax,0x6
c0024522:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024529:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024533:	d1 e8                	shr    eax,1
c0024535:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002453b:	6a 04                	push   0x4
c002453d:	6a 0c                	push   0xc
c002453f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024546:	50                   	push   eax
c0024547:	52                   	push   edx
c0024548:	e8 53 ea ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002454d:	90                   	nop
c002454e:	90                   	nop
c002454f:	6a 00                	push   0x0
c0024551:	6a 0c                	push   0xc
c0024553:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002455a:	50                   	push   eax
c002455b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024561:	e8 3a ea ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024566:	83 c4 14             	add    esp,0x14
c0024569:	53                   	push   ebx
c002456a:	e8 09 02 ff ff       	call   c0014778 <PhysicalDisk::startCache()>
c002456f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024572:	e8 77 23 ff ff       	call   c00168ee <createPartitionsForDisk(PhysicalDisk*)>
c0024577:	31 c0                	xor    eax,eax
c0024579:	83 c4 18             	add    esp,0x18
c002457c:	5b                   	pop    ebx
c002457d:	c3                   	ret    

c002457e <ATAPI::write(unsigned long long, int, void*)>:
c002457e:	b8 03 00 00 00       	mov    eax,0x3
c0024583:	c3                   	ret    

c0024584 <ATAPI::close(int, int, void*)>:
c0024584:	83 ec 0c             	sub    esp,0xc
c0024587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002458b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024591:	85 c0                	test   eax,eax
c0024593:	74 0c                	je     c00245a1 <ATAPI::close(int, int, void*)+0x1d>
c0024595:	83 ec 0c             	sub    esp,0xc
c0024598:	8b 10                	mov    edx,DWORD PTR [eax]
c002459a:	50                   	push   eax
c002459b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002459e:	83 c4 10             	add    esp,0x10
c00245a1:	31 c0                	xor    eax,eax
c00245a3:	83 c4 0c             	add    esp,0xc
c00245a6:	c3                   	ret    
c00245a7:	90                   	nop

c00245a8 <ATAPI::ATAPI()>:
c00245a8:	83 ec 0c             	sub    esp,0xc
c00245ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245af:	83 ec 04             	sub    esp,0x4
c00245b2:	68 00 08 00 00       	push   0x800
c00245b7:	68 79 ce 02 c0       	push   0xc002ce79
c00245bc:	50                   	push   eax
c00245bd:	e8 4e 01 ff ff       	call   c0014710 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00245c2:	83 c4 10             	add    esp,0x10
c00245c5:	ba 94 cd 02 c0       	mov    edx,0xc002cd94
c00245ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245ce:	89 10                	mov    DWORD PTR [eax],edx
c00245d0:	90                   	nop
c00245d1:	83 c4 0c             	add    esp,0xc
c00245d4:	c3                   	ret    
c00245d5:	90                   	nop

c00245d6 <ATAPI::readyForCommand()>:
c00245d6:	56                   	push   esi
c00245d7:	53                   	push   ebx
c00245d8:	31 db                	xor    ebx,ebx
c00245da:	50                   	push   eax
c00245db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00245df:	50                   	push   eax
c00245e0:	6a 0c                	push   0xc
c00245e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00245e9:	50                   	push   eax
c00245ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00245f0:	e8 6b ea ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c00245f5:	83 c4 10             	add    esp,0x10
c00245f8:	a8 88                	test   al,0x88
c00245fa:	74 23                	je     c002461f <ATAPI::readyForCommand()+0x49>
c00245fc:	43                   	inc    ebx
c00245fd:	83 fb 63             	cmp    ebx,0x63
c0024600:	7e dd                	jle    c00245df <ATAPI::readyForCommand()+0x9>
c0024602:	51                   	push   ecx
c0024603:	51                   	push   ecx
c0024604:	6a 00                	push   0x0
c0024606:	68 40 42 0f 00       	push   0xf4240
c002460b:	e8 a4 9c ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c0024610:	83 c4 10             	add    esp,0x10
c0024613:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024619:	75 c4                	jne    c00245df <ATAPI::readyForCommand()+0x9>
c002461b:	31 c0                	xor    eax,eax
c002461d:	eb 02                	jmp    c0024621 <ATAPI::readyForCommand()+0x4b>
c002461f:	b0 01                	mov    al,0x1
c0024621:	5a                   	pop    edx
c0024622:	5b                   	pop    ebx
c0024623:	5e                   	pop    esi
c0024624:	c3                   	ret    
c0024625:	90                   	nop

c0024626 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024626:	55                   	push   ebp
c0024627:	57                   	push   edi
c0024628:	56                   	push   esi
c0024629:	53                   	push   ebx
c002462a:	83 ec 20             	sub    esp,0x20
c002462d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024631:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024635:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024639:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002463d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024641:	6a 01                	push   0x1
c0024643:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002464a:	50                   	push   eax
c002464b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024651:	e8 56 eb ff ff       	call   c00231ac <IDE::enableIRQs(unsigned char, bool)>
c0024656:	5e                   	pop    esi
c0024657:	58                   	pop    eax
c0024658:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002465f:	50                   	push   eax
c0024660:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024666:	e8 0f e9 ff ff       	call   c0022f7a <IDE::prepareInterrupt(unsigned char)>
c002466b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002466e:	e8 63 ff ff ff       	call   c00245d6 <ATAPI::readyForCommand()>
c0024673:	83 c4 10             	add    esp,0x10
c0024676:	84 c0                	test   al,al
c0024678:	75 0a                	jne    c0024684 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002467a:	bb 01 00 00 00       	mov    ebx,0x1
c002467f:	e9 57 02 00 00       	jmp    c00248db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024684:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002468a:	c1 e0 04             	shl    eax,0x4
c002468d:	0f b6 c0             	movzx  eax,al
c0024690:	50                   	push   eax
c0024691:	6a 06                	push   0x6
c0024693:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002469a:	50                   	push   eax
c002469b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a1:	e8 fa e8 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246a6:	6a 00                	push   0x0
c00246a8:	6a 01                	push   0x1
c00246aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b1:	50                   	push   eax
c00246b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246b8:	e8 e3 e8 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246bd:	83 c4 20             	add    esp,0x20
c00246c0:	0f b6 c3             	movzx  eax,bl
c00246c3:	0f b6 df             	movzx  ebx,bh
c00246c6:	50                   	push   eax
c00246c7:	6a 04                	push   0x4
c00246c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d0:	50                   	push   eax
c00246d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d7:	e8 c4 e8 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246dc:	53                   	push   ebx
c00246dd:	6a 05                	push   0x5
c00246df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e6:	50                   	push   eax
c00246e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ed:	e8 ae e8 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246f2:	83 c4 20             	add    esp,0x20
c00246f5:	68 a0 00 00 00       	push   0xa0
c00246fa:	6a 07                	push   0x7
c00246fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024703:	50                   	push   eax
c0024704:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002470a:	e8 91 e8 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002470f:	83 c4 0c             	add    esp,0xc
c0024712:	6a 01                	push   0x1
c0024714:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002471b:	50                   	push   eax
c002471c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024722:	e8 25 f4 ff ff       	call   c0023b4c <IDE::polling(unsigned char, unsigned int)>
c0024727:	83 c4 10             	add    esp,0x10
c002472a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024730:	84 c0                	test   al,al
c0024732:	74 23                	je     c0024757 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024734:	0f b6 d8             	movzx  ebx,al
c0024737:	0f b6 d2             	movzx  edx,dl
c002473a:	53                   	push   ebx
c002473b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024742:	50                   	push   eax
c0024743:	52                   	push   edx
c0024744:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002474a:	e8 67 f2 ff ff       	call   c00239b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002474f:	83 c4 10             	add    esp,0x10
c0024752:	e9 84 01 00 00       	jmp    c00248db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024757:	0f b6 d2             	movzx  edx,dl
c002475a:	53                   	push   ebx
c002475b:	53                   	push   ebx
c002475c:	52                   	push   edx
c002475d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024763:	e8 26 e8 ff ff       	call   c0022f8e <IDE::getBase(unsigned char)>
c0024768:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002476c:	b9 06 00 00 00       	mov    ecx,0x6
c0024771:	89 c2                	mov    edx,eax
c0024773:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024776:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002477a:	83 c4 10             	add    esp,0x10
c002477d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024783:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002478a:	85 db                	test   ebx,ebx
c002478c:	0f 84 ec 00 00 00    	je     c002487e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024792:	51                   	push   ecx
c0024793:	51                   	push   ecx
c0024794:	52                   	push   edx
c0024795:	50                   	push   eax
c0024796:	e8 73 e9 ff ff       	call   c002310e <IDE::waitInterrupt(unsigned char)>
c002479b:	83 c4 10             	add    esp,0x10
c002479e:	84 c0                	test   al,al
c00247a0:	0f 84 d4 fe ff ff    	je     c002467a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247a6:	56                   	push   esi
c00247a7:	56                   	push   esi
c00247a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247af:	50                   	push   eax
c00247b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b6:	e8 bf e7 ff ff       	call   c0022f7a <IDE::prepareInterrupt(unsigned char)>
c00247bb:	83 c4 0c             	add    esp,0xc
c00247be:	6a 04                	push   0x4
c00247c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247c7:	50                   	push   eax
c00247c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ce:	e8 8d e8 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c00247d3:	83 c4 0c             	add    esp,0xc
c00247d6:	89 c6                	mov    esi,eax
c00247d8:	6a 05                	push   0x5
c00247da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e1:	50                   	push   eax
c00247e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e8:	e8 73 e8 ff ff       	call   c0023060 <IDE::read(unsigned char, unsigned char)>
c00247ed:	89 f1                	mov    ecx,esi
c00247ef:	0f b6 c0             	movzx  eax,al
c00247f2:	0f b6 f1             	movzx  esi,cl
c00247f5:	c1 e0 08             	shl    eax,0x8
c00247f8:	09 c6                	or     esi,eax
c00247fa:	d1 fe                	sar    esi,1
c00247fc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024800:	83 c4 10             	add    esp,0x10
c0024803:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024808:	74 41                	je     c002484b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002480a:	31 c9                	xor    ecx,ecx
c002480c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024812:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024819:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002481d:	75 0a                	jne    c0024829 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002481f:	01 c9                	add    ecx,ecx
c0024821:	01 cd                	add    ebp,ecx
c0024823:	4b                   	dec    ebx
c0024824:	e9 54 ff ff ff       	jmp    c002477d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024829:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002482e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024832:	51                   	push   ecx
c0024833:	51                   	push   ecx
c0024834:	52                   	push   edx
c0024835:	50                   	push   eax
c0024836:	e8 53 e7 ff ff       	call   c0022f8e <IDE::getBase(unsigned char)>
c002483b:	89 c2                	mov    edx,eax
c002483d:	89 f0                	mov    eax,esi
c002483f:	66 ef                	out    dx,ax
c0024841:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024845:	83 c4 10             	add    esp,0x10
c0024848:	41                   	inc    ecx
c0024849:	eb c1                	jmp    c002480c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002484b:	31 f6                	xor    esi,esi
c002484d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024853:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002485a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002485e:	75 06                	jne    c0024866 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024860:	01 f6                	add    esi,esi
c0024862:	01 f5                	add    ebp,esi
c0024864:	eb bd                	jmp    c0024823 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024866:	51                   	push   ecx
c0024867:	51                   	push   ecx
c0024868:	52                   	push   edx
c0024869:	50                   	push   eax
c002486a:	e8 1f e7 ff ff       	call   c0022f8e <IDE::getBase(unsigned char)>
c002486f:	89 c2                	mov    edx,eax
c0024871:	66 ed                	in     ax,dx
c0024873:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024878:	83 c4 10             	add    esp,0x10
c002487b:	46                   	inc    esi
c002487c:	eb cf                	jmp    c002484d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002487e:	51                   	push   ecx
c002487f:	51                   	push   ecx
c0024880:	52                   	push   edx
c0024881:	50                   	push   eax
c0024882:	e8 87 e8 ff ff       	call   c002310e <IDE::waitInterrupt(unsigned char)>
c0024887:	83 c4 10             	add    esp,0x10
c002488a:	84 c0                	test   al,al
c002488c:	0f 84 e8 fd ff ff    	je     c002467a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024892:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024897:	52                   	push   edx
c0024898:	52                   	push   edx
c0024899:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248a0:	50                   	push   eax
c00248a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248a7:	e8 ce e6 ff ff       	call   c0022f7a <IDE::prepareInterrupt(unsigned char)>
c00248ac:	83 c4 10             	add    esp,0x10
c00248af:	50                   	push   eax
c00248b0:	50                   	push   eax
c00248b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248b8:	50                   	push   eax
c00248b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248bf:	e8 ca e6 ff ff       	call   c0022f8e <IDE::getBase(unsigned char)>
c00248c4:	8d 50 07             	lea    edx,[eax+0x7]
c00248c7:	ec                   	in     al,dx
c00248c8:	83 c4 10             	add    esp,0x10
c00248cb:	a8 88                	test   al,0x88
c00248cd:	74 0a                	je     c00248d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00248cf:	4b                   	dec    ebx
c00248d0:	75 dd                	jne    c00248af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00248d2:	bb 02 00 00 00       	mov    ebx,0x2
c00248d7:	eb 02                	jmp    c00248db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248d9:	31 db                	xor    ebx,ebx
c00248db:	83 c4 1c             	add    esp,0x1c
c00248de:	89 d8                	mov    eax,ebx
c00248e0:	5b                   	pop    ebx
c00248e1:	5e                   	pop    esi
c00248e2:	5f                   	pop    edi
c00248e3:	5d                   	pop    ebp
c00248e4:	c3                   	ret    
c00248e5:	90                   	nop

c00248e6 <ATAPI::diskRemoved()>:
c00248e6:	83 ec 18             	sub    esp,0x18
c00248e9:	68 85 ce 02 c0       	push   0xc002ce85
c00248ee:	e8 d3 e5 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00248f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248f7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00248fe:	83 c4 1c             	add    esp,0x1c
c0024901:	c3                   	ret    

c0024902 <ATAPI::eject()>:
c0024902:	57                   	push   edi
c0024903:	b9 03 00 00 00       	mov    ecx,0x3
c0024908:	53                   	push   ebx
c0024909:	83 ec 14             	sub    esp,0x14
c002490c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024910:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024914:	fc                   	cld    
c0024915:	31 c0                	xor    eax,eax
c0024917:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024919:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002491e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024923:	50                   	push   eax
c0024924:	50                   	push   eax
c0024925:	6a 00                	push   0x0
c0024927:	6a 00                	push   0x0
c0024929:	6a 00                	push   0x0
c002492b:	6a 02                	push   0x2
c002492d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024931:	50                   	push   eax
c0024932:	53                   	push   ebx
c0024933:	e8 ee fc ff ff       	call   c0024626 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024938:	83 c4 14             	add    esp,0x14
c002493b:	53                   	push   ebx
c002493c:	e8 a5 ff ff ff       	call   c00248e6 <ATAPI::diskRemoved()>
c0024941:	83 c4 24             	add    esp,0x24
c0024944:	31 c0                	xor    eax,eax
c0024946:	5b                   	pop    ebx
c0024947:	5f                   	pop    edi
c0024948:	c3                   	ret    
c0024949:	90                   	nop

c002494a <ATAPI::diskInserted()>:
c002494a:	53                   	push   ebx
c002494b:	83 ec 14             	sub    esp,0x14
c002494e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024952:	68 9c ce 02 c0       	push   0xc002ce9c
c0024957:	e8 6a e5 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c002495c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024963:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024966:	e8 0d fe fe ff       	call   c0014778 <PhysicalDisk::startCache()>
c002496b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002496f:	83 c4 18             	add    esp,0x18
c0024972:	5b                   	pop    ebx
c0024973:	e9 76 1f ff ff       	jmp    c00168ee <createPartitionsForDisk(PhysicalDisk*)>

c0024978 <ATAPI::detectMedia()>:
c0024978:	56                   	push   esi
c0024979:	53                   	push   ebx
c002497a:	83 ec 28             	sub    esp,0x28
c002497d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024981:	6a 0c                	push   0xc
c0024983:	6a 00                	push   0x0
c0024985:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024989:	56                   	push   esi
c002498a:	e8 e9 bd fd ff       	call   c0000778 <memset>
c002498f:	58                   	pop    eax
c0024990:	5a                   	pop    edx
c0024991:	6a 00                	push   0x0
c0024993:	6a 00                	push   0x0
c0024995:	6a 00                	push   0x0
c0024997:	6a 00                	push   0x0
c0024999:	56                   	push   esi
c002499a:	53                   	push   ebx
c002499b:	e8 86 fc ff ff       	call   c0024626 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249a0:	83 c4 1c             	add    esp,0x1c
c00249a3:	6a 0c                	push   0xc
c00249a5:	6a 00                	push   0x0
c00249a7:	56                   	push   esi
c00249a8:	e8 cb bd fd ff       	call   c0000778 <memset>
c00249ad:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00249b2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00249b7:	59                   	pop    ecx
c00249b8:	58                   	pop    eax
c00249b9:	6a 01                	push   0x1
c00249bb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00249bf:	50                   	push   eax
c00249c0:	6a 00                	push   0x0
c00249c2:	6a 12                	push   0x12
c00249c4:	56                   	push   esi
c00249c5:	53                   	push   ebx
c00249c6:	e8 5b fc ff ff       	call   c0024626 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249cb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00249cf:	83 c4 20             	add    esp,0x20
c00249d2:	83 e0 7f             	and    eax,0x7f
c00249d5:	3c 70                	cmp    al,0x70
c00249d7:	74 15                	je     c00249ee <ATAPI::detectMedia()+0x76>
c00249d9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249e0:	75 0c                	jne    c00249ee <ATAPI::detectMedia()+0x76>
c00249e2:	83 ec 0c             	sub    esp,0xc
c00249e5:	53                   	push   ebx
c00249e6:	e8 5f ff ff ff       	call   c002494a <ATAPI::diskInserted()>
c00249eb:	83 c4 10             	add    esp,0x10
c00249ee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00249f2:	83 e0 0f             	and    eax,0xf
c00249f5:	3c 02                	cmp    al,0x2
c00249f7:	75 1b                	jne    c0024a14 <ATAPI::detectMedia()+0x9c>
c00249f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00249fe:	75 2d                	jne    c0024a2d <ATAPI::detectMedia()+0xb5>
c0024a00:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a07:	74 24                	je     c0024a2d <ATAPI::detectMedia()+0xb5>
c0024a09:	83 ec 0c             	sub    esp,0xc
c0024a0c:	53                   	push   ebx
c0024a0d:	e8 d4 fe ff ff       	call   c00248e6 <ATAPI::diskRemoved()>
c0024a12:	eb 16                	jmp    c0024a2a <ATAPI::detectMedia()+0xb2>
c0024a14:	84 c0                	test   al,al
c0024a16:	75 15                	jne    c0024a2d <ATAPI::detectMedia()+0xb5>
c0024a18:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a1f:	75 0c                	jne    c0024a2d <ATAPI::detectMedia()+0xb5>
c0024a21:	83 ec 0c             	sub    esp,0xc
c0024a24:	53                   	push   ebx
c0024a25:	e8 20 ff ff ff       	call   c002494a <ATAPI::diskInserted()>
c0024a2a:	83 c4 10             	add    esp,0x10
c0024a2d:	83 c4 24             	add    esp,0x24
c0024a30:	5b                   	pop    ebx
c0024a31:	5e                   	pop    esi
c0024a32:	c3                   	ret    
c0024a33:	90                   	nop

c0024a34 <ATAPI::open(int, int, void*)>:
c0024a34:	53                   	push   ebx
c0024a35:	83 ec 08             	sub    esp,0x8
c0024a38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a44:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a4a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a50:	c1 e0 06             	shl    eax,0x6
c0024a53:	01 d0                	add    eax,edx
c0024a55:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a5c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a62:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a69:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a73:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a79:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a80:	6a 04                	push   0x4
c0024a82:	6a 0c                	push   0xc
c0024a84:	51                   	push   ecx
c0024a85:	52                   	push   edx
c0024a86:	e8 15 e5 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a8b:	90                   	nop
c0024a8c:	90                   	nop
c0024a8d:	6a 00                	push   0x0
c0024a8f:	6a 0c                	push   0xc
c0024a91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a98:	50                   	push   eax
c0024a99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a9f:	e8 fc e4 ff ff       	call   c0022fa0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aa4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024aab:	83 c4 14             	add    esp,0x14
c0024aae:	53                   	push   ebx
c0024aaf:	e8 c4 fe ff ff       	call   c0024978 <ATAPI::detectMedia()>
c0024ab4:	31 c0                	xor    eax,eax
c0024ab6:	83 c4 18             	add    esp,0x18
c0024ab9:	5b                   	pop    ebx
c0024aba:	c3                   	ret    
c0024abb:	90                   	nop

c0024abc <ATAPI::read(unsigned long long, int, void*)>:
c0024abc:	55                   	push   ebp
c0024abd:	57                   	push   edi
c0024abe:	56                   	push   esi
c0024abf:	53                   	push   ebx
c0024ac0:	83 ec 1c             	sub    esp,0x1c
c0024ac3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024ac7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024acb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024acf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024ad6:	74 41                	je     c0024b19 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024ad8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024adc:	b9 03 00 00 00       	mov    ecx,0x3
c0024ae1:	fc                   	cld    
c0024ae2:	31 c0                	xor    eax,eax
c0024ae4:	86 fb                	xchg   bl,bh
c0024ae6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ae8:	c1 c3 10             	rol    ebx,0x10
c0024aeb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024af0:	89 e8                	mov    eax,ebp
c0024af2:	86 fb                	xchg   bl,bh
c0024af4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024af8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024afc:	50                   	push   eax
c0024afd:	50                   	push   eax
c0024afe:	55                   	push   ebp
c0024aff:	c1 e5 0b             	shl    ebp,0xb
c0024b02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b06:	6a 00                	push   0x0
c0024b08:	55                   	push   ebp
c0024b09:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b0d:	50                   	push   eax
c0024b0e:	56                   	push   esi
c0024b0f:	e8 12 fb ff ff       	call   c0024626 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b14:	83 c4 20             	add    esp,0x20
c0024b17:	eb 1a                	jmp    c0024b33 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b19:	83 ec 0c             	sub    esp,0xc
c0024b1c:	56                   	push   esi
c0024b1d:	e8 56 fe ff ff       	call   c0024978 <ATAPI::detectMedia()>
c0024b22:	83 c4 10             	add    esp,0x10
c0024b25:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b2c:	75 aa                	jne    c0024ad8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b2e:	b8 02 00 00 00       	mov    eax,0x2
c0024b33:	83 c4 1c             	add    esp,0x1c
c0024b36:	5b                   	pop    ebx
c0024b37:	5e                   	pop    esi
c0024b38:	5f                   	pop    edi
c0024b39:	5d                   	pop    ebp
c0024b3a:	c3                   	ret    
c0024b3b:	90                   	nop

c0024b3c <SATA::close(int, int, void*)>:
c0024b3c:	83 ec 0c             	sub    esp,0xc
c0024b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b49:	85 c0                	test   eax,eax
c0024b4b:	74 0c                	je     c0024b59 <SATA::close(int, int, void*)+0x1d>
c0024b4d:	83 ec 0c             	sub    esp,0xc
c0024b50:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b52:	50                   	push   eax
c0024b53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b56:	83 c4 10             	add    esp,0x10
c0024b59:	31 c0                	xor    eax,eax
c0024b5b:	83 c4 0c             	add    esp,0xc
c0024b5e:	c3                   	ret    
c0024b5f:	90                   	nop

c0024b60 <SATA::powerSaving(PowerSavingLevel)>:
c0024b60:	c3                   	ret    
c0024b61:	90                   	nop

c0024b62 <SATA::open(int, int, void*)>:
c0024b62:	56                   	push   esi
c0024b63:	53                   	push   ebx
c0024b64:	50                   	push   eax
c0024b65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b6d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b77:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b7d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b8b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b95:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b9b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ba2:	e8 39 b3 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024ba7:	89 c6                	mov    esi,eax
c0024ba9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024baf:	81 c6 00 10 00 00    	add    esi,0x1000
c0024bb5:	e8 26 b3 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024bba:	39 c6                	cmp    esi,eax
c0024bbc:	74 10                	je     c0024bce <SATA::open(int, int, void*)+0x6c>
c0024bbe:	83 ec 0c             	sub    esp,0xc
c0024bc1:	68 c4 cd 02 c0       	push   0xc002cdc4
c0024bc6:	e8 a0 59 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0024bcb:	83 c4 10             	add    esp,0x10
c0024bce:	83 ec 0c             	sub    esp,0xc
c0024bd1:	6a 02                	push   0x2
c0024bd3:	e8 a3 cf fe ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c0024bd8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024bde:	e8 50 d3 fe ff       	call   c0011f33 <Virt::getAKernelVAS()>
c0024be3:	6a 03                	push   0x3
c0024be5:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024beb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024bf1:	50                   	push   eax
c0024bf2:	e8 5f d7 fe ff       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024bf7:	83 c4 14             	add    esp,0x14
c0024bfa:	53                   	push   ebx
c0024bfb:	e8 78 fb fe ff       	call   c0014778 <PhysicalDisk::startCache()>
c0024c00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c03:	e8 e6 1c ff ff       	call   c00168ee <createPartitionsForDisk(PhysicalDisk*)>
c0024c08:	83 c4 14             	add    esp,0x14
c0024c0b:	31 c0                	xor    eax,eax
c0024c0d:	5b                   	pop    ebx
c0024c0e:	5e                   	pop    esi
c0024c0f:	c3                   	ret    

c0024c10 <SATA::SATA()>:
c0024c10:	83 ec 0c             	sub    esp,0xc
c0024c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c17:	83 ec 04             	sub    esp,0x4
c0024c1a:	68 00 02 00 00       	push   0x200
c0024c1f:	68 d8 cd 02 c0       	push   0xc002cdd8
c0024c24:	50                   	push   eax
c0024c25:	e8 e6 fa fe ff       	call   c0014710 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c2a:	83 c4 10             	add    esp,0x10
c0024c2d:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c0024c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c36:	89 10                	mov    DWORD PTR [eax],edx
c0024c38:	90                   	nop
c0024c39:	83 c4 0c             	add    esp,0xc
c0024c3c:	c3                   	ret    
c0024c3d:	90                   	nop

c0024c3e <SATA::access(unsigned long long, int, void*, bool)>:
c0024c3e:	55                   	push   ebp
c0024c3f:	57                   	push   edi
c0024c40:	56                   	push   esi
c0024c41:	53                   	push   ebx
c0024c42:	83 ec 2c             	sub    esp,0x2c
c0024c45:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c49:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c51:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c59:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c62:	7e 10                	jle    c0024c74 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c64:	83 ec 0c             	sub    esp,0xc
c0024c67:	68 e8 cd 02 c0       	push   0xc002cde8
c0024c6c:	e8 fa 58 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0024c71:	83 c4 10             	add    esp,0x10
c0024c74:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024c7a:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c80:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c8a:	89 f0                	mov    eax,esi
c0024c8c:	c1 e0 07             	shl    eax,0x7
c0024c8f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c93:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c9d:	53                   	push   ebx
c0024c9e:	8d 46 02             	lea    eax,[esi+0x2]
c0024ca1:	53                   	push   ebx
c0024ca2:	c1 e0 07             	shl    eax,0x7
c0024ca5:	bb 01 00 00 00       	mov    ebx,0x1
c0024caa:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024cae:	50                   	push   eax
c0024caf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024cb5:	e8 aa ef ff ff       	call   c0023c64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024cba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024cbe:	83 c4 10             	add    esp,0x10
c0024cc1:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024cc6:	0f 84 ce 01 00 00    	je     c0024e9a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ccc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cd0:	c1 e0 09             	shl    eax,0x9
c0024cd3:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024cd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024cdc:	74 17                	je     c0024cf5 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024cde:	51                   	push   ecx
c0024cdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ce3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024ce7:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ced:	e8 52 ba fd ff       	call   c0000744 <memcpy>
c0024cf2:	83 c4 10             	add    esp,0x10
c0024cf5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024cfb:	8d 46 02             	lea    eax,[esi+0x2]
c0024cfe:	c1 e0 07             	shl    eax,0x7
c0024d01:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d07:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d0d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d13:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d17:	c1 e1 05             	shl    ecx,0x5
c0024d1a:	01 c8                	add    eax,ecx
c0024d1c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d20:	8a 18                	mov    bl,BYTE PTR [eax]
c0024d22:	83 e1 01             	and    ecx,0x1
c0024d25:	83 e3 bf             	and    ebx,0xffffffbf
c0024d28:	c1 e1 06             	shl    ecx,0x6
c0024d2b:	09 d9                	or     ecx,ebx
c0024d2d:	88 08                	mov    BYTE PTR [eax],cl
c0024d2f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d31:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d37:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d3d:	89 08                	mov    DWORD PTR [eax],ecx
c0024d3f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d45:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d4b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d51:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d54:	52                   	push   edx
c0024d55:	68 90 00 00 00       	push   0x90
c0024d5a:	6a 00                	push   0x0
c0024d5c:	53                   	push   ebx
c0024d5d:	e8 16 ba fd ff       	call   c0000778 <memset>
c0024d62:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024d68:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024d6c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d72:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d7a:	83 c4 10             	add    esp,0x10
c0024d7d:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024d80:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024d86:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024d8c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d91:	09 c8                	or     eax,ecx
c0024d93:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024d99:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024d9c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024da3:	66 25 00 7f          	and    ax,0x7f00
c0024da7:	66 0d 27 80          	or     ax,0x8027
c0024dab:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024db0:	66 89 03             	mov    WORD PTR [ebx],ax
c0024db3:	19 c0                	sbb    eax,eax
c0024db5:	83 e0 f0             	and    eax,0xfffffff0
c0024db8:	83 c0 35             	add    eax,0x35
c0024dbb:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024dbe:	89 f8                	mov    eax,edi
c0024dc0:	c1 e8 10             	shr    eax,0x10
c0024dc3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024dc6:	89 f8                	mov    eax,edi
c0024dc8:	c1 e8 18             	shr    eax,0x18
c0024dcb:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024dce:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024dd2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024dd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024dd9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ddc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024de0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024de4:	89 f3                	mov    ebx,esi
c0024de6:	31 c0                	xor    eax,eax
c0024de8:	c1 e3 07             	shl    ebx,0x7
c0024deb:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024def:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024df5:	80 e1 88             	and    cl,0x88
c0024df8:	74 0a                	je     c0024e04 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024dfa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024dff:	74 0a                	je     c0024e0b <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e01:	40                   	inc    eax
c0024e02:	eb eb                	jmp    c0024def <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e04:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e09:	75 0a                	jne    c0024e15 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e0b:	83 ec 0c             	sub    esp,0xc
c0024e0e:	68 21 ce 02 c0       	push   0xc002ce21
c0024e13:	eb 56                	jmp    c0024e6b <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e15:	b8 01 00 00 00       	mov    eax,0x1
c0024e1a:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024e1e:	c1 e6 07             	shl    esi,0x7
c0024e21:	d3 e0                	shl    eax,cl
c0024e23:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024e27:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024e2d:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e33:	85 c8                	test   eax,ecx
c0024e35:	74 20                	je     c0024e57 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e37:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e3d:	0f ba e1 1e          	bt     ecx,0x1e
c0024e41:	73 ea                	jae    c0024e2d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e43:	83 ec 0c             	sub    esp,0xc
c0024e46:	31 db                	xor    ebx,ebx
c0024e48:	68 2f ce 02 c0       	push   0xc002ce2f
c0024e4d:	e8 19 57 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0024e52:	83 c4 10             	add    esp,0x10
c0024e55:	eb 43                	jmp    c0024e9a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e57:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024e5d:	0f ba e0 1e          	bt     eax,0x1e
c0024e61:	73 17                	jae    c0024e7a <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024e63:	83 ec 0c             	sub    esp,0xc
c0024e66:	68 2f ce 02 c0       	push   0xc002ce2f
c0024e6b:	e8 fb 56 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0024e70:	bb 01 00 00 00       	mov    ebx,0x1
c0024e75:	83 c4 10             	add    esp,0x10
c0024e78:	eb 20                	jmp    c0024e9a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e7a:	31 db                	xor    ebx,ebx
c0024e7c:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e81:	75 17                	jne    c0024e9a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e83:	50                   	push   eax
c0024e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e88:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e8e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024e92:	e8 ad b8 fd ff       	call   c0000744 <memcpy>
c0024e97:	83 c4 10             	add    esp,0x10
c0024e9a:	83 c4 2c             	add    esp,0x2c
c0024e9d:	89 d8                	mov    eax,ebx
c0024e9f:	5b                   	pop    ebx
c0024ea0:	5e                   	pop    esi
c0024ea1:	5f                   	pop    edi
c0024ea2:	5d                   	pop    ebp
c0024ea3:	c3                   	ret    

c0024ea4 <SATA::read(unsigned long long, int, void*)>:
c0024ea4:	57                   	push   edi
c0024ea5:	b8 04 00 00 00       	mov    eax,0x4
c0024eaa:	56                   	push   esi
c0024eab:	53                   	push   ebx
c0024eac:	83 ec 10             	sub    esp,0x10
c0024eaf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024eb3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024eb7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024eba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024ebe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ec2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ec8:	77 3b                	ja     c0024f05 <SATA::read(unsigned long long, int, void*)+0x61>
c0024eca:	b8 06 00 00 00       	mov    eax,0x6
c0024ecf:	85 d2                	test   edx,edx
c0024ed1:	74 32                	je     c0024f05 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ed3:	50                   	push   eax
c0024ed4:	50                   	push   eax
c0024ed5:	6a 00                	push   0x0
c0024ed7:	52                   	push   edx
c0024ed8:	53                   	push   ebx
c0024ed9:	57                   	push   edi
c0024eda:	56                   	push   esi
c0024edb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024edf:	e8 5a fd ff ff       	call   c0024c3e <SATA::access(unsigned long long, int, void*, bool)>
c0024ee4:	83 c4 20             	add    esp,0x20
c0024ee7:	85 c0                	test   eax,eax
c0024ee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024eed:	75 11                	jne    c0024f00 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024eef:	01 1d 28 29 03 c0    	add    DWORD PTR ds:0xc0032928,ebx
c0024ef5:	e8 d6 ba fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024efa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024efe:	eb 05                	jmp    c0024f05 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f00:	b8 01 00 00 00       	mov    eax,0x1
c0024f05:	83 c4 10             	add    esp,0x10
c0024f08:	5b                   	pop    ebx
c0024f09:	5e                   	pop    esi
c0024f0a:	5f                   	pop    edi
c0024f0b:	c3                   	ret    

c0024f0c <SATA::write(unsigned long long, int, void*)>:
c0024f0c:	55                   	push   ebp
c0024f0d:	b8 04 00 00 00       	mov    eax,0x4
c0024f12:	57                   	push   edi
c0024f13:	56                   	push   esi
c0024f14:	53                   	push   ebx
c0024f15:	83 ec 1c             	sub    esp,0x1c
c0024f18:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024f1c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024f20:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024f23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024f27:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024f2b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f31:	77 56                	ja     c0024f89 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f33:	b8 06 00 00 00       	mov    eax,0x6
c0024f38:	85 ff                	test   edi,edi
c0024f3a:	74 4d                	je     c0024f89 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f3c:	89 ee                	mov    esi,ebp
c0024f3e:	c1 e6 09             	shl    esi,0x9
c0024f41:	01 fe                	add    esi,edi
c0024f43:	89 c8                	mov    eax,ecx
c0024f45:	89 da                	mov    edx,ebx
c0024f47:	83 c0 01             	add    eax,0x1
c0024f4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f4e:	83 d2 00             	adc    edx,0x0
c0024f51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f55:	50                   	push   eax
c0024f56:	50                   	push   eax
c0024f57:	6a 01                	push   0x1
c0024f59:	57                   	push   edi
c0024f5a:	81 c7 00 02 00 00    	add    edi,0x200
c0024f60:	6a 01                	push   0x1
c0024f62:	53                   	push   ebx
c0024f63:	51                   	push   ecx
c0024f64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f68:	e8 d1 fc ff ff       	call   c0024c3e <SATA::access(unsigned long long, int, void*, bool)>
c0024f6d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024f71:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f75:	83 c4 20             	add    esp,0x20
c0024f78:	39 f7                	cmp    edi,esi
c0024f7a:	75 c7                	jne    c0024f43 <SATA::write(unsigned long long, int, void*)+0x37>
c0024f7c:	01 2d 24 29 03 c0    	add    DWORD PTR ds:0xc0032924,ebp
c0024f82:	e8 49 ba fe ff       	call   c00109d0 <VgaText::updateDiskUsage()>
c0024f87:	31 c0                	xor    eax,eax
c0024f89:	83 c4 1c             	add    esp,0x1c
c0024f8c:	5b                   	pop    ebx
c0024f8d:	5e                   	pop    esi
c0024f8e:	5f                   	pop    edi
c0024f8f:	5d                   	pop    ebp
c0024f90:	c3                   	ret    
c0024f91:	90                   	nop

c0024f92 <SATAPI::write(unsigned long long, int, void*)>:
c0024f92:	b8 03 00 00 00       	mov    eax,0x3
c0024f97:	c3                   	ret    

c0024f98 <SATAPI::close(int, int, void*)>:
c0024f98:	83 ec 0c             	sub    esp,0xc
c0024f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f9f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024fa5:	85 c0                	test   eax,eax
c0024fa7:	74 0c                	je     c0024fb5 <SATAPI::close(int, int, void*)+0x1d>
c0024fa9:	83 ec 0c             	sub    esp,0xc
c0024fac:	8b 10                	mov    edx,DWORD PTR [eax]
c0024fae:	50                   	push   eax
c0024faf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024fb2:	83 c4 10             	add    esp,0x10
c0024fb5:	31 c0                	xor    eax,eax
c0024fb7:	83 c4 0c             	add    esp,0xc
c0024fba:	c3                   	ret    
c0024fbb:	90                   	nop

c0024fbc <SATAPI::SATAPI()>:
c0024fbc:	83 ec 0c             	sub    esp,0xc
c0024fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc3:	83 ec 04             	sub    esp,0x4
c0024fc6:	68 00 08 00 00       	push   0x800
c0024fcb:	68 78 ce 02 c0       	push   0xc002ce78
c0024fd0:	50                   	push   eax
c0024fd1:	e8 3a f7 fe ff       	call   c0014710 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fd6:	83 c4 10             	add    esp,0x10
c0024fd9:	ba 24 cf 02 c0       	mov    edx,0xc002cf24
c0024fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe2:	89 10                	mov    DWORD PTR [eax],edx
c0024fe4:	90                   	nop
c0024fe5:	83 c4 0c             	add    esp,0xc
c0024fe8:	c3                   	ret    
c0024fe9:	90                   	nop

c0024fea <SATAPI::diskRemoved()>:
c0024fea:	83 ec 18             	sub    esp,0x18
c0024fed:	68 84 ce 02 c0       	push   0xc002ce84
c0024ff2:	e8 cf de fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0024ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ffb:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025002:	83 c4 1c             	add    esp,0x1c
c0025005:	c3                   	ret    

c0025006 <SATAPI::diskInserted()>:
c0025006:	53                   	push   ebx
c0025007:	83 ec 14             	sub    esp,0x14
c002500a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002500e:	68 9b ce 02 c0       	push   0xc002ce9b
c0025013:	e8 ae de fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0025018:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002501f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025022:	e8 51 f7 fe ff       	call   c0014778 <PhysicalDisk::startCache()>
c0025027:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002502b:	83 c4 18             	add    esp,0x18
c002502e:	5b                   	pop    ebx
c002502f:	e9 ba 18 ff ff       	jmp    c00168ee <createPartitionsForDisk(PhysicalDisk*)>

c0025034 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025034:	55                   	push   ebp
c0025035:	57                   	push   edi
c0025036:	56                   	push   esi
c0025037:	53                   	push   ebx
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002503f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025043:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025049:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002504d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025051:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025057:	8d 5f 02             	lea    ebx,[edi+0x2]
c002505a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025060:	c1 e3 07             	shl    ebx,0x7
c0025063:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025067:	89 f8                	mov    eax,edi
c0025069:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002506d:	c1 e0 07             	shl    eax,0x7
c0025070:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025074:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025078:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025082:	53                   	push   ebx
c0025083:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025089:	e8 d6 eb ff ff       	call   c0023c64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002508e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025092:	83 c4 10             	add    esp,0x10
c0025095:	b8 01 00 00 00       	mov    eax,0x1
c002509a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c002509f:	0f 84 8a 01 00 00    	je     c002522f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250a5:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250ad:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00250b3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00250b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00250bd:	c1 e1 05             	shl    ecx,0x5
c00250c0:	01 c8                	add    eax,ecx
c00250c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00250c4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00250ca:	81 c9 25 00 01 00    	or     ecx,0x10025
c00250d0:	89 08                	mov    DWORD PTR [eax],ecx
c00250d2:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250d8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00250de:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00250e4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00250e7:	52                   	push   edx
c00250e8:	68 90 00 00 00       	push   0x90
c00250ed:	6a 00                	push   0x0
c00250ef:	53                   	push   ebx
c00250f0:	e8 83 b6 fd ff       	call   c0000778 <memset>
c00250f5:	83 c4 0c             	add    esp,0xc
c00250f8:	8d 43 40             	lea    eax,[ebx+0x40]
c00250fb:	6a 0c                	push   0xc
c00250fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025101:	50                   	push   eax
c0025102:	e8 3d b6 fd ff       	call   c0000744 <memcpy>
c0025107:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002510d:	89 ea                	mov    edx,ebp
c002510f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025115:	c1 ea 18             	shr    edx,0x18
c0025118:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002511c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002511f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025122:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025126:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002512c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025132:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025137:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002513b:	09 c8                	or     eax,ecx
c002513d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025141:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025147:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002514a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025151:	66 25 00 7f          	and    ax,0x7f00
c0025155:	66 0d 27 80          	or     ax,0x8027
c0025159:	66 89 03             	mov    WORD PTR [ebx],ax
c002515c:	89 e8                	mov    eax,ebp
c002515e:	c1 e8 10             	shr    eax,0x10
c0025161:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025164:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025168:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002516b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002516f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025172:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025176:	83 c4 10             	add    esp,0x10
c0025179:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002517d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025181:	31 c0                	xor    eax,eax
c0025183:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025189:	80 e1 88             	and    cl,0x88
c002518c:	74 0a                	je     c0025198 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c002518e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025193:	74 0a                	je     c002519f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025195:	40                   	inc    eax
c0025196:	eb eb                	jmp    c0025183 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025198:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002519d:	75 0f                	jne    c00251ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c002519f:	83 ec 0c             	sub    esp,0xc
c00251a2:	68 21 ce 02 c0       	push   0xc002ce21
c00251a7:	e8 bf 53 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c00251ac:	eb 3a                	jmp    c00251e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00251ae:	b8 01 00 00 00       	mov    eax,0x1
c00251b3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00251b7:	c1 e7 07             	shl    edi,0x7
c00251ba:	d3 e0                	shl    eax,cl
c00251bc:	03 3c 24             	add    edi,DWORD PTR [esp]
c00251bf:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00251c5:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00251cb:	85 d0                	test   eax,edx
c00251cd:	74 23                	je     c00251f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00251cf:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00251d5:	0f ba e2 1e          	bt     edx,0x1e
c00251d9:	73 ea                	jae    c00251c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00251db:	83 ec 0c             	sub    esp,0xc
c00251de:	68 b3 ce 02 c0       	push   0xc002ceb3
c00251e3:	e8 de dc fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00251e8:	83 c4 10             	add    esp,0x10
c00251eb:	b8 01 00 00 00       	mov    eax,0x1
c00251f0:	eb 3d                	jmp    c002522f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251f2:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00251f8:	0f ba e0 1e          	bt     eax,0x1e
c00251fc:	73 0a                	jae    c0025208 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00251fe:	83 ec 0c             	sub    esp,0xc
c0025201:	68 c6 ce 02 c0       	push   0xc002cec6
c0025206:	eb db                	jmp    c00251e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025208:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002520d:	74 1e                	je     c002522d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002520f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025214:	74 17                	je     c002522d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025216:	50                   	push   eax
c0025217:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002521b:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025221:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025225:	e8 1a b5 fd ff       	call   c0000744 <memcpy>
c002522a:	83 c4 10             	add    esp,0x10
c002522d:	31 c0                	xor    eax,eax
c002522f:	83 c4 1c             	add    esp,0x1c
c0025232:	5b                   	pop    ebx
c0025233:	5e                   	pop    esi
c0025234:	5f                   	pop    edi
c0025235:	5d                   	pop    ebp
c0025236:	c3                   	ret    
c0025237:	90                   	nop

c0025238 <SATAPI::eject()>:
c0025238:	57                   	push   edi
c0025239:	b9 03 00 00 00       	mov    ecx,0x3
c002523e:	53                   	push   ebx
c002523f:	83 ec 14             	sub    esp,0x14
c0025242:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025246:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002524a:	fc                   	cld    
c002524b:	31 c0                	xor    eax,eax
c002524d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002524f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025254:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025259:	50                   	push   eax
c002525a:	6a 00                	push   0x0
c002525c:	6a 00                	push   0x0
c002525e:	6a 00                	push   0x0
c0025260:	6a 00                	push   0x0
c0025262:	6a 02                	push   0x2
c0025264:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025268:	50                   	push   eax
c0025269:	53                   	push   ebx
c002526a:	e8 c5 fd ff ff       	call   c0025034 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002526f:	83 c4 14             	add    esp,0x14
c0025272:	53                   	push   ebx
c0025273:	e8 72 fd ff ff       	call   c0024fea <SATAPI::diskRemoved()>
c0025278:	83 c4 24             	add    esp,0x24
c002527b:	31 c0                	xor    eax,eax
c002527d:	5b                   	pop    ebx
c002527e:	5f                   	pop    edi
c002527f:	c3                   	ret    

c0025280 <SATAPI::detectMedia()>:
c0025280:	56                   	push   esi
c0025281:	53                   	push   ebx
c0025282:	83 ec 28             	sub    esp,0x28
c0025285:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025289:	6a 0c                	push   0xc
c002528b:	6a 00                	push   0x0
c002528d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025291:	56                   	push   esi
c0025292:	e8 e1 b4 fd ff       	call   c0000778 <memset>
c0025297:	83 c4 0c             	add    esp,0xc
c002529a:	6a 00                	push   0x0
c002529c:	6a 00                	push   0x0
c002529e:	6a 00                	push   0x0
c00252a0:	6a 00                	push   0x0
c00252a2:	6a 00                	push   0x0
c00252a4:	56                   	push   esi
c00252a5:	53                   	push   ebx
c00252a6:	e8 89 fd ff ff       	call   c0025034 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252ab:	83 c4 1c             	add    esp,0x1c
c00252ae:	6a 0c                	push   0xc
c00252b0:	6a 00                	push   0x0
c00252b2:	56                   	push   esi
c00252b3:	e8 c0 b4 fd ff       	call   c0000778 <memset>
c00252b8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00252bd:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00252c2:	83 c4 0c             	add    esp,0xc
c00252c5:	6a 01                	push   0x1
c00252c7:	8d 44 24 16          	lea    eax,[esp+0x16]
c00252cb:	50                   	push   eax
c00252cc:	6a 00                	push   0x0
c00252ce:	6a 00                	push   0x0
c00252d0:	6a 12                	push   0x12
c00252d2:	56                   	push   esi
c00252d3:	53                   	push   ebx
c00252d4:	e8 5b fd ff ff       	call   c0025034 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252d9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252dd:	83 c4 20             	add    esp,0x20
c00252e0:	83 e0 7f             	and    eax,0x7f
c00252e3:	3c 70                	cmp    al,0x70
c00252e5:	74 15                	je     c00252fc <SATAPI::detectMedia()+0x7c>
c00252e7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252ee:	75 0c                	jne    c00252fc <SATAPI::detectMedia()+0x7c>
c00252f0:	83 ec 0c             	sub    esp,0xc
c00252f3:	53                   	push   ebx
c00252f4:	e8 0d fd ff ff       	call   c0025006 <SATAPI::diskInserted()>
c00252f9:	83 c4 10             	add    esp,0x10
c00252fc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025300:	83 e0 0f             	and    eax,0xf
c0025303:	3c 02                	cmp    al,0x2
c0025305:	75 1b                	jne    c0025322 <SATAPI::detectMedia()+0xa2>
c0025307:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002530c:	75 2d                	jne    c002533b <SATAPI::detectMedia()+0xbb>
c002530e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025315:	74 24                	je     c002533b <SATAPI::detectMedia()+0xbb>
c0025317:	83 ec 0c             	sub    esp,0xc
c002531a:	53                   	push   ebx
c002531b:	e8 ca fc ff ff       	call   c0024fea <SATAPI::diskRemoved()>
c0025320:	eb 16                	jmp    c0025338 <SATAPI::detectMedia()+0xb8>
c0025322:	84 c0                	test   al,al
c0025324:	75 15                	jne    c002533b <SATAPI::detectMedia()+0xbb>
c0025326:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002532d:	75 0c                	jne    c002533b <SATAPI::detectMedia()+0xbb>
c002532f:	83 ec 0c             	sub    esp,0xc
c0025332:	53                   	push   ebx
c0025333:	e8 ce fc ff ff       	call   c0025006 <SATAPI::diskInserted()>
c0025338:	83 c4 10             	add    esp,0x10
c002533b:	83 c4 24             	add    esp,0x24
c002533e:	5b                   	pop    ebx
c002533f:	5e                   	pop    esi
c0025340:	c3                   	ret    
c0025341:	90                   	nop

c0025342 <SATAPI::open(int, int, void*)>:
c0025342:	56                   	push   esi
c0025343:	53                   	push   ebx
c0025344:	50                   	push   eax
c0025345:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025349:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002534d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025357:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002535d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025367:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002536b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025375:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002537b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025382:	e8 59 ab fe ff       	call   c000fee0 <Phys::allocatePage()>
c0025387:	89 c6                	mov    esi,eax
c0025389:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002538f:	81 c6 00 10 00 00    	add    esi,0x1000
c0025395:	e8 46 ab fe ff       	call   c000fee0 <Phys::allocatePage()>
c002539a:	39 c6                	cmp    esi,eax
c002539c:	74 10                	je     c00253ae <SATAPI::open(int, int, void*)+0x6c>
c002539e:	83 ec 0c             	sub    esp,0xc
c00253a1:	68 db ce 02 c0       	push   0xc002cedb
c00253a6:	e8 c0 51 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c00253ab:	83 c4 10             	add    esp,0x10
c00253ae:	83 ec 0c             	sub    esp,0xc
c00253b1:	6a 02                	push   0x2
c00253b3:	e8 c3 c7 fe ff       	call   c0011b7b <Virt::allocateKernelVirtualPages(int)>
c00253b8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00253be:	e8 70 cb fe ff       	call   c0011f33 <Virt::getAKernelVAS()>
c00253c3:	6a 03                	push   0x3
c00253c5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00253cb:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00253d1:	50                   	push   eax
c00253d2:	e8 7f cf fe ff       	call   c0012356 <VAS::mapPage(unsigned long, unsigned long, int)>
c00253d7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00253de:	83 c4 14             	add    esp,0x14
c00253e1:	53                   	push   ebx
c00253e2:	e8 99 fe ff ff       	call   c0025280 <SATAPI::detectMedia()>
c00253e7:	83 c4 14             	add    esp,0x14
c00253ea:	31 c0                	xor    eax,eax
c00253ec:	5b                   	pop    ebx
c00253ed:	5e                   	pop    esi
c00253ee:	c3                   	ret    
c00253ef:	90                   	nop

c00253f0 <SATAPI::read(unsigned long long, int, void*)>:
c00253f0:	55                   	push   ebp
c00253f1:	57                   	push   edi
c00253f2:	56                   	push   esi
c00253f3:	53                   	push   ebx
c00253f4:	83 ec 1c             	sub    esp,0x1c
c00253f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025403:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002540a:	74 19                	je     c0025425 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002540c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025411:	7e 2e                	jle    c0025441 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025413:	83 ec 0c             	sub    esp,0xc
c0025416:	68 f1 ce 02 c0       	push   0xc002cef1
c002541b:	e8 4b 51 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0025420:	83 c4 10             	add    esp,0x10
c0025423:	eb 1c                	jmp    c0025441 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025425:	83 ec 0c             	sub    esp,0xc
c0025428:	55                   	push   ebp
c0025429:	e8 52 fe ff ff       	call   c0025280 <SATAPI::detectMedia()>
c002542e:	83 c4 10             	add    esp,0x10
c0025431:	b8 02 00 00 00       	mov    eax,0x2
c0025436:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002543d:	75 cd                	jne    c002540c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002543f:	eb 49                	jmp    c002548a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025441:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025445:	b9 03 00 00 00       	mov    ecx,0x3
c002544a:	fc                   	cld    
c002544b:	31 c0                	xor    eax,eax
c002544d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002544f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025454:	89 d8                	mov    eax,ebx
c0025456:	86 e0                	xchg   al,ah
c0025458:	c1 c0 10             	rol    eax,0x10
c002545b:	86 e0                	xchg   al,ah
c002545d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025461:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025465:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025469:	50                   	push   eax
c002546a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002546e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025472:	56                   	push   esi
c0025473:	53                   	push   ebx
c0025474:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025478:	c1 e0 0b             	shl    eax,0xb
c002547b:	50                   	push   eax
c002547c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025480:	50                   	push   eax
c0025481:	55                   	push   ebp
c0025482:	e8 ad fb ff ff       	call   c0025034 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025487:	83 c4 20             	add    esp,0x20
c002548a:	83 c4 1c             	add    esp,0x1c
c002548d:	5b                   	pop    ebx
c002548e:	5e                   	pop    esi
c002548f:	5f                   	pop    edi
c0025490:	5d                   	pop    ebp
c0025491:	c3                   	ret    

c0025492 <AVX::open(int, int, void*)>:
c0025492:	83 ec 0c             	sub    esp,0xc
c0025495:	e8 3e 11 00 00       	call   c00265d8 <avxInit>
c002549a:	b8 00 00 00 00       	mov    eax,0x0
c002549f:	83 c4 0c             	add    esp,0xc
c00254a2:	c3                   	ret    
c00254a3:	90                   	nop

c00254a4 <AVX::close(int, int, void*)>:
c00254a4:	83 ec 0c             	sub    esp,0xc
c00254a7:	e8 2d 11 00 00       	call   c00265d9 <avxClose>
c00254ac:	b8 00 00 00 00       	mov    eax,0x0
c00254b1:	83 c4 0c             	add    esp,0xc
c00254b4:	c3                   	ret    
c00254b5:	90                   	nop

c00254b6 <AVX::available()>:
c00254b6:	83 ec 0c             	sub    esp,0xc
c00254b9:	e8 12 11 00 00       	call   c00265d0 <avxDetect>
c00254be:	85 c0                	test   eax,eax
c00254c0:	0f 95 c0             	setne  al
c00254c3:	83 c4 0c             	add    esp,0xc
c00254c6:	c3                   	ret    
c00254c7:	90                   	nop

c00254c8 <AVX::save(void*)>:
c00254c8:	83 ec 0c             	sub    esp,0xc
c00254cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254cf:	83 ec 0c             	sub    esp,0xc
c00254d2:	50                   	push   eax
c00254d3:	e8 fe 10 00 00       	call   c00265d6 <avxSave>
c00254d8:	83 c4 10             	add    esp,0x10
c00254db:	90                   	nop
c00254dc:	83 c4 0c             	add    esp,0xc
c00254df:	c3                   	ret    

c00254e0 <AVX::load(void*)>:
c00254e0:	83 ec 0c             	sub    esp,0xc
c00254e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254e7:	83 ec 0c             	sub    esp,0xc
c00254ea:	50                   	push   eax
c00254eb:	e8 e7 10 00 00       	call   c00265d7 <avxLoad>
c00254f0:	83 c4 10             	add    esp,0x10
c00254f3:	90                   	nop
c00254f4:	83 c4 0c             	add    esp,0xc
c00254f7:	c3                   	ret    

c00254f8 <AVX::AVX()>:
c00254f8:	83 ec 0c             	sub    esp,0xc
c00254fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ff:	83 ec 08             	sub    esp,0x8
c0025502:	68 54 cf 02 c0       	push   0xc002cf54
c0025507:	50                   	push   eax
c0025508:	e8 e1 f2 fe ff       	call   c00147ee <FPU::FPU(char const*)>
c002550d:	83 c4 10             	add    esp,0x10
c0025510:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c0025515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025519:	89 10                	mov    DWORD PTR [eax],edx
c002551b:	90                   	nop
c002551c:	83 c4 0c             	add    esp,0xc
c002551f:	c3                   	ret    

c0025520 <MMX::available()>:
c0025520:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025525:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002552b:	83 e0 20             	and    eax,0x20
c002552e:	84 c0                	test   al,al
c0025530:	0f 95 c0             	setne  al
c0025533:	c3                   	ret    

c0025534 <MMX::open(int, int, void*)>:
c0025534:	83 ec 0c             	sub    esp,0xc
c0025537:	e8 20 11 00 00       	call   c002665c <x87Init>
c002553c:	b8 00 00 00 00       	mov    eax,0x0
c0025541:	83 c4 0c             	add    esp,0xc
c0025544:	c3                   	ret    
c0025545:	90                   	nop

c0025546 <MMX::close(int, int, void*)>:
c0025546:	83 ec 0c             	sub    esp,0xc
c0025549:	e8 28 11 00 00       	call   c0026676 <x87Close>
c002554e:	b8 00 00 00 00       	mov    eax,0x0
c0025553:	83 c4 0c             	add    esp,0xc
c0025556:	c3                   	ret    
c0025557:	90                   	nop

c0025558 <MMX::save(void*)>:
c0025558:	83 ec 0c             	sub    esp,0xc
c002555b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002555f:	83 ec 0c             	sub    esp,0xc
c0025562:	50                   	push   eax
c0025563:	e8 e9 10 00 00       	call   c0026651 <x87Save>
c0025568:	83 c4 10             	add    esp,0x10
c002556b:	90                   	nop
c002556c:	83 c4 0c             	add    esp,0xc
c002556f:	c3                   	ret    

c0025570 <MMX::load(void*)>:
c0025570:	83 ec 0c             	sub    esp,0xc
c0025573:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025577:	83 ec 0c             	sub    esp,0xc
c002557a:	50                   	push   eax
c002557b:	e8 d7 10 00 00       	call   c0026657 <x87Load>
c0025580:	83 c4 10             	add    esp,0x10
c0025583:	90                   	nop
c0025584:	83 c4 0c             	add    esp,0xc
c0025587:	c3                   	ret    

c0025588 <MMX::MMX()>:
c0025588:	83 ec 0c             	sub    esp,0xc
c002558b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558f:	83 ec 08             	sub    esp,0x8
c0025592:	68 94 cf 02 c0       	push   0xc002cf94
c0025597:	50                   	push   eax
c0025598:	e8 51 f2 fe ff       	call   c00147ee <FPU::FPU(char const*)>
c002559d:	83 c4 10             	add    esp,0x10
c00255a0:	ba a4 cf 02 c0       	mov    edx,0xc002cfa4
c00255a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a9:	89 10                	mov    DWORD PTR [eax],edx
c00255ab:	90                   	nop
c00255ac:	83 c4 0c             	add    esp,0xc
c00255af:	c3                   	ret    

c00255b0 <SSE::open(int, int, void*)>:
c00255b0:	83 ec 0c             	sub    esp,0xc
c00255b3:	e8 5c 10 00 00       	call   c0026614 <sseInit>
c00255b8:	b8 00 00 00 00       	mov    eax,0x0
c00255bd:	83 c4 0c             	add    esp,0xc
c00255c0:	c3                   	ret    
c00255c1:	90                   	nop

c00255c2 <SSE::close(int, int, void*)>:
c00255c2:	83 ec 0c             	sub    esp,0xc
c00255c5:	e8 5a 10 00 00       	call   c0026624 <sseClose>
c00255ca:	b8 00 00 00 00       	mov    eax,0x0
c00255cf:	83 c4 0c             	add    esp,0xc
c00255d2:	c3                   	ret    
c00255d3:	90                   	nop

c00255d4 <SSE::available()>:
c00255d4:	83 ec 1c             	sub    esp,0x1c
c00255d7:	e8 14 10 00 00       	call   c00265f0 <absolutelyNoChanceInHell>
c00255dc:	85 c0                	test   eax,eax
c00255de:	0f 95 c0             	setne  al
c00255e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00255e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00255e9:	83 c4 1c             	add    esp,0x1c
c00255ec:	c3                   	ret    
c00255ed:	90                   	nop

c00255ee <SSE::save(void*)>:
c00255ee:	83 ec 0c             	sub    esp,0xc
c00255f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255f5:	83 ec 0c             	sub    esp,0xc
c00255f8:	50                   	push   eax
c00255f9:	e8 0a 10 00 00       	call   c0026608 <sseSave>
c00255fe:	83 c4 10             	add    esp,0x10
c0025601:	90                   	nop
c0025602:	83 c4 0c             	add    esp,0xc
c0025605:	c3                   	ret    

c0025606 <SSE::load(void*)>:
c0025606:	83 ec 0c             	sub    esp,0xc
c0025609:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002560d:	83 ec 0c             	sub    esp,0xc
c0025610:	50                   	push   eax
c0025611:	e8 f8 0f 00 00       	call   c002660e <sseLoad>
c0025616:	83 c4 10             	add    esp,0x10
c0025619:	90                   	nop
c002561a:	83 c4 0c             	add    esp,0xc
c002561d:	c3                   	ret    

c002561e <SSE::SSE()>:
c002561e:	83 ec 0c             	sub    esp,0xc
c0025621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025625:	83 ec 08             	sub    esp,0x8
c0025628:	68 d4 cf 02 c0       	push   0xc002cfd4
c002562d:	50                   	push   eax
c002562e:	e8 bb f1 fe ff       	call   c00147ee <FPU::FPU(char const*)>
c0025633:	83 c4 10             	add    esp,0x10
c0025636:	ba e4 cf 02 c0       	mov    edx,0xc002cfe4
c002563b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002563f:	89 10                	mov    DWORD PTR [eax],edx
c0025641:	90                   	nop
c0025642:	83 c4 0c             	add    esp,0xc
c0025645:	c3                   	ret    

c0025646 <x87::open(int, int, void*)>:
c0025646:	83 ec 0c             	sub    esp,0xc
c0025649:	e8 0e 10 00 00       	call   c002665c <x87Init>
c002564e:	b8 00 00 00 00       	mov    eax,0x0
c0025653:	83 c4 0c             	add    esp,0xc
c0025656:	c3                   	ret    
c0025657:	90                   	nop

c0025658 <x87::close(int, int, void*)>:
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	e8 16 10 00 00       	call   c0026676 <x87Close>
c0025660:	b8 00 00 00 00       	mov    eax,0x0
c0025665:	83 c4 0c             	add    esp,0xc
c0025668:	c3                   	ret    
c0025669:	90                   	nop

c002566a <x87::available()>:
c002566a:	83 ec 0c             	sub    esp,0xc
c002566d:	e8 c4 0f 00 00       	call   c0026636 <x87Detect>
c0025672:	85 c0                	test   eax,eax
c0025674:	0f 95 c0             	setne  al
c0025677:	83 c4 0c             	add    esp,0xc
c002567a:	c3                   	ret    
c002567b:	90                   	nop

c002567c <x87::save(void*)>:
c002567c:	83 ec 0c             	sub    esp,0xc
c002567f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025683:	83 ec 0c             	sub    esp,0xc
c0025686:	50                   	push   eax
c0025687:	e8 c5 0f 00 00       	call   c0026651 <x87Save>
c002568c:	83 c4 10             	add    esp,0x10
c002568f:	90                   	nop
c0025690:	83 c4 0c             	add    esp,0xc
c0025693:	c3                   	ret    

c0025694 <x87::load(void*)>:
c0025694:	83 ec 0c             	sub    esp,0xc
c0025697:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002569b:	83 ec 0c             	sub    esp,0xc
c002569e:	50                   	push   eax
c002569f:	e8 b3 0f 00 00       	call   c0026657 <x87Load>
c00256a4:	83 c4 10             	add    esp,0x10
c00256a7:	90                   	nop
c00256a8:	83 c4 0c             	add    esp,0xc
c00256ab:	c3                   	ret    

c00256ac <x87::x87()>:
c00256ac:	83 ec 0c             	sub    esp,0xc
c00256af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b3:	83 ec 08             	sub    esp,0x8
c00256b6:	68 14 d0 02 c0       	push   0xc002d014
c00256bb:	50                   	push   eax
c00256bc:	e8 2d f1 fe ff       	call   c00147ee <FPU::FPU(char const*)>
c00256c1:	83 c4 10             	add    esp,0x10
c00256c4:	ba 24 d0 02 c0       	mov    edx,0xc002d024
c00256c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256cd:	89 10                	mov    DWORD PTR [eax],edx
c00256cf:	90                   	nop
c00256d0:	83 c4 0c             	add    esp,0xc
c00256d3:	c3                   	ret    

c00256d4 <APIC::disable()>:
c00256d4:	90                   	nop
c00256d5:	c3                   	ret    

c00256d6 <APIC::close(int, int, void*)>:
c00256d6:	55                   	push   ebp
c00256d7:	89 e5                	mov    ebp,esp
c00256d9:	83 ec 08             	sub    esp,0x8
c00256dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256df:	8b 00                	mov    eax,DWORD PTR [eax]
c00256e1:	83 c0 3c             	add    eax,0x3c
c00256e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00256e6:	83 ec 0c             	sub    esp,0xc
c00256e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256ec:	ff d0                	call   eax
c00256ee:	83 c4 10             	add    esp,0x10
c00256f1:	b8 00 00 00 00       	mov    eax,0x0
c00256f6:	c9                   	leave  
c00256f7:	c3                   	ret    

c00256f8 <IOAPIC::close(int, int, void*)>:
c00256f8:	b8 00 00 00 00       	mov    eax,0x0
c00256fd:	c3                   	ret    

c00256fe <APIC::io_wait()>:
c00256fe:	eb 00                	jmp    c0025700 <APIC::io_wait()+0x2>
c0025700:	eb 00                	jmp    c0025702 <APIC::io_wait()+0x4>
c0025702:	90                   	nop
c0025703:	c3                   	ret    

c0025704 <APIC::getBase()>:
c0025704:	55                   	push   ebp
c0025705:	89 e5                	mov    ebp,esp
c0025707:	83 ec 18             	sub    esp,0x18
c002570a:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c002570f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025715:	83 e0 08             	and    eax,0x8
c0025718:	84 c0                	test   al,al
c002571a:	75 07                	jne    c0025723 <APIC::getBase()+0x1f>
c002571c:	b8 00 00 00 00       	mov    eax,0x0
c0025721:	eb 21                	jmp    c0025744 <APIC::getBase()+0x40>
c0025723:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0025728:	83 ec 08             	sub    esp,0x8
c002572b:	6a 1b                	push   0x1b
c002572d:	50                   	push   eax
c002572e:	e8 b5 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025733:	83 c4 10             	add    esp,0x10
c0025736:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025739:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002573c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002573f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025744:	c9                   	leave  
c0025745:	c3                   	ret    

c0025746 <APIC::eoi(unsigned char)>:
c0025746:	55                   	push   ebp
c0025747:	89 e5                	mov    ebp,esp
c0025749:	83 ec 28             	sub    esp,0x28
c002574c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002574f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025752:	83 ec 0c             	sub    esp,0xc
c0025755:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025758:	e8 a7 ff ff ff       	call   c0025704 <APIC::getBase()>
c002575d:	83 c4 10             	add    esp,0x10
c0025760:	05 b0 00 00 00       	add    eax,0xb0
c0025765:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025768:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002576b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025771:	90                   	nop
c0025772:	c9                   	leave  
c0025773:	c3                   	ret    

c0025774 <APIC::open(int, int, void*)>:
c0025774:	55                   	push   ebp
c0025775:	89 e5                	mov    ebp,esp
c0025777:	57                   	push   edi
c0025778:	56                   	push   esi
c0025779:	53                   	push   ebx
c002577a:	83 ec 2c             	sub    esp,0x2c
c002577d:	83 ec 0c             	sub    esp,0xc
c0025780:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025783:	e8 7c ff ff ff       	call   c0025704 <APIC::getBase()>
c0025788:	83 c4 10             	add    esp,0x10
c002578b:	89 c2                	mov    edx,eax
c002578d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025790:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025796:	0f b6 f8             	movzx  edi,al
c0025799:	89 d0                	mov    eax,edx
c002579b:	ba 00 00 00 00       	mov    edx,0x0
c00257a0:	89 c1                	mov    ecx,eax
c00257a2:	80 e5 ff             	and    ch,0xff
c00257a5:	89 cb                	mov    ebx,ecx
c00257a7:	0f b6 f2             	movzx  esi,dl
c00257aa:	89 d8                	mov    eax,ebx
c00257ac:	89 f2                	mov    edx,esi
c00257ae:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257b1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00257b4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00257b8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00257bc:	83 e0 00             	and    eax,0x0
c00257bf:	09 d0                	or     eax,edx
c00257c1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00257c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257c8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257ce:	8d 50 01             	lea    edx,[eax+0x1]
c00257d1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257d4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00257da:	0f b6 d0             	movzx  edx,al
c00257dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e0:	83 c2 08             	add    edx,0x8
c00257e3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00257e7:	0f b6 c9             	movzx  ecx,cl
c00257ea:	81 c9 00 00 01 00    	or     ecx,0x10000
c00257f0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00257f4:	83 ec 0c             	sub    esp,0xc
c00257f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257fa:	e8 05 ff ff ff       	call   c0025704 <APIC::getBase()>
c00257ff:	83 c4 10             	add    esp,0x10
c0025802:	05 f0 00 00 00       	add    eax,0xf0
c0025807:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002580a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002580d:	8b 00                	mov    eax,DWORD PTR [eax]
c002580f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025812:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025819:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025820:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025823:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025826:	89 10                	mov    DWORD PTR [eax],edx
c0025828:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002582f:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0025834:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025837:	7d 7c                	jge    c00258b5 <APIC::open(int, int, void*)+0x141>
c0025839:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002583c:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c0025843:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025846:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025849:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c0025850:	c1 e8 08             	shr    eax,0x8
c0025853:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025857:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002585a:	8b 04 85 c0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf140]
c0025861:	c1 e8 18             	shr    eax,0x18
c0025864:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025867:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002586b:	75 40                	jne    c00258ad <APIC::open(int, int, void*)+0x139>
c002586d:	83 ec 0c             	sub    esp,0xc
c0025870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025873:	e8 8c fe ff ff       	call   c0025704 <APIC::getBase()>
c0025878:	83 c4 10             	add    esp,0x10
c002587b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002587f:	75 07                	jne    c0025888 <APIC::open(int, int, void*)+0x114>
c0025881:	ba 60 03 00 00       	mov    edx,0x360
c0025886:	eb 05                	jmp    c002588d <APIC::open(int, int, void*)+0x119>
c0025888:	ba 50 03 00 00       	mov    edx,0x350
c002588d:	01 d0                	add    eax,edx
c002588f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025892:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025895:	8b 00                	mov    eax,DWORD PTR [eax]
c0025897:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002589a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00258a1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00258a5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00258a8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00258ab:	89 10                	mov    DWORD PTR [eax],edx
c00258ad:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00258b0:	e9 7a ff ff ff       	jmp    c002582f <APIC::open(int, int, void*)+0xbb>
c00258b5:	b8 00 00 00 00       	mov    eax,0x0
c00258ba:	8d 65 f4             	lea    esp,[ebp-0xc]
c00258bd:	5b                   	pop    ebx
c00258be:	5e                   	pop    esi
c00258bf:	5f                   	pop    edi
c00258c0:	5d                   	pop    ebp
c00258c1:	c3                   	ret    

c00258c2 <IOAPIC::IOAPIC()>:
c00258c2:	83 ec 0c             	sub    esp,0xc
c00258c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258c9:	83 ec 08             	sub    esp,0x8
c00258cc:	68 54 d0 02 c0       	push   0xc002d054
c00258d1:	50                   	push   eax
c00258d2:	e8 05 ec fe ff       	call   c00144dc <Device::Device(char const*)>
c00258d7:	83 c4 10             	add    esp,0x10
c00258da:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c00258df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e3:	89 10                	mov    DWORD PTR [eax],edx
c00258e5:	90                   	nop
c00258e6:	83 c4 0c             	add    esp,0xc
c00258e9:	c3                   	ret    

c00258ea <APIC::APIC()>:
c00258ea:	53                   	push   ebx
c00258eb:	83 ec 18             	sub    esp,0x18
c00258ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258f2:	83 ec 08             	sub    esp,0x8
c00258f5:	68 5c d0 02 c0       	push   0xc002d05c
c00258fa:	50                   	push   eax
c00258fb:	e8 48 f3 fe ff       	call   c0014c48 <InterruptController::InterruptController(char const*)>
c0025900:	83 c4 10             	add    esp,0x10
c0025903:	ba 34 d1 02 c0       	mov    edx,0xc002d134
c0025908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002590c:	89 10                	mov    DWORD PTR [eax],edx
c002590e:	a0 80 29 03 c0       	mov    al,ds:0xc0032980
c0025913:	83 f0 01             	xor    eax,0x1
c0025916:	84 c0                	test   al,al
c0025918:	0f 84 a1 00 00 00    	je     c00259bf <APIC::APIC()+0xd5>
c002591e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025923:	a0 60 0f 03 c0       	mov    al,ds:0xc0030f60
c0025928:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002592c:	0f 83 86 00 00 00    	jae    c00259b8 <APIC::APIC()+0xce>
c0025932:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002593a:	83 ec 0c             	sub    esp,0xc
c002593d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025941:	e8 fd 9e fe ff       	call   c000f843 <malloc>
c0025946:	83 c4 10             	add    esp,0x10
c0025949:	89 c3                	mov    ebx,eax
c002594b:	83 ec 0c             	sub    esp,0xc
c002594e:	53                   	push   ebx
c002594f:	e8 6e ff ff ff       	call   c00258c2 <IOAPIC::IOAPIC()>
c0025954:	83 c4 10             	add    esp,0x10
c0025957:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002595b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025960:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025964:	89 14 85 60 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6a0],edx
c002596b:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025970:	40                   	inc    eax
c0025971:	a3 40 29 03 c0       	mov    ds:0xc0032940,eax
c0025976:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c002597b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025981:	83 ec 08             	sub    esp,0x8
c0025984:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025988:	50                   	push   eax
c0025989:	e8 5e e9 fe ff       	call   c00142ec <Device::addChild(Device*)>
c002598e:	83 c4 10             	add    esp,0x10
c0025991:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025995:	8b 00                	mov    eax,DWORD PTR [eax]
c0025997:	83 c0 08             	add    eax,0x8
c002599a:	8b 00                	mov    eax,DWORD PTR [eax]
c002599c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00259a1:	6a 00                	push   0x0
c00259a3:	6a 00                	push   0x0
c00259a5:	52                   	push   edx
c00259a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00259aa:	ff d0                	call   eax
c00259ac:	83 c4 10             	add    esp,0x10
c00259af:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00259b3:	e9 6b ff ff ff       	jmp    c0025923 <APIC::APIC()+0x39>
c00259b8:	c6 05 80 29 03 c0 01 	mov    BYTE PTR ds:0xc0032980,0x1
c00259bf:	90                   	nop
c00259c0:	83 c4 18             	add    esp,0x18
c00259c3:	5b                   	pop    ebx
c00259c4:	c3                   	ret    
c00259c5:	90                   	nop

c00259c6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00259c6:	55                   	push   ebp
c00259c7:	89 e5                	mov    ebp,esp
c00259c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259d2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259d5:	72 1d                	jb     c00259f4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259da:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00259e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259e3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00259e9:	01 d0                	add    eax,edx
c00259eb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259ee:	73 04                	jae    c00259f4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259f0:	b0 01                	mov    al,0x1
c00259f2:	eb 02                	jmp    c00259f6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00259f4:	b0 00                	mov    al,0x0
c00259f6:	5d                   	pop    ebp
c00259f7:	c3                   	ret    

c00259f8 <IOAPIC::read(int)>:
c00259f8:	55                   	push   ebp
c00259f9:	89 e5                	mov    ebp,esp
c00259fb:	83 ec 10             	sub    esp,0x10
c00259fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a01:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a07:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a0d:	0f b6 d0             	movzx  edx,al
c0025a10:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a13:	89 10                	mov    DWORD PTR [eax],edx
c0025a15:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a18:	83 c0 10             	add    eax,0x10
c0025a1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a1d:	c9                   	leave  
c0025a1e:	c3                   	ret    
c0025a1f:	90                   	nop

c0025a20 <IOAPIC::open(int, int, void*)>:
c0025a20:	55                   	push   ebp
c0025a21:	89 e5                	mov    ebp,esp
c0025a23:	57                   	push   edi
c0025a24:	56                   	push   esi
c0025a25:	53                   	push   ebx
c0025a26:	83 ec 0c             	sub    esp,0xc
c0025a29:	83 ec 0c             	sub    esp,0xc
c0025a2c:	68 87 d0 02 c0       	push   0xc002d087
c0025a31:	e8 90 d4 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0025a36:	83 c4 10             	add    esp,0x10
c0025a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a3f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a48:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a4e:	8b 14 85 a0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf060]
c0025a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a58:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a61:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a67:	8b 14 85 20 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefe0]
c0025a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a71:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025a77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a7a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a83:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a89:	0f b6 f8             	movzx  edi,al
c0025a8c:	89 d0                	mov    eax,edx
c0025a8e:	ba 00 00 00 00       	mov    edx,0x0
c0025a93:	89 c1                	mov    ecx,eax
c0025a95:	80 e5 ff             	and    ch,0xff
c0025a98:	89 cb                	mov    ebx,ecx
c0025a9a:	0f b6 f2             	movzx  esi,dl
c0025a9d:	89 d8                	mov    eax,ebx
c0025a9f:	89 f2                	mov    edx,esi
c0025aa1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025aa4:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025aa7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025aab:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025aaf:	83 e0 00             	and    eax,0x0
c0025ab2:	09 d0                	or     eax,edx
c0025ab4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025abb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ac1:	8d 50 01             	lea    edx,[eax+0x1]
c0025ac4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ac7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025acd:	0f b6 d0             	movzx  edx,al
c0025ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad3:	83 c2 08             	add    edx,0x8
c0025ad6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025ada:	0f b6 c9             	movzx  ecx,cl
c0025add:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025ae3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ae7:	83 ec 08             	sub    esp,0x8
c0025aea:	6a 01                	push   0x1
c0025aec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025aef:	e8 04 ff ff ff       	call   c00259f8 <IOAPIC::read(int)>
c0025af4:	83 c4 10             	add    esp,0x10
c0025af7:	c1 f8 10             	sar    eax,0x10
c0025afa:	0f b6 c0             	movzx  eax,al
c0025afd:	8d 50 01             	lea    edx,[eax+0x1]
c0025b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b03:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b09:	b8 00 00 00 00       	mov    eax,0x0
c0025b0e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b11:	5b                   	pop    ebx
c0025b12:	5e                   	pop    esi
c0025b13:	5f                   	pop    edi
c0025b14:	5d                   	pop    ebp
c0025b15:	c3                   	ret    

c0025b16 <IOAPIC::write(int, int)>:
c0025b16:	55                   	push   ebp
c0025b17:	89 e5                	mov    ebp,esp
c0025b19:	83 ec 10             	sub    esp,0x10
c0025b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b1f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b25:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b2b:	0f b6 d0             	movzx  edx,al
c0025b2e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b31:	89 10                	mov    DWORD PTR [eax],edx
c0025b33:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b36:	8d 50 10             	lea    edx,[eax+0x10]
c0025b39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b3c:	89 02                	mov    DWORD PTR [edx],eax
c0025b3e:	90                   	nop
c0025b3f:	c9                   	leave  
c0025b40:	c3                   	ret    
c0025b41:	90                   	nop

c0025b42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b42:	55                   	push   ebp
c0025b43:	89 e5                	mov    ebp,esp
c0025b45:	53                   	push   ebx
c0025b46:	83 ec 2c             	sub    esp,0x2c
c0025b49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b4c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b4f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b52:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b55:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b58:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b5b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b5e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b61:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b64:	88 d8                	mov    al,bl
c0025b66:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025b69:	88 c8                	mov    al,cl
c0025b6b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b6e:	88 d0                	mov    al,dl
c0025b70:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025b73:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b77:	83 c0 08             	add    eax,0x8
c0025b7a:	01 c0                	add    eax,eax
c0025b7c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b7f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b83:	83 c0 08             	add    eax,0x8
c0025b86:	01 c0                	add    eax,eax
c0025b88:	40                   	inc    eax
c0025b89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b8c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b8f:	50                   	push   eax
c0025b90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b93:	e8 60 fe ff ff       	call   c00259f8 <IOAPIC::read(int)>
c0025b98:	83 c4 08             	add    esp,0x8
c0025b9b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025b9e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ba5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025ba8:	c1 e0 18             	shl    eax,0x18
c0025bab:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025bae:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bb1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025bb4:	52                   	push   edx
c0025bb5:	50                   	push   eax
c0025bb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bb9:	e8 58 ff ff ff       	call   c0025b16 <IOAPIC::write(int, int)>
c0025bbe:	83 c4 0c             	add    esp,0xc
c0025bc1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bc4:	50                   	push   eax
c0025bc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bc8:	e8 2b fe ff ff       	call   c00259f8 <IOAPIC::read(int)>
c0025bcd:	83 c4 08             	add    esp,0x8
c0025bd0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025bd3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025bda:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025be1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025be8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025bec:	74 09                	je     c0025bf7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025bee:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025bf5:	eb 07                	jmp    c0025bfe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025bf7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025bfe:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c02:	74 09                	je     c0025c0d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c04:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c0b:	eb 07                	jmp    c0025c14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c0d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c14:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c1b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025c1f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025c22:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025c25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c28:	52                   	push   edx
c0025c29:	50                   	push   eax
c0025c2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c2d:	e8 e4 fe ff ff       	call   c0025b16 <IOAPIC::write(int, int)>
c0025c32:	83 c4 0c             	add    esp,0xc
c0025c35:	90                   	nop
c0025c36:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c39:	c9                   	leave  
c0025c3a:	c3                   	ret    
c0025c3b:	90                   	nop

c0025c3c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c3c:	55                   	push   ebp
c0025c3d:	89 e5                	mov    ebp,esp
c0025c3f:	57                   	push   edi
c0025c40:	56                   	push   esi
c0025c41:	53                   	push   ebx
c0025c42:	83 ec 2c             	sub    esp,0x2c
c0025c45:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c48:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c4b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c4f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c53:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c57:	74 5a                	je     c0025cb3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c59:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c5d:	7f 44                	jg     c0025ca3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c62:	05 e0 d5 02 c0       	add    eax,0xc002d5e0
c0025c67:	8a 00                	mov    al,BYTE PTR [eax]
c0025c69:	0f b6 c0             	movzx  eax,al
c0025c6c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c72:	66 8b 84 00 40 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0c0]
c0025c7a:	0f b7 c0             	movzx  eax,ax
c0025c7d:	83 e0 02             	and    eax,0x2
c0025c80:	85 c0                	test   eax,eax
c0025c82:	74 04                	je     c0025c88 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025c84:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025c88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c8b:	66 8b 84 00 40 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf0c0]
c0025c93:	0f b7 c0             	movzx  eax,ax
c0025c96:	83 e0 08             	and    eax,0x8
c0025c99:	85 c0                	test   eax,eax
c0025c9b:	74 16                	je     c0025cb3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c9d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ca1:	eb 10                	jmp    c0025cb3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ca3:	83 ec 0c             	sub    esp,0xc
c0025ca6:	68 98 d0 02 c0       	push   0xc002d098
c0025cab:	e8 bb 48 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0025cb0:	83 c4 10             	add    esp,0x10
c0025cb3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025cb7:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025cbc:	83 ec 08             	sub    esp,0x8
c0025cbf:	50                   	push   eax
c0025cc0:	68 d0 d0 02 c0       	push   0xc002d0d0
c0025cc5:	e8 fc d1 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0025cca:	83 c4 10             	add    esp,0x10
c0025ccd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025cd4:	a1 40 29 03 c0       	mov    eax,ds:0xc0032940
c0025cd9:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025cdc:	7d 67                	jge    c0025d45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025cde:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025ce1:	8b 04 85 60 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6a0]
c0025ce8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ceb:	83 ec 08             	sub    esp,0x8
c0025cee:	52                   	push   edx
c0025cef:	50                   	push   eax
c0025cf0:	e8 d1 fc ff ff       	call   c00259c6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025cf5:	83 c4 10             	add    esp,0x10
c0025cf8:	84 c0                	test   al,al
c0025cfa:	74 44                	je     c0025d40 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025cfc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025cff:	8b 1c 85 60 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd6a0]
c0025d06:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d0a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d0d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d14:	83 c0 20             	add    eax,0x20
c0025d17:	0f b6 f0             	movzx  esi,al
c0025d1a:	b8 00 00 00 00       	mov    eax,0x0
c0025d1f:	99                   	cdq    
c0025d20:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d23:	0f b6 c9             	movzx  ecx,cl
c0025d26:	83 ec 04             	sub    esp,0x4
c0025d29:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025d2c:	57                   	push   edi
c0025d2d:	56                   	push   esi
c0025d2e:	52                   	push   edx
c0025d2f:	50                   	push   eax
c0025d30:	51                   	push   ecx
c0025d31:	53                   	push   ebx
c0025d32:	e8 0b fe ff ff       	call   c0025b42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d37:	83 c4 20             	add    esp,0x20
c0025d3a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d3e:	eb 05                	jmp    c0025d45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d40:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d43:	eb 8f                	jmp    c0025cd4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d45:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d48:	83 f0 01             	xor    eax,0x1
c0025d4b:	84 c0                	test   al,al
c0025d4d:	74 10                	je     c0025d5f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d4f:	83 ec 0c             	sub    esp,0xc
c0025d52:	68 e7 d0 02 c0       	push   0xc002d0e7
c0025d57:	e8 0f 48 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0025d5c:	83 c4 10             	add    esp,0x10
c0025d5f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d63:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025d6a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025d6e:	7f 65                	jg     c0025dd5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025d70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d76:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d7d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d80:	01 ca                	add    edx,ecx
c0025d82:	83 c2 54             	add    edx,0x54
c0025d85:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025d89:	85 c0                	test   eax,eax
c0025d8b:	75 43                	jne    c0025dd0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d90:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d93:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d9a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d9d:	01 ca                	add    edx,ecx
c0025d9f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025da2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025da5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025daf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025db6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025db9:	01 ca                	add    edx,ecx
c0025dbb:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025dc1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025dc4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025dc8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dcb:	83 e8 20             	sub    eax,0x20
c0025dce:	eb 1a                	jmp    c0025dea <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025dd0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025dd3:	eb 95                	jmp    c0025d6a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025dd5:	83 ec 0c             	sub    esp,0xc
c0025dd8:	68 f4 d0 02 c0       	push   0xc002d0f4
c0025ddd:	e8 89 47 ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0025de2:	83 c4 10             	add    esp,0x10
c0025de5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025dea:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ded:	5b                   	pop    ebx
c0025dee:	5e                   	pop    esi
c0025def:	5f                   	pop    edi
c0025df0:	5d                   	pop    ebp
c0025df1:	c3                   	ret    

c0025df2 <PIC::disable()>:
c0025df2:	55                   	push   ebp
c0025df3:	89 e5                	mov    ebp,esp
c0025df5:	83 ec 10             	sub    esp,0x10
c0025df8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025dfe:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e02:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e05:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e09:	ee                   	out    dx,al
c0025e0a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e10:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e14:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e17:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e1b:	ee                   	out    dx,al
c0025e1c:	90                   	nop
c0025e1d:	c9                   	leave  
c0025e1e:	c3                   	ret    
c0025e1f:	90                   	nop

c0025e20 <PIC::close(int, int, void*)>:
c0025e20:	55                   	push   ebp
c0025e21:	89 e5                	mov    ebp,esp
c0025e23:	83 ec 08             	sub    esp,0x8
c0025e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e2b:	83 c0 3c             	add    eax,0x3c
c0025e2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e30:	83 ec 0c             	sub    esp,0xc
c0025e33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e36:	ff d0                	call   eax
c0025e38:	83 c4 10             	add    esp,0x10
c0025e3b:	b8 00 00 00 00       	mov    eax,0x0
c0025e40:	c9                   	leave  
c0025e41:	c3                   	ret    

c0025e42 <PIC::PIC()>:
c0025e42:	83 ec 0c             	sub    esp,0xc
c0025e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e49:	83 ec 08             	sub    esp,0x8
c0025e4c:	68 a0 d1 02 c0       	push   0xc002d1a0
c0025e51:	50                   	push   eax
c0025e52:	e8 f1 ed fe ff       	call   c0014c48 <InterruptController::InterruptController(char const*)>
c0025e57:	83 c4 10             	add    esp,0x10
c0025e5a:	ba cc d1 02 c0       	mov    edx,0xc002d1cc
c0025e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e63:	89 10                	mov    DWORD PTR [eax],edx
c0025e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e6f:	0f b6 d0             	movzx  edx,al
c0025e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e76:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e81:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e87:	0f b6 d0             	movzx  edx,al
c0025e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e9d:	8d 50 01             	lea    edx,[eax+0x1]
c0025ea0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ea4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025eaa:	0f b6 d0             	movzx  edx,al
c0025ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025eb5:	83 e1 3f             	and    ecx,0x3f
c0025eb8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ec6:	0f b6 d0             	movzx  edx,al
c0025ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ecd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ede:	0f b6 d0             	movzx  edx,al
c0025ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ef4:	8d 50 01             	lea    edx,[eax+0x1]
c0025ef7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025efb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f01:	0f b6 d0             	movzx  edx,al
c0025f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f08:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f0c:	83 e1 3f             	and    ecx,0x3f
c0025f0f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f13:	90                   	nop
c0025f14:	83 c4 0c             	add    esp,0xc
c0025f17:	c3                   	ret    

c0025f18 <PIC::ioWait()>:
c0025f18:	eb 00                	jmp    c0025f1a <PIC::ioWait()+0x2>
c0025f1a:	eb 00                	jmp    c0025f1c <PIC::ioWait()+0x4>
c0025f1c:	90                   	nop
c0025f1d:	c3                   	ret    

c0025f1e <PIC::getIRQReg(int)>:
c0025f1e:	55                   	push   ebp
c0025f1f:	89 e5                	mov    ebp,esp
c0025f21:	83 ec 10             	sub    esp,0x10
c0025f24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f27:	0f b6 c0             	movzx  eax,al
c0025f2a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f30:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f33:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f36:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f3a:	ee                   	out    dx,al
c0025f3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f3e:	0f b6 c0             	movzx  eax,al
c0025f41:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f47:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f4a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f4d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f51:	ee                   	out    dx,al
c0025f52:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f58:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f5c:	89 c2                	mov    edx,eax
c0025f5e:	ec                   	in     al,dx
c0025f5f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f62:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f65:	0f b6 c0             	movzx  eax,al
c0025f68:	c1 e0 08             	shl    eax,0x8
c0025f6b:	89 c1                	mov    ecx,eax
c0025f6d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025f73:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025f77:	89 c2                	mov    edx,eax
c0025f79:	ec                   	in     al,dx
c0025f7a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025f7d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f80:	0f b6 c0             	movzx  eax,al
c0025f83:	09 c8                	or     eax,ecx
c0025f85:	c9                   	leave  
c0025f86:	c3                   	ret    
c0025f87:	90                   	nop

c0025f88 <PIC::eoi(unsigned char)>:
c0025f88:	55                   	push   ebp
c0025f89:	89 e5                	mov    ebp,esp
c0025f8b:	83 ec 14             	sub    esp,0x14
c0025f8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f91:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025f94:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f98:	75 1e                	jne    c0025fb8 <PIC::eoi(unsigned char)+0x30>
c0025f9a:	6a 0b                	push   0xb
c0025f9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f9f:	e8 7a ff ff ff       	call   c0025f1e <PIC::getIRQReg(int)>
c0025fa4:	83 c4 08             	add    esp,0x8
c0025fa7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025fab:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025faf:	25 80 00 00 00       	and    eax,0x80
c0025fb4:	85 c0                	test   eax,eax
c0025fb6:	74 5f                	je     c0026017 <PIC::eoi(unsigned char)+0x8f>
c0025fb8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025fbc:	75 2d                	jne    c0025feb <PIC::eoi(unsigned char)+0x63>
c0025fbe:	6a 0b                	push   0xb
c0025fc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fc3:	e8 56 ff ff ff       	call   c0025f1e <PIC::getIRQReg(int)>
c0025fc8:	83 c4 08             	add    esp,0x8
c0025fcb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025fcf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025fd2:	66 85 c0             	test   ax,ax
c0025fd5:	78 14                	js     c0025feb <PIC::eoi(unsigned char)+0x63>
c0025fd7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025fdd:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025fe1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fe4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025fe8:	ee                   	out    dx,al
c0025fe9:	eb 2d                	jmp    c0026018 <PIC::eoi(unsigned char)+0x90>
c0025feb:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fef:	76 12                	jbe    c0026003 <PIC::eoi(unsigned char)+0x7b>
c0025ff1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025ff7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025ffb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ffe:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026002:	ee                   	out    dx,al
c0026003:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026009:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002600d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026010:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026014:	ee                   	out    dx,al
c0026015:	eb 01                	jmp    c0026018 <PIC::eoi(unsigned char)+0x90>
c0026017:	90                   	nop
c0026018:	c9                   	leave  
c0026019:	c3                   	ret    

c002601a <PIC::remap()>:
c002601a:	55                   	push   ebp
c002601b:	89 e5                	mov    ebp,esp
c002601d:	83 ec 48             	sub    esp,0x48
c0026020:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026027:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002602e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026034:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026037:	89 c2                	mov    edx,eax
c0026039:	ec                   	in     al,dx
c002603a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002603d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026040:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026043:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026049:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002604c:	89 c2                	mov    edx,eax
c002604e:	ec                   	in     al,dx
c002604f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026052:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026055:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026058:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002605e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026062:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026065:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026068:	ee                   	out    dx,al
c0026069:	83 ec 0c             	sub    esp,0xc
c002606c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002606f:	e8 a4 fe ff ff       	call   c0025f18 <PIC::ioWait()>
c0026074:	83 c4 10             	add    esp,0x10
c0026077:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002607d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026081:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026084:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026087:	ee                   	out    dx,al
c0026088:	83 ec 0c             	sub    esp,0xc
c002608b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002608e:	e8 85 fe ff ff       	call   c0025f18 <PIC::ioWait()>
c0026093:	83 c4 10             	add    esp,0x10
c0026096:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026099:	0f b6 c0             	movzx  eax,al
c002609c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00260a2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00260a5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00260a8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00260ab:	ee                   	out    dx,al
c00260ac:	83 ec 0c             	sub    esp,0xc
c00260af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260b2:	e8 61 fe ff ff       	call   c0025f18 <PIC::ioWait()>
c00260b7:	83 c4 10             	add    esp,0x10
c00260ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260bd:	0f b6 c0             	movzx  eax,al
c00260c0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00260c6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00260c9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00260cc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00260cf:	ee                   	out    dx,al
c00260d0:	83 ec 0c             	sub    esp,0xc
c00260d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260d6:	e8 3d fe ff ff       	call   c0025f18 <PIC::ioWait()>
c00260db:	83 c4 10             	add    esp,0x10
c00260de:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00260e4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00260e8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00260eb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00260ee:	ee                   	out    dx,al
c00260ef:	83 ec 0c             	sub    esp,0xc
c00260f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f5:	e8 1e fe ff ff       	call   c0025f18 <PIC::ioWait()>
c00260fa:	83 c4 10             	add    esp,0x10
c00260fd:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026103:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026107:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002610a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002610d:	ee                   	out    dx,al
c002610e:	83 ec 0c             	sub    esp,0xc
c0026111:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026114:	e8 ff fd ff ff       	call   c0025f18 <PIC::ioWait()>
c0026119:	83 c4 10             	add    esp,0x10
c002611c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026122:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026126:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026129:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002612c:	ee                   	out    dx,al
c002612d:	83 ec 0c             	sub    esp,0xc
c0026130:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026133:	e8 e0 fd ff ff       	call   c0025f18 <PIC::ioWait()>
c0026138:	83 c4 10             	add    esp,0x10
c002613b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026141:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026145:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026148:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002614b:	ee                   	out    dx,al
c002614c:	83 ec 0c             	sub    esp,0xc
c002614f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026152:	e8 c1 fd ff ff       	call   c0025f18 <PIC::ioWait()>
c0026157:	83 c4 10             	add    esp,0x10
c002615a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002615e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026164:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026167:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002616a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002616d:	ee                   	out    dx,al
c002616e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026172:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026178:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002617b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002617e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026181:	ee                   	out    dx,al
c0026182:	90                   	nop
c0026183:	c9                   	leave  
c0026184:	c3                   	ret    
c0026185:	90                   	nop

c0026186 <PIC::open(int, int, void*)>:
c0026186:	55                   	push   ebp
c0026187:	89 e5                	mov    ebp,esp
c0026189:	83 ec 18             	sub    esp,0x18
c002618c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026192:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026196:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026199:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002619d:	ee                   	out    dx,al
c002619e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00261a4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00261a8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261ab:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261af:	ee                   	out    dx,al
c00261b0:	83 ec 0c             	sub    esp,0xc
c00261b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b6:	e8 5f fe ff ff       	call   c002601a <PIC::remap()>
c00261bb:	83 c4 10             	add    esp,0x10
c00261be:	b8 00 00 00 00       	mov    eax,0x0
c00261c3:	c9                   	leave  
c00261c4:	c3                   	ret    
c00261c5:	90                   	nop

c00261c6 <APICTimer::close(int, int, void*)>:
c00261c6:	b8 00 00 00 00       	mov    eax,0x0
c00261cb:	c3                   	ret    

c00261cc <apicTimerHandler(regs*, void*)>:
c00261cc:	83 ec 0c             	sub    esp,0xc
c00261cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00261d5:	99                   	cdq    
c00261d6:	52                   	push   edx
c00261d7:	50                   	push   eax
c00261d8:	6a 00                	push   0x0
c00261da:	68 00 ca 9a 3b       	push   0x3b9aca00
c00261df:	e8 88 07 00 00       	call   c002696c <__udivdi3>
c00261e4:	83 c4 10             	add    esp,0x10
c00261e7:	83 ec 08             	sub    esp,0x8
c00261ea:	52                   	push   edx
c00261eb:	50                   	push   eax
c00261ec:	e8 a2 0a ff ff       	call   c0016c93 <timerHandler(unsigned long long)>
c00261f1:	83 c4 10             	add    esp,0x10
c00261f4:	90                   	nop
c00261f5:	83 c4 0c             	add    esp,0xc
c00261f8:	c3                   	ret    
c00261f9:	90                   	nop

c00261fa <APICTimer::write(int)>:
c00261fa:	53                   	push   ebx
c00261fb:	83 ec 28             	sub    esp,0x28
c00261fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026202:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026206:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002620c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026211:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026217:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002621d:	83 ec 0c             	sub    esp,0xc
c0026220:	50                   	push   eax
c0026221:	e8 de f4 ff ff       	call   c0025704 <APIC::getBase()>
c0026226:	83 c4 10             	add    esp,0x10
c0026229:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002622d:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c0026232:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c0026238:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002623c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026244:	05 e0 03 00 00       	add    eax,0x3e0
c0026249:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002624f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026253:	05 80 03 00 00       	add    eax,0x380
c0026258:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002625e:	fb                   	sti    
c002625f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026263:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026267:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002626c:	83 d2 00             	adc    edx,0x0
c002626f:	89 c1                	mov    ecx,eax
c0026271:	89 d3                	mov    ebx,edx
c0026273:	a1 50 ec 02 c0       	mov    eax,ds:0xc002ec50
c0026278:	8b 15 54 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec54
c002627e:	39 c8                	cmp    eax,ecx
c0026280:	89 d0                	mov    eax,edx
c0026282:	19 d8                	sbb    eax,ebx
c0026284:	73 02                	jae    c0026288 <APICTimer::write(int)+0x8e>
c0026286:	eb d7                	jmp    c002625f <APICTimer::write(int)+0x65>
c0026288:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002628c:	05 20 03 00 00       	add    eax,0x320
c0026291:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002629b:	05 90 03 00 00       	add    eax,0x390
c00262a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00262a2:	f7 d0                	not    eax
c00262a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262a8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262b0:	ba 00 00 00 00       	mov    edx,0x0
c00262b5:	f7 f3                	div    ebx
c00262b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00262bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262c5:	0d 00 00 02 00       	or     eax,0x20000
c00262ca:	89 c2                	mov    edx,eax
c00262cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d0:	05 20 03 00 00       	add    eax,0x320
c00262d5:	89 10                	mov    DWORD PTR [eax],edx
c00262d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262db:	05 e0 03 00 00       	add    eax,0x3e0
c00262e0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262ea:	05 80 03 00 00       	add    eax,0x380
c00262ef:	89 c2                	mov    edx,eax
c00262f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00262f5:	89 02                	mov    DWORD PTR [edx],eax
c00262f7:	90                   	nop
c00262f8:	83 c4 28             	add    esp,0x28
c00262fb:	5b                   	pop    ebx
c00262fc:	c3                   	ret    
c00262fd:	90                   	nop

c00262fe <APICTimer::open(int, int, void*)>:
c00262fe:	57                   	push   edi
c00262ff:	56                   	push   esi
c0026300:	53                   	push   ebx
c0026301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026305:	8b 00                	mov    eax,DWORD PTR [eax]
c0026307:	83 c0 24             	add    eax,0x24
c002630a:	8b 00                	mov    eax,DWORD PTR [eax]
c002630c:	83 ec 08             	sub    esp,0x8
c002630f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026317:	ff d0                	call   eax
c0026319:	83 c4 10             	add    esp,0x10
c002631c:	a1 88 e3 02 c0       	mov    eax,ds:0xc002e388
c0026321:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026327:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002632d:	83 ec 0c             	sub    esp,0xc
c0026330:	50                   	push   eax
c0026331:	e8 ce f3 ff ff       	call   c0025704 <APIC::getBase()>
c0026336:	83 c4 10             	add    esp,0x10
c0026339:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002633f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026343:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026349:	0f b6 f8             	movzx  edi,al
c002634c:	89 d0                	mov    eax,edx
c002634e:	ba 00 00 00 00       	mov    edx,0x0
c0026353:	89 c1                	mov    ecx,eax
c0026355:	80 e5 ff             	and    ch,0xff
c0026358:	89 cb                	mov    ebx,ecx
c002635a:	0f b6 f2             	movzx  esi,dl
c002635d:	89 d8                	mov    eax,ebx
c002635f:	89 f2                	mov    edx,esi
c0026361:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026365:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026368:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002636c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026370:	83 e0 00             	and    eax,0x0
c0026373:	09 d0                	or     eax,edx
c0026375:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026383:	8d 50 01             	lea    edx,[eax+0x1]
c0026386:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002638a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026390:	0f b6 d0             	movzx  edx,al
c0026393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026397:	83 c2 08             	add    edx,0x8
c002639a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002639e:	0f b6 c9             	movzx  ecx,cl
c00263a1:	81 c9 00 00 01 00    	or     ecx,0x10000
c00263a7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00263ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00263b3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263c1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00263c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00263cb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00263d1:	83 ec 0c             	sub    esp,0xc
c00263d4:	51                   	push   ecx
c00263d5:	6a 01                	push   0x1
c00263d7:	68 cc 61 02 c0       	push   0xc00261cc
c00263dc:	52                   	push   edx
c00263dd:	50                   	push   eax
c00263de:	e8 8d de fe ff       	call   c0014270 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00263e3:	83 c4 20             	add    esp,0x20
c00263e6:	89 c2                	mov    edx,eax
c00263e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ec:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00263f2:	b8 00 00 00 00       	mov    eax,0x0
c00263f7:	5b                   	pop    ebx
c00263f8:	5e                   	pop    esi
c00263f9:	5f                   	pop    edi
c00263fa:	c3                   	ret    
c00263fb:	90                   	nop

c00263fc <APICTimer::APICTimer()>:
c00263fc:	83 ec 0c             	sub    esp,0xc
c00263ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026403:	83 ec 08             	sub    esp,0x8
c0026406:	68 0c d2 02 c0       	push   0xc002d20c
c002640b:	50                   	push   eax
c002640c:	e8 f3 07 ff ff       	call   c0016c04 <Timer::Timer(char const*)>
c0026411:	83 c4 10             	add    esp,0x10
c0026414:	ba 20 d2 02 c0       	mov    edx,0xc002d220
c0026419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641d:	89 10                	mov    DWORD PTR [eax],edx
c002641f:	90                   	nop
c0026420:	83 c4 0c             	add    esp,0xc
c0026423:	c3                   	ret    

c0026424 <PIT::write(int)>:
c0026424:	83 ec 10             	sub    esp,0x10
c0026427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002642b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002642f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026435:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026439:	a3 84 29 03 c0       	mov    ds:0xc0032984,eax
c002643e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026443:	99                   	cdq    
c0026444:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026448:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002644c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026453:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026458:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002645c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026461:	ee                   	out    dx,al
c0026462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026466:	0f b6 c0             	movzx  eax,al
c0026469:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026470:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026474:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026478:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002647d:	ee                   	out    dx,al
c002647e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026482:	c1 f8 08             	sar    eax,0x8
c0026485:	0f b6 c0             	movzx  eax,al
c0026488:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002648f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026493:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026497:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002649c:	ee                   	out    dx,al
c002649d:	90                   	nop
c002649e:	83 c4 10             	add    esp,0x10
c00264a1:	c3                   	ret    

c00264a2 <pitHandler(regs*, void*)>:
c00264a2:	83 ec 0c             	sub    esp,0xc
c00264a5:	a1 84 29 03 c0       	mov    eax,ds:0xc0032984
c00264aa:	99                   	cdq    
c00264ab:	52                   	push   edx
c00264ac:	50                   	push   eax
c00264ad:	6a 00                	push   0x0
c00264af:	68 00 ca 9a 3b       	push   0x3b9aca00
c00264b4:	e8 b3 04 00 00       	call   c002696c <__udivdi3>
c00264b9:	83 c4 10             	add    esp,0x10
c00264bc:	83 ec 08             	sub    esp,0x8
c00264bf:	52                   	push   edx
c00264c0:	50                   	push   eax
c00264c1:	e8 cd 07 ff ff       	call   c0016c93 <timerHandler(unsigned long long)>
c00264c6:	83 c4 10             	add    esp,0x10
c00264c9:	90                   	nop
c00264ca:	83 c4 0c             	add    esp,0xc
c00264cd:	c3                   	ret    

c00264ce <PIT::open(int, int, void*)>:
c00264ce:	83 ec 0c             	sub    esp,0xc
c00264d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00264d7:	83 c0 24             	add    eax,0x24
c00264da:	8b 00                	mov    eax,DWORD PTR [eax]
c00264dc:	83 ec 08             	sub    esp,0x8
c00264df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264e7:	ff d0                	call   eax
c00264e9:	83 c4 10             	add    esp,0x10
c00264ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f0:	83 ec 0c             	sub    esp,0xc
c00264f3:	6a 00                	push   0x0
c00264f5:	6a 01                	push   0x1
c00264f7:	68 a2 64 02 c0       	push   0xc00264a2
c00264fc:	6a 00                	push   0x0
c00264fe:	50                   	push   eax
c00264ff:	e8 6c dd fe ff       	call   c0014270 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026504:	83 c4 20             	add    esp,0x20
c0026507:	89 c2                	mov    edx,eax
c0026509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026513:	b8 00 00 00 00       	mov    eax,0x0
c0026518:	83 c4 0c             	add    esp,0xc
c002651b:	c3                   	ret    

c002651c <PIT::close(int, int, void*)>:
c002651c:	83 ec 0c             	sub    esp,0xc
c002651f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026523:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002652d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026531:	6a 01                	push   0x1
c0026533:	68 a2 64 02 c0       	push   0xc00264a2
c0026538:	6a 00                	push   0x0
c002653a:	50                   	push   eax
c002653b:	e8 6e dd fe ff       	call   c00142ae <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026540:	83 c4 10             	add    esp,0x10
c0026543:	b8 00 00 00 00       	mov    eax,0x0
c0026548:	83 c4 0c             	add    esp,0xc
c002654b:	c3                   	ret    

c002654c <PIT::PIT()>:
c002654c:	83 ec 0c             	sub    esp,0xc
c002654f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026553:	83 ec 08             	sub    esp,0x8
c0026556:	68 48 d2 02 c0       	push   0xc002d248
c002655b:	50                   	push   eax
c002655c:	e8 a3 06 ff ff       	call   c0016c04 <Timer::Timer(char const*)>
c0026561:	83 c4 10             	add    esp,0x10
c0026564:	ba 70 d2 02 c0       	mov    edx,0xc002d270
c0026569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002656d:	89 10                	mov    DWORD PTR [eax],edx
c002656f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026573:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026579:	0f b6 d0             	movzx  edx,al
c002657c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026580:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002658b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026591:	0f b6 d0             	movzx  edx,al
c0026594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026598:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002659d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265a7:	8d 50 01             	lea    edx,[eax+0x1]
c00265aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00265b4:	0f b6 d0             	movzx  edx,al
c00265b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00265bf:	83 e1 3f             	and    ecx,0x3f
c00265c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00265c6:	90                   	nop
c00265c7:	83 c4 0c             	add    esp,0xc
c00265ca:	c3                   	ret    
c00265cb:	66 90                	xchg   ax,ax
c00265cd:	66 90                	xchg   ax,ax
c00265cf:	90                   	nop

c00265d0 <avxDetect>:
c00265d0:	b8 00 00 00 00       	mov    eax,0x0
c00265d5:	c3                   	ret    

c00265d6 <avxSave>:
c00265d6:	c3                   	ret    

c00265d7 <avxLoad>:
c00265d7:	c3                   	ret    

c00265d8 <avxInit>:
c00265d8:	c3                   	ret    

c00265d9 <avxClose>:
c00265d9:	c3                   	ret    

c00265da <wouldSheSayYes>:
c00265da:	c3                   	ret    
c00265db:	49                   	dec    ecx
c00265dc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00265e0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00265e4:	75 20                	jne    c0026606 <sseDetect.noSSE+0x1>
c00265e6:	4e                   	dec    esi
c00265e7:	79 61                	jns    c002664a <x87Detect+0x14>
c00265e9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00265ee:	66 90                	xchg   ax,ax

c00265f0 <absolutelyNoChanceInHell>:
c00265f0:	b8 01 00 00 00       	mov    eax,0x1
c00265f5:	0f a2                	cpuid  
c00265f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00265fd:	74 06                	je     c0026605 <sseDetect.noSSE>
c00265ff:	b8 01 00 00 00       	mov    eax,0x1
c0026604:	c3                   	ret    

c0026605 <sseDetect.noSSE>:
c0026605:	31 c0                	xor    eax,eax
c0026607:	c3                   	ret    

c0026608 <sseSave>:
c0026608:	0f ae 44 24 08       	fxsave [esp+0x8]
c002660d:	c3                   	ret    

c002660e <sseLoad>:
c002660e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026613:	c3                   	ret    

c0026614 <sseInit>:
c0026614:	e8 43 00 00 00       	call   c002665c <x87Init>
c0026619:	0f 20 e0             	mov    eax,cr4
c002661c:	66 0d 00 06          	or     ax,0x600
c0026620:	0f 22 e0             	mov    cr4,eax
c0026623:	c3                   	ret    

c0026624 <sseClose>:
c0026624:	c3                   	ret    
c0026625:	66 90                	xchg   ax,ax
c0026627:	66 90                	xchg   ax,ax
c0026629:	66 90                	xchg   ax,ax
c002662b:	66 90                	xchg   ax,ax
c002662d:	66 90                	xchg   ax,ax
c002662f:	90                   	nop

c0026630 <value_37F>:
c0026630:	7f 03                	jg     c0026635 <value_37A+0x1>

c0026632 <value_37E>:
c0026632:	7e 03                	jle    c0026637 <x87Detect+0x1>

c0026634 <value_37A>:
c0026634:	7a 03                	jp     c0026639 <x87Detect+0x3>

c0026636 <x87Detect>:
c0026636:	b8 01 00 00 00       	mov    eax,0x1
c002663b:	0f a2                	cpuid  
c002663d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026643:	74 06                	je     c002664b <x87Detect.nox87>
c0026645:	b8 01 00 00 00       	mov    eax,0x1
c002664a:	c3                   	ret    

c002664b <x87Detect.nox87>:
c002664b:	b8 00 00 00 00       	mov    eax,0x0
c0026650:	c3                   	ret    

c0026651 <x87Save>:
c0026651:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026656:	c3                   	ret    

c0026657 <x87Load>:
c0026657:	dd 64 24 08          	frstor [esp+0x8]
c002665b:	c3                   	ret    

c002665c <x87Init>:
c002665c:	9b db e3             	finit  
c002665f:	0f 20 c0             	mov    eax,cr0
c0026662:	66 25 fb ff          	and    ax,0xfffb
c0026666:	66 0d 22 00          	or     ax,0x22
c002666a:	0f 22 c0             	mov    cr0,eax
c002666d:	0f 06                	clts   
c002666f:	d9 2d 34 66 02 c0    	fldcw  WORD PTR ds:0xc0026634
c0026675:	c3                   	ret    

c0026676 <x87Close>:
c0026676:	c3                   	ret    
c0026677:	90                   	nop

c0026678 <__do_global_ctors_aux>:
c0026678:	a1 bc 91 02 c0       	mov    eax,ds:0xc00291bc
c002667d:	83 f8 ff             	cmp    eax,0xffffffff
c0026680:	74 1a                	je     c002669c <__do_global_ctors_aux+0x24>
c0026682:	55                   	push   ebp
c0026683:	89 e5                	mov    ebp,esp
c0026685:	53                   	push   ebx
c0026686:	52                   	push   edx
c0026687:	bb bc 91 02 c0       	mov    ebx,0xc00291bc
c002668c:	ff d0                	call   eax
c002668e:	83 eb 04             	sub    ebx,0x4
c0026691:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026693:	83 f8 ff             	cmp    eax,0xffffffff
c0026696:	75 f4                	jne    c002668c <__do_global_ctors_aux+0x14>
c0026698:	58                   	pop    eax
c0026699:	5b                   	pop    ebx
c002669a:	5d                   	pop    ebp
c002669b:	c3                   	ret    
c002669c:	c3                   	ret    
c002669d:	66 90                	xchg   ax,ax
c002669f:	90                   	nop

c00266a0 <__divdi3>:
c00266a0:	55                   	push   ebp
c00266a1:	57                   	push   edi
c00266a2:	56                   	push   esi
c00266a3:	53                   	push   ebx
c00266a4:	83 ec 1c             	sub    esp,0x1c
c00266a7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00266ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00266b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00266b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00266ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00266be:	85 db                	test   ebx,ebx
c00266c0:	0f 88 8e 00 00 00    	js     c0026754 <__divdi3+0xb4>
c00266c6:	89 dd                	mov    ebp,ebx
c00266c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00266d0:	89 d3                	mov    ebx,edx
c00266d2:	85 d2                	test   edx,edx
c00266d4:	79 0d                	jns    c00266e3 <__divdi3+0x43>
c00266d6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00266da:	f7 d8                	neg    eax
c00266dc:	83 d2 00             	adc    edx,0x0
c00266df:	f7 da                	neg    edx
c00266e1:	89 d3                	mov    ebx,edx
c00266e3:	89 c7                	mov    edi,eax
c00266e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266e8:	85 db                	test   ebx,ebx
c00266ea:	75 48                	jne    c0026734 <__divdi3+0x94>
c00266ec:	39 ef                	cmp    edi,ebp
c00266ee:	76 24                	jbe    c0026714 <__divdi3+0x74>
c00266f0:	89 ea                	mov    edx,ebp
c00266f2:	f7 f7                	div    edi
c00266f4:	89 c1                	mov    ecx,eax
c00266f6:	31 f6                	xor    esi,esi
c00266f8:	89 c8                	mov    eax,ecx
c00266fa:	89 f2                	mov    edx,esi
c00266fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026700:	85 c9                	test   ecx,ecx
c0026702:	74 07                	je     c002670b <__divdi3+0x6b>
c0026704:	f7 d8                	neg    eax
c0026706:	83 d2 00             	adc    edx,0x0
c0026709:	f7 da                	neg    edx
c002670b:	83 c4 1c             	add    esp,0x1c
c002670e:	5b                   	pop    ebx
c002670f:	5e                   	pop    esi
c0026710:	5f                   	pop    edi
c0026711:	5d                   	pop    ebp
c0026712:	c3                   	ret    
c0026713:	90                   	nop
c0026714:	85 ff                	test   edi,edi
c0026716:	75 0b                	jne    c0026723 <__divdi3+0x83>
c0026718:	b8 01 00 00 00       	mov    eax,0x1
c002671d:	31 d2                	xor    edx,edx
c002671f:	f7 f3                	div    ebx
c0026721:	89 c7                	mov    edi,eax
c0026723:	31 d2                	xor    edx,edx
c0026725:	89 e8                	mov    eax,ebp
c0026727:	f7 f7                	div    edi
c0026729:	89 c6                	mov    esi,eax
c002672b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002672e:	f7 f7                	div    edi
c0026730:	89 c1                	mov    ecx,eax
c0026732:	eb c4                	jmp    c00266f8 <__divdi3+0x58>
c0026734:	39 eb                	cmp    ebx,ebp
c0026736:	77 3c                	ja     c0026774 <__divdi3+0xd4>
c0026738:	0f bd f3             	bsr    esi,ebx
c002673b:	83 f6 1f             	xor    esi,0x1f
c002673e:	75 40                	jne    c0026780 <__divdi3+0xe0>
c0026740:	39 eb                	cmp    ebx,ebp
c0026742:	72 09                	jb     c002674d <__divdi3+0xad>
c0026744:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026747:	0f 87 97 00 00 00    	ja     c00267e4 <__divdi3+0x144>
c002674d:	b9 01 00 00 00       	mov    ecx,0x1
c0026752:	eb a4                	jmp    c00266f8 <__divdi3+0x58>
c0026754:	f7 d9                	neg    ecx
c0026756:	83 d3 00             	adc    ebx,0x0
c0026759:	f7 db                	neg    ebx
c002675b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002675e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026762:	89 dd                	mov    ebp,ebx
c0026764:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002676c:	e9 5f ff ff ff       	jmp    c00266d0 <__divdi3+0x30>
c0026771:	8d 76 00             	lea    esi,[esi+0x0]
c0026774:	31 f6                	xor    esi,esi
c0026776:	31 c9                	xor    ecx,ecx
c0026778:	e9 7b ff ff ff       	jmp    c00266f8 <__divdi3+0x58>
c002677d:	8d 76 00             	lea    esi,[esi+0x0]
c0026780:	b8 20 00 00 00       	mov    eax,0x20
c0026785:	29 f0                	sub    eax,esi
c0026787:	89 f1                	mov    ecx,esi
c0026789:	d3 e3                	shl    ebx,cl
c002678b:	89 fa                	mov    edx,edi
c002678d:	88 c1                	mov    cl,al
c002678f:	d3 ea                	shr    edx,cl
c0026791:	09 da                	or     edx,ebx
c0026793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026797:	89 f1                	mov    ecx,esi
c0026799:	d3 e7                	shl    edi,cl
c002679b:	89 eb                	mov    ebx,ebp
c002679d:	88 c1                	mov    cl,al
c002679f:	d3 eb                	shr    ebx,cl
c00267a1:	89 f1                	mov    ecx,esi
c00267a3:	d3 e5                	shl    ebp,cl
c00267a5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00267a8:	88 c1                	mov    cl,al
c00267aa:	d3 ea                	shr    edx,cl
c00267ac:	09 d5                	or     ebp,edx
c00267ae:	89 e8                	mov    eax,ebp
c00267b0:	89 da                	mov    edx,ebx
c00267b2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00267b6:	89 d3                	mov    ebx,edx
c00267b8:	89 c5                	mov    ebp,eax
c00267ba:	f7 e7                	mul    edi
c00267bc:	39 d3                	cmp    ebx,edx
c00267be:	72 18                	jb     c00267d8 <__divdi3+0x138>
c00267c0:	74 0a                	je     c00267cc <__divdi3+0x12c>
c00267c2:	89 e9                	mov    ecx,ebp
c00267c4:	31 f6                	xor    esi,esi
c00267c6:	e9 2d ff ff ff       	jmp    c00266f8 <__divdi3+0x58>
c00267cb:	90                   	nop
c00267cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00267cf:	89 f1                	mov    ecx,esi
c00267d1:	d3 e7                	shl    edi,cl
c00267d3:	39 c7                	cmp    edi,eax
c00267d5:	73 eb                	jae    c00267c2 <__divdi3+0x122>
c00267d7:	90                   	nop
c00267d8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00267db:	31 f6                	xor    esi,esi
c00267dd:	e9 16 ff ff ff       	jmp    c00266f8 <__divdi3+0x58>
c00267e2:	66 90                	xchg   ax,ax
c00267e4:	31 c9                	xor    ecx,ecx
c00267e6:	e9 0d ff ff ff       	jmp    c00266f8 <__divdi3+0x58>
c00267eb:	90                   	nop

c00267ec <__moddi3>:
c00267ec:	55                   	push   ebp
c00267ed:	57                   	push   edi
c00267ee:	56                   	push   esi
c00267ef:	53                   	push   ebx
c00267f0:	83 ec 2c             	sub    esp,0x2c
c00267f3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00267f7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00267fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00267ff:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026803:	85 db                	test   ebx,ebx
c0026805:	0f 88 85 00 00 00    	js     c0026890 <__moddi3+0xa4>
c002680b:	89 de                	mov    esi,ebx
c002680d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026815:	89 d7                	mov    edi,edx
c0026817:	85 d2                	test   edx,edx
c0026819:	79 09                	jns    c0026824 <__moddi3+0x38>
c002681b:	f7 d8                	neg    eax
c002681d:	83 d2 00             	adc    edx,0x0
c0026820:	f7 da                	neg    edx
c0026822:	89 d7                	mov    edi,edx
c0026824:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026828:	89 cd                	mov    ebp,ecx
c002682a:	85 ff                	test   edi,edi
c002682c:	75 52                	jne    c0026880 <__moddi3+0x94>
c002682e:	89 c3                	mov    ebx,eax
c0026830:	39 f0                	cmp    eax,esi
c0026832:	76 24                	jbe    c0026858 <__moddi3+0x6c>
c0026834:	89 c8                	mov    eax,ecx
c0026836:	89 f2                	mov    edx,esi
c0026838:	f7 f3                	div    ebx
c002683a:	89 d6                	mov    esi,edx
c002683c:	89 f0                	mov    eax,esi
c002683e:	31 d2                	xor    edx,edx
c0026840:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026844:	85 c9                	test   ecx,ecx
c0026846:	74 07                	je     c002684f <__moddi3+0x63>
c0026848:	f7 d8                	neg    eax
c002684a:	83 d2 00             	adc    edx,0x0
c002684d:	f7 da                	neg    edx
c002684f:	83 c4 2c             	add    esp,0x2c
c0026852:	5b                   	pop    ebx
c0026853:	5e                   	pop    esi
c0026854:	5f                   	pop    edi
c0026855:	5d                   	pop    ebp
c0026856:	c3                   	ret    
c0026857:	90                   	nop
c0026858:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002685c:	85 db                	test   ebx,ebx
c002685e:	75 0d                	jne    c002686d <__moddi3+0x81>
c0026860:	b8 01 00 00 00       	mov    eax,0x1
c0026865:	31 d2                	xor    edx,edx
c0026867:	f7 f7                	div    edi
c0026869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002686d:	89 f0                	mov    eax,esi
c002686f:	31 d2                	xor    edx,edx
c0026871:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026875:	f7 f7                	div    edi
c0026877:	89 e8                	mov    eax,ebp
c0026879:	f7 f7                	div    edi
c002687b:	89 d6                	mov    esi,edx
c002687d:	eb bd                	jmp    c002683c <__moddi3+0x50>
c002687f:	90                   	nop
c0026880:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026884:	39 f7                	cmp    edi,esi
c0026886:	76 20                	jbe    c00268a8 <__moddi3+0xbc>
c0026888:	89 c8                	mov    eax,ecx
c002688a:	89 f2                	mov    edx,esi
c002688c:	eb b2                	jmp    c0026840 <__moddi3+0x54>
c002688e:	66 90                	xchg   ax,ax
c0026890:	f7 d9                	neg    ecx
c0026892:	83 d3 00             	adc    ebx,0x0
c0026895:	f7 db                	neg    ebx
c0026897:	89 de                	mov    esi,ebx
c0026899:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00268a1:	e9 6f ff ff ff       	jmp    c0026815 <__moddi3+0x29>
c00268a6:	66 90                	xchg   ax,ax
c00268a8:	0f bd c7             	bsr    eax,edi
c00268ab:	83 f0 1f             	xor    eax,0x1f
c00268ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00268b2:	75 24                	jne    c00268d8 <__moddi3+0xec>
c00268b4:	39 f7                	cmp    edi,esi
c00268b6:	72 06                	jb     c00268be <__moddi3+0xd2>
c00268b8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00268bc:	77 0c                	ja     c00268ca <__moddi3+0xde>
c00268be:	89 e9                	mov    ecx,ebp
c00268c0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00268c4:	19 fe                	sbb    esi,edi
c00268c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00268ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00268ce:	89 f2                	mov    edx,esi
c00268d0:	e9 6b ff ff ff       	jmp    c0026840 <__moddi3+0x54>
c00268d5:	8d 76 00             	lea    esi,[esi+0x0]
c00268d8:	b8 20 00 00 00       	mov    eax,0x20
c00268dd:	89 c2                	mov    edx,eax
c00268df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00268e3:	29 da                	sub    edx,ebx
c00268e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00268e9:	88 d9                	mov    cl,bl
c00268eb:	d3 e7                	shl    edi,cl
c00268ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268f1:	88 d1                	mov    cl,dl
c00268f3:	d3 e8                	shr    eax,cl
c00268f5:	09 c7                	or     edi,eax
c00268f7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00268fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268ff:	89 d8                	mov    eax,ebx
c0026901:	88 d9                	mov    cl,bl
c0026903:	d3 e7                	shl    edi,cl
c0026905:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026909:	89 f3                	mov    ebx,esi
c002690b:	88 d1                	mov    cl,dl
c002690d:	d3 eb                	shr    ebx,cl
c002690f:	89 c7                	mov    edi,eax
c0026911:	88 c1                	mov    cl,al
c0026913:	d3 e6                	shl    esi,cl
c0026915:	89 e8                	mov    eax,ebp
c0026917:	88 d1                	mov    cl,dl
c0026919:	d3 e8                	shr    eax,cl
c002691b:	09 f0                	or     eax,esi
c002691d:	89 f9                	mov    ecx,edi
c002691f:	d3 e5                	shl    ebp,cl
c0026921:	89 da                	mov    edx,ebx
c0026923:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026927:	89 d3                	mov    ebx,edx
c0026929:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002692d:	89 c6                	mov    esi,eax
c002692f:	89 d1                	mov    ecx,edx
c0026931:	39 d3                	cmp    ebx,edx
c0026933:	72 27                	jb     c002695c <__moddi3+0x170>
c0026935:	74 21                	je     c0026958 <__moddi3+0x16c>
c0026937:	29 f5                	sub    ebp,esi
c0026939:	19 cb                	sbb    ebx,ecx
c002693b:	89 de                	mov    esi,ebx
c002693d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026941:	d3 e6                	shl    esi,cl
c0026943:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026947:	89 f9                	mov    ecx,edi
c0026949:	d3 ed                	shr    ebp,cl
c002694b:	09 ee                	or     esi,ebp
c002694d:	89 f0                	mov    eax,esi
c002694f:	d3 eb                	shr    ebx,cl
c0026951:	89 da                	mov    edx,ebx
c0026953:	e9 e8 fe ff ff       	jmp    c0026840 <__moddi3+0x54>
c0026958:	39 c5                	cmp    ebp,eax
c002695a:	73 db                	jae    c0026937 <__moddi3+0x14b>
c002695c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026960:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026964:	89 d1                	mov    ecx,edx
c0026966:	89 c6                	mov    esi,eax
c0026968:	eb cd                	jmp    c0026937 <__moddi3+0x14b>
c002696a:	66 90                	xchg   ax,ax

c002696c <__udivdi3>:
c002696c:	55                   	push   ebp
c002696d:	57                   	push   edi
c002696e:	56                   	push   esi
c002696f:	53                   	push   ebx
c0026970:	83 ec 1c             	sub    esp,0x1c
c0026973:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026977:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002697b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002697f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026983:	85 d2                	test   edx,edx
c0026985:	75 41                	jne    c00269c8 <__udivdi3+0x5c>
c0026987:	39 f7                	cmp    edi,esi
c0026989:	76 15                	jbe    c00269a0 <__udivdi3+0x34>
c002698b:	89 e8                	mov    eax,ebp
c002698d:	89 f2                	mov    edx,esi
c002698f:	f7 f7                	div    edi
c0026991:	31 db                	xor    ebx,ebx
c0026993:	89 da                	mov    edx,ebx
c0026995:	83 c4 1c             	add    esp,0x1c
c0026998:	5b                   	pop    ebx
c0026999:	5e                   	pop    esi
c002699a:	5f                   	pop    edi
c002699b:	5d                   	pop    ebp
c002699c:	c3                   	ret    
c002699d:	8d 76 00             	lea    esi,[esi+0x0]
c00269a0:	89 f9                	mov    ecx,edi
c00269a2:	85 ff                	test   edi,edi
c00269a4:	75 0b                	jne    c00269b1 <__udivdi3+0x45>
c00269a6:	b8 01 00 00 00       	mov    eax,0x1
c00269ab:	31 d2                	xor    edx,edx
c00269ad:	f7 f7                	div    edi
c00269af:	89 c1                	mov    ecx,eax
c00269b1:	31 d2                	xor    edx,edx
c00269b3:	89 f0                	mov    eax,esi
c00269b5:	f7 f1                	div    ecx
c00269b7:	89 c3                	mov    ebx,eax
c00269b9:	89 e8                	mov    eax,ebp
c00269bb:	f7 f1                	div    ecx
c00269bd:	89 da                	mov    edx,ebx
c00269bf:	83 c4 1c             	add    esp,0x1c
c00269c2:	5b                   	pop    ebx
c00269c3:	5e                   	pop    esi
c00269c4:	5f                   	pop    edi
c00269c5:	5d                   	pop    ebp
c00269c6:	c3                   	ret    
c00269c7:	90                   	nop
c00269c8:	39 f2                	cmp    edx,esi
c00269ca:	77 1c                	ja     c00269e8 <__udivdi3+0x7c>
c00269cc:	0f bd da             	bsr    ebx,edx
c00269cf:	83 f3 1f             	xor    ebx,0x1f
c00269d2:	75 24                	jne    c00269f8 <__udivdi3+0x8c>
c00269d4:	39 f2                	cmp    edx,esi
c00269d6:	72 08                	jb     c00269e0 <__udivdi3+0x74>
c00269d8:	39 ef                	cmp    edi,ebp
c00269da:	0f 87 84 00 00 00    	ja     c0026a64 <__udivdi3+0xf8>
c00269e0:	b8 01 00 00 00       	mov    eax,0x1
c00269e5:	eb ac                	jmp    c0026993 <__udivdi3+0x27>
c00269e7:	90                   	nop
c00269e8:	31 db                	xor    ebx,ebx
c00269ea:	31 c0                	xor    eax,eax
c00269ec:	89 da                	mov    edx,ebx
c00269ee:	83 c4 1c             	add    esp,0x1c
c00269f1:	5b                   	pop    ebx
c00269f2:	5e                   	pop    esi
c00269f3:	5f                   	pop    edi
c00269f4:	5d                   	pop    ebp
c00269f5:	c3                   	ret    
c00269f6:	66 90                	xchg   ax,ax
c00269f8:	b8 20 00 00 00       	mov    eax,0x20
c00269fd:	29 d8                	sub    eax,ebx
c00269ff:	88 d9                	mov    cl,bl
c0026a01:	d3 e2                	shl    edx,cl
c0026a03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a07:	89 fa                	mov    edx,edi
c0026a09:	88 c1                	mov    cl,al
c0026a0b:	d3 ea                	shr    edx,cl
c0026a0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a11:	09 d1                	or     ecx,edx
c0026a13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a17:	88 d9                	mov    cl,bl
c0026a19:	d3 e7                	shl    edi,cl
c0026a1b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a1f:	89 f7                	mov    edi,esi
c0026a21:	88 c1                	mov    cl,al
c0026a23:	d3 ef                	shr    edi,cl
c0026a25:	88 d9                	mov    cl,bl
c0026a27:	d3 e6                	shl    esi,cl
c0026a29:	89 ea                	mov    edx,ebp
c0026a2b:	88 c1                	mov    cl,al
c0026a2d:	d3 ea                	shr    edx,cl
c0026a2f:	09 d6                	or     esi,edx
c0026a31:	89 f0                	mov    eax,esi
c0026a33:	89 fa                	mov    edx,edi
c0026a35:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a39:	89 d7                	mov    edi,edx
c0026a3b:	89 c6                	mov    esi,eax
c0026a3d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a41:	39 d7                	cmp    edi,edx
c0026a43:	72 13                	jb     c0026a58 <__udivdi3+0xec>
c0026a45:	74 09                	je     c0026a50 <__udivdi3+0xe4>
c0026a47:	89 f0                	mov    eax,esi
c0026a49:	31 db                	xor    ebx,ebx
c0026a4b:	e9 43 ff ff ff       	jmp    c0026993 <__udivdi3+0x27>
c0026a50:	88 d9                	mov    cl,bl
c0026a52:	d3 e5                	shl    ebp,cl
c0026a54:	39 c5                	cmp    ebp,eax
c0026a56:	73 ef                	jae    c0026a47 <__udivdi3+0xdb>
c0026a58:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a5b:	31 db                	xor    ebx,ebx
c0026a5d:	e9 31 ff ff ff       	jmp    c0026993 <__udivdi3+0x27>
c0026a62:	66 90                	xchg   ax,ax
c0026a64:	31 c0                	xor    eax,eax
c0026a66:	e9 28 ff ff ff       	jmp    c0026993 <__udivdi3+0x27>
c0026a6b:	90                   	nop

c0026a6c <__umoddi3>:
c0026a6c:	55                   	push   ebp
c0026a6d:	57                   	push   edi
c0026a6e:	56                   	push   esi
c0026a6f:	53                   	push   ebx
c0026a70:	83 ec 1c             	sub    esp,0x1c
c0026a73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026a77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026a83:	89 da                	mov    edx,ebx
c0026a85:	85 c0                	test   eax,eax
c0026a87:	75 37                	jne    c0026ac0 <__umoddi3+0x54>
c0026a89:	39 df                	cmp    edi,ebx
c0026a8b:	76 13                	jbe    c0026aa0 <__umoddi3+0x34>
c0026a8d:	89 f0                	mov    eax,esi
c0026a8f:	f7 f7                	div    edi
c0026a91:	89 d0                	mov    eax,edx
c0026a93:	31 d2                	xor    edx,edx
c0026a95:	83 c4 1c             	add    esp,0x1c
c0026a98:	5b                   	pop    ebx
c0026a99:	5e                   	pop    esi
c0026a9a:	5f                   	pop    edi
c0026a9b:	5d                   	pop    ebp
c0026a9c:	c3                   	ret    
c0026a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0026aa0:	89 fd                	mov    ebp,edi
c0026aa2:	85 ff                	test   edi,edi
c0026aa4:	75 0b                	jne    c0026ab1 <__umoddi3+0x45>
c0026aa6:	b8 01 00 00 00       	mov    eax,0x1
c0026aab:	31 d2                	xor    edx,edx
c0026aad:	f7 f7                	div    edi
c0026aaf:	89 c5                	mov    ebp,eax
c0026ab1:	89 d8                	mov    eax,ebx
c0026ab3:	31 d2                	xor    edx,edx
c0026ab5:	f7 f5                	div    ebp
c0026ab7:	89 f0                	mov    eax,esi
c0026ab9:	f7 f5                	div    ebp
c0026abb:	89 d0                	mov    eax,edx
c0026abd:	eb d4                	jmp    c0026a93 <__umoddi3+0x27>
c0026abf:	90                   	nop
c0026ac0:	89 f1                	mov    ecx,esi
c0026ac2:	39 d8                	cmp    eax,ebx
c0026ac4:	76 0a                	jbe    c0026ad0 <__umoddi3+0x64>
c0026ac6:	89 f0                	mov    eax,esi
c0026ac8:	83 c4 1c             	add    esp,0x1c
c0026acb:	5b                   	pop    ebx
c0026acc:	5e                   	pop    esi
c0026acd:	5f                   	pop    edi
c0026ace:	5d                   	pop    ebp
c0026acf:	c3                   	ret    
c0026ad0:	0f bd e8             	bsr    ebp,eax
c0026ad3:	83 f5 1f             	xor    ebp,0x1f
c0026ad6:	75 1c                	jne    c0026af4 <__umoddi3+0x88>
c0026ad8:	39 d8                	cmp    eax,ebx
c0026ada:	72 04                	jb     c0026ae0 <__umoddi3+0x74>
c0026adc:	39 f7                	cmp    edi,esi
c0026ade:	77 08                	ja     c0026ae8 <__umoddi3+0x7c>
c0026ae0:	89 da                	mov    edx,ebx
c0026ae2:	29 fe                	sub    esi,edi
c0026ae4:	19 c2                	sbb    edx,eax
c0026ae6:	89 f1                	mov    ecx,esi
c0026ae8:	89 c8                	mov    eax,ecx
c0026aea:	83 c4 1c             	add    esp,0x1c
c0026aed:	5b                   	pop    ebx
c0026aee:	5e                   	pop    esi
c0026aef:	5f                   	pop    edi
c0026af0:	5d                   	pop    ebp
c0026af1:	c3                   	ret    
c0026af2:	66 90                	xchg   ax,ax
c0026af4:	ba 20 00 00 00       	mov    edx,0x20
c0026af9:	29 ea                	sub    edx,ebp
c0026afb:	89 e9                	mov    ecx,ebp
c0026afd:	d3 e0                	shl    eax,cl
c0026aff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b03:	89 f8                	mov    eax,edi
c0026b05:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b09:	88 d1                	mov    cl,dl
c0026b0b:	d3 e8                	shr    eax,cl
c0026b0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b11:	09 c1                	or     ecx,eax
c0026b13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b17:	89 e9                	mov    ecx,ebp
c0026b19:	d3 e7                	shl    edi,cl
c0026b1b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b1f:	89 d8                	mov    eax,ebx
c0026b21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026b25:	88 d1                	mov    cl,dl
c0026b27:	d3 e8                	shr    eax,cl
c0026b29:	89 c7                	mov    edi,eax
c0026b2b:	89 e9                	mov    ecx,ebp
c0026b2d:	d3 e3                	shl    ebx,cl
c0026b2f:	89 f0                	mov    eax,esi
c0026b31:	88 d1                	mov    cl,dl
c0026b33:	d3 e8                	shr    eax,cl
c0026b35:	09 d8                	or     eax,ebx
c0026b37:	89 e9                	mov    ecx,ebp
c0026b39:	d3 e6                	shl    esi,cl
c0026b3b:	89 f3                	mov    ebx,esi
c0026b3d:	89 fa                	mov    edx,edi
c0026b3f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b43:	89 d1                	mov    ecx,edx
c0026b45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b49:	89 c6                	mov    esi,eax
c0026b4b:	89 d7                	mov    edi,edx
c0026b4d:	39 d1                	cmp    ecx,edx
c0026b4f:	72 27                	jb     c0026b78 <__umoddi3+0x10c>
c0026b51:	74 21                	je     c0026b74 <__umoddi3+0x108>
c0026b53:	89 ca                	mov    edx,ecx
c0026b55:	29 f3                	sub    ebx,esi
c0026b57:	19 fa                	sbb    edx,edi
c0026b59:	89 d0                	mov    eax,edx
c0026b5b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b5f:	d3 e0                	shl    eax,cl
c0026b61:	89 e9                	mov    ecx,ebp
c0026b63:	d3 eb                	shr    ebx,cl
c0026b65:	09 d8                	or     eax,ebx
c0026b67:	d3 ea                	shr    edx,cl
c0026b69:	83 c4 1c             	add    esp,0x1c
c0026b6c:	5b                   	pop    ebx
c0026b6d:	5e                   	pop    esi
c0026b6e:	5f                   	pop    edi
c0026b6f:	5d                   	pop    ebp
c0026b70:	c3                   	ret    
c0026b71:	8d 76 00             	lea    esi,[esi+0x0]
c0026b74:	39 c3                	cmp    ebx,eax
c0026b76:	73 db                	jae    c0026b53 <__umoddi3+0xe7>
c0026b78:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b7c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026b80:	89 d7                	mov    edi,edx
c0026b82:	89 c6                	mov    esi,eax
c0026b84:	eb cd                	jmp    c0026b53 <__umoddi3+0xe7>

c0026b86 <__addsf3>:
c0026b86:	55                   	push   ebp
c0026b87:	89 e5                	mov    ebp,esp
c0026b89:	57                   	push   edi
c0026b8a:	56                   	push   esi
c0026b8b:	53                   	push   ebx
c0026b8c:	83 ec 08             	sub    esp,0x8
c0026b8f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026b92:	89 fa                	mov    edx,edi
c0026b94:	89 f8                	mov    eax,edi
c0026b96:	c1 f8 17             	sar    eax,0x17
c0026b99:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026b9c:	c1 e2 08             	shl    edx,0x8
c0026b9f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ba5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ba8:	89 de                	mov    esi,ebx
c0026baa:	c1 fe 17             	sar    esi,0x17
c0026bad:	c1 e3 08             	shl    ebx,0x8
c0026bb0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026bb6:	31 f0                	xor    eax,esi
c0026bb8:	0f 88 3b 01 00 00    	js     c0026cf9 <__addsf3+0x173>
c0026bbe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026bc1:	29 f1                	sub    ecx,esi
c0026bc3:	85 c9                	test   ecx,ecx
c0026bc5:	7e 54                	jle    c0026c1b <__addsf3+0x95>
c0026bc7:	89 f0                	mov    eax,esi
c0026bc9:	84 c0                	test   al,al
c0026bcb:	75 10                	jne    c0026bdd <__addsf3+0x57>
c0026bcd:	85 db                	test   ebx,ebx
c0026bcf:	0f 84 aa 02 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026bd5:	49                   	dec    ecx
c0026bd6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bd9:	74 38                	je     c0026c13 <__addsf3+0x8d>
c0026bdb:	eb 13                	jmp    c0026bf0 <__addsf3+0x6a>
c0026bdd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026be0:	f7 d0                	not    eax
c0026be2:	84 c0                	test   al,al
c0026be4:	0f 84 95 02 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026bea:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026bf0:	83 f9 1f             	cmp    ecx,0x1f
c0026bf3:	0f 8f 86 02 00 00    	jg     c0026e7f <__addsf3+0x2f9>
c0026bf9:	89 de                	mov    esi,ebx
c0026bfb:	d3 ee                	shr    esi,cl
c0026bfd:	b8 20 00 00 00       	mov    eax,0x20
c0026c02:	29 c8                	sub    eax,ecx
c0026c04:	89 c1                	mov    ecx,eax
c0026c06:	d3 e3                	shl    ebx,cl
c0026c08:	31 c0                	xor    eax,eax
c0026c0a:	85 db                	test   ebx,ebx
c0026c0c:	0f 95 c0             	setne  al
c0026c0f:	09 f0                	or     eax,esi
c0026c11:	01 d0                	add    eax,edx
c0026c13:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c16:	e9 b6 00 00 00       	jmp    c0026cd1 <__addsf3+0x14b>
c0026c1b:	74 5c                	je     c0026c79 <__addsf3+0xf3>
c0026c1d:	89 f1                	mov    ecx,esi
c0026c1f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026c22:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c25:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c29:	75 14                	jne    c0026c3f <__addsf3+0xb9>
c0026c2b:	85 d2                	test   edx,edx
c0026c2d:	0f 84 4c 02 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026c33:	49                   	dec    ecx
c0026c34:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c37:	0f 84 94 00 00 00    	je     c0026cd1 <__addsf3+0x14b>
c0026c3d:	eb 12                	jmp    c0026c51 <__addsf3+0xcb>
c0026c3f:	89 f0                	mov    eax,esi
c0026c41:	f7 d0                	not    eax
c0026c43:	84 c0                	test   al,al
c0026c45:	0f 84 34 02 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026c4b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c51:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c54:	83 f9 1f             	cmp    ecx,0x1f
c0026c57:	0f 8f 22 02 00 00    	jg     c0026e7f <__addsf3+0x2f9>
c0026c5d:	89 d7                	mov    edi,edx
c0026c5f:	d3 ef                	shr    edi,cl
c0026c61:	b8 20 00 00 00       	mov    eax,0x20
c0026c66:	29 c8                	sub    eax,ecx
c0026c68:	89 c1                	mov    ecx,eax
c0026c6a:	d3 e2                	shl    edx,cl
c0026c6c:	31 c0                	xor    eax,eax
c0026c6e:	85 d2                	test   edx,edx
c0026c70:	0f 95 c0             	setne  al
c0026c73:	09 f8                	or     eax,edi
c0026c75:	01 d8                	add    eax,ebx
c0026c77:	eb 58                	jmp    c0026cd1 <__addsf3+0x14b>
c0026c79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c7c:	8d 70 01             	lea    esi,[eax+0x1]
c0026c7f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026c85:	75 32                	jne    c0026cb9 <__addsf3+0x133>
c0026c87:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c8b:	75 1f                	jne    c0026cac <__addsf3+0x126>
c0026c8d:	85 d2                	test   edx,edx
c0026c8f:	0f 84 e0 01 00 00    	je     c0026e75 <__addsf3+0x2ef>
c0026c95:	85 db                	test   ebx,ebx
c0026c97:	0f 84 e2 01 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026c9d:	89 d0                	mov    eax,edx
c0026c9f:	01 d8                	add    eax,ebx
c0026ca1:	0f 89 a9 01 00 00    	jns    c0026e50 <__addsf3+0x2ca>
c0026ca7:	e9 9d 01 00 00       	jmp    c0026e49 <__addsf3+0x2c3>
c0026cac:	85 d2                	test   edx,edx
c0026cae:	0f 85 cb 01 00 00    	jne    c0026e7f <__addsf3+0x2f9>
c0026cb4:	e9 bc 01 00 00       	jmp    c0026e75 <__addsf3+0x2ef>
c0026cb9:	31 c0                	xor    eax,eax
c0026cbb:	89 f1                	mov    ecx,esi
c0026cbd:	f7 d1                	not    ecx
c0026cbf:	84 c9                	test   cl,cl
c0026cc1:	0f 84 90 01 00 00    	je     c0026e57 <__addsf3+0x2d1>
c0026cc7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cca:	d1 e8                	shr    eax,1
c0026ccc:	e9 86 01 00 00       	jmp    c0026e57 <__addsf3+0x2d1>
c0026cd1:	85 c0                	test   eax,eax
c0026cd3:	0f 89 7e 01 00 00    	jns    c0026e57 <__addsf3+0x2d1>
c0026cd9:	46                   	inc    esi
c0026cda:	89 f2                	mov    edx,esi
c0026cdc:	f7 d2                	not    edx
c0026cde:	84 d2                	test   dl,dl
c0026ce0:	0f 84 6f 01 00 00    	je     c0026e55 <__addsf3+0x2cf>
c0026ce6:	89 c2                	mov    edx,eax
c0026ce8:	83 e2 01             	and    edx,0x1
c0026ceb:	d1 e8                	shr    eax,1
c0026ced:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026cf2:	09 d0                	or     eax,edx
c0026cf4:	e9 5e 01 00 00       	jmp    c0026e57 <__addsf3+0x2d1>
c0026cf9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026cfd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d00:	89 f0                	mov    eax,esi
c0026d02:	0f b6 c0             	movzx  eax,al
c0026d05:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d08:	29 c1                	sub    ecx,eax
c0026d0a:	85 c9                	test   ecx,ecx
c0026d0c:	7e 55                	jle    c0026d63 <__addsf3+0x1dd>
c0026d0e:	85 c0                	test   eax,eax
c0026d10:	75 11                	jne    c0026d23 <__addsf3+0x19d>
c0026d12:	85 db                	test   ebx,ebx
c0026d14:	0f 84 65 01 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026d1a:	49                   	dec    ecx
c0026d1b:	75 19                	jne    c0026d36 <__addsf3+0x1b0>
c0026d1d:	89 d0                	mov    eax,edx
c0026d1f:	29 d8                	sub    eax,ebx
c0026d21:	eb 38                	jmp    c0026d5b <__addsf3+0x1d5>
c0026d23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d26:	f7 d0                	not    eax
c0026d28:	84 c0                	test   al,al
c0026d2a:	0f 84 4f 01 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026d30:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d36:	83 f9 1f             	cmp    ecx,0x1f
c0026d39:	0f 8f 40 01 00 00    	jg     c0026e7f <__addsf3+0x2f9>
c0026d3f:	89 de                	mov    esi,ebx
c0026d41:	d3 ee                	shr    esi,cl
c0026d43:	b8 20 00 00 00       	mov    eax,0x20
c0026d48:	29 c8                	sub    eax,ecx
c0026d4a:	89 c1                	mov    ecx,eax
c0026d4c:	d3 e3                	shl    ebx,cl
c0026d4e:	31 c0                	xor    eax,eax
c0026d50:	85 db                	test   ebx,ebx
c0026d52:	0f 95 c0             	setne  al
c0026d55:	09 f0                	or     eax,esi
c0026d57:	29 c2                	sub    edx,eax
c0026d59:	89 d0                	mov    eax,edx
c0026d5b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d5e:	e9 af 00 00 00       	jmp    c0026e12 <__addsf3+0x28c>
c0026d63:	74 5c                	je     c0026dc1 <__addsf3+0x23b>
c0026d65:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026d68:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d6b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d6f:	75 14                	jne    c0026d85 <__addsf3+0x1ff>
c0026d71:	85 d2                	test   edx,edx
c0026d73:	0f 84 06 01 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026d79:	48                   	dec    eax
c0026d7a:	75 1b                	jne    c0026d97 <__addsf3+0x211>
c0026d7c:	89 d8                	mov    eax,ebx
c0026d7e:	29 d0                	sub    eax,edx
c0026d80:	e9 8d 00 00 00       	jmp    c0026e12 <__addsf3+0x28c>
c0026d85:	89 f1                	mov    ecx,esi
c0026d87:	f7 d1                	not    ecx
c0026d89:	84 c9                	test   cl,cl
c0026d8b:	0f 84 ee 00 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026d91:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d97:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d9a:	83 f8 1f             	cmp    eax,0x1f
c0026d9d:	0f 8f dc 00 00 00    	jg     c0026e7f <__addsf3+0x2f9>
c0026da3:	89 d7                	mov    edi,edx
c0026da5:	88 c1                	mov    cl,al
c0026da7:	d3 ef                	shr    edi,cl
c0026da9:	b9 20 00 00 00       	mov    ecx,0x20
c0026dae:	29 c1                	sub    ecx,eax
c0026db0:	d3 e2                	shl    edx,cl
c0026db2:	31 c0                	xor    eax,eax
c0026db4:	85 d2                	test   edx,edx
c0026db6:	0f 95 c0             	setne  al
c0026db9:	09 f8                	or     eax,edi
c0026dbb:	29 c3                	sub    ebx,eax
c0026dbd:	89 d8                	mov    eax,ebx
c0026dbf:	eb 51                	jmp    c0026e12 <__addsf3+0x28c>
c0026dc1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dc4:	40                   	inc    eax
c0026dc5:	a8 fe                	test   al,0xfe
c0026dc7:	75 3d                	jne    c0026e06 <__addsf3+0x280>
c0026dc9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026dcd:	0f 85 a7 00 00 00    	jne    c0026e7a <__addsf3+0x2f4>
c0026dd3:	85 d2                	test   edx,edx
c0026dd5:	75 12                	jne    c0026de9 <__addsf3+0x263>
c0026dd7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026dda:	85 db                	test   ebx,ebx
c0026ddc:	0f 85 9d 00 00 00    	jne    c0026e7f <__addsf3+0x2f9>
c0026de2:	31 ff                	xor    edi,edi
c0026de4:	e9 96 00 00 00       	jmp    c0026e7f <__addsf3+0x2f9>
c0026de9:	85 db                	test   ebx,ebx
c0026deb:	0f 84 8e 00 00 00    	je     c0026e7f <__addsf3+0x2f9>
c0026df1:	89 d0                	mov    eax,edx
c0026df3:	29 d8                	sub    eax,ebx
c0026df5:	79 06                	jns    c0026dfd <__addsf3+0x277>
c0026df7:	89 d8                	mov    eax,ebx
c0026df9:	29 d0                	sub    eax,edx
c0026dfb:	eb 5a                	jmp    c0026e57 <__addsf3+0x2d1>
c0026dfd:	bf 00 00 00 00       	mov    edi,0x0
c0026e02:	74 7b                	je     c0026e7f <__addsf3+0x2f9>
c0026e04:	eb 4a                	jmp    c0026e50 <__addsf3+0x2ca>
c0026e06:	89 d0                	mov    eax,edx
c0026e08:	29 d8                	sub    eax,ebx
c0026e0a:	79 12                	jns    c0026e1e <__addsf3+0x298>
c0026e0c:	89 d8                	mov    eax,ebx
c0026e0e:	29 d0                	sub    eax,edx
c0026e10:	eb 09                	jmp    c0026e1b <__addsf3+0x295>
c0026e12:	85 c0                	test   eax,eax
c0026e14:	79 41                	jns    c0026e57 <__addsf3+0x2d1>
c0026e16:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e1b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e1e:	31 f6                	xor    esi,esi
c0026e20:	85 c0                	test   eax,eax
c0026e22:	74 33                	je     c0026e57 <__addsf3+0x2d1>
c0026e24:	0f bd c8             	bsr    ecx,eax
c0026e27:	83 f1 1f             	xor    ecx,0x1f
c0026e2a:	d3 e0                	shl    eax,cl
c0026e2c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e30:	39 ca                	cmp    edx,ecx
c0026e32:	7f 10                	jg     c0026e44 <__addsf3+0x2be>
c0026e34:	29 d1                	sub    ecx,edx
c0026e36:	41                   	inc    ecx
c0026e37:	d3 e8                	shr    eax,cl
c0026e39:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e3c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e42:	eb 13                	jmp    c0026e57 <__addsf3+0x2d1>
c0026e44:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e47:	29 ce                	sub    esi,ecx
c0026e49:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e4e:	eb 07                	jmp    c0026e57 <__addsf3+0x2d1>
c0026e50:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e53:	eb 02                	jmp    c0026e57 <__addsf3+0x2d1>
c0026e55:	31 c0                	xor    eax,eax
c0026e57:	89 c2                	mov    edx,eax
c0026e59:	c1 ea 08             	shr    edx,0x8
c0026e5c:	a8 7f                	test   al,0x7f
c0026e5e:	0f 95 c1             	setne  cl
c0026e61:	09 d1                	or     ecx,edx
c0026e63:	83 e1 01             	and    ecx,0x1
c0026e66:	c1 e8 07             	shr    eax,0x7
c0026e69:	21 c8                	and    eax,ecx
c0026e6b:	c1 e6 17             	shl    esi,0x17
c0026e6e:	09 d6                	or     esi,edx
c0026e70:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026e73:	eb 0a                	jmp    c0026e7f <__addsf3+0x2f9>
c0026e75:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e78:	eb 05                	jmp    c0026e7f <__addsf3+0x2f9>
c0026e7a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026e7f:	89 f8                	mov    eax,edi
c0026e81:	5a                   	pop    edx
c0026e82:	59                   	pop    ecx
c0026e83:	5b                   	pop    ebx
c0026e84:	5e                   	pop    esi
c0026e85:	5f                   	pop    edi
c0026e86:	5d                   	pop    ebp
c0026e87:	c3                   	ret    

c0026e88 <__subsf3>:
c0026e88:	55                   	push   ebp
c0026e89:	89 e5                	mov    ebp,esp
c0026e8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e8e:	05 00 00 00 80       	add    eax,0x80000000
c0026e93:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026e96:	5d                   	pop    ebp
c0026e97:	e9 ea fc ff ff       	jmp    c0026b86 <__addsf3>

c0026e9c <__negsf2>:
c0026e9c:	55                   	push   ebp
c0026e9d:	89 e5                	mov    ebp,esp
c0026e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ea2:	05 00 00 00 80       	add    eax,0x80000000
c0026ea7:	5d                   	pop    ebp
c0026ea8:	c3                   	ret    

c0026ea9 <__mulsf3>:
c0026ea9:	55                   	push   ebp
c0026eaa:	89 e5                	mov    ebp,esp
c0026eac:	57                   	push   edi
c0026ead:	56                   	push   esi
c0026eae:	53                   	push   ebx
c0026eaf:	83 ec 1c             	sub    esp,0x1c
c0026eb2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026eb5:	89 f0                	mov    eax,esi
c0026eb7:	89 f1                	mov    ecx,esi
c0026eb9:	c1 f9 17             	sar    ecx,0x17
c0026ebc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026ebf:	c1 e0 08             	shl    eax,0x8
c0026ec2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ec7:	89 c1                	mov    ecx,eax
c0026ec9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ecc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ecf:	89 c7                	mov    edi,eax
c0026ed1:	c1 ff 17             	sar    edi,0x17
c0026ed4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ed8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026edb:	89 f8                	mov    eax,edi
c0026edd:	0f b6 c0             	movzx  eax,al
c0026ee0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026ee3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026ee7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026eea:	42                   	inc    edx
c0026eeb:	80 e2 fe             	and    dl,0xfe
c0026eee:	75 7b                	jne    c0026f6b <__mulsf3+0xc2>
c0026ef0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ef4:	74 54                	je     c0026f4a <__mulsf3+0xa1>
c0026ef6:	85 c9                	test   ecx,ecx
c0026ef8:	0f 85 64 01 00 00    	jne    c0027062 <__mulsf3+0x1b9>
c0026efe:	8d 57 01             	lea    edx,[edi+0x1]
c0026f01:	80 e2 fe             	and    dl,0xfe
c0026f04:	75 1f                	jne    c0026f25 <__mulsf3+0x7c>
c0026f06:	85 c0                	test   eax,eax
c0026f08:	b8 00 00 00 00       	mov    eax,0x0
c0026f0d:	74 29                	je     c0026f38 <__mulsf3+0x8f>
c0026f0f:	53                   	push   ebx
c0026f10:	53                   	push   ebx
c0026f11:	50                   	push   eax
c0026f12:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f15:	e8 96 05 00 00       	call   c00274b0 <__nesf2>
c0026f1a:	83 c4 10             	add    esp,0x10
c0026f1d:	85 c0                	test   eax,eax
c0026f1f:	0f 85 3a 01 00 00    	jne    c002705f <__mulsf3+0x1b6>
c0026f25:	85 ff                	test   edi,edi
c0026f27:	0f 89 35 01 00 00    	jns    c0027062 <__mulsf3+0x1b9>
c0026f2d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f33:	e9 2a 01 00 00       	jmp    c0027062 <__mulsf3+0x1b9>
c0026f38:	51                   	push   ecx
c0026f39:	51                   	push   ecx
c0026f3a:	50                   	push   eax
c0026f3b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f3e:	e8 6d 05 00 00       	call   c00274b0 <__nesf2>
c0026f43:	83 c4 10             	add    esp,0x10
c0026f46:	85 c0                	test   eax,eax
c0026f48:	eb 15                	jmp    c0026f5f <__mulsf3+0xb6>
c0026f4a:	85 c9                	test   ecx,ecx
c0026f4c:	74 0b                	je     c0026f59 <__mulsf3+0xb0>
c0026f4e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f51:	01 c9                	add    ecx,ecx
c0026f53:	78 16                	js     c0026f6b <__mulsf3+0xc2>
c0026f55:	89 d3                	mov    ebx,edx
c0026f57:	eb f5                	jmp    c0026f4e <__mulsf3+0xa5>
c0026f59:	89 f8                	mov    eax,edi
c0026f5b:	f7 d0                	not    eax
c0026f5d:	84 c0                	test   al,al
c0026f5f:	75 c4                	jne    c0026f25 <__mulsf3+0x7c>
c0026f61:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026f66:	e9 f7 00 00 00       	jmp    c0027062 <__mulsf3+0x1b9>
c0026f6b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026f6e:	c1 e6 08             	shl    esi,0x8
c0026f71:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026f77:	8d 57 01             	lea    edx,[edi+0x1]
c0026f7a:	80 e2 fe             	and    dl,0xfe
c0026f7d:	75 63                	jne    c0026fe2 <__mulsf3+0x139>
c0026f7f:	85 c0                	test   eax,eax
c0026f81:	74 2f                	je     c0026fb2 <__mulsf3+0x109>
c0026f83:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f87:	0f 89 d2 00 00 00    	jns    c002705f <__mulsf3+0x1b6>
c0026f8d:	52                   	push   edx
c0026f8e:	52                   	push   edx
c0026f8f:	6a 00                	push   0x0
c0026f91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f94:	e8 dc 04 00 00       	call   c0027475 <__eqsf2>
c0026f99:	83 c4 10             	add    esp,0x10
c0026f9c:	85 c0                	test   eax,eax
c0026f9e:	0f 85 bb 00 00 00    	jne    c002705f <__mulsf3+0x1b6>
c0026fa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fa7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026fad:	e9 b0 00 00 00       	jmp    c0027062 <__mulsf3+0x1b9>
c0026fb2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026fb5:	50                   	push   eax
c0026fb6:	50                   	push   eax
c0026fb7:	6a 00                	push   0x0
c0026fb9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fbc:	e8 b4 04 00 00       	call   c0027475 <__eqsf2>
c0026fc1:	83 c4 10             	add    esp,0x10
c0026fc4:	85 c0                	test   eax,eax
c0026fc6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026fc9:	75 0c                	jne    c0026fd7 <__mulsf3+0x12e>
c0026fcb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026fcf:	0f 89 8a 00 00 00    	jns    c002705f <__mulsf3+0x1b6>
c0026fd5:	eb cd                	jmp    c0026fa4 <__mulsf3+0xfb>
c0026fd7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026fda:	01 f6                	add    esi,esi
c0026fdc:	78 04                	js     c0026fe2 <__mulsf3+0x139>
c0026fde:	89 c3                	mov    ebx,eax
c0026fe0:	eb f5                	jmp    c0026fd7 <__mulsf3+0x12e>
c0026fe2:	89 c8                	mov    eax,ecx
c0026fe4:	0d 00 00 00 80       	or     eax,0x80000000
c0026fe9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026fef:	f7 e6                	mul    esi
c0026ff1:	85 c0                	test   eax,eax
c0026ff3:	0f 95 c0             	setne  al
c0026ff6:	0f b6 c0             	movzx  eax,al
c0026ff9:	09 c2                	or     edx,eax
c0026ffb:	78 03                	js     c0027000 <__mulsf3+0x157>
c0026ffd:	01 d2                	add    edx,edx
c0026fff:	4b                   	dec    ebx
c0027000:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027006:	7f 22                	jg     c002702a <__mulsf3+0x181>
c0027008:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002700e:	85 db                	test   ebx,ebx
c0027010:	7f 23                	jg     c0027035 <__mulsf3+0x18c>
c0027012:	83 fb e9             	cmp    ebx,0xffffffe9
c0027015:	7c 1a                	jl     c0027031 <__mulsf3+0x188>
c0027017:	81 ca 00 00 00 80    	or     edx,0x80000000
c002701d:	b9 01 00 00 00       	mov    ecx,0x1
c0027022:	29 d9                	sub    ecx,ebx
c0027024:	d3 ea                	shr    edx,cl
c0027026:	31 db                	xor    ebx,ebx
c0027028:	eb 0b                	jmp    c0027035 <__mulsf3+0x18c>
c002702a:	bb ff 00 00 00       	mov    ebx,0xff
c002702f:	eb 02                	jmp    c0027033 <__mulsf3+0x18a>
c0027031:	31 db                	xor    ebx,ebx
c0027033:	31 d2                	xor    edx,edx
c0027035:	89 d0                	mov    eax,edx
c0027037:	c1 e8 08             	shr    eax,0x8
c002703a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002703d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027043:	09 fb                	or     ebx,edi
c0027045:	c1 e3 17             	shl    ebx,0x17
c0027048:	09 c3                	or     ebx,eax
c002704a:	f6 c2 7f             	test   dl,0x7f
c002704d:	0f 95 c1             	setne  cl
c0027050:	09 c8                	or     eax,ecx
c0027052:	83 e0 01             	and    eax,0x1
c0027055:	c1 ea 07             	shr    edx,0x7
c0027058:	21 c2                	and    edx,eax
c002705a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002705d:	eb 03                	jmp    c0027062 <__mulsf3+0x1b9>
c002705f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027062:	89 f0                	mov    eax,esi
c0027064:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027067:	5b                   	pop    ebx
c0027068:	5e                   	pop    esi
c0027069:	5f                   	pop    edi
c002706a:	5d                   	pop    ebp
c002706b:	c3                   	ret    

c002706c <__divsf3>:
c002706c:	55                   	push   ebp
c002706d:	89 e5                	mov    ebp,esp
c002706f:	57                   	push   edi
c0027070:	56                   	push   esi
c0027071:	53                   	push   ebx
c0027072:	83 ec 1c             	sub    esp,0x1c
c0027075:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027078:	89 d8                	mov    eax,ebx
c002707a:	89 d9                	mov    ecx,ebx
c002707c:	c1 f9 17             	sar    ecx,0x17
c002707f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027082:	c1 e0 08             	shl    eax,0x8
c0027085:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002708a:	89 c1                	mov    ecx,eax
c002708c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002708f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027092:	89 c7                	mov    edi,eax
c0027094:	c1 ff 17             	sar    edi,0x17
c0027097:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002709b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002709e:	89 f8                	mov    eax,edi
c00270a0:	0f b6 c0             	movzx  eax,al
c00270a3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00270a6:	29 c6                	sub    esi,eax
c00270a8:	83 c6 7f             	add    esi,0x7f
c00270ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270ae:	42                   	inc    edx
c00270af:	80 e2 fe             	and    dl,0xfe
c00270b2:	0f 85 9c 00 00 00    	jne    c0027154 <__divsf3+0xe8>
c00270b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270bc:	74 33                	je     c00270f1 <__divsf3+0x85>
c00270be:	85 c9                	test   ecx,ecx
c00270c0:	0f 85 c7 01 00 00    	jne    c002728d <__divsf3+0x221>
c00270c6:	8d 57 01             	lea    edx,[edi+0x1]
c00270c9:	80 e2 fe             	and    dl,0xfe
c00270cc:	75 2f                	jne    c00270fd <__divsf3+0x91>
c00270ce:	85 c0                	test   eax,eax
c00270d0:	74 2b                	je     c00270fd <__divsf3+0x91>
c00270d2:	51                   	push   ecx
c00270d3:	51                   	push   ecx
c00270d4:	6a 00                	push   0x0
c00270d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270d9:	e8 d2 03 00 00       	call   c00274b0 <__nesf2>
c00270de:	83 c4 10             	add    esp,0x10
c00270e1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270e4:	85 c0                	test   eax,eax
c00270e6:	0f 85 a1 01 00 00    	jne    c002728d <__divsf3+0x221>
c00270ec:	e9 92 01 00 00       	jmp    c0027283 <__divsf3+0x217>
c00270f1:	85 c9                	test   ecx,ecx
c00270f3:	75 1b                	jne    c0027110 <__divsf3+0xa4>
c00270f5:	8d 57 01             	lea    edx,[edi+0x1]
c00270f8:	80 e2 fe             	and    dl,0xfe
c00270fb:	74 1e                	je     c002711b <__divsf3+0xaf>
c00270fd:	85 ff                	test   edi,edi
c00270ff:	0f 89 88 01 00 00    	jns    c002728d <__divsf3+0x221>
c0027105:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002710b:	e9 7d 01 00 00       	jmp    c002728d <__divsf3+0x221>
c0027110:	8d 56 ff             	lea    edx,[esi-0x1]
c0027113:	01 c9                	add    ecx,ecx
c0027115:	78 3d                	js     c0027154 <__divsf3+0xe8>
c0027117:	89 d6                	mov    esi,edx
c0027119:	eb f5                	jmp    c0027110 <__divsf3+0xa4>
c002711b:	85 c0                	test   eax,eax
c002711d:	b8 00 00 00 00       	mov    eax,0x0
c0027122:	74 18                	je     c002713c <__divsf3+0xd0>
c0027124:	52                   	push   edx
c0027125:	52                   	push   edx
c0027126:	50                   	push   eax
c0027127:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002712a:	e8 81 03 00 00       	call   c00274b0 <__nesf2>
c002712f:	83 c4 10             	add    esp,0x10
c0027132:	85 c0                	test   eax,eax
c0027134:	0f 85 50 01 00 00    	jne    c002728a <__divsf3+0x21e>
c002713a:	eb c1                	jmp    c00270fd <__divsf3+0x91>
c002713c:	56                   	push   esi
c002713d:	56                   	push   esi
c002713e:	50                   	push   eax
c002713f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027142:	e8 69 03 00 00       	call   c00274b0 <__nesf2>
c0027147:	83 c4 10             	add    esp,0x10
c002714a:	85 c0                	test   eax,eax
c002714c:	0f 84 31 01 00 00    	je     c0027283 <__divsf3+0x217>
c0027152:	eb a9                	jmp    c00270fd <__divsf3+0x91>
c0027154:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027157:	c1 e3 08             	shl    ebx,0x8
c002715a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027160:	8d 57 01             	lea    edx,[edi+0x1]
c0027163:	80 e2 fe             	and    dl,0xfe
c0027166:	75 71                	jne    c00271d9 <__divsf3+0x16d>
c0027168:	85 c0                	test   eax,eax
c002716a:	ba 00 00 00 00       	mov    edx,0x0
c002716f:	74 2f                	je     c00271a0 <__divsf3+0x134>
c0027171:	51                   	push   ecx
c0027172:	51                   	push   ecx
c0027173:	52                   	push   edx
c0027174:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027177:	e8 f9 02 00 00       	call   c0027475 <__eqsf2>
c002717c:	83 c4 10             	add    esp,0x10
c002717f:	85 c0                	test   eax,eax
c0027181:	0f 85 03 01 00 00    	jne    c002728a <__divsf3+0x21e>
c0027187:	31 d2                	xor    edx,edx
c0027189:	89 d3                	mov    ebx,edx
c002718b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002718e:	31 f8                	xor    eax,edi
c0027190:	0f 89 f7 00 00 00    	jns    c002728d <__divsf3+0x221>
c0027196:	bb 00 00 00 80       	mov    ebx,0x80000000
c002719b:	e9 ed 00 00 00       	jmp    c002728d <__divsf3+0x221>
c00271a0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00271a3:	50                   	push   eax
c00271a4:	50                   	push   eax
c00271a5:	52                   	push   edx
c00271a6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271a9:	e8 c7 02 00 00       	call   c0027475 <__eqsf2>
c00271ae:	83 c4 10             	add    esp,0x10
c00271b1:	85 c0                	test   eax,eax
c00271b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00271b6:	75 16                	jne    c00271ce <__divsf3+0x162>
c00271b8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271bb:	31 fb                	xor    ebx,edi
c00271bd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00271c3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00271c9:	e9 bf 00 00 00       	jmp    c002728d <__divsf3+0x221>
c00271ce:	8d 46 01             	lea    eax,[esi+0x1]
c00271d1:	01 db                	add    ebx,ebx
c00271d3:	78 04                	js     c00271d9 <__divsf3+0x16d>
c00271d5:	89 c6                	mov    esi,eax
c00271d7:	eb f5                	jmp    c00271ce <__divsf3+0x162>
c00271d9:	89 c8                	mov    eax,ecx
c00271db:	0d 00 00 00 80       	or     eax,0x80000000
c00271e0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00271e6:	31 d2                	xor    edx,edx
c00271e8:	39 d8                	cmp    eax,ebx
c00271ea:	72 07                	jb     c00271f3 <__divsf3+0x187>
c00271ec:	29 d8                	sub    eax,ebx
c00271ee:	ba 01 00 00 00       	mov    edx,0x1
c00271f3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00271fa:	01 d2                	add    edx,edx
c00271fc:	89 c1                	mov    ecx,eax
c00271fe:	01 c0                	add    eax,eax
c0027200:	85 c9                	test   ecx,ecx
c0027202:	78 04                	js     c0027208 <__divsf3+0x19c>
c0027204:	39 c3                	cmp    ebx,eax
c0027206:	77 05                	ja     c002720d <__divsf3+0x1a1>
c0027208:	29 d8                	sub    eax,ebx
c002720a:	83 ca 01             	or     edx,0x1
c002720d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027210:	75 e8                	jne    c00271fa <__divsf3+0x18e>
c0027212:	85 c0                	test   eax,eax
c0027214:	0f 95 c0             	setne  al
c0027217:	0f b6 c0             	movzx  eax,al
c002721a:	c1 e2 06             	shl    edx,0x6
c002721d:	09 c2                	or     edx,eax
c002721f:	78 03                	js     c0027224 <__divsf3+0x1b8>
c0027221:	01 d2                	add    edx,edx
c0027223:	4e                   	dec    esi
c0027224:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002722a:	7f 22                	jg     c002724e <__divsf3+0x1e2>
c002722c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027232:	85 f6                	test   esi,esi
c0027234:	7f 23                	jg     c0027259 <__divsf3+0x1ed>
c0027236:	83 fe e9             	cmp    esi,0xffffffe9
c0027239:	7c 1a                	jl     c0027255 <__divsf3+0x1e9>
c002723b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027241:	b9 01 00 00 00       	mov    ecx,0x1
c0027246:	29 f1                	sub    ecx,esi
c0027248:	d3 ea                	shr    edx,cl
c002724a:	31 f6                	xor    esi,esi
c002724c:	eb 0b                	jmp    c0027259 <__divsf3+0x1ed>
c002724e:	be ff 00 00 00       	mov    esi,0xff
c0027253:	eb 02                	jmp    c0027257 <__divsf3+0x1eb>
c0027255:	31 f6                	xor    esi,esi
c0027257:	31 d2                	xor    edx,edx
c0027259:	89 d0                	mov    eax,edx
c002725b:	c1 e8 08             	shr    eax,0x8
c002725e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027261:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027267:	09 fe                	or     esi,edi
c0027269:	c1 e6 17             	shl    esi,0x17
c002726c:	09 c6                	or     esi,eax
c002726e:	f6 c2 7f             	test   dl,0x7f
c0027271:	0f 95 c1             	setne  cl
c0027274:	09 c8                	or     eax,ecx
c0027276:	83 e0 01             	and    eax,0x1
c0027279:	c1 ea 07             	shr    edx,0x7
c002727c:	21 c2                	and    edx,eax
c002727e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027281:	eb 0a                	jmp    c002728d <__divsf3+0x221>
c0027283:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027288:	eb 03                	jmp    c002728d <__divsf3+0x221>
c002728a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002728d:	89 d8                	mov    eax,ebx
c002728f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027292:	5b                   	pop    ebx
c0027293:	5e                   	pop    esi
c0027294:	5f                   	pop    edi
c0027295:	5d                   	pop    ebp
c0027296:	c3                   	ret    

c0027297 <__floatsisf>:
c0027297:	55                   	push   ebp
c0027298:	89 e5                	mov    ebp,esp
c002729a:	53                   	push   ebx
c002729b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002729e:	85 d2                	test   edx,edx
c00272a0:	7e 2b                	jle    c00272cd <__floatsisf+0x36>
c00272a2:	0f bd ca             	bsr    ecx,edx
c00272a5:	83 f1 1f             	xor    ecx,0x1f
c00272a8:	d3 e2                	shl    edx,cl
c00272aa:	89 d0                	mov    eax,edx
c00272ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272b1:	89 c3                	mov    ebx,eax
c00272b3:	c1 eb 08             	shr    ebx,0x8
c00272b6:	80 e2 7f             	and    dl,0x7f
c00272b9:	0f 95 c2             	setne  dl
c00272bc:	09 da                	or     edx,ebx
c00272be:	83 e2 01             	and    edx,0x1
c00272c1:	c1 e8 07             	shr    eax,0x7
c00272c4:	21 c2                	and    edx,eax
c00272c6:	b8 9e 00 00 00       	mov    eax,0x9e
c00272cb:	eb 32                	jmp    c00272ff <__floatsisf+0x68>
c00272cd:	b8 00 00 00 00       	mov    eax,0x0
c00272d2:	74 34                	je     c0027308 <__floatsisf+0x71>
c00272d4:	f7 da                	neg    edx
c00272d6:	0f bd ca             	bsr    ecx,edx
c00272d9:	83 f1 1f             	xor    ecx,0x1f
c00272dc:	d3 e2                	shl    edx,cl
c00272de:	89 d0                	mov    eax,edx
c00272e0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272e5:	89 c3                	mov    ebx,eax
c00272e7:	c1 eb 08             	shr    ebx,0x8
c00272ea:	80 e2 7f             	and    dl,0x7f
c00272ed:	0f 95 c2             	setne  dl
c00272f0:	09 da                	or     edx,ebx
c00272f2:	83 e2 01             	and    edx,0x1
c00272f5:	c1 e8 07             	shr    eax,0x7
c00272f8:	21 c2                	and    edx,eax
c00272fa:	b8 9e 01 00 00       	mov    eax,0x19e
c00272ff:	29 c8                	sub    eax,ecx
c0027301:	c1 e0 17             	shl    eax,0x17
c0027304:	09 d8                	or     eax,ebx
c0027306:	01 d0                	add    eax,edx
c0027308:	5b                   	pop    ebx
c0027309:	5d                   	pop    ebp
c002730a:	c3                   	ret    

c002730b <__floatunsisf>:
c002730b:	55                   	push   ebp
c002730c:	89 e5                	mov    ebp,esp
c002730e:	53                   	push   ebx
c002730f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027312:	31 c0                	xor    eax,eax
c0027314:	85 d2                	test   edx,edx
c0027316:	74 32                	je     c002734a <__floatunsisf+0x3f>
c0027318:	0f bd ca             	bsr    ecx,edx
c002731b:	83 f1 1f             	xor    ecx,0x1f
c002731e:	d3 e2                	shl    edx,cl
c0027320:	89 d0                	mov    eax,edx
c0027322:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027327:	89 c3                	mov    ebx,eax
c0027329:	c1 eb 08             	shr    ebx,0x8
c002732c:	80 e2 7f             	and    dl,0x7f
c002732f:	0f 95 c2             	setne  dl
c0027332:	09 da                	or     edx,ebx
c0027334:	83 e2 01             	and    edx,0x1
c0027337:	c1 e8 07             	shr    eax,0x7
c002733a:	21 c2                	and    edx,eax
c002733c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027341:	29 c8                	sub    eax,ecx
c0027343:	c1 e0 17             	shl    eax,0x17
c0027346:	09 d8                	or     eax,ebx
c0027348:	01 d0                	add    eax,edx
c002734a:	5b                   	pop    ebx
c002734b:	5d                   	pop    ebp
c002734c:	c3                   	ret    

c002734d <__fixsfsi>:
c002734d:	55                   	push   ebp
c002734e:	89 e5                	mov    ebp,esp
c0027350:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027353:	89 d1                	mov    ecx,edx
c0027355:	c1 e1 08             	shl    ecx,0x8
c0027358:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002735e:	c1 fa 17             	sar    edx,0x17
c0027361:	78 1c                	js     c002737f <__fixsfsi+0x32>
c0027363:	83 ea 7f             	sub    edx,0x7f
c0027366:	31 c0                	xor    eax,eax
c0027368:	83 fa 1e             	cmp    edx,0x1e
c002736b:	77 40                	ja     c00273ad <__fixsfsi+0x60>
c002736d:	89 c8                	mov    eax,ecx
c002736f:	0d 00 00 00 80       	or     eax,0x80000000
c0027374:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027379:	29 d1                	sub    ecx,edx
c002737b:	d3 e8                	shr    eax,cl
c002737d:	eb 2e                	jmp    c00273ad <__fixsfsi+0x60>
c002737f:	31 c0                	xor    eax,eax
c0027381:	81 c2 81 00 00 00    	add    edx,0x81
c0027387:	78 24                	js     c00273ad <__fixsfsi+0x60>
c0027389:	83 fa 1e             	cmp    edx,0x1e
c002738c:	7e 09                	jle    c0027397 <__fixsfsi+0x4a>
c002738e:	83 fa 1f             	cmp    edx,0x1f
c0027391:	75 18                	jne    c00273ab <__fixsfsi+0x5e>
c0027393:	85 c9                	test   ecx,ecx
c0027395:	75 14                	jne    c00273ab <__fixsfsi+0x5e>
c0027397:	89 c8                	mov    eax,ecx
c0027399:	0d 00 00 00 80       	or     eax,0x80000000
c002739e:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273a3:	29 d1                	sub    ecx,edx
c00273a5:	d3 e8                	shr    eax,cl
c00273a7:	f7 d8                	neg    eax
c00273a9:	eb 02                	jmp    c00273ad <__fixsfsi+0x60>
c00273ab:	31 c0                	xor    eax,eax
c00273ad:	5d                   	pop    ebp
c00273ae:	c3                   	ret    

c00273af <__fixunssfsi>:
c00273af:	55                   	push   ebp
c00273b0:	89 e5                	mov    ebp,esp
c00273b2:	53                   	push   ebx
c00273b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273b6:	89 d3                	mov    ebx,edx
c00273b8:	c1 fb 17             	sar    ebx,0x17
c00273bb:	83 eb 7f             	sub    ebx,0x7f
c00273be:	31 c0                	xor    eax,eax
c00273c0:	83 fb 1f             	cmp    ebx,0x1f
c00273c3:	77 18                	ja     c00273dd <__fixunssfsi+0x2e>
c00273c5:	89 d0                	mov    eax,edx
c00273c7:	c1 e0 08             	shl    eax,0x8
c00273ca:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00273cf:	0d 00 00 00 80       	or     eax,0x80000000
c00273d4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273d9:	29 d9                	sub    ecx,ebx
c00273db:	d3 e8                	shr    eax,cl
c00273dd:	5b                   	pop    ebx
c00273de:	5d                   	pop    ebp
c00273df:	c3                   	ret    

c00273e0 <__cmpsf2>:
c00273e0:	55                   	push   ebp
c00273e1:	89 e5                	mov    ebp,esp
c00273e3:	57                   	push   edi
c00273e4:	56                   	push   esi
c00273e5:	53                   	push   ebx
c00273e6:	83 ec 24             	sub    esp,0x24
c00273e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273ef:	e8 4f 10 00 00       	call   c0028443 <__truncdfsf2>
c00273f4:	5a                   	pop    edx
c00273f5:	59                   	pop    ecx
c00273f6:	89 c3                	mov    ebx,eax
c00273f8:	c1 e8 17             	shr    eax,0x17
c00273fb:	0f b6 f0             	movzx  esi,al
c00273fe:	89 d8                	mov    eax,ebx
c0027400:	c1 e8 1f             	shr    eax,0x1f
c0027403:	31 c6                	xor    esi,eax
c0027405:	c1 e3 08             	shl    ebx,0x8
c0027408:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002740b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002740e:	e8 30 10 00 00       	call   c0028443 <__truncdfsf2>
c0027413:	83 c4 10             	add    esp,0x10
c0027416:	89 c1                	mov    ecx,eax
c0027418:	c1 e9 17             	shr    ecx,0x17
c002741b:	0f b6 c9             	movzx  ecx,cl
c002741e:	89 c7                	mov    edi,eax
c0027420:	c1 ef 1f             	shr    edi,0x1f
c0027423:	89 ca                	mov    edx,ecx
c0027425:	31 fa                	xor    edx,edi
c0027427:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002742a:	c1 e0 08             	shl    eax,0x8
c002742d:	89 c2                	mov    edx,eax
c002742f:	89 d8                	mov    eax,ebx
c0027431:	09 d0                	or     eax,edx
c0027433:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027438:	09 f0                	or     eax,esi
c002743a:	75 08                	jne    c0027444 <__cmpsf2+0x64>
c002743c:	31 c0                	xor    eax,eax
c002743e:	39 f9                	cmp    ecx,edi
c0027440:	75 0c                	jne    c002744e <__cmpsf2+0x6e>
c0027442:	eb 29                	jmp    c002746d <__cmpsf2+0x8d>
c0027444:	b8 01 00 00 00       	mov    eax,0x1
c0027449:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002744c:	7f 1f                	jg     c002746d <__cmpsf2+0x8d>
c002744e:	83 c8 ff             	or     eax,0xffffffff
c0027451:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027454:	7c 17                	jl     c002746d <__cmpsf2+0x8d>
c0027456:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002745c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027462:	b8 01 00 00 00       	mov    eax,0x1
c0027467:	39 d3                	cmp    ebx,edx
c0027469:	77 02                	ja     c002746d <__cmpsf2+0x8d>
c002746b:	19 c0                	sbb    eax,eax
c002746d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027470:	5b                   	pop    ebx
c0027471:	5e                   	pop    esi
c0027472:	5f                   	pop    edi
c0027473:	5d                   	pop    ebp
c0027474:	c3                   	ret    

c0027475 <__eqsf2>:
c0027475:	55                   	push   ebp
c0027476:	89 e5                	mov    ebp,esp
c0027478:	83 ec 24             	sub    esp,0x24
c002747b:	6a 01                	push   0x1
c002747d:	83 ec 0c             	sub    esp,0xc
c0027480:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027483:	e8 df 10 00 00       	call   c0028567 <__extendsfdf2>
c0027488:	83 c4 10             	add    esp,0x10
c002748b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002748e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027491:	52                   	push   edx
c0027492:	50                   	push   eax
c0027493:	50                   	push   eax
c0027494:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027497:	e8 cb 10 00 00       	call   c0028567 <__extendsfdf2>
c002749c:	59                   	pop    ecx
c002749d:	59                   	pop    ecx
c002749e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274a1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274a4:	52                   	push   edx
c00274a5:	50                   	push   eax
c00274a6:	e8 35 ff ff ff       	call   c00273e0 <__cmpsf2>
c00274ab:	83 c4 20             	add    esp,0x20
c00274ae:	c9                   	leave  
c00274af:	c3                   	ret    

c00274b0 <__nesf2>:
c00274b0:	eb c3                	jmp    c0027475 <__eqsf2>

c00274b2 <__gtsf2>:
c00274b2:	55                   	push   ebp
c00274b3:	89 e5                	mov    ebp,esp
c00274b5:	83 ec 24             	sub    esp,0x24
c00274b8:	6a ff                	push   0xffffffff
c00274ba:	83 ec 0c             	sub    esp,0xc
c00274bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274c0:	e8 a2 10 00 00       	call   c0028567 <__extendsfdf2>
c00274c5:	83 c4 10             	add    esp,0x10
c00274c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274cb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274ce:	52                   	push   edx
c00274cf:	50                   	push   eax
c00274d0:	50                   	push   eax
c00274d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274d4:	e8 8e 10 00 00       	call   c0028567 <__extendsfdf2>
c00274d9:	59                   	pop    ecx
c00274da:	59                   	pop    ecx
c00274db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274e1:	52                   	push   edx
c00274e2:	50                   	push   eax
c00274e3:	e8 f8 fe ff ff       	call   c00273e0 <__cmpsf2>
c00274e8:	83 c4 20             	add    esp,0x20
c00274eb:	c9                   	leave  
c00274ec:	c3                   	ret    

c00274ed <__gesf2>:
c00274ed:	eb c3                	jmp    c00274b2 <__gtsf2>

c00274ef <__ltsf2>:
c00274ef:	eb 84                	jmp    c0027475 <__eqsf2>

c00274f1 <__lesf2>:
c00274f1:	eb 82                	jmp    c0027475 <__eqsf2>

c00274f3 <__adddf3>:
c00274f3:	55                   	push   ebp
c00274f4:	89 e5                	mov    ebp,esp
c00274f6:	57                   	push   edi
c00274f7:	56                   	push   esi
c00274f8:	53                   	push   ebx
c00274f9:	83 ec 24             	sub    esp,0x24
c00274fc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00274ff:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027502:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027505:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027508:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002750b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002750e:	89 c8                	mov    eax,ecx
c0027510:	89 ce                	mov    esi,ecx
c0027512:	c1 fe 14             	sar    esi,0x14
c0027515:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027518:	89 fb                	mov    ebx,edi
c002751a:	89 fa                	mov    edx,edi
c002751c:	c1 e2 0b             	shl    edx,0xb
c002751f:	c1 e0 0b             	shl    eax,0xb
c0027522:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027527:	c1 eb 15             	shr    ebx,0x15
c002752a:	09 d8                	or     eax,ebx
c002752c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002752f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027532:	c1 fe 14             	sar    esi,0x14
c0027535:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027538:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002753b:	89 f3                	mov    ebx,esi
c002753d:	c1 e3 0b             	shl    ebx,0xb
c0027540:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027543:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027546:	c1 e3 0b             	shl    ebx,0xb
c0027549:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002754f:	c1 ee 15             	shr    esi,0x15
c0027552:	09 f3                	or     ebx,esi
c0027554:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027557:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002755a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002755d:	0f 88 5f 02 00 00    	js     c00277c2 <__adddf3+0x2cf>
c0027563:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027566:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027569:	85 db                	test   ebx,ebx
c002756b:	0f 8e c7 00 00 00    	jle    c0027638 <__adddf3+0x145>
c0027571:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027578:	75 1a                	jne    c0027594 <__adddf3+0xa1>
c002757a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002757d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027580:	0f 84 b2 05 00 00    	je     c0027b38 <__adddf3+0x645>
c0027586:	4b                   	dec    ebx
c0027587:	75 23                	jne    c00275ac <__adddf3+0xb9>
c0027589:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002758c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002758f:	e9 99 00 00 00       	jmp    c002762d <__adddf3+0x13a>
c0027594:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027597:	f7 d6                	not    esi
c0027599:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002759f:	0f 84 93 05 00 00    	je     c0027b38 <__adddf3+0x645>
c00275a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00275ac:	83 fb 1f             	cmp    ebx,0x1f
c00275af:	7e 42                	jle    c00275f3 <__adddf3+0x100>
c00275b1:	83 fb 3f             	cmp    ebx,0x3f
c00275b4:	0f 8f 7e 05 00 00    	jg     c0027b38 <__adddf3+0x645>
c00275ba:	83 e3 1f             	and    ebx,0x1f
c00275bd:	89 d9                	mov    ecx,ebx
c00275bf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275c2:	d3 ef                	shr    edi,cl
c00275c4:	31 db                	xor    ebx,ebx
c00275c6:	85 c9                	test   ecx,ecx
c00275c8:	74 15                	je     c00275df <__adddf3+0xec>
c00275ca:	be 20 00 00 00       	mov    esi,0x20
c00275cf:	29 ce                	sub    esi,ecx
c00275d1:	89 f1                	mov    ecx,esi
c00275d3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275d6:	d3 e6                	shl    esi,cl
c00275d8:	31 db                	xor    ebx,ebx
c00275da:	85 f6                	test   esi,esi
c00275dc:	0f 95 c3             	setne  bl
c00275df:	31 c9                	xor    ecx,ecx
c00275e1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275e5:	0f 95 c1             	setne  cl
c00275e8:	09 cf                	or     edi,ecx
c00275ea:	09 fb                	or     ebx,edi
c00275ec:	01 da                	add    edx,ebx
c00275ee:	83 d0 00             	adc    eax,0x0
c00275f1:	eb 3a                	jmp    c002762d <__adddf3+0x13a>
c00275f3:	bf 20 00 00 00       	mov    edi,0x20
c00275f8:	29 df                	sub    edi,ebx
c00275fa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027600:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027603:	d3 e6                	shl    esi,cl
c0027605:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027608:	88 d9                	mov    cl,bl
c002760a:	d3 ef                	shr    edi,cl
c002760c:	09 fe                	or     esi,edi
c002760e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027611:	88 d9                	mov    cl,bl
c0027613:	d3 ef                	shr    edi,cl
c0027615:	89 fb                	mov    ebx,edi
c0027617:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002761a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002761d:	d3 e7                	shl    edi,cl
c002761f:	85 ff                	test   edi,edi
c0027621:	0f 95 c1             	setne  cl
c0027624:	0f b6 c9             	movzx  ecx,cl
c0027627:	09 ce                	or     esi,ecx
c0027629:	01 f2                	add    edx,esi
c002762b:	11 d8                	adc    eax,ebx
c002762d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027630:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027633:	e9 52 01 00 00       	jmp    c002778a <__adddf3+0x297>
c0027638:	0f 84 d5 00 00 00    	je     c0027713 <__adddf3+0x220>
c002763e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027641:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027644:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027647:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002764a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027651:	75 20                	jne    c0027673 <__adddf3+0x180>
c0027653:	89 d6                	mov    esi,edx
c0027655:	09 c6                	or     esi,eax
c0027657:	0f 84 db 04 00 00    	je     c0027b38 <__adddf3+0x645>
c002765d:	4b                   	dec    ebx
c002765e:	75 29                	jne    c0027689 <__adddf3+0x196>
c0027660:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027663:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027666:	01 d1                	add    ecx,edx
c0027668:	11 c6                	adc    esi,eax
c002766a:	89 f0                	mov    eax,esi
c002766c:	89 ca                	mov    edx,ecx
c002766e:	e9 17 01 00 00       	jmp    c002778a <__adddf3+0x297>
c0027673:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027676:	f7 d6                	not    esi
c0027678:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002767e:	0f 84 b4 04 00 00    	je     c0027b38 <__adddf3+0x645>
c0027684:	0d 00 00 00 80       	or     eax,0x80000000
c0027689:	83 fb 1f             	cmp    ebx,0x1f
c002768c:	7e 48                	jle    c00276d6 <__adddf3+0x1e3>
c002768e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027691:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027694:	83 fb 3f             	cmp    ebx,0x3f
c0027697:	0f 8f 9b 04 00 00    	jg     c0027b38 <__adddf3+0x645>
c002769d:	83 e3 1f             	and    ebx,0x1f
c00276a0:	89 d9                	mov    ecx,ebx
c00276a2:	89 c7                	mov    edi,eax
c00276a4:	d3 ef                	shr    edi,cl
c00276a6:	31 db                	xor    ebx,ebx
c00276a8:	85 c9                	test   ecx,ecx
c00276aa:	74 12                	je     c00276be <__adddf3+0x1cb>
c00276ac:	be 20 00 00 00       	mov    esi,0x20
c00276b1:	29 ce                	sub    esi,ecx
c00276b3:	89 f1                	mov    ecx,esi
c00276b5:	d3 e0                	shl    eax,cl
c00276b7:	31 db                	xor    ebx,ebx
c00276b9:	85 c0                	test   eax,eax
c00276bb:	0f 95 c3             	setne  bl
c00276be:	31 c0                	xor    eax,eax
c00276c0:	85 d2                	test   edx,edx
c00276c2:	0f 95 c0             	setne  al
c00276c5:	09 c7                	or     edi,eax
c00276c7:	09 fb                	or     ebx,edi
c00276c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276cc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276cf:	01 da                	add    edx,ebx
c00276d1:	83 d6 00             	adc    esi,0x0
c00276d4:	eb 39                	jmp    c002770f <__adddf3+0x21c>
c00276d6:	be 20 00 00 00       	mov    esi,0x20
c00276db:	29 de                	sub    esi,ebx
c00276dd:	89 c7                	mov    edi,eax
c00276df:	89 f1                	mov    ecx,esi
c00276e1:	d3 e7                	shl    edi,cl
c00276e3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276e6:	89 d7                	mov    edi,edx
c00276e8:	88 d9                	mov    cl,bl
c00276ea:	d3 ef                	shr    edi,cl
c00276ec:	89 f9                	mov    ecx,edi
c00276ee:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276f1:	09 cf                	or     edi,ecx
c00276f3:	88 d9                	mov    cl,bl
c00276f5:	d3 e8                	shr    eax,cl
c00276f7:	89 f1                	mov    ecx,esi
c00276f9:	d3 e2                	shl    edx,cl
c00276fb:	85 d2                	test   edx,edx
c00276fd:	0f 95 c2             	setne  dl
c0027700:	0f b6 d2             	movzx  edx,dl
c0027703:	09 d7                	or     edi,edx
c0027705:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027708:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002770b:	01 fa                	add    edx,edi
c002770d:	11 c6                	adc    esi,eax
c002770f:	89 f0                	mov    eax,esi
c0027711:	eb 77                	jmp    c002778a <__adddf3+0x297>
c0027713:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027716:	46                   	inc    esi
c0027717:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002771a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027720:	75 41                	jne    c0027763 <__adddf3+0x270>
c0027722:	89 d3                	mov    ebx,edx
c0027724:	09 c3                	or     ebx,eax
c0027726:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002772d:	75 27                	jne    c0027756 <__adddf3+0x263>
c002772f:	85 db                	test   ebx,ebx
c0027731:	0f 84 fb 03 00 00    	je     c0027b32 <__adddf3+0x63f>
c0027737:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002773a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002773d:	0f 84 f5 03 00 00    	je     c0027b38 <__adddf3+0x645>
c0027743:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027746:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027749:	85 c0                	test   eax,eax
c002774b:	0f 89 91 03 00 00    	jns    c0027ae2 <__adddf3+0x5ef>
c0027751:	e9 85 03 00 00       	jmp    c0027adb <__adddf3+0x5e8>
c0027756:	85 db                	test   ebx,ebx
c0027758:	0f 85 da 03 00 00    	jne    c0027b38 <__adddf3+0x645>
c002775e:	e9 cf 03 00 00       	jmp    c0027b32 <__adddf3+0x63f>
c0027763:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027766:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027769:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002776c:	f7 d1                	not    ecx
c002776e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027774:	0f 84 70 03 00 00    	je     c0027aea <__adddf3+0x5f7>
c002777a:	d1 ea                	shr    edx,1
c002777c:	89 c1                	mov    ecx,eax
c002777e:	c1 e1 1f             	shl    ecx,0x1f
c0027781:	09 ca                	or     edx,ecx
c0027783:	d1 e8                	shr    eax,1
c0027785:	e9 6f 03 00 00       	jmp    c0027af9 <__adddf3+0x606>
c002778a:	85 c0                	test   eax,eax
c002778c:	0f 89 67 03 00 00    	jns    c0027af9 <__adddf3+0x606>
c0027792:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027795:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027798:	f7 d1                	not    ecx
c002779a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277a0:	0f 84 44 03 00 00    	je     c0027aea <__adddf3+0x5f7>
c00277a6:	89 d1                	mov    ecx,edx
c00277a8:	d1 e9                	shr    ecx,1
c00277aa:	83 e2 01             	and    edx,0x1
c00277ad:	09 ca                	or     edx,ecx
c00277af:	89 c1                	mov    ecx,eax
c00277b1:	c1 e1 1f             	shl    ecx,0x1f
c00277b4:	09 ca                	or     edx,ecx
c00277b6:	d1 e8                	shr    eax,1
c00277b8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277bd:	e9 37 03 00 00       	jmp    c0027af9 <__adddf3+0x606>
c00277c2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277c5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277cb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00277ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00277d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277d7:	29 de                	sub    esi,ebx
c00277d9:	85 f6                	test   esi,esi
c00277db:	0f 8e bd 00 00 00    	jle    c002789e <__adddf3+0x3ab>
c00277e1:	85 db                	test   ebx,ebx
c00277e3:	75 17                	jne    c00277fc <__adddf3+0x309>
c00277e5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277e8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277eb:	0f 84 47 03 00 00    	je     c0027b38 <__adddf3+0x645>
c00277f1:	4e                   	dec    esi
c00277f2:	75 20                	jne    c0027814 <__adddf3+0x321>
c00277f4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00277f7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00277fa:	eb 5b                	jmp    c0027857 <__adddf3+0x364>
c00277fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00277ff:	f7 d3                	not    ebx
c0027801:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027807:	0f 84 2b 03 00 00    	je     c0027b38 <__adddf3+0x645>
c002780d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027814:	83 fe 1f             	cmp    esi,0x1f
c0027817:	7e 49                	jle    c0027862 <__adddf3+0x36f>
c0027819:	83 fe 3f             	cmp    esi,0x3f
c002781c:	0f 8f 16 03 00 00    	jg     c0027b38 <__adddf3+0x645>
c0027822:	83 e6 1f             	and    esi,0x1f
c0027825:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027828:	89 f1                	mov    ecx,esi
c002782a:	d3 ef                	shr    edi,cl
c002782c:	31 db                	xor    ebx,ebx
c002782e:	85 f6                	test   esi,esi
c0027830:	74 13                	je     c0027845 <__adddf3+0x352>
c0027832:	b9 20 00 00 00       	mov    ecx,0x20
c0027837:	29 f1                	sub    ecx,esi
c0027839:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002783c:	d3 e6                	shl    esi,cl
c002783e:	31 db                	xor    ebx,ebx
c0027840:	85 f6                	test   esi,esi
c0027842:	0f 95 c3             	setne  bl
c0027845:	31 c9                	xor    ecx,ecx
c0027847:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002784b:	0f 95 c1             	setne  cl
c002784e:	09 cf                	or     edi,ecx
c0027850:	09 fb                	or     ebx,edi
c0027852:	29 da                	sub    edx,ebx
c0027854:	83 d8 00             	sbb    eax,0x0
c0027857:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002785a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002785d:	e9 aa 01 00 00       	jmp    c0027a0c <__adddf3+0x519>
c0027862:	bf 20 00 00 00       	mov    edi,0x20
c0027867:	29 f7                	sub    edi,esi
c0027869:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002786c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002786f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027872:	d3 e3                	shl    ebx,cl
c0027874:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027877:	89 f1                	mov    ecx,esi
c0027879:	d3 ef                	shr    edi,cl
c002787b:	09 fb                	or     ebx,edi
c002787d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027880:	89 f1                	mov    ecx,esi
c0027882:	d3 ef                	shr    edi,cl
c0027884:	89 fe                	mov    esi,edi
c0027886:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027889:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002788c:	d3 e7                	shl    edi,cl
c002788e:	85 ff                	test   edi,edi
c0027890:	0f 95 c1             	setne  cl
c0027893:	0f b6 c9             	movzx  ecx,cl
c0027896:	09 cb                	or     ebx,ecx
c0027898:	29 da                	sub    edx,ebx
c002789a:	19 f0                	sbb    eax,esi
c002789c:	eb b9                	jmp    c0027857 <__adddf3+0x364>
c002789e:	0f 84 cd 00 00 00    	je     c0027971 <__adddf3+0x47e>
c00278a4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00278a7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278aa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278ad:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278b1:	75 1b                	jne    c00278ce <__adddf3+0x3db>
c00278b3:	89 d6                	mov    esi,edx
c00278b5:	09 c6                	or     esi,eax
c00278b7:	0f 84 7b 02 00 00    	je     c0027b38 <__adddf3+0x645>
c00278bd:	4b                   	dec    ebx
c00278be:	75 24                	jne    c00278e4 <__adddf3+0x3f1>
c00278c0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278c6:	29 d1                	sub    ecx,edx
c00278c8:	19 c6                	sbb    esi,eax
c00278ca:	89 ca                	mov    edx,ecx
c00278cc:	eb 61                	jmp    c002792f <__adddf3+0x43c>
c00278ce:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00278d1:	f7 d6                	not    esi
c00278d3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278d9:	0f 84 59 02 00 00    	je     c0027b38 <__adddf3+0x645>
c00278df:	0d 00 00 00 80       	or     eax,0x80000000
c00278e4:	83 fb 1f             	cmp    ebx,0x1f
c00278e7:	7e 4d                	jle    c0027936 <__adddf3+0x443>
c00278e9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278ec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278ef:	83 fb 3f             	cmp    ebx,0x3f
c00278f2:	0f 8f 40 02 00 00    	jg     c0027b38 <__adddf3+0x645>
c00278f8:	83 e3 1f             	and    ebx,0x1f
c00278fb:	89 d9                	mov    ecx,ebx
c00278fd:	89 c7                	mov    edi,eax
c00278ff:	d3 ef                	shr    edi,cl
c0027901:	31 db                	xor    ebx,ebx
c0027903:	85 c9                	test   ecx,ecx
c0027905:	74 12                	je     c0027919 <__adddf3+0x426>
c0027907:	be 20 00 00 00       	mov    esi,0x20
c002790c:	29 ce                	sub    esi,ecx
c002790e:	89 f1                	mov    ecx,esi
c0027910:	d3 e0                	shl    eax,cl
c0027912:	31 db                	xor    ebx,ebx
c0027914:	85 c0                	test   eax,eax
c0027916:	0f 95 c3             	setne  bl
c0027919:	31 c0                	xor    eax,eax
c002791b:	85 d2                	test   edx,edx
c002791d:	0f 95 c0             	setne  al
c0027920:	09 c7                	or     edi,eax
c0027922:	09 fb                	or     ebx,edi
c0027924:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027927:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002792a:	29 da                	sub    edx,ebx
c002792c:	83 de 00             	sbb    esi,0x0
c002792f:	89 f0                	mov    eax,esi
c0027931:	e9 d6 00 00 00       	jmp    c0027a0c <__adddf3+0x519>
c0027936:	be 20 00 00 00       	mov    esi,0x20
c002793b:	29 de                	sub    esi,ebx
c002793d:	89 c7                	mov    edi,eax
c002793f:	89 f1                	mov    ecx,esi
c0027941:	d3 e7                	shl    edi,cl
c0027943:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027946:	89 d7                	mov    edi,edx
c0027948:	88 d9                	mov    cl,bl
c002794a:	d3 ef                	shr    edi,cl
c002794c:	89 f9                	mov    ecx,edi
c002794e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027951:	09 cf                	or     edi,ecx
c0027953:	88 d9                	mov    cl,bl
c0027955:	d3 e8                	shr    eax,cl
c0027957:	89 f1                	mov    ecx,esi
c0027959:	d3 e2                	shl    edx,cl
c002795b:	85 d2                	test   edx,edx
c002795d:	0f 95 c2             	setne  dl
c0027960:	0f b6 d2             	movzx  edx,dl
c0027963:	09 d7                	or     edi,edx
c0027965:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027968:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002796b:	29 fa                	sub    edx,edi
c002796d:	19 c6                	sbb    esi,eax
c002796f:	eb be                	jmp    c002792f <__adddf3+0x43c>
c0027971:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027974:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027977:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002797d:	75 6a                	jne    c00279e9 <__adddf3+0x4f6>
c002797f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027983:	75 58                	jne    c00279dd <__adddf3+0x4ea>
c0027985:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027988:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002798b:	89 d6                	mov    esi,edx
c002798d:	09 c6                	or     esi,eax
c002798f:	75 17                	jne    c00279a8 <__adddf3+0x4b5>
c0027991:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027994:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027997:	85 db                	test   ebx,ebx
c0027999:	0f 85 99 01 00 00    	jne    c0027b38 <__adddf3+0x645>
c002799f:	31 ff                	xor    edi,edi
c00279a1:	31 c9                	xor    ecx,ecx
c00279a3:	e9 90 01 00 00       	jmp    c0027b38 <__adddf3+0x645>
c00279a8:	85 db                	test   ebx,ebx
c00279aa:	0f 84 88 01 00 00    	je     c0027b38 <__adddf3+0x645>
c00279b0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279b3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279b6:	85 c0                	test   eax,eax
c00279b8:	79 10                	jns    c00279ca <__adddf3+0x4d7>
c00279ba:	31 c9                	xor    ecx,ecx
c00279bc:	f7 da                	neg    edx
c00279be:	0f 95 c1             	setne  cl
c00279c1:	01 c8                	add    eax,ecx
c00279c3:	f7 d8                	neg    eax
c00279c5:	e9 2f 01 00 00       	jmp    c0027af9 <__adddf3+0x606>
c00279ca:	31 ff                	xor    edi,edi
c00279cc:	31 c9                	xor    ecx,ecx
c00279ce:	89 c3                	mov    ebx,eax
c00279d0:	09 d3                	or     ebx,edx
c00279d2:	0f 84 60 01 00 00    	je     c0027b38 <__adddf3+0x645>
c00279d8:	e9 05 01 00 00       	jmp    c0027ae2 <__adddf3+0x5ef>
c00279dd:	31 ff                	xor    edi,edi
c00279df:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00279e4:	e9 4f 01 00 00       	jmp    c0027b38 <__adddf3+0x645>
c00279e9:	89 c1                	mov    ecx,eax
c00279eb:	89 d0                	mov    eax,edx
c00279ed:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00279f0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00279f3:	89 ca                	mov    edx,ecx
c00279f5:	85 c9                	test   ecx,ecx
c00279f7:	79 2c                	jns    c0027a25 <__adddf3+0x532>
c00279f9:	31 c9                	xor    ecx,ecx
c00279fb:	f7 d8                	neg    eax
c00279fd:	0f 95 c1             	setne  cl
c0027a00:	01 ca                	add    edx,ecx
c0027a02:	f7 da                	neg    edx
c0027a04:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a07:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a0a:	eb 19                	jmp    c0027a25 <__adddf3+0x532>
c0027a0c:	85 c0                	test   eax,eax
c0027a0e:	0f 89 e5 00 00 00    	jns    c0027af9 <__adddf3+0x606>
c0027a14:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a19:	89 c1                	mov    ecx,eax
c0027a1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a1e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027a21:	89 d0                	mov    eax,edx
c0027a23:	89 ca                	mov    edx,ecx
c0027a25:	85 d2                	test   edx,edx
c0027a27:	74 59                	je     c0027a82 <__adddf3+0x58f>
c0027a29:	0f bd da             	bsr    ebx,edx
c0027a2c:	83 f3 1f             	xor    ebx,0x1f
c0027a2f:	88 d9                	mov    cl,bl
c0027a31:	d3 e2                	shl    edx,cl
c0027a33:	bf 20 00 00 00       	mov    edi,0x20
c0027a38:	89 f9                	mov    ecx,edi
c0027a3a:	29 d9                	sub    ecx,ebx
c0027a3c:	89 c6                	mov    esi,eax
c0027a3e:	d3 ee                	shr    esi,cl
c0027a40:	09 d6                	or     esi,edx
c0027a42:	88 d9                	mov    cl,bl
c0027a44:	d3 e0                	shl    eax,cl
c0027a46:	89 c2                	mov    edx,eax
c0027a48:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a4b:	25 ff 07 00 00       	and    eax,0x7ff
c0027a50:	39 d8                	cmp    eax,ebx
c0027a52:	7f 22                	jg     c0027a76 <__adddf3+0x583>
c0027a54:	29 c3                	sub    ebx,eax
c0027a56:	43                   	inc    ebx
c0027a57:	88 d9                	mov    cl,bl
c0027a59:	d3 ea                	shr    edx,cl
c0027a5b:	29 df                	sub    edi,ebx
c0027a5d:	89 f9                	mov    ecx,edi
c0027a5f:	89 f0                	mov    eax,esi
c0027a61:	d3 e0                	shl    eax,cl
c0027a63:	09 c2                	or     edx,eax
c0027a65:	89 f0                	mov    eax,esi
c0027a67:	88 d9                	mov    cl,bl
c0027a69:	d3 e8                	shr    eax,cl
c0027a6b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a6e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027a74:	eb 6f                	jmp    c0027ae5 <__adddf3+0x5f2>
c0027a76:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a79:	29 d8                	sub    eax,ebx
c0027a7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a7e:	89 f0                	mov    eax,esi
c0027a80:	eb 59                	jmp    c0027adb <__adddf3+0x5e8>
c0027a82:	85 c0                	test   eax,eax
c0027a84:	74 6a                	je     c0027af0 <__adddf3+0x5fd>
c0027a86:	0f bd c8             	bsr    ecx,eax
c0027a89:	83 f1 1f             	xor    ecx,0x1f
c0027a8c:	d3 e0                	shl    eax,cl
c0027a8e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a91:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a97:	83 c1 20             	add    ecx,0x20
c0027a9a:	39 cb                	cmp    ebx,ecx
c0027a9c:	7f 35                	jg     c0027ad3 <__adddf3+0x5e0>
c0027a9e:	29 d9                	sub    ecx,ebx
c0027aa0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027aa3:	83 fe 1f             	cmp    esi,0x1f
c0027aa6:	7e 09                	jle    c0027ab1 <__adddf3+0x5be>
c0027aa8:	83 e9 1f             	sub    ecx,0x1f
c0027aab:	d3 e8                	shr    eax,cl
c0027aad:	89 c3                	mov    ebx,eax
c0027aaf:	eb 11                	jmp    c0027ac2 <__adddf3+0x5cf>
c0027ab1:	b9 20 00 00 00       	mov    ecx,0x20
c0027ab6:	29 f1                	sub    ecx,esi
c0027ab8:	89 c3                	mov    ebx,eax
c0027aba:	d3 e3                	shl    ebx,cl
c0027abc:	89 f1                	mov    ecx,esi
c0027abe:	d3 e8                	shr    eax,cl
c0027ac0:	89 c2                	mov    edx,eax
c0027ac2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ac5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027aca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027acd:	89 d0                	mov    eax,edx
c0027acf:	89 da                	mov    edx,ebx
c0027ad1:	eb 26                	jmp    c0027af9 <__adddf3+0x606>
c0027ad3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ad6:	29 cf                	sub    edi,ecx
c0027ad8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027adb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ae0:	eb 17                	jmp    c0027af9 <__adddf3+0x606>
c0027ae2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ae5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ae8:	eb 0f                	jmp    c0027af9 <__adddf3+0x606>
c0027aea:	31 d2                	xor    edx,edx
c0027aec:	31 c0                	xor    eax,eax
c0027aee:	eb 09                	jmp    c0027af9 <__adddf3+0x606>
c0027af0:	89 c2                	mov    edx,eax
c0027af2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027af9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027afc:	c1 e1 14             	shl    ecx,0x14
c0027aff:	89 c3                	mov    ebx,eax
c0027b01:	c1 eb 0b             	shr    ebx,0xb
c0027b04:	09 d9                	or     ecx,ebx
c0027b06:	89 d3                	mov    ebx,edx
c0027b08:	c1 eb 0b             	shr    ebx,0xb
c0027b0b:	c1 e0 15             	shl    eax,0x15
c0027b0e:	09 d8                	or     eax,ebx
c0027b10:	89 c7                	mov    edi,eax
c0027b12:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b18:	0f 95 c0             	setne  al
c0027b1b:	89 c6                	mov    esi,eax
c0027b1d:	09 f3                	or     ebx,esi
c0027b1f:	83 e3 01             	and    ebx,0x1
c0027b22:	c1 ea 0a             	shr    edx,0xa
c0027b25:	21 da                	and    edx,ebx
c0027b27:	89 f8                	mov    eax,edi
c0027b29:	01 d0                	add    eax,edx
c0027b2b:	83 d1 00             	adc    ecx,0x0
c0027b2e:	89 c7                	mov    edi,eax
c0027b30:	eb 06                	jmp    c0027b38 <__adddf3+0x645>
c0027b32:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b35:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b38:	89 f8                	mov    eax,edi
c0027b3a:	89 ca                	mov    edx,ecx
c0027b3c:	83 c4 24             	add    esp,0x24
c0027b3f:	5b                   	pop    ebx
c0027b40:	5e                   	pop    esi
c0027b41:	5f                   	pop    edi
c0027b42:	5d                   	pop    ebp
c0027b43:	c3                   	ret    

c0027b44 <__subdf3>:
c0027b44:	55                   	push   ebp
c0027b45:	89 e5                	mov    ebp,esp
c0027b47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b4a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b4d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b53:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b56:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b59:	5d                   	pop    ebp
c0027b5a:	e9 94 f9 ff ff       	jmp    c00274f3 <__adddf3>

c0027b5f <__negdf2>:
c0027b5f:	55                   	push   ebp
c0027b60:	89 e5                	mov    ebp,esp
c0027b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b65:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b68:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b6e:	5d                   	pop    ebp
c0027b6f:	c3                   	ret    

c0027b70 <__muldf3>:
c0027b70:	55                   	push   ebp
c0027b71:	89 e5                	mov    ebp,esp
c0027b73:	57                   	push   edi
c0027b74:	56                   	push   esi
c0027b75:	53                   	push   ebx
c0027b76:	83 ec 24             	sub    esp,0x24
c0027b79:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b7f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b85:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b88:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b8b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b8e:	89 c8                	mov    eax,ecx
c0027b90:	c1 f8 14             	sar    eax,0x14
c0027b93:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b96:	89 f8                	mov    eax,edi
c0027b98:	89 fb                	mov    ebx,edi
c0027b9a:	c1 e3 0b             	shl    ebx,0xb
c0027b9d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ba0:	c1 e1 0b             	shl    ecx,0xb
c0027ba3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ba9:	c1 e8 15             	shr    eax,0x15
c0027bac:	09 c1                	or     ecx,eax
c0027bae:	89 d6                	mov    esi,edx
c0027bb0:	89 d0                	mov    eax,edx
c0027bb2:	c1 f8 14             	sar    eax,0x14
c0027bb5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027bb8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027bbb:	89 c3                	mov    ebx,eax
c0027bbd:	c1 e3 0b             	shl    ebx,0xb
c0027bc0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027bc3:	c1 e6 0b             	shl    esi,0xb
c0027bc6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027bcc:	c1 e8 15             	shr    eax,0x15
c0027bcf:	09 c6                	or     esi,eax
c0027bd1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bd4:	25 ff 07 00 00       	and    eax,0x7ff
c0027bd9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027bdc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bdf:	25 ff 07 00 00       	and    eax,0x7ff
c0027be4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027be7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027bea:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027bed:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027bf4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bf7:	40                   	inc    eax
c0027bf8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bfd:	0f 85 8d 00 00 00    	jne    c0027c90 <__muldf3+0x120>
c0027c03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c06:	09 c8                	or     eax,ecx
c0027c08:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c0c:	74 44                	je     c0027c52 <__muldf3+0xe2>
c0027c0e:	85 c0                	test   eax,eax
c0027c10:	0f 85 31 02 00 00    	jne    c0027e47 <__muldf3+0x2d7>
c0027c16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c19:	40                   	inc    eax
c0027c1a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c1f:	75 13                	jne    c0027c34 <__muldf3+0xc4>
c0027c21:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c24:	09 f1                	or     ecx,esi
c0027c26:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c2a:	74 22                	je     c0027c4e <__muldf3+0xde>
c0027c2c:	85 c9                	test   ecx,ecx
c0027c2e:	0f 85 0d 02 00 00    	jne    c0027e41 <__muldf3+0x2d1>
c0027c34:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c38:	0f 89 09 02 00 00    	jns    c0027e47 <__muldf3+0x2d7>
c0027c3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c41:	05 00 00 00 80       	add    eax,0x80000000
c0027c46:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c49:	e9 f9 01 00 00       	jmp    c0027e47 <__muldf3+0x2d7>
c0027c4e:	85 c9                	test   ecx,ecx
c0027c50:	eb 2e                	jmp    c0027c80 <__muldf3+0x110>
c0027c52:	85 c0                	test   eax,eax
c0027c54:	74 20                	je     c0027c76 <__muldf3+0x106>
c0027c56:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c5c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c5f:	c1 ef 1f             	shr    edi,0x1f
c0027c62:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027c65:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027c68:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c6b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c6e:	09 f9                	or     ecx,edi
c0027c70:	78 1e                	js     c0027c90 <__muldf3+0x120>
c0027c72:	89 c3                	mov    ebx,eax
c0027c74:	eb e0                	jmp    c0027c56 <__muldf3+0xe6>
c0027c76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c79:	f7 d0                	not    eax
c0027c7b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027c80:	75 b2                	jne    c0027c34 <__muldf3+0xc4>
c0027c82:	31 ff                	xor    edi,edi
c0027c84:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c8b:	e9 b7 01 00 00       	jmp    c0027e47 <__muldf3+0x2d7>
c0027c90:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c93:	40                   	inc    eax
c0027c94:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c99:	75 57                	jne    c0027cf2 <__muldf3+0x182>
c0027c9b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027c9e:	09 f0                	or     eax,esi
c0027ca0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ca4:	74 23                	je     c0027cc9 <__muldf3+0x159>
c0027ca6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027caa:	0f 89 91 01 00 00    	jns    c0027e41 <__muldf3+0x2d1>
c0027cb0:	85 c0                	test   eax,eax
c0027cb2:	0f 85 89 01 00 00    	jne    c0027e41 <__muldf3+0x2d1>
c0027cb8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027cbb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027cc1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cc4:	e9 7e 01 00 00       	jmp    c0027e47 <__muldf3+0x2d7>
c0027cc9:	85 c0                	test   eax,eax
c0027ccb:	75 0c                	jne    c0027cd9 <__muldf3+0x169>
c0027ccd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027cd1:	0f 89 6a 01 00 00    	jns    c0027e41 <__muldf3+0x2d1>
c0027cd7:	eb df                	jmp    c0027cb8 <__muldf3+0x148>
c0027cd9:	01 f6                	add    esi,esi
c0027cdb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027cde:	c1 ea 1f             	shr    edx,0x1f
c0027ce1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ce4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027ce7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cea:	09 d6                	or     esi,edx
c0027cec:	78 04                	js     c0027cf2 <__muldf3+0x182>
c0027cee:	89 c3                	mov    ebx,eax
c0027cf0:	eb e7                	jmp    c0027cd9 <__muldf3+0x169>
c0027cf2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027cf8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cfe:	89 c8                	mov    eax,ecx
c0027d00:	f7 e6                	mul    esi
c0027d02:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d05:	89 c7                	mov    edi,eax
c0027d07:	89 c8                	mov    eax,ecx
c0027d09:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d0c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d0f:	89 c1                	mov    ecx,eax
c0027d11:	89 f0                	mov    eax,esi
c0027d13:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d16:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d19:	89 c6                	mov    esi,eax
c0027d1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d1e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d21:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027d24:	31 c0                	xor    eax,eax
c0027d26:	01 f1                	add    ecx,esi
c0027d28:	0f 92 c0             	setb   al
c0027d2b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027d2e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d31:	83 d6 00             	adc    esi,0x0
c0027d34:	01 c7                	add    edi,eax
c0027d36:	83 d6 00             	adc    esi,0x0
c0027d39:	01 ca                	add    edx,ecx
c0027d3b:	0f 92 c1             	setb   cl
c0027d3e:	0f b6 c9             	movzx  ecx,cl
c0027d41:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d44:	83 d6 00             	adc    esi,0x0
c0027d47:	01 cf                	add    edi,ecx
c0027d49:	83 d6 00             	adc    esi,0x0
c0027d4c:	31 c9                	xor    ecx,ecx
c0027d4e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d51:	0f 95 c1             	setne  cl
c0027d54:	09 cf                	or     edi,ecx
c0027d56:	85 f6                	test   esi,esi
c0027d58:	78 0c                	js     c0027d66 <__muldf3+0x1f6>
c0027d5a:	01 f6                	add    esi,esi
c0027d5c:	89 f8                	mov    eax,edi
c0027d5e:	c1 e8 1f             	shr    eax,0x1f
c0027d61:	09 c6                	or     esi,eax
c0027d63:	01 ff                	add    edi,edi
c0027d65:	4b                   	dec    ebx
c0027d66:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027d6c:	0f 8f 85 00 00 00    	jg     c0027df7 <__muldf3+0x287>
c0027d72:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027d78:	85 db                	test   ebx,ebx
c0027d7a:	0f 8f 84 00 00 00    	jg     c0027e04 <__muldf3+0x294>
c0027d80:	83 fb cc             	cmp    ebx,0xffffffcc
c0027d83:	7c 79                	jl     c0027dfe <__muldf3+0x28e>
c0027d85:	ba 01 00 00 00       	mov    edx,0x1
c0027d8a:	29 da                	sub    edx,ebx
c0027d8c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d92:	83 fa 1f             	cmp    edx,0x1f
c0027d95:	7e 30                	jle    c0027dc7 <__muldf3+0x257>
c0027d97:	83 fa 20             	cmp    edx,0x20
c0027d9a:	75 0b                	jne    c0027da7 <__muldf3+0x237>
c0027d9c:	31 c0                	xor    eax,eax
c0027d9e:	85 ff                	test   edi,edi
c0027da0:	0f 95 c0             	setne  al
c0027da3:	89 c7                	mov    edi,eax
c0027da5:	eb 1a                	jmp    c0027dc1 <__muldf3+0x251>
c0027da7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027daa:	89 f0                	mov    eax,esi
c0027dac:	d3 e0                	shl    eax,cl
c0027dae:	09 f8                	or     eax,edi
c0027db0:	0f 95 c0             	setne  al
c0027db3:	0f b6 c0             	movzx  eax,al
c0027db6:	89 c7                	mov    edi,eax
c0027db8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dbd:	29 d9                	sub    ecx,ebx
c0027dbf:	d3 ee                	shr    esi,cl
c0027dc1:	09 f7                	or     edi,esi
c0027dc3:	31 db                	xor    ebx,ebx
c0027dc5:	eb 3b                	jmp    c0027e02 <__muldf3+0x292>
c0027dc7:	83 c3 1f             	add    ebx,0x1f
c0027dca:	89 f0                	mov    eax,esi
c0027dcc:	88 d9                	mov    cl,bl
c0027dce:	d3 e0                	shl    eax,cl
c0027dd0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dd3:	89 f8                	mov    eax,edi
c0027dd5:	88 d1                	mov    cl,dl
c0027dd7:	d3 e8                	shr    eax,cl
c0027dd9:	89 c1                	mov    ecx,eax
c0027ddb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027dde:	09 c8                	or     eax,ecx
c0027de0:	88 d9                	mov    cl,bl
c0027de2:	d3 e7                	shl    edi,cl
c0027de4:	31 db                	xor    ebx,ebx
c0027de6:	85 ff                	test   edi,edi
c0027de8:	0f 95 c3             	setne  bl
c0027deb:	89 df                	mov    edi,ebx
c0027ded:	09 c7                	or     edi,eax
c0027def:	88 d1                	mov    cl,dl
c0027df1:	d3 ee                	shr    esi,cl
c0027df3:	31 db                	xor    ebx,ebx
c0027df5:	eb 0d                	jmp    c0027e04 <__muldf3+0x294>
c0027df7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027dfc:	eb 02                	jmp    c0027e00 <__muldf3+0x290>
c0027dfe:	31 db                	xor    ebx,ebx
c0027e00:	31 ff                	xor    edi,edi
c0027e02:	31 f6                	xor    esi,esi
c0027e04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e07:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e0a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e0f:	09 c3                	or     ebx,eax
c0027e11:	c1 e3 14             	shl    ebx,0x14
c0027e14:	89 f0                	mov    eax,esi
c0027e16:	c1 e8 0b             	shr    eax,0xb
c0027e19:	09 c3                	or     ebx,eax
c0027e1b:	89 f8                	mov    eax,edi
c0027e1d:	c1 e8 0b             	shr    eax,0xb
c0027e20:	c1 e6 15             	shl    esi,0x15
c0027e23:	09 c6                	or     esi,eax
c0027e25:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027e2b:	0f 95 c1             	setne  cl
c0027e2e:	09 c8                	or     eax,ecx
c0027e30:	83 e0 01             	and    eax,0x1
c0027e33:	c1 ef 0a             	shr    edi,0xa
c0027e36:	21 c7                	and    edi,eax
c0027e38:	01 f7                	add    edi,esi
c0027e3a:	83 d3 00             	adc    ebx,0x0
c0027e3d:	89 da                	mov    edx,ebx
c0027e3f:	eb 03                	jmp    c0027e44 <__muldf3+0x2d4>
c0027e41:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e44:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e47:	89 f8                	mov    eax,edi
c0027e49:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e4c:	83 c4 24             	add    esp,0x24
c0027e4f:	5b                   	pop    ebx
c0027e50:	5e                   	pop    esi
c0027e51:	5f                   	pop    edi
c0027e52:	5d                   	pop    ebp
c0027e53:	c3                   	ret    

c0027e54 <__divdf3>:
c0027e54:	55                   	push   ebp
c0027e55:	89 e5                	mov    ebp,esp
c0027e57:	57                   	push   edi
c0027e58:	56                   	push   esi
c0027e59:	53                   	push   ebx
c0027e5a:	83 ec 2c             	sub    esp,0x2c
c0027e5d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e60:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e66:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e69:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e6c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e6f:	89 ce                	mov    esi,ecx
c0027e71:	89 c8                	mov    eax,ecx
c0027e73:	c1 f8 14             	sar    eax,0x14
c0027e76:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e79:	89 f8                	mov    eax,edi
c0027e7b:	89 fb                	mov    ebx,edi
c0027e7d:	c1 e3 0b             	shl    ebx,0xb
c0027e80:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027e83:	c1 e6 0b             	shl    esi,0xb
c0027e86:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e8c:	c1 e8 15             	shr    eax,0x15
c0027e8f:	09 c6                	or     esi,eax
c0027e91:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027e94:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027e97:	89 c2                	mov    edx,eax
c0027e99:	c1 fa 14             	sar    edx,0x14
c0027e9c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e9f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ea2:	89 de                	mov    esi,ebx
c0027ea4:	c1 e6 0b             	shl    esi,0xb
c0027ea7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027eaa:	c1 e0 0b             	shl    eax,0xb
c0027ead:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027eb2:	c1 eb 15             	shr    ebx,0x15
c0027eb5:	09 d8                	or     eax,ebx
c0027eb7:	89 c2                	mov    edx,eax
c0027eb9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ebc:	25 ff 07 00 00       	and    eax,0x7ff
c0027ec1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027ec4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ec7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ecd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ed0:	29 d8                	sub    eax,ebx
c0027ed2:	05 ff 03 00 00       	add    eax,0x3ff
c0027ed7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027eda:	46                   	inc    esi
c0027edb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ee1:	0f 85 a5 00 00 00    	jne    c0027f8c <__divdf3+0x138>
c0027ee7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027eea:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027eed:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ef1:	74 2a                	je     c0027f1d <__divdf3+0xc9>
c0027ef3:	85 f6                	test   esi,esi
c0027ef5:	0f 85 cc 02 00 00    	jne    c00281c7 <__divdf3+0x373>
c0027efb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027efe:	40                   	inc    eax
c0027eff:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f04:	75 26                	jne    c0027f2c <__divdf3+0xd8>
c0027f06:	85 db                	test   ebx,ebx
c0027f08:	74 22                	je     c0027f2c <__divdf3+0xd8>
c0027f0a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f0d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f10:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f13:	09 d0                	or     eax,edx
c0027f15:	0f 85 ac 02 00 00    	jne    c00281c7 <__divdf3+0x373>
c0027f1b:	eb 63                	jmp    c0027f80 <__divdf3+0x12c>
c0027f1d:	85 f6                	test   esi,esi
c0027f1f:	75 22                	jne    c0027f43 <__divdf3+0xef>
c0027f21:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f24:	40                   	inc    eax
c0027f25:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f2a:	74 36                	je     c0027f62 <__divdf3+0x10e>
c0027f2c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f30:	0f 89 91 02 00 00    	jns    c00281c7 <__divdf3+0x373>
c0027f36:	89 f8                	mov    eax,edi
c0027f38:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f3e:	e9 80 02 00 00       	jmp    c00281c3 <__divdf3+0x36f>
c0027f43:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f46:	01 f6                	add    esi,esi
c0027f48:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f4b:	c1 ef 1f             	shr    edi,0x1f
c0027f4e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f51:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f54:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f57:	09 f7                	or     edi,esi
c0027f59:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f5c:	78 2e                	js     c0027f8c <__divdf3+0x138>
c0027f5e:	89 c8                	mov    eax,ecx
c0027f60:	eb e1                	jmp    c0027f43 <__divdf3+0xef>
c0027f62:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f65:	09 d0                	or     eax,edx
c0027f67:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f6b:	74 0f                	je     c0027f7c <__divdf3+0x128>
c0027f6d:	85 c0                	test   eax,eax
c0027f6f:	74 bb                	je     c0027f2c <__divdf3+0xd8>
c0027f71:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f74:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f77:	e9 4b 02 00 00       	jmp    c00281c7 <__divdf3+0x373>
c0027f7c:	85 c0                	test   eax,eax
c0027f7e:	75 ac                	jne    c0027f2c <__divdf3+0xd8>
c0027f80:	31 ff                	xor    edi,edi
c0027f82:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027f87:	e9 3b 02 00 00       	jmp    c00281c7 <__divdf3+0x373>
c0027f8c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f8f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027f92:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027f98:	75 6b                	jne    c0028005 <__divdf3+0x1b1>
c0027f9a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f9d:	09 d6                	or     esi,edx
c0027f9f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027fa3:	74 28                	je     c0027fcd <__divdf3+0x179>
c0027fa5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fa8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fab:	85 f6                	test   esi,esi
c0027fad:	0f 85 14 02 00 00    	jne    c00281c7 <__divdf3+0x373>
c0027fb3:	31 ff                	xor    edi,edi
c0027fb5:	31 c9                	xor    ecx,ecx
c0027fb7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fba:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fbd:	0f 89 04 02 00 00    	jns    c00281c7 <__divdf3+0x373>
c0027fc3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027fc8:	e9 fa 01 00 00       	jmp    c00281c7 <__divdf3+0x373>
c0027fcd:	85 f6                	test   esi,esi
c0027fcf:	75 1b                	jne    c0027fec <__divdf3+0x198>
c0027fd1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fd4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fd7:	25 00 00 00 80       	and    eax,0x80000000
c0027fdc:	31 c9                	xor    ecx,ecx
c0027fde:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027fe3:	89 cf                	mov    edi,ecx
c0027fe5:	89 c1                	mov    ecx,eax
c0027fe7:	e9 db 01 00 00       	jmp    c00281c7 <__divdf3+0x373>
c0027fec:	01 d2                	add    edx,edx
c0027fee:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ff1:	c1 eb 1f             	shr    ebx,0x1f
c0027ff4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ff7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027ffa:	8d 48 01             	lea    ecx,[eax+0x1]
c0027ffd:	09 da                	or     edx,ebx
c0027fff:	78 04                	js     c0028005 <__divdf3+0x1b1>
c0028001:	89 c8                	mov    eax,ecx
c0028003:	eb e7                	jmp    c0027fec <__divdf3+0x198>
c0028005:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028008:	81 ce 00 00 00 80    	or     esi,0x80000000
c002800e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028014:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028017:	39 d6                	cmp    esi,edx
c0028019:	77 0d                	ja     c0028028 <__divdf3+0x1d4>
c002801b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002801e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028021:	72 1b                	jb     c002803e <__divdf3+0x1ea>
c0028023:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028026:	75 16                	jne    c002803e <__divdf3+0x1ea>
c0028028:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002802b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002802e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028031:	83 de 00             	sbb    esi,0x0
c0028034:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028037:	ba 01 00 00 00       	mov    edx,0x1
c002803c:	eb 02                	jmp    c0028040 <__divdf3+0x1ec>
c002803e:	31 d2                	xor    edx,edx
c0028040:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028047:	31 ff                	xor    edi,edi
c0028049:	01 ff                	add    edi,edi
c002804b:	89 d1                	mov    ecx,edx
c002804d:	c1 e9 1f             	shr    ecx,0x1f
c0028050:	09 cf                	or     edi,ecx
c0028052:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028055:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028058:	89 da                	mov    edx,ebx
c002805a:	89 f3                	mov    ebx,esi
c002805c:	8d 34 36             	lea    esi,[esi+esi*1]
c002805f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028062:	c1 e9 1f             	shr    ecx,0x1f
c0028065:	09 ce                	or     esi,ecx
c0028067:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002806a:	01 c9                	add    ecx,ecx
c002806c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002806f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028072:	85 db                	test   ebx,ebx
c0028074:	78 29                	js     c002809f <__divdf3+0x24b>
c0028076:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028079:	72 07                	jb     c0028082 <__divdf3+0x22e>
c002807b:	75 3c                	jne    c00280b9 <__divdf3+0x265>
c002807d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028080:	77 37                	ja     c00280b9 <__divdf3+0x265>
c0028082:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028085:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028088:	31 d2                	xor    edx,edx
c002808a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002808d:	0f 97 c2             	seta   dl
c0028090:	29 d6                	sub    esi,edx
c0028092:	89 d9                	mov    ecx,ebx
c0028094:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028097:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002809a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002809d:	eb 17                	jmp    c00280b6 <__divdf3+0x262>
c002809f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280a2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280a8:	0f 97 c1             	seta   cl
c00280ab:	0f b6 c9             	movzx  ecx,cl
c00280ae:	29 ce                	sub    esi,ecx
c00280b0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00280b3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00280b6:	83 ca 01             	or     edx,0x1
c00280b9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00280bc:	75 8b                	jne    c0028049 <__divdf3+0x1f5>
c00280be:	c1 e7 09             	shl    edi,0x9
c00280c1:	89 d1                	mov    ecx,edx
c00280c3:	c1 e9 17             	shr    ecx,0x17
c00280c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280c9:	09 f3                	or     ebx,esi
c00280cb:	0f 95 c3             	setne  bl
c00280ce:	0f b6 db             	movzx  ebx,bl
c00280d1:	c1 e2 09             	shl    edx,0x9
c00280d4:	09 d3                	or     ebx,edx
c00280d6:	89 ca                	mov    edx,ecx
c00280d8:	09 fa                	or     edx,edi
c00280da:	78 0c                	js     c00280e8 <__divdf3+0x294>
c00280dc:	01 d2                	add    edx,edx
c00280de:	89 d9                	mov    ecx,ebx
c00280e0:	c1 e9 1f             	shr    ecx,0x1f
c00280e3:	09 ca                	or     edx,ecx
c00280e5:	01 db                	add    ebx,ebx
c00280e7:	48                   	dec    eax
c00280e8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00280ed:	0f 8f 83 00 00 00    	jg     c0028176 <__divdf3+0x322>
c00280f3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00280f9:	85 c0                	test   eax,eax
c00280fb:	0f 8f 82 00 00 00    	jg     c0028183 <__divdf3+0x32f>
c0028101:	83 f8 cc             	cmp    eax,0xffffffcc
c0028104:	7c 77                	jl     c002817d <__divdf3+0x329>
c0028106:	be 01 00 00 00       	mov    esi,0x1
c002810b:	29 c6                	sub    esi,eax
c002810d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028113:	83 fe 1f             	cmp    esi,0x1f
c0028116:	7e 2f                	jle    c0028147 <__divdf3+0x2f3>
c0028118:	83 fe 20             	cmp    esi,0x20
c002811b:	75 0a                	jne    c0028127 <__divdf3+0x2d3>
c002811d:	85 db                	test   ebx,ebx
c002811f:	0f 95 c3             	setne  bl
c0028122:	0f b6 db             	movzx  ebx,bl
c0028125:	eb 1a                	jmp    c0028141 <__divdf3+0x2ed>
c0028127:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002812a:	89 d7                	mov    edi,edx
c002812c:	d3 e7                	shl    edi,cl
c002812e:	89 f9                	mov    ecx,edi
c0028130:	09 d9                	or     ecx,ebx
c0028132:	0f 95 c3             	setne  bl
c0028135:	0f b6 db             	movzx  ebx,bl
c0028138:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002813d:	29 c1                	sub    ecx,eax
c002813f:	d3 ea                	shr    edx,cl
c0028141:	09 d3                	or     ebx,edx
c0028143:	31 c0                	xor    eax,eax
c0028145:	eb 3a                	jmp    c0028181 <__divdf3+0x32d>
c0028147:	83 c0 1f             	add    eax,0x1f
c002814a:	89 d7                	mov    edi,edx
c002814c:	88 c1                	mov    cl,al
c002814e:	d3 e7                	shl    edi,cl
c0028150:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028153:	89 df                	mov    edi,ebx
c0028155:	89 f1                	mov    ecx,esi
c0028157:	d3 ef                	shr    edi,cl
c0028159:	89 f9                	mov    ecx,edi
c002815b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002815e:	09 cf                	or     edi,ecx
c0028160:	88 c1                	mov    cl,al
c0028162:	d3 e3                	shl    ebx,cl
c0028164:	85 db                	test   ebx,ebx
c0028166:	0f 95 c3             	setne  bl
c0028169:	0f b6 db             	movzx  ebx,bl
c002816c:	09 fb                	or     ebx,edi
c002816e:	89 f1                	mov    ecx,esi
c0028170:	d3 ea                	shr    edx,cl
c0028172:	31 c0                	xor    eax,eax
c0028174:	eb 0d                	jmp    c0028183 <__divdf3+0x32f>
c0028176:	b8 ff 07 00 00       	mov    eax,0x7ff
c002817b:	eb 02                	jmp    c002817f <__divdf3+0x32b>
c002817d:	31 c0                	xor    eax,eax
c002817f:	31 db                	xor    ebx,ebx
c0028181:	31 d2                	xor    edx,edx
c0028183:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028186:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028189:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002818f:	09 c8                	or     eax,ecx
c0028191:	c1 e0 14             	shl    eax,0x14
c0028194:	89 d1                	mov    ecx,edx
c0028196:	c1 e9 0b             	shr    ecx,0xb
c0028199:	09 c8                	or     eax,ecx
c002819b:	89 c6                	mov    esi,eax
c002819d:	89 d9                	mov    ecx,ebx
c002819f:	c1 e9 0b             	shr    ecx,0xb
c00281a2:	c1 e2 15             	shl    edx,0x15
c00281a5:	09 ca                	or     edx,ecx
c00281a7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00281ad:	0f 95 c0             	setne  al
c00281b0:	09 c1                	or     ecx,eax
c00281b2:	83 e1 01             	and    ecx,0x1
c00281b5:	c1 eb 0a             	shr    ebx,0xa
c00281b8:	21 cb                	and    ebx,ecx
c00281ba:	01 d3                	add    ebx,edx
c00281bc:	89 d8                	mov    eax,ebx
c00281be:	83 d6 00             	adc    esi,0x0
c00281c1:	89 f2                	mov    edx,esi
c00281c3:	89 c7                	mov    edi,eax
c00281c5:	89 d1                	mov    ecx,edx
c00281c7:	89 f8                	mov    eax,edi
c00281c9:	89 ca                	mov    edx,ecx
c00281cb:	83 c4 2c             	add    esp,0x2c
c00281ce:	5b                   	pop    ebx
c00281cf:	5e                   	pop    esi
c00281d0:	5f                   	pop    edi
c00281d1:	5d                   	pop    ebp
c00281d2:	c3                   	ret    

c00281d3 <__floatsidf>:
c00281d3:	55                   	push   ebp
c00281d4:	89 e5                	mov    ebp,esp
c00281d6:	56                   	push   esi
c00281d7:	53                   	push   ebx
c00281d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281db:	85 db                	test   ebx,ebx
c00281dd:	7e 15                	jle    c00281f4 <__floatsidf+0x21>
c00281df:	0f bd cb             	bsr    ecx,ebx
c00281e2:	83 f1 1f             	xor    ecx,0x1f
c00281e5:	d3 e3                	shl    ebx,cl
c00281e7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281ed:	b8 1e 04 00 00       	mov    eax,0x41e
c00281f2:	eb 21                	jmp    c0028215 <__floatsidf+0x42>
c00281f4:	b8 00 00 00 00       	mov    eax,0x0
c00281f9:	ba 00 00 00 00       	mov    edx,0x0
c00281fe:	74 2a                	je     c002822a <__floatsidf+0x57>
c0028200:	f7 db                	neg    ebx
c0028202:	0f bd cb             	bsr    ecx,ebx
c0028205:	83 f1 1f             	xor    ecx,0x1f
c0028208:	d3 e3                	shl    ebx,cl
c002820a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028210:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028215:	29 c8                	sub    eax,ecx
c0028217:	c1 e0 14             	shl    eax,0x14
c002821a:	89 c1                	mov    ecx,eax
c002821c:	89 de                	mov    esi,ebx
c002821e:	c1 ee 0b             	shr    esi,0xb
c0028221:	09 f1                	or     ecx,esi
c0028223:	89 ca                	mov    edx,ecx
c0028225:	c1 e3 15             	shl    ebx,0x15
c0028228:	89 d8                	mov    eax,ebx
c002822a:	5b                   	pop    ebx
c002822b:	5e                   	pop    esi
c002822c:	5d                   	pop    ebp
c002822d:	c3                   	ret    

c002822e <__floatunsidf>:
c002822e:	55                   	push   ebp
c002822f:	89 e5                	mov    ebp,esp
c0028231:	56                   	push   esi
c0028232:	53                   	push   ebx
c0028233:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028236:	85 db                	test   ebx,ebx
c0028238:	74 2a                	je     c0028264 <__floatunsidf+0x36>
c002823a:	0f bd cb             	bsr    ecx,ebx
c002823d:	83 f1 1f             	xor    ecx,0x1f
c0028240:	d3 e3                	shl    ebx,cl
c0028242:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028248:	b8 1e 04 00 00       	mov    eax,0x41e
c002824d:	29 c8                	sub    eax,ecx
c002824f:	c1 e0 14             	shl    eax,0x14
c0028252:	89 c1                	mov    ecx,eax
c0028254:	89 de                	mov    esi,ebx
c0028256:	c1 ee 0b             	shr    esi,0xb
c0028259:	09 f1                	or     ecx,esi
c002825b:	89 ca                	mov    edx,ecx
c002825d:	c1 e3 15             	shl    ebx,0x15
c0028260:	89 d8                	mov    eax,ebx
c0028262:	eb 04                	jmp    c0028268 <__floatunsidf+0x3a>
c0028264:	31 c0                	xor    eax,eax
c0028266:	31 d2                	xor    edx,edx
c0028268:	5b                   	pop    ebx
c0028269:	5e                   	pop    esi
c002826a:	5d                   	pop    ebp
c002826b:	c3                   	ret    

c002826c <__fixdfsi>:
c002826c:	55                   	push   ebp
c002826d:	89 e5                	mov    ebp,esp
c002826f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028272:	89 d1                	mov    ecx,edx
c0028274:	c1 e1 0b             	shl    ecx,0xb
c0028277:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002827d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028280:	c1 e8 15             	shr    eax,0x15
c0028283:	09 c1                	or     ecx,eax
c0028285:	c1 fa 14             	sar    edx,0x14
c0028288:	78 1f                	js     c00282a9 <__fixdfsi+0x3d>
c002828a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028290:	31 c0                	xor    eax,eax
c0028292:	83 fa 1e             	cmp    edx,0x1e
c0028295:	77 40                	ja     c00282d7 <__fixdfsi+0x6b>
c0028297:	89 c8                	mov    eax,ecx
c0028299:	0d 00 00 00 80       	or     eax,0x80000000
c002829e:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282a3:	29 d1                	sub    ecx,edx
c00282a5:	d3 e8                	shr    eax,cl
c00282a7:	eb 2e                	jmp    c00282d7 <__fixdfsi+0x6b>
c00282a9:	31 c0                	xor    eax,eax
c00282ab:	81 c2 01 04 00 00    	add    edx,0x401
c00282b1:	78 24                	js     c00282d7 <__fixdfsi+0x6b>
c00282b3:	83 fa 1e             	cmp    edx,0x1e
c00282b6:	7e 09                	jle    c00282c1 <__fixdfsi+0x55>
c00282b8:	83 fa 1f             	cmp    edx,0x1f
c00282bb:	75 18                	jne    c00282d5 <__fixdfsi+0x69>
c00282bd:	85 c9                	test   ecx,ecx
c00282bf:	75 14                	jne    c00282d5 <__fixdfsi+0x69>
c00282c1:	89 c8                	mov    eax,ecx
c00282c3:	0d 00 00 00 80       	or     eax,0x80000000
c00282c8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282cd:	29 d1                	sub    ecx,edx
c00282cf:	d3 e8                	shr    eax,cl
c00282d1:	f7 d8                	neg    eax
c00282d3:	eb 02                	jmp    c00282d7 <__fixdfsi+0x6b>
c00282d5:	31 c0                	xor    eax,eax
c00282d7:	5d                   	pop    ebp
c00282d8:	c3                   	ret    

c00282d9 <__fixunsdfsi>:
c00282d9:	55                   	push   ebp
c00282da:	89 e5                	mov    ebp,esp
c00282dc:	53                   	push   ebx
c00282dd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00282e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282e3:	89 d3                	mov    ebx,edx
c00282e5:	c1 fb 14             	sar    ebx,0x14
c00282e8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00282ee:	31 c0                	xor    eax,eax
c00282f0:	83 fb 1f             	cmp    ebx,0x1f
c00282f3:	77 1d                	ja     c0028312 <__fixunsdfsi+0x39>
c00282f5:	89 d0                	mov    eax,edx
c00282f7:	c1 e0 0b             	shl    eax,0xb
c00282fa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282ff:	c1 e9 15             	shr    ecx,0x15
c0028302:	09 c8                	or     eax,ecx
c0028304:	0d 00 00 00 80       	or     eax,0x80000000
c0028309:	b9 1f 00 00 00       	mov    ecx,0x1f
c002830e:	29 d9                	sub    ecx,ebx
c0028310:	d3 e8                	shr    eax,cl
c0028312:	5b                   	pop    ebx
c0028313:	5d                   	pop    ebp
c0028314:	c3                   	ret    

c0028315 <__cmpdf2>:
c0028315:	55                   	push   ebp
c0028316:	89 e5                	mov    ebp,esp
c0028318:	57                   	push   edi
c0028319:	56                   	push   esi
c002831a:	53                   	push   ebx
c002831b:	83 ec 0c             	sub    esp,0xc
c002831e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028321:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028324:	89 ca                	mov    edx,ecx
c0028326:	c1 ea 14             	shr    edx,0x14
c0028329:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002832f:	89 cb                	mov    ebx,ecx
c0028331:	c1 fb 1f             	sar    ebx,0x1f
c0028334:	31 da                	xor    edx,ebx
c0028336:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028339:	89 df                	mov    edi,ebx
c002833b:	c1 e7 0b             	shl    edi,0xb
c002833e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028341:	c1 e1 0b             	shl    ecx,0xb
c0028344:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002834a:	c1 eb 15             	shr    ebx,0x15
c002834d:	09 d9                	or     ecx,ebx
c002834f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028352:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028355:	89 ce                	mov    esi,ecx
c0028357:	c1 ee 14             	shr    esi,0x14
c002835a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028360:	89 cb                	mov    ebx,ecx
c0028362:	c1 fb 1f             	sar    ebx,0x1f
c0028365:	31 de                	xor    esi,ebx
c0028367:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002836a:	89 df                	mov    edi,ebx
c002836c:	c1 e7 0b             	shl    edi,0xb
c002836f:	c1 e1 0b             	shl    ecx,0xb
c0028372:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028378:	c1 eb 15             	shr    ebx,0x15
c002837b:	09 d9                	or     ecx,ebx
c002837d:	89 d3                	mov    ebx,edx
c002837f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028385:	43                   	inc    ebx
c0028386:	83 fb 01             	cmp    ebx,0x1
c0028389:	77 08                	ja     c0028393 <__cmpdf2+0x7e>
c002838b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002838e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028391:	75 68                	jne    c00283fb <__cmpdf2+0xe6>
c0028393:	89 f3                	mov    ebx,esi
c0028395:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002839b:	43                   	inc    ebx
c002839c:	83 fb 01             	cmp    ebx,0x1
c002839f:	77 06                	ja     c00283a7 <__cmpdf2+0x92>
c00283a1:	89 fb                	mov    ebx,edi
c00283a3:	09 cb                	or     ebx,ecx
c00283a5:	75 54                	jne    c00283fb <__cmpdf2+0xe6>
c00283a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283aa:	09 f8                	or     eax,edi
c00283ac:	09 c8                	or     eax,ecx
c00283ae:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00283b1:	75 12                	jne    c00283c5 <__cmpdf2+0xb0>
c00283b3:	8d 42 01             	lea    eax,[edx+0x1]
c00283b6:	83 f8 01             	cmp    eax,0x1
c00283b9:	77 0a                	ja     c00283c5 <__cmpdf2+0xb0>
c00283bb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00283be:	31 c0                	xor    eax,eax
c00283c0:	83 fb 01             	cmp    ebx,0x1
c00283c3:	76 36                	jbe    c00283fb <__cmpdf2+0xe6>
c00283c5:	b8 01 00 00 00       	mov    eax,0x1
c00283ca:	39 f2                	cmp    edx,esi
c00283cc:	7f 2d                	jg     c00283fb <__cmpdf2+0xe6>
c00283ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00283d3:	7c 26                	jl     c00283fb <__cmpdf2+0xe6>
c00283d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00283d8:	77 07                	ja     c00283e1 <__cmpdf2+0xcc>
c00283da:	72 16                	jb     c00283f2 <__cmpdf2+0xdd>
c00283dc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00283df:	76 0a                	jbe    c00283eb <__cmpdf2+0xd6>
c00283e1:	89 d0                	mov    eax,edx
c00283e3:	c1 f8 1f             	sar    eax,0x1f
c00283e6:	83 c8 01             	or     eax,0x1
c00283e9:	eb 10                	jmp    c00283fb <__cmpdf2+0xe6>
c00283eb:	b8 00 00 00 00       	mov    eax,0x0
c00283f0:	73 09                	jae    c00283fb <__cmpdf2+0xe6>
c00283f2:	89 d0                	mov    eax,edx
c00283f4:	c1 f8 1f             	sar    eax,0x1f
c00283f7:	83 e0 02             	and    eax,0x2
c00283fa:	48                   	dec    eax
c00283fb:	83 c4 0c             	add    esp,0xc
c00283fe:	5b                   	pop    ebx
c00283ff:	5e                   	pop    esi
c0028400:	5f                   	pop    edi
c0028401:	5d                   	pop    ebp
c0028402:	c3                   	ret    

c0028403 <__eqdf2>:
c0028403:	55                   	push   ebp
c0028404:	89 e5                	mov    ebp,esp
c0028406:	50                   	push   eax
c0028407:	6a 01                	push   0x1
c0028409:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002840c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002840f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028412:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028415:	e8 fb fe ff ff       	call   c0028315 <__cmpdf2>
c002841a:	83 c4 18             	add    esp,0x18
c002841d:	c9                   	leave  
c002841e:	c3                   	ret    

c002841f <__nedf2>:
c002841f:	eb e2                	jmp    c0028403 <__eqdf2>

c0028421 <__gtdf2>:
c0028421:	55                   	push   ebp
c0028422:	89 e5                	mov    ebp,esp
c0028424:	50                   	push   eax
c0028425:	6a ff                	push   0xffffffff
c0028427:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002842a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002842d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028430:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028433:	e8 dd fe ff ff       	call   c0028315 <__cmpdf2>
c0028438:	83 c4 18             	add    esp,0x18
c002843b:	c9                   	leave  
c002843c:	c3                   	ret    

c002843d <__gedf2>:
c002843d:	eb e2                	jmp    c0028421 <__gtdf2>

c002843f <__ltdf2>:
c002843f:	eb c2                	jmp    c0028403 <__eqdf2>

c0028441 <__ledf2>:
c0028441:	eb c0                	jmp    c0028403 <__eqdf2>

c0028443 <__truncdfsf2>:
c0028443:	55                   	push   ebp
c0028444:	89 e5                	mov    ebp,esp
c0028446:	57                   	push   edi
c0028447:	56                   	push   esi
c0028448:	53                   	push   ebx
c0028449:	83 ec 0c             	sub    esp,0xc
c002844c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002844f:	89 d1                	mov    ecx,edx
c0028451:	c1 f9 14             	sar    ecx,0x14
c0028454:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028457:	89 df                	mov    edi,ebx
c0028459:	c1 e7 0b             	shl    edi,0xb
c002845c:	89 d0                	mov    eax,edx
c002845e:	c1 e0 0b             	shl    eax,0xb
c0028461:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028466:	c1 eb 15             	shr    ebx,0x15
c0028469:	09 d8                	or     eax,ebx
c002846b:	89 cb                	mov    ebx,ecx
c002846d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028473:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028479:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002847f:	0f 86 9e 00 00 00    	jbe    c0028523 <__truncdfsf2+0xe0>
c0028485:	85 db                	test   ebx,ebx
c0028487:	75 0a                	jne    c0028493 <__truncdfsf2+0x50>
c0028489:	c1 fa 17             	sar    edx,0x17
c002848c:	30 d2                	xor    dl,dl
c002848e:	e9 84 00 00 00       	jmp    c0028517 <__truncdfsf2+0xd4>
c0028493:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028499:	83 fe 83             	cmp    esi,0xffffff83
c002849c:	7d 4b                	jge    c00284e9 <__truncdfsf2+0xa6>
c002849e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00284a3:	29 f1                	sub    ecx,esi
c00284a5:	83 f9 1f             	cmp    ecx,0x1f
c00284a8:	7f 6b                	jg     c0028515 <__truncdfsf2+0xd2>
c00284aa:	0d 00 00 00 80       	or     eax,0x80000000
c00284af:	89 c3                	mov    ebx,eax
c00284b1:	d3 eb                	shr    ebx,cl
c00284b3:	be 01 00 00 00       	mov    esi,0x1
c00284b8:	d3 e6                	shl    esi,cl
c00284ba:	4e                   	dec    esi
c00284bb:	21 f0                	and    eax,esi
c00284bd:	09 f8                	or     eax,edi
c00284bf:	0f 95 c0             	setne  al
c00284c2:	0f b6 c0             	movzx  eax,al
c00284c5:	09 c3                	or     ebx,eax
c00284c7:	89 d9                	mov    ecx,ebx
c00284c9:	c1 e9 08             	shr    ecx,0x8
c00284cc:	f6 c3 7f             	test   bl,0x7f
c00284cf:	0f 95 c0             	setne  al
c00284d2:	09 c8                	or     eax,ecx
c00284d4:	83 e0 01             	and    eax,0x1
c00284d7:	c1 eb 07             	shr    ebx,0x7
c00284da:	21 c3                	and    ebx,eax
c00284dc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00284e2:	09 d1                	or     ecx,edx
c00284e4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00284e7:	eb 76                	jmp    c002855f <__truncdfsf2+0x11c>
c00284e9:	83 c6 80             	add    esi,0xffffff80
c00284ec:	7e 1d                	jle    c002850b <__truncdfsf2+0xc8>
c00284ee:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00284f4:	75 0b                	jne    c0028501 <__truncdfsf2+0xbe>
c00284f6:	09 f8                	or     eax,edi
c00284f8:	74 09                	je     c0028503 <__truncdfsf2+0xc0>
c00284fa:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00284ff:	eb 02                	jmp    c0028503 <__truncdfsf2+0xc0>
c0028501:	31 c0                	xor    eax,eax
c0028503:	c1 fa 17             	sar    edx,0x17
c0028506:	80 ca ff             	or     dl,0xff
c0028509:	eb 0e                	jmp    c0028519 <__truncdfsf2+0xd6>
c002850b:	c1 fa 1f             	sar    edx,0x1f
c002850e:	c1 e2 08             	shl    edx,0x8
c0028511:	09 ca                	or     edx,ecx
c0028513:	eb 04                	jmp    c0028519 <__truncdfsf2+0xd6>
c0028515:	31 d2                	xor    edx,edx
c0028517:	31 c0                	xor    eax,eax
c0028519:	c1 e2 17             	shl    edx,0x17
c002851c:	c1 e8 08             	shr    eax,0x8
c002851f:	09 d0                	or     eax,edx
c0028521:	eb 3c                	jmp    c002855f <__truncdfsf2+0x11c>
c0028523:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028529:	89 ca                	mov    edx,ecx
c002852b:	c1 fa 0b             	sar    edx,0xb
c002852e:	c1 e2 08             	shl    edx,0x8
c0028531:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028534:	31 db                	xor    ebx,ebx
c0028536:	85 ff                	test   edi,edi
c0028538:	0f 95 c3             	setne  bl
c002853b:	09 d8                	or     eax,ebx
c002853d:	89 c3                	mov    ebx,eax
c002853f:	c1 eb 08             	shr    ebx,0x8
c0028542:	a8 7f                	test   al,0x7f
c0028544:	0f 95 c2             	setne  dl
c0028547:	89 d6                	mov    esi,edx
c0028549:	09 de                	or     esi,ebx
c002854b:	83 e6 01             	and    esi,0x1
c002854e:	c1 e8 07             	shr    eax,0x7
c0028551:	21 f0                	and    eax,esi
c0028553:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028556:	09 ca                	or     edx,ecx
c0028558:	c1 e2 17             	shl    edx,0x17
c002855b:	09 da                	or     edx,ebx
c002855d:	01 d0                	add    eax,edx
c002855f:	83 c4 0c             	add    esp,0xc
c0028562:	5b                   	pop    ebx
c0028563:	5e                   	pop    esi
c0028564:	5f                   	pop    edi
c0028565:	5d                   	pop    ebp
c0028566:	c3                   	ret    

c0028567 <__extendsfdf2>:
c0028567:	55                   	push   ebp
c0028568:	89 e5                	mov    ebp,esp
c002856a:	57                   	push   edi
c002856b:	56                   	push   esi
c002856c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002856f:	89 d1                	mov    ecx,edx
c0028571:	c1 f9 17             	sar    ecx,0x17
c0028574:	c1 e2 08             	shl    edx,0x8
c0028577:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002857d:	89 c8                	mov    eax,ecx
c002857f:	80 e4 f8             	and    ah,0xf8
c0028582:	8d 71 01             	lea    esi,[ecx+0x1]
c0028585:	81 e6 fe 00 00 00    	and    esi,0xfe
c002858b:	75 27                	jne    c00285b4 <__extendsfdf2+0x4d>
c002858d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028593:	75 18                	jne    c00285ad <__extendsfdf2+0x46>
c0028595:	85 d2                	test   edx,edx
c0028597:	74 20                	je     c00285b9 <__extendsfdf2+0x52>
c0028599:	41                   	inc    ecx
c002859a:	01 d2                	add    edx,edx
c002859c:	79 fb                	jns    c0028599 <__extendsfdf2+0x32>
c002859e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00285a4:	29 c8                	sub    eax,ecx
c00285a6:	05 81 03 00 00       	add    eax,0x381
c00285ab:	eb 0c                	jmp    c00285b9 <__extendsfdf2+0x52>
c00285ad:	05 00 07 00 00       	add    eax,0x700
c00285b2:	eb 05                	jmp    c00285b9 <__extendsfdf2+0x52>
c00285b4:	05 80 03 00 00       	add    eax,0x380
c00285b9:	c1 e0 14             	shl    eax,0x14
c00285bc:	89 c1                	mov    ecx,eax
c00285be:	89 d0                	mov    eax,edx
c00285c0:	c1 e8 0b             	shr    eax,0xb
c00285c3:	09 c1                	or     ecx,eax
c00285c5:	c1 e2 15             	shl    edx,0x15
c00285c8:	89 d0                	mov    eax,edx
c00285ca:	89 ca                	mov    edx,ecx
c00285cc:	5e                   	pop    esi
c00285cd:	5f                   	pop    edi
c00285ce:	5d                   	pop    ebp
c00285cf:	c3                   	ret    

c00285d0 <fabs>:
c00285d0:	83 ec 0c             	sub    esp,0xc
c00285d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00285da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00285de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00285e7:	dd 04 24             	fld    QWORD PTR [esp]
c00285ea:	83 c4 0c             	add    esp,0xc
c00285ed:	c3                   	ret    
c00285ee:	66 90                	xchg   ax,ax

c00285f0 <lrint>:
c00285f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00285f4:	83 ec 04             	sub    esp,0x4
c00285f7:	db 1c 24             	fistp  DWORD PTR [esp]
c00285fa:	58                   	pop    eax
c00285fb:	c3                   	ret    

c00285fc <lrintf>:
c00285fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028600:	83 ec 04             	sub    esp,0x4
c0028603:	db 1c 24             	fistp  DWORD PTR [esp]
c0028606:	58                   	pop    eax
c0028607:	c3                   	ret    

Disassembly of section .init:

c0028608 <_init>:
c0028608:	55                   	push   ebp
c0028609:	89 e5                	mov    ebp,esp
c002860b:	e8 08 7b fd ff       	call   c0000118 <frame_dummy>
c0028610:	e8 63 e0 ff ff       	call   c0026678 <__do_global_ctors_aux>
c0028615:	5d                   	pop    ebp
c0028616:	c3                   	ret    

Disassembly of section .fini:

c0028617 <_fini>:
c0028617:	55                   	push   ebp
c0028618:	89 e5                	mov    ebp,esp
c002861a:	e8 89 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002861f:	5d                   	pop    ebp
c0028620:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028622 <Computer::~Computer()>:
c0028622:	83 ec 0c             	sub    esp,0xc
c0028625:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c002862a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862e:	89 10                	mov    DWORD PTR [eax],edx
c0028630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028634:	83 ec 0c             	sub    esp,0xc
c0028637:	50                   	push   eax
c0028638:	e8 81 bb fe ff       	call   c00141be <Device::~Device()>
c002863d:	83 c4 10             	add    esp,0x10
c0028640:	90                   	nop
c0028641:	83 c4 0c             	add    esp,0xc
c0028644:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028646 <Computer::~Computer()>:
c0028646:	83 ec 0c             	sub    esp,0xc
c0028649:	83 ec 0c             	sub    esp,0xc
c002864c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028650:	e8 cd ff ff ff       	call   c0028622 <Computer::~Computer()>
c0028655:	83 c4 10             	add    esp,0x10
c0028658:	83 ec 08             	sub    esp,0x8
c002865b:	68 ec 01 00 00       	push   0x1ec
c0028660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028664:	e8 7d a7 fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028669:	83 c4 10             	add    esp,0x10
c002866c:	83 c4 0c             	add    esp,0xc
c002866f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028670 <idleCommon()>:
c0028670:	83 ec 0c             	sub    esp,0xc
c0028673:	e8 ed 56 ff ff       	call   c001dd65 <lockScheduler()>
c0028678:	e8 23 5a ff ff       	call   c001e0a0 <schedule()>
c002867d:	83 c4 0c             	add    esp,0xc
c0028680:	e9 e2 56 ff ff       	jmp    c001dd67 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028686 <LinkedList<UnixFile>::~LinkedList()>:
c0028686:	90                   	nop
c0028687:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028688 <LinkedList<UnixFile>::LinkedList()>:
c0028688:	83 ec 0c             	sub    esp,0xc
c002868b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028699:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00286cb:	83 ec 0c             	sub    esp,0xc
c00286ce:	68 32 a4 02 c0       	push   0xc002a432
c00286d3:	e8 ee a7 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00286d8:	83 c4 10             	add    esp,0x10
c00286db:	90                   	nop
c00286dc:	83 c4 0c             	add    esp,0xc
c00286df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00286e0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00286e0:	83 ec 0c             	sub    esp,0xc
c00286e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286e8:	75 10                	jne    c00286fa <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00286ea:	83 ec 0c             	sub    esp,0xc
c00286ed:	68 4c a4 02 c0       	push   0xc002a44c
c00286f2:	e8 74 1e ff ff       	call   c001a56b <Krnl::panic(char const*)>
c00286f7:	83 c4 10             	add    esp,0x10
c00286fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028700:	85 c0                	test   eax,eax
c0028702:	74 34                	je     c0028738 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028708:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002870b:	85 c0                	test   eax,eax
c002870d:	74 29                	je     c0028738 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002870f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028713:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028716:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002871a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002871d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028721:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028725:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002872f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028736:	eb 65                	jmp    c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873c:	8b 00                	mov    eax,DWORD PTR [eax]
c002873e:	85 c0                	test   eax,eax
c0028740:	75 4b                	jne    c002878d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028749:	85 c0                	test   eax,eax
c002874b:	75 40                	jne    c002878d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002874d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028751:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028755:	89 10                	mov    DWORD PTR [eax],edx
c0028757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002875f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028766:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028769:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028774:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028777:	85 c0                	test   eax,eax
c0028779:	74 22                	je     c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002877b:	83 ec 0c             	sub    esp,0xc
c002877e:	68 6e a4 02 c0       	push   0xc002a46e
c0028783:	e8 e3 1d ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0028788:	83 c4 10             	add    esp,0x10
c002878b:	eb 10                	jmp    c002879d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002878d:	83 ec 0c             	sub    esp,0xc
c0028790:	68 78 a4 02 c0       	push   0xc002a478
c0028795:	e8 d1 1d ff ff       	call   c001a56b <Krnl::panic(char const*)>
c002879a:	83 c4 10             	add    esp,0x10
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287a4:	8d 50 01             	lea    edx,[eax+0x1]
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287ae:	90                   	nop
c00287af:	83 c4 0c             	add    esp,0xc
c00287b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00287b4 <LinkedList<UnixFile>::getFirstElement()>:
c00287b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00287bc <LinkedList<UnixFile>::removeFirst()>:
c00287bc:	83 ec 0c             	sub    esp,0xc
c00287bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c5:	85 c0                	test   eax,eax
c00287c7:	75 12                	jne    c00287db <LinkedList<UnixFile>::removeFirst()+0x1f>
c00287c9:	83 ec 0c             	sub    esp,0xc
c00287cc:	68 84 a4 02 c0       	push   0xc002a484
c00287d1:	e8 95 1d ff ff       	call   c001a56b <Krnl::panic(char const*)>
c00287d6:	83 c4 10             	add    esp,0x10
c00287d9:	eb 7e                	jmp    c0028859 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00287db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287e5:	85 c0                	test   eax,eax
c00287e7:	74 10                	je     c00287f9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00287e9:	83 ec 0c             	sub    esp,0xc
c00287ec:	68 cf a4 02 c0       	push   0xc002a4cf
c00287f1:	e8 75 1d ff ff       	call   c001a56b <Krnl::panic(char const*)>
c00287f6:	83 c4 10             	add    esp,0x10
c00287f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028802:	85 c0                	test   eax,eax
c0028804:	75 33                	jne    c0028839 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002881b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028822:	83 f8 01             	cmp    eax,0x1
c0028825:	74 21                	je     c0028848 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028827:	83 ec 0c             	sub    esp,0xc
c002882a:	68 a8 a4 02 c0       	push   0xc002a4a8
c002882f:	e8 37 1d ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0028834:	83 c4 10             	add    esp,0x10
c0028837:	eb 0f                	jmp    c0028848 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883d:	8b 00                	mov    eax,DWORD PTR [eax]
c002883f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	89 10                	mov    DWORD PTR [eax],edx
c0028848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002884f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028859:	83 c4 0c             	add    esp,0xc
c002885c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002885e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002885e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028862:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028865:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028866 <DriverlessDevice::~DriverlessDevice()>:
c0028866:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c002886b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002886f:	89 10                	mov    DWORD PTR [eax],edx
c0028871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028875:	50                   	push   eax
c0028876:	e8 43 b9 fe ff       	call   c00141be <Device::~Device()>
c002887b:	83 c4 04             	add    esp,0x4
c002887e:	90                   	nop
c002887f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028880 <DriverlessDevice::~DriverlessDevice()>:
c0028880:	83 ec 0c             	sub    esp,0xc
c0028883:	83 ec 0c             	sub    esp,0xc
c0028886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002888a:	e8 d7 ff ff ff       	call   c0028866 <DriverlessDevice::~DriverlessDevice()>
c002888f:	83 c4 10             	add    esp,0x10
c0028892:	83 ec 08             	sub    esp,0x8
c0028895:	68 58 01 00 00       	push   0x158
c002889a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002889e:	e8 43 a5 fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00288a3:	83 c4 10             	add    esp,0x10
c00288a6:	83 c4 0c             	add    esp,0xc
c00288a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00288aa <LinkedList<Device>::addElement(Device*)>:
c00288aa:	83 ec 0c             	sub    esp,0xc
c00288ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288b2:	75 10                	jne    c00288c4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00288b4:	83 ec 0c             	sub    esp,0xc
c00288b7:	68 4c a4 02 c0       	push   0xc002a44c
c00288bc:	e8 aa 1c ff ff       	call   c001a56b <Krnl::panic(char const*)>
c00288c1:	83 c4 10             	add    esp,0x10
c00288c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ca:	85 c0                	test   eax,eax
c00288cc:	74 3a                	je     c0028908 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288d5:	85 c0                	test   eax,eax
c00288d7:	74 2f                	je     c0028908 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288e4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00288ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288fc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028906:	eb 68                	jmp    c0028970 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890c:	8b 00                	mov    eax,DWORD PTR [eax]
c002890e:	85 c0                	test   eax,eax
c0028910:	75 4e                	jne    c0028960 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028919:	85 c0                	test   eax,eax
c002891b:	75 43                	jne    c0028960 <LinkedList<Device>::addElement(Device*)+0xb6>
c002891d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028921:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028925:	89 10                	mov    DWORD PTR [eax],edx
c0028927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002892f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028939:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028947:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002894a:	85 c0                	test   eax,eax
c002894c:	74 22                	je     c0028970 <LinkedList<Device>::addElement(Device*)+0xc6>
c002894e:	83 ec 0c             	sub    esp,0xc
c0028951:	68 6e a4 02 c0       	push   0xc002a46e
c0028956:	e8 10 1c ff ff       	call   c001a56b <Krnl::panic(char const*)>
c002895b:	83 c4 10             	add    esp,0x10
c002895e:	eb 10                	jmp    c0028970 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028960:	83 ec 0c             	sub    esp,0xc
c0028963:	68 78 a4 02 c0       	push   0xc002a478
c0028968:	e8 fe 1b ff ff       	call   c001a56b <Krnl::panic(char const*)>
c002896d:	83 c4 10             	add    esp,0x10
c0028970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028974:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028977:	8d 50 01             	lea    edx,[eax+0x1]
c002897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028981:	90                   	nop
c0028982:	83 c4 0c             	add    esp,0xc
c0028985:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028986 <LinkedList<Device>::LinkedList()>:
c0028986:	83 ec 0c             	sub    esp,0xc
c0028989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002899e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289c9:	83 ec 0c             	sub    esp,0xc
c00289cc:	68 32 a4 02 c0       	push   0xc002a432
c00289d1:	e8 f0 a4 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c00289d6:	83 c4 10             	add    esp,0x10
c00289d9:	90                   	nop
c00289da:	83 c4 0c             	add    esp,0xc
c00289dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00289de <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00289de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00289e6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00289e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ec:	85 c0                	test   eax,eax
c00289ee:	75 0e                	jne    c00289fe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f7:	85 c0                	test   eax,eax
c00289f9:	75 03                	jne    c00289fe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289fb:	b0 01                	mov    al,0x1
c00289fd:	c3                   	ret    
c00289fe:	b0 00                	mov    al,0x0
c0028a00:	90                   	nop
c0028a01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a02:	83 ec 0c             	sub    esp,0xc
c0028a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a09:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a0b:	85 c0                	test   eax,eax
c0028a0d:	75 15                	jne    c0028a24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a0f:	83 ec 0c             	sub    esp,0xc
c0028a12:	68 84 a4 02 c0       	push   0xc002a484
c0028a17:	e8 4f 1b ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0028a1c:	83 c4 10             	add    esp,0x10
c0028a1f:	e9 88 00 00 00       	jmp    c0028aac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a2e:	85 c0                	test   eax,eax
c0028a30:	0f 95 c0             	setne  al
c0028a33:	84 c0                	test   al,al
c0028a35:	74 10                	je     c0028a47 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a37:	83 ec 0c             	sub    esp,0xc
c0028a3a:	68 cf a4 02 c0       	push   0xc002a4cf
c0028a3f:	e8 27 1b ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0028a44:	83 c4 10             	add    esp,0x10
c0028a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a50:	85 c0                	test   eax,eax
c0028a52:	0f 94 c0             	sete   al
c0028a55:	84 c0                	test   al,al
c0028a57:	74 33                	je     c0028a8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a75:	83 f8 01             	cmp    eax,0x1
c0028a78:	74 21                	je     c0028a9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a7a:	83 ec 0c             	sub    esp,0xc
c0028a7d:	68 a8 a4 02 c0       	push   0xc002a4a8
c0028a82:	e8 e4 1a ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0028a87:	83 c4 10             	add    esp,0x10
c0028a8a:	eb 0f                	jmp    c0028a9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a92:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a99:	89 10                	mov    DWORD PTR [eax],edx
c0028a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028aac:	83 c4 0c             	add    esp,0xc
c0028aaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028ab0:	83 ec 0c             	sub    esp,0xc
c0028ab3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028ab8:	75 10                	jne    c0028aca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028aba:	83 ec 0c             	sub    esp,0xc
c0028abd:	68 4c a4 02 c0       	push   0xc002a44c
c0028ac2:	e8 a4 1a ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad0:	85 c0                	test   eax,eax
c0028ad2:	74 34                	je     c0028b08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028adb:	85 c0                	test   eax,eax
c0028add:	74 29                	je     c0028b08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ae6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aea:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028af5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aff:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b06:	eb 65                	jmp    c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b0e:	85 c0                	test   eax,eax
c0028b10:	75 4b                	jne    c0028b5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b19:	85 c0                	test   eax,eax
c0028b1b:	75 40                	jne    c0028b5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b25:	89 10                	mov    DWORD PTR [eax],edx
c0028b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b39:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b47:	85 c0                	test   eax,eax
c0028b49:	74 22                	je     c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b4b:	83 ec 0c             	sub    esp,0xc
c0028b4e:	68 6e a4 02 c0       	push   0xc002a46e
c0028b53:	e8 13 1a ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0028b58:	83 c4 10             	add    esp,0x10
c0028b5b:	eb 10                	jmp    c0028b6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b5d:	83 ec 0c             	sub    esp,0xc
c0028b60:	68 78 a4 02 c0       	push   0xc002a478
c0028b65:	e8 01 1a ff ff       	call   c001a56b <Krnl::panic(char const*)>
c0028b6a:	83 c4 10             	add    esp,0x10
c0028b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b74:	8d 50 01             	lea    edx,[eax+0x1]
c0028b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b7e:	90                   	nop
c0028b7f:	83 c4 0c             	add    esp,0xc
c0028b82:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028b84 <ACPI::~ACPI()>:
c0028b84:	83 ec 0c             	sub    esp,0xc
c0028b87:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c0028b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b90:	89 10                	mov    DWORD PTR [eax],edx
c0028b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b96:	83 ec 0c             	sub    esp,0xc
c0028b99:	50                   	push   eax
c0028b9a:	e8 1f b6 fe ff       	call   c00141be <Device::~Device()>
c0028b9f:	83 c4 10             	add    esp,0x10
c0028ba2:	90                   	nop
c0028ba3:	83 c4 0c             	add    esp,0xc
c0028ba6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ba8 <ACPI::~ACPI()>:
c0028ba8:	83 ec 0c             	sub    esp,0xc
c0028bab:	83 ec 0c             	sub    esp,0xc
c0028bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bb2:	e8 cd ff ff ff       	call   c0028b84 <ACPI::~ACPI()>
c0028bb7:	83 c4 10             	add    esp,0x10
c0028bba:	83 ec 08             	sub    esp,0x8
c0028bbd:	68 68 12 00 00       	push   0x1268
c0028bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc6:	e8 1b a2 fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028bcb:	83 c4 10             	add    esp,0x10
c0028bce:	83 c4 0c             	add    esp,0xc
c0028bd1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028bd2 <CPU::~CPU()>:
c0028bd2:	83 ec 0c             	sub    esp,0xc
c0028bd5:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c0028bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bde:	89 10                	mov    DWORD PTR [eax],edx
c0028be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be4:	83 ec 0c             	sub    esp,0xc
c0028be7:	50                   	push   eax
c0028be8:	e8 d1 b5 fe ff       	call   c00141be <Device::~Device()>
c0028bed:	83 c4 10             	add    esp,0x10
c0028bf0:	90                   	nop
c0028bf1:	83 c4 0c             	add    esp,0xc
c0028bf4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028bf6 <CPU::~CPU()>:
c0028bf6:	83 ec 0c             	sub    esp,0xc
c0028bf9:	83 ec 0c             	sub    esp,0xc
c0028bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c00:	e8 cd ff ff ff       	call   c0028bd2 <CPU::~CPU()>
c0028c05:	83 c4 10             	add    esp,0x10
c0028c08:	83 ec 08             	sub    esp,0x8
c0028c0b:	68 98 11 00 00       	push   0x1198
c0028c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c14:	e8 cd a1 fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028c19:	83 c4 10             	add    esp,0x10
c0028c1c:	83 c4 0c             	add    esp,0xc
c0028c1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028c20 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028c20:	90                   	nop
c0028c21:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028c22 <ThreadControlBlock::ThreadControlBlock()>:
c0028c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c26:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c31:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c3c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c47:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c52:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c5a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c5e:	90                   	nop
c0028c5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028c60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028c60:	83 ec 0c             	sub    esp,0xc
c0028c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ca3:	83 ec 0c             	sub    esp,0xc
c0028ca6:	68 32 a4 02 c0       	push   0xc002a432
c0028cab:	e8 16 a2 fe ff       	call   c0012ec6 <Dbg::kprintf(char const*, ...)>
c0028cb0:	83 c4 10             	add    esp,0x10
c0028cb3:	90                   	nop
c0028cb4:	83 c4 0c             	add    esp,0xc
c0028cb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028cb8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028cb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cbc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028cbf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028cc0 <Vm::_FPUState::_FPUState()>:
c0028cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028ccb:	90                   	nop
c0028ccc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028cce <PCI::~PCI()>:
c0028cce:	83 ec 0c             	sub    esp,0xc
c0028cd1:	ba cc c9 02 c0       	mov    edx,0xc002c9cc
c0028cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cda:	89 10                	mov    DWORD PTR [eax],edx
c0028cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce0:	83 ec 0c             	sub    esp,0xc
c0028ce3:	50                   	push   eax
c0028ce4:	e8 ad ae fe ff       	call   c0013b96 <Bus::~Bus()>
c0028ce9:	83 c4 10             	add    esp,0x10
c0028cec:	90                   	nop
c0028ced:	83 c4 0c             	add    esp,0xc
c0028cf0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028cf2 <PCI::~PCI()>:
c0028cf2:	83 ec 0c             	sub    esp,0xc
c0028cf5:	83 ec 0c             	sub    esp,0xc
c0028cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cfc:	e8 cd ff ff ff       	call   c0028cce <PCI::~PCI()>
c0028d01:	83 c4 10             	add    esp,0x10
c0028d04:	83 ec 08             	sub    esp,0x8
c0028d07:	68 58 01 00 00       	push   0x158
c0028d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d10:	e8 d1 a0 fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028d15:	83 c4 10             	add    esp,0x10
c0028d18:	83 c4 0c             	add    esp,0xc
c0028d1b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d1c <IDE::~IDE()>:
c0028d1c:	83 ec 0c             	sub    esp,0xc
c0028d1f:	ba 30 cc 02 c0       	mov    edx,0xc002cc30
c0028d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d28:	89 10                	mov    DWORD PTR [eax],edx
c0028d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2e:	83 ec 0c             	sub    esp,0xc
c0028d31:	50                   	push   eax
c0028d32:	e8 77 b9 fe ff       	call   c00146ae <HardDiskController::~HardDiskController()>
c0028d37:	83 c4 10             	add    esp,0x10
c0028d3a:	90                   	nop
c0028d3b:	83 c4 0c             	add    esp,0xc
c0028d3e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d40 <IDE::~IDE()>:
c0028d40:	83 ec 0c             	sub    esp,0xc
c0028d43:	83 ec 0c             	sub    esp,0xc
c0028d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4a:	e8 cd ff ff ff       	call   c0028d1c <IDE::~IDE()>
c0028d4f:	83 c4 10             	add    esp,0x10
c0028d52:	83 ec 08             	sub    esp,0x8
c0028d55:	68 70 02 00 00       	push   0x270
c0028d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d5e:	e8 83 a0 fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028d63:	83 c4 10             	add    esp,0x10
c0028d66:	83 c4 0c             	add    esp,0xc
c0028d69:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028d6a <SATABus::~SATABus()>:
c0028d6a:	83 ec 0c             	sub    esp,0xc
c0028d6d:	ba 10 cd 02 c0       	mov    edx,0xc002cd10
c0028d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d76:	89 10                	mov    DWORD PTR [eax],edx
c0028d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7c:	83 ec 0c             	sub    esp,0xc
c0028d7f:	50                   	push   eax
c0028d80:	e8 29 b9 fe ff       	call   c00146ae <HardDiskController::~HardDiskController()>
c0028d85:	83 c4 10             	add    esp,0x10
c0028d88:	90                   	nop
c0028d89:	83 c4 0c             	add    esp,0xc
c0028d8c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028d8e <SATABus::~SATABus()>:
c0028d8e:	83 ec 0c             	sub    esp,0xc
c0028d91:	83 ec 0c             	sub    esp,0xc
c0028d94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d98:	e8 cd ff ff ff       	call   c0028d6a <SATABus::~SATABus()>
c0028d9d:	83 c4 10             	add    esp,0x10
c0028da0:	83 ec 08             	sub    esp,0x8
c0028da3:	68 64 01 00 00       	push   0x164
c0028da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dac:	e8 35 a0 fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028db1:	83 c4 10             	add    esp,0x10
c0028db4:	83 c4 0c             	add    esp,0xc
c0028db7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028db8 <ATA::~ATA()>:
c0028db8:	83 ec 0c             	sub    esp,0xc
c0028dbb:	ba 5c cd 02 c0       	mov    edx,0xc002cd5c
c0028dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc4:	89 10                	mov    DWORD PTR [eax],edx
c0028dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dca:	83 ec 0c             	sub    esp,0xc
c0028dcd:	50                   	push   eax
c0028dce:	e8 cd b9 fe ff       	call   c00147a0 <PhysicalDisk::~PhysicalDisk()>
c0028dd3:	83 c4 10             	add    esp,0x10
c0028dd6:	90                   	nop
c0028dd7:	83 c4 0c             	add    esp,0xc
c0028dda:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028ddc <ATA::~ATA()>:
c0028ddc:	83 ec 0c             	sub    esp,0xc
c0028ddf:	83 ec 0c             	sub    esp,0xc
c0028de2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de6:	e8 cd ff ff ff       	call   c0028db8 <ATA::~ATA()>
c0028deb:	83 c4 10             	add    esp,0x10
c0028dee:	83 ec 08             	sub    esp,0x8
c0028df1:	68 7c 01 00 00       	push   0x17c
c0028df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfa:	e8 e7 9f fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028dff:	83 c4 10             	add    esp,0x10
c0028e02:	83 c4 0c             	add    esp,0xc
c0028e05:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e06 <ATAPI::~ATAPI()>:
c0028e06:	83 ec 0c             	sub    esp,0xc
c0028e09:	ba 94 cd 02 c0       	mov    edx,0xc002cd94
c0028e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e12:	89 10                	mov    DWORD PTR [eax],edx
c0028e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e18:	83 ec 0c             	sub    esp,0xc
c0028e1b:	50                   	push   eax
c0028e1c:	e8 7f b9 fe ff       	call   c00147a0 <PhysicalDisk::~PhysicalDisk()>
c0028e21:	83 c4 10             	add    esp,0x10
c0028e24:	90                   	nop
c0028e25:	83 c4 0c             	add    esp,0xc
c0028e28:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028e2a <ATAPI::~ATAPI()>:
c0028e2a:	83 ec 0c             	sub    esp,0xc
c0028e2d:	83 ec 0c             	sub    esp,0xc
c0028e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e34:	e8 cd ff ff ff       	call   c0028e06 <ATAPI::~ATAPI()>
c0028e39:	83 c4 10             	add    esp,0x10
c0028e3c:	83 ec 08             	sub    esp,0x8
c0028e3f:	68 80 01 00 00       	push   0x180
c0028e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e48:	e8 99 9f fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028e4d:	83 c4 10             	add    esp,0x10
c0028e50:	83 c4 0c             	add    esp,0xc
c0028e53:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e54 <SATA::~SATA()>:
c0028e54:	83 ec 0c             	sub    esp,0xc
c0028e57:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	89 10                	mov    DWORD PTR [eax],edx
c0028e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e66:	83 ec 0c             	sub    esp,0xc
c0028e69:	50                   	push   eax
c0028e6a:	e8 31 b9 fe ff       	call   c00147a0 <PhysicalDisk::~PhysicalDisk()>
c0028e6f:	83 c4 10             	add    esp,0x10
c0028e72:	90                   	nop
c0028e73:	83 c4 0c             	add    esp,0xc
c0028e76:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028e78 <SATA::~SATA()>:
c0028e78:	83 ec 0c             	sub    esp,0xc
c0028e7b:	83 ec 0c             	sub    esp,0xc
c0028e7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e82:	e8 cd ff ff ff       	call   c0028e54 <SATA::~SATA()>
c0028e87:	83 c4 10             	add    esp,0x10
c0028e8a:	83 ec 08             	sub    esp,0x8
c0028e8d:	68 7c 01 00 00       	push   0x17c
c0028e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e96:	e8 4b 9f fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028e9b:	83 c4 10             	add    esp,0x10
c0028e9e:	83 c4 0c             	add    esp,0xc
c0028ea1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ea2 <SATAPI::~SATAPI()>:
c0028ea2:	83 ec 0c             	sub    esp,0xc
c0028ea5:	ba 24 cf 02 c0       	mov    edx,0xc002cf24
c0028eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eae:	89 10                	mov    DWORD PTR [eax],edx
c0028eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb4:	83 ec 0c             	sub    esp,0xc
c0028eb7:	50                   	push   eax
c0028eb8:	e8 e3 b8 fe ff       	call   c00147a0 <PhysicalDisk::~PhysicalDisk()>
c0028ebd:	83 c4 10             	add    esp,0x10
c0028ec0:	90                   	nop
c0028ec1:	83 c4 0c             	add    esp,0xc
c0028ec4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028ec6 <SATAPI::~SATAPI()>:
c0028ec6:	83 ec 0c             	sub    esp,0xc
c0028ec9:	83 ec 0c             	sub    esp,0xc
c0028ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed0:	e8 cd ff ff ff       	call   c0028ea2 <SATAPI::~SATAPI()>
c0028ed5:	83 c4 10             	add    esp,0x10
c0028ed8:	83 ec 08             	sub    esp,0x8
c0028edb:	68 80 01 00 00       	push   0x180
c0028ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee4:	e8 fd 9e fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028ee9:	83 c4 10             	add    esp,0x10
c0028eec:	83 c4 0c             	add    esp,0xc
c0028eef:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028ef0 <AVX::~AVX()>:
c0028ef0:	83 ec 0c             	sub    esp,0xc
c0028ef3:	ba 64 cf 02 c0       	mov    edx,0xc002cf64
c0028ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efc:	89 10                	mov    DWORD PTR [eax],edx
c0028efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f02:	83 ec 0c             	sub    esp,0xc
c0028f05:	50                   	push   eax
c0028f06:	e8 19 b9 fe ff       	call   c0014824 <FPU::~FPU()>
c0028f0b:	83 c4 10             	add    esp,0x10
c0028f0e:	90                   	nop
c0028f0f:	83 c4 0c             	add    esp,0xc
c0028f12:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f14 <AVX::~AVX()>:
c0028f14:	83 ec 0c             	sub    esp,0xc
c0028f17:	83 ec 0c             	sub    esp,0xc
c0028f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f1e:	e8 cd ff ff ff       	call   c0028ef0 <AVX::~AVX()>
c0028f23:	83 c4 10             	add    esp,0x10
c0028f26:	83 ec 08             	sub    esp,0x8
c0028f29:	68 58 01 00 00       	push   0x158
c0028f2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f32:	e8 af 9e fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028f37:	83 c4 10             	add    esp,0x10
c0028f3a:	83 c4 0c             	add    esp,0xc
c0028f3d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f3e <MMX::~MMX()>:
c0028f3e:	83 ec 0c             	sub    esp,0xc
c0028f41:	ba a4 cf 02 c0       	mov    edx,0xc002cfa4
c0028f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4a:	89 10                	mov    DWORD PTR [eax],edx
c0028f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f50:	83 ec 0c             	sub    esp,0xc
c0028f53:	50                   	push   eax
c0028f54:	e8 cb b8 fe ff       	call   c0014824 <FPU::~FPU()>
c0028f59:	83 c4 10             	add    esp,0x10
c0028f5c:	90                   	nop
c0028f5d:	83 c4 0c             	add    esp,0xc
c0028f60:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028f62 <MMX::~MMX()>:
c0028f62:	83 ec 0c             	sub    esp,0xc
c0028f65:	83 ec 0c             	sub    esp,0xc
c0028f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f6c:	e8 cd ff ff ff       	call   c0028f3e <MMX::~MMX()>
c0028f71:	83 c4 10             	add    esp,0x10
c0028f74:	83 ec 08             	sub    esp,0x8
c0028f77:	68 58 01 00 00       	push   0x158
c0028f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f80:	e8 61 9e fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028f85:	83 c4 10             	add    esp,0x10
c0028f88:	83 c4 0c             	add    esp,0xc
c0028f8b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028f8c <SSE::~SSE()>:
c0028f8c:	83 ec 0c             	sub    esp,0xc
c0028f8f:	ba e4 cf 02 c0       	mov    edx,0xc002cfe4
c0028f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f98:	89 10                	mov    DWORD PTR [eax],edx
c0028f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9e:	83 ec 0c             	sub    esp,0xc
c0028fa1:	50                   	push   eax
c0028fa2:	e8 7d b8 fe ff       	call   c0014824 <FPU::~FPU()>
c0028fa7:	83 c4 10             	add    esp,0x10
c0028faa:	90                   	nop
c0028fab:	83 c4 0c             	add    esp,0xc
c0028fae:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028fb0 <SSE::~SSE()>:
c0028fb0:	83 ec 0c             	sub    esp,0xc
c0028fb3:	83 ec 0c             	sub    esp,0xc
c0028fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fba:	e8 cd ff ff ff       	call   c0028f8c <SSE::~SSE()>
c0028fbf:	83 c4 10             	add    esp,0x10
c0028fc2:	83 ec 08             	sub    esp,0x8
c0028fc5:	68 58 01 00 00       	push   0x158
c0028fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fce:	e8 13 9e fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0028fd3:	83 c4 10             	add    esp,0x10
c0028fd6:	83 c4 0c             	add    esp,0xc
c0028fd9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028fda <x87::~x87()>:
c0028fda:	83 ec 0c             	sub    esp,0xc
c0028fdd:	ba 24 d0 02 c0       	mov    edx,0xc002d024
c0028fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe6:	89 10                	mov    DWORD PTR [eax],edx
c0028fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fec:	83 ec 0c             	sub    esp,0xc
c0028fef:	50                   	push   eax
c0028ff0:	e8 2f b8 fe ff       	call   c0014824 <FPU::~FPU()>
c0028ff5:	83 c4 10             	add    esp,0x10
c0028ff8:	90                   	nop
c0028ff9:	83 c4 0c             	add    esp,0xc
c0028ffc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028ffe <x87::~x87()>:
c0028ffe:	83 ec 0c             	sub    esp,0xc
c0029001:	83 ec 0c             	sub    esp,0xc
c0029004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029008:	e8 cd ff ff ff       	call   c0028fda <x87::~x87()>
c002900d:	83 c4 10             	add    esp,0x10
c0029010:	83 ec 08             	sub    esp,0x8
c0029013:	68 58 01 00 00       	push   0x158
c0029018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901c:	e8 c5 9d fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0029021:	83 c4 10             	add    esp,0x10
c0029024:	83 c4 0c             	add    esp,0xc
c0029027:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029028 <IOAPIC::~IOAPIC()>:
c0029028:	83 ec 0c             	sub    esp,0xc
c002902b:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c0029030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029034:	89 10                	mov    DWORD PTR [eax],edx
c0029036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903a:	83 ec 0c             	sub    esp,0xc
c002903d:	50                   	push   eax
c002903e:	e8 7b b1 fe ff       	call   c00141be <Device::~Device()>
c0029043:	83 c4 10             	add    esp,0x10
c0029046:	90                   	nop
c0029047:	83 c4 0c             	add    esp,0xc
c002904a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002904c <IOAPIC::~IOAPIC()>:
c002904c:	83 ec 0c             	sub    esp,0xc
c002904f:	83 ec 0c             	sub    esp,0xc
c0029052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029056:	e8 cd ff ff ff       	call   c0029028 <IOAPIC::~IOAPIC()>
c002905b:	83 c4 10             	add    esp,0x10
c002905e:	83 ec 08             	sub    esp,0x8
c0029061:	68 68 01 00 00       	push   0x168
c0029066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906a:	e8 77 9d fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c002906f:	83 c4 10             	add    esp,0x10
c0029072:	83 c4 0c             	add    esp,0xc
c0029075:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029076 <APIC::~APIC()>:
c0029076:	83 ec 0c             	sub    esp,0xc
c0029079:	ba 34 d1 02 c0       	mov    edx,0xc002d134
c002907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029082:	89 10                	mov    DWORD PTR [eax],edx
c0029084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029088:	83 ec 0c             	sub    esp,0xc
c002908b:	50                   	push   eax
c002908c:	e8 5d bc fe ff       	call   c0014cee <InterruptController::~InterruptController()>
c0029091:	83 c4 10             	add    esp,0x10
c0029094:	90                   	nop
c0029095:	83 c4 0c             	add    esp,0xc
c0029098:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002909a <APIC::~APIC()>:
c002909a:	83 ec 0c             	sub    esp,0xc
c002909d:	83 ec 0c             	sub    esp,0xc
c00290a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a4:	e8 cd ff ff ff       	call   c0029076 <APIC::~APIC()>
c00290a9:	83 c4 10             	add    esp,0x10
c00290ac:	83 ec 08             	sub    esp,0x8
c00290af:	68 58 21 00 00       	push   0x2158
c00290b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b8:	e8 29 9d fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00290bd:	83 c4 10             	add    esp,0x10
c00290c0:	83 c4 0c             	add    esp,0xc
c00290c3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00290c4 <PIC::~PIC()>:
c00290c4:	83 ec 0c             	sub    esp,0xc
c00290c7:	ba cc d1 02 c0       	mov    edx,0xc002d1cc
c00290cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d0:	89 10                	mov    DWORD PTR [eax],edx
c00290d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d6:	83 ec 0c             	sub    esp,0xc
c00290d9:	50                   	push   eax
c00290da:	e8 0f bc fe ff       	call   c0014cee <InterruptController::~InterruptController()>
c00290df:	83 c4 10             	add    esp,0x10
c00290e2:	90                   	nop
c00290e3:	83 c4 0c             	add    esp,0xc
c00290e6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00290e8 <PIC::~PIC()>:
c00290e8:	83 ec 0c             	sub    esp,0xc
c00290eb:	83 ec 0c             	sub    esp,0xc
c00290ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f2:	e8 cd ff ff ff       	call   c00290c4 <PIC::~PIC()>
c00290f7:	83 c4 10             	add    esp,0x10
c00290fa:	83 ec 08             	sub    esp,0x8
c00290fd:	68 58 21 00 00       	push   0x2158
c0029102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029106:	e8 db 9c fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c002910b:	83 c4 10             	add    esp,0x10
c002910e:	83 c4 0c             	add    esp,0xc
c0029111:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029112 <APICTimer::~APICTimer()>:
c0029112:	83 ec 0c             	sub    esp,0xc
c0029115:	ba 20 d2 02 c0       	mov    edx,0xc002d220
c002911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911e:	89 10                	mov    DWORD PTR [eax],edx
c0029120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029124:	83 ec 0c             	sub    esp,0xc
c0029127:	50                   	push   eax
c0029128:	e8 0d db fe ff       	call   c0016c3a <Timer::~Timer()>
c002912d:	83 c4 10             	add    esp,0x10
c0029130:	90                   	nop
c0029131:	83 c4 0c             	add    esp,0xc
c0029134:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029136 <APICTimer::~APICTimer()>:
c0029136:	83 ec 0c             	sub    esp,0xc
c0029139:	83 ec 0c             	sub    esp,0xc
c002913c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029140:	e8 cd ff ff ff       	call   c0029112 <APICTimer::~APICTimer()>
c0029145:	83 c4 10             	add    esp,0x10
c0029148:	83 ec 08             	sub    esp,0x8
c002914b:	68 60 01 00 00       	push   0x160
c0029150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029154:	e8 8d 9c fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c0029159:	83 c4 10             	add    esp,0x10
c002915c:	83 c4 0c             	add    esp,0xc
c002915f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029160 <PIT::~PIT()>:
c0029160:	83 ec 0c             	sub    esp,0xc
c0029163:	ba 70 d2 02 c0       	mov    edx,0xc002d270
c0029168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916c:	89 10                	mov    DWORD PTR [eax],edx
c002916e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029172:	83 ec 0c             	sub    esp,0xc
c0029175:	50                   	push   eax
c0029176:	e8 bf da fe ff       	call   c0016c3a <Timer::~Timer()>
c002917b:	83 c4 10             	add    esp,0x10
c002917e:	90                   	nop
c002917f:	83 c4 0c             	add    esp,0xc
c0029182:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029184 <PIT::~PIT()>:
c0029184:	83 ec 0c             	sub    esp,0xc
c0029187:	83 ec 0c             	sub    esp,0xc
c002918a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002918e:	e8 cd ff ff ff       	call   c0029160 <PIT::~PIT()>
c0029193:	83 c4 10             	add    esp,0x10
c0029196:	83 ec 08             	sub    esp,0x8
c0029199:	68 5c 01 00 00       	push   0x15c
c002919e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a2:	e8 3f 9c fe ff       	call   c0012de6 <operator delete(void*, unsigned long)>
c00291a7:	83 c4 10             	add    esp,0x10
c00291aa:	83 c4 0c             	add    esp,0xc
c00291ad:	c3                   	ret    
