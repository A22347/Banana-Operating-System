
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 38 02 c0       	mov    eax,0xc00238e4
c0000025:	3d e4 38 02 c0       	cmp    eax,0xc00238e4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 38 02 c0       	push   0xc00238e4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 38 02 c0       	mov    eax,0xc00238e4
c0000051:	2d e4 38 02 c0       	sub    eax,0xc00238e4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 38 02 c0       	push   0xc00238e4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 9c ff 01 c0       	mov    ebx,0xc001ff9c
c0000097:	81 eb 98 ff 01 c0    	sub    ebx,0xc001ff98
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 98 ff 01 c0       	mov    esi,0xc001ff98
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 38 02 c0       	push   0xc00238e4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 e4 38 02 c0       	push   0xc00238e4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 e7 51 01 00       	call   c0015494 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 c5 51 01 00       	call   c0015494 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 d2 56 01 00       	call   c00159c0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 91 5d 01 00       	call   c0016088 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 0d 10 01 00       	jmp    c001138c <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0060],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0060],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0060],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 ff 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0060],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0060],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 a4 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff5c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 8e 78 01 00       	jmp    c0019630 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 b8 78 01 00       	jmp    c0019670 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 d9 78 01 00       	jmp    c00196b0 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 00 02 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfe00]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 00 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe00]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 04 29 02 c0       	mov    edx,0xc0022904
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba bc 00 02 c0       	mov    edx,0xc00200bc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 c2 00 02 c0       	mov    eax,0xc00200c2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 80 01 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfe80]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 cb 00 02 c0       	mov    eax,0xc00200cb
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 00 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfe00]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 50 01 02 c0       	mov    eax,0xc0020150
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 40 01 02 c0       	mov    ebx,0xc0020140
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 20 01 02 c0       	mov    eax,0xc0020120
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 30 01 02 c0       	mov    eax,0xc0020130
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba d2 00 02 c0       	mov    edx,0xc00200d2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba de 00 02 c0       	mov    edx,0xc00200de
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba f2 00 02 c0       	mov    edx,0xc00200f2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 20 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020520
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 20 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020520
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 20 03 02 c0       	mov    eax,0xc0020320
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 60 02 02 c0       	mov    eax,0xc0020260
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 20 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfde0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 20 06 02 c0       	push   0xc0020620
c000611b:	e8 ac 3e 01 00       	call   c0019fcc <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 2e 06 02 c0       	push   0xc002062e
c0006153:	e8 74 3e 01 00       	call   c0019fcc <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 dd 3d 01 00       	call   c0019f70 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 3d 06 02 c0       	push   0xc002063d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 40 06 02 c0       	push   0xc0020640
c0006812:	e8 b5 37 01 00       	call   c0019fcc <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 c9 37 01 00       	call   c0019fe8 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 45 06 02 c0 	mov    DWORD PTR [esp],0xc0020645
c000682c:	e8 9b 37 01 00       	call   c0019fcc <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 ab 37 01 00       	call   c0019fe8 <iso_kprintfd>
c000683d:	c7 04 24 4b 06 02 c0 	mov    DWORD PTR [esp],0xc002064b
c0006844:	e8 83 37 01 00       	call   c0019fcc <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 93 37 01 00       	call   c0019fe8 <iso_kprintfd>
c0006855:	c7 04 24 51 06 02 c0 	mov    DWORD PTR [esp],0xc0020651
c000685c:	e8 6b 37 01 00       	call   c0019fcc <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 7b 37 01 00       	call   c0019fe8 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 3d 06 02 c0       	push   0xc002063d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 5a 06 02 c0       	push   0xc002065a
c0006a31:	e8 96 35 01 00       	call   c0019fcc <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 65 06 02 c0       	push   0xc0020665
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 6c 06 02 c0       	push   0xc002066c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 73 06 02 c0       	push   0xc0020673
c0006b48:	e8 7f 34 01 00       	call   c0019fcc <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 7e 06 02 c0       	push   0xc002067e
c0006b63:	e8 64 34 01 00       	call   c0019fcc <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 7a 9f 00 00       	call   c0010bec <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 0f 5c 00 00       	call   c000c890 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 8f 06 02 c0       	push   0xc002068f
c0006cb2:	e8 14 a0 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 a8 06 02 c0       	push   0xc00206a8
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 0d eb 00 00       	call   c00157ec <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 1c ed 00 00       	call   c0015a10 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 f8 64 01 c0       	push   0xc00164f8
c0006d03:	52                   	push   edx
c0006d04:	e8 07 ed 00 00       	call   c0015a10 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 a4 07 02 c0       	push   0xc00207a4
c0006d16:	e8 b0 9f 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 33 a8 00 00       	call   c001155a <KeInitRand()>
c0006d27:	e8 ef fb 00 00       	call   c001691b <Vm::initialise8086()>
c0006d2c:	e8 8f 48 00 00       	call   c000b5c0 <Fs::initVFS()>
c0006d31:	c7 04 24 b5 06 02 c0 	mov    DWORD PTR [esp],0xc00206b5
c0006d38:	e8 8e 9f 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 a4 07 02 c0       	push   0xc00207a4
c0006d5c:	e8 6a 9f 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0006d61:	e8 37 45 00 00       	call   c000b29d <KeInitialiseSymlinks()>
c0006d66:	e8 99 a4 00 00       	call   c0011204 <KeLoadSystemEnv()>
c0006d6b:	e8 f6 a6 00 00       	call   c0011466 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 cf 06 02 c0       	push   0xc00206cf
c0006d7a:	68 d8 06 02 c0       	push   0xc00206d8
c0006d7f:	e8 b4 cc 00 00       	call   c0013a38 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 64 54 00 00       	call   c000c1f0 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 c8 07 02 c0 	mov    DWORD PTR [esp],0xc00207c8
c0006d93:	e8 33 9f 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 e4 5a 00 00       	call   c000c88e <Device::loadDriversForAll()>
c0006daa:	c7 04 24 e0 06 02 c0 	mov    DWORD PTR [esp],0xc00206e0
c0006db1:	e8 15 9f 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 f1 06 02 c0       	push   0xc00206f1
c0006dc5:	e8 38 e4 00 00       	call   c0015202 <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 60 e6 00 00       	call   c0015433 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 94 f0 00 00       	call   c0015e74 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 0d 07 02 c0       	push   0xc002070d
c0006df5:	50                   	push   eax
c0006df6:	e8 0f 5b 00 00       	call   c000c90a <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 14 08 02 c0       	mov    edx,0xc0020814
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 a1 80 01 00       	call   c001ef96 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 d1 91 00 00       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 aa 91 00 00       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 88 91 00 00       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 66 91 00 00       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 73 90 00 00       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 4e 90 00 00       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 00 7f 01 00       	call   c001ef50 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 4e 7b 01 00       	call   c001ebc0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 64 90 00 00       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 16 07 02 c0       	push   0xc0020716
c00070e2:	e8 ba a2 00 00       	call   c00113a1 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 1c 07 02 c0       	push   0xc002071c
c000711e:	e8 7e a2 00 00       	call   c00113a1 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 b1 89 00 00       	jmp    c000fb1c <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 22 07 02 c0       	push   0xc0020722
c00071c3:	0f 94 05 40 31 02 c0 	sete   BYTE PTR ds:0xc0023140
c00071ca:	e8 fc 9a 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 ab 84 00 00       	call   c000f690 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 7e 55 00 00       	call   c000c772 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 3a 07 02 c0 	mov    DWORD PTR [esp],0xc002073a
c000720d:	e8 b9 9a 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 94 8f 00 00       	call   c00101bc <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 3b 55 00 00       	call   c000c772 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 e8 07 02 c0       	push   0xc00207e8
c0007254:	e8 72 9a 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0007259:	e8 fa 08 01 00       	call   c0017b58 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 54 07 02 c0 	mov    DWORD PTR [esp],0xc0020754
c0007265:	e8 61 9a 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 c6 e8 00 00       	call   c0015b3c <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 6f 07 02 c0       	push   0xc002076f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 80 07 02 c0       	push   0xc0020780
c00072ed:	e8 af a0 00 00       	call   c00113a1 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 8d 07 02 c0       	push   0xc002078d
c0007302:	e8 9a a0 00 00       	call   c00113a1 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 97 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020797
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 80 a0 00 00       	jmp    c00113a1 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 11 03 01 00       	call   c0017824 <HalSystemIdle()>
c0007513:	e8 3a 80 01 00       	call   c001f552 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 50 ec 01 c0       	push   0xc001ec50
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 60 ec 01 c0       	push   0xc001ec60
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 6a ec 01 c0       	push   0xc001ec6a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 74 ec 01 c0       	push   0xc001ec74
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 7e ec 01 c0       	push   0xc001ec7e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 88 ec 01 c0       	push   0xc001ec88
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 92 ec 01 c0       	push   0xc001ec92
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 9c ec 01 c0       	push   0xc001ec9c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 a6 ec 01 c0       	push   0xc001eca6
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 ae ec 01 c0       	push   0xc001ecae
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 b8 ec 01 c0       	push   0xc001ecb8
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 c0 ec 01 c0       	push   0xc001ecc0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 c8 ec 01 c0       	push   0xc001ecc8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 d0 ec 01 c0       	push   0xc001ecd0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 ea ec 01 c0       	push   0xc001ecea
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 f2 ec 01 c0       	push   0xc001ecf2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 fc ec 01 c0       	push   0xc001ecfc
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 06 ed 01 c0       	push   0xc001ed06
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 10 ed 01 c0       	push   0xc001ed10
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 aa ed 01 c0       	push   0xc001edaa
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 b1 ed 01 c0       	push   0xc001edb1
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 9c ed 01 c0       	push   0xc001ed9c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 a3 ed 01 c0       	push   0xc001eda3
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 1a ed 01 c0       	push   0xc001ed1a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 24 ed 01 c0       	push   0xc001ed24
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 2e ed 01 c0       	push   0xc001ed2e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 38 ed 01 c0       	push   0xc001ed38
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 42 ed 01 c0       	push   0xc001ed42
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 4c ed 01 c0       	push   0xc001ed4c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 56 ed 01 c0       	push   0xc001ed56
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 60 ed 01 c0       	push   0xc001ed60
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 6a ed 01 c0       	push   0xc001ed6a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 74 ed 01 c0       	push   0xc001ed74
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 7e ed 01 c0       	push   0xc001ed7e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 88 ed 01 c0       	push   0xc001ed88
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 92 ed 01 c0       	push   0xc001ed92
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 ec ee 01 c0       	push   0xc001eeec
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 f6 ee 01 c0       	push   0xc001eef6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 00 ef 01 c0       	push   0xc001ef00
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 0a ef 01 c0       	push   0xc001ef0a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 14 ef 01 c0       	push   0xc001ef14
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 1e ef 01 c0       	push   0xc001ef1e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 28 ef 01 c0       	push   0xc001ef28
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 32 ef 01 c0       	push   0xc001ef32
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 a6 ec 01 c0       	push   0xc001eca6
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 34 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023134
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d 34 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023134
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 34 31 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023134,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 34 31 02 c0       	mov    eax,ds:0xc0023134
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 38 08 02 c0       	push   0xc0020838
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 68 08 02 c0       	push   0xc0020868
c0007a27:	e8 75 99 00 00       	call   c00113a1 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 6d 08 02 c0       	push   0xc002086d
c0007a3d:	e8 5f 99 00 00       	call   c00113a1 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 74 08 02 c0       	push   0xc0020874
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 e6 90 00 00       	call   c0010c4f <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 0f 90 00 00       	call   c0010b99 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 4a 79 01 00       	call   c001f4ea <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 8c 08 02 c0       	push   0xc002088c
c0007c31:	e8 6b 97 00 00       	call   c00113a1 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 8c 08 02 c0       	push   0xc002088c
c0007ca2:	e8 fa 96 00 00       	call   c00113a1 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 38 31 02 c0    	mov    esi,DWORD PTR ds:0xc0023138
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 38 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023138
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 38 31 02 c0    	mov    edx,DWORD PTR ds:0xc0023138
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 31 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020931
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 f4 95 00 00       	jmp    c00113a1 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 b4 08 02 c0       	push   0xc00208b4
c0007e31:	e8 6b 95 00 00       	call   c00113a1 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 47 09 02 c0       	push   0xc0020947
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 e4 08 02 c0       	push   0xc00208e4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 08 09 02 c0       	push   0xc0020908
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 6d 09 02 c0       	push   0xc002096d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 5f 09 02 c0       	push   0xc002095f
c000813c:	e8 60 92 00 00       	call   c00113a1 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba cc 09 02 c0       	mov    edx,0xc00209cc
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 89 09 02 c0       	push   0xc0020989
c0008311:	e8 8b 90 00 00       	call   c00113a1 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 01 d9 00 00       	call   c0015c60 <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 d9 6f 01 00       	call   c001f3d0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 a6 09 02 c0       	push   0xc00209a6
c000840c:	e8 90 8f 00 00       	call   c00113a1 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba cc 09 02 c0       	mov    edx,0xc00209cc
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 14 0a 02 c0       	mov    edx,0xc0020a14
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 56 51 00 00       	call   c000d64c <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 fc 04 01 00       	call   c0018a18 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 60 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcea0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 60 31 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcea0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 18 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcfe8]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 f0 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd010]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 2e 02 01 00       	call   c00188ac <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 8b 02 01 00       	jmp    c00189b4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 e0 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209e0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 2b 8c 00 00       	jmp    c00113a1 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 c4 38 00 00       	jmp    c000c197 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ee 09 02 c0       	mov    esi,0xc00209ee
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 92 fd 00 00       	call   c00189b4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 14 0a 02 c0       	mov    edx,0xc0020a14
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 ff 09 02 c0       	push   0xc00209ff
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 05 0a 02 c0       	push   0xc0020a05
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba dc 0a 02 c0       	mov    edx,0xc0020adc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 a0 31 02 c0       	mov    eax,ds:0xc00231a0
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 a0 31 02 c0    	mov    DWORD PTR ds:0xc00231a0,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 b7 63 01 00       	call   c001f5b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba f8 0a 02 c0       	mov    edx,0xc0020af8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba dc 0a 02 c0       	mov    edx,0xc0020adc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 b7 62 01 00       	call   c001f68c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 ab 62 01 00       	call   c001f694 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 b1 61 01 00       	call   c001f5b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 b4 0a 02 c0       	push   0xc0020ab4
c000942c:	e8 70 7f 00 00       	call   c00113a1 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba f8 0a 02 c0       	mov    edx,0xc0020af8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 b6 61 01 00       	call   c001f68c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 43 62 01 00       	call   c001f736 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 01 60 01 00       	call   c001f576 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 30 31 02 c0       	push   0xc0023130
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 74 f5 01 c0       	push   0xc001f574
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 a8 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231a8
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d a8 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231a8
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 a4 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231a4
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 a4 31 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00231a4,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 a4 31 02 c0    	mov    DWORD PTR ds:0xc00231a4,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 0c 0b 02 c0       	push   0xc0020b0c
c0009689:	e8 13 7d 00 00       	call   c00113a1 <KePanic(char const*)>
c000968e:	8b 35 a4 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231a4
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d a4 31 02 c0    	mov    DWORD PTR ds:0xc00231a4,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 a4 31 02 c0       	mov    eax,ds:0xc00231a4
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 a4 31 02 c0    	mov    DWORD PTR ds:0xc00231a4,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 a4 31 02 c0       	mov    ds:0xc00231a4,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 ac 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231ac
c000975f:	8b 0d b4 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231b4
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d ac 31 02 c0    	mov    ecx,DWORD PTR ds:0xc00231ac
c000977a:	a1 b0 31 02 c0       	mov    eax,ds:0xc00231b0
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d b0 31 02 c0    	cmp    DWORD PTR ds:0xc00231b0,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 a0 0d 02 c0       	push   0xc0020da0
c00097c0:	e8 dc 7b 00 00       	call   c00113a1 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 b7 0d 02 c0       	push   0xc0020db7
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d b0 31 02 c0    	mov    DWORD PTR ds:0xc00231b0,ebx
c0009864:	c6 05 b8 31 02 c0 43 	mov    BYTE PTR ds:0xc00231b8,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 b4 31 02 c0       	mov    ds:0xc00231b4,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 ac 31 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00231ac,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 b0 31 02 c0       	mov    eax,ds:0xc00231b0
c0009896:	f7 35 ac 31 02 c0    	div    DWORD PTR ds:0xc00231ac
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 2c 0b 02 c0       	push   0xc0020b2c
c00098d1:	e8 cb 7a 00 00       	call   c00113a1 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ce 0d 02 c0       	push   0xc0020dce
c00099a3:	e8 f9 79 00 00       	call   c00113a1 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 50 0b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020b50
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 96 79 00 00       	jmp    c00113a1 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 ea 0d 02 c0       	push   0xc0020dea
c0009a18:	e8 84 79 00 00       	call   c00113a1 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 06 0e 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020e06
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 3a 79 00 00       	jmp    c00113a1 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 74 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b74
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 98 0b 02 c0       	push   0xc0020b98
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 00 0c 02 c0       	push   0xc0020c00
c0009dad:	e8 ef 75 00 00       	call   c00113a1 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 24 0c 02 c0       	push   0xc0020c24
c0009e99:	e8 03 75 00 00       	call   c00113a1 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 50 0c 02 c0       	push   0xc0020c50
c0009fed:	e8 af 73 00 00       	call   c00113a1 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 e2 27 00 00       	call   c000ca06 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 20 0e 02 c0       	push   0xc0020e20
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 ac 31 02 c0       	mov    eax,ds:0xc00231ac
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 b8 31 02 c0 	movsx  eax,BYTE PTR ds:0xc00231b8
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 b6 38 00 00       	call   c000dbc0 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d ac 31 02 c0    	cmp    DWORD PTR ds:0xc00231ac,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 74 0c 02 c0       	push   0xc0020c74
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 2e 0e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020e2e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 51 0e 02 c0       	push   0xc0020e51
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 3f 0e 02 c0       	push   0xc0020e3f
c000a3db:	e8 c1 6f 00 00       	call   c00113a1 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 51 0e 02 c0       	push   0xc0020e51
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 ac 31 02 c0    	mov    edx,DWORD PTR ds:0xc00231ac
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 b8 31 02 c0 	movsx  eax,BYTE PTR ds:0xc00231b8
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 cd 36 00 00       	call   c000db54 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 ac 31 02 c0    	cmp    DWORD PTR ds:0xc00231ac,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 64 0e 02 c0       	push   0xc0020e64
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 a4 0c 02 c0       	push   0xc0020ca4
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 c4 0c 02 c0       	push   0xc0020cc4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 24 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d24
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 79 0e 02 c0       	push   0xc0020e79
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 8d 0e 02 c0       	push   0xc0020e8d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 a0 0e 02 c0       	push   0xc0020ea0
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 ad 0e 02 c0       	push   0xc0020ead
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 c6 0e 02 c0       	push   0xc0020ec6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 c6 0e 02 c0       	push   0xc0020ec6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ce 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ece
c000a7f8:	e8 a4 6b 00 00       	call   c00113a1 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 e6 0e 02 c0       	push   0xc0020ee6
c000a80a:	e8 92 6b 00 00       	call   c00113a1 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be ef 09 02 c0       	mov    esi,0xc00209ef
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ee 09 02 c0       	mov    al,ds:0xc00209ee
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 fc 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf104]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 4c 10 02 c0       	push   0xc002104c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 60 10 02 c0       	push   0xc0021060
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 6a 10 02 c0       	push   0xc002106a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 74 10 02 c0       	push   0xc0021074
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 b8 11 02 c0       	push   0xc00211b8
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 7e 10 02 c0       	push   0xc002107e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 d8 11 02 c0       	push   0xc00211d8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 93 10 02 c0       	push   0xc0021093
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 ad 10 02 c0       	push   0xc00210ad
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 c0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce40]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 00 12 02 c0       	push   0xc0021200
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 b8 11 02 c0       	push   0xc00211b8
c000abb4:	e8 e8 67 00 00       	call   c00113a1 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 48 12 02 c0       	push   0xc0021248
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 48 12 02 c0       	push   0xc0021248
c000abe3:	e8 b9 67 00 00       	call   c00113a1 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 b8 10 02 c0       	push   0xc00210b8
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 b8 10 02 c0       	push   0xc00210b8
c000ac0f:	e8 8d 67 00 00       	call   c00113a1 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 d5 10 02 c0       	push   0xc00210d5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 d5 10 02 c0       	push   0xc00210d5
c000ac3b:	e8 61 67 00 00       	call   c00113a1 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 68 12 02 c0       	push   0xc0021268
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 68 12 02 c0       	push   0xc0021268
c000ac67:	e8 35 67 00 00       	call   c00113a1 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 8c 12 02 c0       	push   0xc002128c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 8c 12 02 c0       	push   0xc002128c
c000ac93:	e8 09 67 00 00       	call   c00113a1 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 f1 10 02 c0       	push   0xc00210f1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 f1 10 02 c0       	push   0xc00210f1
c000acbf:	e8 dd 66 00 00       	call   c00113a1 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 0d 11 02 c0       	push   0xc002110d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 0d 11 02 c0       	push   0xc002110d
c000aceb:	e8 b1 66 00 00       	call   c00113a1 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 ac 12 02 c0       	push   0xc00212ac
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 ac 12 02 c0       	push   0xc00212ac
c000ad17:	e8 85 66 00 00       	call   c00113a1 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 d0 12 02 c0       	push   0xc00212d0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 d0 12 02 c0       	push   0xc00212d0
c000ad43:	e8 59 66 00 00       	call   c00113a1 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 91 67 00 00       	call   c00114ef <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 ef 12 02 c0       	push   0xc00212ef
c000ad97:	e8 05 66 00 00       	call   c00113a1 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 f8 12 02 c0       	push   0xc00212f8
c000addc:	50                   	push   eax
c000addd:	e8 6c 0a 00 00       	call   c000b84e <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 16 13 02 c0       	push   0xc0021316
c000adf1:	e8 ab 65 00 00       	call   c00113a1 <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 13 0b 00 00       	call   c000b916 <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 30 13 02 c0       	push   0xc0021330
c000ae12:	e8 8a 65 00 00       	call   c00113a1 <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 4a 13 02 c0       	push   0xc002134a
c000ae59:	e8 43 65 00 00       	call   c00113a1 <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 fd 0a 00 00       	call   c000b974 <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 44             	sub    esp,0x44
c000af52:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af56:	56                   	push   esi
c000af57:	68 64 13 02 c0       	push   0xc0021364
c000af5c:	e8 e4 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af61:	89 34 24             	mov    DWORD PTR [esp],esi
c000af64:	e8 9b ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	89 c7                	mov    edi,eax
c000af6e:	89 d0                	mov    eax,edx
c000af70:	09 f8                	or     eax,edi
c000af72:	0f 84 de 01 00 00    	je     c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af78:	89 d5                	mov    ebp,edx
c000af7a:	53                   	push   ebx
c000af7b:	53                   	push   ebx
c000af7c:	57                   	push   edi
c000af7d:	68 7e 13 02 c0       	push   0xc002137e
c000af82:	e8 be f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af87:	58                   	pop    eax
c000af88:	5a                   	pop    edx
c000af89:	55                   	push   ebp
c000af8a:	68 8c 13 02 c0       	push   0xc002138c
c000af8f:	e8 b1 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af9b:	e8 16 cb ff ff       	call   c0007ab6 <malloc>
c000afa0:	83 c4 0c             	add    esp,0xc
c000afa3:	89 c3                	mov    ebx,eax
c000afa5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000afab:	56                   	push   esi
c000afac:	50                   	push   eax
c000afad:	e8 9c 08 00 00       	call   c000b84e <File::File(char const*, Process*)>
c000afb2:	83 c4 10             	add    esp,0x10
c000afb5:	85 db                	test   ebx,ebx
c000afb7:	0f 84 68 01 00 00    	je     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000afbd:	83 ec 0c             	sub    esp,0xc
c000afc0:	68 a0 1f 02 c0       	push   0xc0021fa0
c000afc5:	e8 7b f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000afca:	5a                   	pop    edx
c000afcb:	59                   	pop    ecx
c000afcc:	6a 01                	push   0x1
c000afce:	53                   	push   ebx
c000afcf:	e8 42 09 00 00       	call   c000b916 <File::open(FileOpenMode)>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	85 c0                	test   eax,eax
c000afd9:	74 0b                	je     c000afe6 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe0:	53                   	push   ebx
c000afe1:	e9 39 01 00 00       	jmp    c000b11f <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afe6:	83 ec 0c             	sub    esp,0xc
c000afe9:	68 86 09 02 c0       	push   0xc0020986
c000afee:	e8 52 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aff3:	58                   	pop    eax
c000aff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000affa:	56                   	push   esi
c000affb:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afff:	52                   	push   edx
c000b000:	6a 00                	push   0x0
c000b002:	6a 08                	push   0x8
c000b004:	53                   	push   ebx
c000b005:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b008:	83 c4 20             	add    esp,0x20
c000b00b:	85 c0                	test   eax,eax
c000b00d:	0f 85 fe 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b013:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b018:	0f 85 f3 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	68 d2 1f 02 c0       	push   0xc0021fd2
c000b026:	e8 1a f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b02b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b02d:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b031:	89 34 24             	mov    DWORD PTR [esp],esi
c000b034:	52                   	push   edx
c000b035:	6a 00                	push   0x0
c000b037:	6a 08                	push   0x8
c000b039:	53                   	push   ebx
c000b03a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b03d:	83 c4 20             	add    esp,0x20
c000b040:	85 c0                	test   eax,eax
c000b042:	0f 85 c9 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b048:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b04d:	0f 85 be 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b053:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b057:	0f 85 f9 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b05d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b061:	0f 85 ef 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b067:	83 ec 0c             	sub    esp,0xc
c000b06a:	68 9a 13 02 c0       	push   0xc002139a
c000b06f:	e8 d1 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b074:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b07c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b084:	83 c4 0c             	add    esp,0xc
c000b087:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b08b:	50                   	push   eax
c000b08c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b090:	50                   	push   eax
c000b091:	53                   	push   ebx
c000b092:	e8 81 0b 00 00       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b09f:	75 70                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0a1:	31 ff                	xor    edi,edi
c000b0a3:	b8 0f 00 00 00       	mov    eax,0xf
c000b0a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0ac:	89 f8                	mov    eax,edi
c000b0ae:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b0b2:	73 5d                	jae    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0b4:	83 ec 0c             	sub    esp,0xc
c000b0b7:	68 9a 13 02 c0       	push   0xc002139a
c000b0bc:	e8 84 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b0c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b0c9:	83 c0 f0             	add    eax,0xfffffff0
c000b0cc:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0d1:	83 d2 ff             	adc    edx,0xffffffff
c000b0d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	39 c1                	cmp    ecx,eax
c000b0e1:	19 d7                	sbb    edi,edx
c000b0e3:	72 40                	jb     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0e5:	83 ec 0c             	sub    esp,0xc
c000b0e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ea:	56                   	push   esi
c000b0eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0ef:	52                   	push   edx
c000b0f0:	50                   	push   eax
c000b0f1:	53                   	push   ebx
c000b0f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0f5:	83 c4 20             	add    esp,0x20
c000b0f8:	85 c0                	test   eax,eax
c000b0fa:	75 15                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b100:	89 c7                	mov    edi,eax
c000b102:	c1 ff 1f             	sar    edi,0x1f
c000b105:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b109:	75 06                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b10b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b10f:	74 19                	je     c000b12a <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b111:	83 ec 0c             	sub    esp,0xc
c000b114:	53                   	push   ebx
c000b115:	e8 5a 08 00 00       	call   c000b974 <File::close()>
c000b11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b11c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b11f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	83 c8 ff             	or     eax,0xffffffff
c000b128:	eb 2e                	jmp    c000b158 <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	68 b2 2a 02 c0       	push   0xc0022ab2
c000b132:	e8 0e f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b137:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b13a:	e8 35 08 00 00       	call   c000b974 <File::close()>
c000b13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b147:	c7 04 24 9d 13 02 c0 	mov    DWORD PTR [esp],0xc002139d
c000b14e:	e8 f2 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	31 c0                	xor    eax,eax
c000b158:	83 c4 3c             	add    esp,0x3c
c000b15b:	5b                   	pop    ebx
c000b15c:	5e                   	pop    esi
c000b15d:	5f                   	pop    edi
c000b15e:	5d                   	pop    ebp
c000b15f:	c3                   	ret    

c000b160 <KeCreateSymlink(char const*, char const*)>:
c000b160:	55                   	push   ebp
c000b161:	57                   	push   edi
c000b162:	56                   	push   esi
c000b163:	53                   	push   ebx
c000b164:	83 ec 38             	sub    esp,0x38
c000b167:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b16b:	68 14 01 00 00       	push   0x114
c000b170:	e8 41 c9 ff ff       	call   c0007ab6 <malloc>
c000b175:	83 c4 0c             	add    esp,0xc
c000b178:	89 c3                	mov    ebx,eax
c000b17a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b180:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b184:	50                   	push   eax
c000b185:	e8 c4 06 00 00       	call   c000b84e <File::File(char const*, Process*)>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	b8 01 00 00 00       	mov    eax,0x1
c000b192:	85 db                	test   ebx,ebx
c000b194:	0f 84 fb 00 00 00    	je     c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b19a:	52                   	push   edx
c000b19b:	52                   	push   edx
c000b19c:	6a 12                	push   0x12
c000b19e:	53                   	push   ebx
c000b19f:	e8 72 07 00 00       	call   c000b916 <File::open(FileOpenMode)>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	85 c0                	test   eax,eax
c000b1a9:	74 0b                	je     c000b1b6 <KeCreateSymlink(char const*, char const*)+0x56>
c000b1ab:	83 ec 0c             	sub    esp,0xc
c000b1ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1b0:	53                   	push   ebx
c000b1b1:	e9 d4 00 00 00       	jmp    c000b28a <KeCreateSymlink(char const*, char const*)+0x12a>
c000b1b6:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b1ba:	be a0 13 02 c0       	mov    esi,0xc00213a0
c000b1bf:	b9 09 00 00 00       	mov    ecx,0x9
c000b1c4:	fc                   	cld    
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1ca:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d0:	56                   	push   esi
c000b1d1:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1d5:	52                   	push   edx
c000b1d6:	6a 00                	push   0x0
c000b1d8:	6a 08                	push   0x8
c000b1da:	53                   	push   ebx
c000b1db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1de:	83 c4 20             	add    esp,0x20
c000b1e1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e6:	0f 85 90 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ec:	85 c0                	test   eax,eax
c000b1ee:	0f 85 88 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1f4:	e8 57 fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b1f9:	83 ec 0c             	sub    esp,0xc
c000b1fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b200:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b204:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b206:	56                   	push   esi
c000b207:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b20b:	52                   	push   edx
c000b20c:	6a 00                	push   0x0
c000b20e:	6a 08                	push   0x8
c000b210:	53                   	push   ebx
c000b211:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b214:	83 c4 20             	add    esp,0x20
c000b217:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b21c:	75 5e                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b21e:	85 c0                	test   eax,eax
c000b220:	75 5a                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b227:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b22a:	55                   	push   ebp
c000b22b:	e8 40 53 ff ff       	call   c0000570 <strlen>
c000b230:	89 34 24             	mov    DWORD PTR [esp],esi
c000b233:	31 d2                	xor    edx,edx
c000b235:	55                   	push   ebp
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	53                   	push   ebx
c000b239:	ff d7                	call   edi
c000b23b:	83 c4 14             	add    esp,0x14
c000b23e:	89 c6                	mov    esi,eax
c000b240:	55                   	push   ebp
c000b241:	e8 2a 53 ff ff       	call   c0000570 <strlen>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b24d:	75 2d                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b24f:	85 f6                	test   esi,esi
c000b251:	75 29                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b253:	50                   	push   eax
c000b254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b258:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b25c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b260:	e8 30 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b268:	e8 07 07 00 00       	call   c000b974 <File::close()>
c000b26d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	31 c0                	xor    eax,eax
c000b27a:	eb 19                	jmp    c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	53                   	push   ebx
c000b280:	e8 ef 06 00 00       	call   c000b974 <File::close()>
c000b285:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b28a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	b8 01 00 00 00       	mov    eax,0x1
c000b295:	83 c4 2c             	add    esp,0x2c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    

c000b29d <KeInitialiseSymlinks()>:
c000b29d:	53                   	push   ebx
c000b29e:	83 ec 10             	sub    esp,0x10
c000b2a1:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b2ab:	6a 00                	push   0x0
c000b2ad:	68 90 ae 00 c0       	push   0xc000ae90
c000b2b2:	e8 01 59 00 00       	call   c0010bb8 <KeRegisterAtexit(void (*)(void*), void*)>
c000b2b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b2be:	e8 f3 c7 ff ff       	call   c0007ab6 <malloc>
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	89 c3                	mov    ebx,eax
c000b2c8:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b2ce:	68 f8 12 02 c0       	push   0xc00212f8
c000b2d3:	50                   	push   eax
c000b2d4:	e8 75 05 00 00       	call   c000b84e <File::File(char const*, Process*)>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	85 db                	test   ebx,ebx
c000b2de:	75 10                	jne    c000b2f0 <KeInitialiseSymlinks()+0x53>
c000b2e0:	83 ec 0c             	sub    esp,0xc
c000b2e3:	68 a9 13 02 c0       	push   0xc00213a9
c000b2e8:	e8 b4 60 00 00       	call   c00113a1 <KePanic(char const*)>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	83 ec 0c             	sub    esp,0xc
c000b2f3:	53                   	push   ebx
c000b2f4:	e8 e1 08 00 00       	call   c000bbda <File::exists()>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	84 c0                	test   al,al
c000b2fe:	75 2d                	jne    c000b32d <KeInitialiseSymlinks()+0x90>
c000b300:	52                   	push   edx
c000b301:	52                   	push   edx
c000b302:	6a 12                	push   0x12
c000b304:	53                   	push   ebx
c000b305:	e8 0c 06 00 00       	call   c000b916 <File::open(FileOpenMode)>
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	85 c0                	test   eax,eax
c000b30f:	74 10                	je     c000b321 <KeInitialiseSymlinks()+0x84>
c000b311:	83 ec 0c             	sub    esp,0xc
c000b314:	68 c6 13 02 c0       	push   0xc00213c6
c000b319:	e8 83 60 00 00       	call   c00113a1 <KePanic(char const*)>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	83 ec 0c             	sub    esp,0xc
c000b324:	53                   	push   ebx
c000b325:	e8 4a 06 00 00       	call   c000b974 <File::close()>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	85 db                	test   ebx,ebx
c000b32f:	74 0c                	je     c000b33d <KeInitialiseSymlinks()+0xa0>
c000b331:	83 ec 0c             	sub    esp,0xc
c000b334:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b336:	53                   	push   ebx
c000b337:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	50                   	push   eax
c000b33e:	50                   	push   eax
c000b33f:	68 e3 13 02 c0       	push   0xc00213e3
c000b344:	68 f1 13 02 c0       	push   0xc00213f1
c000b349:	e8 12 fe ff ff       	call   c000b160 <KeCreateSymlink(char const*, char const*)>
c000b34e:	83 c4 18             	add    esp,0x18
c000b351:	5b                   	pop    ebx
c000b352:	c3                   	ret    
c000b353:	90                   	nop

c000b354 <File::read(unsigned long long, void*, int*)>:
c000b354:	53                   	push   ebx
c000b355:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b359:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b35d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b364:	83 f8 19             	cmp    eax,0x19
c000b367:	77 35                	ja     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b369:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b370:	85 c0                	test   eax,eax
c000b372:	74 2a                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b374:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b37a:	85 c0                	test   eax,eax
c000b37c:	74 20                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b37e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b382:	74 21                	je     c000b3a5 <File::read(unsigned long long, void*, int*)+0x51>
c000b384:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b386:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b38a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b394:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b398:	5b                   	pop    ebx
c000b399:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b39c:	ff e0                	jmp    eax
c000b39e:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a3:	eb 05                	jmp    c000b3aa <File::read(unsigned long long, void*, int*)+0x56>
c000b3a5:	b8 05 00 00 00       	mov    eax,0x5
c000b3aa:	5b                   	pop    ebx
c000b3ab:	c3                   	ret    

c000b3ac <File::write(unsigned long long, void*, int*)>:
c000b3ac:	53                   	push   ebx
c000b3ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3bc:	83 f8 19             	cmp    eax,0x19
c000b3bf:	77 35                	ja     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3c1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3c8:	85 c0                	test   eax,eax
c000b3ca:	74 2a                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3cc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3d2:	85 c0                	test   eax,eax
c000b3d4:	74 20                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3da:	74 21                	je     c000b3fd <File::write(unsigned long long, void*, int*)+0x51>
c000b3dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3de:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3e2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3f0:	5b                   	pop    ebx
c000b3f1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3f4:	ff e0                	jmp    eax
c000b3f6:	b8 0b 00 00 00       	mov    eax,0xb
c000b3fb:	eb 05                	jmp    c000b402 <File::write(unsigned long long, void*, int*)+0x56>
c000b3fd:	b8 05 00 00 00       	mov    eax,0x5
c000b402:	5b                   	pop    ebx
c000b403:	c3                   	ret    

c000b404 <Directory::read(unsigned long long, void*, int*)>:
c000b404:	53                   	push   ebx
c000b405:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b409:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b40d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b414:	83 f8 19             	cmp    eax,0x19
c000b417:	77 35                	ja     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b419:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b420:	85 c0                	test   eax,eax
c000b422:	74 2a                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b424:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b42a:	85 c0                	test   eax,eax
c000b42c:	74 20                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b42e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b432:	74 21                	je     c000b455 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b434:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b436:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b43a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b440:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b448:	5b                   	pop    ebx
c000b449:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b44c:	ff e0                	jmp    eax
c000b44e:	b8 0b 00 00 00       	mov    eax,0xb
c000b453:	eb 05                	jmp    c000b45a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b455:	b8 05 00 00 00       	mov    eax,0x5
c000b45a:	5b                   	pop    ebx
c000b45b:	c3                   	ret    

c000b45c <Directory::write(unsigned long long, void*, int*)>:
c000b45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b460:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b467:	b8 0b 00 00 00       	mov    eax,0xb
c000b46c:	83 fa 19             	cmp    edx,0x19
c000b46f:	77 18                	ja     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b471:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b478:	85 d2                	test   edx,edx
c000b47a:	74 0d                	je     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b47c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b483:	19 c0                	sbb    eax,eax
c000b485:	83 e0 0a             	and    eax,0xa
c000b488:	40                   	inc    eax
c000b489:	c3                   	ret    

c000b48a <File::isAtty()>:
c000b48a:	31 c0                	xor    eax,eax
c000b48c:	c3                   	ret    
c000b48d:	90                   	nop

c000b48e <Directory::isAtty()>:
c000b48e:	31 c0                	xor    eax,eax
c000b490:	c3                   	ret    
c000b491:	90                   	nop

c000b492 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b492:	b8 0a 00 00 00       	mov    eax,0xa
c000b497:	c3                   	ret    

c000b498 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b498:	b8 0a 00 00 00       	mov    eax,0xa
c000b49d:	c3                   	ret    

c000b49e <Filesystem::allocateSwapfile(char const*, int)>:
c000b49e:	31 c0                	xor    eax,eax
c000b4a0:	31 d2                	xor    edx,edx
c000b4a2:	c3                   	ret    
c000b4a3:	90                   	nop

c000b4a4 <File::~File()>:
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	ba d4 14 02 c0       	mov    edx,0xc00214d4
c000b4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b0:	89 10                	mov    DWORD PTR [eax],edx
c000b4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b6:	83 ec 0c             	sub    esp,0xc
c000b4b9:	50                   	push   eax
c000b4ba:	e8 e5 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	90                   	nop
c000b4c3:	83 c4 0c             	add    esp,0xc
c000b4c6:	c3                   	ret    
c000b4c7:	90                   	nop

c000b4c8 <File::~File()>:
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d2:	e8 cd ff ff ff       	call   c000b4a4 <File::~File()>
c000b4d7:	83 c4 10             	add    esp,0x10
c000b4da:	83 ec 08             	sub    esp,0x8
c000b4dd:	68 14 01 00 00       	push   0x114
c000b4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e6:	e8 2d f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	83 c4 0c             	add    esp,0xc
c000b4f1:	c3                   	ret    

c000b4f2 <Directory::~Directory()>:
c000b4f2:	83 ec 0c             	sub    esp,0xc
c000b4f5:	ba f0 14 02 c0       	mov    edx,0xc00214f0
c000b4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fe:	89 10                	mov    DWORD PTR [eax],edx
c000b500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b504:	83 ec 0c             	sub    esp,0xc
c000b507:	50                   	push   eax
c000b508:	e8 97 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b50d:	83 c4 10             	add    esp,0x10
c000b510:	90                   	nop
c000b511:	83 c4 0c             	add    esp,0xc
c000b514:	c3                   	ret    
c000b515:	90                   	nop

c000b516 <Directory::~Directory()>:
c000b516:	83 ec 0c             	sub    esp,0xc
c000b519:	83 ec 0c             	sub    esp,0xc
c000b51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b520:	e8 cd ff ff ff       	call   c000b4f2 <Directory::~Directory()>
c000b525:	83 c4 10             	add    esp,0x10
c000b528:	83 ec 08             	sub    esp,0x8
c000b52b:	68 14 01 00 00       	push   0x114
c000b530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b534:	e8 df f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b539:	83 c4 10             	add    esp,0x10
c000b53c:	83 c4 0c             	add    esp,0xc
c000b53f:	c3                   	ret    

c000b540 <Filesystem::Filesystem()>:
c000b540:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000b545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b549:	89 10                	mov    DWORD PTR [eax],edx
c000b54b:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b555:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b561:	90                   	nop
c000b562:	c3                   	ret    
c000b563:	90                   	nop

c000b564 <Filesystem::~Filesystem()>:
c000b564:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000b569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b56d:	89 10                	mov    DWORD PTR [eax],edx
c000b56f:	90                   	nop
c000b570:	c3                   	ret    
c000b571:	90                   	nop

c000b572 <Filesystem::~Filesystem()>:
c000b572:	83 ec 0c             	sub    esp,0xc
c000b575:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b579:	e8 e6 ff ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c000b57e:	83 c4 04             	add    esp,0x4
c000b581:	83 ec 08             	sub    esp,0x8
c000b584:	6a 08                	push   0x8
c000b586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58a:	e8 89 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b58f:	83 c4 10             	add    esp,0x10
c000b592:	83 c4 0c             	add    esp,0xc
c000b595:	c3                   	ret    

c000b596 <Fs::getcwd(Process*, char*, int)>:
c000b596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b59a:	31 c0                	xor    eax,eax
c000b59c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b59f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b5a3:	7d 15                	jge    c000b5ba <Fs::getcwd(Process*, char*, int)+0x24>
c000b5a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b5a9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b5b0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b5b3:	84 c9                	test   cl,cl
c000b5b5:	74 06                	je     c000b5bd <Fs::getcwd(Process*, char*, int)+0x27>
c000b5b7:	40                   	inc    eax
c000b5b8:	eb e2                	jmp    c000b59c <Fs::getcwd(Process*, char*, int)+0x6>
c000b5ba:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b5bd:	31 c0                	xor    eax,eax
c000b5bf:	c3                   	ret    

c000b5c0 <Fs::initVFS()>:
c000b5c0:	83 ec 18             	sub    esp,0x18
c000b5c3:	6a 08                	push   0x8
c000b5c5:	e8 ec c4 ff ff       	call   c0007ab6 <malloc>
c000b5ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5cd:	e8 fa e1 00 00       	call   c00197cc <FAT::FAT()>
c000b5d2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b5d9:	e8 d8 c4 ff ff       	call   c0007ab6 <malloc>
c000b5de:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5e1:	e8 12 f1 00 00       	call   c001a6f8 <ISO9660::ISO9660()>
c000b5e6:	83 c4 1c             	add    esp,0x1c
c000b5e9:	c3                   	ret    

c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5ea:	55                   	push   ebp
c000b5eb:	57                   	push   edi
c000b5ec:	56                   	push   esi
c000b5ed:	53                   	push   ebx
c000b5ee:	81 ec 10 04 00 00    	sub    esp,0x410
c000b5f4:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b5fb:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b602:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b60a:	68 00 04 00 00       	push   0x400
c000b60f:	6a 00                	push   0x0
c000b611:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b615:	57                   	push   edi
c000b616:	e8 d5 4e ff ff       	call   c00004f0 <memset>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b622:	75 0b                	jne    c000b62f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b624:	50                   	push   eax
c000b625:	50                   	push   eax
c000b626:	55                   	push   ebp
c000b627:	57                   	push   edi
c000b628:	e8 13 50 ff ff       	call   c0000640 <strcpy>
c000b62d:	eb 51                	jmp    c000b680 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b62f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b633:	83 f8 5c             	cmp    eax,0x5c
c000b636:	74 05                	je     c000b63d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b638:	83 f8 2f             	cmp    eax,0x2f
c000b63b:	75 1e                	jne    c000b65b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b63d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b644:	8a 00                	mov    al,BYTE PTR [eax]
c000b646:	3c 60                	cmp    al,0x60
c000b648:	7e 03                	jle    c000b64d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b64a:	83 e8 20             	sub    eax,0x20
c000b64d:	88 04 24             	mov    BYTE PTR [esp],al
c000b650:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b657:	50                   	push   eax
c000b658:	50                   	push   eax
c000b659:	eb 1e                	jmp    c000b679 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b65b:	50                   	push   eax
c000b65c:	50                   	push   eax
c000b65d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b664:	57                   	push   edi
c000b665:	e8 d6 4f ff ff       	call   c0000640 <strcpy>
c000b66a:	58                   	pop    eax
c000b66b:	5a                   	pop    edx
c000b66c:	68 23 24 02 c0       	push   0xc0022423
c000b671:	57                   	push   edi
c000b672:	e8 c9 51 ff ff       	call   c0000840 <strcat>
c000b677:	59                   	pop    ecx
c000b678:	58                   	pop    eax
c000b679:	55                   	push   ebp
c000b67a:	57                   	push   edi
c000b67b:	e8 c0 51 ff ff       	call   c0000840 <strcat>
c000b680:	83 c4 10             	add    esp,0x10
c000b683:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b686:	3c 60                	cmp    al,0x60
c000b688:	7e 03                	jle    c000b68d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b68a:	83 e8 20             	sub    eax,0x20
c000b68d:	88 04 24             	mov    BYTE PTR [esp],al
c000b690:	88 06                	mov    BYTE PTR [esi],al
c000b692:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b699:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b69f:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b6a3:	bf 03 00 00 00       	mov    edi,0x3
c000b6a8:	b8 03 00 00 00       	mov    eax,0x3
c000b6ad:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b6b1:	89 e9                	mov    ecx,ebp
c000b6b3:	85 ed                	test   ebp,ebp
c000b6b5:	0f 84 97 00 00 00    	je     c000b752 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b6bb:	8d 57 01             	lea    edx,[edi+0x1]
c000b6be:	83 fd 5c             	cmp    ebp,0x5c
c000b6c1:	74 05                	je     c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b6c3:	83 fd 2f             	cmp    ebp,0x2f
c000b6c6:	75 12                	jne    c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6c8:	89 c5                	mov    ebp,eax
c000b6ca:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b6cf:	74 09                	je     c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d1:	40                   	inc    eax
c000b6d2:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b6d6:	89 d7                	mov    edi,edx
c000b6d8:	eb d3                	jmp    c000b6ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6da:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b6df:	0f be e9             	movsx  ebp,cl
c000b6e2:	75 5e                	jne    c000b742 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e4:	83 fd 2e             	cmp    ebp,0x2e
c000b6e7:	75 59                	jne    c000b742 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e9:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b6ed:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b6f2:	74 18                	je     c000b70c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b6f4:	83 fd 2e             	cmp    ebp,0x2e
c000b6f7:	74 53                	je     c000b74c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b6f9:	89 fa                	mov    edx,edi
c000b6fb:	42                   	inc    edx
c000b6fc:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b700:	83 f9 2f             	cmp    ecx,0x2f
c000b703:	74 f6                	je     c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b705:	83 f9 5c             	cmp    ecx,0x5c
c000b708:	74 f1                	je     c000b6fb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b70a:	eb ca                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b70c:	83 fd 2e             	cmp    ebp,0x2e
c000b70f:	74 3b                	je     c000b74c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b711:	83 f8 03             	cmp    eax,0x3
c000b714:	74 c0                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b716:	42                   	inc    edx
c000b717:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b71b:	83 f9 5c             	cmp    ecx,0x5c
c000b71e:	74 f6                	je     c000b716 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b720:	83 f9 2f             	cmp    ecx,0x2f
c000b723:	74 f1                	je     c000b716 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b725:	48                   	dec    eax
c000b726:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b72a:	75 06                	jne    c000b732 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b72c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b730:	eb f3                	jmp    c000b725 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b732:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b736:	74 07                	je     c000b73f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b738:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b73c:	48                   	dec    eax
c000b73d:	eb f3                	jmp    c000b732 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b73f:	40                   	inc    eax
c000b740:	eb 94                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b742:	83 fd 5c             	cmp    ebp,0x5c
c000b745:	74 8f                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b747:	83 fd 2f             	cmp    ebp,0x2f
c000b74a:	74 8a                	je     c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b74c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b74f:	40                   	inc    eax
c000b750:	eb 84                	jmp    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b752:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b756:	83 ec 0c             	sub    esp,0xc
c000b759:	56                   	push   esi
c000b75a:	e8 11 4e ff ff       	call   c0000570 <strlen>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b767:	75 26                	jne    c000b78f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a5>
c000b769:	83 ec 0c             	sub    esp,0xc
c000b76c:	56                   	push   esi
c000b76d:	e8 fe 4d ff ff       	call   c0000570 <strlen>
c000b772:	83 c4 10             	add    esp,0x10
c000b775:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b77a:	74 26                	je     c000b7a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1b8>
c000b77c:	83 ec 0c             	sub    esp,0xc
c000b77f:	56                   	push   esi
c000b780:	e8 eb 4d ff ff       	call   c0000570 <strlen>
c000b785:	83 c4 10             	add    esp,0x10
c000b788:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b78d:	eb c7                	jmp    c000b756 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b78f:	83 ec 0c             	sub    esp,0xc
c000b792:	56                   	push   esi
c000b793:	e8 d8 4d ff ff       	call   c0000570 <strlen>
c000b798:	83 c4 10             	add    esp,0x10
c000b79b:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b7a0:	74 c7                	je     c000b769 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17f>
c000b7a2:	83 ec 0c             	sub    esp,0xc
c000b7a5:	56                   	push   esi
c000b7a6:	e8 c5 4d ff ff       	call   c0000570 <strlen>
c000b7ab:	0f be 7c 06 fe       	movsx  edi,BYTE PTR [esi+eax*1-0x2]
c000b7b0:	89 34 24             	mov    DWORD PTR [esp],esi
c000b7b3:	e8 b8 4d ff ff       	call   c0000570 <strlen>
c000b7b8:	57                   	push   edi
c000b7b9:	31 ff                	xor    edi,edi
c000b7bb:	0f be 44 06 ff       	movsx  eax,BYTE PTR [esi+eax*1-0x1]
c000b7c0:	50                   	push   eax
c000b7c1:	56                   	push   esi
c000b7c2:	68 0f 14 02 c0       	push   0xc002140f
c000b7c7:	e8 79 f1 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b7cc:	83 c4 14             	add    esp,0x14
c000b7cf:	56                   	push   esi
c000b7d0:	e8 9b 4d ff ff       	call   c0000570 <strlen>
c000b7d5:	83 c4 10             	add    esp,0x10
c000b7d8:	80 7c 06 ff 77       	cmp    BYTE PTR [esi+eax*1-0x1],0x77
c000b7dd:	75 46                	jne    c000b825 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x23b>
c000b7df:	83 ec 0c             	sub    esp,0xc
c000b7e2:	56                   	push   esi
c000b7e3:	e8 88 4d ff ff       	call   c0000570 <strlen>
c000b7e8:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b7ed:	5b                   	pop    ebx
c000b7ee:	5f                   	pop    edi
c000b7ef:	56                   	push   esi
c000b7f0:	68 22 14 02 c0       	push   0xc0021422
c000b7f5:	e8 4b f1 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b7fa:	83 c4 10             	add    esp,0x10
c000b7fd:	eb 43                	jmp    c000b842 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x258>
c000b7ff:	50                   	push   eax
c000b800:	50                   	push   eax
c000b801:	56                   	push   esi
c000b802:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b806:	55                   	push   ebp
c000b807:	e8 34 4e ff ff       	call   c0000640 <strcpy>
c000b80c:	5a                   	pop    edx
c000b80d:	59                   	pop    ecx
c000b80e:	56                   	push   esi
c000b80f:	55                   	push   ebp
c000b810:	e8 36 f7 ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c000b815:	83 c4 10             	add    esp,0x10
c000b818:	48                   	dec    eax
c000b819:	75 27                	jne    c000b842 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x258>
c000b81b:	8d 47 01             	lea    eax,[edi+0x1]
c000b81e:	83 ff 14             	cmp    edi,0x14
c000b821:	74 08                	je     c000b82b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x241>
c000b823:	89 c7                	mov    edi,eax
c000b825:	85 db                	test   ebx,ebx
c000b827:	75 d6                	jne    c000b7ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x215>
c000b829:	eb 17                	jmp    c000b842 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x258>
c000b82b:	83 ec 0c             	sub    esp,0xc
c000b82e:	bf 15 00 00 00       	mov    edi,0x15
c000b833:	68 37 14 02 c0       	push   0xc0021437
c000b838:	e8 64 5b 00 00       	call   c00113a1 <KePanic(char const*)>
c000b83d:	83 c4 10             	add    esp,0x10
c000b840:	eb e3                	jmp    c000b825 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x23b>
c000b842:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b848:	5b                   	pop    ebx
c000b849:	5e                   	pop    esi
c000b84a:	5f                   	pop    edi
c000b84b:	5d                   	pop    ebp
c000b84c:	c3                   	ret    
c000b84d:	90                   	nop

c000b84e <File::File(char const*, Process*)>:
c000b84e:	83 ec 0c             	sub    esp,0xc
c000b851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b855:	83 ec 08             	sub    esp,0x8
c000b858:	6a 00                	push   0x0
c000b85a:	50                   	push   eax
c000b85b:	e8 5e d9 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	ba d4 14 02 c0       	mov    edx,0xc00214d4
c000b868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b86c:	89 10                	mov    DWORD PTR [eax],edx
c000b86e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b873:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000b877:	0f 95 c0             	setne  al
c000b87a:	0f b6 c0             	movzx  eax,al
c000b87d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b881:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b887:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b88b:	83 c2 0d             	add    edx,0xd
c000b88e:	50                   	push   eax
c000b88f:	51                   	push   ecx
c000b890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b894:	52                   	push   edx
c000b895:	e8 50 fd ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b89a:	83 c4 10             	add    esp,0x10
c000b89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a1:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b8a4:	83 e8 41             	sub    eax,0x41
c000b8a7:	88 c2                	mov    dl,al
c000b8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ad:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b7:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8bf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8c5:	0f b6 c0             	movzx  eax,al
c000b8c8:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8cf:	85 c0                	test   eax,eax
c000b8d1:	74 3e                	je     c000b911 <File::File(char const*, Process*)+0xc3>
c000b8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8dd:	0f b6 c0             	movzx  eax,al
c000b8e0:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8e7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b8ed:	85 c0                	test   eax,eax
c000b8ef:	75 20                	jne    c000b911 <File::File(char const*, Process*)+0xc3>
c000b8f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8f5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8fb:	0f b6 c0             	movzx  eax,al
c000b8fe:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b905:	83 ec 0c             	sub    esp,0xc
c000b908:	50                   	push   eax
c000b909:	e8 84 21 00 00       	call   c000da92 <LogicalDisk::mount()>
c000b90e:	83 c4 10             	add    esp,0x10
c000b911:	90                   	nop
c000b912:	83 c4 0c             	add    esp,0xc
c000b915:	c3                   	ret    

c000b916 <File::open(FileOpenMode)>:
c000b916:	53                   	push   ebx
c000b917:	b8 0b 00 00 00       	mov    eax,0xb
c000b91c:	83 ec 08             	sub    esp,0x8
c000b91f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b923:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b92a:	83 fa 19             	cmp    edx,0x19
c000b92d:	77 40                	ja     c000b96f <File::open(FileOpenMode)+0x59>
c000b92f:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b936:	85 d2                	test   edx,edx
c000b938:	74 35                	je     c000b96f <File::open(FileOpenMode)+0x59>
c000b93a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b940:	85 d2                	test   edx,edx
c000b942:	74 2b                	je     c000b96f <File::open(FileOpenMode)+0x59>
c000b944:	b8 06 00 00 00       	mov    eax,0x6
c000b949:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b94d:	75 20                	jne    c000b96f <File::open(FileOpenMode)+0x59>
c000b94f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b951:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b95b:	51                   	push   ecx
c000b95c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b95f:	51                   	push   ecx
c000b960:	52                   	push   edx
c000b961:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b964:	83 c4 10             	add    esp,0x10
c000b967:	85 c0                	test   eax,eax
c000b969:	75 04                	jne    c000b96f <File::open(FileOpenMode)+0x59>
c000b96b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b96f:	83 c4 08             	add    esp,0x8
c000b972:	5b                   	pop    ebx
c000b973:	c3                   	ret    

c000b974 <File::close()>:
c000b974:	53                   	push   ebx
c000b975:	b8 0b 00 00 00       	mov    eax,0xb
c000b97a:	83 ec 08             	sub    esp,0x8
c000b97d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b981:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b988:	83 f9 19             	cmp    ecx,0x19
c000b98b:	77 41                	ja     c000b9ce <File::close()+0x5a>
c000b98d:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b994:	85 db                	test   ebx,ebx
c000b996:	74 36                	je     c000b9ce <File::close()+0x5a>
c000b998:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b99f:	74 2d                	je     c000b9ce <File::close()+0x5a>
c000b9a1:	b8 05 00 00 00       	mov    eax,0x5
c000b9a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9aa:	74 22                	je     c000b9ce <File::close()+0x5a>
c000b9ac:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b9b0:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b9b7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b9bd:	53                   	push   ebx
c000b9be:	53                   	push   ebx
c000b9bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b9c1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b9c7:	50                   	push   eax
c000b9c8:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b9cb:	83 c4 10             	add    esp,0x10
c000b9ce:	83 c4 08             	add    esp,0x8
c000b9d1:	5b                   	pop    ebx
c000b9d2:	c3                   	ret    
c000b9d3:	90                   	nop

c000b9d4 <File::seek(unsigned long long)>:
c000b9d4:	56                   	push   esi
c000b9d5:	53                   	push   ebx
c000b9d6:	b8 0b 00 00 00       	mov    eax,0xb
c000b9db:	51                   	push   ecx
c000b9dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9e4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9ef:	83 fa 19             	cmp    edx,0x19
c000b9f2:	77 31                	ja     c000ba25 <File::seek(unsigned long long)+0x51>
c000b9f4:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9fb:	85 d2                	test   edx,edx
c000b9fd:	74 26                	je     c000ba25 <File::seek(unsigned long long)+0x51>
c000b9ff:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba05:	85 d2                	test   edx,edx
c000ba07:	74 1c                	je     c000ba25 <File::seek(unsigned long long)+0x51>
c000ba09:	b8 05 00 00 00       	mov    eax,0x5
c000ba0e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba12:	74 11                	je     c000ba25 <File::seek(unsigned long long)+0x51>
c000ba14:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba16:	53                   	push   ebx
c000ba17:	51                   	push   ecx
c000ba18:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba1e:	52                   	push   edx
c000ba1f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ba22:	83 c4 10             	add    esp,0x10
c000ba25:	5a                   	pop    edx
c000ba26:	5b                   	pop    ebx
c000ba27:	5e                   	pop    esi
c000ba28:	c3                   	ret    
c000ba29:	90                   	nop

c000ba2a <File::truncate(unsigned long long)>:
c000ba2a:	56                   	push   esi
c000ba2b:	53                   	push   ebx
c000ba2c:	b8 0b 00 00 00       	mov    eax,0xb
c000ba31:	51                   	push   ecx
c000ba32:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba3a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba45:	83 fa 19             	cmp    edx,0x19
c000ba48:	77 31                	ja     c000ba7b <File::truncate(unsigned long long)+0x51>
c000ba4a:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba51:	85 d2                	test   edx,edx
c000ba53:	74 26                	je     c000ba7b <File::truncate(unsigned long long)+0x51>
c000ba55:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba5b:	85 d2                	test   edx,edx
c000ba5d:	74 1c                	je     c000ba7b <File::truncate(unsigned long long)+0x51>
c000ba5f:	b8 05 00 00 00       	mov    eax,0x5
c000ba64:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba68:	74 11                	je     c000ba7b <File::truncate(unsigned long long)+0x51>
c000ba6a:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba6c:	53                   	push   ebx
c000ba6d:	51                   	push   ecx
c000ba6e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba74:	52                   	push   edx
c000ba75:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba78:	83 c4 10             	add    esp,0x10
c000ba7b:	5a                   	pop    edx
c000ba7c:	5b                   	pop    ebx
c000ba7d:	5e                   	pop    esi
c000ba7e:	c3                   	ret    
c000ba7f:	90                   	nop

c000ba80 <File::tell(unsigned long long*)>:
c000ba80:	83 ec 0c             	sub    esp,0xc
c000ba83:	b8 0b 00 00 00       	mov    eax,0xb
c000ba88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba8c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba93:	83 fa 19             	cmp    edx,0x19
c000ba96:	77 34                	ja     c000bacc <File::tell(unsigned long long*)+0x4c>
c000ba98:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba9f:	85 d2                	test   edx,edx
c000baa1:	74 29                	je     c000bacc <File::tell(unsigned long long*)+0x4c>
c000baa3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000baa9:	85 d2                	test   edx,edx
c000baab:	74 1f                	je     c000bacc <File::tell(unsigned long long*)+0x4c>
c000baad:	b8 05 00 00 00       	mov    eax,0x5
c000bab2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bab6:	74 14                	je     c000bacc <File::tell(unsigned long long*)+0x4c>
c000bab8:	50                   	push   eax
c000bab9:	8b 02                	mov    eax,DWORD PTR [edx]
c000babb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000babf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bac5:	52                   	push   edx
c000bac6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	83 c4 0c             	add    esp,0xc
c000bacf:	c3                   	ret    

c000bad0 <File::rewind()>:
c000bad0:	83 ec 10             	sub    esp,0x10
c000bad3:	6a 00                	push   0x0
c000bad5:	6a 00                	push   0x0
c000bad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badb:	e8 f4 fe ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c000bae0:	83 c4 1c             	add    esp,0x1c
c000bae3:	c3                   	ret    

c000bae4 <File::unlink()>:
c000bae4:	83 ec 0c             	sub    esp,0xc
c000bae7:	b8 0b 00 00 00       	mov    eax,0xb
c000baec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baf0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baf7:	83 f9 19             	cmp    ecx,0x19
c000bafa:	77 2f                	ja     c000bb2b <File::unlink()+0x47>
c000bafc:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb03:	85 c9                	test   ecx,ecx
c000bb05:	74 24                	je     c000bb2b <File::unlink()+0x47>
c000bb07:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb0d:	85 c9                	test   ecx,ecx
c000bb0f:	74 1a                	je     c000bb2b <File::unlink()+0x47>
c000bb11:	b8 06 00 00 00       	mov    eax,0x6
c000bb16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb1a:	75 0f                	jne    c000bb2b <File::unlink()+0x47>
c000bb1c:	83 c2 0d             	add    edx,0xd
c000bb1f:	50                   	push   eax
c000bb20:	50                   	push   eax
c000bb21:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb23:	52                   	push   edx
c000bb24:	51                   	push   ecx
c000bb25:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bb28:	83 c4 10             	add    esp,0x10
c000bb2b:	83 c4 0c             	add    esp,0xc
c000bb2e:	c3                   	ret    
c000bb2f:	90                   	nop

c000bb30 <File::rename(char const*)>:
c000bb30:	83 ec 0c             	sub    esp,0xc
c000bb33:	b8 0b 00 00 00       	mov    eax,0xb
c000bb38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb43:	83 f9 19             	cmp    ecx,0x19
c000bb46:	77 32                	ja     c000bb7a <File::rename(char const*)+0x4a>
c000bb48:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb4f:	85 c9                	test   ecx,ecx
c000bb51:	74 27                	je     c000bb7a <File::rename(char const*)+0x4a>
c000bb53:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb59:	85 c9                	test   ecx,ecx
c000bb5b:	74 1d                	je     c000bb7a <File::rename(char const*)+0x4a>
c000bb5d:	b8 06 00 00 00       	mov    eax,0x6
c000bb62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb66:	75 12                	jne    c000bb7a <File::rename(char const*)+0x4a>
c000bb68:	83 c2 0d             	add    edx,0xd
c000bb6b:	50                   	push   eax
c000bb6c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb72:	52                   	push   edx
c000bb73:	51                   	push   ecx
c000bb74:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb77:	83 c4 10             	add    esp,0x10
c000bb7a:	83 c4 0c             	add    esp,0xc
c000bb7d:	c3                   	ret    

c000bb7e <File::chfatattr(unsigned char, unsigned char)>:
c000bb7e:	57                   	push   edi
c000bb7f:	b8 0b 00 00 00       	mov    eax,0xb
c000bb84:	56                   	push   esi
c000bb85:	53                   	push   ebx
c000bb86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb8a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb95:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb99:	83 f9 19             	cmp    ecx,0x19
c000bb9c:	77 37                	ja     c000bbd5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb9e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bba5:	85 c9                	test   ecx,ecx
c000bba7:	74 2c                	je     c000bbd5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bba9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbaf:	85 c9                	test   ecx,ecx
c000bbb1:	74 22                	je     c000bbd5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bbb3:	b8 06 00 00 00       	mov    eax,0x6
c000bbb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbbc:	75 17                	jne    c000bbd5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bbbe:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bbc0:	89 f0                	mov    eax,esi
c000bbc2:	83 c2 0d             	add    edx,0xd
c000bbc5:	0f b6 f0             	movzx  esi,al
c000bbc8:	0f b6 db             	movzx  ebx,bl
c000bbcb:	56                   	push   esi
c000bbcc:	53                   	push   ebx
c000bbcd:	52                   	push   edx
c000bbce:	51                   	push   ecx
c000bbcf:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	5b                   	pop    ebx
c000bbd6:	5e                   	pop    esi
c000bbd7:	5f                   	pop    edi
c000bbd8:	c3                   	ret    
c000bbd9:	90                   	nop

c000bbda <File::exists()>:
c000bbda:	83 ec 0c             	sub    esp,0xc
c000bbdd:	31 c0                	xor    eax,eax
c000bbdf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbe3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbea:	83 f9 19             	cmp    ecx,0x19
c000bbed:	77 24                	ja     c000bc13 <File::exists()+0x39>
c000bbef:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbf6:	85 c9                	test   ecx,ecx
c000bbf8:	74 19                	je     c000bc13 <File::exists()+0x39>
c000bbfa:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc00:	85 c9                	test   ecx,ecx
c000bc02:	74 0f                	je     c000bc13 <File::exists()+0x39>
c000bc04:	83 c2 0d             	add    edx,0xd
c000bc07:	50                   	push   eax
c000bc08:	50                   	push   eax
c000bc09:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc0b:	52                   	push   edx
c000bc0c:	51                   	push   ecx
c000bc0d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bc10:	83 c4 10             	add    esp,0x10
c000bc13:	83 c4 0c             	add    esp,0xc
c000bc16:	c3                   	ret    
c000bc17:	90                   	nop

c000bc18 <File::stat(unsigned long long*, bool*)>:
c000bc18:	56                   	push   esi
c000bc19:	53                   	push   ebx
c000bc1a:	50                   	push   eax
c000bc1b:	b8 0b 00 00 00       	mov    eax,0xb
c000bc20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc24:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc28:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc33:	83 f9 19             	cmp    ecx,0x19
c000bc36:	77 3d                	ja     c000bc75 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc38:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bc3f:	85 c9                	test   ecx,ecx
c000bc41:	74 32                	je     c000bc75 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc43:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc49:	85 c9                	test   ecx,ecx
c000bc4b:	74 28                	je     c000bc75 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc4d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc53:	74 13                	je     c000bc68 <File::stat(unsigned long long*, bool*)+0x50>
c000bc55:	83 ec 04             	sub    esp,0x4
c000bc58:	56                   	push   esi
c000bc59:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc5f:	51                   	push   ecx
c000bc60:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc63:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc66:	eb 0a                	jmp    c000bc72 <File::stat(unsigned long long*, bool*)+0x5a>
c000bc68:	53                   	push   ebx
c000bc69:	83 c2 0d             	add    edx,0xd
c000bc6c:	56                   	push   esi
c000bc6d:	52                   	push   edx
c000bc6e:	51                   	push   ecx
c000bc6f:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc72:	83 c4 10             	add    esp,0x10
c000bc75:	5a                   	pop    edx
c000bc76:	5b                   	pop    ebx
c000bc77:	5e                   	pop    esi
c000bc78:	c3                   	ret    

c000bc79 <Fs::setcwd(Process*, char*)>:
c000bc79:	55                   	push   ebp
c000bc7a:	57                   	push   edi
c000bc7b:	56                   	push   esi
c000bc7c:	53                   	push   ebx
c000bc7d:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc83:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc8a:	6a 00                	push   0x0
c000bc8c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc92:	57                   	push   edi
c000bc93:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc9a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc9e:	56                   	push   esi
c000bc9f:	e8 46 f9 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bca4:	89 34 24             	mov    DWORD PTR [esp],esi
c000bca7:	e8 c4 48 ff ff       	call   c0000570 <strlen>
c000bcac:	83 c4 10             	add    esp,0x10
c000bcaf:	83 f8 02             	cmp    eax,0x2
c000bcb2:	77 15                	ja     c000bcc9 <Fs::setcwd(Process*, char*)+0x50>
c000bcb4:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bcb9:	83 eb 41             	sub    ebx,0x41
c000bcbc:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bcc3:	85 c0                	test   eax,eax
c000bcc5:	75 1c                	jne    c000bce3 <Fs::setcwd(Process*, char*)+0x6a>
c000bcc7:	eb 2f                	jmp    c000bcf8 <Fs::setcwd(Process*, char*)+0x7f>
c000bcc9:	83 ec 0c             	sub    esp,0xc
c000bccc:	56                   	push   esi
c000bccd:	e8 9e 48 ff ff       	call   c0000570 <strlen>
c000bcd2:	83 c4 10             	add    esp,0x10
c000bcd5:	83 f8 03             	cmp    eax,0x3
c000bcd8:	75 57                	jne    c000bd31 <Fs::setcwd(Process*, char*)+0xb8>
c000bcda:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bcdf:	75 50                	jne    c000bd31 <Fs::setcwd(Process*, char*)+0xb8>
c000bce1:	eb d1                	jmp    c000bcb4 <Fs::setcwd(Process*, char*)+0x3b>
c000bce3:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bcea:	75 0c                	jne    c000bcf8 <Fs::setcwd(Process*, char*)+0x7f>
c000bcec:	83 ec 0c             	sub    esp,0xc
c000bcef:	50                   	push   eax
c000bcf0:	e8 9d 1d 00 00       	call   c000da92 <LogicalDisk::mount()>
c000bcf5:	83 c4 10             	add    esp,0x10
c000bcf8:	b8 03 00 00 00       	mov    eax,0x3
c000bcfd:	83 fb 19             	cmp    ebx,0x19
c000bd00:	0f 87 c6 00 00 00    	ja     c000bdcc <Fs::setcwd(Process*, char*)+0x153>
c000bd06:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bd0d:	b8 05 00 00 00       	mov    eax,0x5
c000bd12:	85 d2                	test   edx,edx
c000bd14:	0f 84 b2 00 00 00    	je     c000bdcc <Fs::setcwd(Process*, char*)+0x153>
c000bd1a:	b8 06 00 00 00       	mov    eax,0x6
c000bd1f:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bd26:	0f 85 92 00 00 00    	jne    c000bdbe <Fs::setcwd(Process*, char*)+0x145>
c000bd2c:	e9 9b 00 00 00       	jmp    c000bdcc <Fs::setcwd(Process*, char*)+0x153>
c000bd31:	83 ec 0c             	sub    esp,0xc
c000bd34:	68 14 01 00 00       	push   0x114
c000bd39:	e8 78 bd ff ff       	call   c0007ab6 <malloc>
c000bd3e:	83 c4 0c             	add    esp,0xc
c000bd41:	89 c3                	mov    ebx,eax
c000bd43:	55                   	push   ebp
c000bd44:	56                   	push   esi
c000bd45:	50                   	push   eax
c000bd46:	e8 03 fb ff ff       	call   c000b84e <File::File(char const*, Process*)>
c000bd4b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bd50:	83 c4 0c             	add    esp,0xc
c000bd53:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd57:	50                   	push   eax
c000bd58:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd5c:	50                   	push   eax
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 b5 fe ff ff       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	83 f8 02             	cmp    eax,0x2
c000bd69:	74 27                	je     c000bd92 <Fs::setcwd(Process*, char*)+0x119>
c000bd6b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd70:	75 1c                	jne    c000bd8e <Fs::setcwd(Process*, char*)+0x115>
c000bd72:	b8 02 00 00 00       	mov    eax,0x2
c000bd77:	85 db                	test   ebx,ebx
c000bd79:	74 51                	je     c000bdcc <Fs::setcwd(Process*, char*)+0x153>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd80:	53                   	push   ebx
c000bd81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd84:	83 c4 10             	add    esp,0x10
c000bd87:	b8 02 00 00 00       	mov    eax,0x2
c000bd8c:	eb 3e                	jmp    c000bdcc <Fs::setcwd(Process*, char*)+0x153>
c000bd8e:	85 c0                	test   eax,eax
c000bd90:	74 1c                	je     c000bdae <Fs::setcwd(Process*, char*)+0x135>
c000bd92:	b8 01 00 00 00       	mov    eax,0x1
c000bd97:	85 db                	test   ebx,ebx
c000bd99:	74 31                	je     c000bdcc <Fs::setcwd(Process*, char*)+0x153>
c000bd9b:	83 ec 0c             	sub    esp,0xc
c000bd9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bda0:	53                   	push   ebx
c000bda1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bda4:	83 c4 10             	add    esp,0x10
c000bda7:	b8 01 00 00 00       	mov    eax,0x1
c000bdac:	eb 1e                	jmp    c000bdcc <Fs::setcwd(Process*, char*)+0x153>
c000bdae:	85 db                	test   ebx,ebx
c000bdb0:	74 0c                	je     c000bdbe <Fs::setcwd(Process*, char*)+0x145>
c000bdb2:	83 ec 0c             	sub    esp,0xc
c000bdb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bdb7:	53                   	push   ebx
c000bdb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bdbb:	83 c4 10             	add    esp,0x10
c000bdbe:	50                   	push   eax
c000bdbf:	50                   	push   eax
c000bdc0:	56                   	push   esi
c000bdc1:	57                   	push   edi
c000bdc2:	e8 79 48 ff ff       	call   c0000640 <strcpy>
c000bdc7:	83 c4 10             	add    esp,0x10
c000bdca:	31 c0                	xor    eax,eax
c000bdcc:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bdd2:	5b                   	pop    ebx
c000bdd3:	5e                   	pop    esi
c000bdd4:	5f                   	pop    edi
c000bdd5:	5d                   	pop    ebp
c000bdd6:	c3                   	ret    
c000bdd7:	90                   	nop

c000bdd8 <Directory::Directory(char const*, Process*)>:
c000bdd8:	83 ec 0c             	sub    esp,0xc
c000bddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bddf:	83 ec 08             	sub    esp,0x8
c000bde2:	6a 00                	push   0x0
c000bde4:	50                   	push   eax
c000bde5:	e8 d4 d3 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bdea:	83 c4 10             	add    esp,0x10
c000bded:	ba f0 14 02 c0       	mov    edx,0xc00214f0
c000bdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf6:	89 10                	mov    DWORD PTR [eax],edx
c000bdf8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bdfd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000be01:	0f 95 c0             	setne  al
c000be04:	0f b6 c0             	movzx  eax,al
c000be07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be0b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000be11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be15:	83 c2 0d             	add    edx,0xd
c000be18:	50                   	push   eax
c000be19:	51                   	push   ecx
c000be1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be1e:	52                   	push   edx
c000be1f:	e8 c6 f7 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000be24:	83 c4 10             	add    esp,0x10
c000be27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000be2e:	83 e8 41             	sub    eax,0x41
c000be31:	88 c2                	mov    dl,al
c000be33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be37:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000be3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be41:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000be45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be49:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be4f:	0f b6 c0             	movzx  eax,al
c000be52:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be59:	85 c0                	test   eax,eax
c000be5b:	74 3e                	je     c000be9b <Directory::Directory(char const*, Process*)+0xc3>
c000be5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be61:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be67:	0f b6 c0             	movzx  eax,al
c000be6a:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be71:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be77:	85 c0                	test   eax,eax
c000be79:	75 20                	jne    c000be9b <Directory::Directory(char const*, Process*)+0xc3>
c000be7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be7f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be85:	0f b6 c0             	movzx  eax,al
c000be88:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be8f:	83 ec 0c             	sub    esp,0xc
c000be92:	50                   	push   eax
c000be93:	e8 fa 1b 00 00       	call   c000da92 <LogicalDisk::mount()>
c000be98:	83 c4 10             	add    esp,0x10
c000be9b:	90                   	nop
c000be9c:	83 c4 0c             	add    esp,0xc
c000be9f:	c3                   	ret    

c000bea0 <Directory::open()>:
c000bea0:	53                   	push   ebx
c000bea1:	b8 0b 00 00 00       	mov    eax,0xb
c000bea6:	83 ec 08             	sub    esp,0x8
c000bea9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bead:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000beb4:	83 fa 19             	cmp    edx,0x19
c000beb7:	77 3d                	ja     c000bef6 <Directory::open()+0x56>
c000beb9:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bec0:	85 d2                	test   edx,edx
c000bec2:	74 32                	je     c000bef6 <Directory::open()+0x56>
c000bec4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000beca:	85 d2                	test   edx,edx
c000becc:	74 28                	je     c000bef6 <Directory::open()+0x56>
c000bece:	b8 06 00 00 00       	mov    eax,0x6
c000bed3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bed7:	75 1d                	jne    c000bef6 <Directory::open()+0x56>
c000bed9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bedf:	50                   	push   eax
c000bee0:	8b 02                	mov    eax,DWORD PTR [edx]
c000bee2:	51                   	push   ecx
c000bee3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bee6:	51                   	push   ecx
c000bee7:	52                   	push   edx
c000bee8:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000beeb:	83 c4 10             	add    esp,0x10
c000beee:	85 c0                	test   eax,eax
c000bef0:	75 04                	jne    c000bef6 <Directory::open()+0x56>
c000bef2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bef6:	83 c4 08             	add    esp,0x8
c000bef9:	5b                   	pop    ebx
c000befa:	c3                   	ret    
c000befb:	90                   	nop

c000befc <Directory::close()>:
c000befc:	53                   	push   ebx
c000befd:	b8 0b 00 00 00       	mov    eax,0xb
c000bf02:	83 ec 08             	sub    esp,0x8
c000bf05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf09:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf10:	83 f9 19             	cmp    ecx,0x19
c000bf13:	77 41                	ja     c000bf56 <Directory::close()+0x5a>
c000bf15:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf1c:	85 db                	test   ebx,ebx
c000bf1e:	74 36                	je     c000bf56 <Directory::close()+0x5a>
c000bf20:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bf27:	74 2d                	je     c000bf56 <Directory::close()+0x5a>
c000bf29:	b8 05 00 00 00       	mov    eax,0x5
c000bf2e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf32:	74 22                	je     c000bf56 <Directory::close()+0x5a>
c000bf34:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bf38:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bf3f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bf45:	53                   	push   ebx
c000bf46:	53                   	push   ebx
c000bf47:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bf49:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf4f:	50                   	push   eax
c000bf50:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf53:	83 c4 10             	add    esp,0x10
c000bf56:	83 c4 08             	add    esp,0x8
c000bf59:	5b                   	pop    ebx
c000bf5a:	c3                   	ret    
c000bf5b:	90                   	nop

c000bf5c <Directory::unlink()>:
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	b8 0b 00 00 00       	mov    eax,0xb
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf6f:	83 f9 19             	cmp    ecx,0x19
c000bf72:	77 2f                	ja     c000bfa3 <Directory::unlink()+0x47>
c000bf74:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf7b:	85 c9                	test   ecx,ecx
c000bf7d:	74 24                	je     c000bfa3 <Directory::unlink()+0x47>
c000bf7f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf85:	85 c9                	test   ecx,ecx
c000bf87:	74 1a                	je     c000bfa3 <Directory::unlink()+0x47>
c000bf89:	b8 06 00 00 00       	mov    eax,0x6
c000bf8e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf92:	75 0f                	jne    c000bfa3 <Directory::unlink()+0x47>
c000bf94:	83 c2 0d             	add    edx,0xd
c000bf97:	50                   	push   eax
c000bf98:	50                   	push   eax
c000bf99:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf9b:	52                   	push   edx
c000bf9c:	51                   	push   ecx
c000bf9d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 c4 0c             	add    esp,0xc
c000bfa6:	c3                   	ret    
c000bfa7:	90                   	nop

c000bfa8 <Directory::rename(char const*)>:
c000bfa8:	83 ec 0c             	sub    esp,0xc
c000bfab:	b8 0b 00 00 00       	mov    eax,0xb
c000bfb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfbb:	83 f9 19             	cmp    ecx,0x19
c000bfbe:	77 32                	ja     c000bff2 <Directory::rename(char const*)+0x4a>
c000bfc0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfc7:	85 c9                	test   ecx,ecx
c000bfc9:	74 27                	je     c000bff2 <Directory::rename(char const*)+0x4a>
c000bfcb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfd1:	85 c9                	test   ecx,ecx
c000bfd3:	74 1d                	je     c000bff2 <Directory::rename(char const*)+0x4a>
c000bfd5:	b8 06 00 00 00       	mov    eax,0x6
c000bfda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfde:	75 12                	jne    c000bff2 <Directory::rename(char const*)+0x4a>
c000bfe0:	83 c2 0d             	add    edx,0xd
c000bfe3:	50                   	push   eax
c000bfe4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfea:	52                   	push   edx
c000bfeb:	51                   	push   ecx
c000bfec:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bfef:	83 c4 10             	add    esp,0x10
c000bff2:	83 c4 0c             	add    esp,0xc
c000bff5:	c3                   	ret    

c000bff6 <Directory::exists()>:
c000bff6:	83 ec 0c             	sub    esp,0xc
c000bff9:	31 c0                	xor    eax,eax
c000bffb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c006:	83 f9 19             	cmp    ecx,0x19
c000c009:	77 24                	ja     c000c02f <Directory::exists()+0x39>
c000c00b:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c012:	85 c9                	test   ecx,ecx
c000c014:	74 19                	je     c000c02f <Directory::exists()+0x39>
c000c016:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c01c:	85 c9                	test   ecx,ecx
c000c01e:	74 0f                	je     c000c02f <Directory::exists()+0x39>
c000c020:	83 c2 0d             	add    edx,0xd
c000c023:	50                   	push   eax
c000c024:	50                   	push   eax
c000c025:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c027:	52                   	push   edx
c000c028:	51                   	push   ecx
c000c029:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c02c:	83 c4 10             	add    esp,0x10
c000c02f:	83 c4 0c             	add    esp,0xc
c000c032:	c3                   	ret    
c000c033:	90                   	nop

c000c034 <Directory::read(dirent*)>:
c000c034:	83 ec 1c             	sub    esp,0x1c
c000c037:	b8 0b 00 00 00       	mov    eax,0xb
c000c03c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c040:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c047:	83 f9 19             	cmp    ecx,0x19
c000c04a:	77 30                	ja     c000c07c <Directory::read(dirent*)+0x48>
c000c04c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c053:	85 c9                	test   ecx,ecx
c000c055:	74 25                	je     c000c07c <Directory::read(dirent*)+0x48>
c000c057:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c05e:	74 1c                	je     c000c07c <Directory::read(dirent*)+0x48>
c000c060:	83 ec 0c             	sub    esp,0xc
c000c063:	8b 02                	mov    eax,DWORD PTR [edx]
c000c065:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c069:	51                   	push   ecx
c000c06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c06e:	6a 00                	push   0x0
c000c070:	68 10 01 00 00       	push   0x110
c000c075:	52                   	push   edx
c000c076:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c079:	83 c4 20             	add    esp,0x20
c000c07c:	83 c4 1c             	add    esp,0x1c
c000c07f:	c3                   	ret    

c000c080 <Directory::create()>:
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	b8 0b 00 00 00       	mov    eax,0xb
c000c088:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c08c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c093:	83 f9 19             	cmp    ecx,0x19
c000c096:	77 2f                	ja     c000c0c7 <Directory::create()+0x47>
c000c098:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c09f:	85 c9                	test   ecx,ecx
c000c0a1:	74 24                	je     c000c0c7 <Directory::create()+0x47>
c000c0a3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c0a9:	85 c9                	test   ecx,ecx
c000c0ab:	74 1a                	je     c000c0c7 <Directory::create()+0x47>
c000c0ad:	b8 06 00 00 00       	mov    eax,0x6
c000c0b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c0b6:	75 0f                	jne    c000c0c7 <Directory::create()+0x47>
c000c0b8:	83 c2 0d             	add    edx,0xd
c000c0bb:	50                   	push   eax
c000c0bc:	50                   	push   eax
c000c0bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c0bf:	52                   	push   edx
c000c0c0:	51                   	push   ecx
c000c0c1:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c0c4:	83 c4 10             	add    esp,0x10
c000c0c7:	83 c4 0c             	add    esp,0xc
c000c0ca:	c3                   	ret    
c000c0cb:	90                   	nop

c000c0cc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c0cc:	b8 0a 00 00 00       	mov    eax,0xa
c000c0d1:	c3                   	ret    
c000c0d2:	66 90                	xchg   ax,ax

c000c0d4 <Bus::Bus(char const*)>:
c000c0d4:	83 ec 0c             	sub    esp,0xc
c000c0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0db:	83 ec 08             	sub    esp,0x8
c000c0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e2:	50                   	push   eax
c000c0e3:	e8 22 08 00 00       	call   c000c90a <Device::Device(char const*)>
c000c0e8:	83 c4 10             	add    esp,0x10
c000c0eb:	ba 0c 15 02 c0       	mov    edx,0xc002150c
c000c0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f4:	89 10                	mov    DWORD PTR [eax],edx
c000c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c104:	90                   	nop
c000c105:	83 c4 0c             	add    esp,0xc
c000c108:	c3                   	ret    
c000c109:	90                   	nop
c000c10a:	66 90                	xchg   ax,ax

c000c10c <Bus::~Bus()>:
c000c10c:	83 ec 0c             	sub    esp,0xc
c000c10f:	ba 0c 15 02 c0       	mov    edx,0xc002150c
c000c114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c118:	89 10                	mov    DWORD PTR [eax],edx
c000c11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	50                   	push   eax
c000c122:	e8 4d 05 00 00       	call   c000c674 <Device::~Device()>
c000c127:	83 c4 10             	add    esp,0x10
c000c12a:	90                   	nop
c000c12b:	83 c4 0c             	add    esp,0xc
c000c12e:	c3                   	ret    
c000c12f:	90                   	nop

c000c130 <Bus::~Bus()>:
c000c130:	83 ec 0c             	sub    esp,0xc
c000c133:	83 ec 0c             	sub    esp,0xc
c000c136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c13a:	e8 cd ff ff ff       	call   c000c10c <Bus::~Bus()>
c000c13f:	83 c4 10             	add    esp,0x10
c000c142:	83 ec 08             	sub    esp,0x8
c000c145:	68 58 01 00 00       	push   0x158
c000c14a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c14e:	e8 c5 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c153:	83 c4 10             	add    esp,0x10
c000c156:	83 c4 0c             	add    esp,0xc
c000c159:	c3                   	ret    

c000c15a <beepThread(void*)>:
c000c15a:	83 ec 0c             	sub    esp,0xc
c000c15d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c162:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c166:	48                   	dec    eax
c000c167:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c16c:	75 01                	jne    c000c16f <beepThread(void*)+0x15>
c000c16e:	fb                   	sti    
c000c16f:	83 ec 0c             	sub    esp,0xc
c000c172:	6b c2 0a             	imul   eax,edx,0xa
c000c175:	50                   	push   eax
c000c176:	e8 15 9e 00 00       	call   c0015f90 <milliTenthSleep(unsigned int)>
c000c17b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c182:	e8 64 bd 00 00       	call   c0017eeb <HalMakeBeep(int)>
c000c187:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c18f:	83 c4 1c             	add    esp,0x1c
c000c192:	e9 dd 9c 00 00       	jmp    c0015e74 <blockTask(TaskState)>

c000c197 <Krnl::beep(int, int, bool)>:
c000c197:	56                   	push   esi
c000c198:	53                   	push   ebx
c000c199:	83 ec 10             	sub    esp,0x10
c000c19c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c1a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c1a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a8:	e8 3e bd 00 00       	call   c0017eeb <HalMakeBeep(int)>
c000c1ad:	83 c4 10             	add    esp,0x10
c000c1b0:	89 f0                	mov    eax,esi
c000c1b2:	84 c0                	test   al,al
c000c1b4:	74 1e                	je     c000c1d4 <Krnl::beep(int, int, bool)+0x3d>
c000c1b6:	83 ec 0c             	sub    esp,0xc
c000c1b9:	6b db 0a             	imul   ebx,ebx,0xa
c000c1bc:	53                   	push   ebx
c000c1bd:	e8 ce 9d 00 00       	call   c0015f90 <milliTenthSleep(unsigned int)>
c000c1c2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c1ca:	83 c4 14             	add    esp,0x14
c000c1cd:	5b                   	pop    ebx
c000c1ce:	5e                   	pop    esi
c000c1cf:	e9 17 bd 00 00       	jmp    c0017eeb <HalMakeBeep(int)>
c000c1d4:	68 e6 00 00 00       	push   0xe6
c000c1d9:	53                   	push   ebx
c000c1da:	68 5a c1 00 c0       	push   0xc000c15a
c000c1df:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1e5:	e8 26 98 00 00       	call   c0015a10 <Process::createThread(void (*)(void*), void*, int)>
c000c1ea:	83 c4 14             	add    esp,0x14
c000c1ed:	5b                   	pop    ebx
c000c1ee:	5e                   	pop    esi
c000c1ef:	c3                   	ret    

c000c1f0 <User::loadClockSettings(int)>:
c000c1f0:	53                   	push   ebx
c000c1f1:	83 ec 14             	sub    esp,0x14
c000c1f4:	68 14 01 00 00       	push   0x114
c000c1f9:	e8 b8 b8 ff ff       	call   c0007ab6 <malloc>
c000c1fe:	83 c4 0c             	add    esp,0xc
c000c201:	89 c3                	mov    ebx,eax
c000c203:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c209:	68 30 15 02 c0       	push   0xc0021530
c000c20e:	50                   	push   eax
c000c20f:	e8 3a f6 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c000c214:	58                   	pop    eax
c000c215:	5a                   	pop    edx
c000c216:	6a 01                	push   0x1
c000c218:	53                   	push   ebx
c000c219:	e8 f8 f6 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c000c21e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c221:	e8 4e f7 ff ff       	call   c000b974 <File::close()>
c000c226:	83 c4 10             	add    esp,0x10
c000c229:	85 db                	test   ebx,ebx
c000c22b:	74 0f                	je     c000c23c <User::loadClockSettings(int)+0x4c>
c000c22d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c22f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c233:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c236:	83 c4 08             	add    esp,0x8
c000c239:	5b                   	pop    ebx
c000c23a:	ff e0                	jmp    eax
c000c23c:	83 c4 08             	add    esp,0x8
c000c23f:	5b                   	pop    ebx
c000c240:	c3                   	ret    
c000c241:	90                   	nop

c000c242 <Clock::Clock(char const*)>:
c000c242:	83 ec 0c             	sub    esp,0xc
c000c245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c249:	83 ec 08             	sub    esp,0x8
c000c24c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c250:	50                   	push   eax
c000c251:	e8 b4 06 00 00       	call   c000c90a <Device::Device(char const*)>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	ba 58 15 02 c0       	mov    edx,0xc0021558
c000c25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c262:	89 10                	mov    DWORD PTR [eax],edx
c000c264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c268:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c272:	90                   	nop
c000c273:	83 c4 0c             	add    esp,0xc
c000c276:	c3                   	ret    
c000c277:	90                   	nop

c000c278 <Clock::~Clock()>:
c000c278:	83 ec 0c             	sub    esp,0xc
c000c27b:	ba 58 15 02 c0       	mov    edx,0xc0021558
c000c280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c284:	89 10                	mov    DWORD PTR [eax],edx
c000c286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c28a:	83 ec 0c             	sub    esp,0xc
c000c28d:	50                   	push   eax
c000c28e:	e8 e1 03 00 00       	call   c000c674 <Device::~Device()>
c000c293:	83 c4 10             	add    esp,0x10
c000c296:	90                   	nop
c000c297:	83 c4 0c             	add    esp,0xc
c000c29a:	c3                   	ret    
c000c29b:	90                   	nop

c000c29c <Clock::~Clock()>:
c000c29c:	83 ec 0c             	sub    esp,0xc
c000c29f:	83 ec 0c             	sub    esp,0xc
c000c2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2a6:	e8 cd ff ff ff       	call   c000c278 <Clock::~Clock()>
c000c2ab:	83 c4 10             	add    esp,0x10
c000c2ae:	83 ec 08             	sub    esp,0x8
c000c2b1:	68 58 01 00 00       	push   0x158
c000c2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2ba:	e8 59 e5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	83 c4 0c             	add    esp,0xc
c000c2c5:	c3                   	ret    

c000c2c6 <Clock::timeInSecondsLocal()>:
c000c2c6:	53                   	push   ebx
c000c2c7:	83 ec 14             	sub    esp,0x14
c000c2ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000c2d0:	50                   	push   eax
c000c2d1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c2d4:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c2db:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c2e1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c2e7:	89 cb                	mov    ebx,ecx
c000c2e9:	c1 fb 1f             	sar    ebx,0x1f
c000c2ec:	01 c8                	add    eax,ecx
c000c2ee:	11 da                	adc    edx,ebx
c000c2f0:	83 c4 10             	add    esp,0x10
c000c2f3:	31 c9                	xor    ecx,ecx
c000c2f5:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2fc:	74 05                	je     c000c303 <Clock::timeInSecondsLocal()+0x3d>
c000c2fe:	b9 08 07 00 00       	mov    ecx,0x708
c000c303:	31 db                	xor    ebx,ebx
c000c305:	01 c8                	add    eax,ecx
c000c307:	11 da                	adc    edx,ebx
c000c309:	83 c4 08             	add    esp,0x8
c000c30c:	5b                   	pop    ebx
c000c30d:	c3                   	ret    

c000c30e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c30e:	57                   	push   edi
c000c30f:	56                   	push   esi
c000c310:	53                   	push   ebx
c000c311:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c315:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c319:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c31b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c31f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c322:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c329:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c32f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c335:	99                   	cdq    
c000c336:	29 c6                	sub    esi,eax
c000c338:	19 d7                	sbb    edi,edx
c000c33a:	89 f0                	mov    eax,esi
c000c33c:	89 fa                	mov    edx,edi
c000c33e:	31 f6                	xor    esi,esi
c000c340:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c347:	74 05                	je     c000c34e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c349:	be 08 07 00 00       	mov    esi,0x708
c000c34e:	31 ff                	xor    edi,edi
c000c350:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c354:	29 f0                	sub    eax,esi
c000c356:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c35a:	19 fa                	sbb    edx,edi
c000c35c:	89 d8                	mov    eax,ebx
c000c35e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c362:	5b                   	pop    ebx
c000c363:	5e                   	pop    esi
c000c364:	5f                   	pop    edi
c000c365:	ff e0                	jmp    eax

c000c367 <datetimeToSeconds(datetime_t)>:
c000c367:	55                   	push   ebp
c000c368:	57                   	push   edi
c000c369:	56                   	push   esi
c000c36a:	53                   	push   ebx
c000c36b:	83 ec 0c             	sub    esp,0xc
c000c36e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c372:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c376:	89 d6                	mov    esi,edx
c000c378:	0f b6 c7             	movzx  eax,bh
c000c37b:	c1 ee 10             	shr    esi,0x10
c000c37e:	6b e8 3c             	imul   ebp,eax,0x3c
c000c381:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c387:	0f b6 ce             	movzx  ecx,dh
c000c38a:	89 df                	mov    edi,ebx
c000c38c:	49                   	dec    ecx
c000c38d:	c1 ef 10             	shr    edi,0x10
c000c390:	0f b6 db             	movzx  ebx,bl
c000c393:	89 f8                	mov    eax,edi
c000c395:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c39b:	0f b6 f8             	movzx  edi,al
c000c39e:	0f b6 d2             	movzx  edx,dl
c000c3a1:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c3a5:	01 d8                	add    eax,ebx
c000c3a7:	0f b7 de             	movzx  ebx,si
c000c3aa:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3ad:	c1 f8 1f             	sar    eax,0x1f
c000c3b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c3b4:	0f b6 c1             	movzx  eax,cl
c000c3b7:	8b 0c 85 a0 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdea60]
c000c3be:	83 f8 01             	cmp    eax,0x1
c000c3c1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c3c5:	76 27                	jbe    c000c3ee <datetimeToSeconds(datetime_t)+0x87>
c000c3c7:	83 e6 03             	and    esi,0x3
c000c3ca:	75 22                	jne    c000c3ee <datetimeToSeconds(datetime_t)+0x87>
c000c3cc:	31 d2                	xor    edx,edx
c000c3ce:	be 64 00 00 00       	mov    esi,0x64
c000c3d3:	89 d8                	mov    eax,ebx
c000c3d5:	f7 f6                	div    esi
c000c3d7:	85 d2                	test   edx,edx
c000c3d9:	75 12                	jne    c000c3ed <datetimeToSeconds(datetime_t)+0x86>
c000c3db:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c3e1:	be 90 01 00 00       	mov    esi,0x190
c000c3e6:	99                   	cdq    
c000c3e7:	f7 fe                	idiv   esi
c000c3e9:	85 d2                	test   edx,edx
c000c3eb:	75 01                	jne    c000c3ee <datetimeToSeconds(datetime_t)+0x87>
c000c3ed:	41                   	inc    ecx
c000c3ee:	83 fb 46             	cmp    ebx,0x46
c000c3f1:	76 48                	jbe    c000c43b <datetimeToSeconds(datetime_t)+0xd4>
c000c3f3:	be 46 00 00 00       	mov    esi,0x46
c000c3f8:	bf 64 00 00 00       	mov    edi,0x64
c000c3fd:	bd 90 01 00 00       	mov    ebp,0x190
c000c402:	b8 6d 01 00 00       	mov    eax,0x16d
c000c407:	f7 c6 03 00 00 00    	test   esi,0x3
c000c40d:	75 23                	jne    c000c432 <datetimeToSeconds(datetime_t)+0xcb>
c000c40f:	89 f0                	mov    eax,esi
c000c411:	99                   	cdq    
c000c412:	f7 ff                	idiv   edi
c000c414:	b8 6e 01 00 00       	mov    eax,0x16e
c000c419:	85 d2                	test   edx,edx
c000c41b:	75 15                	jne    c000c432 <datetimeToSeconds(datetime_t)+0xcb>
c000c41d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c423:	99                   	cdq    
c000c424:	f7 fd                	idiv   ebp
c000c426:	83 fa 01             	cmp    edx,0x1
c000c429:	19 c0                	sbb    eax,eax
c000c42b:	f7 d0                	not    eax
c000c42d:	05 6e 01 00 00       	add    eax,0x16e
c000c432:	01 c1                	add    ecx,eax
c000c434:	46                   	inc    esi
c000c435:	39 de                	cmp    esi,ebx
c000c437:	7c c9                	jl     c000c402 <datetimeToSeconds(datetime_t)+0x9b>
c000c439:	eb 34                	jmp    c000c46f <datetimeToSeconds(datetime_t)+0x108>
c000c43b:	74 32                	je     c000c46f <datetimeToSeconds(datetime_t)+0x108>
c000c43d:	b8 45 00 00 00       	mov    eax,0x45
c000c442:	89 c2                	mov    edx,eax
c000c444:	83 e2 03             	and    edx,0x3
c000c447:	39 d8                	cmp    eax,ebx
c000c449:	7e 0f                	jle    c000c45a <datetimeToSeconds(datetime_t)+0xf3>
c000c44b:	83 fa 01             	cmp    edx,0x1
c000c44e:	19 d2                	sbb    edx,edx
c000c450:	48                   	dec    eax
c000c451:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c458:	eb e8                	jmp    c000c442 <datetimeToSeconds(datetime_t)+0xdb>
c000c45a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c45f:	85 d2                	test   edx,edx
c000c461:	75 0a                	jne    c000c46d <datetimeToSeconds(datetime_t)+0x106>
c000c463:	83 fb 01             	cmp    ebx,0x1
c000c466:	19 c0                	sbb    eax,eax
c000c468:	05 6e 01 00 00       	add    eax,0x16e
c000c46d:	29 c1                	sub    ecx,eax
c000c46f:	b8 80 51 01 00       	mov    eax,0x15180
c000c474:	f7 e9                	imul   ecx
c000c476:	03 04 24             	add    eax,DWORD PTR [esp]
c000c479:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c47d:	83 c4 0c             	add    esp,0xc
c000c480:	5b                   	pop    ebx
c000c481:	5e                   	pop    esi
c000c482:	5f                   	pop    edi
c000c483:	5d                   	pop    ebp
c000c484:	c3                   	ret    
c000c485:	90                   	nop

c000c486 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c486:	57                   	push   edi
c000c487:	56                   	push   esi
c000c488:	53                   	push   ebx
c000c489:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c48d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c48f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c492:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c496:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c49a:	e8 c8 fe ff ff       	call   c000c367 <datetimeToSeconds(datetime_t)>
c000c49f:	59                   	pop    ecx
c000c4a0:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c4a7:	5b                   	pop    ebx
c000c4a8:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c4ae:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c4b4:	89 cb                	mov    ebx,ecx
c000c4b6:	c1 fb 1f             	sar    ebx,0x1f
c000c4b9:	29 c8                	sub    eax,ecx
c000c4bb:	19 da                	sbb    edx,ebx
c000c4bd:	31 c9                	xor    ecx,ecx
c000c4bf:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c4c6:	74 05                	je     c000c4cd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c4c8:	b9 08 07 00 00       	mov    ecx,0x708
c000c4cd:	31 db                	xor    ebx,ebx
c000c4cf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c4d3:	29 c8                	sub    eax,ecx
c000c4d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c4d9:	19 da                	sbb    edx,ebx
c000c4db:	89 f8                	mov    eax,edi
c000c4dd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c4e1:	5b                   	pop    ebx
c000c4e2:	5e                   	pop    esi
c000c4e3:	5f                   	pop    edi
c000c4e4:	ff e0                	jmp    eax

c000c4e6 <secondsToDatetime(unsigned long long)>:
c000c4e6:	55                   	push   ebp
c000c4e7:	57                   	push   edi
c000c4e8:	56                   	push   esi
c000c4e9:	53                   	push   ebx
c000c4ea:	83 ec 1c             	sub    esp,0x1c
c000c4ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4f1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4f5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4f9:	6a 00                	push   0x0
c000c4fb:	68 80 51 01 00       	push   0x15180
c000c500:	55                   	push   ebp
c000c501:	57                   	push   edi
c000c502:	e8 c9 2d 01 00       	call   c001f2d0 <__udivdi3>
c000c507:	83 c4 10             	add    esp,0x10
c000c50a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c510:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c514:	6a 00                	push   0x0
c000c516:	68 80 51 01 00       	push   0x15180
c000c51b:	55                   	push   ebp
c000c51c:	57                   	push   edi
c000c51d:	bf 10 0e 00 00       	mov    edi,0xe10
c000c522:	e8 a9 2e 01 00       	call   c001f3d0 <__umoddi3>
c000c527:	83 c4 10             	add    esp,0x10
c000c52a:	99                   	cdq    
c000c52b:	f7 ff                	idiv   edi
c000c52d:	bf 3c 00 00 00       	mov    edi,0x3c
c000c532:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c535:	89 d0                	mov    eax,edx
c000c537:	99                   	cdq    
c000c538:	f7 ff                	idiv   edi
c000c53a:	85 db                	test   ebx,ebx
c000c53c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c53f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c542:	79 11                	jns    c000c555 <secondsToDatetime(unsigned long long)+0x6f>
c000c544:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c548:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c54e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c553:	eb 07                	jmp    c000c55c <secondsToDatetime(unsigned long long)+0x76>
c000c555:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c55a:	89 d8                	mov    eax,ebx
c000c55c:	bf b4 05 00 00       	mov    edi,0x5b4
c000c561:	99                   	cdq    
c000c562:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c567:	f7 f9                	idiv   ecx
c000c569:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c56e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c572:	31 d2                	xor    edx,edx
c000c574:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c57c:	01 c3                	add    ebx,eax
c000c57e:	89 d8                	mov    eax,ebx
c000c580:	f7 f1                	div    ecx
c000c582:	31 d2                	xor    edx,edx
c000c584:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c587:	89 d8                	mov    eax,ebx
c000c589:	f7 f7                	div    edi
c000c58b:	31 d2                	xor    edx,edx
c000c58d:	29 c1                	sub    ecx,eax
c000c58f:	89 d8                	mov    eax,ebx
c000c591:	f7 f5                	div    ebp
c000c593:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c598:	29 c1                	sub    ecx,eax
c000c59a:	31 d2                	xor    edx,edx
c000c59c:	89 c8                	mov    eax,ecx
c000c59e:	f7 f5                	div    ebp
c000c5a0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c5a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c5a9:	31 d2                	xor    edx,edx
c000c5ab:	89 c8                	mov    eax,ecx
c000c5ad:	f7 f5                	div    ebp
c000c5af:	31 d2                	xor    edx,edx
c000c5b1:	01 c3                	add    ebx,eax
c000c5b3:	89 c8                	mov    eax,ecx
c000c5b5:	f7 f7                	div    edi
c000c5b7:	bf 99 00 00 00       	mov    edi,0x99
c000c5bc:	29 c3                	sub    ebx,eax
c000c5be:	31 d2                	xor    edx,edx
c000c5c0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c5c8:	29 c3                	sub    ebx,eax
c000c5ca:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c5cd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c5d0:	bb 05 00 00 00       	mov    ebx,0x5
c000c5d5:	83 c1 02             	add    ecx,0x2
c000c5d8:	89 c8                	mov    eax,ecx
c000c5da:	f7 f7                	div    edi
c000c5dc:	31 d2                	xor    edx,edx
c000c5de:	89 c7                	mov    edi,eax
c000c5e0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c5e6:	83 c0 02             	add    eax,0x2
c000c5e9:	f7 f3                	div    ebx
c000c5eb:	89 eb                	mov    ebx,ebp
c000c5ed:	29 c3                	sub    ebx,eax
c000c5ef:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5f5:	88 1e                	mov    BYTE PTR [esi],bl
c000c5f7:	19 c0                	sbb    eax,eax
c000c5f9:	31 d2                	xor    edx,edx
c000c5fb:	83 e0 0c             	and    eax,0xc
c000c5fe:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c602:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c60a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c60e:	83 f9 01             	cmp    ecx,0x1
c000c611:	0f 96 c2             	setbe  dl
c000c614:	41                   	inc    ecx
c000c615:	01 d0                	add    eax,edx
c000c617:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c61a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c61e:	83 c4 1c             	add    esp,0x1c
c000c621:	89 f0                	mov    eax,esi
c000c623:	5b                   	pop    ebx
c000c624:	5e                   	pop    esi
c000c625:	5f                   	pop    edi
c000c626:	5d                   	pop    ebp
c000c627:	c2 04 00             	ret    0x4

c000c62a <Clock::timeInDatetimeLocal()>:
c000c62a:	53                   	push   ebx
c000c62b:	83 ec 14             	sub    esp,0x14
c000c62e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c632:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c636:	e8 8b fc ff ff       	call   c000c2c6 <Clock::timeInSecondsLocal()>
c000c63b:	83 c4 0c             	add    esp,0xc
c000c63e:	52                   	push   edx
c000c63f:	50                   	push   eax
c000c640:	53                   	push   ebx
c000c641:	e8 a0 fe ff ff       	call   c000c4e6 <secondsToDatetime(unsigned long long)>
c000c646:	89 d8                	mov    eax,ebx
c000c648:	83 c4 14             	add    esp,0x14
c000c64b:	5b                   	pop    ebx
c000c64c:	c2 04 00             	ret    0x4
c000c64f:	90                   	nop

c000c650 <Device::hibernate()>:
c000c650:	c3                   	ret    
c000c651:	90                   	nop

c000c652 <Device::wake()>:
c000c652:	c3                   	ret    
c000c653:	90                   	nop

c000c654 <Device::detect()>:
c000c654:	c3                   	ret    
c000c655:	90                   	nop

c000c656 <Device::disableLegacy()>:
c000c656:	c3                   	ret    
c000c657:	90                   	nop

c000c658 <Device::powerSaving(PowerSavingLevel)>:
c000c658:	c3                   	ret    
c000c659:	90                   	nop

c000c65a <DriverlessDevice::close(int, int, void*)>:
c000c65a:	31 c0                	xor    eax,eax
c000c65c:	c3                   	ret    
c000c65d:	90                   	nop

c000c65e <DriverlessDevice::detect()>:
c000c65e:	c3                   	ret    
c000c65f:	90                   	nop

c000c660 <DriverlessDevice::open(int, int, void*)>:
c000c660:	83 ec 18             	sub    esp,0x18
c000c663:	68 d0 15 02 c0       	push   0xc00215d0
c000c668:	e8 34 4d 00 00       	call   c00113a1 <KePanic(char const*)>
c000c66d:	83 c8 ff             	or     eax,0xffffffff
c000c670:	83 c4 1c             	add    esp,0x1c
c000c673:	c3                   	ret    

c000c674 <Device::~Device()>:
c000c674:	ba 30 16 02 c0       	mov    edx,0xc0021630
c000c679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c67d:	89 10                	mov    DWORD PTR [eax],edx
c000c67f:	90                   	nop
c000c680:	c3                   	ret    
c000c681:	90                   	nop

c000c682 <Device::~Device()>:
c000c682:	83 ec 0c             	sub    esp,0xc
c000c685:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c689:	e8 e6 ff ff ff       	call   c000c674 <Device::~Device()>
c000c68e:	83 c4 04             	add    esp,0x4
c000c691:	83 ec 08             	sub    esp,0x8
c000c694:	68 58 01 00 00       	push   0x158
c000c699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c69d:	e8 76 e1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c6a2:	83 c4 10             	add    esp,0x10
c000c6a5:	83 c4 0c             	add    esp,0xc
c000c6a8:	c3                   	ret    
c000c6a9:	90                   	nop

c000c6aa <Device::findAndLoadDriver()>:
c000c6aa:	c7 44 24 04 ee 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc00215ee
c000c6b2:	e9 8e e2 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c6b7:	90                   	nop

c000c6b8 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c6b8:	57                   	push   edi
c000c6b9:	b9 09 00 00 00       	mov    ecx,0x9
c000c6be:	56                   	push   esi
c000c6bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c6c3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c6c7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c6d1:	81 c7 18 01 00 00    	add    edi,0x118
c000c6d7:	fc                   	cld    
c000c6d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6da:	5e                   	pop    esi
c000c6db:	5f                   	pop    edi
c000c6dc:	c3                   	ret    
c000c6dd:	90                   	nop

c000c6de <Device::preOpenACPI(void*, char*, char*)>:
c000c6de:	57                   	push   edi
c000c6df:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c6e4:	56                   	push   esi
c000c6e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6ed:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6f7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6fd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c703:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c707:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c709:	b9 0e 00 00 00       	mov    ecx,0xe
c000c70e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c714:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c718:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c71a:	5e                   	pop    esi
c000c71b:	5f                   	pop    edi
c000c71c:	c3                   	ret    
c000c71d:	90                   	nop

c000c71e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c71e:	53                   	push   ebx
c000c71f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c723:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c727:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c72b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c72f:	0f b6 c0             	movzx  eax,al
c000c732:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c736:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c73a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c73e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c742:	5b                   	pop    ebx
c000c743:	e9 a8 05 00 00       	jmp    c000ccf0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c748 <Device::getParent()>:
c000c748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c74c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c752:	c3                   	ret    
c000c753:	90                   	nop

c000c754 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c758:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c75c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c761:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c765:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c769:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c76d:	e9 e6 06 00 00       	jmp    c000ce58 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c772 <Device::addChild(Device*)>:
c000c772:	53                   	push   ebx
c000c773:	83 ec 08             	sub    esp,0x8
c000c776:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c77a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c77e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c784:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c78a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c78c:	85 d2                	test   edx,edx
c000c78e:	74 04                	je     c000c794 <Device::addChild(Device*)+0x22>
c000c790:	89 d3                	mov    ebx,edx
c000c792:	eb f6                	jmp    c000c78a <Device::addChild(Device*)+0x18>
c000c794:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c797:	83 ec 0c             	sub    esp,0xc
c000c79a:	6a 08                	push   0x8
c000c79c:	e8 15 b3 ff ff       	call   c0007ab6 <malloc>
c000c7a1:	89 03                	mov    DWORD PTR [ebx],eax
c000c7a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7b0:	83 c4 18             	add    esp,0x18
c000c7b3:	5b                   	pop    ebx
c000c7b4:	c3                   	ret    
c000c7b5:	90                   	nop

c000c7b6 <Device::removeAllChildren()>:
c000c7b6:	56                   	push   esi
c000c7b7:	53                   	push   ebx
c000c7b8:	52                   	push   edx
c000c7b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c7bd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c7c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7c6:	74 17                	je     c000c7df <Device::removeAllChildren()+0x29>
c000c7c8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c7cb:	85 c0                	test   eax,eax
c000c7cd:	74 0c                	je     c000c7db <Device::removeAllChildren()+0x25>
c000c7cf:	83 ec 0c             	sub    esp,0xc
c000c7d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7d4:	50                   	push   eax
c000c7d5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c7d8:	83 c4 10             	add    esp,0x10
c000c7db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7dd:	eb e4                	jmp    c000c7c3 <Device::removeAllChildren()+0xd>
c000c7df:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7eb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7f8:	58                   	pop    eax
c000c7f9:	5b                   	pop    ebx
c000c7fa:	5e                   	pop    esi
c000c7fb:	c3                   	ret    

c000c7fc <Device::hibernateAll()>:
c000c7fc:	53                   	push   ebx
c000c7fd:	83 ec 14             	sub    esp,0x14
c000c800:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c804:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c806:	53                   	push   ebx
c000c807:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c80a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c810:	83 c4 10             	add    esp,0x10
c000c813:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c816:	74 0f                	je     c000c827 <Device::hibernateAll()+0x2b>
c000c818:	83 ec 0c             	sub    esp,0xc
c000c81b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c81e:	e8 d9 ff ff ff       	call   c000c7fc <Device::hibernateAll()>
c000c823:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c825:	eb e9                	jmp    c000c810 <Device::hibernateAll()+0x14>
c000c827:	83 c4 08             	add    esp,0x8
c000c82a:	5b                   	pop    ebx
c000c82b:	c3                   	ret    

c000c82c <Device::wakeAll()>:
c000c82c:	53                   	push   ebx
c000c82d:	83 ec 14             	sub    esp,0x14
c000c830:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c834:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c836:	53                   	push   ebx
c000c837:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c83a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c840:	83 c4 10             	add    esp,0x10
c000c843:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c846:	74 0f                	je     c000c857 <Device::wakeAll()+0x2b>
c000c848:	83 ec 0c             	sub    esp,0xc
c000c84b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c84e:	e8 d9 ff ff ff       	call   c000c82c <Device::wakeAll()>
c000c853:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c855:	eb e9                	jmp    c000c840 <Device::wakeAll()+0x14>
c000c857:	83 c4 08             	add    esp,0x8
c000c85a:	5b                   	pop    ebx
c000c85b:	c3                   	ret    

c000c85c <Device::detectAll()>:
c000c85c:	53                   	push   ebx
c000c85d:	83 ec 14             	sub    esp,0x14
c000c860:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c864:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c866:	53                   	push   ebx
c000c867:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c86a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c876:	74 0f                	je     c000c887 <Device::detectAll()+0x2b>
c000c878:	83 ec 0c             	sub    esp,0xc
c000c87b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c87e:	e8 d9 ff ff ff       	call   c000c85c <Device::detectAll()>
c000c883:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c885:	eb e9                	jmp    c000c870 <Device::detectAll()+0x14>
c000c887:	83 c4 08             	add    esp,0x8
c000c88a:	5b                   	pop    ebx
c000c88b:	c3                   	ret    

c000c88c <Device::disableLegacyAll()>:
c000c88c:	c3                   	ret    
c000c88d:	90                   	nop

c000c88e <Device::loadDriversForAll()>:
c000c88e:	c3                   	ret    
c000c88f:	90                   	nop

c000c890 <Device::closeAll()>:
c000c890:	53                   	push   ebx
c000c891:	83 ec 08             	sub    esp,0x8
c000c894:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c898:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c89a:	6a 00                	push   0x0
c000c89c:	6a 00                	push   0x0
c000c89e:	6a 00                	push   0x0
c000c8a0:	53                   	push   ebx
c000c8a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c8a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8aa:	83 c4 10             	add    esp,0x10
c000c8ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8b0:	74 0f                	je     c000c8c1 <Device::closeAll()+0x31>
c000c8b2:	83 ec 0c             	sub    esp,0xc
c000c8b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8b8:	e8 d3 ff ff ff       	call   c000c890 <Device::closeAll()>
c000c8bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8bf:	eb e9                	jmp    c000c8aa <Device::closeAll()+0x1a>
c000c8c1:	83 c4 08             	add    esp,0x8
c000c8c4:	5b                   	pop    ebx
c000c8c5:	c3                   	ret    

c000c8c6 <Device::powerSavingAll(PowerSavingLevel)>:
c000c8c6:	56                   	push   esi
c000c8c7:	53                   	push   ebx
c000c8c8:	83 ec 0c             	sub    esp,0xc
c000c8cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c8cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c8d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8d5:	56                   	push   esi
c000c8d6:	53                   	push   ebx
c000c8d7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c8da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8e0:	83 c4 10             	add    esp,0x10
c000c8e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8e6:	74 0f                	je     c000c8f7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c8e8:	52                   	push   edx
c000c8e9:	52                   	push   edx
c000c8ea:	56                   	push   esi
c000c8eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8ee:	e8 d3 ff ff ff       	call   c000c8c6 <Device::powerSavingAll(PowerSavingLevel)>
c000c8f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8f5:	eb e9                	jmp    c000c8e0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8f7:	58                   	pop    eax
c000c8f8:	5b                   	pop    ebx
c000c8f9:	5e                   	pop    esi
c000c8fa:	c3                   	ret    
c000c8fb:	90                   	nop

c000c8fc <Device::setName(char const*)>:
c000c8fc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c904:	e9 37 3d ff ff       	jmp    c0000640 <strcpy>
c000c909:	90                   	nop

c000c90a <Device::Device(char const*)>:
c000c90a:	83 ec 1c             	sub    esp,0x1c
c000c90d:	ba 30 16 02 c0       	mov    edx,0xc0021630
c000c912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c916:	89 10                	mov    DWORD PTR [eax],edx
c000c918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c91c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c92a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c938:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c946:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c950:	83 ec 08             	sub    esp,0x8
c000c953:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c957:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95b:	e8 9c ff ff ff       	call   c000c8fc <Device::setName(char const*)>
c000c960:	83 c4 10             	add    esp,0x10
c000c963:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c96b:	83 ec 0c             	sub    esp,0xc
c000c96e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c972:	e8 3f b1 ff ff       	call   c0007ab6 <malloc>
c000c977:	83 c4 10             	add    esp,0x10
c000c97a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c980:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c987:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c98b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c995:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c99b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c9ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c9c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9cc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c9d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9da:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c9e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f6:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000ca00:	90                   	nop
c000ca01:	83 c4 1c             	add    esp,0x1c
c000ca04:	c3                   	ret    
c000ca05:	90                   	nop

c000ca06 <Device::getName()>:
c000ca06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca0a:	05 d0 00 00 00       	add    eax,0xd0
c000ca0f:	c3                   	ret    

c000ca10 <DriverlessDevice::DriverlessDevice(char const*)>:
c000ca10:	83 ec 0c             	sub    esp,0xc
c000ca13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca17:	83 ec 08             	sub    esp,0x8
c000ca1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca1e:	50                   	push   eax
c000ca1f:	e8 e6 fe ff ff       	call   c000c90a <Device::Device(char const*)>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	ba 5c 16 02 c0       	mov    edx,0xc002165c
c000ca2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca30:	89 10                	mov    DWORD PTR [eax],edx
c000ca32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca36:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ca40:	90                   	nop
c000ca41:	83 c4 0c             	add    esp,0xc
c000ca44:	c3                   	ret    
c000ca45:	90                   	nop

c000ca46 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ca46:	57                   	push   edi
c000ca47:	56                   	push   esi
c000ca48:	53                   	push   ebx
c000ca49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca4d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca55:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca5b:	75 0c                	jne    c000ca69 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca5d:	52                   	push   edx
c000ca5e:	52                   	push   edx
c000ca5f:	53                   	push   ebx
c000ca60:	56                   	push   esi
c000ca61:	e8 1c 2d 01 00       	call   c001f782 <LinkedList<Device>::addElement(Device*)>
c000ca66:	83 c4 10             	add    esp,0x10
c000ca69:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca72:	74 12                	je     c000ca86 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca74:	50                   	push   eax
c000ca75:	57                   	push   edi
c000ca76:	56                   	push   esi
c000ca77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca7a:	e8 c7 ff ff ff       	call   c000ca46 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca81:	83 c4 10             	add    esp,0x10
c000ca84:	eb e9                	jmp    c000ca6f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca86:	5b                   	pop    ebx
c000ca87:	5e                   	pop    esi
c000ca88:	5f                   	pop    edi
c000ca89:	c3                   	ret    

c000ca8a <getDevicesOfType(DeviceType)>:
c000ca8a:	53                   	push   ebx
c000ca8b:	83 ec 14             	sub    esp,0x14
c000ca8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca92:	53                   	push   ebx
c000ca93:	e8 c6 2d 01 00       	call   c001f85e <LinkedList<Device>::LinkedList()>
c000ca98:	83 c4 0c             	add    esp,0xc
c000ca9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca9f:	53                   	push   ebx
c000caa0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000caa6:	e8 9b ff ff ff       	call   c000ca46 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000caab:	89 d8                	mov    eax,ebx
c000caad:	83 c4 18             	add    esp,0x18
c000cab0:	5b                   	pop    ebx
c000cab1:	c2 04 00             	ret    0x4

c000cab4 <HardDiskController::HardDiskController(char const*)>:
c000cab4:	83 ec 0c             	sub    esp,0xc
c000cab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cabb:	83 ec 08             	sub    esp,0x8
c000cabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac2:	50                   	push   eax
c000cac3:	e8 42 fe ff ff       	call   c000c90a <Device::Device(char const*)>
c000cac8:	83 c4 10             	add    esp,0x10
c000cacb:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000cad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad4:	89 10                	mov    DWORD PTR [eax],edx
c000cad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cada:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cae4:	90                   	nop
c000cae5:	83 c4 0c             	add    esp,0xc
c000cae8:	c3                   	ret    
c000cae9:	90                   	nop
c000caea:	66 90                	xchg   ax,ax

c000caec <HardDiskController::~HardDiskController()>:
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000caf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf8:	89 10                	mov    DWORD PTR [eax],edx
c000cafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafe:	83 ec 0c             	sub    esp,0xc
c000cb01:	50                   	push   eax
c000cb02:	e8 6d fb ff ff       	call   c000c674 <Device::~Device()>
c000cb07:	83 c4 10             	add    esp,0x10
c000cb0a:	90                   	nop
c000cb0b:	83 c4 0c             	add    esp,0xc
c000cb0e:	c3                   	ret    
c000cb0f:	90                   	nop

c000cb10 <HardDiskController::~HardDiskController()>:
c000cb10:	83 ec 0c             	sub    esp,0xc
c000cb13:	83 ec 0c             	sub    esp,0xc
c000cb16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb1a:	e8 cd ff ff ff       	call   c000caec <HardDiskController::~HardDiskController()>
c000cb1f:	83 c4 10             	add    esp,0x10
c000cb22:	83 ec 08             	sub    esp,0x8
c000cb25:	68 58 01 00 00       	push   0x158
c000cb2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb2e:	e8 e5 dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cb33:	83 c4 10             	add    esp,0x10
c000cb36:	83 c4 0c             	add    esp,0xc
c000cb39:	c3                   	ret    

c000cb3a <PhysicalDisk::eject()>:
c000cb3a:	83 c8 ff             	or     eax,0xffffffff
c000cb3d:	c3                   	ret    

c000cb3e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cb3e:	83 ec 0c             	sub    esp,0xc
c000cb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb45:	83 ec 08             	sub    esp,0x8
c000cb48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb4c:	50                   	push   eax
c000cb4d:	e8 b8 fd ff ff       	call   c000c90a <Device::Device(char const*)>
c000cb52:	83 c4 10             	add    esp,0x10
c000cb55:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c000cb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5e:	89 10                	mov    DWORD PTR [eax],edx
c000cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb64:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb8c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb96:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cba0:	90                   	nop
c000cba1:	83 c4 0c             	add    esp,0xc
c000cba4:	c3                   	ret    
c000cba5:	90                   	nop

c000cba6 <PhysicalDisk::startCache()>:
c000cba6:	56                   	push   esi
c000cba7:	53                   	push   ebx
c000cba8:	83 ec 10             	sub    esp,0x10
c000cbab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cbaf:	6a 44                	push   0x44
c000cbb1:	e8 00 af ff ff       	call   c0007ab6 <malloc>
c000cbb6:	89 c6                	mov    esi,eax
c000cbb8:	58                   	pop    eax
c000cbb9:	5a                   	pop    edx
c000cbba:	53                   	push   ebx
c000cbbb:	56                   	push   esi
c000cbbc:	e8 7b 17 00 00       	call   c000e33c <VCache::VCache(PhysicalDisk*)>
c000cbc1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cbc7:	83 c4 14             	add    esp,0x14
c000cbca:	5b                   	pop    ebx
c000cbcb:	5e                   	pop    esi
c000cbcc:	c3                   	ret    
c000cbcd:	90                   	nop

c000cbce <PhysicalDisk::~PhysicalDisk()>:
c000cbce:	83 ec 0c             	sub    esp,0xc
c000cbd1:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c000cbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbda:	89 10                	mov    DWORD PTR [eax],edx
c000cbdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbe0:	83 ec 0c             	sub    esp,0xc
c000cbe3:	50                   	push   eax
c000cbe4:	e8 8b fa ff ff       	call   c000c674 <Device::~Device()>
c000cbe9:	83 c4 10             	add    esp,0x10
c000cbec:	90                   	nop
c000cbed:	83 c4 0c             	add    esp,0xc
c000cbf0:	c3                   	ret    
c000cbf1:	90                   	nop

c000cbf2 <PhysicalDisk::~PhysicalDisk()>:
c000cbf2:	83 ec 0c             	sub    esp,0xc
c000cbf5:	83 ec 0c             	sub    esp,0xc
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	e8 cd ff ff ff       	call   c000cbce <PhysicalDisk::~PhysicalDisk()>
c000cc01:	83 c4 10             	add    esp,0x10
c000cc04:	83 ec 08             	sub    esp,0x8
c000cc07:	68 6c 01 00 00       	push   0x16c
c000cc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc10:	e8 03 dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cc15:	83 c4 10             	add    esp,0x10
c000cc18:	83 c4 0c             	add    esp,0xc
c000cc1b:	c3                   	ret    

c000cc1c <int_handler>:
c000cc1c:	55                   	push   ebp
c000cc1d:	57                   	push   edi
c000cc1e:	56                   	push   esi
c000cc1f:	53                   	push   ebx
c000cc20:	83 ec 0c             	sub    esp,0xc
c000cc23:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cc27:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc2e:	74 0b                	je     c000cc3b <int_handler+0x1f>
c000cc30:	fa                   	cli    
c000cc31:	f4                   	hlt    
c000cc32:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc39:	75 f5                	jne    c000cc30 <int_handler+0x14>
c000cc3b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cc3e:	8d 46 e0             	lea    eax,[esi-0x20]
c000cc41:	83 f8 17             	cmp    eax,0x17
c000cc44:	76 40                	jbe    c000cc86 <int_handler+0x6a>
c000cc46:	c1 e6 04             	shl    esi,0x4
c000cc49:	31 db                	xor    ebx,ebx
c000cc4b:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc51:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc57:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc5b:	85 c0                	test   eax,eax
c000cc5d:	74 13                	je     c000cc72 <int_handler+0x56>
c000cc5f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc62:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc66:	74 2c                	je     c000cc94 <int_handler+0x78>
c000cc68:	83 ec 08             	sub    esp,0x8
c000cc6b:	52                   	push   edx
c000cc6c:	57                   	push   edi
c000cc6d:	ff d0                	call   eax
c000cc6f:	83 c4 10             	add    esp,0x10
c000cc72:	83 c3 01             	add    ebx,0x1
c000cc75:	83 fb 04             	cmp    ebx,0x4
c000cc78:	75 dd                	jne    c000cc57 <int_handler+0x3b>
c000cc7a:	83 c4 0c             	add    esp,0xc
c000cc7d:	31 c0                	xor    eax,eax
c000cc7f:	5b                   	pop    ebx
c000cc80:	31 d2                	xor    edx,edx
c000cc82:	5e                   	pop    esi
c000cc83:	5f                   	pop    edi
c000cc84:	5d                   	pop    ebp
c000cc85:	c3                   	ret    
c000cc86:	83 ec 0c             	sub    esp,0xc
c000cc89:	50                   	push   eax
c000cc8a:	e8 99 b2 00 00       	call   c0017f28 <HalEndOfInterrupt(int)>
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	eb b2                	jmp    c000cc46 <int_handler+0x2a>
c000cc94:	83 ec 08             	sub    esp,0x8
c000cc97:	52                   	push   edx
c000cc98:	57                   	push   edi
c000cc99:	ff d0                	call   eax
c000cc9b:	83 c4 10             	add    esp,0x10
c000cc9e:	83 c4 0c             	add    esp,0xc
c000cca1:	5b                   	pop    ebx
c000cca2:	5e                   	pop    esi
c000cca3:	5f                   	pop    edi
c000cca4:	5d                   	pop    ebp
c000cca5:	c3                   	ret    

c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cca6:	56                   	push   esi
c000cca7:	31 c0                	xor    eax,eax
c000cca9:	53                   	push   ebx
c000ccaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ccae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccb2:	89 ca                	mov    edx,ecx
c000ccb4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccb8:	c1 e2 04             	shl    edx,0x4
c000ccbb:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000ccc3:	74 17                	je     c000ccdc <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000ccc5:	83 c0 01             	add    eax,0x1
c000ccc8:	83 f8 04             	cmp    eax,0x4
c000cccb:	75 ee                	jne    c000ccbb <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cccd:	c7 44 24 0c e4 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc00216e4
c000ccd5:	5b                   	pop    ebx
c000ccd6:	5e                   	pop    esi
c000ccd7:	e9 c5 46 00 00       	jmp    c00113a1 <KePanic(char const*)>
c000ccdc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ccdf:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cce6:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cced:	5b                   	pop    ebx
c000ccee:	5e                   	pop    esi
c000ccef:	c3                   	ret    

c000ccf0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ccf0:	57                   	push   edi
c000ccf1:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ccf7:	56                   	push   esi
c000ccf8:	53                   	push   ebx
c000ccf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd01:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cd08:	74 54                	je     c000cd5e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cd0a:	89 c7                	mov    edi,eax
c000cd0c:	84 c0                	test   al,al
c000cd0e:	74 1d                	je     c000cd2d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cd10:	83 fe 0f             	cmp    esi,0xf
c000cd13:	0f 8f d5 00 00 00    	jg     c000cdee <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cd19:	0f b6 b6 e8 31 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdce18]
c000cd20:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cd28:	d1 ef                	shr    edi,1
c000cd2a:	83 e7 01             	and    edi,0x1
c000cd2d:	83 ec 08             	sub    esp,0x8
c000cd30:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd35:	31 db                	xor    ebx,ebx
c000cd37:	50                   	push   eax
c000cd38:	68 f1 16 02 c0       	push   0xc00216f1
c000cd3d:	e8 03 dc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cd42:	83 c4 10             	add    esp,0x10
c000cd45:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd4a:	85 c0                	test   eax,eax
c000cd4c:	7f 55                	jg     c000cda3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd4e:	83 ec 0c             	sub    esp,0xc
c000cd51:	68 08 17 02 c0       	push   0xc0021708
c000cd56:	e8 46 46 00 00       	call   c00113a1 <KePanic(char const*)>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd61:	89 f8                	mov    eax,edi
c000cd63:	31 d2                	xor    edx,edx
c000cd65:	c1 e0 04             	shl    eax,0x4
c000cd68:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd6f:	85 c9                	test   ecx,ecx
c000cd71:	0f 84 8e 00 00 00    	je     c000ce05 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cd77:	83 c2 01             	add    edx,0x1
c000cd7a:	83 fa 04             	cmp    edx,0x4
c000cd7d:	75 e9                	jne    c000cd68 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd7f:	83 ec 0c             	sub    esp,0xc
c000cd82:	68 5c 17 02 c0       	push   0xc002175c
c000cd87:	e8 15 46 00 00       	call   c00113a1 <KePanic(char const*)>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd94:	5b                   	pop    ebx
c000cd95:	5e                   	pop    esi
c000cd96:	5f                   	pop    edi
c000cd97:	c3                   	ret    
c000cd98:	83 c3 01             	add    ebx,0x1
c000cd9b:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cda1:	7e ab                	jle    c000cd4e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cda3:	83 ec 08             	sub    esp,0x8
c000cda6:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cdad:	56                   	push   esi
c000cdae:	50                   	push   eax
c000cdaf:	e8 fe 18 01 00       	call   c001e6b2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cdb4:	83 c4 10             	add    esp,0x10
c000cdb7:	84 c0                	test   al,al
c000cdb9:	74 dd                	je     c000cd98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cdbb:	83 ec 04             	sub    esp,0x4
c000cdbe:	89 f8                	mov    eax,edi
c000cdc0:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cdc7:	0f b6 f8             	movzx  edi,al
c000cdca:	57                   	push   edi
c000cdcb:	8d 7e 20             	lea    edi,[esi+0x20]
c000cdce:	6a 00                	push   0x0
c000cdd0:	89 f8                	mov    eax,edi
c000cdd2:	0f b6 c0             	movzx  eax,al
c000cdd5:	50                   	push   eax
c000cdd6:	89 f0                	mov    eax,esi
c000cdd8:	6a 00                	push   0x0
c000cdda:	0f b6 c0             	movzx  eax,al
c000cddd:	6a 00                	push   0x0
c000cddf:	50                   	push   eax
c000cde0:	53                   	push   ebx
c000cde1:	e8 38 1a 01 00       	call   c001e81e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cde6:	83 c4 20             	add    esp,0x20
c000cde9:	e9 73 ff ff ff       	jmp    c000cd61 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cdee:	83 ec 0c             	sub    esp,0xc
c000cdf1:	31 ff                	xor    edi,edi
c000cdf3:	68 24 17 02 c0       	push   0xc0021724
c000cdf8:	e8 a4 45 00 00       	call   c00113a1 <KePanic(char const*)>
c000cdfd:	83 c4 10             	add    esp,0x10
c000ce00:	e9 28 ff ff ff       	jmp    c000cd2d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000ce05:	8d 04 ba             	lea    eax,[edx+edi*4]
c000ce08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ce0c:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000ce13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ce17:	5b                   	pop    ebx
c000ce18:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000ce1f:	89 f0                	mov    eax,esi
c000ce21:	5e                   	pop    esi
c000ce22:	5f                   	pop    edi
c000ce23:	c3                   	ret    

c000ce24 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ce24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce28:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce2c:	c1 e0 04             	shl    eax,0x4
c000ce2f:	8d 50 10             	lea    edx,[eax+0x10]
c000ce32:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ce38:	74 08                	je     c000ce42 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ce3a:	83 c0 04             	add    eax,0x4
c000ce3d:	39 d0                	cmp    eax,edx
c000ce3f:	75 f1                	jne    c000ce32 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce41:	c3                   	ret    
c000ce42:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce4c:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce56:	eb e2                	jmp    c000ce3a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce58 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce58:	53                   	push   ebx
c000ce59:	83 ec 08             	sub    esp,0x8
c000ce5c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce60:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce65:	74 0e                	je     c000ce75 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce67:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce6c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce73:	75 37                	jne    c000ceac <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000ce75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce79:	83 c0 20             	add    eax,0x20
c000ce7c:	c1 e0 04             	shl    eax,0x4
c000ce7f:	8d 50 10             	lea    edx,[eax+0x10]
c000ce82:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000ce88:	74 0c                	je     c000ce96 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ce8a:	83 c0 04             	add    eax,0x4
c000ce8d:	39 d0                	cmp    eax,edx
c000ce8f:	75 f1                	jne    c000ce82 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000ce91:	83 c4 08             	add    esp,0x8
c000ce94:	5b                   	pop    ebx
c000ce95:	c3                   	ret    
c000ce96:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cea0:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ceaa:	eb de                	jmp    c000ce8a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000ceac:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000ceb1:	7f 11                	jg     c000cec4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ceb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb7:	0f b6 80 e8 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdce18]
c000cebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cec2:	eb b1                	jmp    c000ce75 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	68 15 17 02 c0       	push   0xc0021715
c000cecc:	e8 d0 44 00 00       	call   c00113a1 <KePanic(char const*)>
c000ced1:	83 c4 10             	add    esp,0x10
c000ced4:	eb 9f                	jmp    c000ce75 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000ced6 <setupINTS()>:
c000ced6:	31 c0                	xor    eax,eax
c000ced8:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cee2:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ceec:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000cef6:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000cf00:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000cf0a:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000cf14:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000cf1e:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000cf28:	83 c0 10             	add    eax,0x10
c000cf2b:	3d 00 10 00 00       	cmp    eax,0x1000
c000cf30:	75 a6                	jne    c000ced8 <setupINTS()+0x2>
c000cf32:	c3                   	ret    

c000cf33 <convertLegacyIRQNumber(int)>:
c000cf33:	83 ec 0c             	sub    esp,0xc
c000cf36:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cf3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf40:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf47:	74 0c                	je     c000cf55 <convertLegacyIRQNumber(int)+0x22>
c000cf49:	83 f8 0f             	cmp    eax,0xf
c000cf4c:	7f 0b                	jg     c000cf59 <convertLegacyIRQNumber(int)+0x26>
c000cf4e:	0f b6 80 e8 31 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdce18]
c000cf55:	83 c4 0c             	add    esp,0xc
c000cf58:	c3                   	ret    
c000cf59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf5d:	83 ec 0c             	sub    esp,0xc
c000cf60:	68 24 17 02 c0       	push   0xc0021724
c000cf65:	e8 37 44 00 00       	call   c00113a1 <KePanic(char const*)>
c000cf6a:	83 c4 10             	add    esp,0x10
c000cf6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf71:	83 c4 0c             	add    esp,0xc
c000cf74:	c3                   	ret    
c000cf75:	90                   	nop

c000cf76 <startGUI(void*)>:
c000cf76:	55                   	push   ebp
c000cf77:	89 e5                	mov    ebp,esp
c000cf79:	53                   	push   ebx
c000cf7a:	83 ec 04             	sub    esp,0x4
c000cf7d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf82:	83 e8 01             	sub    eax,0x1
c000cf85:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf8a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf8f:	85 c0                	test   eax,eax
c000cf91:	75 01                	jne    c000cf94 <startGUI(void*)+0x1e>
c000cf93:	fb                   	sti    
c000cf94:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf9a:	83 ec 08             	sub    esp,0x8
c000cf9d:	6a 01                	push   0x1
c000cf9f:	68 81 17 02 c0       	push   0xc0021781
c000cfa4:	e8 59 82 00 00       	call   c0015202 <Thr::loadDLL(char const*, bool)>
c000cfa9:	83 c4 10             	add    esp,0x10
c000cfac:	83 ec 08             	sub    esp,0x8
c000cfaf:	53                   	push   ebx
c000cfb0:	50                   	push   eax
c000cfb1:	e8 7d 84 00 00       	call   c0015433 <Thr::executeDLL(unsigned long, void*)>
c000cfb6:	83 c4 10             	add    esp,0x10
c000cfb9:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfbf:	83 ec 08             	sub    esp,0x8
c000cfc2:	6a 01                	push   0x1
c000cfc4:	68 9b 17 02 c0       	push   0xc002179b
c000cfc9:	e8 34 82 00 00       	call   c0015202 <Thr::loadDLL(char const*, bool)>
c000cfce:	83 c4 10             	add    esp,0x10
c000cfd1:	83 ec 08             	sub    esp,0x8
c000cfd4:	53                   	push   ebx
c000cfd5:	50                   	push   eax
c000cfd6:	e8 58 84 00 00       	call   c0015433 <Thr::executeDLL(unsigned long, void*)>
c000cfdb:	83 c4 10             	add    esp,0x10
c000cfde:	90                   	nop
c000cfdf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfe2:	c9                   	leave  
c000cfe3:	c3                   	ret    

c000cfe4 <startGUIVESA(void*)>:
c000cfe4:	55                   	push   ebp
c000cfe5:	89 e5                	mov    ebp,esp
c000cfe7:	53                   	push   ebx
c000cfe8:	83 ec 04             	sub    esp,0x4
c000cfeb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cff0:	83 e8 01             	sub    eax,0x1
c000cff3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cff8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cffd:	85 c0                	test   eax,eax
c000cfff:	75 01                	jne    c000d002 <startGUIVESA(void*)+0x1e>
c000d001:	fb                   	sti    
c000d002:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d008:	83 ec 08             	sub    esp,0x8
c000d00b:	6a 01                	push   0x1
c000d00d:	68 b9 17 02 c0       	push   0xc00217b9
c000d012:	e8 eb 81 00 00       	call   c0015202 <Thr::loadDLL(char const*, bool)>
c000d017:	83 c4 10             	add    esp,0x10
c000d01a:	83 ec 08             	sub    esp,0x8
c000d01d:	53                   	push   ebx
c000d01e:	50                   	push   eax
c000d01f:	e8 0f 84 00 00       	call   c0015433 <Thr::executeDLL(unsigned long, void*)>
c000d024:	83 c4 10             	add    esp,0x10
c000d027:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d02d:	83 ec 08             	sub    esp,0x8
c000d030:	6a 01                	push   0x1
c000d032:	68 9b 17 02 c0       	push   0xc002179b
c000d037:	e8 c6 81 00 00       	call   c0015202 <Thr::loadDLL(char const*, bool)>
c000d03c:	83 c4 10             	add    esp,0x10
c000d03f:	83 ec 08             	sub    esp,0x8
c000d042:	53                   	push   ebx
c000d043:	50                   	push   eax
c000d044:	e8 ea 83 00 00       	call   c0015433 <Thr::executeDLL(unsigned long, void*)>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	90                   	nop
c000d04d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d050:	c9                   	leave  
c000d051:	c3                   	ret    

c000d052 <sendKeyToTerminal(unsigned char)>:
c000d052:	55                   	push   ebp
c000d053:	89 e5                	mov    ebp,esp
c000d055:	83 ec 28             	sub    esp,0x28
c000d058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d05b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d05e:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d063:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d067:	83 ec 08             	sub    esp,0x8
c000d06a:	52                   	push   edx
c000d06b:	50                   	push   eax
c000d06c:	e8 45 bd ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d071:	83 c4 10             	add    esp,0x10
c000d074:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d078:	83 f8 0a             	cmp    eax,0xa
c000d07b:	74 16                	je     c000d093 <sendKeyToTerminal(unsigned char)+0x41>
c000d07d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d081:	83 f8 03             	cmp    eax,0x3
c000d084:	74 0d                	je     c000d093 <sendKeyToTerminal(unsigned char)+0x41>
c000d086:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d08a:	83 f8 1c             	cmp    eax,0x1c
c000d08d:	0f 85 97 00 00 00    	jne    c000d12a <sendKeyToTerminal(unsigned char)+0xd8>
c000d093:	fa                   	cli    
c000d094:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d099:	83 c0 01             	add    eax,0x1
c000d09c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0a1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0a6:	83 c0 01             	add    eax,0x1
c000d0a9:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0ae:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d0b3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0b6:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d0c0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d0c4:	74 1f                	je     c000d0e5 <sendKeyToTerminal(unsigned char)+0x93>
c000d0c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0c9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d0cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d0cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d0d2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0d5:	83 ec 0c             	sub    esp,0xc
c000d0d8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d0db:	e8 98 90 00 00       	call   c0016178 <unblockTask(ThreadControlBlock*)>
c000d0e0:	83 c4 10             	add    esp,0x10
c000d0e3:	eb db                	jmp    c000d0c0 <sendKeyToTerminal(unsigned char)+0x6e>
c000d0e5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0ea:	83 e8 01             	sub    eax,0x1
c000d0ed:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0f2:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0f7:	85 c0                	test   eax,eax
c000d0f9:	75 18                	jne    c000d113 <sendKeyToTerminal(unsigned char)+0xc1>
c000d0fb:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d100:	85 c0                	test   eax,eax
c000d102:	74 0f                	je     c000d113 <sendKeyToTerminal(unsigned char)+0xc1>
c000d104:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d10e:	e8 4d 8b 00 00       	call   c0015c60 <schedule()>
c000d113:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d118:	83 e8 01             	sub    eax,0x1
c000d11b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d120:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d125:	85 c0                	test   eax,eax
c000d127:	75 01                	jne    c000d12a <sendKeyToTerminal(unsigned char)+0xd8>
c000d129:	fb                   	sti    
c000d12a:	90                   	nop
c000d12b:	c9                   	leave  
c000d12c:	c3                   	ret    

c000d12d <sendKeyboardToken(KeyboardToken)>:
c000d12d:	55                   	push   ebp
c000d12e:	89 e5                	mov    ebp,esp
c000d130:	83 ec 18             	sub    esp,0x18
c000d133:	e8 b9 42 00 00       	call   c00113f1 <KeUserIOReceived()>
c000d138:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d13b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d13e:	0f b7 c0             	movzx  eax,ax
c000d141:	83 f2 01             	xor    edx,0x1
c000d144:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d14a:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d14f:	85 c0                	test   eax,eax
c000d151:	74 24                	je     c000d177 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d153:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d159:	83 ec 04             	sub    esp,0x4
c000d15c:	68 40 84 02 c0       	push   0xc0028440
c000d161:	83 ec 08             	sub    esp,0x8
c000d164:	89 e2                	mov    edx,esp
c000d166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d169:	89 02                	mov    DWORD PTR [edx],eax
c000d16b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d16e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d172:	ff d1                	call   ecx
c000d174:	83 c4 10             	add    esp,0x10
c000d177:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d17b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d17e:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d183:	0f b6 d2             	movzx  edx,dl
c000d186:	0f b6 c0             	movzx  eax,al
c000d189:	39 c2                	cmp    edx,eax
c000d18b:	74 1c                	je     c000d1a9 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d18d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d190:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d195:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d19a:	0f b6 c0             	movzx  eax,al
c000d19d:	83 ec 0c             	sub    esp,0xc
c000d1a0:	50                   	push   eax
c000d1a1:	e8 5c b3 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d1a6:	83 c4 10             	add    esp,0x10
c000d1a9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d1ac:	0f b6 c0             	movzx  eax,al
c000d1af:	85 c0                	test   eax,eax
c000d1b1:	0f 84 da 00 00 00    	je     c000d291 <sendKeyboardToken(KeyboardToken)+0x164>
c000d1b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ba:	0f b7 c0             	movzx  eax,ax
c000d1bd:	3d 18 03 00 00       	cmp    eax,0x318
c000d1c2:	75 06                	jne    c000d1ca <sendKeyboardToken(KeyboardToken)+0x9d>
c000d1c4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d1ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1cd:	0f b7 c0             	movzx  eax,ax
c000d1d0:	3d 19 03 00 00       	cmp    eax,0x319
c000d1d5:	75 06                	jne    c000d1dd <sendKeyboardToken(KeyboardToken)+0xb0>
c000d1d7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e0:	0f b7 c0             	movzx  eax,ax
c000d1e3:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1e8:	75 06                	jne    c000d1f0 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d1ea:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f3:	0f b7 c0             	movzx  eax,ax
c000d1f6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1fb:	75 06                	jne    c000d203 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1fd:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d206:	0f b7 c0             	movzx  eax,ax
c000d209:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d20e:	75 06                	jne    c000d216 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d210:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d219:	0f b7 c0             	movzx  eax,ax
c000d21c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d221:	75 06                	jne    c000d229 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d223:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d22c:	0f b7 c0             	movzx  eax,ax
c000d22f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d234:	75 06                	jne    c000d23c <sendKeyboardToken(KeyboardToken)+0x10f>
c000d236:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d23c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d23f:	0f b7 c0             	movzx  eax,ax
c000d242:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d247:	75 06                	jne    c000d24f <sendKeyboardToken(KeyboardToken)+0x122>
c000d249:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d24f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d252:	0f b7 c0             	movzx  eax,ax
c000d255:	3d 20 03 00 00       	cmp    eax,0x320
c000d25a:	75 06                	jne    c000d262 <sendKeyboardToken(KeyboardToken)+0x135>
c000d25c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d265:	0f b7 c0             	movzx  eax,ax
c000d268:	3d 21 03 00 00       	cmp    eax,0x321
c000d26d:	75 06                	jne    c000d275 <sendKeyboardToken(KeyboardToken)+0x148>
c000d26f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d278:	0f b7 c0             	movzx  eax,ax
c000d27b:	3d 22 03 00 00       	cmp    eax,0x322
c000d280:	0f 85 f1 00 00 00    	jne    c000d377 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d286:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d28c:	e9 e6 00 00 00       	jmp    c000d377 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d294:	0f b7 c0             	movzx  eax,ax
c000d297:	3d 18 03 00 00       	cmp    eax,0x318
c000d29c:	75 0a                	jne    c000d2a8 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d29e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d2a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ab:	0f b7 c0             	movzx  eax,ax
c000d2ae:	3d 19 03 00 00       	cmp    eax,0x319
c000d2b3:	75 0a                	jne    c000d2bf <sendKeyboardToken(KeyboardToken)+0x192>
c000d2b5:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d2bb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c2:	0f b7 c0             	movzx  eax,ax
c000d2c5:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d2ca:	75 0a                	jne    c000d2d6 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d2cc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d2d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2d9:	0f b7 c0             	movzx  eax,ax
c000d2dc:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d2e1:	75 0a                	jne    c000d2ed <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d2e3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d2e9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f0:	0f b7 c0             	movzx  eax,ax
c000d2f3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2f8:	75 0a                	jne    c000d304 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2fa:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d300:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d307:	0f b7 c0             	movzx  eax,ax
c000d30a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d30f:	75 0a                	jne    c000d31b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d311:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d317:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d31b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d31e:	0f b7 c0             	movzx  eax,ax
c000d321:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d326:	75 0a                	jne    c000d332 <sendKeyboardToken(KeyboardToken)+0x205>
c000d328:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d32e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d335:	0f b7 c0             	movzx  eax,ax
c000d338:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d33d:	75 0a                	jne    c000d349 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d33f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d345:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d34c:	0f b7 c0             	movzx  eax,ax
c000d34f:	3d 20 03 00 00       	cmp    eax,0x320
c000d354:	75 0a                	jne    c000d360 <sendKeyboardToken(KeyboardToken)+0x233>
c000d356:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d35c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d363:	0f b7 c0             	movzx  eax,ax
c000d366:	3d 21 03 00 00       	cmp    eax,0x321
c000d36b:	75 0a                	jne    c000d377 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d36d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d373:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d37a:	0f b7 c0             	movzx  eax,ax
c000d37d:	3d 00 02 00 00       	cmp    eax,0x200
c000d382:	75 2f                	jne    c000d3b3 <sendKeyboardToken(KeyboardToken)+0x286>
c000d384:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d389:	83 f0 01             	xor    eax,0x1
c000d38c:	0f b6 c0             	movzx  eax,al
c000d38f:	85 c0                	test   eax,eax
c000d391:	74 20                	je     c000d3b3 <sendKeyboardToken(KeyboardToken)+0x286>
c000d393:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d398:	6a 01                	push   0x1
c000d39a:	6a 00                	push   0x0
c000d39c:	68 76 cf 00 c0       	push   0xc000cf76
c000d3a1:	50                   	push   eax
c000d3a2:	e8 69 86 00 00       	call   c0015a10 <Process::createThread(void (*)(void*), void*, int)>
c000d3a7:	83 c4 10             	add    esp,0x10
c000d3aa:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3b1:	eb 3a                	jmp    c000d3ed <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b6:	0f b7 c0             	movzx  eax,ax
c000d3b9:	3d 01 02 00 00       	cmp    eax,0x201
c000d3be:	75 2d                	jne    c000d3ed <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3c0:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d3c5:	83 f0 01             	xor    eax,0x1
c000d3c8:	0f b6 c0             	movzx  eax,al
c000d3cb:	85 c0                	test   eax,eax
c000d3cd:	74 1e                	je     c000d3ed <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3cf:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d3d4:	6a 01                	push   0x1
c000d3d6:	6a 00                	push   0x0
c000d3d8:	68 e4 cf 00 c0       	push   0xc000cfe4
c000d3dd:	50                   	push   eax
c000d3de:	e8 2d 86 00 00       	call   c0015a10 <Process::createThread(void (*)(void*), void*, int)>
c000d3e3:	83 c4 10             	add    esp,0x10
c000d3e6:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f0:	0f b7 c0             	movzx  eax,ax
c000d3f3:	3d 25 03 00 00       	cmp    eax,0x325
c000d3f8:	75 06                	jne    c000d400 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3fa:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d403:	0f b7 c0             	movzx  eax,ax
c000d406:	3d 24 03 00 00       	cmp    eax,0x324
c000d40b:	75 06                	jne    c000d413 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d40d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d416:	0f b7 c0             	movzx  eax,ax
c000d419:	3d 23 03 00 00       	cmp    eax,0x323
c000d41e:	75 06                	jne    c000d426 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d420:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d429:	0f b7 c0             	movzx  eax,ax
c000d42c:	3d 26 03 00 00       	cmp    eax,0x326
c000d431:	75 06                	jne    c000d439 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d433:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43c:	0f b7 c0             	movzx  eax,ax
c000d43f:	3d 27 03 00 00       	cmp    eax,0x327
c000d444:	75 06                	jne    c000d44c <sendKeyboardToken(KeyboardToken)+0x31f>
c000d446:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d44c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44f:	0f b7 c0             	movzx  eax,ax
c000d452:	3d 22 03 00 00       	cmp    eax,0x322
c000d457:	75 06                	jne    c000d45f <sendKeyboardToken(KeyboardToken)+0x332>
c000d459:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d45f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d463:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d466:	83 f0 01             	xor    eax,0x1
c000d469:	0f b6 c0             	movzx  eax,al
c000d46c:	85 c0                	test   eax,eax
c000d46e:	74 7c                	je     c000d4ec <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d470:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d475:	0f b6 c0             	movzx  eax,al
c000d478:	85 c0                	test   eax,eax
c000d47a:	74 43                	je     c000d4bf <sendKeyboardToken(KeyboardToken)+0x392>
c000d47c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d480:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d484:	85 c0                	test   eax,eax
c000d486:	74 2b                	je     c000d4b3 <sendKeyboardToken(KeyboardToken)+0x386>
c000d488:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d48e:	89 d0                	mov    eax,edx
c000d490:	c1 e0 02             	shl    eax,0x2
c000d493:	01 d0                	add    eax,edx
c000d495:	01 c0                	add    eax,eax
c000d497:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d49c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49f:	0f b7 c0             	movzx  eax,ax
c000d4a2:	8d 50 d0             	lea    edx,[eax-0x30]
c000d4a5:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4aa:	01 d0                	add    eax,edx
c000d4ac:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d4b1:	eb 71                	jmp    c000d524 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4b3:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4bd:	eb 65                	jmp    c000d524 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4bf:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4c4:	85 c0                	test   eax,eax
c000d4c6:	74 18                	je     c000d4e0 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d4c8:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4cd:	0f b6 c0             	movzx  eax,al
c000d4d0:	83 ec 0c             	sub    esp,0xc
c000d4d3:	50                   	push   eax
c000d4d4:	e8 79 fb ff ff       	call   c000d052 <sendKeyToTerminal(unsigned char)>
c000d4d9:	83 c4 10             	add    esp,0x10
c000d4dc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4e0:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4ea:	eb 38                	jmp    c000d524 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ef:	0f b7 c0             	movzx  eax,ax
c000d4f2:	3d 01 01 00 00       	cmp    eax,0x101
c000d4f7:	75 2b                	jne    c000d524 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4f9:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4fe:	85 c0                	test   eax,eax
c000d500:	74 18                	je     c000d51a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d502:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d507:	0f b6 c0             	movzx  eax,al
c000d50a:	83 ec 0c             	sub    esp,0xc
c000d50d:	50                   	push   eax
c000d50e:	e8 3f fb ff ff       	call   c000d052 <sendKeyToTerminal(unsigned char)>
c000d513:	83 c4 10             	add    esp,0x10
c000d516:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d51a:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d524:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d527:	83 f0 01             	xor    eax,0x1
c000d52a:	0f b6 c0             	movzx  eax,al
c000d52d:	85 c0                	test   eax,eax
c000d52f:	74 5a                	je     c000d58b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d531:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d534:	83 f0 01             	xor    eax,0x1
c000d537:	0f b6 c0             	movzx  eax,al
c000d53a:	85 c0                	test   eax,eax
c000d53c:	74 4d                	je     c000d58b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d53e:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d543:	83 f0 01             	xor    eax,0x1
c000d546:	0f b6 c0             	movzx  eax,al
c000d549:	85 c0                	test   eax,eax
c000d54b:	74 3e                	je     c000d58b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d54d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d550:	0f b7 c0             	movzx  eax,ax
c000d553:	83 f8 1f             	cmp    eax,0x1f
c000d556:	76 0b                	jbe    c000d563 <sendKeyboardToken(KeyboardToken)+0x436>
c000d558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55b:	0f b7 c0             	movzx  eax,ax
c000d55e:	83 f8 7e             	cmp    eax,0x7e
c000d561:	76 16                	jbe    c000d579 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d566:	0f b7 c0             	movzx  eax,ax
c000d569:	83 f8 0a             	cmp    eax,0xa
c000d56c:	74 0b                	je     c000d579 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d56e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d571:	0f b7 c0             	movzx  eax,ax
c000d574:	83 f8 08             	cmp    eax,0x8
c000d577:	75 12                	jne    c000d58b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d57c:	0f b6 c0             	movzx  eax,al
c000d57f:	83 ec 0c             	sub    esp,0xc
c000d582:	50                   	push   eax
c000d583:	e8 ca fa ff ff       	call   c000d052 <sendKeyToTerminal(unsigned char)>
c000d588:	83 c4 10             	add    esp,0x10
c000d58b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d58e:	83 f0 01             	xor    eax,0x1
c000d591:	0f b6 c0             	movzx  eax,al
c000d594:	85 c0                	test   eax,eax
c000d596:	74 5d                	je     c000d5f5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d598:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d59b:	83 f0 01             	xor    eax,0x1
c000d59e:	0f b6 c0             	movzx  eax,al
c000d5a1:	85 c0                	test   eax,eax
c000d5a3:	74 50                	je     c000d5f5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5a5:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d5aa:	0f b6 c0             	movzx  eax,al
c000d5ad:	85 c0                	test   eax,eax
c000d5af:	74 44                	je     c000d5f5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b4:	0f b7 c0             	movzx  eax,ax
c000d5b7:	83 f8 3f             	cmp    eax,0x3f
c000d5ba:	76 39                	jbe    c000d5f5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5bf:	0f b7 c0             	movzx  eax,ax
c000d5c2:	83 f8 7f             	cmp    eax,0x7f
c000d5c5:	77 2e                	ja     c000d5f5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ca:	88 c2                	mov    dl,al
c000d5cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5cf:	0f b7 c0             	movzx  eax,ax
c000d5d2:	83 f8 5f             	cmp    eax,0x5f
c000d5d5:	76 04                	jbe    c000d5db <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d5d7:	b0 20                	mov    al,0x20
c000d5d9:	eb 02                	jmp    c000d5dd <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d5db:	b0 00                	mov    al,0x0
c000d5dd:	89 d1                	mov    ecx,edx
c000d5df:	29 c1                	sub    ecx,eax
c000d5e1:	89 c8                	mov    eax,ecx
c000d5e3:	83 e8 40             	sub    eax,0x40
c000d5e6:	0f b6 c0             	movzx  eax,al
c000d5e9:	83 ec 0c             	sub    esp,0xc
c000d5ec:	50                   	push   eax
c000d5ed:	e8 60 fa ff ff       	call   c000d052 <sendKeyToTerminal(unsigned char)>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f8:	0f b7 c0             	movzx  eax,ax
c000d5fb:	3d 00 03 00 00       	cmp    eax,0x300
c000d600:	75 12                	jne    c000d614 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d602:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d605:	83 f0 01             	xor    eax,0x1
c000d608:	0f b6 c0             	movzx  eax,al
c000d60b:	85 c0                	test   eax,eax
c000d60d:	74 05                	je     c000d614 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d60f:	e8 ef ae ff ff       	call   c0008503 <doTerminalCycle()>
c000d614:	90                   	nop
c000d615:	c9                   	leave  
c000d616:	c3                   	ret    

c000d617 <clearInternalKeybuffer(VgaText*)>:
c000d617:	55                   	push   ebp
c000d618:	89 e5                	mov    ebp,esp
c000d61a:	83 ec 08             	sub    esp,0x8
c000d61d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d620:	05 02 01 00 00       	add    eax,0x102
c000d625:	83 ec 0c             	sub    esp,0xc
c000d628:	50                   	push   eax
c000d629:	e8 42 2f ff ff       	call   c0000570 <strlen>
c000d62e:	83 c4 10             	add    esp,0x10
c000d631:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d634:	81 c2 02 01 00 00    	add    edx,0x102
c000d63a:	83 ec 04             	sub    esp,0x4
c000d63d:	50                   	push   eax
c000d63e:	6a 00                	push   0x0
c000d640:	52                   	push   edx
c000d641:	e8 aa 2e ff ff       	call   c00004f0 <memset>
c000d646:	83 c4 10             	add    esp,0x10
c000d649:	90                   	nop
c000d64a:	c9                   	leave  
c000d64b:	c3                   	ret    

c000d64c <readKeyboard(VgaText*, char*, unsigned long)>:
c000d64c:	55                   	push   ebp
c000d64d:	89 e5                	mov    ebp,esp
c000d64f:	83 ec 18             	sub    esp,0x18
c000d652:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d657:	85 c0                	test   eax,eax
c000d659:	74 2a                	je     c000d685 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d65b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d661:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d667:	83 ec 04             	sub    esp,0x4
c000d66a:	68 40 84 02 c0       	push   0xc0028440
c000d66f:	83 ec 08             	sub    esp,0x8
c000d672:	89 e2                	mov    edx,esp
c000d674:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d677:	89 02                	mov    DWORD PTR [edx],eax
c000d679:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d67c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d680:	ff d1                	call   ecx
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	fb                   	sti    
c000d686:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d68d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d691:	0f 84 0d 01 00 00    	je     c000d7a4 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6a0:	0f be c0             	movsx  eax,al
c000d6a3:	85 c0                	test   eax,eax
c000d6a5:	75 2c                	jne    c000d6d3 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d6a7:	fa                   	cli    
c000d6a8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6ad:	83 c0 01             	add    eax,0x1
c000d6b0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6b5:	e8 a6 85 00 00       	call   c0015c60 <schedule()>
c000d6ba:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6bf:	83 e8 01             	sub    eax,0x1
c000d6c2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6c7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6cc:	85 c0                	test   eax,eax
c000d6ce:	75 c7                	jne    c000d697 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6d0:	fb                   	sti    
c000d6d1:	eb c4                	jmp    c000d697 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d6d6:	8d 50 01             	lea    edx,[eax+0x1]
c000d6d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d6dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6df:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d6e5:	88 10                	mov    BYTE PTR [eax],dl
c000d6e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ea:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6f0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6f3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6f7:	83 f8 03             	cmp    eax,0x3
c000d6fa:	75 1e                	jne    c000d71a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6fc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d701:	8b 00                	mov    eax,DWORD PTR [eax]
c000d703:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d706:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d70c:	83 ec 08             	sub    esp,0x8
c000d70f:	6a 02                	push   0x2
c000d711:	50                   	push   eax
c000d712:	e8 2b 41 00 00       	call   c0011842 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d71e:	83 f8 1c             	cmp    eax,0x1c
c000d721:	75 1e                	jne    c000d741 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d723:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d728:	8b 00                	mov    eax,DWORD PTR [eax]
c000d72a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d72d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d733:	83 ec 08             	sub    esp,0x8
c000d736:	6a 09                	push   0x9
c000d738:	50                   	push   eax
c000d739:	e8 04 41 00 00       	call   c0011842 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d73e:	83 c4 10             	add    esp,0x10
c000d741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d744:	05 02 01 00 00       	add    eax,0x102
c000d749:	83 ec 0c             	sub    esp,0xc
c000d74c:	50                   	push   eax
c000d74d:	e8 1e 2e ff ff       	call   c0000570 <strlen>
c000d752:	83 c4 10             	add    esp,0x10
c000d755:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d758:	81 c2 02 01 00 00    	add    edx,0x102
c000d75e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d761:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d764:	81 c2 02 01 00 00    	add    edx,0x102
c000d76a:	83 ec 04             	sub    esp,0x4
c000d76d:	50                   	push   eax
c000d76e:	51                   	push   ecx
c000d76f:	52                   	push   edx
c000d770:	e8 5b 2c ff ff       	call   c00003d0 <memmove>
c000d775:	83 c4 10             	add    esp,0x10
c000d778:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d77c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d780:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d784:	83 f8 0a             	cmp    eax,0xa
c000d787:	74 16                	je     c000d79f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d789:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d78d:	83 f8 03             	cmp    eax,0x3
c000d790:	74 0d                	je     c000d79f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d792:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d796:	83 f8 1c             	cmp    eax,0x1c
c000d799:	0f 85 ee fe ff ff    	jne    c000d68d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d79f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d7a2:	eb 03                	jmp    c000d7a7 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d7a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d7a7:	c9                   	leave  
c000d7a8:	c3                   	ret    
c000d7a9:	90                   	nop

c000d7aa <Keyboard::Keyboard(char const*)>:
c000d7aa:	83 ec 0c             	sub    esp,0xc
c000d7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b1:	83 ec 08             	sub    esp,0x8
c000d7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b8:	50                   	push   eax
c000d7b9:	e8 4c f1 ff ff       	call   c000c90a <Device::Device(char const*)>
c000d7be:	83 c4 10             	add    esp,0x10
c000d7c1:	ba dc 17 02 c0       	mov    edx,0xc00217dc
c000d7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ca:	89 10                	mov    DWORD PTR [eax],edx
c000d7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d7da:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d7e1:	90                   	nop
c000d7e2:	83 c4 0c             	add    esp,0xc
c000d7e5:	c3                   	ret    

c000d7e6 <Keyboard::~Keyboard()>:
c000d7e6:	83 ec 0c             	sub    esp,0xc
c000d7e9:	ba dc 17 02 c0       	mov    edx,0xc00217dc
c000d7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f2:	89 10                	mov    DWORD PTR [eax],edx
c000d7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f8:	83 ec 0c             	sub    esp,0xc
c000d7fb:	50                   	push   eax
c000d7fc:	e8 73 ee ff ff       	call   c000c674 <Device::~Device()>
c000d801:	83 c4 10             	add    esp,0x10
c000d804:	90                   	nop
c000d805:	83 c4 0c             	add    esp,0xc
c000d808:	c3                   	ret    
c000d809:	90                   	nop

c000d80a <Keyboard::~Keyboard()>:
c000d80a:	83 ec 0c             	sub    esp,0xc
c000d80d:	83 ec 0c             	sub    esp,0xc
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	e8 cd ff ff ff       	call   c000d7e6 <Keyboard::~Keyboard()>
c000d819:	83 c4 10             	add    esp,0x10
c000d81c:	83 ec 08             	sub    esp,0x8
c000d81f:	68 5c 01 00 00       	push   0x15c
c000d824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d828:	e8 eb cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d82d:	83 c4 10             	add    esp,0x10
c000d830:	83 c4 0c             	add    esp,0xc
c000d833:	c3                   	ret    

c000d834 <LogicalDisk::close(int, int, void*)>:
c000d834:	83 c8 ff             	or     eax,0xffffffff
c000d837:	c3                   	ret    

c000d838 <LogicalDisk::~LogicalDisk()>:
c000d838:	83 ec 0c             	sub    esp,0xc
c000d83b:	ba 54 18 02 c0       	mov    edx,0xc0021854
c000d840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d844:	89 10                	mov    DWORD PTR [eax],edx
c000d846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84a:	83 ec 0c             	sub    esp,0xc
c000d84d:	50                   	push   eax
c000d84e:	e8 21 ee ff ff       	call   c000c674 <Device::~Device()>
c000d853:	83 c4 10             	add    esp,0x10
c000d856:	90                   	nop
c000d857:	83 c4 0c             	add    esp,0xc
c000d85a:	c3                   	ret    
c000d85b:	90                   	nop

c000d85c <LogicalDisk::~LogicalDisk()>:
c000d85c:	83 ec 0c             	sub    esp,0xc
c000d85f:	83 ec 0c             	sub    esp,0xc
c000d862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d866:	e8 cd ff ff ff       	call   c000d838 <LogicalDisk::~LogicalDisk()>
c000d86b:	83 c4 10             	add    esp,0x10
c000d86e:	83 ec 08             	sub    esp,0x8
c000d871:	68 78 01 00 00       	push   0x178
c000d876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d87a:	e8 99 cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d87f:	83 c4 10             	add    esp,0x10
c000d882:	83 c4 0c             	add    esp,0xc
c000d885:	c3                   	ret    

c000d886 <LogicalDisk::open(int, int, void*)>:
c000d886:	83 ec 18             	sub    esp,0x18
c000d889:	68 08 18 02 c0       	push   0xc0021808
c000d88e:	e8 0e 3b 00 00       	call   c00113a1 <KePanic(char const*)>
c000d893:	83 c8 ff             	or     eax,0xffffffff
c000d896:	83 c4 1c             	add    esp,0x1c
c000d899:	c3                   	ret    

c000d89a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d89a:	53                   	push   ebx
c000d89b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d89f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8a7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d8ad:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d8b3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d8b9:	77 10                	ja     c000d8cb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d8bb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d8c1:	89 d3                	mov    ebx,edx
c000d8c3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d8c9:	72 05                	jb     c000d8d0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d8cb:	83 c8 ff             	or     eax,0xffffffff
c000d8ce:	89 c2                	mov    edx,eax
c000d8d0:	5b                   	pop    ebx
c000d8d1:	c3                   	ret    

c000d8d2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d8d2:	56                   	push   esi
c000d8d3:	83 c8 ff             	or     eax,0xffffffff
c000d8d6:	53                   	push   ebx
c000d8d7:	89 c2                	mov    edx,eax
c000d8d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8dd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d8e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8eb:	77 27                	ja     c000d914 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8ed:	89 d8                	mov    eax,ebx
c000d8ef:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8f5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d900:	89 c2                	mov    edx,eax
c000d902:	73 10                	jae    c000d914 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d904:	89 c8                	mov    eax,ecx
c000d906:	89 da                	mov    edx,ebx
c000d908:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d90e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d914:	5b                   	pop    ebx
c000d915:	5e                   	pop    esi
c000d916:	c3                   	ret    
c000d917:	90                   	nop

c000d918 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d918:	83 ec 1c             	sub    esp,0x1c
c000d91b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d91f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d923:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d927:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d92b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d92f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d936:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d93e:	83 ec 08             	sub    esp,0x8
c000d941:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d945:	50                   	push   eax
c000d946:	e8 bf ef ff ff       	call   c000c90a <Device::Device(char const*)>
c000d94b:	83 c4 10             	add    esp,0x10
c000d94e:	ba 54 18 02 c0       	mov    edx,0xc0021854
c000d953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d957:	89 10                	mov    DWORD PTR [eax],edx
c000d959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d95d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d968:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d973:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d988:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d98c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d990:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d994:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d99a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d9a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d9a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d9a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d9ab:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d9b1:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d9bf:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d9c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c9:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9d3:	90                   	nop
c000d9d4:	83 c4 1c             	add    esp,0x1c
c000d9d7:	c3                   	ret    

c000d9d8 <LogicalDisk::assignDriveLetter()>:
c000d9d8:	55                   	push   ebp
c000d9d9:	57                   	push   edi
c000d9da:	56                   	push   esi
c000d9db:	53                   	push   ebx
c000d9dc:	83 ec 14             	sub    esp,0x14
c000d9df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9e3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d9e9:	b0 41                	mov    al,0x41
c000d9eb:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9f1:	84 d2                	test   dl,dl
c000d9f3:	75 02                	jne    c000d9f7 <LogicalDisk::assignDriveLetter()+0x1f>
c000d9f5:	b0 43                	mov    al,0x43
c000d9f7:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9fd:	0f b6 ca             	movzx  ecx,dl
c000da00:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000da04:	0f be e8             	movsx  ebp,al
c000da07:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000da0d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000da11:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000da15:	3c 43                	cmp    al,0x43
c000da17:	75 10                	jne    c000da29 <LogicalDisk::assignDriveLetter()+0x51>
c000da19:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000da20:	75 5a                	jne    c000da7c <LogicalDisk::assignDriveLetter()+0xa4>
c000da22:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000da27:	75 53                	jne    c000da7c <LogicalDisk::assignDriveLetter()+0xa4>
c000da29:	8d 75 bf             	lea    esi,[ebp-0x41]
c000da2c:	ba 01 00 00 00       	mov    edx,0x1
c000da31:	89 34 24             	mov    DWORD PTR [esp],esi
c000da34:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000da37:	d3 e2                	shl    edx,cl
c000da39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da3d:	89 d7                	mov    edi,edx
c000da3f:	89 d6                	mov    esi,edx
c000da41:	c1 ff 1f             	sar    edi,0x1f
c000da44:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000da48:	21 f9                	and    ecx,edi
c000da4a:	09 d1                	or     ecx,edx
c000da4c:	75 2e                	jne    c000da7c <LogicalDisk::assignDriveLetter()+0xa4>
c000da4e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da56:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da5c:	09 f2                	or     edx,esi
c000da5e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da61:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da67:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da72:	09 fa                	or     edx,edi
c000da74:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da7a:	eb 0d                	jmp    c000da89 <LogicalDisk::assignDriveLetter()+0xb1>
c000da7c:	8d 50 01             	lea    edx,[eax+0x1]
c000da7f:	45                   	inc    ebp
c000da80:	88 d0                	mov    al,dl
c000da82:	80 fa 5b             	cmp    dl,0x5b
c000da85:	75 8e                	jne    c000da15 <LogicalDisk::assignDriveLetter()+0x3d>
c000da87:	31 c0                	xor    eax,eax
c000da89:	83 c4 14             	add    esp,0x14
c000da8c:	5b                   	pop    ebx
c000da8d:	5e                   	pop    esi
c000da8e:	5f                   	pop    edi
c000da8f:	5d                   	pop    ebp
c000da90:	c3                   	ret    
c000da91:	90                   	nop

c000da92 <LogicalDisk::mount()>:
c000da92:	56                   	push   esi
c000da93:	53                   	push   ebx
c000da94:	53                   	push   ebx
c000da95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da99:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da9f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000daa9:	85 db                	test   ebx,ebx
c000daab:	74 27                	je     c000dad4 <LogicalDisk::mount()+0x42>
c000daad:	51                   	push   ecx
c000daae:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dab5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dab7:	83 e8 41             	sub    eax,0x41
c000daba:	50                   	push   eax
c000dabb:	56                   	push   esi
c000dabc:	53                   	push   ebx
c000dabd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dac0:	83 c4 10             	add    esp,0x10
c000dac3:	84 c0                	test   al,al
c000dac5:	74 08                	je     c000dacf <LogicalDisk::mount()+0x3d>
c000dac7:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dacd:	eb 07                	jmp    c000dad6 <LogicalDisk::mount()+0x44>
c000dacf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dad2:	eb d5                	jmp    c000daa9 <LogicalDisk::mount()+0x17>
c000dad4:	31 c0                	xor    eax,eax
c000dad6:	5a                   	pop    edx
c000dad7:	5b                   	pop    ebx
c000dad8:	5e                   	pop    esi
c000dad9:	c3                   	ret    

c000dada <LogicalDisk::unmount()>:
c000dada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dade:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dae8:	c3                   	ret    
c000dae9:	90                   	nop

c000daea <LogicalDisk::eject()>:
c000daea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000daf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000daf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dafa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dafd:	90                   	nop

c000dafe <LogicalDisk::unassignDriveLetter()>:
c000dafe:	57                   	push   edi
c000daff:	56                   	push   esi
c000db00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db04:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000db0b:	85 c9                	test   ecx,ecx
c000db0d:	75 0f                	jne    c000db1e <LogicalDisk::unassignDriveLetter()+0x20>
c000db0f:	c7 44 24 0c 2c 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc002182c
c000db17:	5e                   	pop    esi
c000db18:	5f                   	pop    edi
c000db19:	e9 83 38 00 00       	jmp    c00113a1 <KePanic(char const*)>
c000db1e:	83 e9 41             	sub    ecx,0x41
c000db21:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000db28:	b8 01 00 00 00       	mov    eax,0x1
c000db2d:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000db38:	d3 e0                	shl    eax,cl
c000db3a:	89 c7                	mov    edi,eax
c000db3c:	f7 d0                	not    eax
c000db3e:	c1 ff 1f             	sar    edi,0x1f
c000db41:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db47:	89 fe                	mov    esi,edi
c000db49:	f7 d6                	not    esi
c000db4b:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db51:	5e                   	pop    esi
c000db52:	5f                   	pop    edi
c000db53:	c3                   	ret    

c000db54 <LogicalDisk::read(unsigned long long, int, void*)>:
c000db54:	57                   	push   edi
c000db55:	56                   	push   esi
c000db56:	53                   	push   ebx
c000db57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db67:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db6d:	77 41                	ja     c000dbb0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db6f:	99                   	cdq    
c000db70:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db76:	01 c8                	add    eax,ecx
c000db78:	11 da                	adc    edx,ebx
c000db7a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db80:	19 d7                	sbb    edi,edx
c000db82:	72 33                	jb     c000dbb7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db84:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db8a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db90:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db94:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db98:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dba4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dba8:	5b                   	pop    ebx
c000dba9:	5e                   	pop    esi
c000dbaa:	5f                   	pop    edi
c000dbab:	e9 c6 0a 00 00       	jmp    c000e676 <VCache::read(unsigned long long, int, void*)>
c000dbb0:	b8 05 00 00 00       	mov    eax,0x5
c000dbb5:	eb 05                	jmp    c000dbbc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dbb7:	b8 07 00 00 00       	mov    eax,0x7
c000dbbc:	5b                   	pop    ebx
c000dbbd:	5e                   	pop    esi
c000dbbe:	5f                   	pop    edi
c000dbbf:	c3                   	ret    

c000dbc0 <LogicalDisk::write(unsigned long long, int, void*)>:
c000dbc0:	57                   	push   edi
c000dbc1:	56                   	push   esi
c000dbc2:	53                   	push   ebx
c000dbc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dbc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbcb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dbcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbd3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbd9:	77 41                	ja     c000dc1c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dbdb:	99                   	cdq    
c000dbdc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dbe2:	01 c8                	add    eax,ecx
c000dbe4:	11 da                	adc    edx,ebx
c000dbe6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dbec:	19 d7                	sbb    edi,edx
c000dbee:	72 33                	jb     c000dc23 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dbf0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbf6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbfc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dc00:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc04:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dc0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dc10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc14:	5b                   	pop    ebx
c000dc15:	5e                   	pop    esi
c000dc16:	5f                   	pop    edi
c000dc17:	e9 6c 09 00 00       	jmp    c000e588 <VCache::write(unsigned long long, int, void*)>
c000dc1c:	b8 05 00 00 00       	mov    eax,0x5
c000dc21:	eb 05                	jmp    c000dc28 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dc23:	b8 07 00 00 00       	mov    eax,0x7
c000dc28:	5b                   	pop    ebx
c000dc29:	5e                   	pop    esi
c000dc2a:	5f                   	pop    edi
c000dc2b:	c3                   	ret    

c000dc2c <Mouse::Mouse(char const*)>:
c000dc2c:	83 ec 0c             	sub    esp,0xc
c000dc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc33:	83 ec 08             	sub    esp,0x8
c000dc36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc3a:	50                   	push   eax
c000dc3b:	e8 ca ec ff ff       	call   c000c90a <Device::Device(char const*)>
c000dc40:	83 c4 10             	add    esp,0x10
c000dc43:	ba 80 18 02 c0       	mov    edx,0xc0021880
c000dc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc4c:	89 10                	mov    DWORD PTR [eax],edx
c000dc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc52:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc5c:	90                   	nop
c000dc5d:	83 c4 0c             	add    esp,0xc
c000dc60:	c3                   	ret    
c000dc61:	90                   	nop
c000dc62:	66 90                	xchg   ax,ax

c000dc64 <Mouse::~Mouse()>:
c000dc64:	83 ec 0c             	sub    esp,0xc
c000dc67:	ba 80 18 02 c0       	mov    edx,0xc0021880
c000dc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc70:	89 10                	mov    DWORD PTR [eax],edx
c000dc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc76:	83 ec 0c             	sub    esp,0xc
c000dc79:	50                   	push   eax
c000dc7a:	e8 f5 e9 ff ff       	call   c000c674 <Device::~Device()>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	90                   	nop
c000dc83:	83 c4 0c             	add    esp,0xc
c000dc86:	c3                   	ret    
c000dc87:	90                   	nop

c000dc88 <Mouse::~Mouse()>:
c000dc88:	83 ec 0c             	sub    esp,0xc
c000dc8b:	83 ec 0c             	sub    esp,0xc
c000dc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc92:	e8 cd ff ff ff       	call   c000dc64 <Mouse::~Mouse()>
c000dc97:	83 c4 10             	add    esp,0x10
c000dc9a:	83 ec 08             	sub    esp,0x8
c000dc9d:	68 58 01 00 00       	push   0x158
c000dca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca6:	e8 6d cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dcab:	83 c4 10             	add    esp,0x10
c000dcae:	83 c4 0c             	add    esp,0xc
c000dcb1:	c3                   	ret    

c000dcb2 <NIC::getMAC()>:
c000dcb2:	31 c0                	xor    eax,eax
c000dcb4:	31 d2                	xor    edx,edx
c000dcb6:	c3                   	ret    
c000dcb7:	90                   	nop

c000dcb8 <NIC::write(int, unsigned char*, int*)>:
c000dcb8:	b8 01 00 00 00       	mov    eax,0x1
c000dcbd:	c3                   	ret    

c000dcbe <NIC::NIC(char const*)>:
c000dcbe:	83 ec 0c             	sub    esp,0xc
c000dcc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc5:	83 ec 08             	sub    esp,0x8
c000dcc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dccc:	50                   	push   eax
c000dccd:	e8 38 ec ff ff       	call   c000c90a <Device::Device(char const*)>
c000dcd2:	83 c4 10             	add    esp,0x10
c000dcd5:	ba ac 18 02 c0       	mov    edx,0xc00218ac
c000dcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcde:	89 10                	mov    DWORD PTR [eax],edx
c000dce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dce4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dcee:	90                   	nop
c000dcef:	83 c4 0c             	add    esp,0xc
c000dcf2:	c3                   	ret    
c000dcf3:	90                   	nop

c000dcf4 <NIC::~NIC()>:
c000dcf4:	83 ec 0c             	sub    esp,0xc
c000dcf7:	ba ac 18 02 c0       	mov    edx,0xc00218ac
c000dcfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd00:	89 10                	mov    DWORD PTR [eax],edx
c000dd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd06:	83 ec 0c             	sub    esp,0xc
c000dd09:	50                   	push   eax
c000dd0a:	e8 65 e9 ff ff       	call   c000c674 <Device::~Device()>
c000dd0f:	83 c4 10             	add    esp,0x10
c000dd12:	90                   	nop
c000dd13:	83 c4 0c             	add    esp,0xc
c000dd16:	c3                   	ret    
c000dd17:	90                   	nop

c000dd18 <NIC::~NIC()>:
c000dd18:	83 ec 0c             	sub    esp,0xc
c000dd1b:	83 ec 0c             	sub    esp,0xc
c000dd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd22:	e8 cd ff ff ff       	call   c000dcf4 <NIC::~NIC()>
c000dd27:	83 c4 10             	add    esp,0x10
c000dd2a:	83 ec 08             	sub    esp,0x8
c000dd2d:	68 58 01 00 00       	push   0x158
c000dd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd36:	e8 dd ca ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dd3b:	83 c4 10             	add    esp,0x10
c000dd3e:	83 c4 0c             	add    esp,0xc
c000dd41:	c3                   	ret    

c000dd42 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dd42:	55                   	push   ebp
c000dd43:	57                   	push   edi
c000dd44:	56                   	push   esi
c000dd45:	53                   	push   ebx
c000dd46:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd4c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dd53:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dd5a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dd61:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dd68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd6c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd70:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd77:	e8 8a ec ff ff       	call   c000ca06 <Device::getName()>
c000dd7c:	5a                   	pop    edx
c000dd7d:	59                   	pop    ecx
c000dd7e:	50                   	push   eax
c000dd7f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd83:	55                   	push   ebp
c000dd84:	e8 b7 28 ff ff       	call   c0000640 <strcpy>
c000dd89:	5b                   	pop    ebx
c000dd8a:	58                   	pop    eax
c000dd8b:	68 d8 18 02 c0       	push   0xc00218d8
c000dd90:	55                   	push   ebp
c000dd91:	e8 aa 2a ff ff       	call   c0000840 <strcat>
c000dd96:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd9d:	e8 14 9d ff ff       	call   c0007ab6 <malloc>
c000dda2:	83 c4 0c             	add    esp,0xc
c000dda5:	89 c3                	mov    ebx,eax
c000dda7:	57                   	push   edi
c000dda8:	56                   	push   esi
c000dda9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddb1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ddb8:	55                   	push   ebp
c000ddb9:	50                   	push   eax
c000ddba:	e8 59 fb ff ff       	call   c000d918 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ddbf:	83 c4 14             	add    esp,0x14
c000ddc2:	53                   	push   ebx
c000ddc3:	e8 10 fc ff ff       	call   c000d9d8 <LogicalDisk::assignDriveLetter()>
c000ddc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ddcb:	e8 c2 fc ff ff       	call   c000da92 <LogicalDisk::mount()>
c000ddd0:	58                   	pop    eax
c000ddd1:	5a                   	pop    edx
c000ddd2:	53                   	push   ebx
c000ddd3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ddda:	e8 93 e9 ff ff       	call   c000c772 <Device::addChild(Device*)>
c000dddf:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dde5:	5b                   	pop    ebx
c000dde6:	5e                   	pop    esi
c000dde7:	5f                   	pop    edi
c000dde8:	5d                   	pop    ebp
c000dde9:	c3                   	ret    

c000ddea <createPartitionsForDisk(PhysicalDisk*)>:
c000ddea:	55                   	push   ebp
c000ddeb:	57                   	push   edi
c000ddec:	56                   	push   esi
c000dded:	53                   	push   ebx
c000ddee:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ddf4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ddfb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000de01:	3d 00 02 00 00       	cmp    eax,0x200
c000de06:	74 27                	je     c000de2f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000de08:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000de0e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000de14:	83 ec 10             	sub    esp,0x10
c000de17:	0f a4 f7 0a          	shld   edi,esi,0xa
c000de1b:	99                   	cdq    
c000de1c:	c1 e6 0a             	shl    esi,0xa
c000de1f:	52                   	push   edx
c000de20:	89 fd                	mov    ebp,edi
c000de22:	50                   	push   eax
c000de23:	55                   	push   ebp
c000de24:	56                   	push   esi
c000de25:	e8 a6 14 01 00       	call   c001f2d0 <__udivdi3>
c000de2a:	e9 b9 00 00 00       	jmp    c000dee8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de2f:	83 ec 0c             	sub    esp,0xc
c000de32:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de34:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000de38:	56                   	push   esi
c000de39:	6a 01                	push   0x1
c000de3b:	6a 00                	push   0x0
c000de3d:	6a 00                	push   0x0
c000de3f:	53                   	push   ebx
c000de40:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000de43:	83 c4 20             	add    esp,0x20
c000de46:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de4e:	75 0a                	jne    c000de5a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de50:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de58:	74 2c                	je     c000de86 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de5a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de60:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de6c:	83 ec 10             	sub    esp,0x10
c000de6f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de73:	89 f7                	mov    edi,esi
c000de75:	c1 e0 0a             	shl    eax,0xa
c000de78:	c1 ff 1f             	sar    edi,0x1f
c000de7b:	57                   	push   edi
c000de7c:	56                   	push   esi
c000de7d:	52                   	push   edx
c000de7e:	50                   	push   eax
c000de7f:	e8 4c 14 01 00       	call   c001f2d0 <__udivdi3>
c000de84:	eb 62                	jmp    c000dee8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de86:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de8d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de94:	89 cf                	mov    edi,ecx
c000de96:	83 e2 7f             	and    edx,0x7f
c000de99:	83 e7 7f             	and    edi,0x7f
c000de9c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dea3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dea6:	83 e0 7f             	and    eax,0x7f
c000dea9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000deac:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000deb3:	83 e0 7f             	and    eax,0x7f
c000deb6:	01 d0                	add    eax,edx
c000deb8:	89 c5                	mov    ebp,eax
c000deba:	84 c0                	test   al,al
c000debc:	74 41                	je     c000deff <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000debe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dec4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000deca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ded0:	83 ec 10             	sub    esp,0x10
c000ded3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ded7:	89 f7                	mov    edi,esi
c000ded9:	c1 e0 0a             	shl    eax,0xa
c000dedc:	c1 ff 1f             	sar    edi,0x1f
c000dedf:	57                   	push   edi
c000dee0:	56                   	push   esi
c000dee1:	52                   	push   edx
c000dee2:	50                   	push   eax
c000dee3:	e8 e8 13 01 00       	call   c001f2d0 <__udivdi3>
c000dee8:	83 c4 14             	add    esp,0x14
c000deeb:	52                   	push   edx
c000deec:	50                   	push   eax
c000deed:	6a 00                	push   0x0
c000deef:	6a 00                	push   0x0
c000def1:	53                   	push   ebx
c000def2:	e8 4b fe ff ff       	call   c000dd42 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000def7:	83 c4 20             	add    esp,0x20
c000defa:	e9 73 01 00 00       	jmp    c000e072 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000deff:	89 f0                	mov    eax,esi
c000df01:	31 c9                	xor    ecx,ecx
c000df03:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000df0a:	75 02                	jne    c000df0e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000df0c:	89 cd                	mov    ebp,ecx
c000df0e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000df15:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000df1c:	c1 e2 08             	shl    edx,0x8
c000df1f:	c1 e6 10             	shl    esi,0x10
c000df22:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000df2a:	09 f2                	or     edx,esi
c000df2c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000df34:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000df3b:	83 c0 10             	add    eax,0x10
c000df3e:	09 f2                	or     edx,esi
c000df40:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df47:	c1 e6 18             	shl    esi,0x18
c000df4a:	09 f2                	or     edx,esi
c000df4c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df53:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df57:	c1 e6 10             	shl    esi,0x10
c000df5a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df61:	c1 e2 08             	shl    edx,0x8
c000df64:	09 f2                	or     edx,esi
c000df66:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df6d:	09 f2                	or     edx,esi
c000df6f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df76:	c1 e6 18             	shl    esi,0x18
c000df79:	09 f2                	or     edx,esi
c000df7b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df7f:	41                   	inc    ecx
c000df80:	83 f9 04             	cmp    ecx,0x4
c000df83:	0f 85 7a ff ff ff    	jne    c000df03 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8d:	83 f0 01             	xor    eax,0x1
c000df90:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df94:	75 4f                	jne    c000dfe5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df9a:	83 f0 01             	xor    eax,0x1
c000df9d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000dfa1:	75 42                	jne    c000dfe5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000dfa3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dfab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dfb3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dfb9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dfbf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dfc5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dfc9:	89 f7                	mov    edi,esi
c000dfcb:	c1 e0 0a             	shl    eax,0xa
c000dfce:	c1 ff 1f             	sar    edi,0x1f
c000dfd1:	57                   	push   edi
c000dfd2:	56                   	push   esi
c000dfd3:	52                   	push   edx
c000dfd4:	50                   	push   eax
c000dfd5:	e8 f6 12 01 00       	call   c001f2d0 <__udivdi3>
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfe1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfe5:	89 e8                	mov    eax,ebp
c000dfe7:	0f b6 e8             	movzx  ebp,al
c000dfea:	85 ed                	test   ebp,ebp
c000dfec:	74 50                	je     c000e03e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dfee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dff2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dff6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dffa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dffe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e002:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e006:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e00a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e00e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e012:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e016:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e01a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e01e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e022:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e026:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e02a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e02e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e032:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e036:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e03a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e03e:	31 ed                	xor    ebp,ebp
c000e040:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e044:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e048:	89 f8                	mov    eax,edi
c000e04a:	09 f0                	or     eax,esi
c000e04c:	74 1e                	je     c000e06c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e04e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e052:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e056:	89 d1                	mov    ecx,edx
c000e058:	09 c1                	or     ecx,eax
c000e05a:	74 10                	je     c000e06c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e05c:	83 ec 0c             	sub    esp,0xc
c000e05f:	57                   	push   edi
c000e060:	56                   	push   esi
c000e061:	52                   	push   edx
c000e062:	50                   	push   eax
c000e063:	53                   	push   ebx
c000e064:	e8 d9 fc ff ff       	call   c000dd42 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e069:	83 c4 20             	add    esp,0x20
c000e06c:	45                   	inc    ebp
c000e06d:	83 fd 04             	cmp    ebp,0x4
c000e070:	75 ce                	jne    c000e040 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e072:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e078:	5b                   	pop    ebx
c000e079:	5e                   	pop    esi
c000e07a:	5f                   	pop    edi
c000e07b:	5d                   	pop    ebp
c000e07c:	c3                   	ret    
c000e07d:	66 90                	xchg   ax,ax
c000e07f:	90                   	nop

c000e080 <Serial::Serial(char const*)>:
c000e080:	83 ec 0c             	sub    esp,0xc
c000e083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e087:	83 ec 08             	sub    esp,0x8
c000e08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e08e:	50                   	push   eax
c000e08f:	e8 76 e8 ff ff       	call   c000c90a <Device::Device(char const*)>
c000e094:	83 c4 10             	add    esp,0x10
c000e097:	ba ec 18 02 c0       	mov    edx,0xc00218ec
c000e09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a0:	89 10                	mov    DWORD PTR [eax],edx
c000e0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e0b0:	90                   	nop
c000e0b1:	83 c4 0c             	add    esp,0xc
c000e0b4:	c3                   	ret    
c000e0b5:	90                   	nop
c000e0b6:	66 90                	xchg   ax,ax

c000e0b8 <Serial::~Serial()>:
c000e0b8:	83 ec 0c             	sub    esp,0xc
c000e0bb:	ba ec 18 02 c0       	mov    edx,0xc00218ec
c000e0c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c4:	89 10                	mov    DWORD PTR [eax],edx
c000e0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ca:	83 ec 0c             	sub    esp,0xc
c000e0cd:	50                   	push   eax
c000e0ce:	e8 a1 e5 ff ff       	call   c000c674 <Device::~Device()>
c000e0d3:	83 c4 10             	add    esp,0x10
c000e0d6:	90                   	nop
c000e0d7:	83 c4 0c             	add    esp,0xc
c000e0da:	c3                   	ret    
c000e0db:	90                   	nop

c000e0dc <Serial::~Serial()>:
c000e0dc:	83 ec 0c             	sub    esp,0xc
c000e0df:	83 ec 0c             	sub    esp,0xc
c000e0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0e6:	e8 cd ff ff ff       	call   c000e0b8 <Serial::~Serial()>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	83 ec 08             	sub    esp,0x8
c000e0f1:	68 58 01 00 00       	push   0x158
c000e0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0fa:	e8 19 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e0ff:	83 c4 10             	add    esp,0x10
c000e102:	83 c4 0c             	add    esp,0xc
c000e105:	c3                   	ret    
c000e106:	66 90                	xchg   ax,ax

c000e108 <Timer::Timer(char const*)>:
c000e108:	83 ec 0c             	sub    esp,0xc
c000e10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e10f:	83 ec 08             	sub    esp,0x8
c000e112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e116:	50                   	push   eax
c000e117:	e8 ee e7 ff ff       	call   c000c90a <Device::Device(char const*)>
c000e11c:	83 c4 10             	add    esp,0x10
c000e11f:	ba 30 19 02 c0       	mov    edx,0xc0021930
c000e124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e128:	89 10                	mov    DWORD PTR [eax],edx
c000e12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e12e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e138:	90                   	nop
c000e139:	83 c4 0c             	add    esp,0xc
c000e13c:	c3                   	ret    
c000e13d:	90                   	nop
c000e13e:	66 90                	xchg   ax,ax

c000e140 <Timer::~Timer()>:
c000e140:	83 ec 0c             	sub    esp,0xc
c000e143:	ba 30 19 02 c0       	mov    edx,0xc0021930
c000e148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14c:	89 10                	mov    DWORD PTR [eax],edx
c000e14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e152:	83 ec 0c             	sub    esp,0xc
c000e155:	50                   	push   eax
c000e156:	e8 19 e5 ff ff       	call   c000c674 <Device::~Device()>
c000e15b:	83 c4 10             	add    esp,0x10
c000e15e:	90                   	nop
c000e15f:	83 c4 0c             	add    esp,0xc
c000e162:	c3                   	ret    
c000e163:	90                   	nop

c000e164 <Timer::~Timer()>:
c000e164:	83 ec 0c             	sub    esp,0xc
c000e167:	83 ec 0c             	sub    esp,0xc
c000e16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e16e:	e8 cd ff ff ff       	call   c000e140 <Timer::~Timer()>
c000e173:	83 c4 10             	add    esp,0x10
c000e176:	83 ec 08             	sub    esp,0x8
c000e179:	68 5c 01 00 00       	push   0x15c
c000e17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e182:	e8 91 c6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e187:	83 c4 10             	add    esp,0x10
c000e18a:	83 c4 0c             	add    esp,0xc
c000e18d:	c3                   	ret    

c000e18e <Timer::read()>:
c000e18e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e192:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e198:	c3                   	ret    

c000e199 <setupTimer(int)>:
c000e199:	53                   	push   ebx
c000e19a:	83 ec 14             	sub    esp,0x14
c000e19d:	68 5c 01 00 00       	push   0x15c
c000e1a2:	e8 0f 99 ff ff       	call   c0007ab6 <malloc>
c000e1a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1aa:	89 c3                	mov    ebx,eax
c000e1ac:	e8 8b 09 01 00       	call   c001eb3c <PIT::PIT()>
c000e1b1:	58                   	pop    eax
c000e1b2:	5a                   	pop    edx
c000e1b3:	53                   	push   ebx
c000e1b4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e1ba:	e8 b3 e5 ff ff       	call   c000c772 <Device::addChild(Device*)>
c000e1bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1c1:	6a 00                	push   0x0
c000e1c3:	6a 00                	push   0x0
c000e1c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1c9:	53                   	push   ebx
c000e1ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e1cd:	89 d8                	mov    eax,ebx
c000e1cf:	83 c4 28             	add    esp,0x28
c000e1d2:	5b                   	pop    ebx
c000e1d3:	c3                   	ret    

c000e1d4 <timerHandler(unsigned int)>:
c000e1d4:	56                   	push   esi
c000e1d5:	53                   	push   ebx
c000e1d6:	51                   	push   ecx
c000e1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1db:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e1e1:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e1e8:	0f 84 4a 01 00 00    	je     c000e338 <timerHandler(unsigned int)+0x164>
c000e1ee:	fa                   	cli    
c000e1ef:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1f5:	83 ec 0c             	sub    esp,0xc
c000e1f8:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1fe:	68 d8 96 02 c0       	push   0xc00296d8
c000e203:	e8 98 16 01 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e208:	83 c4 10             	add    esp,0x10
c000e20b:	84 c0                	test   al,al
c000e20d:	0f 85 a1 00 00 00    	jne    c000e2b4 <timerHandler(unsigned int)+0xe0>
c000e213:	83 ec 0c             	sub    esp,0xc
c000e216:	68 d8 96 02 c0       	push   0xc00296d8
c000e21b:	e8 9c 16 01 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 c6                	mov    esi,eax
c000e225:	8d 76 00             	lea    esi,[esi+0x0]
c000e228:	83 ec 0c             	sub    esp,0xc
c000e22b:	68 d8 96 02 c0       	push   0xc00296d8
c000e230:	e8 87 16 01 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e235:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e23c:	89 c3                	mov    ebx,eax
c000e23e:	e8 81 16 01 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e243:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e246:	83 c4 10             	add    esp,0x10
c000e249:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e24f:	77 23                	ja     c000e274 <timerHandler(unsigned int)+0xa0>
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	53                   	push   ebx
c000e255:	e8 1e 7f 00 00       	call   c0016178 <unblockTask(ThreadControlBlock*)>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	39 de                	cmp    esi,ebx
c000e25f:	75 27                	jne    c000e288 <timerHandler(unsigned int)+0xb4>
c000e261:	83 ec 0c             	sub    esp,0xc
c000e264:	68 d8 96 02 c0       	push   0xc00296d8
c000e269:	e8 4e 16 01 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e26e:	89 c6                	mov    esi,eax
c000e270:	eb 12                	jmp    c000e284 <timerHandler(unsigned int)+0xb0>
c000e272:	66 90                	xchg   ax,ax
c000e274:	52                   	push   edx
c000e275:	52                   	push   edx
c000e276:	53                   	push   ebx
c000e277:	68 d8 96 02 c0       	push   0xc00296d8
c000e27c:	e8 ff 16 01 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e281:	8d 76 00             	lea    esi,[esi+0x0]
c000e284:	83 c4 10             	add    esp,0x10
c000e287:	90                   	nop
c000e288:	83 ec 0c             	sub    esp,0xc
c000e28b:	68 d8 96 02 c0       	push   0xc00296d8
c000e290:	e8 0b 16 01 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e295:	83 c4 10             	add    esp,0x10
c000e298:	84 c0                	test   al,al
c000e29a:	75 18                	jne    c000e2b4 <timerHandler(unsigned int)+0xe0>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	68 d8 96 02 c0       	push   0xc00296d8
c000e2a4:	e8 13 16 01 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	39 f0                	cmp    eax,esi
c000e2ae:	0f 85 74 ff ff ff    	jne    c000e228 <timerHandler(unsigned int)+0x54>
c000e2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e2b9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e2bd:	74 41                	je     c000e300 <timerHandler(unsigned int)+0x12c>
c000e2bf:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e2c6:	74 38                	je     c000e300 <timerHandler(unsigned int)+0x12c>
c000e2c8:	fa                   	cli    
c000e2c9:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e2cf:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e2d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2da:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e2dd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2e3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e2e6:	72 08                	jb     c000e2f0 <timerHandler(unsigned int)+0x11c>
c000e2e8:	e8 73 79 00 00       	call   c0015c60 <schedule()>
c000e2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e2f0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2f5:	48                   	dec    eax
c000e2f6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2fb:	75 03                	jne    c000e300 <timerHandler(unsigned int)+0x12c>
c000e2fd:	fb                   	sti    
c000e2fe:	66 90                	xchg   ax,ax
c000e300:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e305:	48                   	dec    eax
c000e306:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e30b:	75 1b                	jne    c000e328 <timerHandler(unsigned int)+0x154>
c000e30d:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e314:	74 12                	je     c000e328 <timerHandler(unsigned int)+0x154>
c000e316:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e320:	e8 3b 79 00 00       	call   c0015c60 <schedule()>
c000e325:	8d 76 00             	lea    esi,[esi+0x0]
c000e328:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e32d:	48                   	dec    eax
c000e32e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e333:	75 03                	jne    c000e338 <timerHandler(unsigned int)+0x164>
c000e335:	fb                   	sti    
c000e336:	66 90                	xchg   ax,ax
c000e338:	58                   	pop    eax
c000e339:	5b                   	pop    ebx
c000e33a:	5e                   	pop    esi
c000e33b:	c3                   	ret    

c000e33c <VCache::VCache(PhysicalDisk*)>:
c000e33c:	53                   	push   ebx
c000e33d:	83 ec 18             	sub    esp,0x18
c000e340:	ba 60 19 02 c0       	mov    edx,0xc0021960
c000e345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e349:	89 10                	mov    DWORD PTR [eax],edx
c000e34b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e35a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e365:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e36c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e377:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e37e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e389:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e394:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e39c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e3a3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e3aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e3ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3be:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e3c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3cd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e3d5:	83 ec 0c             	sub    esp,0xc
c000e3d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3dc:	e8 d5 96 ff ff       	call   c0007ab6 <malloc>
c000e3e1:	83 c4 10             	add    esp,0x10
c000e3e4:	89 c3                	mov    ebx,eax
c000e3e6:	83 ec 0c             	sub    esp,0xc
c000e3e9:	53                   	push   ebx
c000e3ea:	e8 0d 76 00 00       	call   c00159fc <Mutex::Mutex()>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3fd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e401:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e408:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e40f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e413:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e41d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e420:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e424:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e42a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e430:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e434:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e437:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e43e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e442:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e446:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e44c:	05 00 02 00 00       	add    eax,0x200
c000e451:	c1 e0 03             	shl    eax,0x3
c000e454:	83 ec 0c             	sub    esp,0xc
c000e457:	50                   	push   eax
c000e458:	e8 59 96 ff ff       	call   c0007ab6 <malloc>
c000e45d:	83 c4 10             	add    esp,0x10
c000e460:	89 c2                	mov    edx,eax
c000e462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e466:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e46d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e478:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e47c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e480:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e486:	89 d0                	mov    eax,edx
c000e488:	c1 e0 02             	shl    eax,0x2
c000e48b:	01 d0                	add    eax,edx
c000e48d:	c1 e0 04             	shl    eax,0x4
c000e490:	83 ec 0c             	sub    esp,0xc
c000e493:	50                   	push   eax
c000e494:	e8 1d 96 ff ff       	call   c0007ab6 <malloc>
c000e499:	83 c4 10             	add    esp,0x10
c000e49c:	89 c2                	mov    edx,eax
c000e49e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4a2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e4a5:	90                   	nop
c000e4a6:	83 c4 18             	add    esp,0x18
c000e4a9:	5b                   	pop    ebx
c000e4aa:	c3                   	ret    
c000e4ab:	90                   	nop

c000e4ac <VCache::invalidateReadBuffer()>:
c000e4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e4b6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e4ba:	c3                   	ret    
c000e4bb:	90                   	nop

c000e4bc <VCache::writeWriteBuffer()>:
c000e4bc:	53                   	push   ebx
c000e4bd:	83 ec 08             	sub    esp,0x8
c000e4c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4c4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e4c8:	74 1e                	je     c000e4e8 <VCache::writeWriteBuffer()+0x2c>
c000e4ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4cd:	83 ec 0c             	sub    esp,0xc
c000e4d0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4d2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e4d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e4d8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e4db:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e4de:	50                   	push   eax
c000e4df:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e4e2:	83 c4 20             	add    esp,0x20
c000e4e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4ef:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4f6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4fa:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e501:	83 c4 08             	add    esp,0x8
c000e504:	5b                   	pop    ebx
c000e505:	c3                   	ret    
c000e506:	66 90                	xchg   ax,ax

c000e508 <VCache::~VCache()>:
c000e508:	83 ec 0c             	sub    esp,0xc
c000e50b:	ba 60 19 02 c0       	mov    edx,0xc0021960
c000e510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e514:	89 10                	mov    DWORD PTR [eax],edx
c000e516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e51a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e51d:	0f b6 c0             	movzx  eax,al
c000e520:	85 c0                	test   eax,eax
c000e522:	74 10                	je     c000e534 <VCache::~VCache()+0x2c>
c000e524:	83 ec 0c             	sub    esp,0xc
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 8c ff ff ff       	call   c000e4bc <VCache::writeWriteBuffer()>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	90                   	nop
c000e534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e538:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e53b:	83 ec 0c             	sub    esp,0xc
c000e53e:	50                   	push   eax
c000e53f:	e8 82 95 ff ff       	call   c0007ac6 <free>
c000e544:	83 c4 10             	add    esp,0x10
c000e547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e54e:	83 ec 0c             	sub    esp,0xc
c000e551:	50                   	push   eax
c000e552:	e8 6f 95 ff ff       	call   c0007ac6 <free>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	90                   	nop
c000e55b:	83 c4 0c             	add    esp,0xc
c000e55e:	c3                   	ret    
c000e55f:	90                   	nop

c000e560 <VCache::~VCache()>:
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	83 ec 0c             	sub    esp,0xc
c000e566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e56a:	e8 99 ff ff ff       	call   c000e508 <VCache::~VCache()>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	83 ec 08             	sub    esp,0x8
c000e575:	6a 44                	push   0x44
c000e577:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e57b:	e8 98 c2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e580:	83 c4 10             	add    esp,0x10
c000e583:	83 c4 0c             	add    esp,0xc
c000e586:	c3                   	ret    
c000e587:	90                   	nop

c000e588 <VCache::write(unsigned long long, int, void*)>:
c000e588:	55                   	push   ebp
c000e589:	57                   	push   edi
c000e58a:	56                   	push   esi
c000e58b:	53                   	push   ebx
c000e58c:	83 ec 1c             	sub    esp,0x1c
c000e58f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e593:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e597:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e59b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e59f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e5a3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e5a7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e5ab:	74 07                	je     c000e5b4 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e5ad:	53                   	push   ebx
c000e5ae:	e8 f9 fe ff ff       	call   c000e4ac <VCache::invalidateReadBuffer()>
c000e5b3:	58                   	pop    eax
c000e5b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e5b8:	74 62                	je     c000e61c <VCache::write(unsigned long long, int, void*)+0x94>
c000e5ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e5c1:	99                   	cdq    
c000e5c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5c6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e5c9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e5cc:	31 c1                	xor    ecx,eax
c000e5ce:	89 d0                	mov    eax,edx
c000e5d0:	89 ca                	mov    edx,ecx
c000e5d2:	31 e8                	xor    eax,ebp
c000e5d4:	09 c2                	or     edx,eax
c000e5d6:	75 38                	jne    c000e610 <VCache::write(unsigned long long, int, void*)+0x88>
c000e5d8:	83 ff 01             	cmp    edi,0x1
c000e5db:	75 33                	jne    c000e610 <VCache::write(unsigned long long, int, void*)+0x88>
c000e5dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e5ea:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5ed:	0f af c8             	imul   ecx,eax
c000e5f0:	01 cf                	add    edi,ecx
c000e5f2:	89 c1                	mov    ecx,eax
c000e5f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5f9:	40                   	inc    eax
c000e5fa:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5fd:	83 f8 50             	cmp    eax,0x50
c000e600:	75 6a                	jne    c000e66c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e602:	83 ec 0c             	sub    esp,0xc
c000e605:	53                   	push   ebx
c000e606:	e8 b1 fe ff ff       	call   c000e4bc <VCache::writeWriteBuffer()>
c000e60b:	83 c4 10             	add    esp,0x10
c000e60e:	eb 5c                	jmp    c000e66c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e610:	83 ec 0c             	sub    esp,0xc
c000e613:	53                   	push   ebx
c000e614:	e8 a3 fe ff ff       	call   c000e4bc <VCache::writeWriteBuffer()>
c000e619:	83 c4 10             	add    esp,0x10
c000e61c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e61f:	83 ff 4f             	cmp    edi,0x4f
c000e622:	7f 20                	jg     c000e644 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e624:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e627:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e62b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e62e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e631:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e635:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e638:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e63e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e640:	eb 2a                	jmp    c000e66c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e642:	66 90                	xchg   ax,ax
c000e644:	8b 10                	mov    edx,DWORD PTR [eax]
c000e646:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e64a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e64e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e652:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e656:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e65a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e65e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e661:	83 c4 1c             	add    esp,0x1c
c000e664:	5b                   	pop    ebx
c000e665:	5e                   	pop    esi
c000e666:	5f                   	pop    edi
c000e667:	5d                   	pop    ebp
c000e668:	ff e0                	jmp    eax
c000e66a:	66 90                	xchg   ax,ax
c000e66c:	83 c4 1c             	add    esp,0x1c
c000e66f:	31 c0                	xor    eax,eax
c000e671:	5b                   	pop    ebx
c000e672:	5e                   	pop    esi
c000e673:	5f                   	pop    edi
c000e674:	5d                   	pop    ebp
c000e675:	c3                   	ret    

c000e676 <VCache::read(unsigned long long, int, void*)>:
c000e676:	55                   	push   ebp
c000e677:	57                   	push   edi
c000e678:	56                   	push   esi
c000e679:	53                   	push   ebx
c000e67a:	83 ec 1c             	sub    esp,0x1c
c000e67d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e681:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e685:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e689:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e68d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e691:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e695:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e699:	74 0d                	je     c000e6a8 <VCache::read(unsigned long long, int, void*)+0x32>
c000e69b:	83 ec 0c             	sub    esp,0xc
c000e69e:	57                   	push   edi
c000e69f:	e8 18 fe ff ff       	call   c000e4bc <VCache::writeWriteBuffer()>
c000e6a4:	83 c4 10             	add    esp,0x10
c000e6a7:	90                   	nop
c000e6a8:	83 fd 01             	cmp    ebp,0x1
c000e6ab:	0f 85 93 00 00 00    	jne    c000e744 <VCache::read(unsigned long long, int, void*)+0xce>
c000e6b1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6b7:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e6be:	0f 85 80 00 00 00    	jne    c000e744 <VCache::read(unsigned long long, int, void*)+0xce>
c000e6c4:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e6c7:	89 e9                	mov    ecx,ebp
c000e6c9:	f7 d9                	neg    ecx
c000e6cb:	89 c8                	mov    eax,ecx
c000e6cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e6d1:	c1 f8 1f             	sar    eax,0x1f
c000e6d4:	21 d9                	and    ecx,ebx
c000e6d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6da:	89 c8                	mov    eax,ecx
c000e6dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6e0:	21 f1                	and    ecx,esi
c000e6e2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e6e6:	89 ca                	mov    edx,ecx
c000e6e8:	74 2e                	je     c000e718 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6ea:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e6ed:	75 29                	jne    c000e718 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6ef:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e6f2:	75 24                	jne    c000e718 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6f4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6f7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6fd:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e700:	8d 70 ff             	lea    esi,[eax-0x1]
c000e703:	21 f3                	and    ebx,esi
c000e705:	0f af d9             	imul   ebx,ecx
c000e708:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e70b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e70f:	89 de                	mov    esi,ebx
c000e711:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e713:	31 c0                	xor    eax,eax
c000e715:	eb 61                	jmp    c000e778 <VCache::read(unsigned long long, int, void*)+0x102>
c000e717:	90                   	nop
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e71f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e723:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e726:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e729:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e72b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e72e:	55                   	push   ebp
c000e72f:	52                   	push   edx
c000e730:	50                   	push   eax
c000e731:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e735:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e738:	83 c4 20             	add    esp,0x20
c000e73b:	85 c0                	test   eax,eax
c000e73d:	75 39                	jne    c000e778 <VCache::read(unsigned long long, int, void*)+0x102>
c000e73f:	eb b3                	jmp    c000e6f4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e741:	8d 76 00             	lea    esi,[esi+0x0]
c000e744:	83 ec 0c             	sub    esp,0xc
c000e747:	57                   	push   edi
c000e748:	e8 5f fd ff ff       	call   c000e4ac <VCache::invalidateReadBuffer()>
c000e74d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e750:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e754:	8b 10                	mov    edx,DWORD PTR [eax]
c000e756:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e75a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e75e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e762:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e766:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e76a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e76d:	83 c4 2c             	add    esp,0x2c
c000e770:	5b                   	pop    ebx
c000e771:	5e                   	pop    esi
c000e772:	5f                   	pop    edi
c000e773:	5d                   	pop    ebp
c000e774:	ff e0                	jmp    eax
c000e776:	66 90                	xchg   ax,ax
c000e778:	83 c4 1c             	add    esp,0x1c
c000e77b:	5b                   	pop    ebx
c000e77c:	5e                   	pop    esi
c000e77d:	5f                   	pop    edi
c000e77e:	5d                   	pop    ebp
c000e77f:	c3                   	ret    

c000e780 <Video::putrect(int, int, int, int, unsigned int)>:
c000e780:	55                   	push   ebp
c000e781:	57                   	push   edi
c000e782:	56                   	push   esi
c000e783:	53                   	push   ebx
c000e784:	83 ec 1c             	sub    esp,0x1c
c000e787:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e78b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e78f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e793:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e797:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e79b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e79f:	01 df                	add    edi,ebx
c000e7a1:	39 fb                	cmp    ebx,edi
c000e7a3:	7d 1f                	jge    c000e7c4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e7a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e7a9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e7ad:	7d 12                	jge    c000e7c1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e7af:	8b 16                	mov    edx,DWORD PTR [esi]
c000e7b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e7b5:	53                   	push   ebx
c000e7b6:	55                   	push   ebp
c000e7b7:	45                   	inc    ebp
c000e7b8:	56                   	push   esi
c000e7b9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e7bc:	83 c4 10             	add    esp,0x10
c000e7bf:	eb e8                	jmp    c000e7a9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e7c1:	43                   	inc    ebx
c000e7c2:	eb dd                	jmp    c000e7a1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e7c4:	83 c4 1c             	add    esp,0x1c
c000e7c7:	5b                   	pop    ebx
c000e7c8:	5e                   	pop    esi
c000e7c9:	5f                   	pop    edi
c000e7ca:	5d                   	pop    ebp
c000e7cb:	c3                   	ret    

c000e7cc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e7cc:	55                   	push   ebp
c000e7cd:	57                   	push   edi
c000e7ce:	31 ff                	xor    edi,edi
c000e7d0:	56                   	push   esi
c000e7d1:	53                   	push   ebx
c000e7d2:	83 ec 1c             	sub    esp,0x1c
c000e7d5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7dd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e7e4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e7e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7ed:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e7f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e7f5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7f8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7fc:	01 f9                	add    ecx,edi
c000e7fe:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e802:	7d 2f                	jge    c000e833 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e804:	31 f6                	xor    esi,esi
c000e806:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e80a:	01 f2                	add    edx,esi
c000e80c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e810:	7d 1a                	jge    c000e82c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e812:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e815:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e818:	46                   	inc    esi
c000e819:	51                   	push   ecx
c000e81a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e81e:	52                   	push   edx
c000e81f:	55                   	push   ebp
c000e820:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e823:	83 c4 10             	add    esp,0x10
c000e826:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e82a:	eb da                	jmp    c000e806 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e82c:	47                   	inc    edi
c000e82d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e831:	eb c5                	jmp    c000e7f8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e833:	83 c4 1c             	add    esp,0x1c
c000e836:	5b                   	pop    ebx
c000e837:	5e                   	pop    esi
c000e838:	5f                   	pop    edi
c000e839:	5d                   	pop    ebp
c000e83a:	c3                   	ret    
c000e83b:	90                   	nop

c000e83c <Video::blit(unsigned int*, int, int, int, int)>:
c000e83c:	55                   	push   ebp
c000e83d:	57                   	push   edi
c000e83e:	56                   	push   esi
c000e83f:	53                   	push   ebx
c000e840:	83 ec 1c             	sub    esp,0x1c
c000e843:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e847:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e84b:	85 c0                	test   eax,eax
c000e84d:	79 02                	jns    c000e851 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e84f:	31 c0                	xor    eax,eax
c000e851:	c1 e0 02             	shl    eax,0x2
c000e854:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e85c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e860:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e864:	39 d8                	cmp    eax,ebx
c000e866:	7e 49                	jle    c000e8b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e868:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e86e:	7c 41                	jl     c000e8b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e870:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e874:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e878:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e87c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e880:	39 f9                	cmp    ecx,edi
c000e882:	7e 22                	jle    c000e8a6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e884:	83 c5 04             	add    ebp,0x4
c000e887:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e88d:	7c 14                	jl     c000e8a3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e88f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e891:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e894:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e898:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e89c:	56                   	push   esi
c000e89d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e8a0:	83 c4 10             	add    esp,0x10
c000e8a3:	47                   	inc    edi
c000e8a4:	eb d2                	jmp    c000e878 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e8a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8aa:	43                   	inc    ebx
c000e8ab:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e8af:	eb ab                	jmp    c000e85c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e8b1:	83 c4 1c             	add    esp,0x1c
c000e8b4:	5b                   	pop    ebx
c000e8b5:	5e                   	pop    esi
c000e8b6:	5f                   	pop    edi
c000e8b7:	5d                   	pop    ebp
c000e8b8:	c3                   	ret    
c000e8b9:	90                   	nop

c000e8ba <Video::clearScreen(unsigned int)>:
c000e8ba:	57                   	push   edi
c000e8bb:	56                   	push   esi
c000e8bc:	53                   	push   ebx
c000e8bd:	31 db                	xor    ebx,ebx
c000e8bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e8c3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8c9:	7e 1f                	jle    c000e8ea <Video::clearScreen(unsigned int)+0x30>
c000e8cb:	31 ff                	xor    edi,edi
c000e8cd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8d3:	7e 12                	jle    c000e8e7 <Video::clearScreen(unsigned int)+0x2d>
c000e8d5:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8db:	53                   	push   ebx
c000e8dc:	57                   	push   edi
c000e8dd:	47                   	inc    edi
c000e8de:	56                   	push   esi
c000e8df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8e2:	83 c4 10             	add    esp,0x10
c000e8e5:	eb e6                	jmp    c000e8cd <Video::clearScreen(unsigned int)+0x13>
c000e8e7:	43                   	inc    ebx
c000e8e8:	eb d9                	jmp    c000e8c3 <Video::clearScreen(unsigned int)+0x9>
c000e8ea:	5b                   	pop    ebx
c000e8eb:	5e                   	pop    esi
c000e8ec:	5f                   	pop    edi
c000e8ed:	c3                   	ret    

c000e8ee <Video::putpixel(int, int, unsigned int)>:
c000e8ee:	c7 44 24 04 68 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021968
c000e8f6:	e9 a6 2a 00 00       	jmp    c00113a1 <KePanic(char const*)>
c000e8fb:	90                   	nop

c000e8fc <Video::readPixelApprox(int, int)>:
c000e8fc:	83 ec 18             	sub    esp,0x18
c000e8ff:	68 89 19 02 c0       	push   0xc0021989
c000e904:	e8 98 2a 00 00       	call   c00113a1 <KePanic(char const*)>
c000e909:	31 c0                	xor    eax,eax
c000e90b:	83 c4 1c             	add    esp,0x1c
c000e90e:	c3                   	ret    
c000e90f:	90                   	nop

c000e910 <Video::Video(char const*)>:
c000e910:	83 ec 0c             	sub    esp,0xc
c000e913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e917:	83 ec 08             	sub    esp,0x8
c000e91a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e91e:	50                   	push   eax
c000e91f:	e8 e6 df ff ff       	call   c000c90a <Device::Device(char const*)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	ba 04 1a 02 c0       	mov    edx,0xc0021a04
c000e92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e930:	89 10                	mov    DWORD PTR [eax],edx
c000e932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e936:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e940:	90                   	nop
c000e941:	83 c4 0c             	add    esp,0xc
c000e944:	c3                   	ret    
c000e945:	90                   	nop

c000e946 <Video::~Video()>:
c000e946:	83 ec 0c             	sub    esp,0xc
c000e949:	ba 04 1a 02 c0       	mov    edx,0xc0021a04
c000e94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e952:	89 10                	mov    DWORD PTR [eax],edx
c000e954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e958:	83 ec 0c             	sub    esp,0xc
c000e95b:	50                   	push   eax
c000e95c:	e8 13 dd ff ff       	call   c000c674 <Device::~Device()>
c000e961:	83 c4 10             	add    esp,0x10
c000e964:	90                   	nop
c000e965:	83 c4 0c             	add    esp,0xc
c000e968:	c3                   	ret    
c000e969:	90                   	nop

c000e96a <Video::~Video()>:
c000e96a:	83 ec 0c             	sub    esp,0xc
c000e96d:	83 ec 0c             	sub    esp,0xc
c000e970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e974:	e8 cd ff ff ff       	call   c000e946 <Video::~Video()>
c000e979:	83 c4 10             	add    esp,0x10
c000e97c:	83 ec 08             	sub    esp,0x8
c000e97f:	68 64 01 00 00       	push   0x164
c000e984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e988:	e8 8b be ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	83 c4 0c             	add    esp,0xc
c000e993:	c3                   	ret    

c000e994 <Video::isMonochrome()>:
c000e994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e998:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e99e:	c3                   	ret    
c000e99f:	90                   	nop

c000e9a0 <Video::getWidth()>:
c000e9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9a4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e9aa:	c3                   	ret    
c000e9ab:	90                   	nop

c000e9ac <Video::getHeight()>:
c000e9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9b0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e9b6:	c3                   	ret    
c000e9b7:	90                   	nop

c000e9b8 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e9b8:	55                   	push   ebp
c000e9b9:	57                   	push   edi
c000e9ba:	56                   	push   esi
c000e9bb:	53                   	push   ebx
c000e9bc:	83 ec 2c             	sub    esp,0x2c
c000e9bf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9c3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e9c7:	83 f8 01             	cmp    eax,0x1
c000e9ca:	19 c9                	sbb    ecx,ecx
c000e9cc:	31 db                	xor    ebx,ebx
c000e9ce:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9d2:	89 cd                	mov    ebp,ecx
c000e9d4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9dc:	f7 d5                	not    ebp
c000e9de:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e9e4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e9e8:	01 d8                	add    eax,ebx
c000e9ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ee:	56                   	push   esi
c000e9ef:	e8 b8 ff ff ff       	call   c000e9ac <Video::getHeight()>
c000e9f4:	59                   	pop    ecx
c000e9f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9f9:	7e 70                	jle    c000ea6b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9ff:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ea03:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ea06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea0a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea0e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ea15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea19:	89 f8                	mov    eax,edi
c000ea1b:	83 c0 20             	add    eax,0x20
c000ea1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea22:	56                   	push   esi
c000ea23:	e8 78 ff ff ff       	call   c000e9a0 <Video::getWidth()>
c000ea28:	5a                   	pop    edx
c000ea29:	39 c7                	cmp    edi,eax
c000ea2b:	7d 34                	jge    c000ea61 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea2d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea32:	74 05                	je     c000ea39 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea34:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea36:	55                   	push   ebp
c000ea37:	eb 0d                	jmp    c000ea46 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea39:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea3e:	74 12                	je     c000ea52 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea40:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea4a:	57                   	push   edi
c000ea4b:	56                   	push   esi
c000ea4c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea4f:	83 c4 10             	add    esp,0x10
c000ea52:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea56:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea5a:	47                   	inc    edi
c000ea5b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ea5f:	75 c1                	jne    c000ea22 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea61:	43                   	inc    ebx
c000ea62:	83 fb 20             	cmp    ebx,0x20
c000ea65:	0f 85 79 ff ff ff    	jne    c000e9e4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea6b:	83 c4 2c             	add    esp,0x2c
c000ea6e:	5b                   	pop    ebx
c000ea6f:	5e                   	pop    esi
c000ea70:	5f                   	pop    edi
c000ea71:	5d                   	pop    ebp
c000ea72:	c3                   	ret    
c000ea73:	90                   	nop

c000ea74 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea74:	55                   	push   ebp
c000ea75:	57                   	push   edi
c000ea76:	56                   	push   esi
c000ea77:	53                   	push   ebx
c000ea78:	83 ec 28             	sub    esp,0x28
c000ea7b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea7f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea83:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ea87:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ea8b:	c1 e6 08             	shl    esi,0x8
c000ea8e:	01 c6                	add    esi,eax
c000ea90:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ea94:	c1 e0 08             	shl    eax,0x8
c000ea97:	01 d0                	add    eax,edx
c000ea99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaa1:	0f af c6             	imul   eax,esi
c000eaa4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000eaab:	50                   	push   eax
c000eaac:	e8 05 90 ff ff       	call   c0007ab6 <malloc>
c000eab1:	83 c4 10             	add    esp,0x10
c000eab4:	89 c7                	mov    edi,eax
c000eab6:	85 c0                	test   eax,eax
c000eab8:	75 10                	jne    c000eaca <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000eaba:	83 ec 0c             	sub    esp,0xc
c000eabd:	68 b4 19 02 c0       	push   0xc00219b4
c000eac2:	e8 da 28 00 00       	call   c00113a1 <KePanic(char const*)>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eace:	ba 12 00 00 00       	mov    edx,0x12
c000ead3:	85 c0                	test   eax,eax
c000ead5:	74 11                	je     c000eae8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ead7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eadb:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eadf:	c1 fa 03             	sar    edx,0x3
c000eae2:	0f af d1             	imul   edx,ecx
c000eae5:	83 c2 12             	add    edx,0x12
c000eae8:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eaec:	74 04                	je     c000eaf2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eaee:	85 f6                	test   esi,esi
c000eaf0:	75 12                	jne    c000eb04 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eaf2:	83 ec 0c             	sub    esp,0xc
c000eaf5:	68 c4 19 02 c0       	push   0xc00219c4
c000eafa:	e8 46 be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eaff:	e9 b8 00 00 00       	jmp    c000ebbc <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eb04:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eb08:	83 f9 02             	cmp    ecx,0x2
c000eb0b:	0f 85 96 00 00 00    	jne    c000eba7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eb11:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eb16:	75 0e                	jne    c000eb26 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb18:	85 c0                	test   eax,eax
c000eb1a:	75 0a                	jne    c000eb26 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eb1c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eb1f:	83 e8 18             	sub    eax,0x18
c000eb22:	a8 f7                	test   al,0xf7
c000eb24:	74 0a                	je     c000eb30 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eb26:	83 ec 0c             	sub    esp,0xc
c000eb29:	68 d9 19 02 c0       	push   0xc00219d9
c000eb2e:	eb 7f                	jmp    c000ebaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb30:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb38:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb40:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000eb44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb4c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb50:	75 0c                	jne    c000eb5e <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb52:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eb57:	c1 e0 18             	shl    eax,0x18
c000eb5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb5e:	45                   	inc    ebp
c000eb5f:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb64:	c1 e1 10             	shl    ecx,0x10
c000eb67:	89 c8                	mov    eax,ecx
c000eb69:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb6e:	c1 e1 08             	shl    ecx,0x8
c000eb71:	09 c1                	or     ecx,eax
c000eb73:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb77:	09 c1                	or     ecx,eax
c000eb79:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb7d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000eb81:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb85:	c1 f8 03             	sar    eax,0x3
c000eb88:	01 c2                	add    edx,eax
c000eb8a:	89 e8                	mov    eax,ebp
c000eb8c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb90:	39 c6                	cmp    esi,eax
c000eb92:	7f b0                	jg     c000eb44 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb94:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb9c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb9f:	7e 22                	jle    c000ebc3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eba1:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000eba5:	eb 99                	jmp    c000eb40 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eba7:	50                   	push   eax
c000eba8:	50                   	push   eax
c000eba9:	51                   	push   ecx
c000ebaa:	68 e7 19 02 c0       	push   0xc00219e7
c000ebaf:	e8 91 bd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ebb4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ebb7:	e8 0a 8f ff ff       	call   c0007ac6 <free>
c000ebbc:	83 c4 10             	add    esp,0x10
c000ebbf:	31 ff                	xor    edi,edi
c000ebc1:	eb 0f                	jmp    c000ebd2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ebc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebc7:	89 30                	mov    DWORD PTR [eax],esi
c000ebc9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebcd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ebd0:	89 30                	mov    DWORD PTR [eax],esi
c000ebd2:	83 c4 1c             	add    esp,0x1c
c000ebd5:	89 f8                	mov    eax,edi
c000ebd7:	5b                   	pop    ebx
c000ebd8:	5e                   	pop    esi
c000ebd9:	5f                   	pop    edi
c000ebda:	5d                   	pop    ebp
c000ebdb:	c3                   	ret    

c000ebdc <Video::putTGA(int, int, unsigned char*, int)>:
c000ebdc:	55                   	push   ebp
c000ebdd:	57                   	push   edi
c000ebde:	56                   	push   esi
c000ebdf:	53                   	push   ebx
c000ebe0:	83 ec 28             	sub    esp,0x28
c000ebe3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebeb:	50                   	push   eax
c000ebec:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebf0:	50                   	push   eax
c000ebf1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebf5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebf9:	56                   	push   esi
c000ebfa:	e8 75 fe ff ff       	call   c000ea74 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ebff:	83 c4 20             	add    esp,0x20
c000ec02:	85 c0                	test   eax,eax
c000ec04:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ec08:	74 35                	je     c000ec3f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec0a:	89 c7                	mov    edi,eax
c000ec0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec10:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ec14:	39 d8                	cmp    eax,ebx
c000ec16:	7e 27                	jle    c000ec3f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ec18:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ec1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec20:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ec24:	39 e8                	cmp    eax,ebp
c000ec26:	7e 14                	jle    c000ec3c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec28:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec2a:	83 c7 04             	add    edi,0x4
c000ec2d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ec30:	53                   	push   ebx
c000ec31:	55                   	push   ebp
c000ec32:	45                   	inc    ebp
c000ec33:	56                   	push   esi
c000ec34:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	eb e0                	jmp    c000ec1c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec3c:	43                   	inc    ebx
c000ec3d:	eb cd                	jmp    c000ec0c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec3f:	83 c4 1c             	add    esp,0x1c
c000ec42:	5b                   	pop    ebx
c000ec43:	5e                   	pop    esi
c000ec44:	5f                   	pop    edi
c000ec45:	5d                   	pop    ebp
c000ec46:	c3                   	ret    
c000ec47:	90                   	nop

c000ec48 <ACPI::close(int, int, void*)>:
c000ec48:	83 ec 1c             	sub    esp,0x1c
c000ec4b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec53:	74 0b                	je     c000ec60 <ACPI::close(int, int, void*)+0x18>
c000ec55:	b8 00 00 00 00       	mov    eax,0x0
c000ec5a:	e9 99 00 00 00       	jmp    c000ecf8 <ACPI::close(int, int, void*)+0xb0>
c000ec5f:	90                   	nop
c000ec60:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec65:	75 29                	jne    c000ec90 <ACPI::close(int, int, void*)+0x48>
c000ec67:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec6c:	85 c0                	test   eax,eax
c000ec6e:	74 08                	je     c000ec78 <ACPI::close(int, int, void*)+0x30>
c000ec70:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec75:	ff d0                	call   eax
c000ec77:	90                   	nop
c000ec78:	83 ec 0c             	sub    esp,0xc
c000ec7b:	68 48 1a 02 c0       	push   0xc0021a48
c000ec80:	e8 1c 27 00 00       	call   c00113a1 <KePanic(char const*)>
c000ec85:	83 c4 10             	add    esp,0x10
c000ec88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec8d:	eb 69                	jmp    c000ecf8 <ACPI::close(int, int, void*)+0xb0>
c000ec8f:	90                   	nop
c000ec90:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec95:	75 59                	jne    c000ecf0 <ACPI::close(int, int, void*)+0xa8>
c000ec97:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec9c:	85 c0                	test   eax,eax
c000ec9e:	74 08                	je     c000eca8 <ACPI::close(int, int, void*)+0x60>
c000eca0:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eca5:	ff d0                	call   eax
c000eca7:	90                   	nop
c000eca8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ecad:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ecb5:	83 e0 02             	and    eax,0x2
c000ecb8:	74 1e                	je     c000ecd8 <ACPI::close(int, int, void*)+0x90>
c000ecba:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ecc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecc5:	89 c2                	mov    edx,eax
c000ecc7:	ec                   	in     al,dx
c000ecc8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eccc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ecd0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecd4:	eb da                	jmp    c000ecb0 <ACPI::close(int, int, void*)+0x68>
c000ecd6:	66 90                	xchg   ax,ax
c000ecd8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ecdf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ece4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ece8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecec:	ee                   	out    dx,al
c000eced:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf8:	83 c4 1c             	add    esp,0x1c
c000ecfb:	c3                   	ret    

c000ecfc <findRSDP()>:
c000ecfc:	83 ec 1c             	sub    esp,0x1c
c000ecff:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed04:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed0a:	83 e0 04             	and    eax,0x4
c000ed0d:	0f b6 c0             	movzx  eax,al
c000ed10:	85 c0                	test   eax,eax
c000ed12:	75 08                	jne    c000ed1c <findRSDP()+0x20>
c000ed14:	b8 00 00 00 00       	mov    eax,0x0
c000ed19:	eb 75                	jmp    c000ed90 <findRSDP()+0x94>
c000ed1b:	90                   	nop
c000ed1c:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ed21:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ed26:	7f 1c                	jg     c000ed44 <findRSDP()+0x48>
c000ed28:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed2d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed33:	83 e2 fb             	and    edx,0xfffffffb
c000ed36:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed3c:	b8 00 00 00 00       	mov    eax,0x0
c000ed41:	eb 4d                	jmp    c000ed90 <findRSDP()+0x94>
c000ed43:	90                   	nop
c000ed44:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed4c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed54:	77 32                	ja     c000ed88 <findRSDP()+0x8c>
c000ed56:	83 ec 04             	sub    esp,0x4
c000ed59:	6a 08                	push   0x8
c000ed5b:	68 e3 1a 02 c0       	push   0xc0021ae3
c000ed60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed64:	e8 17 16 ff ff       	call   c0000380 <memcmp>
c000ed69:	83 c4 10             	add    esp,0x10
c000ed6c:	85 c0                	test   eax,eax
c000ed6e:	0f 94 c0             	sete   al
c000ed71:	0f b6 c0             	movzx  eax,al
c000ed74:	85 c0                	test   eax,eax
c000ed76:	74 08                	je     c000ed80 <findRSDP()+0x84>
c000ed78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed7c:	eb 12                	jmp    c000ed90 <findRSDP()+0x94>
c000ed7e:	66 90                	xchg   ax,ax
c000ed80:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed85:	eb c5                	jmp    c000ed4c <findRSDP()+0x50>
c000ed87:	90                   	nop
c000ed88:	b8 00 00 00 00       	mov    eax,0x0
c000ed8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed90:	83 c4 1c             	add    esp,0x1c
c000ed93:	c3                   	ret    

c000ed94 <loadACPITables(unsigned char*)>:
c000ed94:	57                   	push   edi
c000ed95:	56                   	push   esi
c000ed96:	53                   	push   ebx
c000ed97:	83 ec 60             	sub    esp,0x60
c000ed9a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed9f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eda5:	83 e0 04             	and    eax,0x4
c000eda8:	0f b6 c0             	movzx  eax,al
c000edab:	85 c0                	test   eax,eax
c000edad:	0f 84 41 02 00 00    	je     c000eff4 <loadACPITables(unsigned char*)+0x260>
c000edb3:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000edb8:	0f b6 c0             	movzx  eax,al
c000edbb:	85 c0                	test   eax,eax
c000edbd:	74 79                	je     c000ee38 <loadACPITables(unsigned char*)+0xa4>
c000edbf:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edc3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000edc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000edcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edce:	83 e8 24             	sub    eax,0x24
c000edd1:	c1 e8 03             	shr    eax,0x3
c000edd4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edd8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ede0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ede4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ede8:	0f 8d ba 00 00 00    	jge    c000eea8 <loadACPITables(unsigned char*)+0x114>
c000edee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edf2:	83 c0 24             	add    eax,0x24
c000edf5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000edf9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000edfd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee01:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ee05:	c1 e0 03             	shl    eax,0x3
c000ee08:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ee0c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ee13:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee15:	89 c1                	mov    ecx,eax
c000ee17:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee1c:	8d 50 01             	lea    edx,[eax+0x1]
c000ee1f:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee25:	89 ca                	mov    edx,ecx
c000ee27:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee2e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee33:	eb ab                	jmp    c000ede0 <loadACPITables(unsigned char*)+0x4c>
c000ee35:	8d 76 00             	lea    esi,[esi+0x0]
c000ee38:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee3c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee47:	83 e8 24             	sub    eax,0x24
c000ee4a:	c1 e8 02             	shr    eax,0x2
c000ee4d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee51:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee59:	8d 76 00             	lea    esi,[esi+0x0]
c000ee5c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee60:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee64:	7d 42                	jge    c000eea8 <loadACPITables(unsigned char*)+0x114>
c000ee66:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee6a:	83 c0 24             	add    eax,0x24
c000ee6d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee71:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee75:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee79:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee7d:	c1 e0 02             	shl    eax,0x2
c000ee80:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee88:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee8a:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee8f:	8d 50 01             	lea    edx,[eax+0x1]
c000ee92:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee98:	89 ca                	mov    edx,ecx
c000ee9a:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000eea1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000eea6:	eb b4                	jmp    c000ee5c <loadACPITables(unsigned char*)+0xc8>
c000eea8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000eeb0:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eeb5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000eeb9:	0f 8d 39 01 00 00    	jge    c000eff8 <loadACPITables(unsigned char*)+0x264>
c000eebf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eec3:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eeca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eed6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeda:	25 ff 0f 00 00       	and    eax,0xfff
c000eedf:	89 c6                	mov    esi,eax
c000eee1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eee7:	83 ec 0c             	sub    esp,0xc
c000eeea:	6a 01                	push   0x1
c000eeec:	e8 1c a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000eef1:	83 c4 10             	add    esp,0x10
c000eef4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eef8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eefe:	83 ec 0c             	sub    esp,0xc
c000ef01:	6a 01                	push   0x1
c000ef03:	6a 01                	push   0x1
c000ef05:	50                   	push   eax
c000ef06:	52                   	push   edx
c000ef07:	53                   	push   ebx
c000ef08:	e8 0d b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef0d:	83 c4 20             	add    esp,0x20
c000ef10:	09 f0                	or     eax,esi
c000ef12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef16:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef1a:	c1 e0 03             	shl    eax,0x3
c000ef1d:	05 20 89 02 c0       	add    eax,0xc0028920
c000ef22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef2e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef46:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef4a:	89 c6                	mov    esi,eax
c000ef4c:	89 d7                	mov    edi,edx
c000ef4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef50:	89 c8                	mov    eax,ecx
c000ef52:	89 fa                	mov    edx,edi
c000ef54:	89 f3                	mov    ebx,esi
c000ef56:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef5a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef71:	05 00 10 00 00       	add    eax,0x1000
c000ef76:	c1 e8 0c             	shr    eax,0xc
c000ef79:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef89:	25 ff 0f 00 00       	and    eax,0xfff
c000ef8e:	89 c6                	mov    esi,eax
c000ef90:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef96:	83 ec 0c             	sub    esp,0xc
c000ef99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef9d:	e8 6b a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000efa2:	83 c4 10             	add    esp,0x10
c000efa5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000efa9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efaf:	83 ec 0c             	sub    esp,0xc
c000efb2:	6a 01                	push   0x1
c000efb4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efb8:	50                   	push   eax
c000efb9:	52                   	push   edx
c000efba:	53                   	push   ebx
c000efbb:	e8 5a af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efc0:	83 c4 20             	add    esp,0x20
c000efc3:	09 f0                	or     eax,esi
c000efc5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	50                   	push   eax
c000efd1:	e8 55 a9 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000efd6:	83 c4 10             	add    esp,0x10
c000efd9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efdd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000efe1:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000efe8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000efed:	e9 be fe ff ff       	jmp    c000eeb0 <loadACPITables(unsigned char*)+0x11c>
c000eff2:	66 90                	xchg   ax,ax
c000eff4:	90                   	nop
c000eff5:	8d 76 00             	lea    esi,[esi+0x0]
c000eff8:	83 c4 60             	add    esp,0x60
c000effb:	5b                   	pop    ebx
c000effc:	5e                   	pop    esi
c000effd:	5f                   	pop    edi
c000effe:	c3                   	ret    
c000efff:	90                   	nop

c000f000 <findRSDT(unsigned char*)>:
c000f000:	57                   	push   edi
c000f001:	56                   	push   esi
c000f002:	53                   	push   ebx
c000f003:	83 ec 50             	sub    esp,0x50
c000f006:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f00b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f011:	83 e0 04             	and    eax,0x4
c000f014:	0f b6 c0             	movzx  eax,al
c000f017:	85 c0                	test   eax,eax
c000f019:	75 0d                	jne    c000f028 <findRSDT(unsigned char*)+0x28>
c000f01b:	b8 00 00 00 00       	mov    eax,0x0
c000f020:	e9 2b 01 00 00       	jmp    c000f150 <findRSDT(unsigned char*)+0x150>
c000f025:	8d 76 00             	lea    esi,[esi+0x0]
c000f028:	89 e0                	mov    eax,esp
c000f02a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f02e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f032:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f036:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f03e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f042:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f046:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f04a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f04e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f052:	89 c6                	mov    esi,eax
c000f054:	89 d7                	mov    edi,edx
c000f056:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f058:	89 c8                	mov    eax,ecx
c000f05a:	89 fa                	mov    edx,edi
c000f05c:	89 f3                	mov    ebx,esi
c000f05e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f062:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f06a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f06e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f072:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f07a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f07e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f082:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f08a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f08e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f092:	25 ff 0f 00 00       	and    eax,0xfff
c000f097:	89 c6                	mov    esi,eax
c000f099:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f09f:	83 ec 0c             	sub    esp,0xc
c000f0a2:	6a 02                	push   0x2
c000f0a4:	e8 64 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f0a9:	83 c4 10             	add    esp,0x10
c000f0ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f0b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0b6:	83 ec 0c             	sub    esp,0xc
c000f0b9:	6a 01                	push   0x1
c000f0bb:	6a 02                	push   0x2
c000f0bd:	50                   	push   eax
c000f0be:	52                   	push   edx
c000f0bf:	53                   	push   ebx
c000f0c0:	e8 55 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0c5:	83 c4 20             	add    esp,0x20
c000f0c8:	09 f0                	or     eax,esi
c000f0ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0d2:	25 ff 0f 00 00       	and    eax,0xfff
c000f0d7:	89 c6                	mov    esi,eax
c000f0d9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0df:	83 ec 0c             	sub    esp,0xc
c000f0e2:	6a 02                	push   0x2
c000f0e4:	e8 24 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f0e9:	83 c4 10             	add    esp,0x10
c000f0ec:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0f6:	83 ec 0c             	sub    esp,0xc
c000f0f9:	6a 01                	push   0x1
c000f0fb:	6a 02                	push   0x2
c000f0fd:	50                   	push   eax
c000f0fe:	52                   	push   edx
c000f0ff:	53                   	push   ebx
c000f100:	e8 15 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f105:	83 c4 20             	add    esp,0x20
c000f108:	09 f0                	or     eax,esi
c000f10a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f10e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f113:	85 c0                	test   eax,eax
c000f115:	75 11                	jne    c000f128 <findRSDT(unsigned char*)+0x128>
c000f117:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f11e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f122:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f126:	eb 24                	jmp    c000f14c <findRSDT(unsigned char*)+0x14c>
c000f128:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f12d:	83 f8 02             	cmp    eax,0x2
c000f130:	75 12                	jne    c000f144 <findRSDT(unsigned char*)+0x144>
c000f132:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f139:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f13d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f141:	eb 09                	jmp    c000f14c <findRSDT(unsigned char*)+0x14c>
c000f143:	90                   	nop
c000f144:	b8 00 00 00 00       	mov    eax,0x0
c000f149:	eb 05                	jmp    c000f150 <findRSDT(unsigned char*)+0x150>
c000f14b:	90                   	nop
c000f14c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f150:	83 c4 50             	add    esp,0x50
c000f153:	5b                   	pop    ebx
c000f154:	5e                   	pop    esi
c000f155:	5f                   	pop    edi
c000f156:	c3                   	ret    
c000f157:	90                   	nop

c000f158 <findDataTable(unsigned char*, char*)>:
c000f158:	83 ec 1c             	sub    esp,0x1c
c000f15b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f160:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f166:	83 e0 04             	and    eax,0x4
c000f169:	0f b6 c0             	movzx  eax,al
c000f16c:	85 c0                	test   eax,eax
c000f16e:	75 08                	jne    c000f178 <findDataTable(unsigned char*, char*)+0x20>
c000f170:	b8 00 00 00 00       	mov    eax,0x0
c000f175:	eb 5d                	jmp    c000f1d4 <findDataTable(unsigned char*, char*)+0x7c>
c000f177:	90                   	nop
c000f178:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f180:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f185:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f189:	7d 41                	jge    c000f1cc <findDataTable(unsigned char*, char*)+0x74>
c000f18b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f18f:	c1 e0 03             	shl    eax,0x3
c000f192:	05 20 89 02 c0       	add    eax,0xc0028920
c000f197:	83 ec 04             	sub    esp,0x4
c000f19a:	6a 04                	push   0x4
c000f19c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1a0:	50                   	push   eax
c000f1a1:	e8 da 11 ff ff       	call   c0000380 <memcmp>
c000f1a6:	83 c4 10             	add    esp,0x10
c000f1a9:	85 c0                	test   eax,eax
c000f1ab:	0f 94 c0             	sete   al
c000f1ae:	0f b6 c0             	movzx  eax,al
c000f1b1:	85 c0                	test   eax,eax
c000f1b3:	74 0f                	je     c000f1c4 <findDataTable(unsigned char*, char*)+0x6c>
c000f1b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1b9:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f1c0:	eb 12                	jmp    c000f1d4 <findDataTable(unsigned char*, char*)+0x7c>
c000f1c2:	66 90                	xchg   ax,ax
c000f1c4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1c9:	eb b5                	jmp    c000f180 <findDataTable(unsigned char*, char*)+0x28>
c000f1cb:	90                   	nop
c000f1cc:	b8 00 00 00 00       	mov    eax,0x0
c000f1d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f1d4:	83 c4 1c             	add    esp,0x1c
c000f1d7:	c3                   	ret    

c000f1d8 <scanMADT()>:
c000f1d8:	53                   	push   ebx
c000f1d9:	83 ec 38             	sub    esp,0x38
c000f1dc:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f1e1:	25 00 04 00 00       	and    eax,0x400
c000f1e6:	74 14                	je     c000f1fc <scanMADT()+0x24>
c000f1e8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1ed:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1f3:	83 e2 fb             	and    edx,0xfffffffb
c000f1f6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1fc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f201:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f207:	83 e0 04             	and    eax,0x4
c000f20a:	0f b6 c0             	movzx  eax,al
c000f20d:	85 c0                	test   eax,eax
c000f20f:	0f 84 6b 04 00 00    	je     c000f680 <scanMADT()+0x4a8>
c000f215:	e8 e2 fa ff ff       	call   c000ecfc <findRSDP()>
c000f21a:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f21f:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f224:	85 c0                	test   eax,eax
c000f226:	75 1c                	jne    c000f244 <scanMADT()+0x6c>
c000f228:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f22d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f233:	83 e2 fb             	and    edx,0xfffffffb
c000f236:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f23c:	e9 47 04 00 00       	jmp    c000f688 <scanMADT()+0x4b0>
c000f241:	8d 76 00             	lea    esi,[esi+0x0]
c000f244:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f249:	83 ec 0c             	sub    esp,0xc
c000f24c:	50                   	push   eax
c000f24d:	e8 ae fd ff ff       	call   c000f000 <findRSDT(unsigned char*)>
c000f252:	83 c4 10             	add    esp,0x10
c000f255:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f25a:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f25f:	85 c0                	test   eax,eax
c000f261:	75 19                	jne    c000f27c <scanMADT()+0xa4>
c000f263:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f268:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f26e:	83 e2 fb             	and    edx,0xfffffffb
c000f271:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f277:	e9 0c 04 00 00       	jmp    c000f688 <scanMADT()+0x4b0>
c000f27c:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f281:	83 ec 0c             	sub    esp,0xc
c000f284:	50                   	push   eax
c000f285:	e8 0a fb ff ff       	call   c000ed94 <loadACPITables(unsigned char*)>
c000f28a:	83 c4 10             	add    esp,0x10
c000f28d:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f292:	83 ec 08             	sub    esp,0x8
c000f295:	68 ec 1a 02 c0       	push   0xc0021aec
c000f29a:	50                   	push   eax
c000f29b:	e8 b8 fe ff ff       	call   c000f158 <findDataTable(unsigned char*, char*)>
c000f2a0:	83 c4 10             	add    esp,0x10
c000f2a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f2a7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f2ac:	75 1a                	jne    c000f2c8 <scanMADT()+0xf0>
c000f2ae:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f2b3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f2b9:	83 e2 fe             	and    edx,0xfffffffe
c000f2bc:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f2c2:	e9 c1 03 00 00       	jmp    c000f688 <scanMADT()+0x4b0>
c000f2c7:	90                   	nop
c000f2c8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2d7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2db:	0f 87 a7 03 00 00    	ja     c000f688 <scanMADT()+0x4b0>
c000f2e1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f2e9:	0f 87 99 03 00 00    	ja     c000f688 <scanMADT()+0x4b0>
c000f2ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2fb:	8d 50 01             	lea    edx,[eax+0x1]
c000f2fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f302:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f306:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f30a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f30e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f312:	8d 50 01             	lea    edx,[eax+0x1]
c000f315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f319:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f31d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f321:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f325:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f32a:	83 f8 02             	cmp    eax,0x2
c000f32d:	0f 86 51 03 00 00    	jbe    c000f684 <scanMADT()+0x4ac>
c000f333:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f338:	85 c0                	test   eax,eax
c000f33a:	75 58                	jne    c000f394 <scanMADT()+0x1bc>
c000f33c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f340:	8d 50 01             	lea    edx,[eax+0x1]
c000f343:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f347:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f34d:	0f b6 d2             	movzx  edx,dl
c000f350:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f354:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f358:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f35e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f362:	8d 50 01             	lea    edx,[eax+0x1]
c000f365:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f369:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f36f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f372:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f378:	0f b6 d2             	movzx  edx,dl
c000f37b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f37f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f383:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f389:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f38e:	e9 d9 02 00 00       	jmp    c000f66c <scanMADT()+0x494>
c000f393:	90                   	nop
c000f394:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f399:	83 f8 01             	cmp    eax,0x1
c000f39c:	0f 85 1a 01 00 00    	jne    c000f4bc <scanMADT()+0x2e4>
c000f3a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3a6:	8d 50 01             	lea    edx,[eax+0x1]
c000f3a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3ad:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f3b3:	0f b6 d2             	movzx  edx,dl
c000f3b6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f3ba:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f3be:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f3c4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d1:	01 d0                	add    eax,edx
c000f3d3:	83 c0 2c             	add    eax,0x2c
c000f3d6:	8a 00                	mov    al,BYTE PTR [eax]
c000f3d8:	0f b6 d0             	movzx  edx,al
c000f3db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3df:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3e6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3ea:	0f b6 c0             	movzx  eax,al
c000f3ed:	c1 e0 08             	shl    eax,0x8
c000f3f0:	89 d1                	mov    ecx,edx
c000f3f2:	09 c1                	or     ecx,eax
c000f3f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3f8:	8d 50 02             	lea    edx,[eax+0x2]
c000f3fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f403:	0f b6 c0             	movzx  eax,al
c000f406:	c1 e0 10             	shl    eax,0x10
c000f409:	09 c1                	or     ecx,eax
c000f40b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f40f:	8d 50 03             	lea    edx,[eax+0x3]
c000f412:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f416:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f41a:	0f b6 c0             	movzx  eax,al
c000f41d:	c1 e0 18             	shl    eax,0x18
c000f420:	09 c1                	or     ecx,eax
c000f422:	89 ca                	mov    edx,ecx
c000f424:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f429:	0f b6 c0             	movzx  eax,al
c000f42c:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f433:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f438:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f43c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f440:	01 d0                	add    eax,edx
c000f442:	83 c0 2c             	add    eax,0x2c
c000f445:	8a 00                	mov    al,BYTE PTR [eax]
c000f447:	0f b6 d0             	movzx  edx,al
c000f44a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f44e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f451:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f455:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f459:	0f b6 c0             	movzx  eax,al
c000f45c:	c1 e0 08             	shl    eax,0x8
c000f45f:	89 d1                	mov    ecx,edx
c000f461:	09 c1                	or     ecx,eax
c000f463:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f467:	8d 50 02             	lea    edx,[eax+0x2]
c000f46a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f46e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f472:	0f b6 c0             	movzx  eax,al
c000f475:	c1 e0 10             	shl    eax,0x10
c000f478:	09 c1                	or     ecx,eax
c000f47a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f47e:	8d 50 03             	lea    edx,[eax+0x3]
c000f481:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f485:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f489:	0f b6 c0             	movzx  eax,al
c000f48c:	c1 e0 18             	shl    eax,0x18
c000f48f:	09 c1                	or     ecx,eax
c000f491:	89 ca                	mov    edx,ecx
c000f493:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f498:	0f b6 c0             	movzx  eax,al
c000f49b:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f4a2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f4a7:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f4ac:	83 c0 01             	add    eax,0x1
c000f4af:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f4b4:	e9 b3 01 00 00       	jmp    c000f66c <scanMADT()+0x494>
c000f4b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4c1:	83 f8 02             	cmp    eax,0x2
c000f4c4:	0f 85 ea 00 00 00    	jne    c000f5b4 <scanMADT()+0x3dc>
c000f4ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ce:	8d 50 01             	lea    edx,[eax+0x1]
c000f4d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4dd:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f4e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e5:	8d 50 01             	lea    edx,[eax+0x1]
c000f4e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4f0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4f4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f500:	01 d0                	add    eax,edx
c000f502:	83 c0 2c             	add    eax,0x2c
c000f505:	8a 00                	mov    al,BYTE PTR [eax]
c000f507:	0f b6 d0             	movzx  edx,al
c000f50a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f511:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f515:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f519:	0f b6 c0             	movzx  eax,al
c000f51c:	c1 e0 08             	shl    eax,0x8
c000f51f:	89 d1                	mov    ecx,edx
c000f521:	09 c1                	or     ecx,eax
c000f523:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f527:	8d 50 02             	lea    edx,[eax+0x2]
c000f52a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f52e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f532:	0f b6 c0             	movzx  eax,al
c000f535:	c1 e0 10             	shl    eax,0x10
c000f538:	09 c1                	or     ecx,eax
c000f53a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f53e:	8d 50 03             	lea    edx,[eax+0x3]
c000f541:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f545:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f549:	0f b6 c0             	movzx  eax,al
c000f54c:	c1 e0 18             	shl    eax,0x18
c000f54f:	09 c8                	or     eax,ecx
c000f551:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f555:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f55a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f55e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f562:	01 d0                	add    eax,edx
c000f564:	83 c0 2c             	add    eax,0x2c
c000f567:	8a 00                	mov    al,BYTE PTR [eax]
c000f569:	0f b6 c0             	movzx  eax,al
c000f56c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f570:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f573:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f577:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f57b:	0f b6 d2             	movzx  edx,dl
c000f57e:	c1 e2 08             	shl    edx,0x8
c000f581:	09 d0                	or     eax,edx
c000f583:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f588:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f58d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f592:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f596:	88 90 e8 31 02 c0    	mov    BYTE PTR [eax-0x3ffdce18],dl
c000f59c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f5a1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f5a6:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f5ae:	e9 b9 00 00 00       	jmp    c000f66c <scanMADT()+0x494>
c000f5b3:	90                   	nop
c000f5b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5b9:	83 f8 04             	cmp    eax,0x4
c000f5bc:	0f 85 9a 00 00 00    	jne    c000f65c <scanMADT()+0x484>
c000f5c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5d5:	0f b6 c0             	movzx  eax,al
c000f5d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e4:	01 d0                	add    eax,edx
c000f5e6:	83 c0 2c             	add    eax,0x2c
c000f5e9:	8a 00                	mov    al,BYTE PTR [eax]
c000f5eb:	0f b6 d0             	movzx  edx,al
c000f5ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f2:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5f9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5fd:	0f b6 c0             	movzx  eax,al
c000f600:	c1 e0 08             	shl    eax,0x8
c000f603:	09 d0                	or     eax,edx
c000f605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f609:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f60e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f612:	8d 50 01             	lea    edx,[eax+0x1]
c000f615:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f619:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f61d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f621:	0f b6 c0             	movzx  eax,al
c000f624:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f62c:	c1 e0 08             	shl    eax,0x8
c000f62f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f633:	89 c1                	mov    ecx,eax
c000f635:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f639:	c1 e0 18             	shl    eax,0x18
c000f63c:	89 c3                	mov    ebx,eax
c000f63e:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f643:	8d 50 01             	lea    edx,[eax+0x1]
c000f646:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f64c:	09 d9                	or     ecx,ebx
c000f64e:	89 ca                	mov    edx,ecx
c000f650:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f657:	eb 13                	jmp    c000f66c <scanMADT()+0x494>
c000f659:	8d 76 00             	lea    esi,[esi+0x0]
c000f65c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f661:	83 f8 05             	cmp    eax,0x5
c000f664:	75 06                	jne    c000f66c <scanMADT()+0x494>
c000f666:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f66b:	90                   	nop
c000f66c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f671:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f675:	01 d0                	add    eax,edx
c000f677:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f67b:	e9 50 fc ff ff       	jmp    c000f2d0 <scanMADT()+0xf8>
c000f680:	90                   	nop
c000f681:	eb 05                	jmp    c000f688 <scanMADT()+0x4b0>
c000f683:	90                   	nop
c000f684:	90                   	nop
c000f685:	8d 76 00             	lea    esi,[esi+0x0]
c000f688:	83 c4 38             	add    esp,0x38
c000f68b:	5b                   	pop    ebx
c000f68c:	c3                   	ret    
c000f68d:	90                   	nop
c000f68e:	66 90                	xchg   ax,ax

c000f690 <ACPI::ACPI()>:
c000f690:	83 ec 0c             	sub    esp,0xc
c000f693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f697:	83 ec 08             	sub    esp,0x8
c000f69a:	68 f1 1a 02 c0       	push   0xc0021af1
c000f69f:	50                   	push   eax
c000f6a0:	e8 65 d2 ff ff       	call   c000c90a <Device::Device(char const*)>
c000f6a5:	83 c4 10             	add    esp,0x10
c000f6a8:	ba 44 1c 02 c0       	mov    edx,0xc0021c44
c000f6ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b1:	89 10                	mov    DWORD PTR [eax],edx
c000f6b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6c2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6da:	e8 f9 fa ff ff       	call   c000f1d8 <scanMADT()>
c000f6df:	90                   	nop
c000f6e0:	83 c4 0c             	add    esp,0xc
c000f6e3:	c3                   	ret    

c000f6e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f6e4:	83 ec 2c             	sub    esp,0x2c
c000f6e7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f6eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6ef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f6f3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f6f7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6fc:	88 d0                	mov    al,dl
c000f6fe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f702:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f707:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f70f:	90                   	nop
c000f710:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f714:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f71a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f71e:	0f 8d b0 00 00 00    	jge    c000f7d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f724:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f728:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f72c:	83 c2 2a             	add    edx,0x2a
c000f72f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f733:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f738:	0f b7 c0             	movzx  eax,ax
c000f73b:	39 c2                	cmp    edx,eax
c000f73d:	0f 85 85 00 00 00    	jne    c000f7c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f743:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f747:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f74b:	83 c2 2a             	add    edx,0x2a
c000f74e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f752:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f757:	0f b6 c0             	movzx  eax,al
c000f75a:	39 c2                	cmp    edx,eax
c000f75c:	75 6a                	jne    c000f7c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f75e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f763:	85 c0                	test   eax,eax
c000f765:	74 3d                	je     c000f7a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f767:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f76b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f76f:	83 c2 2a             	add    edx,0x2a
c000f772:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f776:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f77a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f77d:	39 c2                	cmp    edx,eax
c000f77f:	74 13                	je     c000f794 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f781:	83 ec 0c             	sub    esp,0xc
c000f784:	68 6c 1a 02 c0       	push   0xc0021a6c
c000f789:	e8 13 1c 00 00       	call   c00113a1 <KePanic(char const*)>
c000f78e:	83 c4 10             	add    esp,0x10
c000f791:	8d 76 00             	lea    esi,[esi+0x0]
c000f794:	83 ec 0c             	sub    esp,0xc
c000f797:	68 f6 1a 02 c0       	push   0xc0021af6
c000f79c:	e8 00 1c 00 00       	call   c00113a1 <KePanic(char const*)>
c000f7a1:	83 c4 10             	add    esp,0x10
c000f7a4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f7ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f7b0:	83 c2 2a             	add    edx,0x2a
c000f7b3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f7b7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7b9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f7bc:	89 01                	mov    DWORD PTR [ecx],eax
c000f7be:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7c1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7c6:	66 90                	xchg   ax,ax
c000f7c8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7cd:	e9 3e ff ff ff       	jmp    c000f710 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7d2:	66 90                	xchg   ax,ax
c000f7d4:	90                   	nop
c000f7d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7d9:	83 c4 2c             	add    esp,0x2c
c000f7dc:	c2 04 00             	ret    0x4
c000f7df:	90                   	nop

c000f7e0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f7e0:	83 ec 1c             	sub    esp,0x1c
c000f7e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7e7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f7eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7ef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7f4:	88 c8                	mov    al,cl
c000f7f6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7fa:	88 d0                	mov    al,dl
c000f7fc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f804:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f80a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f80e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f811:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f815:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f81d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f823:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f827:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f82a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f82e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f837:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f83d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f841:	83 c0 01             	add    eax,0x1
c000f844:	88 c1                	mov    cl,al
c000f846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f84a:	83 c2 2a             	add    edx,0x2a
c000f84d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f855:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f85f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f862:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f866:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f86e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f874:	8d 50 01             	lea    edx,[eax+0x1]
c000f877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f87b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f881:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f885:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f88b:	3d 00 02 00 00       	cmp    eax,0x200
c000f890:	75 12                	jne    c000f8a4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f892:	83 ec 0c             	sub    esp,0xc
c000f895:	68 05 1b 02 c0       	push   0xc0021b05
c000f89a:	e8 02 1b 00 00       	call   c00113a1 <KePanic(char const*)>
c000f89f:	83 c4 10             	add    esp,0x10
c000f8a2:	66 90                	xchg   ax,ax
c000f8a4:	90                   	nop
c000f8a5:	83 c4 1c             	add    esp,0x1c
c000f8a8:	c3                   	ret    
c000f8a9:	90                   	nop
c000f8aa:	66 90                	xchg   ax,ax

c000f8ac <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f8ac:	b8 00 00 00 00       	mov    eax,0x0
c000f8b1:	c3                   	ret    
c000f8b2:	66 90                	xchg   ax,ax

c000f8b4 <ACPI::detectPCI()>:
c000f8b4:	53                   	push   ebx
c000f8b5:	83 ec 28             	sub    esp,0x28
c000f8b8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8bd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f8c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f8c7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8cd:	83 e0 04             	and    eax,0x4
c000f8d0:	0f b6 c0             	movzx  eax,al
c000f8d3:	85 c0                	test   eax,eax
c000f8d5:	74 2d                	je     c000f904 <ACPI::detectPCI()+0x50>
c000f8d7:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f8dc:	83 ec 08             	sub    esp,0x8
c000f8df:	68 22 1b 02 c0       	push   0xc0021b22
c000f8e4:	50                   	push   eax
c000f8e5:	e8 6e f8 ff ff       	call   c000f158 <findDataTable(unsigned char*, char*)>
c000f8ea:	83 c4 10             	add    esp,0x10
c000f8ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8f1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8f6:	74 0c                	je     c000f904 <ACPI::detectPCI()+0x50>
c000f8f8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8fd:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f902:	66 90                	xchg   ax,ax
c000f904:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f90c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f910:	8a 00                	mov    al,BYTE PTR [eax]
c000f912:	0f b6 c0             	movzx  eax,al
c000f915:	83 f8 01             	cmp    eax,0x1
c000f918:	75 0e                	jne    c000f928 <ACPI::detectPCI()+0x74>
c000f91a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f91f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f924:	eb 2e                	jmp    c000f954 <ACPI::detectPCI()+0xa0>
c000f926:	66 90                	xchg   ax,ax
c000f928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f92c:	8a 00                	mov    al,BYTE PTR [eax]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	83 f8 02             	cmp    eax,0x2
c000f934:	75 1e                	jne    c000f954 <ACPI::detectPCI()+0xa0>
c000f936:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f93b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f940:	85 c0                	test   eax,eax
c000f942:	74 10                	je     c000f954 <ACPI::detectPCI()+0xa0>
c000f944:	83 ec 0c             	sub    esp,0xc
c000f947:	68 9c 1a 02 c0       	push   0xc0021a9c
c000f94c:	e8 50 1a 00 00       	call   c00113a1 <KePanic(char const*)>
c000f951:	83 c4 10             	add    esp,0x10
c000f954:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f958:	83 f0 01             	xor    eax,0x1
c000f95b:	0f b6 c0             	movzx  eax,al
c000f95e:	85 c0                	test   eax,eax
c000f960:	74 46                	je     c000f9a8 <ACPI::detectPCI()+0xf4>
c000f962:	e8 c9 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f967:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f96b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f970:	75 0e                	jne    c000f980 <ACPI::detectPCI()+0xcc>
c000f972:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f977:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f97c:	eb 2a                	jmp    c000f9a8 <ACPI::detectPCI()+0xf4>
c000f97e:	66 90                	xchg   ax,ax
c000f980:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f985:	75 21                	jne    c000f9a8 <ACPI::detectPCI()+0xf4>
c000f987:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f98c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f991:	85 c0                	test   eax,eax
c000f993:	74 13                	je     c000f9a8 <ACPI::detectPCI()+0xf4>
c000f995:	83 ec 0c             	sub    esp,0xc
c000f998:	68 9c 1a 02 c0       	push   0xc0021a9c
c000f99d:	e8 ff 19 00 00       	call   c00113a1 <KePanic(char const*)>
c000f9a2:	83 c4 10             	add    esp,0x10
c000f9a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f9a8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9ad:	85 c0                	test   eax,eax
c000f9af:	0f 84 87 00 00 00    	je     c000fa3c <ACPI::detectPCI()+0x188>
c000f9b5:	83 ec 0c             	sub    esp,0xc
c000f9b8:	68 27 1b 02 c0       	push   0xc0021b27
c000f9bd:	e8 09 13 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c000f9c2:	83 c4 10             	add    esp,0x10
c000f9c5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9cd:	83 ec 0c             	sub    esp,0xc
c000f9d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9d4:	e8 dd 80 ff ff       	call   c0007ab6 <malloc>
c000f9d9:	83 c4 10             	add    esp,0x10
c000f9dc:	89 c3                	mov    ebx,eax
c000f9de:	83 ec 0c             	sub    esp,0xc
c000f9e1:	53                   	push   ebx
c000f9e2:	e8 51 b3 00 00       	call   c001ad38 <PCI::PCI()>
c000f9e7:	83 c4 10             	add    esp,0x10
c000f9ea:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9f2:	83 ec 08             	sub    esp,0x8
c000f9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9f9:	50                   	push   eax
c000f9fa:	e8 73 cd ff ff       	call   c000c772 <Device::addChild(Device*)>
c000f9ff:	83 c4 10             	add    esp,0x10
c000fa02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa06:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa08:	83 c0 08             	add    eax,0x8
c000fa0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa0d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fa12:	85 d2                	test   edx,edx
c000fa14:	74 0a                	je     c000fa20 <ACPI::detectPCI()+0x16c>
c000fa16:	ba 01 00 00 00       	mov    edx,0x1
c000fa1b:	eb 0b                	jmp    c000fa28 <ACPI::detectPCI()+0x174>
c000fa1d:	8d 76 00             	lea    esi,[esi+0x0]
c000fa20:	ba 02 00 00 00       	mov    edx,0x2
c000fa25:	8d 76 00             	lea    esi,[esi+0x0]
c000fa28:	6a 00                	push   0x0
c000fa2a:	6a 00                	push   0x0
c000fa2c:	52                   	push   edx
c000fa2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa31:	ff d0                	call   eax
c000fa33:	83 c4 10             	add    esp,0x10
c000fa36:	e9 91 00 00 00       	jmp    c000facc <ACPI::detectPCI()+0x218>
c000fa3b:	90                   	nop
c000fa3c:	83 ec 0c             	sub    esp,0xc
c000fa3f:	68 3f 1b 02 c0       	push   0xc0021b3f
c000fa44:	e8 82 12 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c000fa49:	83 c4 10             	add    esp,0x10
c000fa4c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa53:	83 ec 0c             	sub    esp,0xc
c000fa56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa5a:	e8 57 80 ff ff       	call   c0007ab6 <malloc>
c000fa5f:	83 c4 10             	add    esp,0x10
c000fa62:	89 c3                	mov    ebx,eax
c000fa64:	83 ec 0c             	sub    esp,0xc
c000fa67:	53                   	push   ebx
c000fa68:	e8 65 be 00 00       	call   c001b8d2 <IDE::IDE()>
c000fa6d:	83 c4 10             	add    esp,0x10
c000fa70:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa78:	83 ec 08             	sub    esp,0x8
c000fa7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa7f:	50                   	push   eax
c000fa80:	e8 ed cc ff ff       	call   c000c772 <Device::addChild(Device*)>
c000fa85:	83 c4 10             	add    esp,0x10
c000fa88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa8c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa9a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000faa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000faa7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fab0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fab4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fab6:	83 c0 08             	add    eax,0x8
c000fab9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fabb:	6a 00                	push   0x0
c000fabd:	6a 00                	push   0x0
c000fabf:	6a 00                	push   0x0
c000fac1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fac5:	ff d0                	call   eax
c000fac7:	83 c4 10             	add    esp,0x10
c000faca:	66 90                	xchg   ax,ax
c000facc:	90                   	nop
c000facd:	83 c4 28             	add    esp,0x28
c000fad0:	5b                   	pop    ebx
c000fad1:	c3                   	ret    
c000fad2:	66 90                	xchg   ax,ax

c000fad4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fad4:	83 ec 1c             	sub    esp,0x1c
c000fad7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fadb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fade:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fae2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fae7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000faec:	83 ec 08             	sub    esp,0x8
c000faef:	52                   	push   edx
c000faf0:	50                   	push   eax
c000faf1:	e8 82 76 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000faf6:	83 c4 10             	add    esp,0x10
c000faf9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fafd:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fb02:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fb07:	83 ec 04             	sub    esp,0x4
c000fb0a:	6a 01                	push   0x1
c000fb0c:	52                   	push   edx
c000fb0d:	50                   	push   eax
c000fb0e:	e8 7f 77 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fb13:	83 c4 10             	add    esp,0x10
c000fb16:	90                   	nop
c000fb17:	83 c4 1c             	add    esp,0x1c
c000fb1a:	c3                   	ret    
c000fb1b:	90                   	nop

c000fb1c <ACPI::sleep()>:
c000fb1c:	83 ec 0c             	sub    esp,0xc
c000fb1f:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb24:	85 c0                	test   eax,eax
c000fb26:	74 08                	je     c000fb30 <ACPI::sleep()+0x14>
c000fb28:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb2d:	ff d0                	call   eax
c000fb2f:	90                   	nop
c000fb30:	90                   	nop
c000fb31:	83 c4 0c             	add    esp,0xc
c000fb34:	c3                   	ret    
c000fb35:	90                   	nop
c000fb36:	66 90                	xchg   ax,ax

c000fb38 <ACPI::open(int, int, void*)>:
c000fb38:	57                   	push   edi
c000fb39:	56                   	push   esi
c000fb3a:	53                   	push   ebx
c000fb3b:	81 ec 70 01 00 00    	sub    esp,0x170
c000fb41:	83 ec 0c             	sub    esp,0xc
c000fb44:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fb4b:	e8 64 fd ff ff       	call   c000f8b4 <ACPI::detectPCI()>
c000fb50:	83 c4 10             	add    esp,0x10
c000fb53:	83 ec 0c             	sub    esp,0xc
c000fb56:	68 c4 1a 02 c0       	push   0xc0021ac4
c000fb5b:	e8 6b 11 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c000fb60:	83 c4 10             	add    esp,0x10
c000fb63:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb68:	8a 00                	mov    al,BYTE PTR [eax]
c000fb6a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fb71:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb79:	83 f8 01             	cmp    eax,0x1
c000fb7c:	75 12                	jne    c000fb90 <ACPI::open(int, int, void*)+0x58>
c000fb7e:	83 ec 0c             	sub    esp,0xc
c000fb81:	68 f1 13 02 c0       	push   0xc00213f1
c000fb86:	e8 fd 4b 00 00       	call   c0014788 <Thr::loadKernelSymbolTable(char const*)>
c000fb8b:	83 c4 10             	add    esp,0x10
c000fb8e:	eb 34                	jmp    c000fbc4 <ACPI::open(int, int, void*)+0x8c>
c000fb90:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb98:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb9d:	75 15                	jne    c000fbb4 <ACPI::open(int, int, void*)+0x7c>
c000fb9f:	83 ec 0c             	sub    esp,0xc
c000fba2:	68 54 1b 02 c0       	push   0xc0021b54
c000fba7:	e8 dc 4b 00 00       	call   c0014788 <Thr::loadKernelSymbolTable(char const*)>
c000fbac:	83 c4 10             	add    esp,0x10
c000fbaf:	eb 13                	jmp    c000fbc4 <ACPI::open(int, int, void*)+0x8c>
c000fbb1:	8d 76 00             	lea    esi,[esi+0x0]
c000fbb4:	83 ec 0c             	sub    esp,0xc
c000fbb7:	68 72 1b 02 c0       	push   0xc0021b72
c000fbbc:	e8 e0 17 00 00       	call   c00113a1 <KePanic(char const*)>
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fbcc:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fbd7:	83 ec 0c             	sub    esp,0xc
c000fbda:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fbe1:	e8 d0 7e ff ff       	call   c0007ab6 <malloc>
c000fbe6:	83 c4 10             	add    esp,0x10
c000fbe9:	89 c3                	mov    ebx,eax
c000fbeb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fbf0:	83 ec 04             	sub    esp,0x4
c000fbf3:	50                   	push   eax
c000fbf4:	68 8c 1b 02 c0       	push   0xc0021b8c
c000fbf9:	53                   	push   ebx
c000fbfa:	e8 4f bc ff ff       	call   c000b84e <File::File(char const*, Process*)>
c000fbff:	83 c4 10             	add    esp,0x10
c000fc02:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fc09:	83 ec 08             	sub    esp,0x8
c000fc0c:	6a 01                	push   0x1
c000fc0e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc15:	e8 fc bc ff ff       	call   c000b916 <File::open(FileOpenMode)>
c000fc1a:	83 c4 10             	add    esp,0x10
c000fc1d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fc24:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fc2c:	75 16                	jne    c000fc44 <ACPI::open(int, int, void*)+0x10c>
c000fc2e:	83 ec 0c             	sub    esp,0xc
c000fc31:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc38:	e8 37 bd ff ff       	call   c000b974 <File::close()>
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	eb 0a                	jmp    c000fc4c <ACPI::open(int, int, void*)+0x114>
c000fc42:	66 90                	xchg   ax,ax
c000fc44:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fc4c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fc54:	74 1e                	je     c000fc74 <ACPI::open(int, int, void*)+0x13c>
c000fc56:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fc5d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc5f:	83 c0 08             	add    eax,0x8
c000fc62:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc64:	83 ec 0c             	sub    esp,0xc
c000fc67:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc6e:	ff d0                	call   eax
c000fc70:	83 c4 10             	add    esp,0x10
c000fc73:	90                   	nop
c000fc74:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fc7b:	83 f0 01             	xor    eax,0x1
c000fc7e:	0f b6 c0             	movzx  eax,al
c000fc81:	85 c0                	test   eax,eax
c000fc83:	74 43                	je     c000fcc8 <ACPI::open(int, int, void*)+0x190>
c000fc85:	83 ec 0c             	sub    esp,0xc
c000fc88:	68 aa 1b 02 c0       	push   0xc0021baa
c000fc8d:	e8 39 10 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c000fc92:	83 c4 10             	add    esp,0x10
c000fc95:	83 ec 04             	sub    esp,0x4
c000fc98:	6a 0c                	push   0xc
c000fc9a:	68 c5 1b 02 c0       	push   0xc0021bc5
c000fc9f:	68 d6 1b 02 c0       	push   0xc0021bd6
c000fca4:	e8 8f 3d 00 00       	call   c0013a38 <Reg::readIntWithDefault(char*, char*, int)>
c000fca9:	83 c4 10             	add    esp,0x10
c000fcac:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fcb3:	83 ec 0c             	sub    esp,0xc
c000fcb6:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fcbd:	e8 7a 9b ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fcc2:	83 c4 10             	add    esp,0x10
c000fcc5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	68 b5 06 02 c0       	push   0xc00206b5
c000fcd0:	e8 f6 0f 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fcdf:	83 ec 08             	sub    esp,0x8
c000fce2:	6a 13                	push   0x13
c000fce4:	50                   	push   eax
c000fce5:	e8 a0 cd ff ff       	call   c000ca8a <getDevicesOfType(DeviceType)>
c000fcea:	83 c4 0c             	add    esp,0xc
c000fced:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf0:	83 ec 0c             	sub    esp,0xc
c000fcf3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcfa:	50                   	push   eax
c000fcfb:	e8 b0 fd 00 00       	call   c001fab0 <LinkedList<Device>::isEmpty()>
c000fd00:	83 c4 10             	add    esp,0x10
c000fd03:	83 f0 01             	xor    eax,0x1
c000fd06:	0f b6 c0             	movzx  eax,al
c000fd09:	85 c0                	test   eax,eax
c000fd0b:	0f 84 47 01 00 00    	je     c000fe58 <ACPI::open(int, int, void*)+0x320>
c000fd11:	83 ec 0c             	sub    esp,0xc
c000fd14:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd1b:	50                   	push   eax
c000fd1c:	e8 ab fd 00 00       	call   c001facc <LinkedList<Device>::getFirstElement()>
c000fd21:	83 c4 10             	add    esp,0x10
c000fd24:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fd2b:	83 ec 0c             	sub    esp,0xc
c000fd2e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd35:	50                   	push   eax
c000fd36:	e8 99 fd 00 00       	call   c001fad4 <LinkedList<Device>::removeFirst()>
c000fd3b:	83 c4 10             	add    esp,0x10
c000fd3e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fd45:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fd4c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fd53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd57:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fd5d:	ba 09 00 00 00       	mov    edx,0x9
c000fd62:	fc                   	cld    
c000fd63:	89 c7                	mov    edi,eax
c000fd65:	89 de                	mov    esi,ebx
c000fd67:	89 d1                	mov    ecx,edx
c000fd69:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd6b:	83 ec 08             	sub    esp,0x8
c000fd6e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fd72:	50                   	push   eax
c000fd73:	83 ec 24             	sub    esp,0x24
c000fd76:	89 e0                	mov    eax,esp
c000fd78:	89 c3                	mov    ebx,eax
c000fd7a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fd7e:	ba 09 00 00 00       	mov    edx,0x9
c000fd83:	89 df                	mov    edi,ebx
c000fd85:	89 c6                	mov    esi,eax
c000fd87:	89 d1                	mov    ecx,edx
c000fd89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd8b:	e8 92 b4 00 00       	call   c001b222 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd90:	83 c4 30             	add    esp,0x30
c000fd93:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fd9a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fda2:	0f 84 48 ff ff ff    	je     c000fcf0 <ACPI::open(int, int, void*)+0x1b8>
c000fda8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fdb3:	83 ec 0c             	sub    esp,0xc
c000fdb6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fdbd:	e8 f4 7c ff ff       	call   c0007ab6 <malloc>
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	89 c3                	mov    ebx,eax
c000fdc7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fdcc:	83 ec 04             	sub    esp,0x4
c000fdcf:	50                   	push   eax
c000fdd0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fdd7:	53                   	push   ebx
c000fdd8:	e8 71 ba ff ff       	call   c000b84e <File::File(char const*, Process*)>
c000fddd:	83 c4 10             	add    esp,0x10
c000fde0:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fde7:	83 ec 0c             	sub    esp,0xc
c000fdea:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fdf1:	e8 e4 bd ff ff       	call   c000bbda <File::exists()>
c000fdf6:	83 c4 10             	add    esp,0x10
c000fdf9:	0f b6 c0             	movzx  eax,al
c000fdfc:	85 c0                	test   eax,eax
c000fdfe:	74 28                	je     c000fe28 <ACPI::open(int, int, void*)+0x2f0>
c000fe00:	83 ec 08             	sub    esp,0x8
c000fe03:	6a 01                	push   0x1
c000fe05:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fe0c:	e8 f1 53 00 00       	call   c0015202 <Thr::loadDLL(char const*, bool)>
c000fe11:	83 c4 10             	add    esp,0x10
c000fe14:	83 ec 08             	sub    esp,0x8
c000fe17:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fe1e:	50                   	push   eax
c000fe1f:	e8 0f 56 00 00       	call   c0015433 <Thr::executeDLL(unsigned long, void*)>
c000fe24:	83 c4 10             	add    esp,0x10
c000fe27:	90                   	nop
c000fe28:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fe30:	0f 84 ba fe ff ff    	je     c000fcf0 <ACPI::open(int, int, void*)+0x1b8>
c000fe36:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fe3d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe3f:	83 c0 08             	add    eax,0x8
c000fe42:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe44:	83 ec 0c             	sub    esp,0xc
c000fe47:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fe4e:	ff d0                	call   eax
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	e9 98 fe ff ff       	jmp    c000fcf0 <ACPI::open(int, int, void*)+0x1b8>
c000fe58:	83 ec 0c             	sub    esp,0xc
c000fe5b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fe62:	50                   	push   eax
c000fe63:	e8 44 fc 00 00       	call   c001faac <LinkedList<Device>::~LinkedList()>
c000fe68:	83 c4 10             	add    esp,0x10
c000fe6b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fe71:	83 ec 08             	sub    esp,0x8
c000fe74:	6a 01                	push   0x1
c000fe76:	68 dd 1b 02 c0       	push   0xc0021bdd
c000fe7b:	e8 82 53 00 00       	call   c0015202 <Thr::loadDLL(char const*, bool)>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	83 ec 08             	sub    esp,0x8
c000fe86:	53                   	push   ebx
c000fe87:	50                   	push   eax
c000fe88:	e8 a6 55 00 00       	call   c0015433 <Thr::executeDLL(unsigned long, void*)>
c000fe8d:	83 c4 10             	add    esp,0x10
c000fe90:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fe95:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe9b:	83 e0 04             	and    eax,0x4
c000fe9e:	0f b6 c0             	movzx  eax,al
c000fea1:	85 c0                	test   eax,eax
c000fea3:	0f 84 1b 01 00 00    	je     c000ffc4 <ACPI::open(int, int, void*)+0x48c>
c000fea9:	83 ec 0c             	sub    esp,0xc
c000feac:	68 fa 1b 02 c0       	push   0xc0021bfa
c000feb1:	e8 15 0e 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c000feb6:	83 c4 10             	add    esp,0x10
c000feb9:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fec4:	83 ec 0c             	sub    esp,0xc
c000fec7:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fece:	e8 e3 7b ff ff       	call   c0007ab6 <malloc>
c000fed3:	83 c4 10             	add    esp,0x10
c000fed6:	89 c3                	mov    ebx,eax
c000fed8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fedd:	83 ec 04             	sub    esp,0x4
c000fee0:	50                   	push   eax
c000fee1:	68 17 1c 02 c0       	push   0xc0021c17
c000fee6:	53                   	push   ebx
c000fee7:	e8 62 b9 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c000feec:	83 c4 10             	add    esp,0x10
c000feef:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fef6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fefe:	74 20                	je     c000ff20 <ACPI::open(int, int, void*)+0x3e8>
c000ff00:	83 ec 0c             	sub    esp,0xc
c000ff03:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff0a:	e8 cb bc ff ff       	call   c000bbda <File::exists()>
c000ff0f:	83 c4 10             	add    esp,0x10
c000ff12:	0f b6 c0             	movzx  eax,al
c000ff15:	85 c0                	test   eax,eax
c000ff17:	74 07                	je     c000ff20 <ACPI::open(int, int, void*)+0x3e8>
c000ff19:	b0 01                	mov    al,0x1
c000ff1b:	eb 07                	jmp    c000ff24 <ACPI::open(int, int, void*)+0x3ec>
c000ff1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff20:	b0 00                	mov    al,0x0
c000ff22:	66 90                	xchg   ax,ax
c000ff24:	0f b6 c0             	movzx  eax,al
c000ff27:	85 c0                	test   eax,eax
c000ff29:	74 25                	je     c000ff50 <ACPI::open(int, int, void*)+0x418>
c000ff2b:	83 ec 08             	sub    esp,0x8
c000ff2e:	6a 01                	push   0x1
c000ff30:	68 17 1c 02 c0       	push   0xc0021c17
c000ff35:	e8 c8 52 00 00       	call   c0015202 <Thr::loadDLL(char const*, bool)>
c000ff3a:	83 c4 10             	add    esp,0x10
c000ff3d:	83 ec 08             	sub    esp,0x8
c000ff40:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ff47:	50                   	push   eax
c000ff48:	e8 e6 54 00 00       	call   c0015433 <Thr::executeDLL(unsigned long, void*)>
c000ff4d:	83 c4 10             	add    esp,0x10
c000ff50:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff58:	74 2a                	je     c000ff84 <ACPI::open(int, int, void*)+0x44c>
c000ff5a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff62:	74 20                	je     c000ff84 <ACPI::open(int, int, void*)+0x44c>
c000ff64:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ff6b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff6d:	83 c0 08             	add    eax,0x8
c000ff70:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff72:	83 ec 0c             	sub    esp,0xc
c000ff75:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff7c:	ff d0                	call   eax
c000ff7e:	83 c4 10             	add    esp,0x10
c000ff81:	8d 76 00             	lea    esi,[esi+0x0]
c000ff84:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000ff89:	83 ec 08             	sub    esp,0x8
c000ff8c:	68 34 1c 02 c0       	push   0xc0021c34
c000ff91:	50                   	push   eax
c000ff92:	e8 c1 f1 ff ff       	call   c000f158 <findDataTable(unsigned char*, char*)>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ffa1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ffa9:	74 19                	je     c000ffc4 <ACPI::open(int, int, void*)+0x48c>
c000ffab:	83 ec 08             	sub    esp,0x8
c000ffae:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ffb5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ffbc:	e8 13 fb ff ff       	call   c000fad4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ffc1:	83 c4 10             	add    esp,0x10
c000ffc4:	b8 00 00 00 00       	mov    eax,0x0
c000ffc9:	81 c4 70 01 00 00    	add    esp,0x170
c000ffcf:	5b                   	pop    ebx
c000ffd0:	5e                   	pop    esi
c000ffd1:	5f                   	pop    edi
c000ffd2:	c3                   	ret    
c000ffd3:	90                   	nop

c000ffd4 <CPU::close(int, int, void*)>:
c000ffd4:	31 c0                	xor    eax,eax
c000ffd6:	c3                   	ret    
c000ffd7:	90                   	nop

c000ffd8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ffd8:	60                   	pusha  
c000ffd9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ffdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffe1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffe5:	9c                   	pushf  
c000ffe6:	fa                   	cli    
c000ffe7:	0f 09                	wbinvd 
c000ffe9:	0f 30                	wrmsr  
c000ffeb:	9d                   	popf   
c000ffec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fff0:	89 02                	mov    DWORD PTR [edx],eax
c000fff2:	61                   	popa   
c000fff3:	c3                   	ret    

c000fff4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fff4:	60                   	pusha  
c000fff5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fff9:	9c                   	pushf  
c000fffa:	fa                   	cli    
c000fffb:	0f 09                	wbinvd 
c000fffd:	31 c0                	xor    eax,eax
c000ffff:	31 d2                	xor    edx,edx
c0010001:	0f 32                	rdmsr  
c0010003:	9d                   	popf   
c0010004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010008:	89 02                	mov    DWORD PTR [edx],eax
c001000a:	61                   	popa   
c001000b:	c3                   	ret    

c001000c <CPU::AMD_K6_writeback(int, int, int)>:
c001000c:	56                   	push   esi
c001000d:	53                   	push   ebx
c001000e:	83 ec 10             	sub    esp,0x10
c0010011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010015:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001001a:	75 5d                	jne    c0010079 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001001c:	83 f8 08             	cmp    eax,0x8
c001001f:	75 09                	jne    c001002a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010021:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010026:	7e 13                	jle    c001003b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010028:	eb 30                	jmp    c001005a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001002a:	83 f8 06             	cmp    eax,0x6
c001002d:	7c 4a                	jl     c0010079 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001002f:	83 f8 07             	cmp    eax,0x7
c0010032:	7e 07                	jle    c001003b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010034:	83 f8 09             	cmp    eax,0x9
c0010037:	74 21                	je     c001005a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010039:	eb 3e                	jmp    c0010079 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001003b:	89 e6                	mov    esi,esp
c001003d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c0010043:	56                   	push   esi
c0010044:	c1 eb 15             	shr    ebx,0x15
c0010047:	68 82 00 00 c0       	push   0xc0000082
c001004c:	83 e3 7e             	and    ebx,0x7e
c001004f:	e8 a0 ff ff ff       	call   c000fff4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010054:	56                   	push   esi
c0010055:	6a 00                	push   0x0
c0010057:	53                   	push   ebx
c0010058:	eb 12                	jmp    c001006c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001005a:	89 e3                	mov    ebx,esp
c001005c:	53                   	push   ebx
c001005d:	68 82 00 00 c0       	push   0xc0000082
c0010062:	e8 8d ff ff ff       	call   c000fff4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010067:	53                   	push   ebx
c0010068:	6a 00                	push   0x0
c001006a:	6a 00                	push   0x0
c001006c:	68 82 00 00 c0       	push   0xc0000082
c0010071:	e8 62 ff ff ff       	call   c000ffd8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010076:	83 c4 18             	add    esp,0x18
c0010079:	83 c4 10             	add    esp,0x10
c001007c:	5b                   	pop    ebx
c001007d:	5e                   	pop    esi
c001007e:	c3                   	ret    
c001007f:	90                   	nop

c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010080:	55                   	push   ebp
c0010081:	57                   	push   edi
c0010082:	56                   	push   esi
c0010083:	53                   	push   ebx
c0010084:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010088:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001008c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010090:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010094:	39 05 f8 31 02 c0    	cmp    DWORD PTR ds:0xc00231f8,eax
c001009a:	75 23                	jne    c00100bf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001009c:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c00100a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00100a5:	89 06                	mov    DWORD PTR [esi],eax
c00100a7:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c00100ac:	89 07                	mov    DWORD PTR [edi],eax
c00100ae:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c00100b3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00100b6:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c00100bb:	89 02                	mov    DWORD PTR [edx],eax
c00100bd:	eb 3f                	jmp    c00100fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00100bf:	31 c9                	xor    ecx,ecx
c00100c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100c5:	0f a2                	cpuid  
c00100c7:	89 06                	mov    DWORD PTR [esi],eax
c00100c9:	89 1f                	mov    DWORD PTR [edi],ebx
c00100cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100cf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00100d2:	89 10                	mov    DWORD PTR [eax],edx
c00100d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100d8:	a3 f8 31 02 c0       	mov    ds:0xc00231f8,eax
c00100dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00100df:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c00100e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00100e6:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c00100eb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00100ee:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c00100f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f9:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c00100fe:	5b                   	pop    ebx
c00100ff:	5e                   	pop    esi
c0010100:	5f                   	pop    edi
c0010101:	5d                   	pop    ebp
c0010102:	c3                   	ret    
c0010103:	90                   	nop

c0010104 <CPU::cpuidCheckEDX(unsigned int)>:
c0010104:	83 ec 10             	sub    esp,0x10
c0010107:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001010b:	50                   	push   eax
c001010c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010110:	50                   	push   eax
c0010111:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010115:	50                   	push   eax
c0010116:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001011a:	50                   	push   eax
c001011b:	6a 01                	push   0x1
c001011d:	e8 5e ff ff ff       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010122:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010126:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001012a:	0f 95 c0             	setne  al
c001012d:	83 c4 24             	add    esp,0x24
c0010130:	c3                   	ret    
c0010131:	90                   	nop

c0010132 <CPU::cpuidCheckECX(unsigned int)>:
c0010132:	83 ec 10             	sub    esp,0x10
c0010135:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010139:	50                   	push   eax
c001013a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001013e:	50                   	push   eax
c001013f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010143:	50                   	push   eax
c0010144:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010148:	50                   	push   eax
c0010149:	6a 01                	push   0x1
c001014b:	e8 30 ff ff ff       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010150:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010154:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010158:	0f 95 c0             	setne  al
c001015b:	83 c4 24             	add    esp,0x24
c001015e:	c3                   	ret    
c001015f:	90                   	nop

c0010160 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010160:	83 ec 10             	sub    esp,0x10
c0010163:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010167:	50                   	push   eax
c0010168:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001016c:	50                   	push   eax
c001016d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010171:	50                   	push   eax
c0010172:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010176:	50                   	push   eax
c0010177:	6a 07                	push   0x7
c0010179:	e8 02 ff ff ff       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001017e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010182:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010186:	0f 95 c0             	setne  al
c0010189:	83 c4 24             	add    esp,0x24
c001018c:	c3                   	ret    
c001018d:	90                   	nop

c001018e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001018e:	83 ec 10             	sub    esp,0x10
c0010191:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010195:	50                   	push   eax
c0010196:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001019a:	50                   	push   eax
c001019b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001019f:	50                   	push   eax
c00101a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00101a4:	50                   	push   eax
c00101a5:	6a 07                	push   0x7
c00101a7:	e8 d4 fe ff ff       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00101ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101b0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00101b4:	0f 95 c0             	setne  al
c00101b7:	83 c4 24             	add    esp,0x24
c00101ba:	c3                   	ret    
c00101bb:	90                   	nop

c00101bc <CPU::CPU()>:
c00101bc:	83 ec 0c             	sub    esp,0xc
c00101bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c3:	83 ec 08             	sub    esp,0x8
c00101c6:	68 59 1d 02 c0       	push   0xc0021d59
c00101cb:	50                   	push   eax
c00101cc:	e8 39 c7 ff ff       	call   c000c90a <Device::Device(char const*)>
c00101d1:	83 c4 10             	add    esp,0x10
c00101d4:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c00101d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101dd:	89 10                	mov    DWORD PTR [eax],edx
c00101df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00101ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101f1:	05 78 01 00 00       	add    eax,0x178
c00101f6:	83 ec 0c             	sub    esp,0xc
c00101f9:	50                   	push   eax
c00101fa:	e8 5d 71 ff ff       	call   c000735c <GDT::GDT()>
c00101ff:	83 c4 10             	add    esp,0x10
c0010202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010206:	05 7c 09 00 00       	add    eax,0x97c
c001020b:	83 ec 0c             	sub    esp,0xc
c001020e:	50                   	push   eax
c001020f:	e8 98 73 ff ff       	call   c00075ac <IDT::IDT()>
c0010214:	83 c4 10             	add    esp,0x10
c0010217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001021b:	05 7c 11 00 00       	add    eax,0x117c
c0010220:	83 ec 0c             	sub    esp,0xc
c0010223:	50                   	push   eax
c0010224:	e8 1b 8d ff ff       	call   c0008f44 <TSS::TSS()>
c0010229:	83 c4 10             	add    esp,0x10
c001022c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010230:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001023b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010245:	90                   	nop
c0010246:	83 c4 0c             	add    esp,0xc
c0010249:	c3                   	ret    

c001024a <CPU::displayFeatures()>:
c001024a:	c3                   	ret    
c001024b:	90                   	nop

c001024c <CPU::detectFeatures()>:
c001024c:	55                   	push   ebp
c001024d:	57                   	push   edi
c001024e:	56                   	push   esi
c001024f:	53                   	push   ebx
c0010250:	83 ec 30             	sub    esp,0x30
c0010253:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010257:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010261:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010268:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001026e:	6a 0d                	push   0xd
c0010270:	6a 00                	push   0x0
c0010272:	55                   	push   ebp
c0010273:	e8 78 02 ff ff       	call   c00004f0 <memset>
c0010278:	83 c4 10             	add    esp,0x10
c001027b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010280:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010287:	0f 84 db 05 00 00    	je     c0010868 <CPU::detectFeatures()+0x61c>
c001028d:	83 ec 0c             	sub    esp,0xc
c0010290:	89 ef                	mov    edi,ebp
c0010292:	6a 10                	push   0x10
c0010294:	e8 6b fe ff ff       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c0010299:	83 e0 01             	and    eax,0x1
c001029c:	8d 14 00             	lea    edx,[eax+eax*1]
c001029f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102a5:	83 e0 fd             	and    eax,0xfffffffd
c00102a8:	09 d0                	or     eax,edx
c00102aa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102b0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00102b7:	e8 48 fe ff ff       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c00102bc:	83 e0 01             	and    eax,0x1
c00102bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00102c6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102cc:	83 e0 fb             	and    eax,0xfffffffb
c00102cf:	09 d0                	or     eax,edx
c00102d1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102d7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00102de:	e8 21 fe ff ff       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c00102e3:	83 e0 01             	and    eax,0x1
c00102e6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00102ed:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102f3:	83 e0 f7             	and    eax,0xfffffff7
c00102f6:	09 d0                	or     eax,edx
c00102f8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102fe:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010305:	e8 fa fd ff ff       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c001030a:	83 e0 01             	and    eax,0x1
c001030d:	c1 e0 04             	shl    eax,0x4
c0010310:	89 c2                	mov    edx,eax
c0010312:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010318:	83 e0 ef             	and    eax,0xffffffef
c001031b:	09 d0                	or     eax,edx
c001031d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010323:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001032a:	e8 d5 fd ff ff       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c001032f:	83 e0 01             	and    eax,0x1
c0010332:	c1 e0 05             	shl    eax,0x5
c0010335:	89 c2                	mov    edx,eax
c0010337:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001033d:	83 e0 df             	and    eax,0xffffffdf
c0010340:	09 d0                	or     eax,edx
c0010342:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010348:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001034f:	e8 b0 fd ff ff       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c0010354:	83 e0 01             	and    eax,0x1
c0010357:	8d 14 00             	lea    edx,[eax+eax*1]
c001035a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010360:	83 e0 fd             	and    eax,0xfffffffd
c0010363:	09 d0                	or     eax,edx
c0010365:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001036b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010372:	e8 8d fd ff ff       	call   c0010104 <CPU::cpuidCheckEDX(unsigned int)>
c0010377:	83 e0 01             	and    eax,0x1
c001037a:	c1 e0 06             	shl    eax,0x6
c001037d:	89 c2                	mov    edx,eax
c001037f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010385:	83 e0 bf             	and    eax,0xffffffbf
c0010388:	09 d0                	or     eax,edx
c001038a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010390:	58                   	pop    eax
c0010391:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010395:	50                   	push   eax
c0010396:	8d 44 24 28          	lea    eax,[esp+0x28]
c001039a:	50                   	push   eax
c001039b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001039f:	56                   	push   esi
c00103a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00103a4:	50                   	push   eax
c00103a5:	6a 00                	push   0x0
c00103a7:	e8 d4 fc ff ff       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103ac:	b8 04 00 00 00       	mov    eax,0x4
c00103b1:	89 c1                	mov    ecx,eax
c00103b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103b5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00103bb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00103bf:	89 c1                	mov    ecx,eax
c00103c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103c3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00103c9:	8d 74 24 38          	lea    esi,[esp+0x38]
c00103cd:	89 c1                	mov    ecx,eax
c00103cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103d1:	83 c4 18             	add    esp,0x18
c00103d4:	68 68 1c 02 c0       	push   0xc0021c68
c00103d9:	55                   	push   ebp
c00103da:	e8 71 03 ff ff       	call   c0000750 <strcmp>
c00103df:	83 c4 10             	add    esp,0x10
c00103e2:	85 c0                	test   eax,eax
c00103e4:	75 0f                	jne    c00103f5 <CPU::detectFeatures()+0x1a9>
c00103e6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00103f0:	e9 22 02 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c00103f5:	50                   	push   eax
c00103f6:	50                   	push   eax
c00103f7:	68 75 1c 02 c0       	push   0xc0021c75
c00103fc:	55                   	push   ebp
c00103fd:	e8 4e 03 ff ff       	call   c0000750 <strcmp>
c0010402:	83 c4 10             	add    esp,0x10
c0010405:	85 c0                	test   eax,eax
c0010407:	74 dd                	je     c00103e6 <CPU::detectFeatures()+0x19a>
c0010409:	50                   	push   eax
c001040a:	50                   	push   eax
c001040b:	68 82 1c 02 c0       	push   0xc0021c82
c0010410:	55                   	push   ebp
c0010411:	e8 3a 03 ff ff       	call   c0000750 <strcmp>
c0010416:	83 c4 10             	add    esp,0x10
c0010419:	85 c0                	test   eax,eax
c001041b:	74 2a                	je     c0010447 <CPU::detectFeatures()+0x1fb>
c001041d:	50                   	push   eax
c001041e:	50                   	push   eax
c001041f:	68 8f 1c 02 c0       	push   0xc0021c8f
c0010424:	55                   	push   ebp
c0010425:	e8 26 03 ff ff       	call   c0000750 <strcmp>
c001042a:	83 c4 10             	add    esp,0x10
c001042d:	85 c0                	test   eax,eax
c001042f:	74 16                	je     c0010447 <CPU::detectFeatures()+0x1fb>
c0010431:	50                   	push   eax
c0010432:	50                   	push   eax
c0010433:	68 9c 1c 02 c0       	push   0xc0021c9c
c0010438:	55                   	push   ebp
c0010439:	e8 12 03 ff ff       	call   c0000750 <strcmp>
c001043e:	83 c4 10             	add    esp,0x10
c0010441:	85 c0                	test   eax,eax
c0010443:	74 48                	je     c001048d <CPU::detectFeatures()+0x241>
c0010445:	eb 0f                	jmp    c0010456 <CPU::detectFeatures()+0x20a>
c0010447:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010451:	e9 c1 01 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c0010456:	50                   	push   eax
c0010457:	50                   	push   eax
c0010458:	68 a9 1c 02 c0       	push   0xc0021ca9
c001045d:	55                   	push   ebp
c001045e:	e8 ed 02 ff ff       	call   c0000750 <strcmp>
c0010463:	83 c4 10             	add    esp,0x10
c0010466:	85 c0                	test   eax,eax
c0010468:	74 23                	je     c001048d <CPU::detectFeatures()+0x241>
c001046a:	57                   	push   edi
c001046b:	57                   	push   edi
c001046c:	68 b6 1c 02 c0       	push   0xc0021cb6
c0010471:	55                   	push   ebp
c0010472:	e8 d9 02 ff ff       	call   c0000750 <strcmp>
c0010477:	83 c4 10             	add    esp,0x10
c001047a:	85 c0                	test   eax,eax
c001047c:	75 1e                	jne    c001049c <CPU::detectFeatures()+0x250>
c001047e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010488:	e9 8a 01 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c001048d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010497:	e9 7b 01 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c001049c:	56                   	push   esi
c001049d:	56                   	push   esi
c001049e:	68 c3 1c 02 c0       	push   0xc0021cc3
c00104a3:	55                   	push   ebp
c00104a4:	e8 a7 02 ff ff       	call   c0000750 <strcmp>
c00104a9:	83 c4 10             	add    esp,0x10
c00104ac:	85 c0                	test   eax,eax
c00104ae:	75 0f                	jne    c00104bf <CPU::detectFeatures()+0x273>
c00104b0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00104ba:	e9 58 01 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c00104bf:	51                   	push   ecx
c00104c0:	51                   	push   ecx
c00104c1:	68 82 1c 02 c0       	push   0xc0021c82
c00104c6:	55                   	push   ebp
c00104c7:	e8 84 02 ff ff       	call   c0000750 <strcmp>
c00104cc:	83 c4 10             	add    esp,0x10
c00104cf:	85 c0                	test   eax,eax
c00104d1:	75 0f                	jne    c00104e2 <CPU::detectFeatures()+0x296>
c00104d3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00104dd:	e9 35 01 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c00104e2:	52                   	push   edx
c00104e3:	52                   	push   edx
c00104e4:	68 d0 1c 02 c0       	push   0xc0021cd0
c00104e9:	55                   	push   ebp
c00104ea:	e8 61 02 ff ff       	call   c0000750 <strcmp>
c00104ef:	83 c4 10             	add    esp,0x10
c00104f2:	85 c0                	test   eax,eax
c00104f4:	75 0f                	jne    c0010505 <CPU::detectFeatures()+0x2b9>
c00104f6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010500:	e9 12 01 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c0010505:	50                   	push   eax
c0010506:	50                   	push   eax
c0010507:	68 dd 1c 02 c0       	push   0xc0021cdd
c001050c:	55                   	push   ebp
c001050d:	e8 3e 02 ff ff       	call   c0000750 <strcmp>
c0010512:	83 c4 10             	add    esp,0x10
c0010515:	85 c0                	test   eax,eax
c0010517:	75 0f                	jne    c0010528 <CPU::detectFeatures()+0x2dc>
c0010519:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010523:	e9 ef 00 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c0010528:	50                   	push   eax
c0010529:	50                   	push   eax
c001052a:	68 ea 1c 02 c0       	push   0xc0021cea
c001052f:	55                   	push   ebp
c0010530:	e8 1b 02 ff ff       	call   c0000750 <strcmp>
c0010535:	83 c4 10             	add    esp,0x10
c0010538:	85 c0                	test   eax,eax
c001053a:	75 0f                	jne    c001054b <CPU::detectFeatures()+0x2ff>
c001053c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010546:	e9 cc 00 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c001054b:	50                   	push   eax
c001054c:	50                   	push   eax
c001054d:	68 f7 1c 02 c0       	push   0xc0021cf7
c0010552:	55                   	push   ebp
c0010553:	e8 f8 01 ff ff       	call   c0000750 <strcmp>
c0010558:	83 c4 10             	add    esp,0x10
c001055b:	85 c0                	test   eax,eax
c001055d:	75 0f                	jne    c001056e <CPU::detectFeatures()+0x322>
c001055f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010569:	e9 a9 00 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c001056e:	50                   	push   eax
c001056f:	50                   	push   eax
c0010570:	68 04 1d 02 c0       	push   0xc0021d04
c0010575:	55                   	push   ebp
c0010576:	e8 d5 01 ff ff       	call   c0000750 <strcmp>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	85 c0                	test   eax,eax
c0010580:	75 0f                	jne    c0010591 <CPU::detectFeatures()+0x345>
c0010582:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001058c:	e9 86 00 00 00       	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c0010591:	50                   	push   eax
c0010592:	50                   	push   eax
c0010593:	68 11 1d 02 c0       	push   0xc0021d11
c0010598:	55                   	push   ebp
c0010599:	e8 b2 01 ff ff       	call   c0000750 <strcmp>
c001059e:	83 c4 10             	add    esp,0x10
c00105a1:	85 c0                	test   eax,eax
c00105a3:	75 0c                	jne    c00105b1 <CPU::detectFeatures()+0x365>
c00105a5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00105af:	eb 66                	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c00105b1:	50                   	push   eax
c00105b2:	50                   	push   eax
c00105b3:	68 1e 1d 02 c0       	push   0xc0021d1e
c00105b8:	55                   	push   ebp
c00105b9:	e8 92 01 ff ff       	call   c0000750 <strcmp>
c00105be:	83 c4 10             	add    esp,0x10
c00105c1:	85 c0                	test   eax,eax
c00105c3:	75 0c                	jne    c00105d1 <CPU::detectFeatures()+0x385>
c00105c5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00105cf:	eb 46                	jmp    c0010617 <CPU::detectFeatures()+0x3cb>
c00105d1:	57                   	push   edi
c00105d2:	57                   	push   edi
c00105d3:	68 2b 1d 02 c0       	push   0xc0021d2b
c00105d8:	55                   	push   ebp
c00105d9:	e8 72 01 ff ff       	call   c0000750 <strcmp>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	85 c0                	test   eax,eax
c00105e3:	74 e0                	je     c00105c5 <CPU::detectFeatures()+0x379>
c00105e5:	56                   	push   esi
c00105e6:	56                   	push   esi
c00105e7:	68 38 1d 02 c0       	push   0xc0021d38
c00105ec:	55                   	push   ebp
c00105ed:	e8 5e 01 ff ff       	call   c0000750 <strcmp>
c00105f2:	83 c4 10             	add    esp,0x10
c00105f5:	85 c0                	test   eax,eax
c00105f7:	74 cc                	je     c00105c5 <CPU::detectFeatures()+0x379>
c00105f9:	51                   	push   ecx
c00105fa:	51                   	push   ecx
c00105fb:	68 45 1d 02 c0       	push   0xc0021d45
c0010600:	55                   	push   ebp
c0010601:	e8 4a 01 ff ff       	call   c0000750 <strcmp>
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	85 c0                	test   eax,eax
c001060b:	74 b8                	je     c00105c5 <CPU::detectFeatures()+0x379>
c001060d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010617:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001061c:	0f 86 be 00 00 00    	jbe    c00106e0 <CPU::detectFeatures()+0x494>
c0010622:	83 ec 0c             	sub    esp,0xc
c0010625:	68 80 00 00 00       	push   0x80
c001062a:	e8 31 fb ff ff       	call   c0010160 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001062f:	83 e0 01             	and    eax,0x1
c0010632:	c1 e0 06             	shl    eax,0x6
c0010635:	89 c2                	mov    edx,eax
c0010637:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001063d:	83 e0 bf             	and    eax,0xffffffbf
c0010640:	09 d0                	or     eax,edx
c0010642:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010648:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001064f:	e8 0c fb ff ff       	call   c0010160 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010654:	83 e0 01             	and    eax,0x1
c0010657:	c1 e0 04             	shl    eax,0x4
c001065a:	89 c2                	mov    edx,eax
c001065c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010662:	83 e0 ef             	and    eax,0xffffffef
c0010665:	09 d0                	or     eax,edx
c0010667:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001066d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010674:	e8 e7 fa ff ff       	call   c0010160 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010679:	89 c2                	mov    edx,eax
c001067b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010681:	c1 e2 07             	shl    edx,0x7
c0010684:	83 e0 7f             	and    eax,0x7f
c0010687:	09 d0                	or     eax,edx
c0010689:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001068f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010696:	e8 f3 fa ff ff       	call   c001018e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001069b:	83 e0 01             	and    eax,0x1
c001069e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00106a5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106ab:	83 e0 f7             	and    eax,0xfffffff7
c00106ae:	09 d0                	or     eax,edx
c00106b0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106b6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00106bd:	e8 cc fa ff ff       	call   c001018e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00106c2:	83 c4 10             	add    esp,0x10
c00106c5:	83 e0 01             	and    eax,0x1
c00106c8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00106cf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106d5:	83 e0 fb             	and    eax,0xfffffffb
c00106d8:	09 d0                	or     eax,edx
c00106da:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106e7:	50                   	push   eax
c00106e8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106ec:	50                   	push   eax
c00106ed:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00106f1:	57                   	push   edi
c00106f2:	8d 74 24 28          	lea    esi,[esp+0x28]
c00106f6:	56                   	push   esi
c00106f7:	6a 01                	push   0x1
c00106f9:	e8 82 f9 ff ff       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010702:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010708:	89 c1                	mov    ecx,eax
c001070a:	83 e2 f0             	and    edx,0xfffffff0
c001070d:	83 e1 0f             	and    ecx,0xf
c0010710:	09 ca                	or     edx,ecx
c0010712:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010718:	89 c2                	mov    edx,eax
c001071a:	c1 ea 04             	shr    edx,0x4
c001071d:	83 e2 0f             	and    edx,0xf
c0010720:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010724:	89 d1                	mov    ecx,edx
c0010726:	83 c4 20             	add    esp,0x20
c0010729:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001072f:	c1 e1 06             	shl    ecx,0x6
c0010732:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010738:	09 ca                	or     edx,ecx
c001073a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010741:	89 c2                	mov    edx,eax
c0010743:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010749:	c1 ea 08             	shr    edx,0x8
c001074c:	83 e1 3f             	and    ecx,0x3f
c001074f:	83 e2 0f             	and    edx,0xf
c0010752:	89 d5                	mov    ebp,edx
c0010754:	83 e5 03             	and    ebp,0x3
c0010757:	c1 e5 06             	shl    ebp,0x6
c001075a:	09 e9                	or     ecx,ebp
c001075c:	89 d5                	mov    ebp,edx
c001075e:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010764:	c1 ed 02             	shr    ebp,0x2
c0010767:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001076d:	83 e1 c0             	and    ecx,0xffffffc0
c0010770:	09 e9                	or     ecx,ebp
c0010772:	89 c5                	mov    ebp,eax
c0010774:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001077a:	c1 ed 08             	shr    ebp,0x8
c001077d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010783:	83 e5 30             	and    ebp,0x30
c0010786:	83 e1 cf             	and    ecx,0xffffffcf
c0010789:	09 e9                	or     ecx,ebp
c001078b:	83 fa 06             	cmp    edx,0x6
c001078e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010794:	74 05                	je     c001079b <CPU::detectFeatures()+0x54f>
c0010796:	83 fa 0f             	cmp    edx,0xf
c0010799:	75 64                	jne    c00107ff <CPU::detectFeatures()+0x5b3>
c001079b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00107a1:	89 c1                	mov    ecx,eax
c00107a3:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00107a9:	c1 e9 10             	shr    ecx,0x10
c00107ac:	c1 e1 04             	shl    ecx,0x4
c00107af:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00107b3:	0f b6 c9             	movzx  ecx,cl
c00107b6:	c1 e1 06             	shl    ecx,0x6
c00107b9:	09 e9                	or     ecx,ebp
c00107bb:	83 fa 0f             	cmp    edx,0xf
c00107be:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00107c5:	75 38                	jne    c00107ff <CPU::detectFeatures()+0x5b3>
c00107c7:	c1 e8 14             	shr    eax,0x14
c00107ca:	83 c0 0f             	add    eax,0xf
c00107cd:	0f b6 c0             	movzx  eax,al
c00107d0:	89 c2                	mov    edx,eax
c00107d2:	c1 e8 02             	shr    eax,0x2
c00107d5:	83 e2 03             	and    edx,0x3
c00107d8:	89 d1                	mov    ecx,edx
c00107da:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00107e0:	c1 e1 06             	shl    ecx,0x6
c00107e3:	83 e2 3f             	and    edx,0x3f
c00107e6:	09 ca                	or     edx,ecx
c00107e8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00107ee:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00107f4:	83 e2 c0             	and    edx,0xffffffc0
c00107f7:	09 d0                	or     eax,edx
c00107f9:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00107ff:	83 ec 0c             	sub    esp,0xc
c0010802:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010808:	83 c8 07             	or     eax,0x7
c001080b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010811:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010815:	50                   	push   eax
c0010816:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001081a:	55                   	push   ebp
c001081b:	57                   	push   edi
c001081c:	56                   	push   esi
c001081d:	68 00 00 00 80       	push   0x80000000
c0010822:	e8 59 f8 ff ff       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010827:	83 c4 20             	add    esp,0x20
c001082a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010832:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010836:	76 1e                	jbe    c0010856 <CPU::detectFeatures()+0x60a>
c0010838:	83 ec 0c             	sub    esp,0xc
c001083b:	50                   	push   eax
c001083c:	55                   	push   ebp
c001083d:	57                   	push   edi
c001083e:	56                   	push   esi
c001083f:	68 01 00 00 80       	push   0x80000001
c0010844:	e8 37 f8 ff ff       	call   c0010080 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010849:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010853:	83 c4 20             	add    esp,0x20
c0010856:	52                   	push   edx
c0010857:	52                   	push   edx
c0010858:	68 51 1d 02 c0       	push   0xc0021d51
c001085d:	53                   	push   ebx
c001085e:	e8 99 c0 ff ff       	call   c000c8fc <Device::setName(char const*)>
c0010863:	83 c4 10             	add    esp,0x10
c0010866:	eb 69                	jmp    c00108d1 <CPU::detectFeatures()+0x685>
c0010868:	50                   	push   eax
c0010869:	50                   	push   eax
c001086a:	68 b6 1c 02 c0       	push   0xc0021cb6
c001086f:	55                   	push   ebp
c0010870:	e8 cb fd fe ff       	call   c0000640 <strcpy>
c0010875:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001087f:	e8 3f f9 fe ff       	call   c00001c3 <is486>
c0010884:	83 c4 10             	add    esp,0x10
c0010887:	85 c0                	test   eax,eax
c0010889:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001088f:	74 1f                	je     c00108b0 <CPU::detectFeatures()+0x664>
c0010891:	83 c8 07             	or     eax,0x7
c0010894:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001089a:	0f 20 c0             	mov    eax,cr0
c001089d:	83 e0 14             	and    eax,0x14
c00108a0:	83 f8 04             	cmp    eax,0x4
c00108a3:	75 10                	jne    c00108b5 <CPU::detectFeatures()+0x669>
c00108a5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108ab:	83 e0 fd             	and    eax,0xfffffffd
c00108ae:	eb 1b                	jmp    c00108cb <CPU::detectFeatures()+0x67f>
c00108b0:	83 e0 f8             	and    eax,0xfffffff8
c00108b3:	eb df                	jmp    c0010894 <CPU::detectFeatures()+0x648>
c00108b5:	e8 e4 f8 fe ff       	call   c000019e <hasLegacyFPU>
c00108ba:	83 e0 01             	and    eax,0x1
c00108bd:	8d 14 00             	lea    edx,[eax+eax*1]
c00108c0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108c6:	83 e0 fd             	and    eax,0xfffffffd
c00108c9:	09 d0                	or     eax,edx
c00108cb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108d1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00108d8:	74 17                	je     c00108f1 <CPU::detectFeatures()+0x6a5>
c00108da:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00108e0:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00108e6:	83 c8 10             	or     eax,0x10
c00108e9:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00108ef:	eb 20                	jmp    c0010911 <CPU::detectFeatures()+0x6c5>
c00108f1:	e8 a8 f8 fe ff       	call   c000019e <hasLegacyFPU>
c00108f6:	83 e0 01             	and    eax,0x1
c00108f9:	8d 14 00             	lea    edx,[eax+eax*1]
c00108fc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010902:	83 e0 fd             	and    eax,0xfffffffd
c0010905:	09 d0                	or     eax,edx
c0010907:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001090d:	a8 02                	test   al,0x2
c001090f:	75 c9                	jne    c00108da <CPU::detectFeatures()+0x68e>
c0010911:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010918:	83 c4 2c             	add    esp,0x2c
c001091b:	5b                   	pop    ebx
c001091c:	5e                   	pop    esi
c001091d:	5f                   	pop    edi
c001091e:	5d                   	pop    ebp
c001091f:	c3                   	ret    

c0010920 <CPU::setupSMEP()>:
c0010920:	0f 20 e0             	mov    eax,cr4
c0010923:	0d 00 00 10 00       	or     eax,0x100000
c0010928:	0f 22 e0             	mov    cr4,eax
c001092b:	c3                   	ret    

c001092c <CPU::setupUMIP()>:
c001092c:	0f 20 e0             	mov    eax,cr4
c001092f:	80 cc 08             	or     ah,0x8
c0010932:	0f 22 e0             	mov    cr4,eax
c0010935:	c3                   	ret    

c0010936 <CPU::setupTSC()>:
c0010936:	0f 20 e0             	mov    eax,cr4
c0010939:	83 c8 04             	or     eax,0x4
c001093c:	0f 22 e0             	mov    cr4,eax
c001093f:	c3                   	ret    

c0010940 <CPU::setupLargePages()>:
c0010940:	0f 20 e0             	mov    eax,cr4
c0010943:	83 c8 10             	or     eax,0x10
c0010946:	0f 22 e0             	mov    cr4,eax
c0010949:	c3                   	ret    

c001094a <CPU::setupPAT()>:
c001094a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001094f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010956:	74 2c                	je     c0010984 <CPU::setupPAT()+0x3a>
c0010958:	53                   	push   ebx
c0010959:	83 ec 10             	sub    esp,0x10
c001095c:	68 77 02 00 00       	push   0x277
c0010961:	50                   	push   eax
c0010962:	e8 59 67 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010967:	83 e2 f8             	and    edx,0xfffffff8
c001096a:	83 ca 01             	or     edx,0x1
c001096d:	52                   	push   edx
c001096e:	50                   	push   eax
c001096f:	68 77 02 00 00       	push   0x277
c0010974:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001097a:	e8 6d 67 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c001097f:	83 c4 28             	add    esp,0x28
c0010982:	5b                   	pop    ebx
c0010983:	c3                   	ret    
c0010984:	c3                   	ret    
c0010985:	90                   	nop

c0010986 <CPU::setupMTRR()>:
c0010986:	c3                   	ret    
c0010987:	90                   	nop

c0010988 <CPU::setupGlobalPages()>:
c0010988:	0f 20 e0             	mov    eax,cr4
c001098b:	0c 80                	or     al,0x80
c001098d:	0f 22 e0             	mov    cr4,eax
c0010990:	c3                   	ret    
c0010991:	90                   	nop

c0010992 <CPU::allowUsermodeDataAccess()>:
c0010992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010996:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001099d:	74 03                	je     c00109a2 <CPU::allowUsermodeDataAccess()+0x10>
c001099f:	0f 01 cb             	stac   
c00109a2:	c3                   	ret    
c00109a3:	90                   	nop

c00109a4 <CPU::prohibitUsermodeDataAccess()>:
c00109a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109a8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00109af:	74 03                	je     c00109b4 <CPU::prohibitUsermodeDataAccess()+0x10>
c00109b1:	0f 01 ca             	clac   
c00109b4:	c3                   	ret    
c00109b5:	90                   	nop

c00109b6 <CPU::setupSMAP()>:
c00109b6:	0f 20 e0             	mov    eax,cr4
c00109b9:	0d 00 00 20 00       	or     eax,0x200000
c00109be:	0f 22 e0             	mov    cr4,eax
c00109c1:	eb e1                	jmp    c00109a4 <CPU::prohibitUsermodeDataAccess()>
c00109c3:	90                   	nop

c00109c4 <CPU::setupFeatures()>:
c00109c4:	53                   	push   ebx
c00109c5:	83 ec 08             	sub    esp,0x8
c00109c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109cc:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00109d3:	74 18                	je     c00109ed <CPU::setupFeatures()+0x29>
c00109d5:	83 ec 0c             	sub    esp,0xc
c00109d8:	68 5d 1d 02 c0       	push   0xc0021d5d
c00109dd:	e8 63 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109e5:	e8 42 ff ff ff       	call   c001092c <CPU::setupUMIP()>
c00109ea:	83 c4 10             	add    esp,0x10
c00109ed:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00109f4:	74 18                	je     c0010a0e <CPU::setupFeatures()+0x4a>
c00109f6:	83 ec 0c             	sub    esp,0xc
c00109f9:	68 67 1d 02 c0       	push   0xc0021d67
c00109fe:	e8 42 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a06:	e8 2b ff ff ff       	call   c0010936 <CPU::setupTSC()>
c0010a0b:	83 c4 10             	add    esp,0x10
c0010a0e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010a15:	74 18                	je     c0010a2f <CPU::setupFeatures()+0x6b>
c0010a17:	83 ec 0c             	sub    esp,0xc
c0010a1a:	68 70 1d 02 c0       	push   0xc0021d70
c0010a1f:	e8 21 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a27:	e8 14 ff ff ff       	call   c0010940 <CPU::setupLargePages()>
c0010a2c:	83 c4 10             	add    esp,0x10
c0010a2f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010a36:	74 18                	je     c0010a50 <CPU::setupFeatures()+0x8c>
c0010a38:	83 ec 0c             	sub    esp,0xc
c0010a3b:	68 79 1d 02 c0       	push   0xc0021d79
c0010a40:	e8 00 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a48:	e8 3b ff ff ff       	call   c0010988 <CPU::setupGlobalPages()>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010a57:	74 18                	je     c0010a71 <CPU::setupFeatures()+0xad>
c0010a59:	83 ec 0c             	sub    esp,0xc
c0010a5c:	68 8b 1d 02 c0       	push   0xc0021d8b
c0010a61:	e8 df 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a69:	e8 dc fe ff ff       	call   c001094a <CPU::setupPAT()>
c0010a6e:	83 c4 10             	add    esp,0x10
c0010a71:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010a78:	74 11                	je     c0010a8b <CPU::setupFeatures()+0xc7>
c0010a7a:	c7 44 24 10 94 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d94
c0010a82:	83 c4 08             	add    esp,0x8
c0010a85:	5b                   	pop    ebx
c0010a86:	e9 ba 9e ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010a8b:	83 c4 08             	add    esp,0x8
c0010a8e:	5b                   	pop    ebx
c0010a8f:	c3                   	ret    

c0010a90 <CPU::open(int, int, void*)>:
c0010a90:	55                   	push   ebp
c0010a91:	57                   	push   edi
c0010a92:	56                   	push   esi
c0010a93:	53                   	push   ebx
c0010a94:	83 ec 18             	sub    esp,0x18
c0010a97:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a9b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010a9f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010aa3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010aa9:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010aaf:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010ab5:	50                   	push   eax
c0010ab6:	e8 03 69 ff ff       	call   c00073be <GDT::setup()>
c0010abb:	83 c4 0c             	add    esp,0xc
c0010abe:	6a 00                	push   0x0
c0010ac0:	68 ef be ad de       	push   0xdeadbeef
c0010ac5:	55                   	push   ebp
c0010ac6:	e8 bd 84 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010acb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010ace:	e8 95 84 ff ff       	call   c0008f68 <TSS::flush()>
c0010ad3:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010ad9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010adc:	e8 41 6b ff ff       	call   c0007622 <IDT::setup()>
c0010ae1:	b8 00 04 00 00       	mov    eax,0x400
c0010ae6:	0f 23 f8             	mov    db7,eax
c0010ae9:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010af3:	e8 c7 72 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010af8:	83 c4 10             	add    esp,0x10
c0010afb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010b01:	85 f6                	test   esi,esi
c0010b03:	89 38                	mov    DWORD PTR [eax],edi
c0010b05:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010b0b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010b0e:	74 10                	je     c0010b20 <CPU::open(int, int, void*)+0x90>
c0010b10:	50                   	push   eax
c0010b11:	50                   	push   eax
c0010b12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010b18:	56                   	push   esi
c0010b19:	e8 90 8d ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010b1e:	eb 0d                	jmp    c0010b2d <CPU::open(int, int, void*)+0x9d>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	68 9e 1d 02 c0       	push   0xc0021d9e
c0010b28:	e8 74 08 00 00       	call   c00113a1 <KePanic(char const*)>
c0010b2d:	83 c4 10             	add    esp,0x10
c0010b30:	83 ec 0c             	sub    esp,0xc
c0010b33:	68 ac 1d 02 c0       	push   0xc0021dac
c0010b38:	e8 8e 01 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0010b3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b40:	e8 07 f7 ff ff       	call   c001024c <CPU::detectFeatures()>
c0010b45:	c7 04 24 cf 1d 02 c0 	mov    DWORD PTR [esp],0xc0021dcf
c0010b4c:	e8 7a 01 00 00       	call   c0010ccb <KeSetBootMessage(char const*)>
c0010b51:	e8 df 71 00 00       	call   c0017d35 <HalInitialise()>
c0010b56:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010b5b:	83 e0 10             	and    eax,0x10
c0010b5e:	83 f8 01             	cmp    eax,0x1
c0010b61:	19 c0                	sbb    eax,eax
c0010b63:	83 e0 46             	and    eax,0x46
c0010b66:	83 c0 1e             	add    eax,0x1e
c0010b69:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b6c:	e8 28 d6 ff ff       	call   c000e199 <setupTimer(int)>
c0010b71:	83 c4 10             	add    esp,0x10
c0010b74:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010b7a:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010b81:	74 0c                	je     c0010b8f <CPU::open(int, int, void*)+0xff>
c0010b83:	83 ec 0c             	sub    esp,0xc
c0010b86:	53                   	push   ebx
c0010b87:	e8 38 fe ff ff       	call   c00109c4 <CPU::setupFeatures()>
c0010b8c:	83 c4 10             	add    esp,0x10
c0010b8f:	83 c4 0c             	add    esp,0xc
c0010b92:	31 c0                	xor    eax,eax
c0010b94:	5b                   	pop    ebx
c0010b95:	5e                   	pop    esi
c0010b96:	5f                   	pop    edi
c0010b97:	5d                   	pop    ebp
c0010b98:	c3                   	ret    

c0010b99 <KeInitialiseAtexit()>:
c0010b99:	83 ec 10             	sub    esp,0x10
c0010b9c:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010ba6:	6a 60                	push   0x60
c0010ba8:	6a 00                	push   0x0
c0010baa:	68 20 8e 02 c0       	push   0xc0028e20
c0010baf:	e8 3c f9 fe ff       	call   c00004f0 <memset>
c0010bb4:	83 c4 1c             	add    esp,0x1c
c0010bb7:	c3                   	ret    

c0010bb8 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010bb8:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010bbd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bc1:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bcc:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010bd3:	40                   	inc    eax
c0010bd4:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010bd9:	83 f8 17             	cmp    eax,0x17
c0010bdc:	7e 0d                	jle    c0010beb <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010bde:	c7 44 24 04 10 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021e10
c0010be6:	e9 b6 07 00 00       	jmp    c00113a1 <KePanic(char const*)>
c0010beb:	c3                   	ret    

c0010bec <KeExecuteAtexit()>:
c0010bec:	53                   	push   ebx
c0010bed:	31 db                	xor    ebx,ebx
c0010bef:	83 ec 08             	sub    esp,0x8
c0010bf2:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010bf8:	7e 50                	jle    c0010c4a <KeExecuteAtexit()+0x5e>
c0010bfa:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010c01:	85 c0                	test   eax,eax
c0010c03:	74 42                	je     c0010c47 <KeExecuteAtexit()+0x5b>
c0010c05:	51                   	push   ecx
c0010c06:	50                   	push   eax
c0010c07:	53                   	push   ebx
c0010c08:	68 29 1e 02 c0       	push   0xc0021e29
c0010c0d:	e8 33 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c12:	58                   	pop    eax
c0010c13:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010c1a:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010c21:	c7 04 24 4b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e4b
c0010c28:	e8 18 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c2d:	c7 04 24 ab 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fab
c0010c34:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010c3f:	e8 01 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	43                   	inc    ebx
c0010c48:	eb a8                	jmp    c0010bf2 <KeExecuteAtexit()+0x6>
c0010c4a:	83 c4 08             	add    esp,0x8
c0010c4d:	5b                   	pop    ebx
c0010c4e:	c3                   	ret    

c0010c4f <KeDisplaySplashScreen()>:
c0010c4f:	55                   	push   ebp
c0010c50:	bd 05 00 00 00       	mov    ebp,0x5
c0010c55:	57                   	push   edi
c0010c56:	bf 0a 00 00 00       	mov    edi,0xa
c0010c5b:	56                   	push   esi
c0010c5c:	31 f6                	xor    esi,esi
c0010c5e:	53                   	push   ebx
c0010c5f:	31 db                	xor    ebx,ebx
c0010c61:	83 ec 0c             	sub    esp,0xc
c0010c64:	0f b6 96 00 32 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdce00]
c0010c6b:	89 d0                	mov    eax,edx
c0010c6d:	85 d2                	test   edx,edx
c0010c6f:	74 52                	je     c0010cc3 <KeDisplaySplashScreen()+0x74>
c0010c71:	80 bb 36 32 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcdca],0xdb
c0010c78:	75 13                	jne    c0010c8d <KeDisplaySplashScreen()+0x3e>
c0010c7a:	0f b6 8b 35 32 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcdcb]
c0010c81:	83 e1 fe             	and    ecx,0xfffffffe
c0010c84:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010c8a:	75 01                	jne    c0010c8d <KeDisplaySplashScreen()+0x3e>
c0010c8c:	47                   	inc    edi
c0010c8d:	83 fa 0d             	cmp    edx,0xd
c0010c90:	74 28                	je     c0010cba <KeDisplaySplashScreen()+0x6b>
c0010c92:	83 fa 0a             	cmp    edx,0xa
c0010c95:	75 0a                	jne    c0010ca1 <KeDisplaySplashScreen()+0x52>
c0010c97:	45                   	inc    ebp
c0010c98:	bf 0a 00 00 00       	mov    edi,0xa
c0010c9d:	31 db                	xor    ebx,ebx
c0010c9f:	eb 19                	jmp    c0010cba <KeDisplaySplashScreen()+0x6b>
c0010ca1:	83 ec 0c             	sub    esp,0xc
c0010ca4:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ca7:	55                   	push   ebp
c0010ca8:	0f be c0             	movsx  eax,al
c0010cab:	52                   	push   edx
c0010cac:	43                   	inc    ebx
c0010cad:	6a 00                	push   0x0
c0010caf:	6a 0e                	push   0xe
c0010cb1:	50                   	push   eax
c0010cb2:	e8 fd 7c 00 00       	call   c00189b4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010cb7:	83 c4 20             	add    esp,0x20
c0010cba:	46                   	inc    esi
c0010cbb:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010cc1:	75 a1                	jne    c0010c64 <KeDisplaySplashScreen()+0x15>
c0010cc3:	83 c4 0c             	add    esp,0xc
c0010cc6:	5b                   	pop    ebx
c0010cc7:	5e                   	pop    esi
c0010cc8:	5f                   	pop    edi
c0010cc9:	5d                   	pop    ebp
c0010cca:	c3                   	ret    

c0010ccb <KeSetBootMessage(char const*)>:
c0010ccb:	57                   	push   edi
c0010ccc:	56                   	push   esi
c0010ccd:	53                   	push   ebx
c0010cce:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010cd4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010cdb:	68 9e 00 00 00       	push   0x9e
c0010ce0:	6a 00                	push   0x0
c0010ce2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010ce6:	56                   	push   esi
c0010ce7:	e8 04 f8 fe ff       	call   c00004f0 <memset>
c0010cec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cef:	e8 7c f8 fe ff       	call   c0000570 <strlen>
c0010cf4:	ba 50 00 00 00       	mov    edx,0x50
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	29 c2                	sub    edx,eax
c0010cfe:	31 c9                	xor    ecx,ecx
c0010d00:	83 e2 fe             	and    edx,0xfffffffe
c0010d03:	01 f2                	add    edx,esi
c0010d05:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010d0a:	84 c0                	test   al,al
c0010d0c:	74 0a                	je     c0010d18 <KeSetBootMessage(char const*)+0x4d>
c0010d0e:	80 cc 0f             	or     ah,0xf
c0010d11:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010d15:	41                   	inc    ecx
c0010d16:	eb ed                	jmp    c0010d05 <KeSetBootMessage(char const*)+0x3a>
c0010d18:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010d1d:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010d22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d24:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010d2a:	5b                   	pop    ebx
c0010d2b:	5e                   	pop    esi
c0010d2c:	5f                   	pop    edi
c0010d2d:	c3                   	ret    
c0010d2e:	66 90                	xchg   ax,ax

c0010d30 <Krnl::handlePowerButton()>:
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	e8 c4 06 00 00       	call   c00113fc <KeHandlePowerButton()>
c0010d38:	90                   	nop
c0010d39:	83 c4 0c             	add    esp,0xc
c0010d3c:	c3                   	ret    
c0010d3d:	8d 76 00             	lea    esi,[esi+0x0]

c0010d40 <Krnl::handleSleepButton()>:
c0010d40:	83 ec 0c             	sub    esp,0xc
c0010d43:	e8 e9 06 00 00       	call   c0011431 <KeHandleSleepButton()>
c0010d48:	90                   	nop
c0010d49:	83 c4 0c             	add    esp,0xc
c0010d4c:	c3                   	ret    
c0010d4d:	90                   	nop

c0010d4e <EnvVarContainer::getEnv(char const*)>:
c0010d4e:	57                   	push   edi
c0010d4f:	56                   	push   esi
c0010d50:	53                   	push   ebx
c0010d51:	31 db                	xor    ebx,ebx
c0010d53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d57:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010d59:	7e 2b                	jle    c0010d86 <EnvVarContainer::getEnv(char const*)+0x38>
c0010d5b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010d62:	50                   	push   eax
c0010d63:	50                   	push   eax
c0010d64:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d67:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010d6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d6e:	e8 dd f9 fe ff       	call   c0000750 <strcmp>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	85 c0                	test   eax,eax
c0010d78:	75 09                	jne    c0010d83 <EnvVarContainer::getEnv(char const*)+0x35>
c0010d7a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d7d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010d81:	eb 05                	jmp    c0010d88 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010d83:	43                   	inc    ebx
c0010d84:	eb d1                	jmp    c0010d57 <EnvVarContainer::getEnv(char const*)+0x9>
c0010d86:	31 c0                	xor    eax,eax
c0010d88:	5b                   	pop    ebx
c0010d89:	5e                   	pop    esi
c0010d8a:	5f                   	pop    edi
c0010d8b:	c3                   	ret    

c0010d8c <EnvVarContainer::setEnv(char const*, char const*)>:
c0010d8c:	55                   	push   ebp
c0010d8d:	57                   	push   edi
c0010d8e:	56                   	push   esi
c0010d8f:	53                   	push   ebx
c0010d90:	83 ec 28             	sub    esp,0x28
c0010d93:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010d97:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010d9b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010d9f:	56                   	push   esi
c0010da0:	e8 cb f7 fe ff       	call   c0000570 <strlen>
c0010da5:	40                   	inc    eax
c0010da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010da9:	e8 08 6d ff ff       	call   c0007ab6 <malloc>
c0010dae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010db5:	e8 b6 f7 fe ff       	call   c0000570 <strlen>
c0010dba:	40                   	inc    eax
c0010dbb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dbe:	e8 f3 6c ff ff       	call   c0007ab6 <malloc>
c0010dc3:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010dca:	e8 a1 f7 fe ff       	call   c0000570 <strlen>
c0010dcf:	83 c4 0c             	add    esp,0xc
c0010dd2:	40                   	inc    eax
c0010dd3:	50                   	push   eax
c0010dd4:	6a 00                	push   0x0
c0010dd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010dda:	e8 11 f7 fe ff       	call   c00004f0 <memset>
c0010ddf:	89 34 24             	mov    DWORD PTR [esp],esi
c0010de2:	e8 89 f7 fe ff       	call   c0000570 <strlen>
c0010de7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010deb:	8d 48 01             	lea    ecx,[eax+0x1]
c0010dee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010df0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010df3:	89 de                	mov    esi,ebx
c0010df5:	e8 76 f7 fe ff       	call   c0000570 <strlen>
c0010dfa:	83 c4 0c             	add    esp,0xc
c0010dfd:	40                   	inc    eax
c0010dfe:	50                   	push   eax
c0010dff:	6a 00                	push   0x0
c0010e01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e05:	e8 e6 f6 fe ff       	call   c00004f0 <memset>
c0010e0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e0d:	e8 5e f7 fe ff       	call   c0000570 <strlen>
c0010e12:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010e16:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e1e:	40                   	inc    eax
c0010e1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e22:	c1 e0 03             	shl    eax,0x3
c0010e25:	5a                   	pop    edx
c0010e26:	59                   	pop    ecx
c0010e27:	50                   	push   eax
c0010e28:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010e2b:	e8 72 6c ff ff       	call   c0007aa2 <realloc>
c0010e30:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e37:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e3a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e3e:	b9 08 00 00 00       	mov    ecx,0x8
c0010e43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e45:	83 c4 2c             	add    esp,0x2c
c0010e48:	5b                   	pop    ebx
c0010e49:	5e                   	pop    esi
c0010e4a:	5f                   	pop    edi
c0010e4b:	5d                   	pop    ebp
c0010e4c:	c3                   	ret    
c0010e4d:	90                   	nop

c0010e4e <EnvVarContainer::deleteEnv(char const*)>:
c0010e4e:	c3                   	ret    
c0010e4f:	90                   	nop

c0010e50 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010e50:	55                   	push   ebp
c0010e51:	57                   	push   edi
c0010e52:	56                   	push   esi
c0010e53:	53                   	push   ebx
c0010e54:	81 ec 38 01 00 00    	sub    esp,0x138
c0010e5a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010e61:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010e68:	68 14 01 00 00       	push   0x114
c0010e6d:	e8 44 6c ff ff       	call   c0007ab6 <malloc>
c0010e72:	83 c4 0c             	add    esp,0xc
c0010e75:	89 c3                	mov    ebx,eax
c0010e77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010e7a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010e81:	50                   	push   eax
c0010e82:	e8 c7 a9 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0010e87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e8a:	e8 4b ad ff ff       	call   c000bbda <File::exists()>
c0010e8f:	83 c4 10             	add    esp,0x10
c0010e92:	84 c0                	test   al,al
c0010e94:	75 31                	jne    c0010ec7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010e96:	50                   	push   eax
c0010e97:	50                   	push   eax
c0010e98:	6a 12                	push   0x12
c0010e9a:	53                   	push   ebx
c0010e9b:	e8 76 aa ff ff       	call   c000b916 <File::open(FileOpenMode)>
c0010ea0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ea2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010ea5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ea8:	e8 c3 f6 fe ff       	call   c0000570 <strlen>
c0010ead:	5a                   	pop    edx
c0010eae:	31 d2                	xor    edx,edx
c0010eb0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010eb4:	51                   	push   ecx
c0010eb5:	56                   	push   esi
c0010eb6:	52                   	push   edx
c0010eb7:	50                   	push   eax
c0010eb8:	53                   	push   ebx
c0010eb9:	ff d7                	call   edi
c0010ebb:	83 c4 14             	add    esp,0x14
c0010ebe:	53                   	push   ebx
c0010ebf:	e8 b0 aa ff ff       	call   c000b974 <File::close()>
c0010ec4:	83 c4 10             	add    esp,0x10
c0010ec7:	56                   	push   esi
c0010ec8:	31 f6                	xor    esi,esi
c0010eca:	68 00 01 00 00       	push   0x100
c0010ecf:	6a 00                	push   0x0
c0010ed1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010ed5:	50                   	push   eax
c0010ed6:	e8 15 f6 fe ff       	call   c00004f0 <memset>
c0010edb:	5f                   	pop    edi
c0010edc:	58                   	pop    eax
c0010edd:	6a 01                	push   0x1
c0010edf:	53                   	push   ebx
c0010ee0:	e8 31 aa ff ff       	call   c000b916 <File::open(FileOpenMode)>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ef0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ef8:	83 ec 0c             	sub    esp,0xc
c0010efb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010efd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010f01:	51                   	push   ecx
c0010f02:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010f06:	52                   	push   edx
c0010f07:	6a 00                	push   0x0
c0010f09:	6a 01                	push   0x1
c0010f0b:	53                   	push   ebx
c0010f0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010f0f:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010f14:	83 c4 20             	add    esp,0x20
c0010f17:	89 c2                	mov    edx,eax
c0010f19:	85 c0                	test   eax,eax
c0010f1b:	0f 84 36 01 00 00    	je     c0011057 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010f21:	83 f8 0d             	cmp    eax,0xd
c0010f24:	0f 84 22 01 00 00    	je     c001104c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f2a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010f2f:	0f 84 f0 00 00 00    	je     c0011025 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010f35:	83 f8 0a             	cmp    eax,0xa
c0010f38:	74 13                	je     c0010f4d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f3a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f3f:	74 0c                	je     c0010f4d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f41:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f47:	0f 8e f6 00 00 00    	jle    c0011043 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010f4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f51:	83 ec 0c             	sub    esp,0xc
c0010f54:	8d 78 01             	lea    edi,[eax+0x1]
c0010f57:	57                   	push   edi
c0010f58:	e8 59 6b ff ff       	call   c0007ab6 <malloc>
c0010f5d:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010f61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010f65:	8d 56 04             	lea    edx,[esi+0x4]
c0010f68:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010f6f:	e8 42 6b ff ff       	call   c0007ab6 <malloc>
c0010f74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010f78:	83 c4 0c             	add    esp,0xc
c0010f7b:	57                   	push   edi
c0010f7c:	6a 00                	push   0x0
c0010f7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010f82:	e8 69 f5 fe ff       	call   c00004f0 <memset>
c0010f87:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f8b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f8f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f95:	83 c4 0c             	add    esp,0xc
c0010f98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f9c:	52                   	push   edx
c0010f9d:	6a 00                	push   0x0
c0010f9f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fa3:	e8 48 f5 fe ff       	call   c00004f0 <memset>
c0010fa8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010fac:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010fb0:	89 34 24             	mov    DWORD PTR [esp],esi
c0010fb3:	e8 b8 f5 fe ff       	call   c0000570 <strlen>
c0010fb8:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010fbc:	89 c1                	mov    ecx,eax
c0010fbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fc0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010fc3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010fc6:	40                   	inc    eax
c0010fc7:	83 c4 10             	add    esp,0x10
c0010fca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010fcd:	85 d2                	test   edx,edx
c0010fcf:	75 0c                	jne    c0010fdd <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010fd1:	83 ec 0c             	sub    esp,0xc
c0010fd4:	6a 08                	push   0x8
c0010fd6:	e8 db 6a ff ff       	call   c0007ab6 <malloc>
c0010fdb:	eb 0c                	jmp    c0010fe9 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010fdd:	c1 e0 03             	shl    eax,0x3
c0010fe0:	51                   	push   ecx
c0010fe1:	51                   	push   ecx
c0010fe2:	50                   	push   eax
c0010fe3:	52                   	push   edx
c0010fe4:	e8 b9 6a ff ff       	call   c0007aa2 <realloc>
c0010fe9:	83 c4 10             	add    esp,0x10
c0010fec:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010fef:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010ff2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010ff5:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ff9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010ffd:	b9 08 00 00 00       	mov    ecx,0x8
c0011002:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011004:	31 f6                	xor    esi,esi
c0011006:	50                   	push   eax
c0011007:	68 00 01 00 00       	push   0x100
c001100c:	6a 00                	push   0x0
c001100e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011012:	50                   	push   eax
c0011013:	e8 d8 f4 fe ff       	call   c00004f0 <memset>
c0011018:	83 c4 10             	add    esp,0x10
c001101b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011023:	eb 27                	jmp    c001104c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011025:	83 f8 3d             	cmp    eax,0x3d
c0011028:	74 1e                	je     c0011048 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001102a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011030:	7f 07                	jg     c0011039 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011032:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011036:	46                   	inc    esi
c0011037:	eb 13                	jmp    c001104c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011039:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011041:	eb 09                	jmp    c001104c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011043:	83 f8 3d             	cmp    eax,0x3d
c0011046:	75 ea                	jne    c0011032 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011048:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001104c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011051:	0f 85 99 fe ff ff    	jne    c0010ef0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011057:	83 ec 0c             	sub    esp,0xc
c001105a:	53                   	push   ebx
c001105b:	e8 14 a9 ff ff       	call   c000b974 <File::close()>
c0011060:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011062:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011065:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011068:	81 c4 3c 01 00 00    	add    esp,0x13c
c001106e:	5b                   	pop    ebx
c001106f:	5e                   	pop    esi
c0011070:	5f                   	pop    edi
c0011071:	5d                   	pop    ebp
c0011072:	c3                   	ret    
c0011073:	90                   	nop

c0011074 <EnvVarContainer::__loadSystem()>:
c0011074:	83 ec 10             	sub    esp,0x10
c0011077:	68 60 33 02 c0       	push   0xc0023360
c001107c:	68 50 1e 02 c0       	push   0xc0021e50
c0011081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011085:	e8 c6 fd ff ff       	call   c0010e50 <EnvVarContainer::loadFrom(char const*, char const*)>
c001108a:	83 c4 1c             	add    esp,0x1c
c001108d:	c3                   	ret    

c001108e <EnvVarContainer::__loadUser()>:
c001108e:	c3                   	ret    
c001108f:	90                   	nop

c0011090 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011094:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001109a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001109e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00110a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00110a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00110b0:	90                   	nop
c00110b1:	c3                   	ret    

c00110b2 <EnvVarContainer::~EnvVarContainer()>:
c00110b2:	83 ec 0c             	sub    esp,0xc
c00110b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110bc:	85 c0                	test   eax,eax
c00110be:	74 1d                	je     c00110dd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00110c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00110c6:	85 c0                	test   eax,eax
c00110c8:	74 13                	je     c00110dd <EnvVarContainer::~EnvVarContainer()+0x2b>
c00110ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d1:	83 ec 0c             	sub    esp,0xc
c00110d4:	50                   	push   eax
c00110d5:	e8 ec 69 ff ff       	call   c0007ac6 <free>
c00110da:	83 c4 10             	add    esp,0x10
c00110dd:	90                   	nop
c00110de:	83 c4 0c             	add    esp,0xc
c00110e1:	c3                   	ret    

c00110e2 <KeGetEnv(Process*, char const*)>:
c00110e2:	53                   	push   ebx
c00110e3:	83 ec 08             	sub    esp,0x8
c00110e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110ee:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c00110f4:	74 04                	je     c00110fa <KeGetEnv(Process*, char const*)+0x18>
c00110f6:	85 c0                	test   eax,eax
c00110f8:	75 0b                	jne    c0011105 <KeGetEnv(Process*, char const*)+0x23>
c00110fa:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110ff:	85 c0                	test   eax,eax
c0011101:	75 19                	jne    c001111c <KeGetEnv(Process*, char const*)+0x3a>
c0011103:	eb 27                	jmp    c001112c <KeGetEnv(Process*, char const*)+0x4a>
c0011105:	52                   	push   edx
c0011106:	52                   	push   edx
c0011107:	53                   	push   ebx
c0011108:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001110e:	e8 3b fc ff ff       	call   c0010d4e <EnvVarContainer::getEnv(char const*)>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	85 c0                	test   eax,eax
c0011118:	75 28                	jne    c0011142 <KeGetEnv(Process*, char const*)+0x60>
c001111a:	eb de                	jmp    c00110fa <KeGetEnv(Process*, char const*)+0x18>
c001111c:	52                   	push   edx
c001111d:	52                   	push   edx
c001111e:	53                   	push   ebx
c001111f:	50                   	push   eax
c0011120:	e8 29 fc ff ff       	call   c0010d4e <EnvVarContainer::getEnv(char const*)>
c0011125:	83 c4 10             	add    esp,0x10
c0011128:	85 c0                	test   eax,eax
c001112a:	75 16                	jne    c0011142 <KeGetEnv(Process*, char const*)+0x60>
c001112c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011130:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011135:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011139:	83 c4 08             	add    esp,0x8
c001113c:	5b                   	pop    ebx
c001113d:	e9 0c fc ff ff       	jmp    c0010d4e <EnvVarContainer::getEnv(char const*)>
c0011142:	83 c4 08             	add    esp,0x8
c0011145:	5b                   	pop    ebx
c0011146:	c3                   	ret    

c0011147 <KeSetEnvSystem(char const*, char const*)>:
c0011147:	83 ec 10             	sub    esp,0x10
c001114a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001114e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011152:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011158:	e8 2f fc ff ff       	call   c0010d8c <EnvVarContainer::setEnv(char const*, char const*)>
c001115d:	83 c4 1c             	add    esp,0x1c
c0011160:	c3                   	ret    

c0011161 <KeSetEnvUser(char const*, char const*)>:
c0011161:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011166:	85 c0                	test   eax,eax
c0011168:	74 15                	je     c001117f <KeSetEnvUser(char const*, char const*)+0x1e>
c001116a:	83 ec 10             	sub    esp,0x10
c001116d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011175:	50                   	push   eax
c0011176:	e8 11 fc ff ff       	call   c0010d8c <EnvVarContainer::setEnv(char const*, char const*)>
c001117b:	83 c4 1c             	add    esp,0x1c
c001117e:	c3                   	ret    
c001117f:	c3                   	ret    

c0011180 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011184:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001118a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001118e:	e9 f9 fb ff ff       	jmp    c0010d8c <EnvVarContainer::setEnv(char const*, char const*)>

c0011193 <KeDeleteEnvSystem(char const*)>:
c0011193:	c3                   	ret    

c0011194 <KeDeleteEnvUser(char const*)>:
c0011194:	c3                   	ret    

c0011195 <KeDeleteEnvProcess(Process*, char const*)>:
c0011195:	c3                   	ret    

c0011196 <KeNewProcessEnv(Process*)>:
c0011196:	83 ec 28             	sub    esp,0x28
c0011199:	6a 0c                	push   0xc
c001119b:	e8 16 69 ff ff       	call   c0007ab6 <malloc>
c00111a0:	5a                   	pop    edx
c00111a1:	59                   	pop    ecx
c00111a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111a6:	50                   	push   eax
c00111a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111ab:	e8 e0 fe ff ff       	call   c0011090 <EnvVarContainer::EnvVarContainer(Process*)>
c00111b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111b4:	83 c4 2c             	add    esp,0x2c
c00111b7:	c3                   	ret    

c00111b8 <KeCopyProcessEnv(Process*, Process*)>:
c00111b8:	57                   	push   edi
c00111b9:	56                   	push   esi
c00111ba:	53                   	push   ebx
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	83 ec 0c             	sub    esp,0xc
c00111c2:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00111c8:	6a 0c                	push   0xc
c00111ca:	e8 e7 68 ff ff       	call   c0007ab6 <malloc>
c00111cf:	89 c3                	mov    ebx,eax
c00111d1:	58                   	pop    eax
c00111d2:	5a                   	pop    edx
c00111d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d7:	53                   	push   ebx
c00111d8:	e8 b3 fe ff ff       	call   c0011090 <EnvVarContainer::EnvVarContainer(Process*)>
c00111dd:	8b 07                	mov    eax,DWORD PTR [edi]
c00111df:	89 03                	mov    DWORD PTR [ebx],eax
c00111e1:	c1 e0 03             	shl    eax,0x3
c00111e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00111e7:	e8 ca 68 ff ff       	call   c0007ab6 <malloc>
c00111ec:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00111ef:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00111f1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00111f4:	c1 e1 03             	shl    ecx,0x3
c00111f7:	89 c7                	mov    edi,eax
c00111f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111fb:	83 c4 10             	add    esp,0x10
c00111fe:	89 d8                	mov    eax,ebx
c0011200:	5b                   	pop    ebx
c0011201:	5e                   	pop    esi
c0011202:	5f                   	pop    edi
c0011203:	c3                   	ret    

c0011204 <KeLoadSystemEnv()>:
c0011204:	53                   	push   ebx
c0011205:	83 ec 14             	sub    esp,0x14
c0011208:	6a 0c                	push   0xc
c001120a:	e8 a7 68 ff ff       	call   c0007ab6 <malloc>
c001120f:	89 c3                	mov    ebx,eax
c0011211:	58                   	pop    eax
c0011212:	5a                   	pop    edx
c0011213:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011219:	53                   	push   ebx
c001121a:	e8 71 fe ff ff       	call   c0011090 <EnvVarContainer::EnvVarContainer(Process*)>
c001121f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011222:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011228:	e8 47 fe ff ff       	call   c0011074 <EnvVarContainer::__loadSystem()>
c001122d:	83 c4 18             	add    esp,0x18
c0011230:	5b                   	pop    ebx
c0011231:	c3                   	ret    

c0011232 <KeLoadUserEnv()>:
c0011232:	53                   	push   ebx
c0011233:	83 ec 14             	sub    esp,0x14
c0011236:	6a 0c                	push   0xc
c0011238:	e8 79 68 ff ff       	call   c0007ab6 <malloc>
c001123d:	89 c3                	mov    ebx,eax
c001123f:	58                   	pop    eax
c0011240:	5a                   	pop    edx
c0011241:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011247:	53                   	push   ebx
c0011248:	e8 43 fe ff ff       	call   c0011090 <EnvVarContainer::EnvVarContainer(Process*)>
c001124d:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c0011253:	83 c4 18             	add    esp,0x18
c0011256:	5b                   	pop    ebx
c0011257:	c3                   	ret    

c0011258 <KeFlushEnv()>:
c0011258:	c3                   	ret    

c0011259 <KeGetProcessTotalEnvCount(Process*)>:
c0011259:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001125d:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c0011263:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011269:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001126e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011270:	03 01                	add    eax,DWORD PTR [ecx]
c0011272:	85 d2                	test   edx,edx
c0011274:	74 02                	je     c0011278 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011276:	03 02                	add    eax,DWORD PTR [edx]
c0011278:	c3                   	ret    

c0011279 <KeGetProcessEnvPair(Process*, int)>:
c0011279:	57                   	push   edi
c001127a:	56                   	push   esi
c001127b:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011281:	53                   	push   ebx
c0011282:	85 f6                	test   esi,esi
c0011284:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011288:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001128c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011292:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011296:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011298:	75 16                	jne    c00112b0 <KeGetProcessEnvPair(Process*, int)+0x37>
c001129a:	39 c2                	cmp    edx,eax
c001129c:	7c 16                	jl     c00112b4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001129e:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00112a4:	8b 31                	mov    esi,DWORD PTR [ecx]
c00112a6:	01 c6                	add    esi,eax
c00112a8:	39 d6                	cmp    esi,edx
c00112aa:	7e 3c                	jle    c00112e8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00112ac:	29 c2                	sub    edx,eax
c00112ae:	eb 04                	jmp    c00112b4 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00112b0:	39 c2                	cmp    edx,eax
c00112b2:	7d 05                	jge    c00112b9 <KeGetProcessEnvPair(Process*, int)+0x40>
c00112b4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00112b7:	eb 20                	jmp    c00112d9 <KeGetProcessEnvPair(Process*, int)+0x60>
c00112b9:	8b 3e                	mov    edi,DWORD PTR [esi]
c00112bb:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00112be:	39 d1                	cmp    ecx,edx
c00112c0:	7e 04                	jle    c00112c6 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00112c2:	29 c2                	sub    edx,eax
c00112c4:	eb 10                	jmp    c00112d6 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00112c6:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00112cc:	03 0e                	add    ecx,DWORD PTR [esi]
c00112ce:	39 d1                	cmp    ecx,edx
c00112d0:	7e 16                	jle    c00112e8 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00112d2:	29 c2                	sub    edx,eax
c00112d4:	29 fa                	sub    edx,edi
c00112d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00112d9:	8d 14 d0             	lea    edx,[eax+edx*8]
c00112dc:	8b 02                	mov    eax,DWORD PTR [edx]
c00112de:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00112e1:	89 03                	mov    DWORD PTR [ebx],eax
c00112e3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00112e6:	eb 1d                	jmp    c0011305 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00112e8:	83 ec 0c             	sub    esp,0xc
c00112eb:	68 72 1e 02 c0       	push   0xc0021e72
c00112f0:	e8 ac 00 00 00       	call   c00113a1 <KePanic(char const*)>
c00112f5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00112fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	89 d8                	mov    eax,ebx
c0011307:	5b                   	pop    ebx
c0011308:	5e                   	pop    esi
c0011309:	5f                   	pop    edi
c001130a:	c2 04 00             	ret    0x4

c001130d <CPU::current()>:
c001130d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011312:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011318:	c3                   	ret    

c0011319 <operator new(unsigned long)>:
c0011319:	e9 98 67 ff ff       	jmp    c0007ab6 <malloc>

c001131e <operator delete(void*)>:
c001131e:	e9 b3 67 ff ff       	jmp    c0007ad6 <rfree>

c0011323 <disableIRQs()>:
c0011323:	fa                   	cli    
c0011324:	c3                   	ret    

c0011325 <enableIRQs()>:
c0011325:	fb                   	sti    
c0011326:	c3                   	ret    

c0011327 <lockScheduler()>:
c0011327:	fa                   	cli    
c0011328:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001132e:	c3                   	ret    

c001132f <unlockScheduler()>:
c001132f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011334:	48                   	dec    eax
c0011335:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001133a:	75 01                	jne    c001133d <unlockScheduler()+0xe>
c001133c:	fb                   	sti    
c001133d:	c3                   	ret    

c001133e <lockStuff()>:
c001133e:	fa                   	cli    
c001133f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011345:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c001134b:	c3                   	ret    

c001134c <unlockStuff()>:
c001134c:	83 ec 0c             	sub    esp,0xc
c001134f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011354:	48                   	dec    eax
c0011355:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001135a:	75 18                	jne    c0011374 <unlockStuff()+0x28>
c001135c:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0011363:	74 0f                	je     c0011374 <unlockStuff()+0x28>
c0011365:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001136f:	e8 ec 48 00 00       	call   c0015c60 <schedule()>
c0011374:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011379:	48                   	dec    eax
c001137a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001137f:	75 01                	jne    c0011382 <unlockStuff()+0x36>
c0011381:	fb                   	sti    
c0011382:	83 c4 0c             	add    esp,0xc
c0011385:	c3                   	ret    

c0011386 <Virt::getAKernelVAS()>:
c0011386:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001138b:	c3                   	ret    

c001138c <__not_memcpy>:
c001138c:	57                   	push   edi
c001138d:	56                   	push   esi
c001138e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011392:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011396:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001139a:	89 c7                	mov    edi,eax
c001139c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001139e:	5e                   	pop    esi
c001139f:	5f                   	pop    edi
c00113a0:	c3                   	ret    

c00113a1 <KePanic(char const*)>:
c00113a1:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00113a8:	e9 59 68 00 00       	jmp    c0017c06 <HalPanic(char const*)>

c00113ad <KePowerThread(void*)>:
c00113ad:	83 ec 0c             	sub    esp,0xc
c00113b0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00113b5:	48                   	dec    eax
c00113b6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00113bb:	75 01                	jne    c00113be <KePowerThread(void*)+0x11>
c00113bd:	fb                   	sti    
c00113be:	83 ec 0c             	sub    esp,0xc
c00113c1:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113c8:	6a 0a                	push   0xa
c00113ca:	e8 d5 4b 00 00       	call   c0015fa4 <sleep(unsigned int)>
c00113cf:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00113d6:	83 c4 10             	add    esp,0x10
c00113d9:	eb e3                	jmp    c00113be <KePowerThread(void*)+0x11>

c00113db <KeChangePowerSettings(PowerSettings)>:
c00113db:	57                   	push   edi
c00113dc:	b9 09 00 00 00       	mov    ecx,0x9
c00113e1:	56                   	push   esi
c00113e2:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c00113e7:	fc                   	cld    
c00113e8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00113ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00113ee:	5e                   	pop    esi
c00113ef:	5f                   	pop    edi
c00113f0:	c3                   	ret    

c00113f1 <KeUserIOReceived()>:
c00113f1:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113fb:	c3                   	ret    

c00113fc <KeHandlePowerButton()>:
c00113fc:	83 ec 0c             	sub    esp,0xc
c00113ff:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0011404:	83 f8 02             	cmp    eax,0x2
c0011407:	75 10                	jne    c0011419 <KeHandlePowerButton()+0x1d>
c0011409:	83 ec 0c             	sub    esp,0xc
c001140c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011412:	e8 11 5d ff ff       	call   c0007128 <Computer::shutdown()>
c0011417:	eb 11                	jmp    c001142a <KeHandlePowerButton()+0x2e>
c0011419:	48                   	dec    eax
c001141a:	75 11                	jne    c001142d <KeHandlePowerButton()+0x31>
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011425:	e8 2e 5d ff ff       	call   c0007158 <Computer::sleep()>
c001142a:	83 c4 10             	add    esp,0x10
c001142d:	83 c4 0c             	add    esp,0xc
c0011430:	c3                   	ret    

c0011431 <KeHandleSleepButton()>:
c0011431:	83 ec 0c             	sub    esp,0xc
c0011434:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011439:	83 f8 02             	cmp    eax,0x2
c001143c:	75 10                	jne    c001144e <KeHandleSleepButton()+0x1d>
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011447:	e8 dc 5c ff ff       	call   c0007128 <Computer::shutdown()>
c001144c:	eb 11                	jmp    c001145f <KeHandleSleepButton()+0x2e>
c001144e:	48                   	dec    eax
c001144f:	75 11                	jne    c0011462 <KeHandleSleepButton()+0x31>
c0011451:	83 ec 0c             	sub    esp,0xc
c0011454:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001145a:	e8 f9 5c ff ff       	call   c0007158 <Computer::sleep()>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	83 c4 0c             	add    esp,0xc
c0011465:	c3                   	ret    

c0011466 <KeSetupPowerManager()>:
c0011466:	83 ec 0c             	sub    esp,0xc
c0011469:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011473:	68 f0 00 00 00       	push   0xf0
c0011478:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c001147f:	6a 00                	push   0x0
c0011481:	68 ad 13 01 c0       	push   0xc00113ad
c0011486:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001148c:	e8 7f 45 00 00       	call   c0015a10 <Process::createThread(void (*)(void*), void*, int)>
c0011491:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c001149b:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00114a5:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00114af:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c00114b9:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c00114c3:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00114cd:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00114d7:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c00114e1:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c00114eb:	83 c4 1c             	add    esp,0x1c
c00114ee:	c3                   	ret    

c00114ef <KeRand()>:
c00114ef:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00114f9:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c0011503:	53                   	push   ebx
c0011504:	01 c1                	add    ecx,eax
c0011506:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001150b:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011511:	01 ca                	add    edx,ecx
c0011513:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011518:	83 d2 00             	adc    edx,0x0
c001151b:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011520:	0f b7 da             	movzx  ebx,dx
c0011523:	89 da                	mov    edx,ebx
c0011525:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c001152b:	0f ac d0 0e          	shrd   eax,edx,0xe
c001152f:	5b                   	pop    ebx
c0011530:	c3                   	ret    

c0011531 <KeSeedRand(unsigned int)>:
c0011531:	53                   	push   ebx
c0011532:	83 ec 08             	sub    esp,0x8
c0011535:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011539:	e8 e7 69 00 00       	call   c0017f25 <HalGetRand()>
c001153e:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011548:	31 d8                	xor    eax,ebx
c001154a:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001154f:	e8 9b ff ff ff       	call   c00114ef <KeRand()>
c0011554:	83 c4 08             	add    esp,0x8
c0011557:	5b                   	pop    ebx
c0011558:	eb 95                	jmp    c00114ef <KeRand()>

c001155a <KeInitRand()>:
c001155a:	83 ec 0c             	sub    esp,0xc
c001155d:	e8 b8 67 00 00       	call   c0017d1a <HalQueryPerformanceCounter()>
c0011562:	0f 20 da             	mov    edx,cr3
c0011565:	0f 22 da             	mov    cr3,edx
c0011568:	0f 20 da             	mov    edx,cr3
c001156b:	0f 22 da             	mov    cr3,edx
c001156e:	0f 20 da             	mov    edx,cr3
c0011571:	0f 22 da             	mov    cr3,edx
c0011574:	0f 20 da             	mov    edx,cr3
c0011577:	0f 22 da             	mov    cr3,edx
c001157a:	83 ec 0c             	sub    esp,0xc
c001157d:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011582:	50                   	push   eax
c0011583:	e8 a9 ff ff ff       	call   c0011531 <KeSeedRand(unsigned int)>
c0011588:	83 c4 1c             	add    esp,0x1c
c001158b:	c3                   	ret    

c001158c <KeResolveCompatibilitySymbol(char*)>:
c001158c:	83 ec 0c             	sub    esp,0xc
c001158f:	83 ec 08             	sub    esp,0x8
c0011592:	68 8c 1e 02 c0       	push   0xc0021e8c
c0011597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001159b:	e8 b0 f1 fe ff       	call   c0000750 <strcmp>
c00115a0:	83 c4 10             	add    esp,0x10
c00115a3:	85 c0                	test   eax,eax
c00115a5:	0f 94 c0             	sete   al
c00115a8:	0f b6 c0             	movzx  eax,al
c00115ab:	85 c0                	test   eax,eax
c00115ad:	74 0d                	je     c00115bc <KeResolveCompatibilitySymbol(char*)+0x30>
c00115af:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c00115b4:	e9 8b 01 00 00       	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115b9:	8d 76 00             	lea    esi,[esi+0x0]
c00115bc:	83 ec 08             	sub    esp,0x8
c00115bf:	68 95 1e 02 c0       	push   0xc0021e95
c00115c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c8:	e8 83 f1 fe ff       	call   c0000750 <strcmp>
c00115cd:	83 c4 10             	add    esp,0x10
c00115d0:	85 c0                	test   eax,eax
c00115d2:	0f 94 c0             	sete   al
c00115d5:	0f b6 c0             	movzx  eax,al
c00115d8:	85 c0                	test   eax,eax
c00115da:	74 0c                	je     c00115e8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00115dc:	b8 d0 f2 01 c0       	mov    eax,0xc001f2d0
c00115e1:	e9 5e 01 00 00       	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115e6:	66 90                	xchg   ax,ax
c00115e8:	83 ec 08             	sub    esp,0x8
c00115eb:	68 9f 1e 02 c0       	push   0xc0021e9f
c00115f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f4:	e8 57 f1 fe ff       	call   c0000750 <strcmp>
c00115f9:	83 c4 10             	add    esp,0x10
c00115fc:	85 c0                	test   eax,eax
c00115fe:	0f 94 c0             	sete   al
c0011601:	0f b6 c0             	movzx  eax,al
c0011604:	85 c0                	test   eax,eax
c0011606:	74 0c                	je     c0011614 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011608:	b8 04 f0 01 c0       	mov    eax,0xc001f004
c001160d:	e9 32 01 00 00       	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011612:	66 90                	xchg   ax,ax
c0011614:	83 ec 08             	sub    esp,0x8
c0011617:	68 a8 1e 02 c0       	push   0xc0021ea8
c001161c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011620:	e8 2b f1 fe ff       	call   c0000750 <strcmp>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	85 c0                	test   eax,eax
c001162a:	0f 94 c0             	sete   al
c001162d:	0f b6 c0             	movzx  eax,al
c0011630:	85 c0                	test   eax,eax
c0011632:	74 0c                	je     c0011640 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011634:	b8 a1 13 01 c0       	mov    eax,0xc00113a1
c0011639:	e9 06 01 00 00       	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001163e:	66 90                	xchg   ax,ax
c0011640:	83 ec 08             	sub    esp,0x8
c0011643:	68 bb 1e 02 c0       	push   0xc0021ebb
c0011648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001164c:	e8 ff f0 fe ff       	call   c0000750 <strcmp>
c0011651:	83 c4 10             	add    esp,0x10
c0011654:	85 c0                	test   eax,eax
c0011656:	0f 94 c0             	sete   al
c0011659:	0f b6 c0             	movzx  eax,al
c001165c:	85 c0                	test   eax,eax
c001165e:	74 0c                	je     c001166c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011660:	b8 cb 0c 01 c0       	mov    eax,0xc0010ccb
c0011665:	e9 da 00 00 00       	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001166a:	66 90                	xchg   ax,ax
c001166c:	83 ec 08             	sub    esp,0x8
c001166f:	68 d8 1e 02 c0       	push   0xc0021ed8
c0011674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011678:	e8 d3 f0 fe ff       	call   c0000750 <strcmp>
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	85 c0                	test   eax,eax
c0011682:	0f 94 c0             	sete   al
c0011685:	0f b6 c0             	movzx  eax,al
c0011688:	85 c0                	test   eax,eax
c001168a:	74 0c                	je     c0011698 <KeResolveCompatibilitySymbol(char*)+0x10c>
c001168c:	b8 d0 f3 01 c0       	mov    eax,0xc001f3d0
c0011691:	e9 ae 00 00 00       	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011696:	66 90                	xchg   ax,ax
c0011698:	83 ec 08             	sub    esp,0x8
c001169b:	68 e2 1e 02 c0       	push   0xc0021ee2
c00116a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116a4:	e8 a7 f0 fe ff       	call   c0000750 <strcmp>
c00116a9:	83 c4 10             	add    esp,0x10
c00116ac:	85 c0                	test   eax,eax
c00116ae:	0f 94 c0             	sete   al
c00116b1:	0f b6 c0             	movzx  eax,al
c00116b4:	85 c0                	test   eax,eax
c00116b6:	74 0c                	je     c00116c4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00116b8:	b8 50 f1 01 c0       	mov    eax,0xc001f150
c00116bd:	e9 82 00 00 00       	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116c2:	66 90                	xchg   ax,ax
c00116c4:	83 ec 08             	sub    esp,0x8
c00116c7:	68 eb 1e 02 c0       	push   0xc0021eeb
c00116cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116d0:	e8 7b f0 fe ff       	call   c0000750 <strcmp>
c00116d5:	83 c4 10             	add    esp,0x10
c00116d8:	85 c0                	test   eax,eax
c00116da:	0f 94 c0             	sete   al
c00116dd:	0f b6 c0             	movzx  eax,al
c00116e0:	85 c0                	test   eax,eax
c00116e2:	74 08                	je     c00116ec <KeResolveCompatibilitySymbol(char*)+0x160>
c00116e4:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00116e9:	eb 59                	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116eb:	90                   	nop
c00116ec:	83 ec 08             	sub    esp,0x8
c00116ef:	68 03 1f 02 c0       	push   0xc0021f03
c00116f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f8:	e8 53 f0 fe ff       	call   c0000750 <strcmp>
c00116fd:	83 c4 10             	add    esp,0x10
c0011700:	85 c0                	test   eax,eax
c0011702:	0f 94 c0             	sete   al
c0011705:	0f b6 c0             	movzx  eax,al
c0011708:	85 c0                	test   eax,eax
c001170a:	74 08                	je     c0011714 <KeResolveCompatibilitySymbol(char*)+0x188>
c001170c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011711:	eb 31                	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011713:	90                   	nop
c0011714:	83 ec 08             	sub    esp,0x8
c0011717:	68 10 1f 02 c0       	push   0xc0021f10
c001171c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011720:	e8 2b f0 fe ff       	call   c0000750 <strcmp>
c0011725:	83 c4 10             	add    esp,0x10
c0011728:	85 c0                	test   eax,eax
c001172a:	0f 94 c0             	sete   al
c001172d:	0f b6 c0             	movzx  eax,al
c0011730:	85 c0                	test   eax,eax
c0011732:	74 08                	je     c001173c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011734:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011739:	eb 09                	jmp    c0011744 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001173b:	90                   	nop
c001173c:	b8 00 00 00 00       	mov    eax,0x0
c0011741:	8d 76 00             	lea    esi,[esi+0x0]
c0011744:	83 c4 0c             	add    esp,0xc
c0011747:	c3                   	ret    

c0011748 <KiSigKill(int)>:
c0011748:	83 ec 0c             	sub    esp,0xc
c001174b:	6a 00                	push   0x0
c001174d:	6a 00                	push   0x0
c001174f:	6a ff                	push   0xffffffff
c0011751:	6a 01                	push   0x1
c0011753:	e8 fa 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011758:	83 c4 1c             	add    esp,0x1c
c001175b:	c3                   	ret    

c001175c <KiDefaultSignalHandlerIgnore(int)>:
c001175c:	c3                   	ret    

c001175d <KiDefaultSignalHandlerPause(int)>:
c001175d:	57                   	push   edi
c001175e:	b9 07 00 00 00       	mov    ecx,0x7
c0011763:	56                   	push   esi
c0011764:	be 59 1f 02 c0       	mov    esi,0xc0021f59
c0011769:	83 ec 24             	sub    esp,0x24
c001176c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011770:	fc                   	cld    
c0011771:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011773:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011777:	50                   	push   eax
c0011778:	6a 00                	push   0x0
c001177a:	6a 00                	push   0x0
c001177c:	6a 27                	push   0x27
c001177e:	e8 cf 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011783:	83 c4 34             	add    esp,0x34
c0011786:	5e                   	pop    esi
c0011787:	5f                   	pop    edi
c0011788:	c3                   	ret    

c0011789 <KiDefaultSignalHandlerResume(int)>:
c0011789:	57                   	push   edi
c001178a:	b9 1d 00 00 00       	mov    ecx,0x1d
c001178f:	56                   	push   esi
c0011790:	be 75 1f 02 c0       	mov    esi,0xc0021f75
c0011795:	83 ec 24             	sub    esp,0x24
c0011798:	8d 7c 24 03          	lea    edi,[esp+0x3]
c001179c:	fc                   	cld    
c001179d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001179f:	8d 44 24 03          	lea    eax,[esp+0x3]
c00117a3:	50                   	push   eax
c00117a4:	6a 00                	push   0x0
c00117a6:	6a 00                	push   0x0
c00117a8:	6a 27                	push   0x27
c00117aa:	e8 a3 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00117af:	83 c4 34             	add    esp,0x34
c00117b2:	5e                   	pop    esi
c00117b3:	5f                   	pop    edi
c00117b4:	c3                   	ret    

c00117b5 <KeDeinitSignals(SigHandlerBlock*)>:
c00117b5:	e9 0c 63 ff ff       	jmp    c0007ac6 <free>

c00117ba <KeInitSignals()>:
c00117ba:	53                   	push   ebx
c00117bb:	83 ec 14             	sub    esp,0x14
c00117be:	68 c8 00 00 00       	push   0xc8
c00117c3:	e8 ee 62 ff ff       	call   c0007ab6 <malloc>
c00117c8:	83 c4 0c             	add    esp,0xc
c00117cb:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00117d5:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00117df:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00117e6:	89 c3                	mov    ebx,eax
c00117e8:	6a 20                	push   0x20
c00117ea:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00117f0:	6a 00                	push   0x0
c00117f2:	50                   	push   eax
c00117f3:	e8 f8 ec fe ff       	call   c00004f0 <memset>
c00117f8:	83 c4 0c             	add    esp,0xc
c00117fb:	6a 44                	push   0x44
c00117fd:	6a 00                	push   0x0
c00117ff:	53                   	push   ebx
c0011800:	e8 eb ec fe ff       	call   c00004f0 <memset>
c0011805:	89 d8                	mov    eax,ebx
c0011807:	83 c4 18             	add    esp,0x18
c001180a:	5b                   	pop    ebx
c001180b:	c3                   	ret    

c001180c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001180c:	53                   	push   ebx
c001180d:	b8 01 00 00 00       	mov    eax,0x1
c0011812:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011816:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001181a:	83 f9 10             	cmp    ecx,0x10
c001181d:	7f 21                	jg     c0011840 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001181f:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011826:	89 03                	mov    DWORD PTR [ebx],eax
c0011828:	b8 01 00 00 00       	mov    eax,0x1
c001182d:	d3 e0                	shl    eax,cl
c001182f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011833:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011836:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001183e:	31 c0                	xor    eax,eax
c0011840:	5b                   	pop    ebx
c0011841:	c3                   	ret    

c0011842 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011842:	55                   	push   ebp
c0011843:	57                   	push   edi
c0011844:	bf 08 00 00 00       	mov    edi,0x8
c0011849:	56                   	push   esi
c001184a:	53                   	push   ebx
c001184b:	83 ec 18             	sub    esp,0x18
c001184e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011852:	68 92 1f 02 c0       	push   0xc0021f92
c0011857:	e8 e9 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001185c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011863:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	31 c9                	xor    ecx,ecx
c001186e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011872:	99                   	cdq    
c0011873:	f7 ff                	idiv   edi
c0011875:	8d 42 24             	lea    eax,[edx+0x24]
c0011878:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001187c:	85 f6                	test   esi,esi
c001187e:	75 1a                	jne    c001189a <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011880:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011884:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011888:	50                   	push   eax
c0011889:	50                   	push   eax
c001188a:	52                   	push   edx
c001188b:	68 a3 1f 02 c0       	push   0xc0021fa3
c0011890:	e8 b0 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	eb 1b                	jmp    c00118b5 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001189a:	41                   	inc    ecx
c001189b:	83 f9 08             	cmp    ecx,0x8
c001189e:	75 ce                	jne    c001186e <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00118a0:	83 ec 0c             	sub    esp,0xc
c00118a3:	be 01 00 00 00       	mov    esi,0x1
c00118a8:	68 c4 1f 02 c0       	push   0xc0021fc4
c00118ad:	e8 93 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	83 c4 0c             	add    esp,0xc
c00118b8:	89 f0                	mov    eax,esi
c00118ba:	5b                   	pop    ebx
c00118bb:	5e                   	pop    esi
c00118bc:	5f                   	pop    edi
c00118bd:	5d                   	pop    ebp
c00118be:	c3                   	ret    

c00118bf <KeCheckSignal(SigHandlerBlock*, int*)>:
c00118bf:	55                   	push   ebp
c00118c0:	57                   	push   edi
c00118c1:	56                   	push   esi
c00118c2:	53                   	push   ebx
c00118c3:	51                   	push   ecx
c00118c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00118c8:	85 db                	test   ebx,ebx
c00118ca:	0f 84 bc 00 00 00    	je     c001198c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118d0:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00118d7:	0f 84 af 00 00 00    	je     c001198c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118dd:	31 c9                	xor    ecx,ecx
c00118df:	bf 08 00 00 00       	mov    edi,0x8
c00118e4:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00118ea:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00118ed:	99                   	cdq    
c00118ee:	f7 ff                	idiv   edi
c00118f0:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00118f7:	85 ed                	test   ebp,ebp
c00118f9:	0f 84 9e 00 00 00    	je     c001199d <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00118ff:	89 e9                	mov    ecx,ebp
c0011901:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011907:	bf 01 00 00 00       	mov    edi,0x1
c001190c:	89 04 24             	mov    DWORD PTR [esp],eax
c001190f:	d3 e7                	shl    edi,cl
c0011911:	31 c9                	xor    ecx,ecx
c0011913:	b8 01 00 00 00       	mov    eax,0x1
c0011918:	d3 e0                	shl    eax,cl
c001191a:	85 04 24             	test   DWORD PTR [esp],eax
c001191d:	74 06                	je     c0011925 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001191f:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011923:	75 67                	jne    c001198c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011925:	41                   	inc    ecx
c0011926:	83 f9 11             	cmp    ecx,0x11
c0011929:	75 e8                	jne    c0011913 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c001192b:	46                   	inc    esi
c001192c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001192f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011935:	09 f8                	or     eax,edi
c0011937:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011942:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011948:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001194f:	31 c0                	xor    eax,eax
c0011951:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011959:	74 09                	je     c0011964 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c001195b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011962:	eb 06                	jmp    c001196a <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011964:	40                   	inc    eax
c0011965:	83 f8 08             	cmp    eax,0x8
c0011968:	75 e7                	jne    c0011951 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c001196a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001196d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011971:	83 fd 09             	cmp    ebp,0x9
c0011974:	89 2a                	mov    DWORD PTR [edx],ebp
c0011976:	75 07                	jne    c001197f <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011978:	b8 48 17 01 c0       	mov    eax,0xc0011748
c001197d:	eb 31                	jmp    c00119b0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001197f:	83 f8 01             	cmp    eax,0x1
c0011982:	75 0c                	jne    c0011990 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011984:	f7 d7                	not    edi
c0011986:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001198c:	31 c0                	xor    eax,eax
c001198e:	eb 20                	jmp    c00119b0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011990:	85 c0                	test   eax,eax
c0011992:	75 1c                	jne    c00119b0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011994:	8b 04 ad c0 33 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcc40]
c001199b:	eb 13                	jmp    c00119b0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001199d:	46                   	inc    esi
c001199e:	41                   	inc    ecx
c001199f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00119a5:	83 f9 08             	cmp    ecx,0x8
c00119a8:	0f 85 36 ff ff ff    	jne    c00118e4 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00119ae:	eb dc                	jmp    c001198c <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00119b0:	5a                   	pop    edx
c00119b1:	5b                   	pop    ebx
c00119b2:	5e                   	pop    esi
c00119b3:	5f                   	pop    edi
c00119b4:	5d                   	pop    ebp
c00119b5:	c3                   	ret    

c00119b6 <KiCheckSignalZ>:
c00119b6:	83 ec 10             	sub    esp,0x10
c00119b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00119bd:	50                   	push   eax
c00119be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00119cc:	e8 ee fe ff ff       	call   c00118bf <KeCheckSignal(SigHandlerBlock*, int*)>
c00119d1:	5a                   	pop    edx
c00119d2:	31 d2                	xor    edx,edx
c00119d4:	59                   	pop    ecx
c00119d5:	85 c0                	test   eax,eax
c00119d7:	74 19                	je     c00119f2 <KiCheckSignalZ+0x3c>
c00119d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00119df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00119e2:	89 02                	mov    DWORD PTR [edx],eax
c00119e4:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00119eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ef:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00119f2:	89 d0                	mov    eax,edx
c00119f4:	83 c4 10             	add    esp,0x10
c00119f7:	c3                   	ret    

c00119f8 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00119f8:	56                   	push   esi
c00119f9:	53                   	push   ebx
c00119fa:	bb 01 00 00 00       	mov    ebx,0x1
c00119ff:	52                   	push   edx
c0011a00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011a04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a08:	d3 e3                	shl    ebx,cl
c0011a0a:	83 f9 10             	cmp    ecx,0x10
c0011a0d:	7f 08                	jg     c0011a17 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011a0f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011a15:	75 10                	jne    c0011a27 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011a17:	83 ec 0c             	sub    esp,0xc
c0011a1a:	68 d5 1f 02 c0       	push   0xc0021fd5
c0011a1f:	e8 7d f9 ff ff       	call   c00113a1 <KePanic(char const*)>
c0011a24:	83 c4 10             	add    esp,0x10
c0011a27:	f7 d3                	not    ebx
c0011a29:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011a2f:	58                   	pop    eax
c0011a30:	5b                   	pop    ebx
c0011a31:	5e                   	pop    esi
c0011a32:	c3                   	ret    

c0011a33 <KiFinishSignalZ>:
c0011a33:	53                   	push   ebx
c0011a34:	83 ec 10             	sub    esp,0x10
c0011a37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a3b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011a3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a46:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011a4c:	e8 a7 ff ff ff       	call   c00119f8 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011a51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011a57:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011a5e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011a65:	83 c4 18             	add    esp,0x18
c0011a68:	5b                   	pop    ebx
c0011a69:	c3                   	ret    

c0011a6a <SysSeekDir(regs*)>:
c0011a6a:	31 c0                	xor    eax,eax
c0011a6c:	31 d2                	xor    edx,edx
c0011a6e:	c3                   	ret    

c0011a6f <SysTellDir(regs*)>:
c0011a6f:	31 c0                	xor    eax,eax
c0011a71:	31 d2                	xor    edx,edx
c0011a73:	c3                   	ret    

c0011a74 <SysVerify(regs*)>:
c0011a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a78:	31 d2                	xor    edx,edx
c0011a7a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a7d:	c3                   	ret    

c0011a7e <SysGetArgc(regs*)>:
c0011a7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a83:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a86:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011a8c:	89 c2                	mov    edx,eax
c0011a8e:	c1 fa 1f             	sar    edx,0x1f
c0011a91:	c3                   	ret    

c0011a92 <SysTTYName(regs*)>:
c0011a92:	b8 01 00 00 00       	mov    eax,0x1
c0011a97:	31 d2                	xor    edx,edx
c0011a99:	c3                   	ret    

c0011a9a <SysFormatDisk(regs*)>:
c0011a9a:	56                   	push   esi
c0011a9b:	53                   	push   ebx
c0011a9c:	83 ec 04             	sub    esp,0x4
c0011a9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011aa3:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011aa9:	eb 28                	jmp    c0011ad3 <SysFormatDisk(regs*)+0x39>
c0011aab:	83 ec 0c             	sub    esp,0xc
c0011aae:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011ab1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011ab4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ab6:	51                   	push   ecx
c0011ab7:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011aba:	51                   	push   ecx
c0011abb:	50                   	push   eax
c0011abc:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011ac3:	50                   	push   eax
c0011ac4:	53                   	push   ebx
c0011ac5:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011ac8:	83 c4 20             	add    esp,0x20
c0011acb:	83 f8 08             	cmp    eax,0x8
c0011ace:	75 14                	jne    c0011ae4 <SysFormatDisk(regs*)+0x4a>
c0011ad0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011ad3:	85 db                	test   ebx,ebx
c0011ad5:	75 d4                	jne    c0011aab <SysFormatDisk(regs*)+0x11>
c0011ad7:	83 c4 04             	add    esp,0x4
c0011ada:	b8 03 00 00 00       	mov    eax,0x3
c0011adf:	31 d2                	xor    edx,edx
c0011ae1:	5b                   	pop    ebx
c0011ae2:	5e                   	pop    esi
c0011ae3:	c3                   	ret    
c0011ae4:	85 c0                	test   eax,eax
c0011ae6:	74 1f                	je     c0011b07 <SysFormatDisk(regs*)+0x6d>
c0011ae8:	83 f8 09             	cmp    eax,0x9
c0011aeb:	74 0d                	je     c0011afa <SysFormatDisk(regs*)+0x60>
c0011aed:	83 c4 04             	add    esp,0x4
c0011af0:	b8 02 00 00 00       	mov    eax,0x2
c0011af5:	31 d2                	xor    edx,edx
c0011af7:	5b                   	pop    ebx
c0011af8:	5e                   	pop    esi
c0011af9:	c3                   	ret    
c0011afa:	83 c4 04             	add    esp,0x4
c0011afd:	b8 01 00 00 00       	mov    eax,0x1
c0011b02:	31 d2                	xor    edx,edx
c0011b04:	5b                   	pop    ebx
c0011b05:	5e                   	pop    esi
c0011b06:	c3                   	ret    
c0011b07:	83 c4 04             	add    esp,0x4
c0011b0a:	31 c0                	xor    eax,eax
c0011b0c:	31 d2                	xor    edx,edx
c0011b0e:	5b                   	pop    ebx
c0011b0f:	5e                   	pop    esi
c0011b10:	c3                   	ret    

c0011b11 <SysSetDiskVolumeLabel(regs*)>:
c0011b11:	56                   	push   esi
c0011b12:	53                   	push   ebx
c0011b13:	83 ec 04             	sub    esp,0x4
c0011b16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b1a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011b1d:	83 f8 19             	cmp    eax,0x19
c0011b20:	77 33                	ja     c0011b55 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b22:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011b29:	85 c9                	test   ecx,ecx
c0011b2b:	74 28                	je     c0011b55 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b2d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011b30:	85 db                	test   ebx,ebx
c0011b32:	74 21                	je     c0011b55 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b34:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011b3a:	85 d2                	test   edx,edx
c0011b3c:	74 17                	je     c0011b55 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b3e:	8b 32                	mov    esi,DWORD PTR [edx]
c0011b40:	53                   	push   ebx
c0011b41:	50                   	push   eax
c0011b42:	51                   	push   ecx
c0011b43:	52                   	push   edx
c0011b44:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	89 c2                	mov    edx,eax
c0011b4c:	83 c4 04             	add    esp,0x4
c0011b4f:	c1 fa 1f             	sar    edx,0x1f
c0011b52:	5b                   	pop    ebx
c0011b53:	5e                   	pop    esi
c0011b54:	c3                   	ret    
c0011b55:	83 c4 04             	add    esp,0x4
c0011b58:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b62:	5b                   	pop    ebx
c0011b63:	5e                   	pop    esi
c0011b64:	c3                   	ret    

c0011b65 <SysGetDiskVolumeLabel(regs*)>:
c0011b65:	57                   	push   edi
c0011b66:	56                   	push   esi
c0011b67:	53                   	push   ebx
c0011b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b6c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011b6f:	83 fa 19             	cmp    edx,0x19
c0011b72:	77 3c                	ja     c0011bb0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b74:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011b7b:	85 c9                	test   ecx,ecx
c0011b7d:	74 31                	je     c0011bb0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b7f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b82:	85 db                	test   ebx,ebx
c0011b84:	74 2a                	je     c0011bb0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b86:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011b89:	85 f6                	test   esi,esi
c0011b8b:	74 23                	je     c0011bb0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b8d:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011b93:	85 c0                	test   eax,eax
c0011b95:	74 19                	je     c0011bb0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b97:	83 ec 0c             	sub    esp,0xc
c0011b9a:	8b 38                	mov    edi,DWORD PTR [eax]
c0011b9c:	56                   	push   esi
c0011b9d:	53                   	push   ebx
c0011b9e:	52                   	push   edx
c0011b9f:	51                   	push   ecx
c0011ba0:	50                   	push   eax
c0011ba1:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011ba4:	83 c4 20             	add    esp,0x20
c0011ba7:	89 c2                	mov    edx,eax
c0011ba9:	5b                   	pop    ebx
c0011baa:	c1 fa 1f             	sar    edx,0x1f
c0011bad:	5e                   	pop    esi
c0011bae:	5f                   	pop    edi
c0011baf:	c3                   	ret    
c0011bb0:	5b                   	pop    ebx
c0011bb1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011bb6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bbb:	5e                   	pop    esi
c0011bbc:	5f                   	pop    edi
c0011bbd:	c3                   	ret    

c0011bbe <SysShutdown(regs*)>:
c0011bbe:	83 ec 0c             	sub    esp,0xc
c0011bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bc5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bc8:	85 c0                	test   eax,eax
c0011bca:	74 18                	je     c0011be4 <SysShutdown(regs*)+0x26>
c0011bcc:	83 f8 01             	cmp    eax,0x1
c0011bcf:	74 38                	je     c0011c09 <SysShutdown(regs*)+0x4b>
c0011bd1:	83 f8 02             	cmp    eax,0x2
c0011bd4:	74 24                	je     c0011bfa <SysShutdown(regs*)+0x3c>
c0011bd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bdb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011be0:	83 c4 0c             	add    esp,0xc
c0011be3:	c3                   	ret    
c0011be4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011be9:	8b 10                	mov    edx,DWORD PTR [eax]
c0011beb:	6a 00                	push   0x0
c0011bed:	6a 00                	push   0x0
c0011bef:	6a 00                	push   0x0
c0011bf1:	50                   	push   eax
c0011bf2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bf5:	83 c4 10             	add    esp,0x10
c0011bf8:	eb dc                	jmp    c0011bd6 <SysShutdown(regs*)+0x18>
c0011bfa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011bff:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c01:	6a 00                	push   0x0
c0011c03:	6a 00                	push   0x0
c0011c05:	6a 01                	push   0x1
c0011c07:	eb e8                	jmp    c0011bf1 <SysShutdown(regs*)+0x33>
c0011c09:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011c0e:	85 c0                	test   eax,eax
c0011c10:	74 02                	je     c0011c14 <SysShutdown(regs*)+0x56>
c0011c12:	ff d0                	call   eax
c0011c14:	31 c0                	xor    eax,eax
c0011c16:	31 d2                	xor    edx,edx
c0011c18:	83 c4 0c             	add    esp,0xc
c0011c1b:	c3                   	ret    

c0011c1c <SysRealpath(regs*)>:
c0011c1c:	83 ec 0c             	sub    esp,0xc
c0011c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c23:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011c26:	85 d2                	test   edx,edx
c0011c28:	74 07                	je     c0011c31 <SysRealpath(regs*)+0x15>
c0011c2a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c2d:	85 c0                	test   eax,eax
c0011c2f:	75 0b                	jne    c0011c3c <SysRealpath(regs*)+0x20>
c0011c31:	b8 01 00 00 00       	mov    eax,0x1
c0011c36:	31 d2                	xor    edx,edx
c0011c38:	83 c4 0c             	add    esp,0xc
c0011c3b:	c3                   	ret    
c0011c3c:	6a 00                	push   0x0
c0011c3e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011c44:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011c47:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011c4d:	51                   	push   ecx
c0011c4e:	52                   	push   edx
c0011c4f:	50                   	push   eax
c0011c50:	e8 95 99 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011c55:	83 c4 10             	add    esp,0x10
c0011c58:	31 c0                	xor    eax,eax
c0011c5a:	31 d2                	xor    edx,edx
c0011c5c:	83 c4 0c             	add    esp,0xc
c0011c5f:	c3                   	ret    

c0011c60 <SysReadDir(regs*)>:
c0011c60:	53                   	push   ebx
c0011c61:	83 ec 18             	sub    esp,0x18
c0011c64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c68:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c6b:	83 f8 02             	cmp    eax,0x2
c0011c6e:	76 61                	jbe    c0011cd1 <SysReadDir(regs*)+0x71>
c0011c70:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011c77:	77 49                	ja     c0011cc2 <SysReadDir(regs*)+0x62>
c0011c79:	83 ec 0c             	sub    esp,0xc
c0011c7c:	50                   	push   eax
c0011c7d:	e8 31 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c82:	83 c4 10             	add    esp,0x10
c0011c85:	85 c0                	test   eax,eax
c0011c87:	74 39                	je     c0011cc2 <SysReadDir(regs*)+0x62>
c0011c89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c91:	83 ec 0c             	sub    esp,0xc
c0011c94:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c96:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011c9a:	51                   	push   ecx
c0011c9b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c9e:	51                   	push   ecx
c0011c9f:	6a 00                	push   0x0
c0011ca1:	68 10 01 00 00       	push   0x110
c0011ca6:	50                   	push   eax
c0011ca7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011caa:	83 c4 20             	add    esp,0x20
c0011cad:	85 c0                	test   eax,eax
c0011caf:	74 29                	je     c0011cda <SysReadDir(regs*)+0x7a>
c0011cb1:	83 f8 07             	cmp    eax,0x7
c0011cb4:	74 1b                	je     c0011cd1 <SysReadDir(regs*)+0x71>
c0011cb6:	b8 02 00 00 00       	mov    eax,0x2
c0011cbb:	31 d2                	xor    edx,edx
c0011cbd:	83 c4 18             	add    esp,0x18
c0011cc0:	5b                   	pop    ebx
c0011cc1:	c3                   	ret    
c0011cc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cc7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ccc:	83 c4 18             	add    esp,0x18
c0011ccf:	5b                   	pop    ebx
c0011cd0:	c3                   	ret    
c0011cd1:	b8 01 00 00 00       	mov    eax,0x1
c0011cd6:	31 d2                	xor    edx,edx
c0011cd8:	eb e3                	jmp    c0011cbd <SysReadDir(regs*)+0x5d>
c0011cda:	31 c0                	xor    eax,eax
c0011cdc:	31 d2                	xor    edx,edx
c0011cde:	eb dd                	jmp    c0011cbd <SysReadDir(regs*)+0x5d>

c0011ce0 <SysIsATTY(regs*)>:
c0011ce0:	83 ec 0c             	sub    esp,0xc
c0011ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ce7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cea:	83 f8 02             	cmp    eax,0x2
c0011ced:	76 07                	jbe    c0011cf6 <SysIsATTY(regs*)+0x16>
c0011cef:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011cf4:	75 26                	jne    c0011d1c <SysIsATTY(regs*)+0x3c>
c0011cf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cfb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cfe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011d04:	85 c0                	test   eax,eax
c0011d06:	74 24                	je     c0011d2c <SysIsATTY(regs*)+0x4c>
c0011d08:	83 ec 0c             	sub    esp,0xc
c0011d0b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d0d:	50                   	push   eax
c0011d0e:	ff 12                	call   DWORD PTR [edx]
c0011d10:	31 d2                	xor    edx,edx
c0011d12:	0f b6 c0             	movzx  eax,al
c0011d15:	83 c4 10             	add    esp,0x10
c0011d18:	83 c4 0c             	add    esp,0xc
c0011d1b:	c3                   	ret    
c0011d1c:	83 ec 0c             	sub    esp,0xc
c0011d1f:	50                   	push   eax
c0011d20:	e8 8e 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d25:	83 c4 10             	add    esp,0x10
c0011d28:	85 c0                	test   eax,eax
c0011d2a:	75 dc                	jne    c0011d08 <SysIsATTY(regs*)+0x28>
c0011d2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d31:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d36:	83 c4 0c             	add    esp,0xc
c0011d39:	c3                   	ret    

c0011d3a <SysSeek(regs*)>:
c0011d3a:	53                   	push   ebx
c0011d3b:	83 ec 08             	sub    esp,0x8
c0011d3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d42:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d45:	8d 50 fd             	lea    edx,[eax-0x3]
c0011d48:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011d4e:	77 32                	ja     c0011d82 <SysSeek(regs*)+0x48>
c0011d50:	83 ec 0c             	sub    esp,0xc
c0011d53:	50                   	push   eax
c0011d54:	e8 5a 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d59:	83 c4 0c             	add    esp,0xc
c0011d5c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011d5f:	31 db                	xor    ebx,ebx
c0011d61:	53                   	push   ebx
c0011d62:	51                   	push   ecx
c0011d63:	50                   	push   eax
c0011d64:	e8 6b 9c ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0011d69:	83 c4 10             	add    esp,0x10
c0011d6c:	85 c0                	test   eax,eax
c0011d6e:	0f 95 c0             	setne  al
c0011d71:	31 d2                	xor    edx,edx
c0011d73:	0f b6 c0             	movzx  eax,al
c0011d76:	f7 d8                	neg    eax
c0011d78:	83 d2 00             	adc    edx,0x0
c0011d7b:	83 c4 08             	add    esp,0x8
c0011d7e:	f7 da                	neg    edx
c0011d80:	5b                   	pop    ebx
c0011d81:	c3                   	ret    
c0011d82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d8c:	83 c4 08             	add    esp,0x8
c0011d8f:	5b                   	pop    ebx
c0011d90:	c3                   	ret    

c0011d91 <SysTell(regs*)>:
c0011d91:	53                   	push   ebx
c0011d92:	83 ec 08             	sub    esp,0x8
c0011d95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d99:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d9c:	83 f8 02             	cmp    eax,0x2
c0011d9f:	76 4e                	jbe    c0011def <SysTell(regs*)+0x5e>
c0011da1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011da6:	76 19                	jbe    c0011dc1 <SysTell(regs*)+0x30>
c0011da8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011dab:	31 d2                	xor    edx,edx
c0011dad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011db3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011dba:	31 c0                	xor    eax,eax
c0011dbc:	83 c4 08             	add    esp,0x8
c0011dbf:	5b                   	pop    ebx
c0011dc0:	c3                   	ret    
c0011dc1:	83 ec 0c             	sub    esp,0xc
c0011dc4:	50                   	push   eax
c0011dc5:	e8 e9 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011dca:	5a                   	pop    edx
c0011dcb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011dce:	59                   	pop    ecx
c0011dcf:	53                   	push   ebx
c0011dd0:	50                   	push   eax
c0011dd1:	e8 aa 9c ff ff       	call   c000ba80 <File::tell(unsigned long long*)>
c0011dd6:	83 c4 10             	add    esp,0x10
c0011dd9:	85 c0                	test   eax,eax
c0011ddb:	0f 95 c0             	setne  al
c0011dde:	31 d2                	xor    edx,edx
c0011de0:	0f b6 c0             	movzx  eax,al
c0011de3:	f7 d8                	neg    eax
c0011de5:	83 d2 00             	adc    edx,0x0
c0011de8:	83 c4 08             	add    esp,0x8
c0011deb:	f7 da                	neg    edx
c0011ded:	5b                   	pop    ebx
c0011dee:	c3                   	ret    
c0011def:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011df4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011df9:	83 c4 08             	add    esp,0x8
c0011dfc:	5b                   	pop    ebx
c0011dfd:	c3                   	ret    

c0011dfe <SysSize(regs*)>:
c0011dfe:	53                   	push   ebx
c0011dff:	83 ec 18             	sub    esp,0x18
c0011e02:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e09:	83 f8 02             	cmp    eax,0x2
c0011e0c:	76 54                	jbe    c0011e62 <SysSize(regs*)+0x64>
c0011e0e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e13:	76 19                	jbe    c0011e2e <SysSize(regs*)+0x30>
c0011e15:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e18:	31 d2                	xor    edx,edx
c0011e1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e27:	31 c0                	xor    eax,eax
c0011e29:	83 c4 18             	add    esp,0x18
c0011e2c:	5b                   	pop    ebx
c0011e2d:	c3                   	ret    
c0011e2e:	83 ec 0c             	sub    esp,0xc
c0011e31:	50                   	push   eax
c0011e32:	e8 7c 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e37:	83 c4 0c             	add    esp,0xc
c0011e3a:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011e3e:	52                   	push   edx
c0011e3f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e42:	52                   	push   edx
c0011e43:	50                   	push   eax
c0011e44:	e8 cf 9d ff ff       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c0011e49:	83 c4 10             	add    esp,0x10
c0011e4c:	85 c0                	test   eax,eax
c0011e4e:	0f 95 c0             	setne  al
c0011e51:	31 d2                	xor    edx,edx
c0011e53:	0f b6 c0             	movzx  eax,al
c0011e56:	f7 d8                	neg    eax
c0011e58:	83 d2 00             	adc    edx,0x0
c0011e5b:	83 c4 18             	add    esp,0x18
c0011e5e:	f7 da                	neg    edx
c0011e60:	5b                   	pop    ebx
c0011e61:	c3                   	ret    
c0011e62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e6c:	83 c4 18             	add    esp,0x18
c0011e6f:	5b                   	pop    ebx
c0011e70:	c3                   	ret    

c0011e71 <SysSizeFromFilename(regs*)>:
c0011e71:	57                   	push   edi
c0011e72:	56                   	push   esi
c0011e73:	53                   	push   ebx
c0011e74:	83 ec 20             	sub    esp,0x20
c0011e77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011e7b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011e7e:	83 fb 02             	cmp    ebx,0x2
c0011e81:	0f 86 8a 00 00 00    	jbe    c0011f11 <SysSizeFromFilename(regs*)+0xa0>
c0011e87:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011e8d:	76 1b                	jbe    c0011eaa <SysSizeFromFilename(regs*)+0x39>
c0011e8f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011e92:	31 d2                	xor    edx,edx
c0011e94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ea1:	83 c4 20             	add    esp,0x20
c0011ea4:	31 c0                	xor    eax,eax
c0011ea6:	5b                   	pop    ebx
c0011ea7:	5e                   	pop    esi
c0011ea8:	5f                   	pop    edi
c0011ea9:	c3                   	ret    
c0011eaa:	83 ec 0c             	sub    esp,0xc
c0011ead:	68 14 01 00 00       	push   0x114
c0011eb2:	e8 ff 5b ff ff       	call   c0007ab6 <malloc>
c0011eb7:	83 c4 0c             	add    esp,0xc
c0011eba:	89 c7                	mov    edi,eax
c0011ebc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ec1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ec4:	50                   	push   eax
c0011ec5:	53                   	push   ebx
c0011ec6:	57                   	push   edi
c0011ec7:	e8 82 99 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0011ecc:	83 c4 0c             	add    esp,0xc
c0011ecf:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011ed3:	50                   	push   eax
c0011ed4:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011ed7:	52                   	push   edx
c0011ed8:	57                   	push   edi
c0011ed9:	e8 3a 9d ff ff       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c0011ede:	83 c4 10             	add    esp,0x10
c0011ee1:	85 ff                	test   edi,edi
c0011ee3:	74 14                	je     c0011ef9 <SysSizeFromFilename(regs*)+0x88>
c0011ee5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ee9:	8b 17                	mov    edx,DWORD PTR [edi]
c0011eeb:	83 ec 0c             	sub    esp,0xc
c0011eee:	57                   	push   edi
c0011eef:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011ef2:	83 c4 10             	add    esp,0x10
c0011ef5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ef9:	85 c0                	test   eax,eax
c0011efb:	0f 95 c0             	setne  al
c0011efe:	31 d2                	xor    edx,edx
c0011f00:	0f b6 c0             	movzx  eax,al
c0011f03:	f7 d8                	neg    eax
c0011f05:	83 d2 00             	adc    edx,0x0
c0011f08:	83 c4 20             	add    esp,0x20
c0011f0b:	f7 da                	neg    edx
c0011f0d:	5b                   	pop    ebx
c0011f0e:	5e                   	pop    esi
c0011f0f:	5f                   	pop    edi
c0011f10:	c3                   	ret    
c0011f11:	83 c4 20             	add    esp,0x20
c0011f14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f19:	5b                   	pop    ebx
c0011f1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f1f:	5e                   	pop    esi
c0011f20:	5f                   	pop    edi
c0011f21:	c3                   	ret    

c0011f22 <SysClose(regs*)>:
c0011f22:	53                   	push   ebx
c0011f23:	83 ec 08             	sub    esp,0x8
c0011f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f2a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f2d:	83 f8 02             	cmp    eax,0x2
c0011f30:	76 41                	jbe    c0011f73 <SysClose(regs*)+0x51>
c0011f32:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011f38:	83 fa 01             	cmp    edx,0x1
c0011f3b:	76 2d                	jbe    c0011f6a <SysClose(regs*)+0x48>
c0011f3d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f42:	77 2f                	ja     c0011f73 <SysClose(regs*)+0x51>
c0011f44:	83 ec 0c             	sub    esp,0xc
c0011f47:	50                   	push   eax
c0011f48:	e8 66 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f4d:	89 c3                	mov    ebx,eax
c0011f4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f52:	e8 1d 9a ff ff       	call   c000b974 <File::close()>
c0011f57:	83 c4 10             	add    esp,0x10
c0011f5a:	85 db                	test   ebx,ebx
c0011f5c:	74 0c                	je     c0011f6a <SysClose(regs*)+0x48>
c0011f5e:	83 ec 0c             	sub    esp,0xc
c0011f61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f63:	53                   	push   ebx
c0011f64:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	31 c0                	xor    eax,eax
c0011f6c:	31 d2                	xor    edx,edx
c0011f6e:	83 c4 08             	add    esp,0x8
c0011f71:	5b                   	pop    ebx
c0011f72:	c3                   	ret    
c0011f73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f78:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f7d:	83 c4 08             	add    esp,0x8
c0011f80:	5b                   	pop    ebx
c0011f81:	c3                   	ret    

c0011f82 <SysOpenDir(regs*)>:
c0011f82:	56                   	push   esi
c0011f83:	53                   	push   ebx
c0011f84:	83 ec 04             	sub    esp,0x4
c0011f87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f8b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011f8e:	85 c9                	test   ecx,ecx
c0011f90:	74 5d                	je     c0011fef <SysOpenDir(regs*)+0x6d>
c0011f92:	83 ec 0c             	sub    esp,0xc
c0011f95:	68 14 01 00 00       	push   0x114
c0011f9a:	e8 17 5b ff ff       	call   c0007ab6 <malloc>
c0011f9f:	83 c4 0c             	add    esp,0xc
c0011fa2:	89 c6                	mov    esi,eax
c0011fa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fa9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fac:	50                   	push   eax
c0011fad:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011fb0:	52                   	push   edx
c0011fb1:	56                   	push   esi
c0011fb2:	e8 21 9e ff ff       	call   c000bdd8 <Directory::Directory(char const*, Process*)>
c0011fb7:	83 c4 10             	add    esp,0x10
c0011fba:	85 f6                	test   esi,esi
c0011fbc:	74 31                	je     c0011fef <SysOpenDir(regs*)+0x6d>
c0011fbe:	83 ec 0c             	sub    esp,0xc
c0011fc1:	56                   	push   esi
c0011fc2:	e8 d9 9e ff ff       	call   c000bea0 <Directory::open()>
c0011fc7:	83 c4 10             	add    esp,0x10
c0011fca:	85 c0                	test   eax,eax
c0011fcc:	75 21                	jne    c0011fef <SysOpenDir(regs*)+0x6d>
c0011fce:	83 ec 0c             	sub    esp,0xc
c0011fd1:	56                   	push   esi
c0011fd2:	e8 df 71 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011fd7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	89 02                	mov    DWORD PTR [edx],eax
c0011fdf:	c1 f8 1f             	sar    eax,0x1f
c0011fe2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011fe5:	83 c4 04             	add    esp,0x4
c0011fe8:	31 c0                	xor    eax,eax
c0011fea:	31 d2                	xor    edx,edx
c0011fec:	5b                   	pop    ebx
c0011fed:	5e                   	pop    esi
c0011fee:	c3                   	ret    
c0011fef:	83 c4 04             	add    esp,0x4
c0011ff2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ff7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ffc:	5b                   	pop    ebx
c0011ffd:	5e                   	pop    esi
c0011ffe:	c3                   	ret    

c0011fff <SysMakeDir(regs*)>:
c0011fff:	56                   	push   esi
c0012000:	53                   	push   ebx
c0012001:	83 ec 10             	sub    esp,0x10
c0012004:	68 14 01 00 00       	push   0x114
c0012009:	e8 a8 5a ff ff       	call   c0007ab6 <malloc>
c001200e:	83 c4 0c             	add    esp,0xc
c0012011:	89 c3                	mov    ebx,eax
c0012013:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012018:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001201b:	50                   	push   eax
c001201c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012020:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012023:	52                   	push   edx
c0012024:	53                   	push   ebx
c0012025:	e8 ae 9d ff ff       	call   c000bdd8 <Directory::Directory(char const*, Process*)>
c001202a:	83 c4 10             	add    esp,0x10
c001202d:	85 db                	test   ebx,ebx
c001202f:	74 2c                	je     c001205d <SysMakeDir(regs*)+0x5e>
c0012031:	83 ec 0c             	sub    esp,0xc
c0012034:	53                   	push   ebx
c0012035:	e8 46 a0 ff ff       	call   c000c080 <Directory::create()>
c001203a:	89 c6                	mov    esi,eax
c001203c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001203e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012041:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012044:	83 c4 10             	add    esp,0x10
c0012047:	31 c0                	xor    eax,eax
c0012049:	85 f6                	test   esi,esi
c001204b:	0f 95 c0             	setne  al
c001204e:	31 d2                	xor    edx,edx
c0012050:	f7 d8                	neg    eax
c0012052:	83 d2 00             	adc    edx,0x0
c0012055:	83 c4 04             	add    esp,0x4
c0012058:	f7 da                	neg    edx
c001205a:	5b                   	pop    ebx
c001205b:	5e                   	pop    esi
c001205c:	c3                   	ret    
c001205d:	83 c4 04             	add    esp,0x4
c0012060:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012065:	ba ff ff ff ff       	mov    edx,0xffffffff
c001206a:	5b                   	pop    ebx
c001206b:	5e                   	pop    esi
c001206c:	c3                   	ret    

c001206d <SysCloseDir(regs*)>:
c001206d:	53                   	push   ebx
c001206e:	83 ec 08             	sub    esp,0x8
c0012071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012075:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012078:	8d 50 fd             	lea    edx,[eax-0x3]
c001207b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012081:	77 2f                	ja     c00120b2 <SysCloseDir(regs*)+0x45>
c0012083:	83 ec 0c             	sub    esp,0xc
c0012086:	50                   	push   eax
c0012087:	e8 27 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001208c:	89 c3                	mov    ebx,eax
c001208e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012091:	e8 66 9e ff ff       	call   c000befc <Directory::close()>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	85 db                	test   ebx,ebx
c001209b:	74 0c                	je     c00120a9 <SysCloseDir(regs*)+0x3c>
c001209d:	83 ec 0c             	sub    esp,0xc
c00120a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120a2:	53                   	push   ebx
c00120a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120a6:	83 c4 10             	add    esp,0x10
c00120a9:	31 c0                	xor    eax,eax
c00120ab:	31 d2                	xor    edx,edx
c00120ad:	83 c4 08             	add    esp,0x8
c00120b0:	5b                   	pop    ebx
c00120b1:	c3                   	ret    
c00120b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120bc:	83 c4 08             	add    esp,0x8
c00120bf:	5b                   	pop    ebx
c00120c0:	c3                   	ret    

c00120c1 <SysWait(regs*)>:
c00120c1:	83 ec 10             	sub    esp,0x10
c00120c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00120cb:	52                   	push   edx
c00120cc:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00120cf:	51                   	push   ecx
c00120d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00120d3:	50                   	push   eax
c00120d4:	e8 d3 3d 00 00       	call   c0015eac <waitTask(int, int*, int)>
c00120d9:	83 c4 1c             	add    esp,0x1c
c00120dc:	89 c2                	mov    edx,eax
c00120de:	c1 fa 1f             	sar    edx,0x1f
c00120e1:	c3                   	ret    

c00120e2 <SysNotImpl(regs*)>:
c00120e2:	83 ec 18             	sub    esp,0x18
c00120e5:	68 e6 1f 02 c0       	push   0xc0021fe6
c00120ea:	e8 b2 f2 ff ff       	call   c00113a1 <KePanic(char const*)>
c00120ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120f9:	83 c4 1c             	add    esp,0x1c
c00120fc:	c3                   	ret    

c00120fd <SysPanic(regs*)>:
c00120fd:	83 ec 18             	sub    esp,0x18
c0012100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012104:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012107:	50                   	push   eax
c0012108:	e8 94 f2 ff ff       	call   c00113a1 <KePanic(char const*)>
c001210d:	b8 01 00 00 00       	mov    eax,0x1
c0012112:	31 d2                	xor    edx,edx
c0012114:	83 c4 1c             	add    esp,0x1c
c0012117:	c3                   	ret    

c0012118 <SysRmdir(regs*)>:
c0012118:	56                   	push   esi
c0012119:	53                   	push   ebx
c001211a:	83 ec 20             	sub    esp,0x20
c001211d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012121:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012124:	68 14 01 00 00       	push   0x114
c0012129:	e8 88 59 ff ff       	call   c0007ab6 <malloc>
c001212e:	83 c4 0c             	add    esp,0xc
c0012131:	89 c3                	mov    ebx,eax
c0012133:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012138:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001213b:	50                   	push   eax
c001213c:	56                   	push   esi
c001213d:	53                   	push   ebx
c001213e:	e8 0b 97 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0012143:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012146:	e8 99 99 ff ff       	call   c000bae4 <File::unlink()>
c001214b:	83 c4 10             	add    esp,0x10
c001214e:	85 db                	test   ebx,ebx
c0012150:	74 14                	je     c0012166 <SysRmdir(regs*)+0x4e>
c0012152:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012156:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012158:	83 ec 0c             	sub    esp,0xc
c001215b:	53                   	push   ebx
c001215c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001215f:	83 c4 10             	add    esp,0x10
c0012162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012166:	85 c0                	test   eax,eax
c0012168:	0f 95 c0             	setne  al
c001216b:	31 d2                	xor    edx,edx
c001216d:	0f b6 c0             	movzx  eax,al
c0012170:	f7 d8                	neg    eax
c0012172:	83 d2 00             	adc    edx,0x0
c0012175:	83 c4 14             	add    esp,0x14
c0012178:	f7 da                	neg    edx
c001217a:	5b                   	pop    ebx
c001217b:	5e                   	pop    esi
c001217c:	c3                   	ret    

c001217d <SysUnlink(regs*)>:
c001217d:	56                   	push   esi
c001217e:	53                   	push   ebx
c001217f:	83 ec 20             	sub    esp,0x20
c0012182:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012186:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012189:	68 14 01 00 00       	push   0x114
c001218e:	e8 23 59 ff ff       	call   c0007ab6 <malloc>
c0012193:	83 c4 0c             	add    esp,0xc
c0012196:	89 c3                	mov    ebx,eax
c0012198:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001219d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121a0:	50                   	push   eax
c00121a1:	56                   	push   esi
c00121a2:	53                   	push   ebx
c00121a3:	e8 a6 96 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c00121a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121ab:	e8 34 99 ff ff       	call   c000bae4 <File::unlink()>
c00121b0:	83 c4 10             	add    esp,0x10
c00121b3:	85 db                	test   ebx,ebx
c00121b5:	74 14                	je     c00121cb <SysUnlink(regs*)+0x4e>
c00121b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00121bd:	83 ec 0c             	sub    esp,0xc
c00121c0:	53                   	push   ebx
c00121c1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00121c4:	83 c4 10             	add    esp,0x10
c00121c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121cb:	85 c0                	test   eax,eax
c00121cd:	0f 95 c0             	setne  al
c00121d0:	31 d2                	xor    edx,edx
c00121d2:	0f b6 c0             	movzx  eax,al
c00121d5:	f7 d8                	neg    eax
c00121d7:	83 d2 00             	adc    edx,0x0
c00121da:	83 c4 14             	add    esp,0x14
c00121dd:	f7 da                	neg    edx
c00121df:	5b                   	pop    ebx
c00121e0:	5e                   	pop    esi
c00121e1:	c3                   	ret    

c00121e2 <SysGetArgv(regs*)>:
c00121e2:	83 ec 0c             	sub    esp,0xc
c00121e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00121e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00121ec:	85 c0                	test   eax,eax
c00121ee:	78 2c                	js     c001221c <SysGetArgv(regs*)+0x3a>
c00121f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00121f6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00121f9:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00121ff:	7d 1b                	jge    c001221c <SysGetArgv(regs*)+0x3a>
c0012201:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012208:	85 c0                	test   eax,eax
c001220a:	74 18                	je     c0012224 <SysGetArgv(regs*)+0x42>
c001220c:	83 ec 08             	sub    esp,0x8
c001220f:	50                   	push   eax
c0012210:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012213:	50                   	push   eax
c0012214:	e8 27 e4 fe ff       	call   c0000640 <strcpy>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	31 c0                	xor    eax,eax
c001221e:	31 d2                	xor    edx,edx
c0012220:	83 c4 0c             	add    esp,0xc
c0012223:	c3                   	ret    
c0012224:	b8 01 00 00 00       	mov    eax,0x1
c0012229:	31 d2                	xor    edx,edx
c001222b:	83 c4 0c             	add    esp,0xc
c001222e:	c3                   	ret    

c001222f <SysUSleep(regs*)>:
c001222f:	83 ec 1c             	sub    esp,0x1c
c0012232:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012236:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012239:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001223c:	6a 00                	push   0x0
c001223e:	6a 64                	push   0x64
c0012240:	52                   	push   edx
c0012241:	50                   	push   eax
c0012242:	e8 89 d0 00 00       	call   c001f2d0 <__udivdi3>
c0012247:	83 c4 14             	add    esp,0x14
c001224a:	50                   	push   eax
c001224b:	e8 40 3d 00 00       	call   c0015f90 <milliTenthSleep(unsigned int)>
c0012250:	31 c0                	xor    eax,eax
c0012252:	31 d2                	xor    edx,edx
c0012254:	83 c4 1c             	add    esp,0x1c
c0012257:	c3                   	ret    

c0012258 <SysSpawn(regs*)>:
c0012258:	56                   	push   esi
c0012259:	53                   	push   ebx
c001225a:	83 ec 04             	sub    esp,0x4
c001225d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012261:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012264:	85 f6                	test   esi,esi
c0012266:	75 0a                	jne    c0012272 <SysSpawn(regs*)+0x1a>
c0012268:	83 c4 04             	add    esp,0x4
c001226b:	31 c0                	xor    eax,eax
c001226d:	31 d2                	xor    edx,edx
c001226f:	5b                   	pop    ebx
c0012270:	5e                   	pop    esi
c0012271:	c3                   	ret    
c0012272:	83 ec 0c             	sub    esp,0xc
c0012275:	68 24 07 00 00       	push   0x724
c001227a:	e8 37 58 ff ff       	call   c0007ab6 <malloc>
c001227f:	83 c4 10             	add    esp,0x10
c0012282:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012285:	89 c6                	mov    esi,eax
c0012287:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001228a:	85 c9                	test   ecx,ecx
c001228c:	75 39                	jne    c00122c7 <SysSpawn(regs*)+0x6f>
c001228e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012293:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012296:	52                   	push   edx
c0012297:	50                   	push   eax
c0012298:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001229b:	50                   	push   eax
c001229c:	56                   	push   esi
c001229d:	e8 3e 33 00 00       	call   c00155e0 <Process::Process(char const*, Process*, char**)>
c00122a2:	83 c4 10             	add    esp,0x10
c00122a5:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00122ac:	75 ba                	jne    c0012268 <SysSpawn(regs*)+0x10>
c00122ae:	83 ec 0c             	sub    esp,0xc
c00122b1:	56                   	push   esi
c00122b2:	e8 65 38 00 00       	call   c0015b1c <Process::createUserThread()>
c00122b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00122b9:	83 c4 10             	add    esp,0x10
c00122bc:	89 c2                	mov    edx,eax
c00122be:	83 c4 04             	add    esp,0x4
c00122c1:	c1 fa 1f             	sar    edx,0x1f
c00122c4:	5b                   	pop    ebx
c00122c5:	5e                   	pop    esi
c00122c6:	c3                   	ret    
c00122c7:	31 c0                	xor    eax,eax
c00122c9:	eb cb                	jmp    c0012296 <SysSpawn(regs*)+0x3e>

c00122cb <SysGetEnv(regs*)>:
c00122cb:	57                   	push   edi
c00122cc:	56                   	push   esi
c00122cd:	53                   	push   ebx
c00122ce:	83 ec 1c             	sub    esp,0x1c
c00122d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00122d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122da:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122dd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122e0:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122e3:	51                   	push   ecx
c00122e4:	e8 70 ef ff ff       	call   c0011259 <KeGetProcessTotalEnvCount(Process*)>
c00122e9:	83 c4 10             	add    esp,0x10
c00122ec:	39 c7                	cmp    edi,eax
c00122ee:	7c 14                	jl     c0012304 <SysGetEnv(regs*)+0x39>
c00122f0:	85 f6                	test   esi,esi
c00122f2:	75 0b                	jne    c00122ff <SysGetEnv(regs*)+0x34>
c00122f4:	83 c4 10             	add    esp,0x10
c00122f7:	31 c0                	xor    eax,eax
c00122f9:	5b                   	pop    ebx
c00122fa:	31 d2                	xor    edx,edx
c00122fc:	5e                   	pop    esi
c00122fd:	5f                   	pop    edi
c00122fe:	c3                   	ret    
c00122ff:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012302:	eb f0                	jmp    c00122f4 <SysGetEnv(regs*)+0x29>
c0012304:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012308:	83 ec 04             	sub    esp,0x4
c001230b:	57                   	push   edi
c001230c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012312:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012315:	57                   	push   edi
c0012316:	50                   	push   eax
c0012317:	e8 5d ef ff ff       	call   c0011279 <KeGetProcessEnvPair(Process*, int)>
c001231c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001231f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012323:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012327:	83 c4 0c             	add    esp,0xc
c001232a:	85 d2                	test   edx,edx
c001232c:	75 23                	jne    c0012351 <SysGetEnv(regs*)+0x86>
c001232e:	83 ec 0c             	sub    esp,0xc
c0012331:	50                   	push   eax
c0012332:	e8 39 e2 fe ff       	call   c0000570 <strlen>
c0012337:	89 3c 24             	mov    DWORD PTR [esp],edi
c001233a:	89 c3                	mov    ebx,eax
c001233c:	e8 2f e2 fe ff       	call   c0000570 <strlen>
c0012341:	83 c4 10             	add    esp,0x10
c0012344:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012348:	83 c4 10             	add    esp,0x10
c001234b:	31 d2                	xor    edx,edx
c001234d:	5b                   	pop    ebx
c001234e:	5e                   	pop    esi
c001234f:	5f                   	pop    edi
c0012350:	c3                   	ret    
c0012351:	83 ec 08             	sub    esp,0x8
c0012354:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012357:	50                   	push   eax
c0012358:	56                   	push   esi
c0012359:	e8 e2 e2 fe ff       	call   c0000640 <strcpy>
c001235e:	58                   	pop    eax
c001235f:	5a                   	pop    edx
c0012360:	68 00 20 02 c0       	push   0xc0022000
c0012365:	56                   	push   esi
c0012366:	e8 d5 e4 fe ff       	call   c0000840 <strcat>
c001236b:	59                   	pop    ecx
c001236c:	5b                   	pop    ebx
c001236d:	57                   	push   edi
c001236e:	56                   	push   esi
c001236f:	e8 cc e4 fe ff       	call   c0000840 <strcat>
c0012374:	83 c4 10             	add    esp,0x10
c0012377:	e9 78 ff ff ff       	jmp    c00122f4 <SysGetEnv(regs*)+0x29>

c001237c <SysSetFatAttrib(regs*)>:
c001237c:	57                   	push   edi
c001237d:	56                   	push   esi
c001237e:	53                   	push   ebx
c001237f:	83 ec 1c             	sub    esp,0x1c
c0012382:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012386:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012389:	68 14 01 00 00       	push   0x114
c001238e:	e8 23 57 ff ff       	call   c0007ab6 <malloc>
c0012393:	83 c4 0c             	add    esp,0xc
c0012396:	89 c3                	mov    ebx,eax
c0012398:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001239d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123a0:	50                   	push   eax
c00123a1:	57                   	push   edi
c00123a2:	53                   	push   ebx
c00123a3:	e8 a6 94 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c00123a8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00123ab:	83 c4 0c             	add    esp,0xc
c00123ae:	0f b6 d4             	movzx  edx,ah
c00123b1:	0f b6 c0             	movzx  eax,al
c00123b4:	52                   	push   edx
c00123b5:	50                   	push   eax
c00123b6:	53                   	push   ebx
c00123b7:	e8 c2 97 ff ff       	call   c000bb7e <File::chfatattr(unsigned char, unsigned char)>
c00123bc:	83 c4 10             	add    esp,0x10
c00123bf:	85 db                	test   ebx,ebx
c00123c1:	74 14                	je     c00123d7 <SysSetFatAttrib(regs*)+0x5b>
c00123c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123c7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00123c9:	83 ec 0c             	sub    esp,0xc
c00123cc:	53                   	push   ebx
c00123cd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00123d0:	83 c4 10             	add    esp,0x10
c00123d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123d7:	85 c0                	test   eax,eax
c00123d9:	0f 95 c0             	setne  al
c00123dc:	31 d2                	xor    edx,edx
c00123de:	0f b6 c0             	movzx  eax,al
c00123e1:	f7 d8                	neg    eax
c00123e3:	83 d2 00             	adc    edx,0x0
c00123e6:	83 c4 10             	add    esp,0x10
c00123e9:	f7 da                	neg    edx
c00123eb:	5b                   	pop    ebx
c00123ec:	5e                   	pop    esi
c00123ed:	5f                   	pop    edi
c00123ee:	c3                   	ret    

c00123ef <SysPipe(regs*)>:
c00123ef:	57                   	push   edi
c00123f0:	56                   	push   esi
c00123f1:	53                   	push   ebx
c00123f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123f6:	83 ec 0c             	sub    esp,0xc
c00123f9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00123fc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00123ff:	6a 20                	push   0x20
c0012401:	e8 b0 56 ff ff       	call   c0007ab6 <malloc>
c0012406:	89 c3                	mov    ebx,eax
c0012408:	58                   	pop    eax
c0012409:	5a                   	pop    edx
c001240a:	68 00 50 00 00       	push   0x5000
c001240f:	53                   	push   ebx
c0012410:	e8 13 60 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012415:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012418:	e8 99 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001241d:	89 07                	mov    DWORD PTR [edi],eax
c001241f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012422:	e8 8f 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012427:	83 c4 10             	add    esp,0x10
c001242a:	89 06                	mov    DWORD PTR [esi],eax
c001242c:	31 d2                	xor    edx,edx
c001242e:	5b                   	pop    ebx
c001242f:	31 c0                	xor    eax,eax
c0012431:	5e                   	pop    esi
c0012432:	5f                   	pop    edi
c0012433:	c3                   	ret    

c0012434 <SysGetUnixTime(regs*)>:
c0012434:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012439:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001243f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012443:	e9 7e 9e ff ff       	jmp    c000c2c6 <Clock::timeInSecondsLocal()>

c0012448 <string_ends_with(char const*, char const*)>:
c0012448:	57                   	push   edi
c0012449:	56                   	push   esi
c001244a:	53                   	push   ebx
c001244b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001244f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012453:	83 ec 0c             	sub    esp,0xc
c0012456:	53                   	push   ebx
c0012457:	e8 14 e1 fe ff       	call   c0000570 <strlen>
c001245c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001245f:	89 c6                	mov    esi,eax
c0012461:	e8 0a e1 fe ff       	call   c0000570 <strlen>
c0012466:	83 c4 10             	add    esp,0x10
c0012469:	39 c6                	cmp    esi,eax
c001246b:	7d 06                	jge    c0012473 <string_ends_with(char const*, char const*)+0x2b>
c001246d:	5b                   	pop    ebx
c001246e:	31 c0                	xor    eax,eax
c0012470:	5e                   	pop    esi
c0012471:	5f                   	pop    edi
c0012472:	c3                   	ret    
c0012473:	83 ec 08             	sub    esp,0x8
c0012476:	29 c6                	sub    esi,eax
c0012478:	57                   	push   edi
c0012479:	01 f3                	add    ebx,esi
c001247b:	53                   	push   ebx
c001247c:	e8 cf e2 fe ff       	call   c0000750 <strcmp>
c0012481:	83 c4 10             	add    esp,0x10
c0012484:	85 c0                	test   eax,eax
c0012486:	5b                   	pop    ebx
c0012487:	0f 94 c0             	sete   al
c001248a:	5e                   	pop    esi
c001248b:	0f b6 c0             	movzx  eax,al
c001248e:	5f                   	pop    edi
c001248f:	c3                   	ret    

c0012490 <SysOpen(regs*)>:
c0012490:	56                   	push   esi
c0012491:	53                   	push   ebx
c0012492:	81 ec 04 01 00 00    	sub    esp,0x104
c0012498:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001249f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124a2:	85 c0                	test   eax,eax
c00124a4:	0f 84 bc 01 00 00    	je     c0012666 <SysOpen(regs*)+0x1d6>
c00124aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124ad:	85 c0                	test   eax,eax
c00124af:	0f 84 b1 01 00 00    	je     c0012666 <SysOpen(regs*)+0x1d6>
c00124b5:	6a 00                	push   0x0
c00124b7:	68 02 20 02 c0       	push   0xc0022002
c00124bc:	50                   	push   eax
c00124bd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00124c1:	56                   	push   esi
c00124c2:	e8 23 91 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00124c7:	89 34 24             	mov    DWORD PTR [esp],esi
c00124ca:	e8 a1 e0 fe ff       	call   c0000570 <strlen>
c00124cf:	83 c4 10             	add    esp,0x10
c00124d2:	83 e8 01             	sub    eax,0x1
c00124d5:	74 21                	je     c00124f8 <SysOpen(regs*)+0x68>
c00124d7:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00124db:	eb 12                	jmp    c00124ef <SysOpen(regs*)+0x5f>
c00124dd:	83 fa 3a             	cmp    edx,0x3a
c00124e0:	74 12                	je     c00124f4 <SysOpen(regs*)+0x64>
c00124e2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00124e6:	83 e8 01             	sub    eax,0x1
c00124e9:	74 0d                	je     c00124f8 <SysOpen(regs*)+0x68>
c00124eb:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00124ef:	83 fa 2e             	cmp    edx,0x2e
c00124f2:	75 e9                	jne    c00124dd <SysOpen(regs*)+0x4d>
c00124f4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00124f8:	83 ec 08             	sub    esp,0x8
c00124fb:	68 06 20 02 c0       	push   0xc0022006
c0012500:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012503:	50                   	push   eax
c0012504:	e8 3f ff ff ff       	call   c0012448 <string_ends_with(char const*, char const*)>
c0012509:	83 c4 10             	add    esp,0x10
c001250c:	85 c0                	test   eax,eax
c001250e:	74 1d                	je     c001252d <SysOpen(regs*)+0x9d>
c0012510:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012513:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012519:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012520:	81 c4 04 01 00 00    	add    esp,0x104
c0012526:	31 c0                	xor    eax,eax
c0012528:	31 d2                	xor    edx,edx
c001252a:	5b                   	pop    ebx
c001252b:	5e                   	pop    esi
c001252c:	c3                   	ret    
c001252d:	83 ec 08             	sub    esp,0x8
c0012530:	68 0b 20 02 c0       	push   0xc002200b
c0012535:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012538:	50                   	push   eax
c0012539:	e8 0a ff ff ff       	call   c0012448 <string_ends_with(char const*, char const*)>
c001253e:	83 c4 10             	add    esp,0x10
c0012541:	85 c0                	test   eax,eax
c0012543:	75 cb                	jne    c0012510 <SysOpen(regs*)+0x80>
c0012545:	83 ec 08             	sub    esp,0x8
c0012548:	68 07 20 02 c0       	push   0xc0022007
c001254d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012550:	50                   	push   eax
c0012551:	e8 fa e1 fe ff       	call   c0000750 <strcmp>
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	85 c0                	test   eax,eax
c001255b:	74 b3                	je     c0012510 <SysOpen(regs*)+0x80>
c001255d:	83 ec 08             	sub    esp,0x8
c0012560:	68 06 20 02 c0       	push   0xc0022006
c0012565:	56                   	push   esi
c0012566:	e8 dd fe ff ff       	call   c0012448 <string_ends_with(char const*, char const*)>
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	85 c0                	test   eax,eax
c0012570:	75 9e                	jne    c0012510 <SysOpen(regs*)+0x80>
c0012572:	83 ec 08             	sub    esp,0x8
c0012575:	68 10 20 02 c0       	push   0xc0022010
c001257a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001257d:	50                   	push   eax
c001257e:	e8 c5 fe ff ff       	call   c0012448 <string_ends_with(char const*, char const*)>
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	85 c0                	test   eax,eax
c0012588:	0f 85 eb 00 00 00    	jne    c0012679 <SysOpen(regs*)+0x1e9>
c001258e:	83 ec 08             	sub    esp,0x8
c0012591:	68 15 20 02 c0       	push   0xc0022015
c0012596:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012599:	50                   	push   eax
c001259a:	e8 a9 fe ff ff       	call   c0012448 <string_ends_with(char const*, char const*)>
c001259f:	83 c4 10             	add    esp,0x10
c00125a2:	85 c0                	test   eax,eax
c00125a4:	0f 85 cf 00 00 00    	jne    c0012679 <SysOpen(regs*)+0x1e9>
c00125aa:	83 ec 08             	sub    esp,0x8
c00125ad:	68 11 20 02 c0       	push   0xc0022011
c00125b2:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00125b5:	51                   	push   ecx
c00125b6:	e8 95 e1 fe ff       	call   c0000750 <strcmp>
c00125bb:	83 c4 10             	add    esp,0x10
c00125be:	85 c0                	test   eax,eax
c00125c0:	0f 84 b3 00 00 00    	je     c0012679 <SysOpen(regs*)+0x1e9>
c00125c6:	83 ec 08             	sub    esp,0x8
c00125c9:	68 10 20 02 c0       	push   0xc0022010
c00125ce:	56                   	push   esi
c00125cf:	e8 74 fe ff ff       	call   c0012448 <string_ends_with(char const*, char const*)>
c00125d4:	83 c4 10             	add    esp,0x10
c00125d7:	85 c0                	test   eax,eax
c00125d9:	0f 85 9a 00 00 00    	jne    c0012679 <SysOpen(regs*)+0x1e9>
c00125df:	83 ec 0c             	sub    esp,0xc
c00125e2:	68 14 01 00 00       	push   0x114
c00125e7:	e8 ca 54 ff ff       	call   c0007ab6 <malloc>
c00125ec:	83 c4 0c             	add    esp,0xc
c00125ef:	89 c6                	mov    esi,eax
c00125f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125f9:	50                   	push   eax
c00125fa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00125fd:	52                   	push   edx
c00125fe:	56                   	push   esi
c00125ff:	e8 4a 92 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0012604:	83 c4 10             	add    esp,0x10
c0012607:	85 f6                	test   esi,esi
c0012609:	74 5b                	je     c0012666 <SysOpen(regs*)+0x1d6>
c001260b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001260e:	0f b6 c2             	movzx  eax,dl
c0012611:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012614:	89 d0                	mov    eax,edx
c0012616:	83 e0 01             	and    eax,0x1
c0012619:	f6 c2 02             	test   dl,0x2
c001261c:	74 03                	je     c0012621 <SysOpen(regs*)+0x191>
c001261e:	83 c8 02             	or     eax,0x2
c0012621:	f6 c2 04             	test   dl,0x4
c0012624:	74 03                	je     c0012629 <SysOpen(regs*)+0x199>
c0012626:	83 c8 04             	or     eax,0x4
c0012629:	f6 c2 08             	test   dl,0x8
c001262c:	74 03                	je     c0012631 <SysOpen(regs*)+0x1a1>
c001262e:	83 c8 0a             	or     eax,0xa
c0012631:	80 e2 10             	and    dl,0x10
c0012634:	74 03                	je     c0012639 <SysOpen(regs*)+0x1a9>
c0012636:	83 c8 12             	or     eax,0x12
c0012639:	83 ec 08             	sub    esp,0x8
c001263c:	50                   	push   eax
c001263d:	56                   	push   esi
c001263e:	e8 d3 92 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c0012643:	83 c4 10             	add    esp,0x10
c0012646:	85 c0                	test   eax,eax
c0012648:	75 1c                	jne    c0012666 <SysOpen(regs*)+0x1d6>
c001264a:	83 ec 0c             	sub    esp,0xc
c001264d:	56                   	push   esi
c001264e:	e8 63 6b ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012653:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012656:	83 c4 10             	add    esp,0x10
c0012659:	89 02                	mov    DWORD PTR [edx],eax
c001265b:	c1 f8 1f             	sar    eax,0x1f
c001265e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012661:	e9 ba fe ff ff       	jmp    c0012520 <SysOpen(regs*)+0x90>
c0012666:	81 c4 04 01 00 00    	add    esp,0x104
c001266c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012671:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012676:	5b                   	pop    ebx
c0012677:	5e                   	pop    esi
c0012678:	c3                   	ret    
c0012679:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001267c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012682:	e9 92 fe ff ff       	jmp    c0012519 <SysOpen(regs*)+0x89>

c0012687 <KeSystemCall(regs*, void*)>:
c0012687:	53                   	push   ebx
c0012688:	83 ec 08             	sub    esp,0x8
c001268b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001268f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012692:	83 f8 3b             	cmp    eax,0x3b
c0012695:	77 16                	ja     c00126ad <KeSystemCall(regs*, void*)+0x26>
c0012697:	8b 14 85 20 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcbe0]
c001269e:	85 d2                	test   edx,edx
c00126a0:	74 0b                	je     c00126ad <KeSystemCall(regs*, void*)+0x26>
c00126a2:	83 ec 0c             	sub    esp,0xc
c00126a5:	53                   	push   ebx
c00126a6:	ff d2                	call   edx
c00126a8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00126ab:	eb 0d                	jmp    c00126ba <KeSystemCall(regs*, void*)+0x33>
c00126ad:	52                   	push   edx
c00126ae:	52                   	push   edx
c00126af:	50                   	push   eax
c00126b0:	68 1a 20 02 c0       	push   0xc002201a
c00126b5:	e8 8b 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00126ba:	83 c4 10             	add    esp,0x10
c00126bd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00126c2:	31 d2                	xor    edx,edx
c00126c4:	83 c4 08             	add    esp,0x8
c00126c7:	5b                   	pop    ebx
c00126c8:	c3                   	ret    
c00126c9:	66 90                	xchg   ax,ax
c00126cb:	90                   	nop

c00126cc <KeSwitchEndian16(unsigned short)>:
c00126cc:	83 ec 04             	sub    esp,0x4
c00126cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126d3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00126d7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00126db:	c1 f8 08             	sar    eax,0x8
c00126de:	89 c2                	mov    edx,eax
c00126e0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00126e4:	c1 e0 08             	shl    eax,0x8
c00126e7:	09 d0                	or     eax,edx
c00126e9:	83 c4 04             	add    esp,0x4
c00126ec:	c3                   	ret    
c00126ed:	8d 76 00             	lea    esi,[esi+0x0]

c00126f0 <KeSwitchEndian32(unsigned int)>:
c00126f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126f4:	c1 e8 18             	shr    eax,0x18
c00126f7:	89 c2                	mov    edx,eax
c00126f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126fd:	c1 e0 08             	shl    eax,0x8
c0012700:	25 00 00 ff 00       	and    eax,0xff0000
c0012705:	09 c2                	or     edx,eax
c0012707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001270b:	c1 e8 08             	shr    eax,0x8
c001270e:	25 00 ff 00 00       	and    eax,0xff00
c0012713:	09 c2                	or     edx,eax
c0012715:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012719:	c1 e0 18             	shl    eax,0x18
c001271c:	09 d0                	or     eax,edx
c001271e:	c3                   	ret    
c001271f:	90                   	nop

c0012720 <EthernetCRC32(unsigned char*, int)>:
c0012720:	83 ec 10             	sub    esp,0x10
c0012723:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012728:	75 0a                	jne    c0012734 <EthernetCRC32(unsigned char*, int)+0x14>
c001272a:	b8 00 00 00 00       	mov    eax,0x0
c001272f:	e9 8c 00 00 00       	jmp    c00127c0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012734:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012739:	7f 09                	jg     c0012744 <EthernetCRC32(unsigned char*, int)+0x24>
c001273b:	b8 00 00 00 00       	mov    eax,0x0
c0012740:	eb 7e                	jmp    c00127c0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012742:	66 90                	xchg   ax,ax
c0012744:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001274c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012758:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001275c:	7d 5a                	jge    c00127b8 <EthernetCRC32(unsigned char*, int)+0x98>
c001275e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012762:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012766:	01 d0                	add    eax,edx
c0012768:	8a 00                	mov    al,BYTE PTR [eax]
c001276a:	0f b6 c0             	movzx  eax,al
c001276d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012779:	8d 76 00             	lea    esi,[esi+0x0]
c001277c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012781:	7f 2d                	jg     c00127b0 <EthernetCRC32(unsigned char*, int)+0x90>
c0012783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012787:	83 e0 01             	and    eax,0x1
c001278a:	74 10                	je     c001279c <EthernetCRC32(unsigned char*, int)+0x7c>
c001278c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012790:	d1 e8                	shr    eax,1
c0012792:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012797:	eb 0b                	jmp    c00127a4 <EthernetCRC32(unsigned char*, int)+0x84>
c0012799:	8d 76 00             	lea    esi,[esi+0x0]
c001279c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127a0:	d1 e8                	shr    eax,1
c00127a2:	66 90                	xchg   ax,ax
c00127a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127a8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00127ad:	eb cd                	jmp    c001277c <EthernetCRC32(unsigned char*, int)+0x5c>
c00127af:	90                   	nop
c00127b0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00127b5:	eb 9d                	jmp    c0012754 <EthernetCRC32(unsigned char*, int)+0x34>
c00127b7:	90                   	nop
c00127b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127bc:	f7 d0                	not    eax
c00127be:	66 90                	xchg   ax,ax
c00127c0:	83 c4 10             	add    esp,0x10
c00127c3:	c3                   	ret    

c00127c4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00127c4:	83 ec 2c             	sub    esp,0x2c
c00127c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00127d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127df:	0f b7 c0             	movzx  eax,ax
c00127e2:	3d 06 08 00 00       	cmp    eax,0x806
c00127e7:	75 13                	jne    c00127fc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00127e9:	83 ec 0c             	sub    esp,0xc
c00127ec:	68 2e 20 02 c0       	push   0xc002202e
c00127f1:	e8 4f 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00127f6:	83 c4 10             	add    esp,0x10
c00127f9:	eb 25                	jmp    c0012820 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00127fb:	90                   	nop
c00127fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012800:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012803:	0f b7 c0             	movzx  eax,ax
c0012806:	3d 00 08 00 00       	cmp    eax,0x800
c001280b:	75 13                	jne    c0012820 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001280d:	83 ec 0c             	sub    esp,0xc
c0012810:	68 44 20 02 c0       	push   0xc0022044
c0012815:	e8 2b 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001281a:	83 c4 10             	add    esp,0x10
c001281d:	8d 76 00             	lea    esi,[esi+0x0]
c0012820:	90                   	nop
c0012821:	83 c4 2c             	add    esp,0x2c
c0012824:	c3                   	ret    

c0012825 <CmOpen(char const*)>:
c0012825:	57                   	push   edi
c0012826:	56                   	push   esi
c0012827:	53                   	push   ebx
c0012828:	83 ec 1c             	sub    esp,0x1c
c001282b:	6a 30                	push   0x30
c001282d:	e8 84 52 ff ff       	call   c0007ab6 <malloc>
c0012832:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012839:	89 c3                	mov    ebx,eax
c001283b:	e8 76 52 ff ff       	call   c0007ab6 <malloc>
c0012840:	83 c4 0c             	add    esp,0xc
c0012843:	89 c6                	mov    esi,eax
c0012845:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001284b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001284f:	50                   	push   eax
c0012850:	e8 f9 8f ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0012855:	83 c4 0c             	add    esp,0xc
c0012858:	89 33                	mov    DWORD PTR [ebx],esi
c001285a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001285e:	50                   	push   eax
c001285f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012863:	50                   	push   eax
c0012864:	56                   	push   esi
c0012865:	e8 ae 93 ff ff       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c001286a:	5a                   	pop    edx
c001286b:	59                   	pop    ecx
c001286c:	6a 01                	push   0x1
c001286e:	ff 33                	push   DWORD PTR [ebx]
c0012870:	e8 a1 90 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c0012875:	5e                   	pop    esi
c0012876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001287a:	e8 37 52 ff ff       	call   c0007ab6 <malloc>
c001287f:	5a                   	pop    edx
c0012880:	89 c7                	mov    edi,eax
c0012882:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012886:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012888:	8b 10                	mov    edx,DWORD PTR [eax]
c001288a:	56                   	push   esi
c001288b:	57                   	push   edi
c001288c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012890:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012894:	50                   	push   eax
c0012895:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012898:	83 c4 14             	add    esp,0x14
c001289b:	ff 33                	push   DWORD PTR [ebx]
c001289d:	e8 d2 90 ff ff       	call   c000b974 <File::close()>
c00128a2:	59                   	pop    ecx
c00128a3:	58                   	pop    eax
c00128a4:	6a 13                	push   0x13
c00128a6:	ff 33                	push   DWORD PTR [ebx]
c00128a8:	e8 69 90 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c00128ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128af:	8b 10                	mov    edx,DWORD PTR [eax]
c00128b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00128b4:	57                   	push   edi
c00128b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128bd:	50                   	push   eax
c00128be:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00128c1:	83 c4 14             	add    esp,0x14
c00128c4:	57                   	push   edi
c00128c5:	e8 fc 51 ff ff       	call   c0007ac6 <free>
c00128ca:	83 c4 10             	add    esp,0x10
c00128cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00128d0:	75 10                	jne    c00128e2 <CmOpen(char const*)+0xbd>
c00128d2:	83 ec 0c             	sub    esp,0xc
c00128d5:	68 59 20 02 c0       	push   0xc0022059
c00128da:	e8 c2 ea ff ff       	call   c00113a1 <KePanic(char const*)>
c00128df:	83 c4 10             	add    esp,0x10
c00128e2:	8d 7b 05             	lea    edi,[ebx+0x5]
c00128e5:	50                   	push   eax
c00128e6:	6a 00                	push   0x0
c00128e8:	6a 00                	push   0x0
c00128ea:	ff 33                	push   DWORD PTR [ebx]
c00128ec:	e8 e3 90 ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c00128f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00128f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00128f8:	57                   	push   edi
c00128f9:	6a 00                	push   0x0
c00128fb:	6a 2b                	push   0x2b
c00128fd:	50                   	push   eax
c00128fe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012901:	83 c4 1c             	add    esp,0x1c
c0012904:	6a 00                	push   0x0
c0012906:	6a 00                	push   0x0
c0012908:	ff 33                	push   DWORD PTR [ebx]
c001290a:	e8 c5 90 ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c001290f:	83 c4 0c             	add    esp,0xc
c0012912:	6a 08                	push   0x8
c0012914:	68 6a 20 02 c0       	push   0xc002206a
c0012919:	57                   	push   edi
c001291a:	e8 61 da fe ff       	call   c0000380 <memcmp>
c001291f:	83 c4 10             	add    esp,0x10
c0012922:	85 c0                	test   eax,eax
c0012924:	74 10                	je     c0012936 <CmOpen(char const*)+0x111>
c0012926:	83 ec 0c             	sub    esp,0xc
c0012929:	68 73 20 02 c0       	push   0xc0022073
c001292e:	e8 6e ea ff ff       	call   c00113a1 <KePanic(char const*)>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001293a:	89 d8                	mov    eax,ebx
c001293c:	83 c4 10             	add    esp,0x10
c001293f:	5b                   	pop    ebx
c0012940:	5e                   	pop    esi
c0012941:	5f                   	pop    edi
c0012942:	c3                   	ret    

c0012943 <CmClose(Reghive_Tag*)>:
c0012943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012947:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001294b:	74 0b                	je     c0012958 <CmClose(Reghive_Tag*)+0x15>
c001294d:	8b 00                	mov    eax,DWORD PTR [eax]
c001294f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012953:	e9 1c 90 ff ff       	jmp    c000b974 <File::close()>
c0012958:	c3                   	ret    

c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012959:	53                   	push   ebx
c001295a:	83 ec 18             	sub    esp,0x18
c001295d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012961:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012965:	74 29                	je     c0012990 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012967:	50                   	push   eax
c0012968:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001296d:	99                   	cdq    
c001296e:	52                   	push   edx
c001296f:	50                   	push   eax
c0012970:	ff 33                	push   DWORD PTR [ebx]
c0012972:	e8 5d 90 ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0012977:	5a                   	pop    edx
c0012978:	8b 03                	mov    eax,DWORD PTR [ebx]
c001297a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001297e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012980:	51                   	push   ecx
c0012981:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012985:	6a 00                	push   0x0
c0012987:	6a 2b                	push   0x2b
c0012989:	50                   	push   eax
c001298a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001298d:	83 c4 20             	add    esp,0x20
c0012990:	83 c4 18             	add    esp,0x18
c0012993:	5b                   	pop    ebx
c0012994:	c3                   	ret    

c0012995 <CmGetString(Reghive_Tag*, int, char*)>:
c0012995:	55                   	push   ebp
c0012996:	57                   	push   edi
c0012997:	56                   	push   esi
c0012998:	53                   	push   ebx
c0012999:	31 db                	xor    ebx,ebx
c001299b:	83 ec 70             	sub    esp,0x70
c001299e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00129a5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00129a9:	50                   	push   eax
c00129aa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00129b1:	55                   	push   ebp
c00129b2:	e8 a2 ff ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00129bf:	c1 e0 08             	shl    eax,0x8
c00129c2:	89 c2                	mov    edx,eax
c00129c4:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00129c9:	09 d0                	or     eax,edx
c00129cb:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00129d0:	c1 e0 08             	shl    eax,0x8
c00129d3:	09 d0                	or     eax,edx
c00129d5:	74 25                	je     c00129fc <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00129d7:	6b fb 0d             	imul   edi,ebx,0xd
c00129da:	52                   	push   edx
c00129db:	8d 54 24 39          	lea    edx,[esp+0x39]
c00129df:	52                   	push   edx
c00129e0:	50                   	push   eax
c00129e1:	55                   	push   ebp
c00129e2:	e8 72 ff ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129e7:	8d 74 24 49          	lea    esi,[esp+0x49]
c00129eb:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00129f2:	b9 27 00 00 00       	mov    ecx,0x27
c00129f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	83 c3 03             	add    ebx,0x3
c00129ff:	83 fb 15             	cmp    ebx,0x15
c0012a02:	75 b6                	jne    c00129ba <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012a04:	83 c4 6c             	add    esp,0x6c
c0012a07:	5b                   	pop    ebx
c0012a08:	5e                   	pop    esi
c0012a09:	5f                   	pop    edi
c0012a0a:	5d                   	pop    ebp
c0012a0b:	c3                   	ret    

c0012a0c <CmEnterDirectory(Reghive_Tag*, int)>:
c0012a0c:	83 ec 40             	sub    esp,0x40
c0012a0f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a13:	50                   	push   eax
c0012a14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a1c:	e8 38 ff ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a21:	83 c4 10             	add    esp,0x10
c0012a24:	83 c8 ff             	or     eax,0xffffffff
c0012a27:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012a2c:	75 19                	jne    c0012a47 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012a2e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012a33:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012a38:	c1 e0 08             	shl    eax,0x8
c0012a3b:	09 c2                	or     edx,eax
c0012a3d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012a42:	c1 e0 10             	shl    eax,0x10
c0012a45:	09 d0                	or     eax,edx
c0012a47:	83 c4 3c             	add    esp,0x3c
c0012a4a:	c3                   	ret    

c0012a4b <CmGetNext(Reghive_Tag*, int)>:
c0012a4b:	83 ec 40             	sub    esp,0x40
c0012a4e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012a52:	50                   	push   eax
c0012a53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a5b:	e8 f9 fe ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a60:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012a65:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012a6a:	c1 e0 08             	shl    eax,0x8
c0012a6d:	09 c2                	or     edx,eax
c0012a6f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012a74:	83 c4 4c             	add    esp,0x4c
c0012a77:	c1 e0 10             	shl    eax,0x10
c0012a7a:	09 d0                	or     eax,edx
c0012a7c:	c3                   	ret    

c0012a7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 18             	sub    esp,0x18
c0012a81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a85:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a89:	74 29                	je     c0012ab4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012a8b:	50                   	push   eax
c0012a8c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012a91:	99                   	cdq    
c0012a92:	52                   	push   edx
c0012a93:	50                   	push   eax
c0012a94:	ff 33                	push   DWORD PTR [ebx]
c0012a96:	e8 39 8f ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0012a9b:	5a                   	pop    edx
c0012a9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a9e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012aa2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aa4:	51                   	push   ecx
c0012aa5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012aa9:	6a 00                	push   0x0
c0012aab:	6a 2b                	push   0x2b
c0012aad:	50                   	push   eax
c0012aae:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ab1:	83 c4 20             	add    esp,0x20
c0012ab4:	83 c4 18             	add    esp,0x18
c0012ab7:	5b                   	pop    ebx
c0012ab8:	c3                   	ret    

c0012ab9 <CmFreeExtent(Reghive_Tag*, int)>:
c0012ab9:	53                   	push   ebx
c0012aba:	83 ec 3c             	sub    esp,0x3c
c0012abd:	6a 2b                	push   0x2b
c0012abf:	6a 00                	push   0x0
c0012ac1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ac5:	53                   	push   ebx
c0012ac6:	e8 25 da fe ff       	call   c00004f0 <memset>
c0012acb:	83 c4 0c             	add    esp,0xc
c0012ace:	53                   	push   ebx
c0012acf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ad3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ad7:	e8 a1 ff ff ff       	call   c0012a7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012adc:	83 c4 48             	add    esp,0x48
c0012adf:	5b                   	pop    ebx
c0012ae0:	c3                   	ret    

c0012ae1 <CmUpdateHeader(Reghive_Tag*)>:
c0012ae1:	83 ec 0c             	sub    esp,0xc
c0012ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012aec:	74 10                	je     c0012afe <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012aee:	52                   	push   edx
c0012aef:	8d 50 05             	lea    edx,[eax+0x5]
c0012af2:	52                   	push   edx
c0012af3:	6a 00                	push   0x0
c0012af5:	50                   	push   eax
c0012af6:	e8 82 ff ff ff       	call   c0012a7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012afb:	83 c4 10             	add    esp,0x10
c0012afe:	83 c4 0c             	add    esp,0xc
c0012b01:	c3                   	ret    

c0012b02 <CmExpand(Reghive_Tag*, int)>:
c0012b02:	57                   	push   edi
c0012b03:	56                   	push   esi
c0012b04:	83 ce ff             	or     esi,0xffffffff
c0012b07:	53                   	push   ebx
c0012b08:	83 ec 30             	sub    esp,0x30
c0012b0b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012b0f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012b13:	74 5f                	je     c0012b74 <CmExpand(Reghive_Tag*, int)+0x72>
c0012b15:	31 d2                	xor    edx,edx
c0012b17:	31 f6                	xor    esi,esi
c0012b19:	50                   	push   eax
c0012b1a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012b1e:	52                   	push   edx
c0012b1f:	50                   	push   eax
c0012b20:	ff 33                	push   DWORD PTR [ebx]
c0012b22:	e8 ad 8e ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0012b27:	83 c4 0c             	add    esp,0xc
c0012b2a:	6a 2b                	push   0x2b
c0012b2c:	6a 00                	push   0x0
c0012b2e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012b32:	57                   	push   edi
c0012b33:	e8 b8 d9 fe ff       	call   c00004f0 <memset>
c0012b38:	83 c4 10             	add    esp,0x10
c0012b3b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012b3f:	7d 1b                	jge    c0012b5c <CmExpand(Reghive_Tag*, int)+0x5a>
c0012b41:	83 ec 0c             	sub    esp,0xc
c0012b44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b46:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012b4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b4c:	46                   	inc    esi
c0012b4d:	51                   	push   ecx
c0012b4e:	57                   	push   edi
c0012b4f:	6a 00                	push   0x0
c0012b51:	6a 2b                	push   0x2b
c0012b53:	50                   	push   eax
c0012b54:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012b57:	83 c4 20             	add    esp,0x20
c0012b5a:	eb df                	jmp    c0012b3b <CmExpand(Reghive_Tag*, int)+0x39>
c0012b5c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012b60:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012b63:	83 ec 0c             	sub    esp,0xc
c0012b66:	01 f2                	add    edx,esi
c0012b68:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012b6b:	53                   	push   ebx
c0012b6c:	e8 70 ff ff ff       	call   c0012ae1 <CmUpdateHeader(Reghive_Tag*)>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	83 c4 30             	add    esp,0x30
c0012b77:	89 f0                	mov    eax,esi
c0012b79:	5b                   	pop    ebx
c0012b7a:	5e                   	pop    esi
c0012b7b:	5f                   	pop    edi
c0012b7c:	c3                   	ret    

c0012b7d <CmFindUnusedExtent(Reghive_Tag*)>:
c0012b7d:	55                   	push   ebp
c0012b7e:	57                   	push   edi
c0012b7f:	56                   	push   esi
c0012b80:	53                   	push   ebx
c0012b81:	83 cb ff             	or     ebx,0xffffffff
c0012b84:	83 ec 1c             	sub    esp,0x1c
c0012b87:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012b8b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012b8f:	74 68                	je     c0012bf9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b91:	be 2b 00 00 00       	mov    esi,0x2b
c0012b96:	51                   	push   ecx
c0012b97:	31 ff                	xor    edi,edi
c0012b99:	6a 00                	push   0x0
c0012b9b:	31 db                	xor    ebx,ebx
c0012b9d:	6a 00                	push   0x0
c0012b9f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012ba2:	e8 2d 8e ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012bad:	76 3b                	jbe    c0012bea <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012baf:	83 ec 0c             	sub    esp,0xc
c0012bb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012bb5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012bb9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bbb:	51                   	push   ecx
c0012bbc:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012bc0:	51                   	push   ecx
c0012bc1:	6a 00                	push   0x0
c0012bc3:	6a 01                	push   0x1
c0012bc5:	50                   	push   eax
c0012bc6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012bc9:	83 c4 20             	add    esp,0x20
c0012bcc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012bd1:	74 26                	je     c0012bf9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012bd3:	43                   	inc    ebx
c0012bd4:	52                   	push   edx
c0012bd5:	57                   	push   edi
c0012bd6:	56                   	push   esi
c0012bd7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012bda:	e8 f5 8d ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0012bdf:	83 c6 2b             	add    esi,0x2b
c0012be2:	83 d7 00             	adc    edi,0x0
c0012be5:	83 c4 10             	add    esp,0x10
c0012be8:	eb c0                	jmp    c0012baa <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012bea:	50                   	push   eax
c0012beb:	50                   	push   eax
c0012bec:	6a 40                	push   0x40
c0012bee:	55                   	push   ebp
c0012bef:	e8 0e ff ff ff       	call   c0012b02 <CmExpand(Reghive_Tag*, int)>
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	89 c3                	mov    ebx,eax
c0012bf9:	83 c4 1c             	add    esp,0x1c
c0012bfc:	89 d8                	mov    eax,ebx
c0012bfe:	5b                   	pop    ebx
c0012bff:	5e                   	pop    esi
c0012c00:	5f                   	pop    edi
c0012c01:	5d                   	pop    ebp
c0012c02:	c3                   	ret    

c0012c03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012c03:	55                   	push   ebp
c0012c04:	57                   	push   edi
c0012c05:	56                   	push   esi
c0012c06:	53                   	push   ebx
c0012c07:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c0d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012c14:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c1b:	e8 5d ff ff ff       	call   c0012b7d <CmFindUnusedExtent(Reghive_Tag*)>
c0012c20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c24:	83 c4 0c             	add    esp,0xc
c0012c27:	6a 2b                	push   0x2b
c0012c29:	6a 00                	push   0x0
c0012c2b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012c2f:	55                   	push   ebp
c0012c30:	e8 bb d8 fe ff       	call   c00004f0 <memset>
c0012c35:	83 c4 10             	add    esp,0x10
c0012c38:	85 db                	test   ebx,ebx
c0012c3a:	74 12                	je     c0012c4e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012c3c:	51                   	push   ecx
c0012c3d:	55                   	push   ebp
c0012c3e:	53                   	push   ebx
c0012c3f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c46:	e8 0e fd ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c4b:	83 c4 10             	add    esp,0x10
c0012c4e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012c52:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012c59:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012c5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012c60:	85 db                	test   ebx,ebx
c0012c62:	74 49                	je     c0012cad <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012c64:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012c69:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012c6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c72:	c1 e0 08             	shl    eax,0x8
c0012c75:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012c7b:	09 c8                	or     eax,ecx
c0012c7d:	74 11                	je     c0012c90 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012c7f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012c83:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012c87:	c1 e8 10             	shr    eax,0x10
c0012c8a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012c8e:	eb 0f                	jmp    c0012c9f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012c90:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c95:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c9a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c9f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012ca3:	c1 ea 08             	shr    edx,0x8
c0012ca6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012cab:	eb 0f                	jmp    c0012cbc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012cad:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012cb2:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012cb7:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012cbc:	52                   	push   edx
c0012cbd:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012cc1:	50                   	push   eax
c0012cc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cc6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ccd:	e8 ab fd ff ff       	call   c0012a7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cd2:	83 c4 10             	add    esp,0x10
c0012cd5:	85 db                	test   ebx,ebx
c0012cd7:	74 12                	je     c0012ceb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012cd9:	50                   	push   eax
c0012cda:	55                   	push   ebp
c0012cdb:	53                   	push   ebx
c0012cdc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ce3:	e8 95 fd ff ff       	call   c0012a7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ce8:	83 c4 10             	add    esp,0x10
c0012ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cef:	83 c4 7c             	add    esp,0x7c
c0012cf2:	5b                   	pop    ebx
c0012cf3:	5e                   	pop    esi
c0012cf4:	5f                   	pop    edi
c0012cf5:	5d                   	pop    ebp
c0012cf6:	c3                   	ret    

c0012cf7 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012cf7:	55                   	push   ebp
c0012cf8:	57                   	push   edi
c0012cf9:	56                   	push   esi
c0012cfa:	53                   	push   ebx
c0012cfb:	bb 27 00 00 00       	mov    ebx,0x27
c0012d00:	81 ec 88 00 00 00    	sub    esp,0x88
c0012d06:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012d0d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012d14:	e8 57 d8 fe ff       	call   c0000570 <strlen>
c0012d19:	8d 48 26             	lea    ecx,[eax+0x26]
c0012d1c:	89 c8                	mov    eax,ecx
c0012d1e:	99                   	cdq    
c0012d1f:	f7 fb                	idiv   ebx
c0012d21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012d25:	83 c4 10             	add    esp,0x10
c0012d28:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012d2e:	7e 10                	jle    c0012d40 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012d30:	83 ec 0c             	sub    esp,0xc
c0012d33:	68 84 20 02 c0       	push   0xc0022084
c0012d38:	e8 64 e6 ff ff       	call   c00113a1 <KePanic(char const*)>
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	31 ff                	xor    edi,edi
c0012d42:	50                   	push   eax
c0012d43:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012d47:	53                   	push   ebx
c0012d48:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d4f:	56                   	push   esi
c0012d50:	e8 04 fc ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d55:	83 c4 10             	add    esp,0x10
c0012d58:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012d5c:	89 d0                	mov    eax,edx
c0012d5e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012d62:	c1 e0 08             	shl    eax,0x8
c0012d65:	09 c2                	or     edx,eax
c0012d67:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012d6b:	c1 e2 08             	shl    edx,0x8
c0012d6e:	09 c2                	or     edx,eax
c0012d70:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012d74:	7e 76                	jle    c0012dec <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012d76:	85 d2                	test   edx,edx
c0012d78:	75 25                	jne    c0012d9f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012d7a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012d7f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012d83:	50                   	push   eax
c0012d84:	6a 00                	push   0x0
c0012d86:	6a 00                	push   0x0
c0012d88:	56                   	push   esi
c0012d89:	e8 75 fe ff ff       	call   c0012c03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012d8e:	83 c4 10             	add    esp,0x10
c0012d91:	89 c2                	mov    edx,eax
c0012d93:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012d96:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012d99:	c1 f8 10             	sar    eax,0x10
c0012d9c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012d9f:	55                   	push   ebp
c0012da0:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012da4:	55                   	push   ebp
c0012da5:	52                   	push   edx
c0012da6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012daa:	56                   	push   esi
c0012dab:	e8 a9 fb ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012db0:	83 c4 0c             	add    esp,0xc
c0012db3:	6a 27                	push   0x27
c0012db5:	6a 00                	push   0x0
c0012db7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012dbb:	51                   	push   ecx
c0012dbc:	e8 2f d7 fe ff       	call   c00004f0 <memset>
c0012dc1:	83 c4 0c             	add    esp,0xc
c0012dc4:	6b c7 27             	imul   eax,edi,0x27
c0012dc7:	6a 27                	push   0x27
c0012dc9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012dd0:	50                   	push   eax
c0012dd1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012dd5:	51                   	push   ecx
c0012dd6:	e8 a5 d8 fe ff       	call   c0000680 <strncpy>
c0012ddb:	83 c4 0c             	add    esp,0xc
c0012dde:	55                   	push   ebp
c0012ddf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012de3:	52                   	push   edx
c0012de4:	56                   	push   esi
c0012de5:	e8 93 fc ff ff       	call   c0012a7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012dea:	eb 19                	jmp    c0012e05 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012dec:	85 d2                	test   edx,edx
c0012dee:	74 18                	je     c0012e08 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012df0:	51                   	push   ecx
c0012df1:	51                   	push   ecx
c0012df2:	52                   	push   edx
c0012df3:	56                   	push   esi
c0012df4:	e8 c0 fc ff ff       	call   c0012ab9 <CmFreeExtent(Reghive_Tag*, int)>
c0012df9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012dfd:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012e01:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012e05:	83 c4 10             	add    esp,0x10
c0012e08:	47                   	inc    edi
c0012e09:	83 c3 03             	add    ebx,0x3
c0012e0c:	83 ff 07             	cmp    edi,0x7
c0012e0f:	0f 85 43 ff ff ff    	jne    c0012d58 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012e15:	50                   	push   eax
c0012e16:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012e1a:	50                   	push   eax
c0012e1b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e22:	56                   	push   esi
c0012e23:	e8 55 fc ff ff       	call   c0012a7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e28:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012e2e:	5b                   	pop    ebx
c0012e2f:	5e                   	pop    esi
c0012e30:	5f                   	pop    edi
c0012e31:	5d                   	pop    ebp
c0012e32:	c3                   	ret    

c0012e33 <CmGetMatch(char*, char*, bool, bool*)>:
c0012e33:	56                   	push   esi
c0012e34:	53                   	push   ebx
c0012e35:	50                   	push   eax
c0012e36:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e3a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012e3f:	74 25                	je     c0012e66 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012e41:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e44:	31 db                	xor    ebx,ebx
c0012e46:	50                   	push   eax
c0012e47:	50                   	push   eax
c0012e48:	8d 04 9d 20 35 02 c0 	lea    eax,[ebx*4-0x3ffdcae0]
c0012e4f:	50                   	push   eax
c0012e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e54:	e8 f7 d8 fe ff       	call   c0000750 <strcmp>
c0012e59:	83 c4 10             	add    esp,0x10
c0012e5c:	85 c0                	test   eax,eax
c0012e5e:	74 2e                	je     c0012e8e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e60:	43                   	inc    ebx
c0012e61:	83 fb 3f             	cmp    ebx,0x3f
c0012e64:	75 e0                	jne    c0012e46 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012e66:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e69:	31 db                	xor    ebx,ebx
c0012e6b:	8d 04 9d 20 35 02 c0 	lea    eax,[ebx*4-0x3ffdcae0]
c0012e72:	51                   	push   ecx
c0012e73:	51                   	push   ecx
c0012e74:	50                   	push   eax
c0012e75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e79:	e8 d2 d8 fe ff       	call   c0000750 <strcmp>
c0012e7e:	83 c4 10             	add    esp,0x10
c0012e81:	85 c0                	test   eax,eax
c0012e83:	74 09                	je     c0012e8e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012e85:	43                   	inc    ebx
c0012e86:	83 fb 3f             	cmp    ebx,0x3f
c0012e89:	75 e0                	jne    c0012e6b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012e8b:	83 cb ff             	or     ebx,0xffffffff
c0012e8e:	89 d8                	mov    eax,ebx
c0012e90:	5a                   	pop    edx
c0012e91:	5b                   	pop    ebx
c0012e92:	5e                   	pop    esi
c0012e93:	c3                   	ret    

c0012e94 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012e94:	55                   	push   ebp
c0012e95:	31 c0                	xor    eax,eax
c0012e97:	57                   	push   edi
c0012e98:	56                   	push   esi
c0012e99:	53                   	push   ebx
c0012e9a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e9e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ea2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012ea4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012ea8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012eab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012eaf:	83 fd 1f             	cmp    ebp,0x1f
c0012eb2:	7f 0b                	jg     c0012ebf <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012eb4:	0f b6 c2             	movzx  eax,dl
c0012eb7:	d3 e0                	shl    eax,cl
c0012eb9:	09 07                	or     DWORD PTR [edi],eax
c0012ebb:	b0 01                	mov    al,0x1
c0012ebd:	01 33                	add    DWORD PTR [ebx],esi
c0012ebf:	5b                   	pop    ebx
c0012ec0:	5e                   	pop    esi
c0012ec1:	5f                   	pop    edi
c0012ec2:	5d                   	pop    ebp
c0012ec3:	c3                   	ret    

c0012ec4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012ec4:	57                   	push   edi
c0012ec5:	56                   	push   esi
c0012ec6:	53                   	push   ebx
c0012ec7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ecb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012ecf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012ed3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ed7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012ed9:	7c 17                	jl     c0012ef2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012edb:	8b 17                	mov    edx,DWORD PTR [edi]
c0012edd:	b8 01 00 00 00       	mov    eax,0x1
c0012ee2:	d3 e0                	shl    eax,cl
c0012ee4:	48                   	dec    eax
c0012ee5:	21 d0                	and    eax,edx
c0012ee7:	d3 ea                	shr    edx,cl
c0012ee9:	89 17                	mov    DWORD PTR [edi],edx
c0012eeb:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012eed:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012ef0:	eb 05                	jmp    c0012ef7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012ef2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ef5:	31 c0                	xor    eax,eax
c0012ef7:	5b                   	pop    ebx
c0012ef8:	5e                   	pop    esi
c0012ef9:	5f                   	pop    edi
c0012efa:	c3                   	ret    

c0012efb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012efb:	83 ec 40             	sub    esp,0x40
c0012efe:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f02:	50                   	push   eax
c0012f03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f0b:	e8 49 fa ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f10:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012f14:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012f18:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012f1c:	89 10                	mov    DWORD PTR [eax],edx
c0012f1e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012f21:	83 c4 4c             	add    esp,0x4c
c0012f24:	c3                   	ret    

c0012f25 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012f25:	55                   	push   ebp
c0012f26:	57                   	push   edi
c0012f27:	56                   	push   esi
c0012f28:	53                   	push   ebx
c0012f29:	83 ec 40             	sub    esp,0x40
c0012f2c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012f30:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012f34:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012f38:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012f3c:	53                   	push   ebx
c0012f3d:	56                   	push   esi
c0012f3e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f42:	e8 12 fa ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f47:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012f4b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012f4f:	83 c4 0c             	add    esp,0xc
c0012f52:	53                   	push   ebx
c0012f53:	56                   	push   esi
c0012f54:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f58:	e8 20 fb ff ff       	call   c0012a7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f5d:	83 c4 4c             	add    esp,0x4c
c0012f60:	5b                   	pop    ebx
c0012f61:	5e                   	pop    esi
c0012f62:	5f                   	pop    edi
c0012f63:	5d                   	pop    ebp
c0012f64:	c3                   	ret    

c0012f65 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012f65:	55                   	push   ebp
c0012f66:	57                   	push   edi
c0012f67:	56                   	push   esi
c0012f68:	31 f6                	xor    esi,esi
c0012f6a:	53                   	push   ebx
c0012f6b:	31 db                	xor    ebx,ebx
c0012f6d:	83 ec 40             	sub    esp,0x40
c0012f70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012f78:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012f80:	6a 12                	push   0x12
c0012f82:	68 ee 00 00 00       	push   0xee
c0012f87:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f8b:	e8 60 d5 fe ff       	call   c00004f0 <memset>
c0012f90:	83 c4 10             	add    esp,0x10
c0012f93:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012f97:	6a 08                	push   0x8
c0012f99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f9d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012fa1:	50                   	push   eax
c0012fa2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012fa6:	55                   	push   ebp
c0012fa7:	57                   	push   edi
c0012fa8:	e8 e7 fe ff ff       	call   c0012e94 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012fad:	83 c4 10             	add    esp,0x10
c0012fb0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fb4:	50                   	push   eax
c0012fb5:	6a 06                	push   0x6
c0012fb7:	55                   	push   ebp
c0012fb8:	57                   	push   edi
c0012fb9:	e8 06 ff ff ff       	call   c0012ec4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012fbe:	83 c4 10             	add    esp,0x10
c0012fc1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fc6:	74 07                	je     c0012fcf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012fc8:	46                   	inc    esi
c0012fc9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012fcd:	eb e1                	jmp    c0012fb0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012fcf:	43                   	inc    ebx
c0012fd0:	83 fb 12             	cmp    ebx,0x12
c0012fd3:	75 c2                	jne    c0012f97 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012fd5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012fd9:	31 db                	xor    ebx,ebx
c0012fdb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012fde:	50                   	push   eax
c0012fdf:	50                   	push   eax
c0012fe0:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012fe5:	43                   	inc    ebx
c0012fe6:	8d 04 85 20 35 02 c0 	lea    eax,[eax*4-0x3ffdcae0]
c0012fed:	50                   	push   eax
c0012fee:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012ff2:	e8 49 d8 fe ff       	call   c0000840 <strcat>
c0012ff7:	83 c4 10             	add    esp,0x10
c0012ffa:	83 fb 18             	cmp    ebx,0x18
c0012ffd:	75 df                	jne    c0012fde <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012fff:	83 c4 3c             	add    esp,0x3c
c0013002:	31 c0                	xor    eax,eax
c0013004:	5b                   	pop    ebx
c0013005:	5e                   	pop    esi
c0013006:	5f                   	pop    edi
c0013007:	5d                   	pop    ebp
c0013008:	c3                   	ret    

c0013009 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013009:	83 ec 40             	sub    esp,0x40
c001300c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013010:	50                   	push   eax
c0013011:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013015:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013019:	e8 3b f9 ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001301e:	58                   	pop    eax
c001301f:	5a                   	pop    edx
c0013020:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013024:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013028:	50                   	push   eax
c0013029:	e8 37 ff ff ff       	call   c0012f65 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001302e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013033:	83 c4 4c             	add    esp,0x4c
c0013036:	c3                   	ret    

c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013037:	55                   	push   ebp
c0013038:	57                   	push   edi
c0013039:	56                   	push   esi
c001303a:	53                   	push   ebx
c001303b:	31 db                	xor    ebx,ebx
c001303d:	83 ec 70             	sub    esp,0x70
c0013040:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013047:	6a 30                	push   0x30
c0013049:	6a 00                	push   0x0
c001304b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001304f:	56                   	push   esi
c0013050:	e8 9b d4 fe ff       	call   c00004f0 <memset>
c0013055:	83 c4 10             	add    esp,0x10
c0013058:	83 ec 0c             	sub    esp,0xc
c001305b:	57                   	push   edi
c001305c:	e8 0f d5 fe ff       	call   c0000570 <strlen>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	39 d8                	cmp    eax,ebx
c0013066:	76 16                	jbe    c001307e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001306f:	50                   	push   eax
c0013070:	e8 bb d8 fe ff       	call   c0000930 <toupper>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001307b:	43                   	inc    ebx
c001307c:	eb da                	jmp    c0013058 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001307e:	31 f6                	xor    esi,esi
c0013080:	52                   	push   edx
c0013081:	31 ff                	xor    edi,edi
c0013083:	6a 18                	push   0x18
c0013085:	6a 3f                	push   0x3f
c0013087:	8d 44 24 24          	lea    eax,[esp+0x24]
c001308b:	50                   	push   eax
c001308c:	e8 5f d4 fe ff       	call   c00004f0 <memset>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013098:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001309c:	84 c0                	test   al,al
c001309e:	0f 84 b0 00 00 00    	je     c0013154 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00130a4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00130a8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00130ad:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00130b1:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00130b6:	8d 6e 01             	lea    ebp,[esi+0x1]
c00130b9:	83 ec 0c             	sub    esp,0xc
c00130bc:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00130c0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00130c4:	53                   	push   ebx
c00130c5:	e8 a6 d4 fe ff       	call   c0000570 <strlen>
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	85 c0                	test   eax,eax
c00130cf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00130d3:	74 0b                	je     c00130e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00130d5:	50                   	push   eax
c00130d6:	6a 01                	push   0x1
c00130d8:	53                   	push   ebx
c00130d9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00130dd:	50                   	push   eax
c00130de:	eb 0a                	jmp    c00130ea <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00130e0:	50                   	push   eax
c00130e1:	6a 00                	push   0x0
c00130e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00130e7:	50                   	push   eax
c00130e8:	6a 00                	push   0x0
c00130ea:	e8 44 fd ff ff       	call   c0012e33 <CmGetMatch(char*, char*, bool, bool*)>
c00130ef:	83 c4 10             	add    esp,0x10
c00130f2:	83 f8 ff             	cmp    eax,0xffffffff
c00130f5:	75 1a                	jne    c0013111 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00130f7:	83 ec 0c             	sub    esp,0xc
c00130fa:	68 99 20 02 c0       	push   0xc0022099
c00130ff:	e8 9d e2 ff ff       	call   c00113a1 <KePanic(char const*)>
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	b8 02 00 00 00       	mov    eax,0x2
c001310c:	e9 bc 00 00 00       	jmp    c00131cd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013111:	83 ff 18             	cmp    edi,0x18
c0013114:	75 1a                	jne    c0013130 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013116:	83 ec 0c             	sub    esp,0xc
c0013119:	68 ae 20 02 c0       	push   0xc00220ae
c001311e:	e8 7e e2 ff ff       	call   c00113a1 <KePanic(char const*)>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	b8 01 00 00 00       	mov    eax,0x1
c001312b:	e9 9d 00 00 00       	jmp    c00131cd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013130:	47                   	inc    edi
c0013131:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013136:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001313a:	74 02                	je     c001313e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001313c:	89 ee                	mov    esi,ebp
c001313e:	83 ec 0c             	sub    esp,0xc
c0013141:	53                   	push   ebx
c0013142:	e8 29 d4 fe ff       	call   c0000570 <strlen>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	85 c0                	test   eax,eax
c001314c:	74 06                	je     c0013154 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001314e:	46                   	inc    esi
c001314f:	e9 40 ff ff ff       	jmp    c0013094 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013154:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001315c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013164:	31 f6                	xor    esi,esi
c0013166:	50                   	push   eax
c0013167:	31 ff                	xor    edi,edi
c0013169:	6a 12                	push   0x12
c001316b:	68 ee 00 00 00       	push   0xee
c0013170:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013177:	e8 74 d3 fe ff       	call   c00004f0 <memset>
c001317c:	83 c4 10             	add    esp,0x10
c001317f:	83 fe 17             	cmp    esi,0x17
c0013182:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013186:	7e 26                	jle    c00131ae <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013188:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001318c:	50                   	push   eax
c001318d:	6a 08                	push   0x8
c001318f:	55                   	push   ebp
c0013190:	53                   	push   ebx
c0013191:	e8 2e fd ff ff       	call   c0012ec4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013196:	83 c4 10             	add    esp,0x10
c0013199:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001319e:	74 26                	je     c00131c6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00131a0:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00131a7:	4e                   	dec    esi
c00131a8:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00131ab:	47                   	inc    edi
c00131ac:	eb 1c                	jmp    c00131ca <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00131ae:	6a 06                	push   0x6
c00131b0:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00131b5:	50                   	push   eax
c00131b6:	55                   	push   ebp
c00131b7:	53                   	push   ebx
c00131b8:	e8 d7 fc ff ff       	call   c0012e94 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00131bd:	83 c4 10             	add    esp,0x10
c00131c0:	84 c0                	test   al,al
c00131c2:	75 06                	jne    c00131ca <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00131c4:	eb c2                	jmp    c0013188 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00131c6:	31 c0                	xor    eax,eax
c00131c8:	eb 03                	jmp    c00131cd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00131ca:	46                   	inc    esi
c00131cb:	eb b2                	jmp    c001317f <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00131cd:	83 c4 6c             	add    esp,0x6c
c00131d0:	5b                   	pop    ebx
c00131d1:	5e                   	pop    esi
c00131d2:	5f                   	pop    edi
c00131d3:	5d                   	pop    ebp
c00131d4:	c3                   	ret    

c00131d5 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00131d5:	53                   	push   ebx
c00131d6:	83 ec 3c             	sub    esp,0x3c
c00131d9:	6a 2b                	push   0x2b
c00131db:	6a 00                	push   0x0
c00131dd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00131e1:	53                   	push   ebx
c00131e2:	e8 09 d3 fe ff       	call   c00004f0 <memset>
c00131e7:	58                   	pop    eax
c00131e8:	5a                   	pop    edx
c00131e9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00131ed:	50                   	push   eax
c00131ee:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00131f2:	e8 40 fe ff ff       	call   c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131f7:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00131fc:	83 c4 0c             	add    esp,0xc
c00131ff:	6a 15                	push   0x15
c0013201:	6a 00                	push   0x0
c0013203:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013207:	50                   	push   eax
c0013208:	e8 e3 d2 fe ff       	call   c00004f0 <memset>
c001320d:	53                   	push   ebx
c001320e:	6a 00                	push   0x0
c0013210:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013214:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013218:	e8 e6 f9 ff ff       	call   c0012c03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001321d:	83 c4 58             	add    esp,0x58
c0013220:	5b                   	pop    ebx
c0013221:	c3                   	ret    

c0013222 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013222:	56                   	push   esi
c0013223:	53                   	push   ebx
c0013224:	83 ec 48             	sub    esp,0x48
c0013227:	6a 12                	push   0x12
c0013229:	68 ff 00 00 00       	push   0xff
c001322e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013232:	56                   	push   esi
c0013233:	e8 b8 d2 fe ff       	call   c00004f0 <memset>
c0013238:	5a                   	pop    edx
c0013239:	59                   	pop    ecx
c001323a:	56                   	push   esi
c001323b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001323f:	e8 f3 fd ff ff       	call   c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001324b:	85 db                	test   ebx,ebx
c001324d:	74 42                	je     c0013291 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001324f:	50                   	push   eax
c0013250:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013254:	50                   	push   eax
c0013255:	53                   	push   ebx
c0013256:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001325a:	e8 fa f6 ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001325f:	83 c4 0c             	add    esp,0xc
c0013262:	6a 12                	push   0x12
c0013264:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013268:	50                   	push   eax
c0013269:	56                   	push   esi
c001326a:	e8 11 d1 fe ff       	call   c0000380 <memcmp>
c001326f:	83 c4 10             	add    esp,0x10
c0013272:	85 c0                	test   eax,eax
c0013274:	74 1e                	je     c0013294 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013276:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001327b:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013280:	c1 e3 08             	shl    ebx,0x8
c0013283:	09 d8                	or     eax,ebx
c0013285:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001328a:	c1 e3 10             	shl    ebx,0x10
c001328d:	09 c3                	or     ebx,eax
c001328f:	eb ba                	jmp    c001324b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013291:	83 cb ff             	or     ebx,0xffffffff
c0013294:	89 d8                	mov    eax,ebx
c0013296:	83 c4 44             	add    esp,0x44
c0013299:	5b                   	pop    ebx
c001329a:	5e                   	pop    esi
c001329b:	c3                   	ret    

c001329c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001329c:	57                   	push   edi
c001329d:	56                   	push   esi
c001329e:	53                   	push   ebx
c001329f:	83 ec 34             	sub    esp,0x34
c00132a2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00132a6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00132aa:	6a 2b                	push   0x2b
c00132ac:	6a 00                	push   0x0
c00132ae:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00132b2:	53                   	push   ebx
c00132b3:	e8 38 d2 fe ff       	call   c00004f0 <memset>
c00132b8:	58                   	pop    eax
c00132b9:	5a                   	pop    edx
c00132ba:	8d 44 24 11          	lea    eax,[esp+0x11]
c00132be:	50                   	push   eax
c00132bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00132c3:	e8 6f fd ff ff       	call   c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00132c8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00132cc:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00132d0:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00132d4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00132d8:	53                   	push   ebx
c00132d9:	6a 00                	push   0x0
c00132db:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132df:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00132e3:	e8 1b f9 ff ff       	call   c0012c03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132e8:	83 c4 50             	add    esp,0x50
c00132eb:	5b                   	pop    ebx
c00132ec:	5e                   	pop    esi
c00132ed:	5f                   	pop    edi
c00132ee:	c3                   	ret    

c00132ef <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00132ef:	55                   	push   ebp
c00132f0:	57                   	push   edi
c00132f1:	56                   	push   esi
c00132f2:	53                   	push   ebx
c00132f3:	83 ec 40             	sub    esp,0x40
c00132f6:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00132fa:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00132fe:	6a 2b                	push   0x2b
c0013300:	6a 00                	push   0x0
c0013302:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013306:	56                   	push   esi
c0013307:	e8 e4 d1 fe ff       	call   c00004f0 <memset>
c001330c:	5f                   	pop    edi
c001330d:	89 ef                	mov    edi,ebp
c001330f:	58                   	pop    eax
c0013310:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013314:	50                   	push   eax
c0013315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013319:	e8 19 fd ff ff       	call   c0013037 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001331e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013323:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013328:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001332d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013332:	83 c4 10             	add    esp,0x10
c0013335:	85 ed                	test   ebp,ebp
c0013337:	74 14                	je     c001334d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013339:	51                   	push   ecx
c001333a:	51                   	push   ecx
c001333b:	57                   	push   edi
c001333c:	53                   	push   ebx
c001333d:	e8 09 f7 ff ff       	call   c0012a4b <CmGetNext(Reghive_Tag*, int)>
c0013342:	83 c4 10             	add    esp,0x10
c0013345:	85 c0                	test   eax,eax
c0013347:	74 04                	je     c001334d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013349:	89 c7                	mov    edi,eax
c001334b:	eb e8                	jmp    c0013335 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001334d:	56                   	push   esi
c001334e:	6a 00                	push   0x0
c0013350:	57                   	push   edi
c0013351:	53                   	push   ebx
c0013352:	e8 ac f8 ff ff       	call   c0012c03 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013357:	83 c4 0c             	add    esp,0xc
c001335a:	89 c7                	mov    edi,eax
c001335c:	56                   	push   esi
c001335d:	50                   	push   eax
c001335e:	53                   	push   ebx
c001335f:	e8 f5 f5 ff ff       	call   c0012959 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013364:	58                   	pop    eax
c0013365:	5a                   	pop    edx
c0013366:	6a 6c                	push   0x6c
c0013368:	6a 00                	push   0x0
c001336a:	6a 00                	push   0x0
c001336c:	68 bf 20 02 c0       	push   0xc00220bf
c0013371:	57                   	push   edi
c0013372:	53                   	push   ebx
c0013373:	e8 24 ff ff ff       	call   c001329c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013378:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001337c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013380:	c1 e8 10             	shr    eax,0x10
c0013383:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013387:	83 c4 1c             	add    esp,0x1c
c001338a:	56                   	push   esi
c001338b:	57                   	push   edi
c001338c:	53                   	push   ebx
c001338d:	e8 eb f6 ff ff       	call   c0012a7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013392:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013397:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001339c:	c1 e0 08             	shl    eax,0x8
c001339f:	09 c2                	or     edx,eax
c00133a1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00133a6:	83 c4 4c             	add    esp,0x4c
c00133a9:	c1 e0 10             	shl    eax,0x10
c00133ac:	5b                   	pop    ebx
c00133ad:	09 d0                	or     eax,edx
c00133af:	5e                   	pop    esi
c00133b0:	5f                   	pop    edi
c00133b1:	5d                   	pop    ebp
c00133b2:	c3                   	ret    

c00133b3 <zStrtok(char*, char const*)>:
c00133b3:	55                   	push   ebp
c00133b4:	57                   	push   edi
c00133b5:	56                   	push   esi
c00133b6:	53                   	push   ebx
c00133b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133bf:	85 db                	test   ebx,ebx
c00133c1:	74 2f                	je     c00133f2 <zStrtok(char*, char const*)+0x3f>
c00133c3:	85 c0                	test   eax,eax
c00133c5:	75 09                	jne    c00133d0 <zStrtok(char*, char const*)+0x1d>
c00133c7:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c00133cc:	85 c0                	test   eax,eax
c00133ce:	74 50                	je     c0013420 <zStrtok(char*, char const*)+0x6d>
c00133d0:	31 c9                	xor    ecx,ecx
c00133d2:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00133d6:	74 03                	je     c00133db <zStrtok(char*, char const*)+0x28>
c00133d8:	41                   	inc    ecx
c00133d9:	eb f7                	jmp    c00133d2 <zStrtok(char*, char const*)+0x1f>
c00133db:	31 d2                	xor    edx,edx
c00133dd:	39 ca                	cmp    edx,ecx
c00133df:	74 15                	je     c00133f6 <zStrtok(char*, char const*)+0x43>
c00133e1:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00133e5:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00133e8:	8d 3c 10             	lea    edi,[eax+edx*1]
c00133eb:	39 ee                	cmp    esi,ebp
c00133ed:	74 13                	je     c0013402 <zStrtok(char*, char const*)+0x4f>
c00133ef:	42                   	inc    edx
c00133f0:	eb eb                	jmp    c00133dd <zStrtok(char*, char const*)+0x2a>
c00133f2:	31 c0                	xor    eax,eax
c00133f4:	eb 2a                	jmp    c0013420 <zStrtok(char*, char const*)+0x6d>
c00133f6:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c0013400:	eb 1e                	jmp    c0013420 <zStrtok(char*, char const*)+0x6d>
c0013402:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013405:	39 ce                	cmp    esi,ecx
c0013407:	75 0a                	jne    c0013413 <zStrtok(char*, char const*)+0x60>
c0013409:	40                   	inc    eax
c001340a:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c001340f:	89 d8                	mov    eax,ebx
c0013411:	eb 0d                	jmp    c0013420 <zStrtok(char*, char const*)+0x6d>
c0013413:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013417:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001341a:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0013420:	5b                   	pop    ebx
c0013421:	5e                   	pop    esi
c0013422:	5f                   	pop    edi
c0013423:	5d                   	pop    ebp
c0013424:	c3                   	ret    

c0013425 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013425:	57                   	push   edi
c0013426:	56                   	push   esi
c0013427:	53                   	push   ebx
c0013428:	81 ec 08 01 00 00    	sub    esp,0x108
c001342e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013435:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001343c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013440:	53                   	push   ebx
c0013441:	e8 fa d1 fe ff       	call   c0000640 <strcpy>
c0013446:	59                   	pop    ecx
c0013447:	5e                   	pop    esi
c0013448:	68 23 24 02 c0       	push   0xc0022423
c001344d:	53                   	push   ebx
c001344e:	bb 01 00 00 00       	mov    ebx,0x1
c0013453:	e8 5b ff ff ff       	call   c00133b3 <zStrtok(char*, char const*)>
c0013458:	83 c4 10             	add    esp,0x10
c001345b:	85 c0                	test   eax,eax
c001345d:	74 3b                	je     c001349a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001345f:	52                   	push   edx
c0013460:	50                   	push   eax
c0013461:	6a 01                	push   0x1
c0013463:	57                   	push   edi
c0013464:	e8 b9 fd ff ff       	call   c0013222 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013469:	59                   	pop    ecx
c001346a:	89 c3                	mov    ebx,eax
c001346c:	5e                   	pop    esi
c001346d:	68 23 24 02 c0       	push   0xc0022423
c0013472:	6a 00                	push   0x0
c0013474:	e8 3a ff ff ff       	call   c00133b3 <zStrtok(char*, char const*)>
c0013479:	83 c4 10             	add    esp,0x10
c001347c:	89 c6                	mov    esi,eax
c001347e:	85 c0                	test   eax,eax
c0013480:	74 18                	je     c001349a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013482:	52                   	push   edx
c0013483:	52                   	push   edx
c0013484:	53                   	push   ebx
c0013485:	57                   	push   edi
c0013486:	e8 81 f5 ff ff       	call   c0012a0c <CmEnterDirectory(Reghive_Tag*, int)>
c001348b:	83 c4 10             	add    esp,0x10
c001348e:	89 c3                	mov    ebx,eax
c0013490:	83 f8 ff             	cmp    eax,0xffffffff
c0013493:	74 05                	je     c001349a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013495:	50                   	push   eax
c0013496:	56                   	push   esi
c0013497:	53                   	push   ebx
c0013498:	eb c9                	jmp    c0013463 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001349a:	81 c4 00 01 00 00    	add    esp,0x100
c00134a0:	89 d8                	mov    eax,ebx
c00134a2:	5b                   	pop    ebx
c00134a3:	5e                   	pop    esi
c00134a4:	5f                   	pop    edi
c00134a5:	c3                   	ret    

c00134a6 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00134a6:	55                   	push   ebp
c00134a7:	57                   	push   edi
c00134a8:	56                   	push   esi
c00134a9:	53                   	push   ebx
c00134aa:	83 ec 5c             	sub    esp,0x5c
c00134ad:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00134b1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00134b5:	85 db                	test   ebx,ebx
c00134b7:	0f 8e 84 00 00 00    	jle    c0013541 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00134bd:	31 ed                	xor    ebp,ebp
c00134bf:	57                   	push   edi
c00134c0:	6a 32                	push   0x32
c00134c2:	6a 00                	push   0x0
c00134c4:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00134c8:	57                   	push   edi
c00134c9:	e8 22 d0 fe ff       	call   c00004f0 <memset>
c00134ce:	83 c4 0c             	add    esp,0xc
c00134d1:	57                   	push   edi
c00134d2:	53                   	push   ebx
c00134d3:	56                   	push   esi
c00134d4:	e8 30 fb ff ff       	call   c0013009 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134dd:	83 c4 10             	add    esp,0x10
c00134e0:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00134e4:	7d 13                	jge    c00134f9 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00134e6:	83 ec 0c             	sub    esp,0xc
c00134e9:	45                   	inc    ebp
c00134ea:	68 c7 27 02 c0       	push   0xc00227c7
c00134ef:	e8 51 74 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00134f4:	83 c4 10             	add    esp,0x10
c00134f7:	eb e7                	jmp    c00134e0 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00134f9:	51                   	push   ecx
c00134fa:	57                   	push   edi
c00134fb:	53                   	push   ebx
c00134fc:	68 c5 20 02 c0       	push   0xc00220c5
c0013501:	e8 3f 74 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001350e:	75 1e                	jne    c001352e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013510:	52                   	push   edx
c0013511:	52                   	push   edx
c0013512:	53                   	push   ebx
c0013513:	56                   	push   esi
c0013514:	e8 f3 f4 ff ff       	call   c0012a0c <CmEnterDirectory(Reghive_Tag*, int)>
c0013519:	83 c4 0c             	add    esp,0xc
c001351c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013520:	8d 51 04             	lea    edx,[ecx+0x4]
c0013523:	52                   	push   edx
c0013524:	50                   	push   eax
c0013525:	56                   	push   esi
c0013526:	e8 7b ff ff ff       	call   c00134a6 <CmDisplayTree(Reghive_Tag*, int, int)>
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	50                   	push   eax
c001352f:	50                   	push   eax
c0013530:	53                   	push   ebx
c0013531:	56                   	push   esi
c0013532:	e8 14 f5 ff ff       	call   c0012a4b <CmGetNext(Reghive_Tag*, int)>
c0013537:	83 c4 10             	add    esp,0x10
c001353a:	89 c3                	mov    ebx,eax
c001353c:	e9 74 ff ff ff       	jmp    c00134b5 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013541:	83 c4 5c             	add    esp,0x5c
c0013544:	5b                   	pop    ebx
c0013545:	5e                   	pop    esi
c0013546:	5f                   	pop    edi
c0013547:	5d                   	pop    ebp
c0013548:	c3                   	ret    

c0013549 <CmSplitFinalSlashInPlace(char*)>:
c0013549:	53                   	push   ebx
c001354a:	83 ec 14             	sub    esp,0x14
c001354d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013551:	53                   	push   ebx
c0013552:	e8 19 d0 fe ff       	call   c0000570 <strlen>
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	48                   	dec    eax
c001355b:	85 c0                	test   eax,eax
c001355d:	74 15                	je     c0013574 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001355f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013562:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013566:	75 09                	jne    c0013571 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013568:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001356b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001356f:	eb 05                	jmp    c0013576 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013571:	48                   	dec    eax
c0013572:	eb e7                	jmp    c001355b <CmSplitFinalSlashInPlace(char*)+0x12>
c0013574:	31 c0                	xor    eax,eax
c0013576:	83 c4 08             	add    esp,0x8
c0013579:	5b                   	pop    ebx
c001357a:	c3                   	ret    

c001357b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001357b:	55                   	push   ebp
c001357c:	57                   	push   edi
c001357d:	56                   	push   esi
c001357e:	53                   	push   ebx
c001357f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013585:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001358c:	8a 13                	mov    dl,BYTE PTR [ebx]
c001358e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013591:	80 fa 40             	cmp    dl,0x40
c0013594:	75 1c                	jne    c00135b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013596:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013599:	85 c9                	test   ecx,ecx
c001359b:	0f 84 09 01 00 00    	je     c00136aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00135a1:	8d 43 01             	lea    eax,[ebx+0x1]
c00135a4:	83 f9 3a             	cmp    ecx,0x3a
c00135a7:	74 04                	je     c00135ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00135a9:	89 c3                	mov    ebx,eax
c00135ab:	eb e9                	jmp    c0013596 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00135ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00135b0:	89 c3                	mov    ebx,eax
c00135b2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00135b6:	50                   	push   eax
c00135b7:	6a 40                	push   0x40
c00135b9:	6a 00                	push   0x0
c00135bb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00135bf:	50                   	push   eax
c00135c0:	e8 2b cf fe ff       	call   c00004f0 <memset>
c00135c5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00135cc:	31 c0                	xor    eax,eax
c00135ce:	83 c4 10             	add    esp,0x10
c00135d1:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c00135d6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00135d9:	89 d1                	mov    ecx,edx
c00135db:	85 d2                	test   edx,edx
c00135dd:	0f 84 c7 00 00 00    	je     c00136aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00135e3:	3d c7 00 00 00       	cmp    eax,0xc7
c00135e8:	0f 8f bc 00 00 00    	jg     c00136aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00135ee:	83 fa 0a             	cmp    edx,0xa
c00135f1:	0f 85 a4 00 00 00    	jne    c001369b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00135f7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00135fc:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013601:	89 c8                	mov    eax,ecx
c0013603:	a8 df                	test   al,0xdf
c0013605:	0f 94 c2             	sete   dl
c0013608:	83 f9 23             	cmp    ecx,0x23
c001360b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013610:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013614:	80 e2 01             	and    dl,0x1
c0013617:	75 4a                	jne    c0013663 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013619:	83 e8 09             	sub    eax,0x9
c001361c:	3c 01                	cmp    al,0x1
c001361e:	76 43                	jbe    c0013663 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013620:	83 f9 5b             	cmp    ecx,0x5b
c0013623:	75 42                	jne    c0013667 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013625:	83 fe 40             	cmp    esi,0x40
c0013628:	75 39                	jne    c0013663 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001362a:	83 ec 0c             	sub    esp,0xc
c001362d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013631:	52                   	push   edx
c0013632:	e8 39 cf fe ff       	call   c0000570 <strlen>
c0013637:	83 c4 10             	add    esp,0x10
c001363a:	83 f8 3f             	cmp    eax,0x3f
c001363d:	77 6b                	ja     c00136aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001363f:	50                   	push   eax
c0013640:	50                   	push   eax
c0013641:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013645:	52                   	push   edx
c0013646:	8d 54 24 24          	lea    edx,[esp+0x24]
c001364a:	52                   	push   edx
c001364b:	e8 f0 cf fe ff       	call   c0000640 <strcpy>
c0013650:	58                   	pop    eax
c0013651:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013655:	52                   	push   edx
c0013656:	e8 15 cf fe ff       	call   c0000570 <strlen>
c001365b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013660:	83 c4 10             	add    esp,0x10
c0013663:	31 d2                	xor    edx,edx
c0013665:	eb 3b                	jmp    c00136a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013667:	83 fe 40             	cmp    esi,0x40
c001366a:	74 06                	je     c0013672 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c001366c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013670:	eb 20                	jmp    c0013692 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013672:	50                   	push   eax
c0013673:	50                   	push   eax
c0013674:	55                   	push   ebp
c0013675:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013679:	50                   	push   eax
c001367a:	e8 d1 d0 fe ff       	call   c0000750 <strcmp>
c001367f:	83 c4 10             	add    esp,0x10
c0013682:	85 c0                	test   eax,eax
c0013684:	75 dd                	jne    c0013663 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013686:	eb e4                	jmp    c001366c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013688:	8d 50 01             	lea    edx,[eax+0x1]
c001368b:	83 f9 3d             	cmp    ecx,0x3d
c001368e:	74 1e                	je     c00136ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013690:	89 d0                	mov    eax,edx
c0013692:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013695:	85 c9                	test   ecx,ecx
c0013697:	75 ef                	jne    c0013688 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013699:	eb 0f                	jmp    c00136aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001369b:	8d 50 01             	lea    edx,[eax+0x1]
c001369e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00136a2:	47                   	inc    edi
c00136a3:	89 d0                	mov    eax,edx
c00136a5:	e9 2c ff ff ff       	jmp    c00135d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c00136aa:	31 c0                	xor    eax,eax
c00136ac:	eb 33                	jmp    c00136e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c00136ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00136b2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00136b5:	50                   	push   eax
c00136b6:	50                   	push   eax
c00136b7:	8d 44 24 60          	lea    eax,[esp+0x60]
c00136bb:	50                   	push   eax
c00136bc:	53                   	push   ebx
c00136bd:	e8 8e d0 fe ff       	call   c0000750 <strcmp>
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	85 c0                	test   eax,eax
c00136c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136cb:	75 96                	jne    c0013663 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00136cd:	51                   	push   ecx
c00136ce:	51                   	push   ecx
c00136cf:	52                   	push   edx
c00136d0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00136d7:	e8 64 cf fe ff       	call   c0000640 <strcpy>
c00136dc:	83 c4 10             	add    esp,0x10
c00136df:	b0 01                	mov    al,0x1
c00136e1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00136e7:	5b                   	pop    ebx
c00136e8:	5e                   	pop    esi
c00136e9:	5f                   	pop    edi
c00136ea:	5d                   	pop    ebp
c00136eb:	c3                   	ret    

c00136ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00136ec:	57                   	push   edi
c00136ed:	56                   	push   esi
c00136ee:	53                   	push   ebx
c00136ef:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00136f5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00136fc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013703:	53                   	push   ebx
c0013704:	e8 67 ce fe ff       	call   c0000570 <strlen>
c0013709:	89 34 24             	mov    DWORD PTR [esp],esi
c001370c:	89 c7                	mov    edi,eax
c001370e:	e8 5d ce fe ff       	call   c0000570 <strlen>
c0013713:	83 c4 10             	add    esp,0x10
c0013716:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001371a:	3d ff 00 00 00       	cmp    eax,0xff
c001371f:	0f 87 d3 00 00 00    	ja     c00137f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013725:	57                   	push   edi
c0013726:	57                   	push   edi
c0013727:	56                   	push   esi
c0013728:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001372c:	56                   	push   esi
c001372d:	e8 0e cf fe ff       	call   c0000640 <strcpy>
c0013732:	58                   	pop    eax
c0013733:	5a                   	pop    edx
c0013734:	68 23 24 02 c0       	push   0xc0022423
c0013739:	56                   	push   esi
c001373a:	e8 01 d1 fe ff       	call   c0000840 <strcat>
c001373f:	59                   	pop    ecx
c0013740:	5f                   	pop    edi
c0013741:	53                   	push   ebx
c0013742:	56                   	push   esi
c0013743:	e8 f8 d0 fe ff       	call   c0000840 <strcat>
c0013748:	58                   	pop    eax
c0013749:	5a                   	pop    edx
c001374a:	68 cf 20 02 c0       	push   0xc00220cf
c001374f:	56                   	push   esi
c0013750:	e8 eb d0 fe ff       	call   c0000840 <strcat>
c0013755:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001375c:	e8 55 43 ff ff       	call   c0007ab6 <malloc>
c0013761:	83 c4 0c             	add    esp,0xc
c0013764:	89 c3                	mov    ebx,eax
c0013766:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001376c:	56                   	push   esi
c001376d:	50                   	push   eax
c001376e:	e8 db 80 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0013773:	83 c4 10             	add    esp,0x10
c0013776:	85 db                	test   ebx,ebx
c0013778:	74 7e                	je     c00137f8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001377a:	51                   	push   ecx
c001377b:	51                   	push   ecx
c001377c:	6a 01                	push   0x1
c001377e:	53                   	push   ebx
c001377f:	e8 92 81 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	85 c0                	test   eax,eax
c0013789:	74 08                	je     c0013793 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001378b:	83 ec 0c             	sub    esp,0xc
c001378e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013790:	53                   	push   ebx
c0013791:	eb 5f                	jmp    c00137f2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013793:	52                   	push   edx
c0013794:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013798:	50                   	push   eax
c0013799:	8d 44 24 20          	lea    eax,[esp+0x20]
c001379d:	50                   	push   eax
c001379e:	53                   	push   ebx
c001379f:	e8 74 84 ff ff       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c00137a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	89 c1                	mov    ecx,eax
c00137ad:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00137b1:	74 31                	je     c00137e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00137b3:	83 ec 0c             	sub    esp,0xc
c00137b6:	50                   	push   eax
c00137b7:	e8 fa 42 ff ff       	call   c0007ab6 <malloc>
c00137bc:	89 c6                	mov    esi,eax
c00137be:	58                   	pop    eax
c00137bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137c1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00137c5:	52                   	push   edx
c00137c6:	56                   	push   esi
c00137c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00137cf:	53                   	push   ebx
c00137d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137d3:	83 c4 20             	add    esp,0x20
c00137d6:	85 c0                	test   eax,eax
c00137d8:	75 0a                	jne    c00137e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00137da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137de:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00137e2:	74 18                	je     c00137fc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00137e4:	83 ec 0c             	sub    esp,0xc
c00137e7:	53                   	push   ebx
c00137e8:	e8 87 81 ff ff       	call   c000b974 <File::close()>
c00137ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137f5:	83 c4 10             	add    esp,0x10
c00137f8:	31 c0                	xor    eax,eax
c00137fa:	eb 3b                	jmp    c0013837 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00137fc:	83 ec 0c             	sub    esp,0xc
c00137ff:	53                   	push   ebx
c0013800:	e8 6f 81 ff ff       	call   c000b974 <File::close()>
c0013805:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013807:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001380a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001380d:	83 c4 0c             	add    esp,0xc
c0013810:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013817:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001381e:	56                   	push   esi
c001381f:	e8 57 fd ff ff       	call   c001357b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013824:	89 34 24             	mov    DWORD PTR [esp],esi
c0013827:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001382b:	e8 96 42 ff ff       	call   c0007ac6 <free>
c0013830:	83 c4 10             	add    esp,0x10
c0013833:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013837:	81 c4 20 01 00 00    	add    esp,0x120
c001383d:	5b                   	pop    ebx
c001383e:	5e                   	pop    esi
c001383f:	5f                   	pop    edi
c0013840:	c3                   	ret    

c0013841 <Reg::getLine(char*, char*, char*)>:
c0013841:	57                   	push   edi
c0013842:	56                   	push   esi
c0013843:	53                   	push   ebx
c0013844:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013848:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001384c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013850:	57                   	push   edi
c0013851:	56                   	push   esi
c0013852:	53                   	push   ebx
c0013853:	68 d4 20 02 c0       	push   0xc00220d4
c0013858:	e8 8f fe ff ff       	call   c00136ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001385d:	83 c4 10             	add    esp,0x10
c0013860:	84 c0                	test   al,al
c0013862:	75 10                	jne    c0013874 <Reg::getLine(char*, char*, char*)+0x33>
c0013864:	57                   	push   edi
c0013865:	56                   	push   esi
c0013866:	53                   	push   ebx
c0013867:	68 f9 20 02 c0       	push   0xc00220f9
c001386c:	e8 7b fe ff ff       	call   c00136ec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013871:	83 c4 10             	add    esp,0x10
c0013874:	5b                   	pop    ebx
c0013875:	5e                   	pop    esi
c0013876:	5f                   	pop    edi
c0013877:	c3                   	ret    

c0013878 <Reg::readInt(char*, char*, int*)>:
c0013878:	55                   	push   ebp
c0013879:	57                   	push   edi
c001387a:	56                   	push   esi
c001387b:	53                   	push   ebx
c001387c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013882:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013886:	55                   	push   ebp
c0013887:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001388e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013895:	e8 a7 ff ff ff       	call   c0013841 <Reg::getLine(char*, char*, char*)>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	84 c0                	test   al,al
c001389f:	0f 84 b6 00 00 00    	je     c001395b <Reg::readInt(char*, char*, int*)+0xe3>
c00138a5:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00138aa:	83 fa 2b             	cmp    edx,0x2b
c00138ad:	74 0c                	je     c00138bb <Reg::readInt(char*, char*, int*)+0x43>
c00138af:	83 fa 2d             	cmp    edx,0x2d
c00138b2:	75 0e                	jne    c00138c2 <Reg::readInt(char*, char*, int*)+0x4a>
c00138b4:	ba 01 00 00 00       	mov    edx,0x1
c00138b9:	eb 0b                	jmp    c00138c6 <Reg::readInt(char*, char*, int*)+0x4e>
c00138bb:	ba 01 00 00 00       	mov    edx,0x1
c00138c0:	eb 02                	jmp    c00138c4 <Reg::readInt(char*, char*, int*)+0x4c>
c00138c2:	31 d2                	xor    edx,edx
c00138c4:	31 c0                	xor    eax,eax
c00138c6:	be 0a 00 00 00       	mov    esi,0xa
c00138cb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00138d0:	75 21                	jne    c00138f3 <Reg::readInt(char*, char*, int*)+0x7b>
c00138d2:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00138d7:	83 f9 78             	cmp    ecx,0x78
c00138da:	75 0a                	jne    c00138e6 <Reg::readInt(char*, char*, int*)+0x6e>
c00138dc:	83 c2 02             	add    edx,0x2
c00138df:	be 10 00 00 00       	mov    esi,0x10
c00138e4:	eb 0d                	jmp    c00138f3 <Reg::readInt(char*, char*, int*)+0x7b>
c00138e6:	83 f9 62             	cmp    ecx,0x62
c00138e9:	75 08                	jne    c00138f3 <Reg::readInt(char*, char*, int*)+0x7b>
c00138eb:	83 c2 02             	add    edx,0x2
c00138ee:	be 02 00 00 00       	mov    esi,0x2
c00138f3:	01 d5                	add    ebp,edx
c00138f5:	31 d2                	xor    edx,edx
c00138f7:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00138fb:	83 f9 0d             	cmp    ecx,0xd
c00138fe:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013902:	0f 94 c3             	sete   bl
c0013905:	85 c9                	test   ecx,ecx
c0013907:	89 df                	mov    edi,ebx
c0013909:	0f 94 c3             	sete   bl
c001390c:	09 df                	or     edi,ebx
c001390e:	89 fb                	mov    ebx,edi
c0013910:	83 e7 01             	and    edi,0x1
c0013913:	75 35                	jne    c001394a <Reg::readInt(char*, char*, int*)+0xd2>
c0013915:	0f af d6             	imul   edx,esi
c0013918:	83 fe 10             	cmp    esi,0x10
c001391b:	75 26                	jne    c0013943 <Reg::readInt(char*, char*, int*)+0xcb>
c001391d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013921:	83 ef 41             	sub    edi,0x41
c0013924:	89 fb                	mov    ebx,edi
c0013926:	80 fb 05             	cmp    bl,0x5
c0013929:	77 06                	ja     c0013931 <Reg::readInt(char*, char*, int*)+0xb9>
c001392b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001392f:	eb 16                	jmp    c0013947 <Reg::readInt(char*, char*, int*)+0xcf>
c0013931:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013935:	83 eb 61             	sub    ebx,0x61
c0013938:	80 fb 05             	cmp    bl,0x5
c001393b:	77 06                	ja     c0013943 <Reg::readInt(char*, char*, int*)+0xcb>
c001393d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013941:	eb 04                	jmp    c0013947 <Reg::readInt(char*, char*, int*)+0xcf>
c0013943:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013947:	45                   	inc    ebp
c0013948:	eb ad                	jmp    c00138f7 <Reg::readInt(char*, char*, int*)+0x7f>
c001394a:	84 c0                	test   al,al
c001394c:	74 02                	je     c0013950 <Reg::readInt(char*, char*, int*)+0xd8>
c001394e:	f7 da                	neg    edx
c0013950:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013957:	89 10                	mov    DWORD PTR [eax],edx
c0013959:	88 d8                	mov    al,bl
c001395b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013961:	5b                   	pop    ebx
c0013962:	5e                   	pop    esi
c0013963:	5f                   	pop    edi
c0013964:	5d                   	pop    ebp
c0013965:	c3                   	ret    

c0013966 <Reg::readString(char*, char*, char*, int)>:
c0013966:	57                   	push   edi
c0013967:	56                   	push   esi
c0013968:	53                   	push   ebx
c0013969:	81 ec d4 00 00 00    	sub    esp,0xd4
c001396f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013976:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001397a:	57                   	push   edi
c001397b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013982:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013989:	e8 b3 fe ff ff       	call   c0013841 <Reg::getLine(char*, char*, char*)>
c001398e:	83 c4 10             	add    esp,0x10
c0013991:	89 c6                	mov    esi,eax
c0013993:	84 c0                	test   al,al
c0013995:	74 44                	je     c00139db <Reg::readString(char*, char*, char*, int)+0x75>
c0013997:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001399e:	31 c0                	xor    eax,eax
c00139a0:	4a                   	dec    edx
c00139a1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00139a4:	84 c9                	test   cl,cl
c00139a6:	74 0f                	je     c00139b7 <Reg::readString(char*, char*, char*, int)+0x51>
c00139a8:	39 c2                	cmp    edx,eax
c00139aa:	7e 0b                	jle    c00139b7 <Reg::readString(char*, char*, char*, int)+0x51>
c00139ac:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00139af:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00139b4:	40                   	inc    eax
c00139b5:	eb ea                	jmp    c00139a1 <Reg::readString(char*, char*, char*, int)+0x3b>
c00139b7:	83 ec 0c             	sub    esp,0xc
c00139ba:	53                   	push   ebx
c00139bb:	e8 b0 cb fe ff       	call   c0000570 <strlen>
c00139c0:	83 c4 10             	add    esp,0x10
c00139c3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00139c8:	75 11                	jne    c00139db <Reg::readString(char*, char*, char*, int)+0x75>
c00139ca:	83 ec 0c             	sub    esp,0xc
c00139cd:	53                   	push   ebx
c00139ce:	e8 9d cb fe ff       	call   c0000570 <strlen>
c00139d3:	83 c4 10             	add    esp,0x10
c00139d6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00139db:	81 c4 d0 00 00 00    	add    esp,0xd0
c00139e1:	89 f0                	mov    eax,esi
c00139e3:	5b                   	pop    ebx
c00139e4:	5e                   	pop    esi
c00139e5:	5f                   	pop    edi
c00139e6:	c3                   	ret    

c00139e7 <Reg::readBool(char*, char*, bool*)>:
c00139e7:	83 ec 20             	sub    esp,0x20
c00139ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139ee:	50                   	push   eax
c00139ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139f7:	e8 7c fe ff ff       	call   c0013878 <Reg::readInt(char*, char*, int*)>
c00139fc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013a01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013a05:	0f 95 02             	setne  BYTE PTR [edx]
c0013a08:	83 c4 2c             	add    esp,0x2c
c0013a0b:	c3                   	ret    

c0013a0c <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013a0c:	53                   	push   ebx
c0013a0d:	83 ec 1c             	sub    esp,0x1c
c0013a10:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013a14:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013a18:	50                   	push   eax
c0013a19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a21:	e8 c1 ff ff ff       	call   c00139e7 <Reg::readBool(char*, char*, bool*)>
c0013a26:	83 c4 10             	add    esp,0x10
c0013a29:	84 c0                	test   al,al
c0013a2b:	74 04                	je     c0013a31 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013a2d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013a31:	88 d8                	mov    al,bl
c0013a33:	83 c4 18             	add    esp,0x18
c0013a36:	5b                   	pop    ebx
c0013a37:	c3                   	ret    

c0013a38 <Reg::readIntWithDefault(char*, char*, int)>:
c0013a38:	53                   	push   ebx
c0013a39:	83 ec 1c             	sub    esp,0x1c
c0013a3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a40:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013a44:	50                   	push   eax
c0013a45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a4d:	e8 26 fe ff ff       	call   c0013878 <Reg::readInt(char*, char*, int*)>
c0013a52:	83 c4 10             	add    esp,0x10
c0013a55:	84 c0                	test   al,al
c0013a57:	74 04                	je     c0013a5d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013a59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a5d:	89 d8                	mov    eax,ebx
c0013a5f:	83 c4 18             	add    esp,0x18
c0013a62:	5b                   	pop    ebx
c0013a63:	c3                   	ret    

c0013a64 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013a64:	57                   	push   edi
c0013a65:	56                   	push   esi
c0013a66:	56                   	push   esi
c0013a67:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a6b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013a6f:	56                   	push   esi
c0013a70:	57                   	push   edi
c0013a71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a79:	e8 e8 fe ff ff       	call   c0013966 <Reg::readString(char*, char*, char*, int)>
c0013a7e:	83 c4 10             	add    esp,0x10
c0013a81:	84 c0                	test   al,al
c0013a83:	75 1a                	jne    c0013a9f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013a85:	51                   	push   ecx
c0013a86:	56                   	push   esi
c0013a87:	6a 00                	push   0x0
c0013a89:	57                   	push   edi
c0013a8a:	e8 61 ca fe ff       	call   c00004f0 <memset>
c0013a8f:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013a92:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a98:	83 c4 10             	add    esp,0x10
c0013a9b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a9f:	89 f8                	mov    eax,edi
c0013aa1:	5a                   	pop    edx
c0013aa2:	5e                   	pop    esi
c0013aa3:	5f                   	pop    edi
c0013aa4:	c3                   	ret    

c0013aa5 <SysEject(regs*)>:
c0013aa5:	83 ec 0c             	sub    esp,0xc
c0013aa8:	83 ca ff             	or     edx,0xffffffff
c0013aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aaf:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ab2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ab7:	83 e9 41             	sub    ecx,0x41
c0013aba:	83 f9 19             	cmp    ecx,0x19
c0013abd:	77 18                	ja     c0013ad7 <SysEject(regs*)+0x32>
c0013abf:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013ac6:	85 c9                	test   ecx,ecx
c0013ac8:	74 0d                	je     c0013ad7 <SysEject(regs*)+0x32>
c0013aca:	83 ec 0c             	sub    esp,0xc
c0013acd:	51                   	push   ecx
c0013ace:	e8 17 a0 ff ff       	call   c000daea <LogicalDisk::eject()>
c0013ad3:	83 c4 10             	add    esp,0x10
c0013ad6:	99                   	cdq    
c0013ad7:	83 c4 0c             	add    esp,0xc
c0013ada:	c3                   	ret    

c0013adb <SysExit(regs*)>:
c0013adb:	83 ec 18             	sub    esp,0x18
c0013ade:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ae2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ae5:	e8 16 2b 00 00       	call   c0016600 <terminateTask(int)>
c0013aea:	83 c8 ff             	or     eax,0xffffffff
c0013aed:	83 c4 1c             	add    esp,0x1c
c0013af0:	89 c2                	mov    edx,eax
c0013af2:	c3                   	ret    

c0013af3 <SysGetCwd(regs*)>:
c0013af3:	83 ec 10             	sub    esp,0x10
c0013af6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013afa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013afd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013b00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b05:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b08:	e8 89 7a ff ff       	call   c000b596 <Fs::getcwd(Process*, char*, int)>
c0013b0d:	83 c4 1c             	add    esp,0x1c
c0013b10:	99                   	cdq    
c0013b11:	c3                   	ret    

c0013b12 <SysGetPID(regs*)>:
c0013b12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b1c:	99                   	cdq    
c0013b1d:	c3                   	ret    

c0013b1e <SysGetRAMData(regs*)>:
c0013b1e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013b24:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013b2e:	99                   	cdq    
c0013b2f:	f7 f9                	idiv   ecx
c0013b31:	c1 e0 18             	shl    eax,0x18
c0013b34:	09 c8                	or     eax,ecx
c0013b36:	99                   	cdq    
c0013b37:	c3                   	ret    

c0013b38 <SysGetVGAPtr(regs*)>:
c0013b38:	55                   	push   ebp
c0013b39:	57                   	push   edi
c0013b3a:	56                   	push   esi
c0013b3b:	53                   	push   ebx
c0013b3c:	83 ec 18             	sub    esp,0x18
c0013b3f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013b43:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013b46:	e8 81 25 00 00       	call   c00160cc <Thr::processFromPID(int)>
c0013b4b:	83 c4 10             	add    esp,0x10
c0013b4e:	89 c1                	mov    ecx,eax
c0013b50:	b8 01 00 00 00       	mov    eax,0x1
c0013b55:	85 c9                	test   ecx,ecx
c0013b57:	74 57                	je     c0013bb0 <SysGetVGAPtr(regs*)+0x78>
c0013b59:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013b5f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013b63:	74 0c                	je     c0013b71 <SysGetVGAPtr(regs*)+0x39>
c0013b65:	83 ec 0c             	sub    esp,0xc
c0013b68:	55                   	push   ebp
c0013b69:	e8 eb 4b ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013b6e:	83 c4 10             	add    esp,0x10
c0013b71:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013b74:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013b77:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013b7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b7e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013b81:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b84:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013b8a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b8d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013b90:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013b96:	50                   	push   eax
c0013b97:	50                   	push   eax
c0013b98:	68 14 21 02 c0       	push   0xc0022114
c0013b9d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ba0:	05 a8 0f 00 00       	add    eax,0xfa8
c0013ba5:	50                   	push   eax
c0013ba6:	e8 95 ca fe ff       	call   c0000640 <strcpy>
c0013bab:	83 c4 10             	add    esp,0x10
c0013bae:	31 c0                	xor    eax,eax
c0013bb0:	83 c4 0c             	add    esp,0xc
c0013bb3:	31 d2                	xor    edx,edx
c0013bb5:	5b                   	pop    ebx
c0013bb6:	5e                   	pop    esi
c0013bb7:	5f                   	pop    edi
c0013bb8:	5d                   	pop    ebp
c0013bb9:	c3                   	ret    
c0013bba:	66 90                	xchg   ax,ax

c0013bbc <SysKill(regs*)>:
c0013bbc:	53                   	push   ebx
c0013bbd:	83 ec 08             	sub    esp,0x8
c0013bc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bc4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013bc8:	75 16                	jne    c0013be0 <SysKill(regs*)+0x24>
c0013bca:	83 ec 0c             	sub    esp,0xc
c0013bcd:	68 1e 21 02 c0       	push   0xc002211e
c0013bd2:	e8 ca d7 ff ff       	call   c00113a1 <KePanic(char const*)>
c0013bd7:	83 c4 10             	add    esp,0x10
c0013bda:	e9 89 00 00 00       	jmp    c0013c68 <SysKill(regs*)+0xac>
c0013bdf:	90                   	nop
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	68 e4 96 02 c0       	push   0xc00296e4
c0013be8:	e8 cf bc 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bed:	8d 76 00             	lea    esi,[esi+0x0]
c0013bf0:	83 c4 10             	add    esp,0x10
c0013bf3:	85 c0                	test   eax,eax
c0013bf5:	74 19                	je     c0013c10 <SysKill(regs*)+0x54>
c0013bf7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013bfa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013bfd:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013bff:	74 33                	je     c0013c34 <SysKill(regs*)+0x78>
c0013c01:	52                   	push   edx
c0013c02:	52                   	push   edx
c0013c03:	50                   	push   eax
c0013c04:	68 e4 96 02 c0       	push   0xc00296e4
c0013c09:	e8 ce bf 00 00       	call   c001fbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c0e:	eb e0                	jmp    c0013bf0 <SysKill(regs*)+0x34>
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	68 d8 96 02 c0       	push   0xc00296d8
c0013c18:	e8 9f bc 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c20:	83 c4 10             	add    esp,0x10
c0013c23:	85 c0                	test   eax,eax
c0013c25:	74 41                	je     c0013c68 <SysKill(regs*)+0xac>
c0013c27:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013c2a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013c2d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013c2f:	75 27                	jne    c0013c58 <SysKill(regs*)+0x9c>
c0013c31:	8d 76 00             	lea    esi,[esi+0x0]
c0013c34:	51                   	push   ecx
c0013c35:	51                   	push   ecx
c0013c36:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c3e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c41:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c47:	e8 f6 db ff ff       	call   c0011842 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013c4c:	83 c4 10             	add    esp,0x10
c0013c4f:	31 c0                	xor    eax,eax
c0013c51:	31 d2                	xor    edx,edx
c0013c53:	eb 1b                	jmp    c0013c70 <SysKill(regs*)+0xb4>
c0013c55:	8d 76 00             	lea    esi,[esi+0x0]
c0013c58:	52                   	push   edx
c0013c59:	52                   	push   edx
c0013c5a:	50                   	push   eax
c0013c5b:	68 d8 96 02 c0       	push   0xc00296d8
c0013c60:	e8 77 bf 00 00       	call   c001fbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013c65:	eb b9                	jmp    c0013c20 <SysKill(regs*)+0x64>
c0013c67:	90                   	nop
c0013c68:	83 c8 ff             	or     eax,0xffffffff
c0013c6b:	89 c2                	mov    edx,eax
c0013c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c70:	83 c4 08             	add    esp,0x8
c0013c73:	5b                   	pop    ebx
c0013c74:	c3                   	ret    

c0013c75 <SysLoadDLL(regs*)>:
c0013c75:	56                   	push   esi
c0013c76:	53                   	push   ebx
c0013c77:	31 d2                	xor    edx,edx
c0013c79:	51                   	push   ecx
c0013c7a:	b8 01 00 00 00       	mov    eax,0x1
c0013c7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c83:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013c87:	0f 84 8c 00 00 00    	je     c0013d19 <SysLoadDLL(regs*)+0xa4>
c0013c8d:	83 ec 0c             	sub    esp,0xc
c0013c90:	68 14 01 00 00       	push   0x114
c0013c95:	e8 1c 3e ff ff       	call   c0007ab6 <malloc>
c0013c9a:	83 c4 0c             	add    esp,0xc
c0013c9d:	89 c3                	mov    ebx,eax
c0013c9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ca4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ca7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013caa:	53                   	push   ebx
c0013cab:	e8 9e 7b ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0013cb0:	83 c4 10             	add    esp,0x10
c0013cb3:	31 d2                	xor    edx,edx
c0013cb5:	b8 02 00 00 00       	mov    eax,0x2
c0013cba:	85 db                	test   ebx,ebx
c0013cbc:	74 5b                	je     c0013d19 <SysLoadDLL(regs*)+0xa4>
c0013cbe:	83 ec 0c             	sub    esp,0xc
c0013cc1:	53                   	push   ebx
c0013cc2:	e8 13 7f ff ff       	call   c000bbda <File::exists()>
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	84 c0                	test   al,al
c0013ccc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cce:	75 11                	jne    c0013ce1 <SysLoadDLL(regs*)+0x6c>
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	53                   	push   ebx
c0013cd4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cd7:	83 c4 10             	add    esp,0x10
c0013cda:	b8 03 00 00 00       	mov    eax,0x3
c0013cdf:	eb 36                	jmp    c0013d17 <SysLoadDLL(regs*)+0xa2>
c0013ce1:	83 ec 0c             	sub    esp,0xc
c0013ce4:	53                   	push   ebx
c0013ce5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ce8:	58                   	pop    eax
c0013ce9:	5a                   	pop    edx
c0013cea:	6a 00                	push   0x0
c0013cec:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013cef:	e8 0e 15 00 00       	call   c0015202 <Thr::loadDLL(char const*, bool)>
c0013cf4:	83 c4 10             	add    esp,0x10
c0013cf7:	89 c1                	mov    ecx,eax
c0013cf9:	31 d2                	xor    edx,edx
c0013cfb:	b8 04 00 00 00       	mov    eax,0x4
c0013d00:	85 c9                	test   ecx,ecx
c0013d02:	74 15                	je     c0013d19 <SysLoadDLL(regs*)+0xa4>
c0013d04:	53                   	push   ebx
c0013d05:	53                   	push   ebx
c0013d06:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013d0c:	51                   	push   ecx
c0013d0d:	e8 21 17 00 00       	call   c0015433 <Thr::executeDLL(unsigned long, void*)>
c0013d12:	83 c4 10             	add    esp,0x10
c0013d15:	31 c0                	xor    eax,eax
c0013d17:	31 d2                	xor    edx,edx
c0013d19:	59                   	pop    ecx
c0013d1a:	5b                   	pop    ebx
c0013d1b:	5e                   	pop    esi
c0013d1c:	c3                   	ret    

c0013d1d <SysRead(regs*)>:
c0013d1d:	57                   	push   edi
c0013d1e:	56                   	push   esi
c0013d1f:	53                   	push   ebx
c0013d20:	83 ec 10             	sub    esp,0x10
c0013d23:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013d27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d2a:	83 f8 02             	cmp    eax,0x2
c0013d2d:	77 10                	ja     c0013d3f <SysRead(regs*)+0x22>
c0013d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d37:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013d3d:	eb 0e                	jmp    c0013d4d <SysRead(regs*)+0x30>
c0013d3f:	83 ec 0c             	sub    esp,0xc
c0013d42:	50                   	push   eax
c0013d43:	e8 6b 57 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013d48:	83 c4 10             	add    esp,0x10
c0013d4b:	89 c1                	mov    ecx,eax
c0013d4d:	83 c8 ff             	or     eax,0xffffffff
c0013d50:	85 c9                	test   ecx,ecx
c0013d52:	89 c2                	mov    edx,eax
c0013d54:	74 28                	je     c0013d7e <SysRead(regs*)+0x61>
c0013d56:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013d5e:	31 ff                	xor    edi,edi
c0013d60:	83 ec 0c             	sub    esp,0xc
c0013d63:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d65:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013d69:	52                   	push   edx
c0013d6a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d6d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013d70:	57                   	push   edi
c0013d71:	56                   	push   esi
c0013d72:	51                   	push   ecx
c0013d73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013d7a:	83 c4 20             	add    esp,0x20
c0013d7d:	99                   	cdq    
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	5b                   	pop    ebx
c0013d82:	5e                   	pop    esi
c0013d83:	5f                   	pop    edi
c0013d84:	c3                   	ret    

c0013d85 <SysRegisterSignal(regs*)>:
c0013d85:	83 ec 18             	sub    esp,0x18
c0013d88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d8c:	6a 00                	push   0x0
c0013d8e:	6a 00                	push   0x0
c0013d90:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d93:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d9e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013da4:	e8 63 da ff ff       	call   c001180c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013da9:	83 c4 2c             	add    esp,0x2c
c0013dac:	99                   	cdq    
c0013dad:	c3                   	ret    

c0013dae <SysRegistryGetTypeFromPath(regs*)>:
c0013dae:	57                   	push   edi
c0013daf:	56                   	push   esi
c0013db0:	53                   	push   ebx
c0013db1:	81 ec 38 01 00 00    	sub    esp,0x138
c0013db7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013dbe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013dc1:	68 3f 21 02 c0       	push   0xc002213f
c0013dc6:	e8 7a 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013dcb:	5a                   	pop    edx
c0013dcc:	59                   	pop    ecx
c0013dcd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013dd0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013dd3:	e8 4d f6 ff ff       	call   c0013425 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013dd8:	5f                   	pop    edi
c0013dd9:	89 c6                	mov    esi,eax
c0013ddb:	5a                   	pop    edx
c0013ddc:	50                   	push   eax
c0013ddd:	68 5f 21 02 c0       	push   0xc002215f
c0013de2:	e8 5e 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013de7:	83 c4 10             	add    esp,0x10
c0013dea:	85 f6                	test   esi,esi
c0013dec:	74 28                	je     c0013e16 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013dee:	50                   	push   eax
c0013def:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013df3:	57                   	push   edi
c0013df4:	56                   	push   esi
c0013df5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013df8:	e8 0c f2 ff ff       	call   c0013009 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013dfd:	83 c4 0c             	add    esp,0xc
c0013e00:	89 c3                	mov    ebx,eax
c0013e02:	57                   	push   edi
c0013e03:	50                   	push   eax
c0013e04:	68 67 21 02 c0       	push   0xc0022167
c0013e09:	e8 37 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e0e:	89 d8                	mov    eax,ebx
c0013e10:	83 c4 10             	add    esp,0x10
c0013e13:	99                   	cdq    
c0013e14:	eb 05                	jmp    c0013e1b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013e16:	83 c8 ff             	or     eax,0xffffffff
c0013e19:	89 c2                	mov    edx,eax
c0013e1b:	81 c4 30 01 00 00    	add    esp,0x130
c0013e21:	5b                   	pop    ebx
c0013e22:	5e                   	pop    esi
c0013e23:	5f                   	pop    edi
c0013e24:	c3                   	ret    

c0013e25 <SysRegistryReadExtent(regs*)>:
c0013e25:	83 ec 1c             	sub    esp,0x1c
c0013e28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e2c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e2f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013e32:	85 c0                	test   eax,eax
c0013e34:	79 1f                	jns    c0013e55 <SysRegistryReadExtent(regs*)+0x30>
c0013e36:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013e3b:	52                   	push   edx
c0013e3c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013e40:	52                   	push   edx
c0013e41:	50                   	push   eax
c0013e42:	51                   	push   ecx
c0013e43:	e8 b3 f0 ff ff       	call   c0012efb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013e48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013e50:	83 c4 10             	add    esp,0x10
c0013e53:	eb 14                	jmp    c0013e69 <SysRegistryReadExtent(regs*)+0x44>
c0013e55:	83 ec 04             	sub    esp,0x4
c0013e58:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013e5b:	50                   	push   eax
c0013e5c:	51                   	push   ecx
c0013e5d:	e8 33 eb ff ff       	call   c0012995 <CmGetString(Reghive_Tag*, int, char*)>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	31 c0                	xor    eax,eax
c0013e67:	31 d2                	xor    edx,edx
c0013e69:	83 c4 1c             	add    esp,0x1c
c0013e6c:	c3                   	ret    

c0013e6d <SysRegistryPathToExtentLookup(regs*)>:
c0013e6d:	53                   	push   ebx
c0013e6e:	83 ec 10             	sub    esp,0x10
c0013e71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e75:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e78:	68 7d 21 02 c0       	push   0xc002217d
c0013e7d:	e8 c3 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e82:	58                   	pop    eax
c0013e83:	5a                   	pop    edx
c0013e84:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e87:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e8a:	e8 96 f5 ff ff       	call   c0013425 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013e8f:	83 c4 18             	add    esp,0x18
c0013e92:	99                   	cdq    
c0013e93:	5b                   	pop    ebx
c0013e94:	c3                   	ret    

c0013e95 <SysRegistryEnterDirectory(regs*)>:
c0013e95:	53                   	push   ebx
c0013e96:	83 ec 10             	sub    esp,0x10
c0013e99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e9d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ea0:	68 a0 21 02 c0       	push   0xc00221a0
c0013ea5:	e8 9b 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013eaa:	58                   	pop    eax
c0013eab:	5a                   	pop    edx
c0013eac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013eaf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013eb2:	e8 55 eb ff ff       	call   c0012a0c <CmEnterDirectory(Reghive_Tag*, int)>
c0013eb7:	83 c4 18             	add    esp,0x18
c0013eba:	99                   	cdq    
c0013ebb:	5b                   	pop    ebx
c0013ebc:	c3                   	ret    

c0013ebd <SysRegistryGetNext(regs*)>:
c0013ebd:	53                   	push   ebx
c0013ebe:	83 ec 10             	sub    esp,0x10
c0013ec1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ec5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ec8:	68 be 21 02 c0       	push   0xc00221be
c0013ecd:	e8 73 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ed2:	58                   	pop    eax
c0013ed3:	5a                   	pop    edx
c0013ed4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ed7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013eda:	e8 6c eb ff ff       	call   c0012a4b <CmGetNext(Reghive_Tag*, int)>
c0013edf:	83 c4 18             	add    esp,0x18
c0013ee2:	99                   	cdq    
c0013ee3:	5b                   	pop    ebx
c0013ee4:	c3                   	ret    

c0013ee5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013ee5:	57                   	push   edi
c0013ee6:	56                   	push   esi
c0013ee7:	53                   	push   ebx
c0013ee8:	81 ec 34 01 00 00    	sub    esp,0x134
c0013eee:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013ef5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013ef9:	57                   	push   edi
c0013efa:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013efd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013f00:	e8 04 f1 ff ff       	call   c0013009 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013f05:	89 c3                	mov    ebx,eax
c0013f07:	58                   	pop    eax
c0013f08:	5a                   	pop    edx
c0013f09:	57                   	push   edi
c0013f0a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013f0d:	e8 2e c7 fe ff       	call   c0000640 <strcpy>
c0013f12:	89 d8                	mov    eax,ebx
c0013f14:	81 c4 40 01 00 00    	add    esp,0x140
c0013f1a:	99                   	cdq    
c0013f1b:	5b                   	pop    ebx
c0013f1c:	5e                   	pop    esi
c0013f1d:	5f                   	pop    edi
c0013f1e:	c3                   	ret    

c0013f1f <SysRegistryOpen(regs*)>:
c0013f1f:	83 ec 18             	sub    esp,0x18
c0013f22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f26:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013f29:	e8 f7 e8 ff ff       	call   c0012825 <CmOpen(char const*)>
c0013f2e:	83 c4 1c             	add    esp,0x1c
c0013f31:	99                   	cdq    
c0013f32:	c3                   	ret    

c0013f33 <SysRegistryClose(regs*)>:
c0013f33:	83 ec 18             	sub    esp,0x18
c0013f36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f3a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f3d:	e8 01 ea ff ff       	call   c0012943 <CmClose(Reghive_Tag*)>
c0013f42:	31 c0                	xor    eax,eax
c0013f44:	31 d2                	xor    edx,edx
c0013f46:	83 c4 1c             	add    esp,0x1c
c0013f49:	c3                   	ret    

c0013f4a <SysSbrk(regs*)>:
c0013f4a:	56                   	push   esi
c0013f4b:	53                   	push   ebx
c0013f4c:	50                   	push   eax
c0013f4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f59:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013f5c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013f62:	85 db                	test   ebx,ebx
c0013f64:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013f67:	74 02                	je     c0013f6b <SysSbrk(regs*)+0x21>
c0013f69:	79 06                	jns    c0013f71 <SysSbrk(regs*)+0x27>
c0013f6b:	89 f0                	mov    eax,esi
c0013f6d:	31 d2                	xor    edx,edx
c0013f6f:	eb 2a                	jmp    c0013f9b <SysSbrk(regs*)+0x51>
c0013f71:	83 c8 ff             	or     eax,0xffffffff
c0013f74:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013f7a:	89 c2                	mov    edx,eax
c0013f7c:	77 1d                	ja     c0013f9b <SysSbrk(regs*)+0x51>
c0013f7e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013f84:	50                   	push   eax
c0013f85:	c1 ea 0c             	shr    edx,0xc
c0013f88:	68 07 0c 00 00       	push   0xc07
c0013f8d:	52                   	push   edx
c0013f8e:	51                   	push   ecx
c0013f8f:	e8 90 5e ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013f94:	89 f0                	mov    eax,esi
c0013f96:	31 d2                	xor    edx,edx
c0013f98:	83 c4 10             	add    esp,0x10
c0013f9b:	59                   	pop    ecx
c0013f9c:	5b                   	pop    ebx
c0013f9d:	5e                   	pop    esi
c0013f9e:	c3                   	ret    

c0013f9f <SysSetCwd(regs*)>:
c0013f9f:	83 ec 14             	sub    esp,0x14
c0013fa2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fa6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fa9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fae:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fb1:	e8 c3 7c ff ff       	call   c000bc79 <Fs::setcwd(Process*, char*)>
c0013fb6:	83 c4 1c             	add    esp,0x1c
c0013fb9:	99                   	cdq    
c0013fba:	c3                   	ret    

c0013fbb <SysSetTime(regs*)>:
c0013fbb:	55                   	push   ebp
c0013fbc:	31 c9                	xor    ecx,ecx
c0013fbe:	57                   	push   edi
c0013fbf:	bd 0c 00 00 00       	mov    ebp,0xc
c0013fc4:	56                   	push   esi
c0013fc5:	53                   	push   ebx
c0013fc6:	31 db                	xor    ebx,ebx
c0013fc8:	83 ec 10             	sub    esp,0x10
c0013fcb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013fcf:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013fd2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013fd5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013fd8:	89 c2                	mov    edx,eax
c0013fda:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013fe0:	83 e2 1f             	and    edx,0x1f
c0013fe3:	c1 e7 10             	shl    edi,0x10
c0013fe6:	42                   	inc    edx
c0013fe7:	c1 e8 05             	shr    eax,0x5
c0013fea:	88 d1                	mov    cl,dl
c0013fec:	31 d2                	xor    edx,edx
c0013fee:	f7 f5                	div    ebp
c0013ff0:	89 dd                	mov    ebp,ebx
c0013ff2:	88 d5                	mov    ch,dl
c0013ff4:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013ffa:	0f b7 c1             	movzx  eax,cx
c0013ffd:	31 d2                	xor    edx,edx
c0013fff:	09 f8                	or     eax,edi
c0014001:	bf 3c 00 00 00       	mov    edi,0x3c
c0014006:	89 c1                	mov    ecx,eax
c0014008:	89 f0                	mov    eax,esi
c001400a:	f7 f7                	div    edi
c001400c:	c1 e2 10             	shl    edx,0x10
c001400f:	09 d5                	or     ebp,edx
c0014011:	31 d2                	xor    edx,edx
c0014013:	89 eb                	mov    ebx,ebp
c0014015:	f7 f7                	div    edi
c0014017:	bf 10 0e 00 00       	mov    edi,0xe10
c001401c:	88 d7                	mov    bh,dl
c001401e:	89 f0                	mov    eax,esi
c0014020:	31 d2                	xor    edx,edx
c0014022:	f7 f7                	div    edi
c0014024:	bf 18 00 00 00       	mov    edi,0x18
c0014029:	31 d2                	xor    edx,edx
c001402b:	f7 f7                	div    edi
c001402d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0014032:	88 d3                	mov    bl,dl
c0014034:	53                   	push   ebx
c0014035:	51                   	push   ecx
c0014036:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001403c:	e8 45 84 ff ff       	call   c000c486 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014041:	83 c4 1c             	add    esp,0x1c
c0014044:	83 f0 01             	xor    eax,0x1
c0014047:	5b                   	pop    ebx
c0014048:	0f b6 c0             	movzx  eax,al
c001404b:	5e                   	pop    esi
c001404c:	31 d2                	xor    edx,edx
c001404e:	5f                   	pop    edi
c001404f:	5d                   	pop    ebp
c0014050:	c3                   	ret    

c0014051 <SysTimezone(regs*)>:
c0014051:	53                   	push   ebx
c0014052:	83 ec 08             	sub    esp,0x8
c0014055:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014059:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001405d:	75 17                	jne    c0014076 <SysTimezone(regs*)+0x25>
c001405f:	83 ec 0c             	sub    esp,0xc
c0014062:	68 d5 21 02 c0       	push   0xc00221d5
c0014067:	e8 d9 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001406c:	83 c8 ff             	or     eax,0xffffffff
c001406f:	83 c4 10             	add    esp,0x10
c0014072:	89 c2                	mov    edx,eax
c0014074:	eb 20                	jmp    c0014096 <SysTimezone(regs*)+0x45>
c0014076:	83 ec 0c             	sub    esp,0xc
c0014079:	68 ea 21 02 c0       	push   0xc00221ea
c001407e:	e8 c2 68 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014083:	58                   	pop    eax
c0014084:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014087:	e8 64 81 ff ff       	call   c000c1f0 <User::loadClockSettings(int)>
c001408c:	83 c4 10             	add    esp,0x10
c001408f:	b8 01 00 00 00       	mov    eax,0x1
c0014094:	31 d2                	xor    edx,edx
c0014096:	83 c4 08             	add    esp,0x8
c0014099:	5b                   	pop    ebx
c001409a:	c3                   	ret    

c001409b <SysTruncate(regs*)>:
c001409b:	55                   	push   ebp
c001409c:	57                   	push   edi
c001409d:	31 ff                	xor    edi,edi
c001409f:	56                   	push   esi
c00140a0:	53                   	push   ebx
c00140a1:	83 ec 0c             	sub    esp,0xc
c00140a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140a8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00140ab:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00140ae:	89 ce                	mov    esi,ecx
c00140b0:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00140b4:	0f 84 9a 00 00 00    	je     c0014154 <SysTruncate(regs*)+0xb9>
c00140ba:	83 ec 0c             	sub    esp,0xc
c00140bd:	68 14 01 00 00       	push   0x114
c00140c2:	e8 ef 39 ff ff       	call   c0007ab6 <malloc>
c00140c7:	83 c4 0c             	add    esp,0xc
c00140ca:	89 c3                	mov    ebx,eax
c00140cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140d1:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140d4:	55                   	push   ebp
c00140d5:	53                   	push   ebx
c00140d6:	e8 73 77 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c00140db:	83 c4 10             	add    esp,0x10
c00140de:	31 d2                	xor    edx,edx
c00140e0:	b8 03 00 00 00       	mov    eax,0x3
c00140e5:	85 db                	test   ebx,ebx
c00140e7:	0f 84 a2 00 00 00    	je     c001418f <SysTruncate(regs*)+0xf4>
c00140ed:	51                   	push   ecx
c00140ee:	51                   	push   ecx
c00140ef:	6a 02                	push   0x2
c00140f1:	53                   	push   ebx
c00140f2:	e8 1f 78 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c00140f7:	83 c4 10             	add    esp,0x10
c00140fa:	85 c0                	test   eax,eax
c00140fc:	74 13                	je     c0014111 <SysTruncate(regs*)+0x76>
c00140fe:	83 ec 0c             	sub    esp,0xc
c0014101:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014103:	53                   	push   ebx
c0014104:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014107:	83 c4 10             	add    esp,0x10
c001410a:	b8 04 00 00 00       	mov    eax,0x4
c001410f:	eb 7c                	jmp    c001418d <SysTruncate(regs*)+0xf2>
c0014111:	52                   	push   edx
c0014112:	57                   	push   edi
c0014113:	56                   	push   esi
c0014114:	53                   	push   ebx
c0014115:	e8 10 79 ff ff       	call   c000ba2a <File::truncate(unsigned long long)>
c001411a:	83 c4 10             	add    esp,0x10
c001411d:	85 c0                	test   eax,eax
c001411f:	74 1b                	je     c001413c <SysTruncate(regs*)+0xa1>
c0014121:	83 ec 0c             	sub    esp,0xc
c0014124:	53                   	push   ebx
c0014125:	e8 4a 78 ff ff       	call   c000b974 <File::close()>
c001412a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001412c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001412f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014132:	83 c4 10             	add    esp,0x10
c0014135:	b8 05 00 00 00       	mov    eax,0x5
c001413a:	eb 51                	jmp    c001418d <SysTruncate(regs*)+0xf2>
c001413c:	83 ec 0c             	sub    esp,0xc
c001413f:	53                   	push   ebx
c0014140:	e8 2f 78 ff ff       	call   c000b974 <File::close()>
c0014145:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014147:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001414a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001414d:	83 c4 10             	add    esp,0x10
c0014150:	31 c0                	xor    eax,eax
c0014152:	eb 39                	jmp    c001418d <SysTruncate(regs*)+0xf2>
c0014154:	31 d2                	xor    edx,edx
c0014156:	b8 01 00 00 00       	mov    eax,0x1
c001415b:	83 fd 02             	cmp    ebp,0x2
c001415e:	7e 2f                	jle    c001418f <SysTruncate(regs*)+0xf4>
c0014160:	83 ec 0c             	sub    esp,0xc
c0014163:	51                   	push   ecx
c0014164:	e8 4a 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014169:	83 c4 10             	add    esp,0x10
c001416c:	89 c1                	mov    ecx,eax
c001416e:	31 d2                	xor    edx,edx
c0014170:	b8 02 00 00 00       	mov    eax,0x2
c0014175:	85 c9                	test   ecx,ecx
c0014177:	74 16                	je     c001418f <SysTruncate(regs*)+0xf4>
c0014179:	50                   	push   eax
c001417a:	57                   	push   edi
c001417b:	56                   	push   esi
c001417c:	51                   	push   ecx
c001417d:	e8 a8 78 ff ff       	call   c000ba2a <File::truncate(unsigned long long)>
c0014182:	83 c4 10             	add    esp,0x10
c0014185:	85 c0                	test   eax,eax
c0014187:	0f 95 c0             	setne  al
c001418a:	0f b6 c0             	movzx  eax,al
c001418d:	31 d2                	xor    edx,edx
c001418f:	83 c4 0c             	add    esp,0xc
c0014192:	5b                   	pop    ebx
c0014193:	5e                   	pop    esi
c0014194:	5f                   	pop    edi
c0014195:	5d                   	pop    ebp
c0014196:	c3                   	ret    

c0014197 <SysWrite(regs*)>:
c0014197:	57                   	push   edi
c0014198:	56                   	push   esi
c0014199:	53                   	push   ebx
c001419a:	83 ec 10             	sub    esp,0x10
c001419d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141a4:	83 f8 02             	cmp    eax,0x2
c00141a7:	77 10                	ja     c00141b9 <SysWrite(regs*)+0x22>
c00141a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141b1:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141b7:	eb 0e                	jmp    c00141c7 <SysWrite(regs*)+0x30>
c00141b9:	83 ec 0c             	sub    esp,0xc
c00141bc:	50                   	push   eax
c00141bd:	e8 f1 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00141c2:	83 c4 10             	add    esp,0x10
c00141c5:	89 c1                	mov    ecx,eax
c00141c7:	83 c8 ff             	or     eax,0xffffffff
c00141ca:	85 c9                	test   ecx,ecx
c00141cc:	89 c2                	mov    edx,eax
c00141ce:	74 28                	je     c00141f8 <SysWrite(regs*)+0x61>
c00141d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141d8:	31 ff                	xor    edi,edi
c00141da:	83 ec 0c             	sub    esp,0xc
c00141dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141df:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141e3:	52                   	push   edx
c00141e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141e7:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141ea:	57                   	push   edi
c00141eb:	56                   	push   esi
c00141ec:	51                   	push   ecx
c00141ed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00141f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141f4:	83 c4 20             	add    esp,0x20
c00141f7:	99                   	cdq    
c00141f8:	83 c4 10             	add    esp,0x10
c00141fb:	5b                   	pop    ebx
c00141fc:	5e                   	pop    esi
c00141fd:	5f                   	pop    edi
c00141fe:	c3                   	ret    

c00141ff <SysWsbe(regs*)>:
c00141ff:	57                   	push   edi
c0014200:	b9 0b 00 00 00       	mov    ecx,0xb
c0014205:	56                   	push   esi
c0014206:	be 29 22 02 c0       	mov    esi,0xc0022229
c001420b:	53                   	push   ebx
c001420c:	83 ec 30             	sub    esp,0x30
c001420f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014213:	fc                   	cld    
c0014214:	83 ec 0c             	sub    esp,0xc
c0014217:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014219:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001421d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014222:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014225:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001422b:	8b 06                	mov    eax,DWORD PTR [esi]
c001422d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014230:	57                   	push   edi
c0014231:	e8 3a c3 fe ff       	call   c0000570 <strlen>
c0014236:	5a                   	pop    edx
c0014237:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001423b:	52                   	push   edx
c001423c:	31 d2                	xor    edx,edx
c001423e:	57                   	push   edi
c001423f:	52                   	push   edx
c0014240:	50                   	push   eax
c0014241:	56                   	push   esi
c0014242:	ff d3                	call   ebx
c0014244:	83 c4 14             	add    esp,0x14
c0014247:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001424b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001424e:	e8 ad 23 00 00       	call   c0016600 <terminateTask(int)>
c0014253:	83 c4 40             	add    esp,0x40
c0014256:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001425b:	5b                   	pop    ebx
c001425c:	31 d2                	xor    edx,edx
c001425e:	5e                   	pop    esi
c001425f:	5f                   	pop    edi
c0014260:	c3                   	ret    

c0014261 <SysYield(regs*)>:
c0014261:	83 ec 0c             	sub    esp,0xc
c0014264:	fa                   	cli    
c0014265:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001426b:	e8 f0 19 00 00       	call   c0015c60 <schedule()>
c0014270:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014275:	48                   	dec    eax
c0014276:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001427b:	75 01                	jne    c001427e <SysYield(regs*)+0x1d>
c001427d:	fb                   	sti    
c001427e:	31 c0                	xor    eax,eax
c0014280:	31 d2                	xor    edx,edx
c0014282:	83 c4 0c             	add    esp,0xc
c0014285:	c3                   	ret    

c0014286 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014286:	55                   	push   ebp
c0014287:	57                   	push   edi
c0014288:	56                   	push   esi
c0014289:	53                   	push   ebx
c001428a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014290:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014298:	0f 95 c0             	setne  al
c001429b:	31 d2                	xor    edx,edx
c001429d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00142a5:	0f 94 c2             	sete   dl
c00142a8:	85 c2                	test   edx,eax
c00142aa:	74 34                	je     c00142e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00142ac:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00142b7:	74 27                	je     c00142e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00142b9:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00142c0:	05 00 10 00 00       	add    eax,0x1000
c00142c5:	89 c1                	mov    ecx,eax
c00142c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00142cc:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00142d2:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00142d9:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00142e0:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00142e7:	83 ec 0c             	sub    esp,0xc
c00142ea:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00142f0:	6a 01                	push   0x1
c00142f2:	e8 16 53 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00142f7:	83 c4 10             	add    esp,0x10
c00142fa:	89 c3                	mov    ebx,eax
c00142fc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014302:	0f 86 25 01 00 00    	jbe    c001442d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014308:	c1 ee 0c             	shr    esi,0xc
c001430b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014312:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014316:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001431e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014329:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014330:	29 ef                	sub    edi,ebp
c0014332:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014336:	0f 83 f8 00 00 00    	jae    c0014434 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c001433c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014342:	76 05                	jbe    c0014349 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014344:	bf 00 10 00 00       	mov    edi,0x1000
c0014349:	83 ec 0c             	sub    esp,0xc
c001434c:	31 d2                	xor    edx,edx
c001434e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014355:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014357:	8d 44 24 28          	lea    eax,[esp+0x28]
c001435b:	50                   	push   eax
c001435c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014360:	56                   	push   esi
c0014361:	52                   	push   edx
c0014362:	57                   	push   edi
c0014363:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001436a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001436d:	83 c4 20             	add    esp,0x20
c0014370:	85 c0                	test   eax,eax
c0014372:	75 06                	jne    c001437a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014374:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014378:	74 13                	je     c001438d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001437a:	83 ec 0c             	sub    esp,0xc
c001437d:	53                   	push   ebx
c001437e:	e8 a8 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014383:	83 c4 10             	add    esp,0x10
c0014386:	31 c0                	xor    eax,eax
c0014388:	e9 7c 01 00 00       	jmp    c0014509 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001438d:	fa                   	cli    
c001438e:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014394:	e8 26 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014399:	6a 07                	push   0x7
c001439b:	89 c7                	mov    edi,eax
c001439d:	53                   	push   ebx
c001439e:	50                   	push   eax
c001439f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143ad:	e8 6e 59 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00143b2:	83 c4 0c             	add    esp,0xc
c00143b5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143bc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143c2:	6a 00                	push   0x0
c00143c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143cc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143d2:	e8 af 57 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00143d7:	58                   	pop    eax
c00143d8:	5a                   	pop    edx
c00143d9:	68 07 0c 00 00       	push   0xc07
c00143de:	55                   	push   ebp
c00143df:	57                   	push   edi
c00143e0:	89 df                	mov    edi,ebx
c00143e2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00143e9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143ef:	6a 00                	push   0x0
c00143f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143f9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143ff:	e8 6e 5b ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014404:	b9 00 10 00 00       	mov    ecx,0x1000
c0014409:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001440b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014410:	83 c4 20             	add    esp,0x20
c0014413:	48                   	dec    eax
c0014414:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014419:	85 c0                	test   eax,eax
c001441b:	75 01                	jne    c001441e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001441d:	fb                   	sti    
c001441e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014424:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014428:	e9 f1 fe ff ff       	jmp    c001431e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001442d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014434:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001443b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014441:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014447:	0f 86 ae 00 00 00    	jbe    c00144fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001444d:	fa                   	cli    
c001444e:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014454:	c1 ee 0c             	shr    esi,0xc
c0014457:	51                   	push   ecx
c0014458:	31 ff                	xor    edi,edi
c001445a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014461:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014467:	6a 00                	push   0x0
c0014469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001446e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014471:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014477:	e8 0a 57 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c001447c:	83 c4 10             	add    esp,0x10
c001447f:	e8 3b 39 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014484:	47                   	inc    edi
c0014485:	6a 07                	push   0x7
c0014487:	53                   	push   ebx
c0014488:	50                   	push   eax
c0014489:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001448d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014493:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014496:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001449c:	e8 7f 58 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00144a1:	58                   	pop    eax
c00144a2:	5a                   	pop    edx
c00144a3:	68 07 0c 00 00       	push   0xc07
c00144a8:	55                   	push   ebp
c00144a9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00144af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144b3:	50                   	push   eax
c00144b4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00144bb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144c1:	6a 00                	push   0x0
c00144c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00144cb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144d1:	e8 9c 5a ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00144d6:	83 c4 1c             	add    esp,0x1c
c00144d9:	68 00 10 00 00       	push   0x1000
c00144de:	6a 00                	push   0x0
c00144e0:	53                   	push   ebx
c00144e1:	e8 0a c0 fe ff       	call   c00004f0 <memset>
c00144e6:	83 c4 10             	add    esp,0x10
c00144e9:	39 fe                	cmp    esi,edi
c00144eb:	77 92                	ja     c001447f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00144ed:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00144f2:	48                   	dec    eax
c00144f3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00144f8:	75 01                	jne    c00144fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00144fa:	fb                   	sti    
c00144fb:	83 ec 0c             	sub    esp,0xc
c00144fe:	53                   	push   ebx
c00144ff:	e8 27 54 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014504:	83 c4 10             	add    esp,0x10
c0014507:	b0 01                	mov    al,0x1
c0014509:	81 c4 2c 10 00 00    	add    esp,0x102c
c001450f:	5b                   	pop    ebx
c0014510:	5e                   	pop    esi
c0014511:	5f                   	pop    edi
c0014512:	5d                   	pop    ebp
c0014513:	c3                   	ret    

c0014514 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014514:	55                   	push   ebp
c0014515:	57                   	push   edi
c0014516:	56                   	push   esi
c0014517:	53                   	push   ebx
c0014518:	83 ec 48             	sub    esp,0x48
c001451b:	68 14 01 00 00       	push   0x114
c0014520:	e8 91 35 ff ff       	call   c0007ab6 <malloc>
c0014525:	83 c4 0c             	add    esp,0xc
c0014528:	89 c6                	mov    esi,eax
c001452a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001452e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014532:	50                   	push   eax
c0014533:	e8 16 73 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0014538:	58                   	pop    eax
c0014539:	5a                   	pop    edx
c001453a:	6a 01                	push   0x1
c001453c:	56                   	push   esi
c001453d:	e8 d4 73 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c0014542:	83 c4 10             	add    esp,0x10
c0014545:	85 c0                	test   eax,eax
c0014547:	0f 85 43 01 00 00    	jne    c0014690 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001454d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014555:	83 ec 0c             	sub    esp,0xc
c0014558:	6a 34                	push   0x34
c001455a:	e8 57 35 ff ff       	call   c0007ab6 <malloc>
c001455f:	89 c3                	mov    ebx,eax
c0014561:	58                   	pop    eax
c0014562:	8b 06                	mov    eax,DWORD PTR [esi]
c0014564:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014568:	57                   	push   edi
c0014569:	53                   	push   ebx
c001456a:	6a 00                	push   0x0
c001456c:	6a 34                	push   0x34
c001456e:	56                   	push   esi
c001456f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014572:	83 c4 20             	add    esp,0x20
c0014575:	85 c0                	test   eax,eax
c0014577:	0f 85 13 01 00 00    	jne    c0014690 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001457d:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014583:	0f 85 07 01 00 00    	jne    c0014690 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014589:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001458c:	85 c0                	test   eax,eax
c001458e:	0f 84 fc 00 00 00    	je     c0014690 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014594:	31 d2                	xor    edx,edx
c0014596:	55                   	push   ebp
c0014597:	52                   	push   edx
c0014598:	50                   	push   eax
c0014599:	56                   	push   esi
c001459a:	e8 35 74 ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c001459f:	83 c4 10             	add    esp,0x10
c00145a2:	85 c0                	test   eax,eax
c00145a4:	0f 85 e6 00 00 00    	jne    c0014690 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00145aa:	83 ec 0c             	sub    esp,0xc
c00145ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00145b0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00145b4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00145b8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00145bc:	0f af c2             	imul   eax,edx
c00145bf:	50                   	push   eax
c00145c0:	e8 f1 34 ff ff       	call   c0007ab6 <malloc>
c00145c5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00145c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00145cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00145d2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00145d6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00145da:	0f af c2             	imul   eax,edx
c00145dd:	99                   	cdq    
c00145de:	52                   	push   edx
c00145df:	50                   	push   eax
c00145e0:	56                   	push   esi
c00145e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145e4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00145e7:	83 c4 20             	add    esp,0x20
c00145ea:	85 c0                	test   eax,eax
c00145ec:	0f 84 9e 00 00 00    	je     c0014690 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00145f2:	31 d2                	xor    edx,edx
c00145f4:	51                   	push   ecx
c00145f5:	52                   	push   edx
c00145f6:	50                   	push   eax
c00145f7:	56                   	push   esi
c00145f8:	e8 d7 73 ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c00145fd:	83 c4 10             	add    esp,0x10
c0014600:	85 c0                	test   eax,eax
c0014602:	0f 85 88 00 00 00    	jne    c0014690 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014608:	83 ec 0c             	sub    esp,0xc
c001460b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001460f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014613:	31 ed                	xor    ebp,ebp
c0014615:	0f af c2             	imul   eax,edx
c0014618:	50                   	push   eax
c0014619:	e8 98 34 ff ff       	call   c0007ab6 <malloc>
c001461e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014620:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014624:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001462f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014633:	0f af c2             	imul   eax,edx
c0014636:	99                   	cdq    
c0014637:	52                   	push   edx
c0014638:	50                   	push   eax
c0014639:	56                   	push   esi
c001463a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001463d:	83 c4 20             	add    esp,0x20
c0014640:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014648:	0f b7 fd             	movzx  edi,bp
c001464b:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c001464f:	73 7d                	jae    c00146ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014651:	c1 e7 05             	shl    edi,0x5
c0014654:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014658:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001465b:	75 6b                	jne    c00146c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001465d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014660:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014664:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001466b:	52                   	push   edx
c001466c:	31 d2                	xor    edx,edx
c001466e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014671:	52                   	push   edx
c0014672:	50                   	push   eax
c0014673:	56                   	push   esi
c0014674:	e8 5b 73 ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014679:	83 c4 10             	add    esp,0x10
c001467c:	85 c0                	test   eax,eax
c001467e:	74 17                	je     c0014697 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014680:	83 ec 0c             	sub    esp,0xc
c0014683:	68 55 22 02 c0       	push   0xc0022255
c0014688:	e8 b8 62 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001468d:	83 c4 10             	add    esp,0x10
c0014690:	31 c0                	xor    eax,eax
c0014692:	e9 87 00 00 00       	jmp    c001471e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014697:	83 ec 0c             	sub    esp,0xc
c001469a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001469d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00146a0:	50                   	push   eax
c00146a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146a9:	56                   	push   esi
c00146aa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00146ae:	e8 d3 fb ff ff       	call   c0014286 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00146b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146b7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00146bb:	83 c4 20             	add    esp,0x20
c00146be:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00146c2:	73 04                	jae    c00146c8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00146c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00146c8:	45                   	inc    ebp
c00146c9:	e9 7a ff ff ff       	jmp    c0014648 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00146ce:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00146d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00146d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146da:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00146e0:	83 ec 0c             	sub    esp,0xc
c00146e3:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00146e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146ee:	05 00 10 00 00       	add    eax,0x1000
c00146f3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00146f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146fa:	e8 c7 33 ff ff       	call   c0007ac6 <free>
c00146ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014702:	e8 bf 33 ff ff       	call   c0007ac6 <free>
c0014707:	58                   	pop    eax
c0014708:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001470c:	e8 b5 33 ff ff       	call   c0007ac6 <free>
c0014711:	89 34 24             	mov    DWORD PTR [esp],esi
c0014714:	e8 5b 72 ff ff       	call   c000b974 <File::close()>
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	b0 01                	mov    al,0x1
c001471e:	83 c4 3c             	add    esp,0x3c
c0014721:	5b                   	pop    ebx
c0014722:	5e                   	pop    esi
c0014723:	5f                   	pop    edi
c0014724:	5d                   	pop    ebp
c0014725:	c3                   	ret    

c0014726 <Thr::runtimeReferenceHelper()>:
c0014726:	83 ec 18             	sub    esp,0x18
c0014729:	68 5d 22 02 c0       	push   0xc002225d
c001472e:	e8 12 62 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014733:	fa                   	cli    
c0014734:	83 c4 10             	add    esp,0x10
c0014737:	eb fe                	jmp    c0014737 <Thr::runtimeReferenceHelper()+0x11>

c0014739 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014739:	57                   	push   edi
c001473a:	56                   	push   esi
c001473b:	53                   	push   ebx
c001473c:	31 db                	xor    ebx,ebx
c001473e:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c0014744:	7e 3c                	jle    c0014782 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014746:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c001474d:	31 ff                	xor    edi,edi
c001474f:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c0014756:	7e 27                	jle    c001477f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014758:	50                   	push   eax
c0014759:	50                   	push   eax
c001475a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001475e:	8b 06                	mov    eax,DWORD PTR [esi]
c0014760:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c0014767:	50                   	push   eax
c0014768:	e8 e3 bf fe ff       	call   c0000750 <strcmp>
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	85 c0                	test   eax,eax
c0014772:	75 05                	jne    c0014779 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014774:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014777:	eb 0b                	jmp    c0014784 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014779:	83 c6 10             	add    esi,0x10
c001477c:	47                   	inc    edi
c001477d:	eb d0                	jmp    c001474f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001477f:	43                   	inc    ebx
c0014780:	eb bc                	jmp    c001473e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014782:	31 c0                	xor    eax,eax
c0014784:	5b                   	pop    ebx
c0014785:	5e                   	pop    esi
c0014786:	5f                   	pop    edi
c0014787:	c3                   	ret    

c0014788 <Thr::loadKernelSymbolTable(char const*)>:
c0014788:	55                   	push   ebp
c0014789:	57                   	push   edi
c001478a:	56                   	push   esi
c001478b:	53                   	push   ebx
c001478c:	83 ec 68             	sub    esp,0x68
c001478f:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014795:	68 14 01 00 00       	push   0x114
c001479a:	e8 17 33 ff ff       	call   c0007ab6 <malloc>
c001479f:	83 c4 0c             	add    esp,0xc
c00147a2:	89 c3                	mov    ebx,eax
c00147a4:	56                   	push   esi
c00147a5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00147a9:	50                   	push   eax
c00147aa:	e8 9f 70 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c00147af:	5e                   	pop    esi
c00147b0:	5f                   	pop    edi
c00147b1:	6a 01                	push   0x1
c00147b3:	53                   	push   ebx
c00147b4:	e8 5d 71 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c00147b9:	83 c4 10             	add    esp,0x10
c00147bc:	85 c0                	test   eax,eax
c00147be:	74 0a                	je     c00147ca <Thr::loadKernelSymbolTable(char const*)+0x42>
c00147c0:	83 ec 0c             	sub    esp,0xc
c00147c3:	68 7f 22 02 c0       	push   0xc002227f
c00147c8:	eb 34                	jmp    c00147fe <Thr::loadKernelSymbolTable(char const*)+0x76>
c00147ca:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	6a 34                	push   0x34
c00147d7:	e8 da 32 ff ff       	call   c0007ab6 <malloc>
c00147dc:	59                   	pop    ecx
c00147dd:	89 c7                	mov    edi,eax
c00147df:	8d 74 24 34          	lea    esi,[esp+0x34]
c00147e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147e5:	56                   	push   esi
c00147e6:	57                   	push   edi
c00147e7:	6a 00                	push   0x0
c00147e9:	6a 34                	push   0x34
c00147eb:	53                   	push   ebx
c00147ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147ef:	83 c4 20             	add    esp,0x20
c00147f2:	85 c0                	test   eax,eax
c00147f4:	74 17                	je     c001480d <Thr::loadKernelSymbolTable(char const*)+0x85>
c00147f6:	83 ec 0c             	sub    esp,0xc
c00147f9:	68 96 22 02 c0       	push   0xc0022296
c00147fe:	e8 9e cb ff ff       	call   c00113a1 <KePanic(char const*)>
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	31 c0                	xor    eax,eax
c0014808:	e9 31 02 00 00       	jmp    c0014a3e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001480d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014813:	75 e1                	jne    c00147f6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014815:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014818:	85 c0                	test   eax,eax
c001481a:	74 da                	je     c00147f6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001481c:	52                   	push   edx
c001481d:	31 d2                	xor    edx,edx
c001481f:	52                   	push   edx
c0014820:	50                   	push   eax
c0014821:	53                   	push   ebx
c0014822:	e8 ad 71 ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014827:	83 c4 10             	add    esp,0x10
c001482a:	85 c0                	test   eax,eax
c001482c:	75 c8                	jne    c00147f6 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001482e:	83 ec 0c             	sub    esp,0xc
c0014831:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014835:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014839:	31 ed                	xor    ebp,ebp
c001483b:	0f af c2             	imul   eax,edx
c001483e:	50                   	push   eax
c001483f:	e8 72 32 ff ff       	call   c0007ab6 <malloc>
c0014844:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014846:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001484a:	89 34 24             	mov    DWORD PTR [esp],esi
c001484d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014851:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014855:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014859:	0f af c2             	imul   eax,edx
c001485c:	99                   	cdq    
c001485d:	52                   	push   edx
c001485e:	50                   	push   eax
c001485f:	53                   	push   ebx
c0014860:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014863:	83 c4 20             	add    esp,0x20
c0014866:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001486e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014876:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001487e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014886:	0f b7 f5             	movzx  esi,bp
c0014889:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c001488d:	0f 83 a7 00 00 00    	jae    c001493a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014893:	6b f6 28             	imul   esi,esi,0x28
c0014896:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001489a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001489d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148a1:	50                   	push   eax
c00148a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148a6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00148aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00148ac:	6b c0 28             	imul   eax,eax,0x28
c00148af:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00148b3:	89 d0                	mov    eax,edx
c00148b5:	31 d2                	xor    edx,edx
c00148b7:	52                   	push   edx
c00148b8:	50                   	push   eax
c00148b9:	53                   	push   ebx
c00148ba:	e8 15 71 ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c00148bf:	83 c4 0c             	add    esp,0xc
c00148c2:	6a 20                	push   0x20
c00148c4:	6a 00                	push   0x0
c00148c6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00148ca:	52                   	push   edx
c00148cb:	e8 20 bc fe ff       	call   c00004f0 <memset>
c00148d0:	58                   	pop    eax
c00148d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148d3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00148d7:	51                   	push   ecx
c00148d8:	8d 54 24 40          	lea    edx,[esp+0x40]
c00148dc:	52                   	push   edx
c00148dd:	6a 00                	push   0x0
c00148df:	6a 1f                	push   0x1f
c00148e1:	53                   	push   ebx
c00148e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148e5:	83 c4 18             	add    esp,0x18
c00148e8:	68 ad 22 02 c0       	push   0xc00222ad
c00148ed:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00148f1:	52                   	push   edx
c00148f2:	e8 59 be fe ff       	call   c0000750 <strcmp>
c00148f7:	83 c4 10             	add    esp,0x10
c00148fa:	85 c0                	test   eax,eax
c00148fc:	75 0f                	jne    c001490d <Thr::loadKernelSymbolTable(char const*)+0x185>
c00148fe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014901:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014905:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014909:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001490d:	50                   	push   eax
c001490e:	50                   	push   eax
c001490f:	68 b5 22 02 c0       	push   0xc00222b5
c0014914:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014918:	50                   	push   eax
c0014919:	e8 32 be fe ff       	call   c0000750 <strcmp>
c001491e:	83 c4 10             	add    esp,0x10
c0014921:	85 c0                	test   eax,eax
c0014923:	75 0f                	jne    c0014934 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014925:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014928:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001492c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014930:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014934:	45                   	inc    ebp
c0014935:	e9 4c ff ff ff       	jmp    c0014886 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001493a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001493f:	75 10                	jne    c0014951 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014941:	83 ec 0c             	sub    esp,0xc
c0014944:	68 bd 22 02 c0       	push   0xc00222bd
c0014949:	e8 53 ca ff ff       	call   c00113a1 <KePanic(char const*)>
c001494e:	83 c4 10             	add    esp,0x10
c0014951:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014956:	75 10                	jne    c0014968 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014958:	83 ec 0c             	sub    esp,0xc
c001495b:	68 bd 22 02 c0       	push   0xc00222bd
c0014960:	e8 3c ca ff ff       	call   c00113a1 <KePanic(char const*)>
c0014965:	83 c4 10             	add    esp,0x10
c0014968:	31 d2                	xor    edx,edx
c001496a:	50                   	push   eax
c001496b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001496f:	52                   	push   edx
c0014970:	50                   	push   eax
c0014971:	53                   	push   ebx
c0014972:	e8 5d 70 ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014977:	5a                   	pop    edx
c0014978:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001497c:	e8 35 31 ff ff       	call   c0007ab6 <malloc>
c0014981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014985:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014989:	31 c9                	xor    ecx,ecx
c001498b:	5e                   	pop    esi
c001498c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001498e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014992:	55                   	push   ebp
c0014993:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014997:	51                   	push   ecx
c0014998:	52                   	push   edx
c0014999:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001499d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00149a1:	53                   	push   ebx
c00149a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149a5:	83 c4 14             	add    esp,0x14
c00149a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149ac:	e8 05 31 ff ff       	call   c0007ab6 <malloc>
c00149b1:	89 c6                	mov    esi,eax
c00149b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00149b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149b8:	56                   	push   esi
c00149b9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00149bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00149c1:	51                   	push   ecx
c00149c2:	52                   	push   edx
c00149c3:	53                   	push   ebx
c00149c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00149cb:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c00149d1:	83 c4 1c             	add    esp,0x1c
c00149d4:	c1 e8 04             	shr    eax,0x4
c00149d7:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c00149de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149e2:	31 d2                	xor    edx,edx
c00149e4:	52                   	push   edx
c00149e5:	50                   	push   eax
c00149e6:	53                   	push   ebx
c00149e7:	e8 e8 6f ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c00149ec:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149ee:	31 d2                	xor    edx,edx
c00149f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149f3:	56                   	push   esi
c00149f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00149f8:	52                   	push   edx
c00149f9:	50                   	push   eax
c00149fa:	53                   	push   ebx
c00149fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149fe:	83 c4 14             	add    esp,0x14
c0014a01:	53                   	push   ebx
c0014a02:	e8 6d 6f ff ff       	call   c000b974 <File::close()>
c0014a07:	5d                   	pop    ebp
c0014a08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a0c:	e8 b5 30 ff ff       	call   c0007ac6 <free>
c0014a11:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a14:	e8 ad 30 ff ff       	call   c0007ac6 <free>
c0014a19:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014a1e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a22:	8d 50 01             	lea    edx,[eax+0x1]
c0014a25:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014a2c:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014a33:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014a39:	83 c4 10             	add    esp,0x10
c0014a3c:	b0 01                	mov    al,0x1
c0014a3e:	83 c4 5c             	add    esp,0x5c
c0014a41:	5b                   	pop    ebx
c0014a42:	5e                   	pop    esi
c0014a43:	5f                   	pop    edi
c0014a44:	5d                   	pop    ebp
c0014a45:	c3                   	ret    

c0014a46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014a46:	55                   	push   ebp
c0014a47:	57                   	push   edi
c0014a48:	56                   	push   esi
c0014a49:	53                   	push   ebx
c0014a4a:	81 ec 68 03 00 00    	sub    esp,0x368
c0014a50:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014a57:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c0014a5d:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014a61:	68 14 01 00 00       	push   0x114
c0014a66:	e8 4b 30 ff ff       	call   c0007ab6 <malloc>
c0014a6b:	83 c4 0c             	add    esp,0xc
c0014a6e:	89 c5                	mov    ebp,eax
c0014a70:	53                   	push   ebx
c0014a71:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014a78:	50                   	push   eax
c0014a79:	e8 d0 6d ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0014a7e:	5e                   	pop    esi
c0014a7f:	5f                   	pop    edi
c0014a80:	6a 01                	push   0x1
c0014a82:	55                   	push   ebp
c0014a83:	e8 8e 6e ff ff       	call   c000b916 <File::open(FileOpenMode)>
c0014a88:	83 c4 10             	add    esp,0x10
c0014a8b:	85 c0                	test   eax,eax
c0014a8d:	0f 85 aa 06 00 00    	jne    c001513d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a93:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014a9b:	83 ec 0c             	sub    esp,0xc
c0014a9e:	6a 34                	push   0x34
c0014aa0:	e8 11 30 ff ff       	call   c0007ab6 <malloc>
c0014aa5:	5b                   	pop    ebx
c0014aa6:	89 c7                	mov    edi,eax
c0014aa8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014aac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014aaf:	53                   	push   ebx
c0014ab0:	57                   	push   edi
c0014ab1:	6a 00                	push   0x0
c0014ab3:	6a 34                	push   0x34
c0014ab5:	55                   	push   ebp
c0014ab6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ab9:	83 c4 20             	add    esp,0x20
c0014abc:	85 c0                	test   eax,eax
c0014abe:	0f 85 79 06 00 00    	jne    c001513d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ac4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014aca:	0f 85 6d 06 00 00    	jne    c001513d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ad0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014ad3:	85 c0                	test   eax,eax
c0014ad5:	0f 84 62 06 00 00    	je     c001513d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014adb:	31 d2                	xor    edx,edx
c0014add:	51                   	push   ecx
c0014ade:	52                   	push   edx
c0014adf:	50                   	push   eax
c0014ae0:	55                   	push   ebp
c0014ae1:	e8 ee 6e ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014ae6:	83 c4 10             	add    esp,0x10
c0014ae9:	85 c0                	test   eax,eax
c0014aeb:	0f 85 4c 06 00 00    	jne    c001513d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014af1:	83 ec 0c             	sub    esp,0xc
c0014af4:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014af7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014afb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014aff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014b03:	0f af c2             	imul   eax,edx
c0014b06:	50                   	push   eax
c0014b07:	e8 aa 2f ff ff       	call   c0007ab6 <malloc>
c0014b0c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b1a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014b1e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014b22:	0f af c2             	imul   eax,edx
c0014b25:	99                   	cdq    
c0014b26:	52                   	push   edx
c0014b27:	50                   	push   eax
c0014b28:	55                   	push   ebp
c0014b29:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b2c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014b2f:	83 c4 20             	add    esp,0x20
c0014b32:	85 c0                	test   eax,eax
c0014b34:	0f 84 03 06 00 00    	je     c001513d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b3a:	52                   	push   edx
c0014b3b:	31 d2                	xor    edx,edx
c0014b3d:	52                   	push   edx
c0014b3e:	50                   	push   eax
c0014b3f:	55                   	push   ebp
c0014b40:	e8 8f 6e ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014b45:	83 c4 10             	add    esp,0x10
c0014b48:	85 c0                	test   eax,eax
c0014b4a:	0f 85 ed 05 00 00    	jne    c001513d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b50:	83 ec 0c             	sub    esp,0xc
c0014b53:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014b57:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014b5b:	31 f6                	xor    esi,esi
c0014b5d:	0f af c2             	imul   eax,edx
c0014b60:	50                   	push   eax
c0014b61:	e8 50 2f ff ff       	call   c0007ab6 <malloc>
c0014b66:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b69:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b74:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014b78:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014b7c:	0f af c2             	imul   eax,edx
c0014b7f:	99                   	cdq    
c0014b80:	52                   	push   edx
c0014b81:	50                   	push   eax
c0014b82:	55                   	push   ebp
c0014b83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b86:	83 c4 20             	add    esp,0x20
c0014b89:	0f b7 de             	movzx  ebx,si
c0014b8c:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014b90:	0f 83 87 00 00 00    	jae    c0014c1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014b96:	c1 e3 05             	shl    ebx,0x5
c0014b99:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014b9d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014ba0:	75 75                	jne    c0014c17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014ba2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014ba5:	31 d2                	xor    edx,edx
c0014ba7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bb2:	50                   	push   eax
c0014bb3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014bb6:	52                   	push   edx
c0014bb7:	50                   	push   eax
c0014bb8:	55                   	push   ebp
c0014bb9:	e8 16 6e ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014bbe:	83 c4 10             	add    esp,0x10
c0014bc1:	85 c0                	test   eax,eax
c0014bc3:	0f 85 74 05 00 00    	jne    c001513d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014bc9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014bd0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014bd3:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014bd7:	31 d2                	xor    edx,edx
c0014bd9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014bdd:	83 ec 0c             	sub    esp,0xc
c0014be0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014be4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014beb:	50                   	push   eax
c0014bec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bf4:	52                   	push   edx
c0014bf5:	50                   	push   eax
c0014bf6:	55                   	push   ebp
c0014bf7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bfa:	83 c4 1c             	add    esp,0x1c
c0014bfd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c00:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014c03:	50                   	push   eax
c0014c04:	6a 00                	push   0x0
c0014c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c0a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014c0e:	50                   	push   eax
c0014c0f:	e8 dc b8 fe ff       	call   c00004f0 <memset>
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	46                   	inc    esi
c0014c18:	e9 6c ff ff ff       	jmp    c0014b89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014c1d:	53                   	push   ebx
c0014c1e:	31 db                	xor    ebx,ebx
c0014c20:	68 00 01 00 00       	push   0x100
c0014c25:	6a 00                	push   0x0
c0014c27:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014c2b:	50                   	push   eax
c0014c2c:	e8 bf b8 fe ff       	call   c00004f0 <memset>
c0014c31:	83 c4 0c             	add    esp,0xc
c0014c34:	68 00 01 00 00       	push   0x100
c0014c39:	6a 00                	push   0x0
c0014c3b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014c42:	50                   	push   eax
c0014c43:	e8 a8 b8 fe ff       	call   c00004f0 <memset>
c0014c48:	83 c4 10             	add    esp,0x10
c0014c4b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014c53:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014c5b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014c63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c6b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014c73:	0f b7 f3             	movzx  esi,bx
c0014c76:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014c7a:	0f 83 2d 01 00 00    	jae    c0014dad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014c80:	6b f6 28             	imul   esi,esi,0x28
c0014c83:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014c87:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014c8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c8e:	52                   	push   edx
c0014c8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c93:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014c97:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c99:	6b d2 28             	imul   edx,edx,0x28
c0014c9c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014ca0:	31 d2                	xor    edx,edx
c0014ca2:	52                   	push   edx
c0014ca3:	50                   	push   eax
c0014ca4:	55                   	push   ebp
c0014ca5:	e8 2a 6d ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014caa:	83 c4 0c             	add    esp,0xc
c0014cad:	6a 20                	push   0x20
c0014caf:	6a 00                	push   0x0
c0014cb1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014cb8:	51                   	push   ecx
c0014cb9:	e8 32 b8 fe ff       	call   c00004f0 <memset>
c0014cbe:	59                   	pop    ecx
c0014cbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014cc2:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014cc6:	52                   	push   edx
c0014cc7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014cce:	51                   	push   ecx
c0014ccf:	6a 00                	push   0x0
c0014cd1:	6a 1f                	push   0x1f
c0014cd3:	55                   	push   ebp
c0014cd4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cd7:	83 c4 1c             	add    esp,0x1c
c0014cda:	6a 09                	push   0x9
c0014cdc:	68 d7 22 02 c0       	push   0xc00222d7
c0014ce1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014ce8:	51                   	push   ecx
c0014ce9:	e8 92 b6 fe ff       	call   c0000380 <memcmp>
c0014cee:	83 c4 10             	add    esp,0x10
c0014cf1:	85 c0                	test   eax,eax
c0014cf3:	75 21                	jne    c0014d16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014cf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cfd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014d01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014d05:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d08:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014d0f:	89 d0                	mov    eax,edx
c0014d11:	40                   	inc    eax
c0014d12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d16:	50                   	push   eax
c0014d17:	6a 09                	push   0x9
c0014d19:	68 e1 22 02 c0       	push   0xc00222e1
c0014d1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d25:	50                   	push   eax
c0014d26:	e8 55 b6 fe ff       	call   c0000380 <memcmp>
c0014d2b:	83 c4 10             	add    esp,0x10
c0014d2e:	85 c0                	test   eax,eax
c0014d30:	75 21                	jne    c0014d53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014d3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d3e:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014d42:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d45:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014d4c:	89 d0                	mov    eax,edx
c0014d4e:	40                   	inc    eax
c0014d4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d53:	50                   	push   eax
c0014d54:	50                   	push   eax
c0014d55:	68 ad 22 02 c0       	push   0xc00222ad
c0014d5a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d61:	50                   	push   eax
c0014d62:	e8 e9 b9 fe ff       	call   c0000750 <strcmp>
c0014d67:	83 c4 10             	add    esp,0x10
c0014d6a:	85 c0                	test   eax,eax
c0014d6c:	75 0f                	jne    c0014d7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014d6e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d7d:	50                   	push   eax
c0014d7e:	50                   	push   eax
c0014d7f:	68 b5 22 02 c0       	push   0xc00222b5
c0014d84:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d8b:	50                   	push   eax
c0014d8c:	e8 bf b9 fe ff       	call   c0000750 <strcmp>
c0014d91:	83 c4 10             	add    esp,0x10
c0014d94:	85 c0                	test   eax,eax
c0014d96:	75 0f                	jne    c0014da7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014d98:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014da3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014da7:	43                   	inc    ebx
c0014da8:	e9 c6 fe ff ff       	jmp    c0014c73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014dad:	31 d2                	xor    edx,edx
c0014daf:	50                   	push   eax
c0014db0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db4:	52                   	push   edx
c0014db5:	50                   	push   eax
c0014db6:	55                   	push   ebp
c0014db7:	e8 18 6c ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014dbc:	58                   	pop    eax
c0014dbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014dc1:	e8 f0 2c ff ff       	call   c0007ab6 <malloc>
c0014dc6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014dc9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014dcd:	31 d2                	xor    edx,edx
c0014dcf:	58                   	pop    eax
c0014dd0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014dd4:	53                   	push   ebx
c0014dd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ddd:	52                   	push   edx
c0014dde:	50                   	push   eax
c0014ddf:	55                   	push   ebp
c0014de0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014de3:	83 c4 14             	add    esp,0x14
c0014de6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014dea:	e8 c7 2c ff ff       	call   c0007ab6 <malloc>
c0014def:	31 d2                	xor    edx,edx
c0014df1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014df5:	83 c4 0c             	add    esp,0xc
c0014df8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dfc:	52                   	push   edx
c0014dfd:	50                   	push   eax
c0014dfe:	55                   	push   ebp
c0014dff:	e8 d0 6b ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014e04:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014e07:	31 d2                	xor    edx,edx
c0014e09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014e14:	52                   	push   edx
c0014e15:	50                   	push   eax
c0014e16:	55                   	push   ebp
c0014e17:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e1a:	83 c4 20             	add    esp,0x20
c0014e1d:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014e22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014e2e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014e32:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014e36:	0f 84 05 03 00 00    	je     c0015141 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014e3c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014e43:	31 d2                	xor    edx,edx
c0014e45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e49:	c1 e8 03             	shr    eax,0x3
c0014e4c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014e50:	51                   	push   ecx
c0014e51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e55:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014e59:	52                   	push   edx
c0014e5a:	50                   	push   eax
c0014e5b:	55                   	push   ebp
c0014e5c:	e8 73 6b ff ff       	call   c000b9d4 <File::seek(unsigned long long)>
c0014e61:	5b                   	pop    ebx
c0014e62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e66:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014e6d:	e8 44 2c ff ff       	call   c0007ab6 <malloc>
c0014e72:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014e75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e79:	31 d2                	xor    edx,edx
c0014e7b:	5e                   	pop    esi
c0014e7c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014e80:	50                   	push   eax
c0014e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e89:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014e90:	52                   	push   edx
c0014e91:	50                   	push   eax
c0014e92:	55                   	push   ebp
c0014e93:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e96:	83 c4 20             	add    esp,0x20
c0014e99:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014ea1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014ea5:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014ea9:	0f 8d 76 02 00 00    	jge    c0015125 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014eaf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014eb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014eb7:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014ebc:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014ebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014ec3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ec7:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014ecb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ecf:	c1 e8 08             	shr    eax,0x8
c0014ed2:	89 c6                	mov    esi,eax
c0014ed4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ed8:	c1 e6 04             	shl    esi,0x4
c0014edb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014edf:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014ee2:	85 db                	test   ebx,ebx
c0014ee4:	0f 85 b3 00 00 00    	jne    c0014f9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014eea:	83 ec 0c             	sub    esp,0xc
c0014eed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ef1:	03 06                	add    eax,DWORD PTR [esi]
c0014ef3:	50                   	push   eax
c0014ef4:	e8 40 f8 ff ff       	call   c0014739 <Thr::getAddressOfKernelSymbol(char const*)>
c0014ef9:	83 c4 10             	add    esp,0x10
c0014efc:	89 c3                	mov    ebx,eax
c0014efe:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014f03:	85 c0                	test   eax,eax
c0014f05:	0f 85 92 00 00 00    	jne    c0014f9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014f0b:	83 ec 0c             	sub    esp,0xc
c0014f0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f12:	03 06                	add    eax,DWORD PTR [esi]
c0014f14:	50                   	push   eax
c0014f15:	e8 72 c6 ff ff       	call   c001158c <KeResolveCompatibilitySymbol(char*)>
c0014f1a:	83 c4 10             	add    esp,0x10
c0014f1d:	89 c3                	mov    ebx,eax
c0014f1f:	85 c0                	test   eax,eax
c0014f21:	75 7a                	jne    c0014f9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014f23:	51                   	push   ecx
c0014f24:	51                   	push   ecx
c0014f25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f29:	03 06                	add    eax,DWORD PTR [esi]
c0014f2b:	50                   	push   eax
c0014f2c:	68 eb 22 02 c0       	push   0xc00222eb
c0014f31:	e8 0f 5a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014f36:	58                   	pop    eax
c0014f37:	5a                   	pop    edx
c0014f38:	68 05 23 02 c0       	push   0xc0022305
c0014f3d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f44:	50                   	push   eax
c0014f45:	e8 f6 b6 fe ff       	call   c0000640 <strcpy>
c0014f4a:	59                   	pop    ecx
c0014f4b:	58                   	pop    eax
c0014f4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f50:	03 06                	add    eax,DWORD PTR [esi]
c0014f52:	50                   	push   eax
c0014f53:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f5a:	50                   	push   eax
c0014f5b:	e8 e0 b8 fe ff       	call   c0000840 <strcat>
c0014f60:	58                   	pop    eax
c0014f61:	5a                   	pop    edx
c0014f62:	68 9b 23 02 c0       	push   0xc002239b
c0014f67:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f6e:	50                   	push   eax
c0014f6f:	e8 cc b8 fe ff       	call   c0000840 <strcat>
c0014f74:	83 c4 10             	add    esp,0x10
c0014f77:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f7c:	0f 84 5d 01 00 00    	je     c00150df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f82:	83 ec 0c             	sub    esp,0xc
c0014f85:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f8c:	50                   	push   eax
c0014f8d:	e8 0f c4 ff ff       	call   c00113a1 <KePanic(char const*)>
c0014f92:	83 c4 10             	add    esp,0x10
c0014f95:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014f99:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014f9d:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014fa2:	83 f8 01             	cmp    eax,0x1
c0014fa5:	0f 85 8f 00 00 00    	jne    c001503a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014fab:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014fb2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014fb6:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014fba:	01 ce                	add    esi,ecx
c0014fbc:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014fc4:	0f 94 c0             	sete   al
c0014fc7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014fcf:	0f 94 c2             	sete   dl
c0014fd2:	09 c2                	or     edx,eax
c0014fd4:	8b 06                	mov    eax,DWORD PTR [esi]
c0014fd6:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014fdb:	0f b6 d2             	movzx  edx,dl
c0014fde:	74 41                	je     c0015021 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014fe0:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014fe3:	85 d2                	test   edx,edx
c0014fe5:	75 15                	jne    c0014ffc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014fe7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014feb:	66 83 f8 0c          	cmp    ax,0xc
c0014fef:	76 05                	jbe    c0014ff6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014ff1:	b8 0c 00 00 00       	mov    eax,0xc
c0014ff6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014ffa:	76 37                	jbe    c0015033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ffc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015000:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015005:	0f 84 d4 00 00 00    	je     c00150df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001500b:	83 ec 0c             	sub    esp,0xc
c001500e:	68 1c 23 02 c0       	push   0xc002231c
c0015013:	e8 89 c3 ff ff       	call   c00113a1 <KePanic(char const*)>
c0015018:	83 c4 10             	add    esp,0x10
c001501b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001501f:	eb 12                	jmp    c0015033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015021:	01 c1                	add    ecx,eax
c0015023:	85 d2                	test   edx,edx
c0015025:	75 0c                	jne    c0015033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015027:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001502b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001502f:	77 02                	ja     c0015033 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015031:	01 d9                	add    ecx,ebx
c0015033:	89 0e                	mov    DWORD PTR [esi],ecx
c0015035:	e9 e2 00 00 00       	jmp    c001511c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001503a:	83 f8 02             	cmp    eax,0x2
c001503d:	75 77                	jne    c00150b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001503f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015046:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c001504a:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001504e:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015056:	74 21                	je     c0015079 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015058:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015060:	74 17                	je     c0015079 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015062:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015066:	b8 0a 00 00 00       	mov    eax,0xa
c001506b:	83 fa 0e             	cmp    edx,0xe
c001506e:	77 03                	ja     c0015073 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015070:	8d 42 fc             	lea    eax,[edx-0x4]
c0015073:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015077:	76 17                	jbe    c0015090 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015079:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001507e:	74 5f                	je     c00150df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015080:	83 ec 0c             	sub    esp,0xc
c0015083:	68 38 23 02 c0       	push   0xc0022338
c0015088:	e8 14 c3 ff ff       	call   c00113a1 <KePanic(char const*)>
c001508d:	83 c4 10             	add    esp,0x10
c0015090:	8b 06                	mov    eax,DWORD PTR [esi]
c0015092:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015097:	74 13                	je     c00150ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015099:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001509d:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00150a4:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00150a8:	01 d0                	add    eax,edx
c00150aa:	eb 04                	jmp    c00150b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00150ac:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00150b0:	01 c3                	add    ebx,eax
c00150b2:	89 1e                	mov    DWORD PTR [esi],ebx
c00150b4:	eb 66                	jmp    c001511c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00150b6:	52                   	push   edx
c00150b7:	52                   	push   edx
c00150b8:	50                   	push   eax
c00150b9:	68 54 23 02 c0       	push   0xc0022354
c00150be:	e8 82 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00150c3:	83 c4 10             	add    esp,0x10
c00150c6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00150cb:	74 12                	je     c00150df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00150cd:	83 ec 0c             	sub    esp,0xc
c00150d0:	68 5f 23 02 c0       	push   0xc002235f
c00150d5:	e8 c7 c2 ff ff       	call   c00113a1 <KePanic(char const*)>
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	eb 3d                	jmp    c001511c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00150df:	83 ec 0c             	sub    esp,0xc
c00150e2:	55                   	push   ebp
c00150e3:	e8 8c 68 ff ff       	call   c000b974 <File::close()>
c00150e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00150eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150f1:	59                   	pop    ecx
c00150f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150f6:	e8 cb 29 ff ff       	call   c0007ac6 <free>
c00150fb:	5b                   	pop    ebx
c00150fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015100:	e8 c1 29 ff ff       	call   c0007ac6 <free>
c0015105:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015108:	e8 b9 29 ff ff       	call   c0007ac6 <free>
c001510d:	5e                   	pop    esi
c001510e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015112:	e8 af 29 ff ff       	call   c0007ac6 <free>
c0015117:	83 c4 10             	add    esp,0x10
c001511a:	eb 21                	jmp    c001513d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001511c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015120:	e9 7c fd ff ff       	jmp    c0014ea1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015125:	83 ec 0c             	sub    esp,0xc
c0015128:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001512c:	e8 95 29 ff ff       	call   c0007ac6 <free>
c0015131:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015135:	83 c4 10             	add    esp,0x10
c0015138:	e9 f1 fc ff ff       	jmp    c0014e2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001513d:	31 c0                	xor    eax,eax
c001513f:	eb 33                	jmp    c0015174 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015141:	83 ec 0c             	sub    esp,0xc
c0015144:	55                   	push   ebp
c0015145:	e8 2a 68 ff ff       	call   c000b974 <File::close()>
c001514a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001514d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015150:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015153:	58                   	pop    eax
c0015154:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015158:	e8 69 29 ff ff       	call   c0007ac6 <free>
c001515d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015160:	e8 61 29 ff ff       	call   c0007ac6 <free>
c0015165:	5a                   	pop    edx
c0015166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001516a:	e8 57 29 ff ff       	call   c0007ac6 <free>
c001516f:	83 c4 10             	add    esp,0x10
c0015172:	b0 01                	mov    al,0x1
c0015174:	81 c4 5c 03 00 00    	add    esp,0x35c
c001517a:	5b                   	pop    ebx
c001517b:	5e                   	pop    esi
c001517c:	5f                   	pop    edi
c001517d:	5d                   	pop    ebp
c001517e:	c3                   	ret    

c001517f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001517f:	56                   	push   esi
c0015180:	31 d2                	xor    edx,edx
c0015182:	53                   	push   ebx
c0015183:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015189:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001518d:	39 d3                	cmp    ebx,edx
c001518f:	7e 1b                	jle    c00151ac <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015191:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015198:	39 c8                	cmp    eax,ecx
c001519a:	77 0d                	ja     c00151a9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001519c:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c00151a3:	01 c6                	add    esi,eax
c00151a5:	39 ce                	cmp    esi,ecx
c00151a7:	77 05                	ja     c00151ae <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00151a9:	42                   	inc    edx
c00151aa:	eb e1                	jmp    c001518d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00151ac:	31 c0                	xor    eax,eax
c00151ae:	5b                   	pop    ebx
c00151af:	5e                   	pop    esi
c00151b0:	c3                   	ret    

c00151b1 <Thr::getDriverNameFromAddress(unsigned long)>:
c00151b1:	53                   	push   ebx
c00151b2:	31 c0                	xor    eax,eax
c00151b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00151b8:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00151be:	39 c3                	cmp    ebx,eax
c00151c0:	7e 22                	jle    c00151e4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00151c2:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c00151c9:	39 ca                	cmp    edx,ecx
c00151cb:	77 14                	ja     c00151e1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00151cd:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c00151d4:	39 ca                	cmp    edx,ecx
c00151d6:	76 09                	jbe    c00151e1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00151d8:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c00151df:	eb 05                	jmp    c00151e6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00151e1:	40                   	inc    eax
c00151e2:	eb da                	jmp    c00151be <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00151e4:	31 c0                	xor    eax,eax
c00151e6:	5b                   	pop    ebx
c00151e7:	c3                   	ret    

c00151e8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00151e8:	53                   	push   ebx
c00151e9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00151ed:	53                   	push   ebx
c00151ee:	e8 8c ff ff ff       	call   c001517f <Thr::getDriverBaseFromAddress(unsigned long)>
c00151f3:	5a                   	pop    edx
c00151f4:	31 d2                	xor    edx,edx
c00151f6:	85 c0                	test   eax,eax
c00151f8:	74 04                	je     c00151fe <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00151fa:	89 da                	mov    edx,ebx
c00151fc:	29 c2                	sub    edx,eax
c00151fe:	89 d0                	mov    eax,edx
c0015200:	5b                   	pop    ebx
c0015201:	c3                   	ret    

c0015202 <Thr::loadDLL(char const*, bool)>:
c0015202:	55                   	push   ebp
c0015203:	57                   	push   edi
c0015204:	56                   	push   esi
c0015205:	53                   	push   ebx
c0015206:	81 ec 34 01 00 00    	sub    esp,0x134
c001520c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015213:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001521a:	56                   	push   esi
c001521b:	68 77 23 02 c0       	push   0xc0022377
c0015220:	e8 20 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015225:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001522c:	e8 85 28 ff ff       	call   c0007ab6 <malloc>
c0015231:	83 c4 0c             	add    esp,0xc
c0015234:	89 c3                	mov    ebx,eax
c0015236:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001523c:	56                   	push   esi
c001523d:	50                   	push   eax
c001523e:	e8 0b 66 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0015243:	83 c4 10             	add    esp,0x10
c0015246:	85 db                	test   ebx,ebx
c0015248:	75 3c                	jne    c0015286 <Thr::loadDLL(char const*, bool)+0x84>
c001524a:	89 f8                	mov    eax,edi
c001524c:	84 c0                	test   al,al
c001524e:	0f 84 d2 01 00 00    	je     c0015426 <Thr::loadDLL(char const*, bool)+0x224>
c0015254:	55                   	push   ebp
c0015255:	55                   	push   ebp
c0015256:	68 88 23 02 c0       	push   0xc0022388
c001525b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001525f:	55                   	push   ebp
c0015260:	e8 db b3 fe ff       	call   c0000640 <strcpy>
c0015265:	58                   	pop    eax
c0015266:	5a                   	pop    edx
c0015267:	56                   	push   esi
c0015268:	55                   	push   ebp
c0015269:	e8 d2 b5 fe ff       	call   c0000840 <strcat>
c001526e:	59                   	pop    ecx
c001526f:	58                   	pop    eax
c0015270:	68 9b 23 02 c0       	push   0xc002239b
c0015275:	55                   	push   ebp
c0015276:	e8 c5 b5 fe ff       	call   c0000840 <strcat>
c001527b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001527e:	e8 1e c1 ff ff       	call   c00113a1 <KePanic(char const*)>
c0015283:	83 c4 10             	add    esp,0x10
c0015286:	51                   	push   ecx
c0015287:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001528b:	50                   	push   eax
c001528c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015290:	50                   	push   eax
c0015291:	53                   	push   ebx
c0015292:	e8 81 69 ff ff       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	85 db                	test   ebx,ebx
c001529c:	74 0c                	je     c00152aa <Thr::loadDLL(char const*, bool)+0xa8>
c001529e:	83 ec 0c             	sub    esp,0xc
c00152a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152a3:	53                   	push   ebx
c00152a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152a7:	83 c4 10             	add    esp,0x10
c00152aa:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00152af:	75 0a                	jne    c00152bb <Thr::loadDLL(char const*, bool)+0xb9>
c00152b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152b5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00152b9:	75 3c                	jne    c00152f7 <Thr::loadDLL(char const*, bool)+0xf5>
c00152bb:	89 f8                	mov    eax,edi
c00152bd:	84 c0                	test   al,al
c00152bf:	0f 84 49 01 00 00    	je     c001540e <Thr::loadDLL(char const*, bool)+0x20c>
c00152c5:	51                   	push   ecx
c00152c6:	51                   	push   ecx
c00152c7:	68 88 23 02 c0       	push   0xc0022388
c00152cc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00152d0:	53                   	push   ebx
c00152d1:	e8 6a b3 fe ff       	call   c0000640 <strcpy>
c00152d6:	5d                   	pop    ebp
c00152d7:	58                   	pop    eax
c00152d8:	56                   	push   esi
c00152d9:	53                   	push   ebx
c00152da:	e8 61 b5 fe ff       	call   c0000840 <strcat>
c00152df:	58                   	pop    eax
c00152e0:	5a                   	pop    edx
c00152e1:	68 9b 23 02 c0       	push   0xc002239b
c00152e6:	53                   	push   ebx
c00152e7:	e8 54 b5 fe ff       	call   c0000840 <strcat>
c00152ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152ef:	e8 ad c0 ff ff       	call   c00113a1 <KePanic(char const*)>
c00152f4:	83 c4 10             	add    esp,0x10
c00152f7:	52                   	push   edx
c00152f8:	6a 03                	push   0x3
c00152fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015302:	05 ff 0f 00 00       	add    eax,0xfff
c0015307:	83 d2 00             	adc    edx,0x0
c001530a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001530e:	50                   	push   eax
c001530f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015315:	e8 0a 4b ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c001531a:	59                   	pop    ecx
c001531b:	89 c3                	mov    ebx,eax
c001531d:	5d                   	pop    ebp
c001531e:	50                   	push   eax
c001531f:	68 52 09 02 c0       	push   0xc0020952
c0015324:	e8 1c 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015329:	89 34 24             	mov    DWORD PTR [esp],esi
c001532c:	e8 3f b2 fe ff       	call   c0000570 <strlen>
c0015331:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c0015337:	40                   	inc    eax
c0015338:	89 04 24             	mov    DWORD PTR [esp],eax
c001533b:	e8 76 27 ff ff       	call   c0007ab6 <malloc>
c0015340:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c0015347:	58                   	pop    eax
c0015348:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c001534d:	5a                   	pop    edx
c001534e:	56                   	push   esi
c001534f:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c0015356:	e8 e5 b2 fe ff       	call   c0000640 <strcpy>
c001535b:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015360:	8d 50 01             	lea    edx,[eax+0x1]
c0015363:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c001536a:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015370:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015374:	83 c4 0c             	add    esp,0xc
c0015377:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c001537e:	6a 01                	push   0x1
c0015380:	53                   	push   ebx
c0015381:	56                   	push   esi
c0015382:	e8 bf f6 ff ff       	call   c0014a46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015387:	83 c4 10             	add    esp,0x10
c001538a:	0f b6 c0             	movzx  eax,al
c001538d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015391:	85 c0                	test   eax,eax
c0015393:	0f 85 89 00 00 00    	jne    c0015422 <Thr::loadDLL(char const*, bool)+0x220>
c0015399:	89 f8                	mov    eax,edi
c001539b:	84 c0                	test   al,al
c001539d:	74 73                	je     c0015412 <Thr::loadDLL(char const*, bool)+0x210>
c001539f:	83 ec 0c             	sub    esp,0xc
c00153a2:	68 9d 23 02 c0       	push   0xc002239d
c00153a7:	e8 f5 bf ff ff       	call   c00113a1 <KePanic(char const*)>
c00153ac:	83 c4 10             	add    esp,0x10
c00153af:	eb 61                	jmp    c0015412 <Thr::loadDLL(char const*, bool)+0x210>
c00153b1:	50                   	push   eax
c00153b2:	50                   	push   eax
c00153b3:	89 e8                	mov    eax,ebp
c00153b5:	c1 e0 0c             	shl    eax,0xc
c00153b8:	01 d8                	add    eax,ebx
c00153ba:	50                   	push   eax
c00153bb:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00153c1:	e8 46 45 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00153c6:	83 c4 10             	add    esp,0x10
c00153c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cb:	a8 60                	test   al,0x60
c00153cd:	75 11                	jne    c00153e0 <Thr::loadDLL(char const*, bool)+0x1de>
c00153cf:	83 ec 0c             	sub    esp,0xc
c00153d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00153d7:	50                   	push   eax
c00153d8:	e8 79 29 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00153dd:	83 c4 10             	add    esp,0x10
c00153e0:	45                   	inc    ebp
c00153e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00153e9:	05 ff 0f 00 00       	add    eax,0xfff
c00153ee:	bf 00 00 00 00       	mov    edi,0x0
c00153f3:	83 d2 00             	adc    edx,0x0
c00153f6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00153fa:	c1 ea 0c             	shr    edx,0xc
c00153fd:	39 c5                	cmp    ebp,eax
c00153ff:	89 d1                	mov    ecx,edx
c0015401:	89 f8                	mov    eax,edi
c0015403:	19 c8                	sbb    eax,ecx
c0015405:	72 aa                	jb     c00153b1 <Thr::loadDLL(char const*, bool)+0x1af>
c0015407:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001540c:	75 18                	jne    c0015426 <Thr::loadDLL(char const*, bool)+0x224>
c001540e:	31 db                	xor    ebx,ebx
c0015410:	eb 14                	jmp    c0015426 <Thr::loadDLL(char const*, bool)+0x224>
c0015412:	83 ec 0c             	sub    esp,0xc
c0015415:	68 bc 23 02 c0       	push   0xc00223bc
c001541a:	e8 82 bf ff ff       	call   c00113a1 <KePanic(char const*)>
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	31 ed                	xor    ebp,ebp
c0015424:	eb bb                	jmp    c00153e1 <Thr::loadDLL(char const*, bool)+0x1df>
c0015426:	81 c4 2c 01 00 00    	add    esp,0x12c
c001542c:	89 d8                	mov    eax,ebx
c001542e:	5b                   	pop    ebx
c001542f:	5e                   	pop    esi
c0015430:	5f                   	pop    edi
c0015431:	5d                   	pop    ebp
c0015432:	c3                   	ret    

c0015433 <Thr::executeDLL(unsigned long, void*)>:
c0015433:	56                   	push   esi
c0015434:	53                   	push   ebx
c0015435:	52                   	push   edx
c0015436:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001543a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001543e:	85 db                	test   ebx,ebx
c0015440:	75 10                	jne    c0015452 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015442:	83 ec 0c             	sub    esp,0xc
c0015445:	68 d8 23 02 c0       	push   0xc00223d8
c001544a:	e8 52 bf ff ff       	call   c00113a1 <KePanic(char const*)>
c001544f:	83 c4 10             	add    esp,0x10
c0015452:	50                   	push   eax
c0015453:	50                   	push   eax
c0015454:	53                   	push   ebx
c0015455:	68 02 24 02 c0       	push   0xc0022402
c001545a:	e8 e6 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001545f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015463:	89 d8                	mov    eax,ebx
c0015465:	83 c4 14             	add    esp,0x14
c0015468:	5b                   	pop    ebx
c0015469:	5e                   	pop    esi
c001546a:	ff e0                	jmp    eax

c001546c <userModeEntryPoint(void*)>:
c001546c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015471:	83 e8 01             	sub    eax,0x1
c0015474:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015479:	75 01                	jne    c001547c <userModeEntryPoint(void*)+0x10>
c001547b:	fb                   	sti    
c001547c:	fb                   	sti    
c001547d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015482:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015485:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001548b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001548f:	e9 ab ad fe ff       	jmp    c000023f <goToUsermode>

c0015494 <changeTSS>:
c0015494:	83 ec 14             	sub    esp,0x14
c0015497:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001549c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001549f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00154a4:	c1 e2 15             	shl    edx,0x15
c00154a7:	29 d0                	sub    eax,edx
c00154a9:	50                   	push   eax
c00154aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00154af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00154b5:	05 7c 11 00 00       	add    eax,0x117c
c00154ba:	50                   	push   eax
c00154bb:	e8 94 3a ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c00154c0:	83 c4 1c             	add    esp,0x1c
c00154c3:	c3                   	ret    

c00154c4 <switchToThread(ThreadControlBlock*)>:
c00154c4:	57                   	push   edi
c00154c5:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00154cb:	56                   	push   esi
c00154cc:	85 c9                	test   ecx,ecx
c00154ce:	53                   	push   ebx
c00154cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154d3:	0f 85 8b 00 00 00    	jne    c0015564 <switchToThread(ThreadControlBlock*)+0xa0>
c00154d9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00154dd:	81 fa ff 00 00 00    	cmp    edx,0xff
c00154e3:	74 7b                	je     c0015560 <switchToThread(ThreadControlBlock*)+0x9c>
c00154e5:	b8 00 04 00 00       	mov    eax,0x400
c00154ea:	29 d0                	sub    eax,edx
c00154ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00154ef:	d1 f8                	sar    eax,1
c00154f1:	01 d0                	add    eax,edx
c00154f3:	90                   	nop
c00154f4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00154f7:	e8 1e 28 00 00       	call   c0017d1a <HalQueryPerformanceCounter()>
c00154fc:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015501:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c0015507:	89 c6                	mov    esi,eax
c0015509:	89 d7                	mov    edi,edx
c001550b:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c0015511:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015516:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c001551c:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015522:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015528:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001552e:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c0015534:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015537:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001553a:	01 c6                	add    esi,eax
c001553c:	11 d7                	adc    edi,edx
c001553e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015541:	83 ec 0c             	sub    esp,0xc
c0015544:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015547:	53                   	push   ebx
c0015548:	e8 2a ad fe ff       	call   c0000277 <switchToThreadASM>
c001554d:	0f 20 c0             	mov    eax,cr0
c0015550:	83 c8 08             	or     eax,0x8
c0015553:	0f 22 c0             	mov    cr0,eax
c0015556:	83 c4 10             	add    esp,0x10
c0015559:	5b                   	pop    ebx
c001555a:	5e                   	pop    esi
c001555b:	5f                   	pop    edi
c001555c:	c3                   	ret    
c001555d:	8d 76 00             	lea    esi,[esi+0x0]
c0015560:	31 c0                	xor    eax,eax
c0015562:	eb 90                	jmp    c00154f4 <switchToThread(ThreadControlBlock*)+0x30>
c0015564:	5b                   	pop    ebx
c0015565:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c001556f:	5e                   	pop    esi
c0015570:	5f                   	pop    edi
c0015571:	c3                   	ret    
c0015572:	66 90                	xchg   ax,ax

c0015574 <Process::addArgs(char**)>:
c0015574:	57                   	push   edi
c0015575:	56                   	push   esi
c0015576:	53                   	push   ebx
c0015577:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001557b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001557f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015589:	85 ff                	test   edi,edi
c001558b:	74 4f                	je     c00155dc <Process::addArgs(char**)+0x68>
c001558d:	8b 07                	mov    eax,DWORD PTR [edi]
c001558f:	85 c0                	test   eax,eax
c0015591:	74 49                	je     c00155dc <Process::addArgs(char**)+0x68>
c0015593:	31 db                	xor    ebx,ebx
c0015595:	8d 76 00             	lea    esi,[esi+0x0]
c0015598:	83 ec 0c             	sub    esp,0xc
c001559b:	50                   	push   eax
c001559c:	e8 cf af fe ff       	call   c0000570 <strlen>
c00155a1:	83 c0 01             	add    eax,0x1
c00155a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00155a7:	e8 0a 25 ff ff       	call   c0007ab6 <malloc>
c00155ac:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00155b3:	5a                   	pop    edx
c00155b4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00155b7:	59                   	pop    ecx
c00155b8:	83 c3 01             	add    ebx,0x1
c00155bb:	52                   	push   edx
c00155bc:	50                   	push   eax
c00155bd:	e8 7e b0 fe ff       	call   c0000640 <strcpy>
c00155c2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00155c8:	83 c4 10             	add    esp,0x10
c00155cb:	83 c1 01             	add    ecx,0x1
c00155ce:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00155d4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00155d7:	85 c0                	test   eax,eax
c00155d9:	75 bd                	jne    c0015598 <Process::addArgs(char**)+0x24>
c00155db:	90                   	nop
c00155dc:	5b                   	pop    ebx
c00155dd:	5e                   	pop    esi
c00155de:	5f                   	pop    edi
c00155df:	c3                   	ret    

c00155e0 <Process::Process(char const*, Process*, char**)>:
c00155e0:	56                   	push   esi
c00155e1:	53                   	push   ebx
c00155e2:	83 ec 14             	sub    esp,0x14
c00155e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e9:	05 0c 02 00 00       	add    eax,0x20c
c00155ee:	bb 07 00 00 00       	mov    ebx,0x7
c00155f3:	89 c6                	mov    esi,eax
c00155f5:	8d 76 00             	lea    esi,[esi+0x0]
c00155f8:	85 db                	test   ebx,ebx
c00155fa:	78 14                	js     c0015610 <Process::Process(char const*, Process*, char**)+0x30>
c00155fc:	83 ec 0c             	sub    esp,0xc
c00155ff:	56                   	push   esi
c0015600:	e8 e3 a5 00 00       	call   c001fbe8 <ThreadControlBlock::ThreadControlBlock()>
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	83 c6 5f             	add    esi,0x5f
c001560b:	83 eb 01             	sub    ebx,0x1
c001560e:	eb e8                	jmp    c00155f8 <Process::Process(char const*, Process*, char**)+0x18>
c0015610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015614:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001561b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001561f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015626:	83 ec 0c             	sub    esp,0xc
c0015629:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001562d:	e8 64 bb ff ff       	call   c0011196 <KeNewProcessEnv(Process*)>
c0015632:	83 c4 10             	add    esp,0x10
c0015635:	89 c2                	mov    edx,eax
c0015637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001563b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015645:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001564e:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c0015653:	8d 50 01             	lea    edx,[eax+0x1]
c0015656:	89 15 20 36 02 c0    	mov    DWORD PTR ds:0xc0023620,edx
c001565c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015660:	89 02                	mov    DWORD PTR [edx],eax
c0015662:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001566a:	83 ec 0c             	sub    esp,0xc
c001566d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015671:	e8 40 24 ff ff       	call   c0007ab6 <malloc>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	89 c3                	mov    ebx,eax
c001567b:	83 ec 08             	sub    esp,0x8
c001567e:	6a 00                	push   0x0
c0015680:	53                   	push   ebx
c0015681:	e8 e2 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001568d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015697:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00156a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156a9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00156af:	e8 06 c1 ff ff       	call   c00117ba <KeInitSignals()>
c00156b4:	89 c2                	mov    edx,eax
c00156b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ba:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00156c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156ca:	85 c0                	test   eax,eax
c00156cc:	74 42                	je     c0015710 <Process::Process(char const*, Process*, char**)+0x130>
c00156ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156d2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156d8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00156de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156e2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00156e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156f2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00156f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156fc:	05 0c 01 00 00       	add    eax,0x10c
c0015701:	83 ec 08             	sub    esp,0x8
c0015704:	52                   	push   edx
c0015705:	50                   	push   eax
c0015706:	e8 35 af fe ff       	call   c0000640 <strcpy>
c001570b:	83 c4 10             	add    esp,0x10
c001570e:	eb 64                	jmp    c0015774 <Process::Process(char const*, Process*, char**)+0x194>
c0015710:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001571f:	e8 92 23 ff ff       	call   c0007ab6 <malloc>
c0015724:	83 c4 10             	add    esp,0x10
c0015727:	89 c3                	mov    ebx,eax
c0015729:	83 ec 08             	sub    esp,0x8
c001572c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015730:	53                   	push   ebx
c0015731:	e8 30 35 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015736:	83 c4 10             	add    esp,0x10
c0015739:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001573d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015747:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001574d:	83 ec 0c             	sub    esp,0xc
c0015750:	50                   	push   eax
c0015751:	e8 ae 2d ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015756:	83 c4 10             	add    esp,0x10
c0015759:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001575d:	05 0c 01 00 00       	add    eax,0x10c
c0015762:	83 ec 08             	sub    esp,0x8
c0015765:	68 21 24 02 c0       	push   0xc0022421
c001576a:	50                   	push   eax
c001576b:	e8 d0 ae fe ff       	call   c0000640 <strcpy>
c0015770:	83 c4 10             	add    esp,0x10
c0015773:	90                   	nop
c0015774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015778:	83 c0 0c             	add    eax,0xc
c001577b:	83 ec 08             	sub    esp,0x8
c001577e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015782:	50                   	push   eax
c0015783:	e8 b8 ae fe ff       	call   c0000640 <strcpy>
c0015788:	83 c4 10             	add    esp,0x10
c001578b:	83 ec 08             	sub    esp,0x8
c001578e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015792:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015796:	e8 d9 fd ff ff       	call   c0015574 <Process::addArgs(char**)>
c001579b:	83 c4 10             	add    esp,0x10
c001579e:	83 ec 08             	sub    esp,0x8
c00157a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157a9:	e8 66 ed ff ff       	call   c0014514 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00157ae:	83 c4 10             	add    esp,0x10
c00157b1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00157b5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00157b9:	83 f0 01             	xor    eax,0x1
c00157bc:	88 c2                	mov    dl,al
c00157be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157c2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00157c8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00157cd:	83 ec 04             	sub    esp,0x4
c00157d0:	50                   	push   eax
c00157d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157d5:	68 78 24 02 c0       	push   0xc0022478
c00157da:	e8 66 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00157df:	83 c4 10             	add    esp,0x10
c00157e2:	90                   	nop
c00157e3:	83 c4 14             	add    esp,0x14
c00157e6:	5b                   	pop    ebx
c00157e7:	5e                   	pop    esi
c00157e8:	c3                   	ret    
c00157e9:	90                   	nop
c00157ea:	66 90                	xchg   ax,ax

c00157ec <Process::Process(bool, char const*, Process*, char**)>:
c00157ec:	56                   	push   esi
c00157ed:	53                   	push   ebx
c00157ee:	83 ec 24             	sub    esp,0x24
c00157f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00157f5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00157f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157fd:	05 0c 02 00 00       	add    eax,0x20c
c0015802:	bb 07 00 00 00       	mov    ebx,0x7
c0015807:	89 c6                	mov    esi,eax
c0015809:	8d 76 00             	lea    esi,[esi+0x0]
c001580c:	85 db                	test   ebx,ebx
c001580e:	78 14                	js     c0015824 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015810:	83 ec 0c             	sub    esp,0xc
c0015813:	56                   	push   esi
c0015814:	e8 cf a3 00 00       	call   c001fbe8 <ThreadControlBlock::ThreadControlBlock()>
c0015819:	83 c4 10             	add    esp,0x10
c001581c:	83 c6 5f             	add    esi,0x5f
c001581f:	83 eb 01             	sub    ebx,0x1
c0015822:	eb e8                	jmp    c001580c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015824:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015828:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001582f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015833:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001583a:	83 ec 0c             	sub    esp,0xc
c001583d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015841:	e8 50 b9 ff ff       	call   c0011196 <KeNewProcessEnv(Process*)>
c0015846:	83 c4 10             	add    esp,0x10
c0015849:	89 c2                	mov    edx,eax
c001584b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001584f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015855:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015859:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015862:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c0015867:	8d 50 01             	lea    edx,[eax+0x1]
c001586a:	89 15 20 36 02 c0    	mov    DWORD PTR ds:0xc0023620,edx
c0015870:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015874:	89 02                	mov    DWORD PTR [edx],eax
c0015876:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001587e:	83 ec 0c             	sub    esp,0xc
c0015881:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015885:	e8 2c 22 ff ff       	call   c0007ab6 <malloc>
c001588a:	83 c4 10             	add    esp,0x10
c001588d:	89 c3                	mov    ebx,eax
c001588f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015894:	83 ec 08             	sub    esp,0x8
c0015897:	50                   	push   eax
c0015898:	53                   	push   ebx
c0015899:	e8 ca 47 ff ff       	call   c000a068 <VAS::VAS(bool)>
c001589e:	83 c4 10             	add    esp,0x10
c00158a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158a5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00158ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158af:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00158b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158bd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00158c1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00158c7:	e8 ee be ff ff       	call   c00117ba <KeInitSignals()>
c00158cc:	89 c2                	mov    edx,eax
c00158ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158d2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00158d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00158e2:	85 c0                	test   eax,eax
c00158e4:	74 42                	je     c0015928 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00158e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158ea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00158f0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00158f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158fa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015904:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001590a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015910:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015914:	05 0c 01 00 00       	add    eax,0x10c
c0015919:	83 ec 08             	sub    esp,0x8
c001591c:	52                   	push   edx
c001591d:	50                   	push   eax
c001591e:	e8 1d ad fe ff       	call   c0000640 <strcpy>
c0015923:	83 c4 10             	add    esp,0x10
c0015926:	eb 64                	jmp    c001598c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015928:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015930:	83 ec 0c             	sub    esp,0xc
c0015933:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015937:	e8 7a 21 ff ff       	call   c0007ab6 <malloc>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	89 c3                	mov    ebx,eax
c0015941:	83 ec 08             	sub    esp,0x8
c0015944:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015948:	53                   	push   ebx
c0015949:	e8 18 33 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c001594e:	83 c4 10             	add    esp,0x10
c0015951:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015955:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001595b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001595f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015965:	83 ec 0c             	sub    esp,0xc
c0015968:	50                   	push   eax
c0015969:	e8 96 2b ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015975:	05 0c 01 00 00       	add    eax,0x10c
c001597a:	83 ec 08             	sub    esp,0x8
c001597d:	68 21 24 02 c0       	push   0xc0022421
c0015982:	50                   	push   eax
c0015983:	e8 b8 ac fe ff       	call   c0000640 <strcpy>
c0015988:	83 c4 10             	add    esp,0x10
c001598b:	90                   	nop
c001598c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015990:	83 c0 0c             	add    eax,0xc
c0015993:	83 ec 08             	sub    esp,0x8
c0015996:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001599a:	50                   	push   eax
c001599b:	e8 a0 ac fe ff       	call   c0000640 <strcpy>
c00159a0:	83 c4 10             	add    esp,0x10
c00159a3:	83 ec 08             	sub    esp,0x8
c00159a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00159aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00159ae:	e8 c1 fb ff ff       	call   c0015574 <Process::addArgs(char**)>
c00159b3:	83 c4 10             	add    esp,0x10
c00159b6:	90                   	nop
c00159b7:	83 c4 24             	add    esp,0x24
c00159ba:	5b                   	pop    ebx
c00159bb:	5e                   	pop    esi
c00159bc:	c3                   	ret    
c00159bd:	8d 76 00             	lea    esi,[esi+0x0]

c00159c0 <taskStartupFunction>:
c00159c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159c5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00159c8:	c3                   	ret    
c00159c9:	90                   	nop
c00159ca:	66 90                	xchg   ax,ax

c00159cc <Semaphore::Semaphore(int)>:
c00159cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00159d4:	89 10                	mov    DWORD PTR [eax],edx
c00159d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159da:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00159e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159f0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00159f7:	90                   	nop
c00159f8:	c3                   	ret    
c00159f9:	90                   	nop
c00159fa:	66 90                	xchg   ax,ax

c00159fc <Mutex::Mutex()>:
c00159fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a00:	6a 01                	push   0x1
c0015a02:	50                   	push   eax
c0015a03:	e8 c4 ff ff ff       	call   c00159cc <Semaphore::Semaphore(int)>
c0015a08:	83 c4 08             	add    esp,0x8
c0015a0b:	90                   	nop
c0015a0c:	c3                   	ret    
c0015a0d:	90                   	nop
c0015a0e:	66 90                	xchg   ax,ax

c0015a10 <Process::createThread(void (*)(void*), void*, int)>:
c0015a10:	57                   	push   edi
c0015a11:	31 c9                	xor    ecx,ecx
c0015a13:	56                   	push   esi
c0015a14:	53                   	push   ebx
c0015a15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a19:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015a20:	89 f2                	mov    edx,esi
c0015a22:	66 90                	xchg   ax,ax
c0015a24:	0f b7 c2             	movzx  eax,dx
c0015a27:	80 e2 01             	and    dl,0x1
c0015a2a:	74 14                	je     c0015a40 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015a2c:	d1 f8                	sar    eax,1
c0015a2e:	83 c1 01             	add    ecx,0x1
c0015a31:	89 c2                	mov    edx,eax
c0015a33:	83 f9 10             	cmp    ecx,0x10
c0015a36:	75 ec                	jne    c0015a24 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015a38:	31 db                	xor    ebx,ebx
c0015a3a:	89 d8                	mov    eax,ebx
c0015a3c:	5b                   	pop    ebx
c0015a3d:	5e                   	pop    esi
c0015a3e:	5f                   	pop    edi
c0015a3f:	c3                   	ret    
c0015a40:	b8 01 00 00 00       	mov    eax,0x1
c0015a45:	d3 e0                	shl    eax,cl
c0015a47:	09 c6                	or     esi,eax
c0015a49:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015a4c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015a53:	01 c0                	add    eax,eax
c0015a55:	01 c8                	add    eax,ecx
c0015a57:	8d 04 80             	lea    eax,[eax+eax*4]
c0015a5a:	01 d8                	add    eax,ebx
c0015a5c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015a63:	75 0b                	jne    c0015a70 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015a65:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015a6f:	90                   	nop
c0015a70:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a76:	83 ec 0c             	sub    esp,0xc
c0015a79:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015a7c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015a7f:	01 c0                	add    eax,eax
c0015a81:	01 c8                	add    eax,ecx
c0015a83:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015a86:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015a89:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015a8f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015a95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a99:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015a9f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015aa5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015aab:	89 ca                	mov    edx,ecx
c0015aad:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015ab4:	f7 da                	neg    edx
c0015ab6:	c1 e2 15             	shl    edx,0x15
c0015ab9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015abf:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015ac5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ac9:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015ad3:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015ad9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015add:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015ae3:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015aed:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015af7:	68 00 01 00 00       	push   0x100
c0015afc:	e8 b5 1f ff ff       	call   c0007ab6 <malloc>
c0015b01:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015b04:	58                   	pop    eax
c0015b05:	5a                   	pop    edx
c0015b06:	53                   	push   ebx
c0015b07:	68 e4 96 02 c0       	push   0xc00296e4
c0015b0c:	e8 6f 9e 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b11:	83 c4 10             	add    esp,0x10
c0015b14:	89 d8                	mov    eax,ebx
c0015b16:	5b                   	pop    ebx
c0015b17:	5e                   	pop    esi
c0015b18:	5f                   	pop    edi
c0015b19:	c3                   	ret    
c0015b1a:	66 90                	xchg   ax,ax

c0015b1c <Process::createUserThread()>:
c0015b1c:	83 ec 0c             	sub    esp,0xc
c0015b1f:	68 80 00 00 00       	push   0x80
c0015b24:	6a 00                	push   0x0
c0015b26:	68 6c 54 01 c0       	push   0xc001546c
c0015b2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b2f:	50                   	push   eax
c0015b30:	e8 db fe ff ff       	call   c0015a10 <Process::createThread(void (*)(void*), void*, int)>
c0015b35:	83 c4 1c             	add    esp,0x1c
c0015b38:	c3                   	ret    
c0015b39:	8d 76 00             	lea    esi,[esi+0x0]

c0015b3c <setupMultitasking(void (*)())>:
c0015b3c:	56                   	push   esi
c0015b3d:	53                   	push   ebx
c0015b3e:	83 ec 04             	sub    esp,0x4
c0015b41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b45:	eb 11                	jmp    c0015b58 <setupMultitasking(void (*)())+0x1c>
c0015b47:	90                   	nop
c0015b48:	83 ec 0c             	sub    esp,0xc
c0015b4b:	68 e4 96 02 c0       	push   0xc00296e4
c0015b50:	e8 6f 9d 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b55:	83 c4 10             	add    esp,0x10
c0015b58:	83 ec 0c             	sub    esp,0xc
c0015b5b:	68 e4 96 02 c0       	push   0xc00296e4
c0015b60:	e8 3b 9d 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b65:	83 c4 10             	add    esp,0x10
c0015b68:	84 c0                	test   al,al
c0015b6a:	74 dc                	je     c0015b48 <setupMultitasking(void (*)())+0xc>
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	68 24 07 00 00       	push   0x724
c0015b74:	e8 3d 1f ff ff       	call   c0007ab6 <malloc>
c0015b79:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015b80:	89 c3                	mov    ebx,eax
c0015b82:	6a 00                	push   0x0
c0015b84:	68 25 24 02 c0       	push   0xc0022425
c0015b89:	6a 01                	push   0x1
c0015b8b:	50                   	push   eax
c0015b8c:	e8 5b fc ff ff       	call   c00157ec <Process::Process(bool, char const*, Process*, char**)>
c0015b91:	83 c4 14             	add    esp,0x14
c0015b94:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015b9a:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015ba0:	50                   	push   eax
c0015ba1:	e8 b3 2b ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015ba6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015bad:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015bb7:	83 c8 01             	or     eax,0x1
c0015bba:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015bc1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015bc7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015bca:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015bd4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015bda:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015be0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015bea:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015bf4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015bfe:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015c04:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015c0e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015c14:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015c1e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015c25:	e8 8c 1e ff ff       	call   c0007ab6 <malloc>
c0015c2a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015c30:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015c36:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015c3c:	5a                   	pop    edx
c0015c3d:	59                   	pop    ecx
c0015c3e:	68 21 24 02 c0       	push   0xc0022421
c0015c43:	50                   	push   eax
c0015c44:	e8 f7 a9 fe ff       	call   c0000640 <strcpy>
c0015c49:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015c50:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015c54:	83 c4 14             	add    esp,0x14
c0015c57:	5b                   	pop    ebx
c0015c58:	5e                   	pop    esi
c0015c59:	e9 0b a6 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015c5e:	66 90                	xchg   ax,ax

c0015c60 <schedule()>:
c0015c60:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015c66:	85 d2                	test   edx,edx
c0015c68:	74 0e                	je     c0015c78 <schedule()+0x18>
c0015c6a:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015c74:	c3                   	ret    
c0015c75:	8d 76 00             	lea    esi,[esi+0x0]
c0015c78:	53                   	push   ebx
c0015c79:	83 ec 14             	sub    esp,0x14
c0015c7c:	68 e4 96 02 c0       	push   0xc00296e4
c0015c81:	e8 1a 9c 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c86:	83 c4 10             	add    esp,0x10
c0015c89:	84 c0                	test   al,al
c0015c8b:	75 3f                	jne    c0015ccc <schedule()+0x6c>
c0015c8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c92:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015c95:	83 fa 01             	cmp    edx,0x1
c0015c98:	74 3a                	je     c0015cd4 <schedule()+0x74>
c0015c9a:	66 90                	xchg   ax,ax
c0015c9c:	83 ec 0c             	sub    esp,0xc
c0015c9f:	68 e4 96 02 c0       	push   0xc00296e4
c0015ca4:	e8 13 9c 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ca9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015cb0:	89 c3                	mov    ebx,eax
c0015cb2:	e8 0d 9c 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015cb7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015cbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cc1:	e8 fe f7 ff ff       	call   c00154c4 <switchToThread(ThreadControlBlock*)>
c0015cc6:	83 c4 10             	add    esp,0x10
c0015cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015ccc:	83 c4 08             	add    esp,0x8
c0015ccf:	5b                   	pop    ebx
c0015cd0:	c3                   	ret    
c0015cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cd4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015cdb:	83 ec 08             	sub    esp,0x8
c0015cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ce3:	50                   	push   eax
c0015ce4:	68 e4 96 02 c0       	push   0xc00296e4
c0015ce9:	e8 92 9c 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015cee:	83 c4 10             	add    esp,0x10
c0015cf1:	eb a9                	jmp    c0015c9c <schedule()+0x3c>
c0015cf3:	90                   	nop

c0015cf4 <Semaphore::tryAcquire()>:
c0015cf4:	53                   	push   ebx
c0015cf5:	83 ec 08             	sub    esp,0x8
c0015cf8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015cfc:	fa                   	cli    
c0015cfd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d02:	8d 50 01             	lea    edx,[eax+0x1]
c0015d05:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015d0b:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015d11:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015d14:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015d1a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015d1d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015d1f:	7c 33                	jl     c0015d54 <Semaphore::tryAcquire()+0x60>
c0015d21:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015d27:	85 d2                	test   edx,edx
c0015d29:	75 0d                	jne    c0015d38 <Semaphore::tryAcquire()+0x44>
c0015d2b:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015d31:	85 d2                	test   edx,edx
c0015d33:	75 6f                	jne    c0015da4 <Semaphore::tryAcquire()+0xb0>
c0015d35:	8d 76 00             	lea    esi,[esi+0x0]
c0015d38:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d3d:	85 c0                	test   eax,eax
c0015d3f:	74 0b                	je     c0015d4c <Semaphore::tryAcquire()+0x58>
c0015d41:	8d 76 00             	lea    esi,[esi+0x0]
c0015d44:	31 c0                	xor    eax,eax
c0015d46:	83 c4 08             	add    esp,0x8
c0015d49:	5b                   	pop    ebx
c0015d4a:	c3                   	ret    
c0015d4b:	90                   	nop
c0015d4c:	fb                   	sti    
c0015d4d:	83 c4 08             	add    esp,0x8
c0015d50:	5b                   	pop    ebx
c0015d51:	c3                   	ret    
c0015d52:	66 90                	xchg   ax,ax
c0015d54:	83 c3 01             	add    ebx,0x1
c0015d57:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015d5d:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015d60:	85 d2                	test   edx,edx
c0015d62:	75 24                	jne    c0015d88 <Semaphore::tryAcquire()+0x94>
c0015d64:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015d6a:	85 c9                	test   ecx,ecx
c0015d6c:	74 1a                	je     c0015d88 <Semaphore::tryAcquire()+0x94>
c0015d6e:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d78:	e8 e3 fe ff ff       	call   c0015c60 <schedule()>
c0015d7d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d82:	83 e8 01             	sub    eax,0x1
c0015d85:	8d 76 00             	lea    esi,[esi+0x0]
c0015d88:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d8d:	85 c0                	test   eax,eax
c0015d8f:	75 0b                	jne    c0015d9c <Semaphore::tryAcquire()+0xa8>
c0015d91:	fb                   	sti    
c0015d92:	b0 01                	mov    al,0x1
c0015d94:	83 c4 08             	add    esp,0x8
c0015d97:	5b                   	pop    ebx
c0015d98:	c3                   	ret    
c0015d99:	8d 76 00             	lea    esi,[esi+0x0]
c0015d9c:	b0 01                	mov    al,0x1
c0015d9e:	83 c4 08             	add    esp,0x8
c0015da1:	5b                   	pop    ebx
c0015da2:	c3                   	ret    
c0015da3:	90                   	nop
c0015da4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015dae:	e8 ad fe ff ff       	call   c0015c60 <schedule()>
c0015db3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015db8:	83 e8 01             	sub    eax,0x1
c0015dbb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015dc0:	85 c0                	test   eax,eax
c0015dc2:	75 80                	jne    c0015d44 <Semaphore::tryAcquire()+0x50>
c0015dc4:	eb 86                	jmp    c0015d4c <Semaphore::tryAcquire()+0x58>
c0015dc6:	66 90                	xchg   ax,ax

c0015dc8 <Semaphore::assertLocked(char const*)>:
c0015dc8:	83 ec 0c             	sub    esp,0xc
c0015dcb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dcf:	fa                   	cli    
c0015dd0:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015dd6:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ddb:	83 c1 01             	add    ecx,0x1
c0015dde:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015de4:	8d 48 01             	lea    ecx,[eax+0x1]
c0015de7:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015ded:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015def:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015df2:	7c 28                	jl     c0015e1c <Semaphore::assertLocked(char const*)+0x54>
c0015df4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015df9:	85 c0                	test   eax,eax
c0015dfb:	75 0b                	jne    c0015e08 <Semaphore::assertLocked(char const*)+0x40>
c0015dfd:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e02:	85 c0                	test   eax,eax
c0015e04:	75 32                	jne    c0015e38 <Semaphore::assertLocked(char const*)+0x70>
c0015e06:	66 90                	xchg   ax,ax
c0015e08:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e0d:	83 e8 01             	sub    eax,0x1
c0015e10:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e15:	75 01                	jne    c0015e18 <Semaphore::assertLocked(char const*)+0x50>
c0015e17:	fb                   	sti    
c0015e18:	83 c4 0c             	add    esp,0xc
c0015e1b:	c3                   	ret    
c0015e1c:	83 ec 0c             	sub    esp,0xc
c0015e1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e23:	52                   	push   edx
c0015e24:	e8 78 b5 ff ff       	call   c00113a1 <KePanic(char const*)>
c0015e29:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e2e:	83 c4 10             	add    esp,0x10
c0015e31:	83 e8 01             	sub    eax,0x1
c0015e34:	eb be                	jmp    c0015df4 <Semaphore::assertLocked(char const*)+0x2c>
c0015e36:	66 90                	xchg   ax,ax
c0015e38:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e42:	e8 19 fe ff ff       	call   c0015c60 <schedule()>
c0015e47:	eb bf                	jmp    c0015e08 <Semaphore::assertLocked(char const*)+0x40>
c0015e49:	8d 76 00             	lea    esi,[esi+0x0]

c0015e4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015e4c:	83 ec 0c             	sub    esp,0xc
c0015e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e58:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015e5b:	e8 00 fe ff ff       	call   c0015c60 <schedule()>
c0015e60:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e65:	83 e8 01             	sub    eax,0x1
c0015e68:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e6d:	75 01                	jne    c0015e70 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015e6f:	fb                   	sti    
c0015e70:	83 c4 0c             	add    esp,0xc
c0015e73:	c3                   	ret    

c0015e74 <blockTask(TaskState)>:
c0015e74:	83 ec 0c             	sub    esp,0xc
c0015e77:	fa                   	cli    
c0015e78:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e81:	83 c0 01             	add    eax,0x1
c0015e84:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e8e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015e91:	e8 ca fd ff ff       	call   c0015c60 <schedule()>
c0015e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e9b:	83 e8 01             	sub    eax,0x1
c0015e9e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ea3:	75 03                	jne    c0015ea8 <blockTask(TaskState)+0x34>
c0015ea5:	fb                   	sti    
c0015ea6:	66 90                	xchg   ax,ax
c0015ea8:	83 c4 0c             	add    esp,0xc
c0015eab:	c3                   	ret    

c0015eac <waitTask(int, int*, int)>:
c0015eac:	83 ec 18             	sub    esp,0x18
c0015eaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015eb8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015ebb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ec4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015ec7:	6a 07                	push   0x7
c0015ec9:	e8 a6 ff ff ff       	call   c0015e74 <blockTask(TaskState)>
c0015ece:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed3:	83 c4 10             	add    esp,0x10
c0015ed6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015ed9:	85 d2                	test   edx,edx
c0015edb:	74 0b                	je     c0015ee8 <waitTask(int, int*, int)+0x3c>
c0015edd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015ee0:	89 02                	mov    DWORD PTR [edx],eax
c0015ee2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ee7:	90                   	nop
c0015ee8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015eeb:	83 c4 0c             	add    esp,0xc
c0015eee:	c3                   	ret    
c0015eef:	90                   	nop

c0015ef0 <milliTenthSleepUntil(unsigned int)>:
c0015ef0:	83 ec 0c             	sub    esp,0xc
c0015ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ef7:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015efd:	76 05                	jbe    c0015f04 <milliTenthSleepUntil(unsigned int)+0x14>
c0015eff:	90                   	nop
c0015f00:	83 c4 0c             	add    esp,0xc
c0015f03:	c3                   	ret    
c0015f04:	fa                   	cli    
c0015f05:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015f0b:	83 ec 08             	sub    esp,0x8
c0015f0e:	83 c2 01             	add    edx,0x1
c0015f11:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015f17:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015f1d:	83 c1 01             	add    ecx,0x1
c0015f20:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f26:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f2c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015f2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f34:	50                   	push   eax
c0015f35:	68 d8 96 02 c0       	push   0xc00296d8
c0015f3a:	e8 41 9a 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f3f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015f46:	e8 29 ff ff ff       	call   c0015e74 <blockTask(TaskState)>
c0015f4b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f50:	83 c4 10             	add    esp,0x10
c0015f53:	83 e8 01             	sub    eax,0x1
c0015f56:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f5b:	85 c0                	test   eax,eax
c0015f5d:	75 09                	jne    c0015f68 <milliTenthSleepUntil(unsigned int)+0x78>
c0015f5f:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f64:	85 c0                	test   eax,eax
c0015f66:	75 14                	jne    c0015f7c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015f68:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f6d:	83 e8 01             	sub    eax,0x1
c0015f70:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f75:	75 89                	jne    c0015f00 <milliTenthSleepUntil(unsigned int)+0x10>
c0015f77:	fb                   	sti    
c0015f78:	83 c4 0c             	add    esp,0xc
c0015f7b:	c3                   	ret    
c0015f7c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f86:	e8 d5 fc ff ff       	call   c0015c60 <schedule()>
c0015f8b:	eb db                	jmp    c0015f68 <milliTenthSleepUntil(unsigned int)+0x78>
c0015f8d:	8d 76 00             	lea    esi,[esi+0x0]

c0015f90 <milliTenthSleep(unsigned int)>:
c0015f90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f94:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015f99:	01 c2                	add    edx,eax
c0015f9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015f9f:	e9 4c ff ff ff       	jmp    c0015ef0 <milliTenthSleepUntil(unsigned int)>

c0015fa4 <sleep(unsigned int)>:
c0015fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fa8:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fab:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fae:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fb1:	8d 04 80             	lea    eax,[eax+eax*4]
c0015fb4:	c1 e0 04             	shl    eax,0x4
c0015fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fbb:	eb d3                	jmp    c0015f90 <milliTenthSleep(unsigned int)>
c0015fbd:	90                   	nop
c0015fbe:	66 90                	xchg   ax,ax

c0015fc0 <Semaphore::acquire()>:
c0015fc0:	83 ec 0c             	sub    esp,0xc
c0015fc3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015fc7:	fa                   	cli    
c0015fc8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fcd:	83 c0 01             	add    eax,0x1
c0015fd0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fd5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015fda:	8d 48 01             	lea    ecx,[eax+0x1]
c0015fdd:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015fe3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015fe6:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015fe8:	7d 2e                	jge    c0016018 <Semaphore::acquire()+0x58>
c0015fea:	83 c1 01             	add    ecx,0x1
c0015fed:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015ff0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ff5:	85 c0                	test   eax,eax
c0015ff7:	75 0b                	jne    c0016004 <Semaphore::acquire()+0x44>
c0015ff9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015ffe:	85 c0                	test   eax,eax
c0016000:	75 66                	jne    c0016068 <Semaphore::acquire()+0xa8>
c0016002:	66 90                	xchg   ax,ax
c0016004:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016009:	83 e8 01             	sub    eax,0x1
c001600c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016011:	75 01                	jne    c0016014 <Semaphore::acquire()+0x54>
c0016013:	fb                   	sti    
c0016014:	83 c4 0c             	add    esp,0xc
c0016017:	c3                   	ret    
c0016018:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001601d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016024:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016027:	85 c9                	test   ecx,ecx
c0016029:	74 51                	je     c001607c <Semaphore::acquire()+0xbc>
c001602b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001602e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016034:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016037:	90                   	nop
c0016038:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001603d:	83 ec 0c             	sub    esp,0xc
c0016040:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016043:	68 a4 24 02 c0       	push   0xc00224a4
c0016048:	e8 f8 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001604d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016054:	e8 1b fe ff ff       	call   c0015e74 <blockTask(TaskState)>
c0016059:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	83 e8 01             	sub    eax,0x1
c0016064:	eb 8a                	jmp    c0015ff0 <Semaphore::acquire()+0x30>
c0016066:	66 90                	xchg   ax,ax
c0016068:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016072:	e8 e9 fb ff ff       	call   c0015c60 <schedule()>
c0016077:	eb 8b                	jmp    c0016004 <Semaphore::acquire()+0x44>
c0016079:	8d 76 00             	lea    esi,[esi+0x0]
c001607c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016081:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016084:	eb b2                	jmp    c0016038 <Semaphore::acquire()+0x78>
c0016086:	66 90                	xchg   ax,ax

c0016088 <taskReturned>:
c0016088:	83 ec 18             	sub    esp,0x18
c001608b:	68 c4 24 02 c0       	push   0xc00224c4
c0016090:	e8 0c b3 ff ff       	call   c00113a1 <KePanic(char const*)>
c0016095:	83 c4 10             	add    esp,0x10
c0016098:	83 ec 0c             	sub    esp,0xc
c001609b:	6a 02                	push   0x2
c001609d:	e8 d2 fd ff ff       	call   c0015e74 <blockTask(TaskState)>
c00160a2:	fa                   	cli    
c00160a3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160a8:	83 c0 01             	add    eax,0x1
c00160ab:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160b0:	e8 ab fb ff ff       	call   c0015c60 <schedule()>
c00160b5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160ba:	83 c4 10             	add    esp,0x10
c00160bd:	83 e8 01             	sub    eax,0x1
c00160c0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160c5:	85 c0                	test   eax,eax
c00160c7:	75 cf                	jne    c0016098 <taskReturned+0x10>
c00160c9:	fb                   	sti    
c00160ca:	eb cc                	jmp    c0016098 <taskReturned+0x10>

c00160cc <Thr::processFromPID(int)>:
c00160cc:	57                   	push   edi
c00160cd:	56                   	push   esi
c00160ce:	53                   	push   ebx
c00160cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160d3:	fa                   	cli    
c00160d4:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c00160da:	83 ec 0c             	sub    esp,0xc
c00160dd:	83 c1 01             	add    ecx,0x1
c00160e0:	68 e4 96 02 c0       	push   0xc00296e4
c00160e5:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c00160eb:	e8 cc 97 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160f0:	83 c4 10             	add    esp,0x10
c00160f3:	89 c7                	mov    edi,eax
c00160f5:	eb 15                	jmp    c001610c <Thr::processFromPID(int)+0x40>
c00160f7:	90                   	nop
c00160f8:	83 ec 0c             	sub    esp,0xc
c00160fb:	68 e4 96 02 c0       	push   0xc00296e4
c0016100:	e8 b7 97 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016105:	83 c4 10             	add    esp,0x10
c0016108:	39 f8                	cmp    eax,edi
c001610a:	74 50                	je     c001615c <Thr::processFromPID(int)+0x90>
c001610c:	83 ec 0c             	sub    esp,0xc
c001610f:	68 e4 96 02 c0       	push   0xc00296e4
c0016114:	e8 a3 97 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016119:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016120:	89 c3                	mov    ebx,eax
c0016122:	e8 9d 97 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016127:	58                   	pop    eax
c0016128:	5a                   	pop    edx
c0016129:	53                   	push   ebx
c001612a:	68 e4 96 02 c0       	push   0xc00296e4
c001612f:	e8 4c 98 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016134:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016137:	83 c4 10             	add    esp,0x10
c001613a:	39 30                	cmp    DWORD PTR [eax],esi
c001613c:	75 ba                	jne    c00160f8 <Thr::processFromPID(int)+0x2c>
c001613e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016143:	83 e8 01             	sub    eax,0x1
c0016146:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001614b:	74 0b                	je     c0016158 <Thr::processFromPID(int)+0x8c>
c001614d:	8d 76 00             	lea    esi,[esi+0x0]
c0016150:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016153:	5b                   	pop    ebx
c0016154:	5e                   	pop    esi
c0016155:	5f                   	pop    edi
c0016156:	c3                   	ret    
c0016157:	90                   	nop
c0016158:	fb                   	sti    
c0016159:	eb f5                	jmp    c0016150 <Thr::processFromPID(int)+0x84>
c001615b:	90                   	nop
c001615c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016161:	83 e8 01             	sub    eax,0x1
c0016164:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016169:	75 05                	jne    c0016170 <Thr::processFromPID(int)+0xa4>
c001616b:	fb                   	sti    
c001616c:	5b                   	pop    ebx
c001616d:	5e                   	pop    esi
c001616e:	5f                   	pop    edi
c001616f:	c3                   	ret    
c0016170:	5b                   	pop    ebx
c0016171:	31 c0                	xor    eax,eax
c0016173:	5e                   	pop    esi
c0016174:	5f                   	pop    edi
c0016175:	c3                   	ret    
c0016176:	66 90                	xchg   ax,ax

c0016178 <unblockTask(ThreadControlBlock*)>:
c0016178:	53                   	push   ebx
c0016179:	83 ec 08             	sub    esp,0x8
c001617c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016180:	fa                   	cli    
c0016181:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016186:	83 c0 01             	add    eax,0x1
c0016189:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001618e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016191:	85 c0                	test   eax,eax
c0016193:	74 67                	je     c00161fc <unblockTask(ThreadControlBlock*)+0x84>
c0016195:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016198:	83 f8 01             	cmp    eax,0x1
c001619b:	74 37                	je     c00161d4 <unblockTask(ThreadControlBlock*)+0x5c>
c001619d:	83 ec 0c             	sub    esp,0xc
c00161a0:	68 e4 96 02 c0       	push   0xc00296e4
c00161a5:	e8 12 97 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161aa:	83 c4 10             	add    esp,0x10
c00161ad:	85 c0                	test   eax,eax
c00161af:	75 1b                	jne    c00161cc <unblockTask(ThreadControlBlock*)+0x54>
c00161b1:	eb 5d                	jmp    c0016210 <unblockTask(ThreadControlBlock*)+0x98>
c00161b3:	90                   	nop
c00161b4:	83 ec 08             	sub    esp,0x8
c00161b7:	50                   	push   eax
c00161b8:	68 e4 96 02 c0       	push   0xc00296e4
c00161bd:	e8 1a 9a 00 00       	call   c001fbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00161c2:	83 c4 10             	add    esp,0x10
c00161c5:	85 c0                	test   eax,eax
c00161c7:	74 47                	je     c0016210 <unblockTask(ThreadControlBlock*)+0x98>
c00161c9:	8d 76 00             	lea    esi,[esi+0x0]
c00161cc:	39 c3                	cmp    ebx,eax
c00161ce:	75 e4                	jne    c00161b4 <unblockTask(ThreadControlBlock*)+0x3c>
c00161d0:	eb 12                	jmp    c00161e4 <unblockTask(ThreadControlBlock*)+0x6c>
c00161d2:	66 90                	xchg   ax,ax
c00161d4:	83 ec 0c             	sub    esp,0xc
c00161d7:	68 43 24 02 c0       	push   0xc0022443
c00161dc:	e8 64 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00161e1:	83 c4 10             	add    esp,0x10
c00161e4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00161e9:	83 e8 01             	sub    eax,0x1
c00161ec:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00161f1:	75 01                	jne    c00161f4 <unblockTask(ThreadControlBlock*)+0x7c>
c00161f3:	fb                   	sti    
c00161f4:	83 c4 08             	add    esp,0x8
c00161f7:	5b                   	pop    ebx
c00161f8:	c3                   	ret    
c00161f9:	8d 76 00             	lea    esi,[esi+0x0]
c00161fc:	83 ec 0c             	sub    esp,0xc
c00161ff:	68 2c 24 02 c0       	push   0xc002242c
c0016204:	e8 3c 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016209:	83 c4 10             	add    esp,0x10
c001620c:	eb d6                	jmp    c00161e4 <unblockTask(ThreadControlBlock*)+0x6c>
c001620e:	66 90                	xchg   ax,ax
c0016210:	83 ec 08             	sub    esp,0x8
c0016213:	53                   	push   ebx
c0016214:	68 e4 96 02 c0       	push   0xc00296e4
c0016219:	e8 62 97 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001621e:	83 c4 10             	add    esp,0x10
c0016221:	eb c1                	jmp    c00161e4 <unblockTask(ThreadControlBlock*)+0x6c>
c0016223:	90                   	nop

c0016224 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016224:	55                   	push   ebp
c0016225:	57                   	push   edi
c0016226:	56                   	push   esi
c0016227:	53                   	push   ebx
c0016228:	83 ec 1c             	sub    esp,0x1c
c001622b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001622f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016232:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016238:	85 ed                	test   ebp,ebp
c001623a:	7e 28                	jle    c0016264 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001623c:	31 f6                	xor    esi,esi
c001623e:	66 90                	xchg   ax,ax
c0016240:	83 ec 0c             	sub    esp,0xc
c0016243:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001624a:	83 c6 01             	add    esi,0x1
c001624d:	57                   	push   edi
c001624e:	e8 73 18 ff ff       	call   c0007ac6 <free>
c0016253:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016256:	83 c4 10             	add    esp,0x10
c0016259:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001625f:	7f df                	jg     c0016240 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016261:	8d 76 00             	lea    esi,[esi+0x0]
c0016264:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001626e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016273:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016276:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016279:	d3 c0                	rol    eax,cl
c001627b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016282:	21 c8                	and    eax,ecx
c0016284:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001628b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001628e:	89 f7                	mov    edi,esi
c0016290:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016298:	0f 85 72 01 00 00    	jne    c0016410 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001629e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00162a4:	85 ed                	test   ebp,ebp
c00162a6:	74 1c                	je     c00162c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00162a8:	83 ec 0c             	sub    esp,0xc
c00162ab:	55                   	push   ebp
c00162ac:	e8 01 ae ff ff       	call   c00110b2 <EnvVarContainer::~EnvVarContainer()>
c00162b1:	59                   	pop    ecx
c00162b2:	5e                   	pop    esi
c00162b3:	6a 0c                	push   0xc
c00162b5:	55                   	push   ebp
c00162b6:	e8 5d 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00162bb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162be:	83 c4 10             	add    esp,0x10
c00162c1:	89 f7                	mov    edi,esi
c00162c3:	90                   	nop
c00162c4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162ca:	85 c0                	test   eax,eax
c00162cc:	0f 84 b2 00 00 00    	je     c0016384 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00162d2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00162d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00162d9:	31 c9                	xor    ecx,ecx
c00162db:	eb 17                	jmp    c00162f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00162dd:	8d 76 00             	lea    esi,[esi+0x0]
c00162e0:	83 c1 01             	add    ecx,0x1
c00162e3:	83 f9 10             	cmp    ecx,0x10
c00162e6:	0f 84 98 00 00 00    	je     c0016384 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00162ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00162f2:	66 90                	xchg   ax,ax
c00162f4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00162fb:	d3 fa                	sar    edx,cl
c00162fd:	80 e2 01             	and    dl,0x1
c0016300:	74 de                	je     c00162e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016302:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016305:	01 d2                	add    edx,edx
c0016307:	01 ca                	add    edx,ecx
c0016309:	8d 14 92             	lea    edx,[edx+edx*4]
c001630c:	01 d0                	add    eax,edx
c001630e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016314:	83 fd 07             	cmp    ebp,0x7
c0016317:	75 c7                	jne    c00162e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016319:	05 40 02 00 00       	add    eax,0x240
c001631e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016321:	83 fd ff             	cmp    ebp,0xffffffff
c0016324:	0f 8c ee 00 00 00    	jl     c0016418 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001632a:	0f 84 ac 01 00 00    	je     c00164dc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016330:	85 ed                	test   ebp,ebp
c0016332:	0f 84 90 01 00 00    	je     c00164c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016338:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001633a:	75 a4                	jne    c00162e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001633c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016342:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016346:	01 d0                	add    eax,edx
c0016348:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001634c:	83 ec 0c             	sub    esp,0xc
c001634f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016355:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016358:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001635e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016365:	50                   	push   eax
c0016366:	e8 0d fe ff ff       	call   c0016178 <unblockTask(ThreadControlBlock*)>
c001636b:	83 c4 10             	add    esp,0x10
c001636e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016371:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016375:	89 f7                	mov    edi,esi
c0016377:	83 c1 01             	add    ecx,0x1
c001637a:	83 f9 10             	cmp    ecx,0x10
c001637d:	0f 85 69 ff ff ff    	jne    c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016383:	90                   	nop
c0016384:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001638a:	85 c0                	test   eax,eax
c001638c:	74 62                	je     c00163f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001638e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016394:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001639a:	74 54                	je     c00163f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001639c:	83 ec 0c             	sub    esp,0xc
c001639f:	68 e4 96 02 c0       	push   0xc00296e4
c00163a4:	e8 13 95 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163a9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163b0:	89 c7                	mov    edi,eax
c00163b2:	e8 e9 94 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163b7:	83 c4 10             	add    esp,0x10
c00163ba:	84 c0                	test   al,al
c00163bc:	0f 84 ce 00 00 00    	je     c0016490 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00163c2:	66 90                	xchg   ax,ax
c00163c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163c7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00163cd:	85 d2                	test   edx,edx
c00163cf:	74 0f                	je     c00163e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00163d1:	83 ec 0c             	sub    esp,0xc
c00163d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00163d6:	52                   	push   edx
c00163d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163da:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163dd:	83 c4 10             	add    esp,0x10
c00163e0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00163ea:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00163ed:	8d 76 00             	lea    esi,[esi+0x0]
c00163f0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00163f6:	85 db                	test   ebx,ebx
c00163f8:	74 16                	je     c0016410 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00163fa:	83 ec 0c             	sub    esp,0xc
c00163fd:	53                   	push   ebx
c00163fe:	e8 af 37 ff ff       	call   c0009bb2 <VAS::~VAS()>
c0016403:	58                   	pop    eax
c0016404:	5a                   	pop    edx
c0016405:	6a 14                	push   0x14
c0016407:	53                   	push   ebx
c0016408:	e8 0b 44 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001640d:	83 c4 10             	add    esp,0x10
c0016410:	83 c4 1c             	add    esp,0x1c
c0016413:	5b                   	pop    ebx
c0016414:	5e                   	pop    esi
c0016415:	5f                   	pop    edi
c0016416:	5d                   	pop    ebp
c0016417:	c3                   	ret    
c0016418:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	68 f8 24 02 c0       	push   0xc00224f8
c0016424:	e8 78 af ff ff       	call   c00113a1 <KePanic(char const*)>
c0016429:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001642c:	83 c4 10             	add    esp,0x10
c001642f:	89 f7                	mov    edi,esi
c0016431:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016435:	e9 a6 fe ff ff       	jmp    c00162e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001643a:	66 90                	xchg   ax,ax
c001643c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016442:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016448:	75 1e                	jne    c0016468 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001644a:	83 ec 0c             	sub    esp,0xc
c001644d:	68 60 25 02 c0       	push   0xc0022560
c0016452:	e8 ee 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016457:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001645e:	e8 11 fa ff ff       	call   c0015e74 <blockTask(TaskState)>
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	66 90                	xchg   ax,ax
c0016468:	83 ec 08             	sub    esp,0x8
c001646b:	56                   	push   esi
c001646c:	68 e4 96 02 c0       	push   0xc00296e4
c0016471:	e8 0a 95 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016476:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001647d:	e8 3a 94 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016482:	83 c4 10             	add    esp,0x10
c0016485:	39 f8                	cmp    eax,edi
c0016487:	0f 84 37 ff ff ff    	je     c00163c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001648d:	8d 76 00             	lea    esi,[esi+0x0]
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	68 e4 96 02 c0       	push   0xc00296e4
c0016498:	e8 1f 94 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001649d:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00164a4:	89 c6                	mov    esi,eax
c00164a6:	e8 19 94 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164ab:	83 c4 10             	add    esp,0x10
c00164ae:	39 f3                	cmp    ebx,esi
c00164b0:	74 b6                	je     c0016468 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164b2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00164b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164b8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00164be:	75 a8                	jne    c0016468 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00164c0:	e9 77 ff ff ff       	jmp    c001643c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00164c5:	8d 76 00             	lea    esi,[esi+0x0]
c00164c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	68 2c 25 02 c0       	push   0xc002252c
c00164d4:	e9 4b ff ff ff       	jmp    c0016424 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00164d9:	8d 76 00             	lea    esi,[esi+0x0]
c00164dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00164de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164e2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00164e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164e8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00164ee:	01 d7                	add    edi,edx
c00164f0:	89 f8                	mov    eax,edi
c00164f2:	e9 51 fe ff ff       	jmp    c0016348 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00164f7:	90                   	nop

c00164f8 <cleanerTaskFunction(void*)>:
c00164f8:	53                   	push   ebx
c00164f9:	83 ec 08             	sub    esp,0x8
c00164fc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016501:	83 e8 01             	sub    eax,0x1
c0016504:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016509:	75 01                	jne    c001650c <cleanerTaskFunction(void*)+0x14>
c001650b:	fb                   	sti    
c001650c:	fa                   	cli    
c001650d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016512:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016519:	8d 50 01             	lea    edx,[eax+0x1]
c001651c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016522:	0f 84 c4 00 00 00    	je     c00165ec <cleanerTaskFunction(void*)+0xf4>
c0016528:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001652d:	85 c0                	test   eax,eax
c001652f:	75 03                	jne    c0016534 <cleanerTaskFunction(void*)+0x3c>
c0016531:	fb                   	sti    
c0016532:	66 90                	xchg   ax,ax
c0016534:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c001653b:	fa                   	cli    
c001653c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016542:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016548:	83 c2 01             	add    edx,0x1
c001654b:	83 c1 01             	add    ecx,0x1
c001654e:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016554:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001655a:	fa                   	cli    
c001655b:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016561:	83 c3 01             	add    ebx,0x1
c0016564:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c001656a:	eb 28                	jmp    c0016594 <cleanerTaskFunction(void*)+0x9c>
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	68 cc 96 02 c0       	push   0xc00296cc
c0016574:	e8 43 93 00 00       	call   c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016579:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016580:	89 c3                	mov    ebx,eax
c0016582:	e8 3d 93 00 00       	call   c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016587:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001658a:	e8 95 fc ff ff       	call   c0016224 <cleanupTerminatedTask(ThreadControlBlock*)>
c001658f:	83 c4 10             	add    esp,0x10
c0016592:	66 90                	xchg   ax,ax
c0016594:	83 ec 0c             	sub    esp,0xc
c0016597:	68 cc 96 02 c0       	push   0xc00296cc
c001659c:	e8 ff 92 00 00       	call   c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165a1:	83 c4 10             	add    esp,0x10
c00165a4:	84 c0                	test   al,al
c00165a6:	74 c4                	je     c001656c <cleanerTaskFunction(void*)+0x74>
c00165a8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165ad:	83 e8 01             	sub    eax,0x1
c00165b0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165b5:	75 01                	jne    c00165b8 <cleanerTaskFunction(void*)+0xc0>
c00165b7:	fb                   	sti    
c00165b8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165bd:	83 e8 01             	sub    eax,0x1
c00165c0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00165c5:	0f 85 31 ff ff ff    	jne    c00164fc <cleanerTaskFunction(void*)+0x4>
c00165cb:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00165d0:	85 c0                	test   eax,eax
c00165d2:	0f 84 24 ff ff ff    	je     c00164fc <cleanerTaskFunction(void*)+0x4>
c00165d8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165e2:	e8 79 f6 ff ff       	call   c0015c60 <schedule()>
c00165e7:	e9 10 ff ff ff       	jmp    c00164fc <cleanerTaskFunction(void*)+0x4>
c00165ec:	83 ec 0c             	sub    esp,0xc
c00165ef:	6a 02                	push   0x2
c00165f1:	e8 56 f8 ff ff       	call   c0015e4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00165f6:	83 c4 10             	add    esp,0x10
c00165f9:	e9 36 ff ff ff       	jmp    c0016534 <cleanerTaskFunction(void*)+0x3c>
c00165fe:	66 90                	xchg   ax,ax

c0016600 <terminateTask(int)>:
c0016600:	83 ec 14             	sub    esp,0x14
c0016603:	fa                   	cli    
c0016604:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001660a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016610:	83 c2 01             	add    edx,0x1
c0016613:	83 c1 01             	add    ecx,0x1
c0016616:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001661c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016622:	fa                   	cli    
c0016623:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016628:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001662c:	83 c0 01             	add    eax,0x1
c001662f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016634:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016639:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001663c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016641:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016644:	50                   	push   eax
c0016645:	68 cc 96 02 c0       	push   0xc00296cc
c001664a:	e8 31 93 00 00       	call   c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001664f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016654:	83 c4 10             	add    esp,0x10
c0016657:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001665e:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c0016663:	85 c0                	test   eax,eax
c0016665:	74 65                	je     c00166cc <terminateTask(int)+0xcc>
c0016667:	83 ec 0c             	sub    esp,0xc
c001666a:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c0016671:	50                   	push   eax
c0016672:	e8 01 fb ff ff       	call   c0016178 <unblockTask(ThreadControlBlock*)>
c0016677:	83 c4 10             	add    esp,0x10
c001667a:	66 90                	xchg   ax,ax
c001667c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016681:	83 e8 01             	sub    eax,0x1
c0016684:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016689:	75 01                	jne    c001668c <terminateTask(int)+0x8c>
c001668b:	fb                   	sti    
c001668c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016691:	83 e8 01             	sub    eax,0x1
c0016694:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016699:	75 09                	jne    c00166a4 <terminateTask(int)+0xa4>
c001669b:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00166a2:	75 3c                	jne    c00166e0 <terminateTask(int)+0xe0>
c00166a4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166a9:	83 e8 01             	sub    eax,0x1
c00166ac:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166b1:	75 01                	jne    c00166b4 <terminateTask(int)+0xb4>
c00166b3:	fb                   	sti    
c00166b4:	fa                   	cli    
c00166b5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166ba:	83 c0 01             	add    eax,0x1
c00166bd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166c2:	66 90                	xchg   ax,ax
c00166c4:	e8 97 f5 ff ff       	call   c0015c60 <schedule()>
c00166c9:	eb d9                	jmp    c00166a4 <terminateTask(int)+0xa4>
c00166cb:	90                   	nop
c00166cc:	83 ec 0c             	sub    esp,0xc
c00166cf:	68 5a 24 02 c0       	push   0xc002245a
c00166d4:	e8 6c 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00166d9:	83 c4 10             	add    esp,0x10
c00166dc:	eb 9e                	jmp    c001667c <terminateTask(int)+0x7c>
c00166de:	66 90                	xchg   ax,ax
c00166e0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00166ea:	eb d8                	jmp    c00166c4 <terminateTask(int)+0xc4>

c00166ec <Thr::terminateFromIRQ(int)>:
c00166ec:	83 ec 18             	sub    esp,0x18
c00166ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166f3:	50                   	push   eax
c00166f4:	e8 07 ff ff ff       	call   c0016600 <terminateTask(int)>
c00166f9:	90                   	nop
c00166fa:	66 90                	xchg   ax,ax

c00166fc <Semaphore::release()>:
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016703:	fa                   	cli    
c0016704:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016709:	83 c0 01             	add    eax,0x1
c001670c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016711:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016716:	8d 48 01             	lea    ecx,[eax+0x1]
c0016719:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001671f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016722:	85 c9                	test   ecx,ecx
c0016724:	74 42                	je     c0016768 <Semaphore::release()+0x6c>
c0016726:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016729:	83 ec 0c             	sub    esp,0xc
c001672c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001672f:	51                   	push   ecx
c0016730:	e8 43 fa ff ff       	call   c0016178 <unblockTask(ThreadControlBlock*)>
c0016735:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	83 e8 01             	sub    eax,0x1
c0016740:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016745:	85 c0                	test   eax,eax
c0016747:	75 0b                	jne    c0016754 <Semaphore::release()+0x58>
c0016749:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001674e:	85 c0                	test   eax,eax
c0016750:	75 22                	jne    c0016774 <Semaphore::release()+0x78>
c0016752:	66 90                	xchg   ax,ax
c0016754:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016759:	83 e8 01             	sub    eax,0x1
c001675c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016761:	75 01                	jne    c0016764 <Semaphore::release()+0x68>
c0016763:	fb                   	sti    
c0016764:	83 c4 0c             	add    esp,0xc
c0016767:	c3                   	ret    
c0016768:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001676b:	83 e9 01             	sub    ecx,0x1
c001676e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016771:	eb cd                	jmp    c0016740 <Semaphore::release()+0x44>
c0016773:	90                   	nop
c0016774:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001677e:	e8 dd f4 ff ff       	call   c0015c60 <schedule()>
c0016783:	eb cf                	jmp    c0016754 <Semaphore::release()+0x58>
c0016785:	8d 76 00             	lea    esi,[esi+0x0]

c0016788 <__static_initialization_and_destruction_0(int, int)>:
c0016788:	83 ec 0c             	sub    esp,0xc
c001678b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016790:	0f 85 8e 00 00 00    	jne    c0016824 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016796:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001679e:	0f 85 80 00 00 00    	jne    c0016824 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	68 e4 96 02 c0       	push   0xc00296e4
c00167ac:	e8 83 94 00 00       	call   c001fc34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167b1:	83 c4 10             	add    esp,0x10
c00167b4:	83 ec 04             	sub    esp,0x4
c00167b7:	68 30 31 02 c0       	push   0xc0023130
c00167bc:	68 e4 96 02 c0       	push   0xc00296e4
c00167c1:	68 e4 fb 01 c0       	push   0xc001fbe4
c00167c6:	e8 fd 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c00167cb:	83 c4 10             	add    esp,0x10
c00167ce:	83 ec 0c             	sub    esp,0xc
c00167d1:	68 d8 96 02 c0       	push   0xc00296d8
c00167d6:	e8 59 94 00 00       	call   c001fc34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	83 ec 04             	sub    esp,0x4
c00167e1:	68 30 31 02 c0       	push   0xc0023130
c00167e6:	68 d8 96 02 c0       	push   0xc00296d8
c00167eb:	68 e4 fb 01 c0       	push   0xc001fbe4
c00167f0:	e8 d3 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c00167f5:	83 c4 10             	add    esp,0x10
c00167f8:	83 ec 0c             	sub    esp,0xc
c00167fb:	68 cc 96 02 c0       	push   0xc00296cc
c0016800:	e8 2f 94 00 00       	call   c001fc34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	83 ec 04             	sub    esp,0x4
c001680b:	68 30 31 02 c0       	push   0xc0023130
c0016810:	68 cc 96 02 c0       	push   0xc00296cc
c0016815:	68 e4 fb 01 c0       	push   0xc001fbe4
c001681a:	e8 a9 3f ff ff       	call   c000a7c8 <__cxa_atexit>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	66 90                	xchg   ax,ax
c0016824:	90                   	nop
c0016825:	83 c4 0c             	add    esp,0xc
c0016828:	c3                   	ret    
c0016829:	8d 76 00             	lea    esi,[esi+0x0]

c001682c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001682c:	83 ec 0c             	sub    esp,0xc
c001682f:	83 ec 08             	sub    esp,0x8
c0016832:	68 ff ff 00 00       	push   0xffff
c0016837:	6a 01                	push   0x1
c0016839:	e8 4a ff ff ff       	call   c0016788 <__static_initialization_and_destruction_0(int, int)>
c001683e:	83 c4 10             	add    esp,0x10
c0016841:	83 c4 0c             	add    esp,0xc
c0016844:	c3                   	ret    

c0016845 <Vm::inbv(unsigned short)>:
c0016845:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016849:	66 81 fa fe fe       	cmp    dx,0xfefe
c001684e:	75 06                	jne    c0016856 <Vm::inbv(unsigned short)+0x11>
c0016850:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c0016855:	c3                   	ret    
c0016856:	ec                   	in     al,dx
c0016857:	c3                   	ret    

c0016858 <Vm::outbv(unsigned short, unsigned char)>:
c0016858:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001685c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016860:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016865:	75 25                	jne    c001688c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016867:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001686d:	8d 51 01             	lea    edx,[ecx+0x1]
c0016870:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c0016876:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c001687c:	83 fa 20             	cmp    edx,0x20
c001687f:	75 0c                	jne    c001688d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016881:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c001688b:	c3                   	ret    
c001688c:	ee                   	out    dx,al
c001688d:	c3                   	ret    

c001688e <Vm::realToLinear(unsigned short, unsigned short)>:
c001688e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016893:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016898:	c1 e0 04             	shl    eax,0x4
c001689b:	01 d0                	add    eax,edx
c001689d:	c3                   	ret    

c001689e <Vm::getSegment(unsigned int)>:
c001689e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168a2:	c1 e8 10             	shr    eax,0x10
c00168a5:	c3                   	ret    

c00168a6 <Vm::getOffset(unsigned int)>:
c00168a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168aa:	c3                   	ret    

c00168ab <Vm::mainloop2()>:
c00168ab:	83 ec 18             	sub    esp,0x18
c00168ae:	fa                   	cli    
c00168af:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168b5:	6a 02                	push   0x2
c00168b7:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c00168be:	e8 89 f5 ff ff       	call   c0015e4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00168c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00168cc:	52                   	push   edx
c00168cd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00168d1:	52                   	push   edx
c00168d2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00168d6:	52                   	push   edx
c00168d7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00168db:	50                   	push   eax
c00168dc:	e8 2e 99 fe ff       	call   c000020f <goToVM86>
c00168e1:	83 c4 2c             	add    esp,0x2c
c00168e4:	c3                   	ret    

c00168e5 <Vm::mainVm8086Loop(void*)>:
c00168e5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168ea:	48                   	dec    eax
c00168eb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168f0:	75 01                	jne    c00168f3 <Vm::mainVm8086Loop(void*)+0xe>
c00168f2:	fb                   	sti    
c00168f3:	eb b6                	jmp    c00168ab <Vm::mainloop2()>

c00168f5 <Vm::mainloop3(unsigned long)>:
c00168f5:	83 ec 18             	sub    esp,0x18
c00168f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168fc:	fa                   	cli    
c00168fd:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016903:	6a 02                	push   0x2
c0016905:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c001690c:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016911:	e8 36 f5 ff ff       	call   c0015e4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016916:	83 c4 1c             	add    esp,0x1c
c0016919:	eb 90                	jmp    c00168ab <Vm::mainloop2()>

c001691b <Vm::initialise8086()>:
c001691b:	83 ec 0c             	sub    esp,0xc
c001691e:	68 80 00 00 00       	push   0x80
c0016923:	6a 00                	push   0x0
c0016925:	68 e5 68 01 c0       	push   0xc00168e5
c001692a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016930:	e8 db f0 ff ff       	call   c0015a10 <Process::createThread(void (*)(void*), void*, int)>
c0016935:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001693c:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016941:	68 00 01 00 00       	push   0x100
c0016946:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001694b:	6a 00                	push   0x0
c001694d:	6a 00                	push   0x0
c001694f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016955:	e8 c0 35 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001695a:	83 c4 2c             	add    esp,0x2c
c001695d:	c3                   	ret    

c001695e <Vm::finish8086()>:
c001695e:	53                   	push   ebx
c001695f:	83 ec 08             	sub    esp,0x8
c0016962:	fa                   	cli    
c0016963:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016969:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016970:	75 15                	jne    c0016987 <Vm::finish8086()+0x29>
c0016972:	e8 e9 f2 ff ff       	call   c0015c60 <schedule()>
c0016977:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001697c:	48                   	dec    eax
c001697d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016982:	75 de                	jne    c0016962 <Vm::finish8086()+0x4>
c0016984:	fb                   	sti    
c0016985:	eb db                	jmp    c0016962 <Vm::finish8086()+0x4>
c0016987:	83 ec 0c             	sub    esp,0xc
c001698a:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016990:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016996:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c001699d:	e8 d6 f7 ff ff       	call   c0016178 <unblockTask(ThreadControlBlock*)>
c00169a2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169a7:	83 c4 10             	add    esp,0x10
c00169aa:	8d 50 ff             	lea    edx,[eax-0x1]
c00169ad:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00169b3:	85 d2                	test   edx,edx
c00169b5:	75 01                	jne    c00169b8 <Vm::finish8086()+0x5a>
c00169b7:	fb                   	sti    
c00169b8:	89 d8                	mov    eax,ebx
c00169ba:	83 c4 08             	add    esp,0x8
c00169bd:	5b                   	pop    ebx
c00169be:	c3                   	ret    

c00169bf <Vm::getOutput8086(unsigned char*)>:
c00169bf:	57                   	push   edi
c00169c0:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00169c6:	56                   	push   esi
c00169c7:	be 40 97 02 c0       	mov    esi,0xc0029740
c00169cc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00169d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169d2:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c00169d7:	5e                   	pop    esi
c00169d8:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00169e2:	5f                   	pop    edi
c00169e3:	c3                   	ret    

c00169e4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00169e4:	55                   	push   ebp
c00169e5:	57                   	push   edi
c00169e6:	56                   	push   esi
c00169e7:	53                   	push   ebx
c00169e8:	83 ec 0c             	sub    esp,0xc
c00169eb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00169ef:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00169f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00169f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00169fb:	fa                   	cli    
c00169fc:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a02:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016a09:	75 15                	jne    c0016a20 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016a0b:	e8 50 f2 ff ff       	call   c0015c60 <schedule()>
c0016a10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a15:	48                   	dec    eax
c0016a16:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a1b:	75 de                	jne    c00169fb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a1d:	fb                   	sti    
c0016a1e:	eb db                	jmp    c00169fb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016a20:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a25:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a2f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a33:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a37:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a3b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016a3f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a43:	0f b7 ff             	movzx  edi,di
c0016a46:	0f b7 f6             	movzx  esi,si
c0016a49:	50                   	push   eax
c0016a4a:	6a 20                	push   0x20
c0016a4c:	6a 00                	push   0x0
c0016a4e:	68 40 97 02 c0       	push   0xc0029740
c0016a53:	e8 98 9a fe ff       	call   c00004f0 <memset>
c0016a58:	5a                   	pop    edx
c0016a59:	59                   	pop    ecx
c0016a5a:	57                   	push   edi
c0016a5b:	56                   	push   esi
c0016a5c:	e8 2d fe ff ff       	call   c001688e <Vm::realToLinear(unsigned short, unsigned short)>
c0016a61:	83 c4 10             	add    esp,0x10
c0016a64:	89 c7                	mov    edi,eax
c0016a66:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016a6a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016a6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a70:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a75:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016a7c:	48                   	dec    eax
c0016a7d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a82:	75 01                	jne    c0016a85 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016a84:	fb                   	sti    
c0016a85:	83 ec 0c             	sub    esp,0xc
c0016a88:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016a8e:	e8 e5 f6 ff ff       	call   c0016178 <unblockTask(ThreadControlBlock*)>
c0016a93:	83 c4 1c             	add    esp,0x1c
c0016a96:	b0 01                	mov    al,0x1
c0016a98:	5b                   	pop    ebx
c0016a99:	5e                   	pop    esi
c0016a9a:	5f                   	pop    edi
c0016a9b:	5d                   	pop    ebp
c0016a9c:	c3                   	ret    

c0016a9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016a9d:	55                   	push   ebp
c0016a9e:	57                   	push   edi
c0016a9f:	56                   	push   esi
c0016aa0:	53                   	push   ebx
c0016aa1:	83 ec 34             	sub    esp,0x34
c0016aa4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016aa8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016aac:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ab0:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016ab4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ab8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016abc:	68 88 25 02 c0       	push   0xc0022588
c0016ac1:	e8 7f 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016ac6:	83 c4 10             	add    esp,0x10
c0016ac9:	fa                   	cli    
c0016aca:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016ad0:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016ad6:	84 db                	test   bl,bl
c0016ad8:	75 15                	jne    c0016aef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016ada:	e8 81 f1 ff ff       	call   c0015c60 <schedule()>
c0016adf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016ae4:	48                   	dec    eax
c0016ae5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016aea:	75 dd                	jne    c0016ac9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016aec:	fb                   	sti    
c0016aed:	eb da                	jmp    c0016ac9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016aef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016af3:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016af8:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016b02:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016b06:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016b0a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016b0e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016b12:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016b16:	50                   	push   eax
c0016b17:	6a 20                	push   0x20
c0016b19:	6a 00                	push   0x0
c0016b1b:	68 40 97 02 c0       	push   0xc0029740
c0016b20:	e8 cb 99 fe ff       	call   c00004f0 <memset>
c0016b25:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016b2c:	e8 85 0f ff ff       	call   c0007ab6 <malloc>
c0016b31:	83 c4 0c             	add    esp,0xc
c0016b34:	89 c5                	mov    ebp,eax
c0016b36:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016b3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016b40:	50                   	push   eax
c0016b41:	e8 08 4d ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0016b46:	83 c4 10             	add    esp,0x10
c0016b49:	85 ed                	test   ebp,ebp
c0016b4b:	75 0a                	jne    c0016b57 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016b4d:	83 ec 0c             	sub    esp,0xc
c0016b50:	68 aa 25 02 c0       	push   0xc00225aa
c0016b55:	eb 2b                	jmp    c0016b82 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016b57:	50                   	push   eax
c0016b58:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016b5c:	50                   	push   eax
c0016b5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016b61:	50                   	push   eax
c0016b62:	55                   	push   ebp
c0016b63:	e8 b0 50 ff ff       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c0016b68:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016b6c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016b70:	83 c4 10             	add    esp,0x10
c0016b73:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016b78:	74 27                	je     c0016ba1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016b7a:	83 ec 0c             	sub    esp,0xc
c0016b7d:	68 be 25 02 c0       	push   0xc00225be
c0016b82:	e8 1a a8 ff ff       	call   c00113a1 <KePanic(char const*)>
c0016b87:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b8c:	83 c4 10             	add    esp,0x10
c0016b8f:	48                   	dec    eax
c0016b90:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b95:	85 c0                	test   eax,eax
c0016b97:	75 01                	jne    c0016b9a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b99:	fb                   	sti    
c0016b9a:	31 db                	xor    ebx,ebx
c0016b9c:	e9 90 00 00 00       	jmp    c0016c31 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016ba1:	51                   	push   ecx
c0016ba2:	51                   	push   ecx
c0016ba3:	6a 01                	push   0x1
c0016ba5:	55                   	push   ebp
c0016ba6:	e8 6b 4d ff ff       	call   c000b916 <File::open(FileOpenMode)>
c0016bab:	83 c4 10             	add    esp,0x10
c0016bae:	85 c0                	test   eax,eax
c0016bb0:	74 26                	je     c0016bd8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016bb2:	83 ec 0c             	sub    esp,0xc
c0016bb5:	68 d7 25 02 c0       	push   0xc00225d7
c0016bba:	e8 e2 a7 ff ff       	call   c00113a1 <KePanic(char const*)>
c0016bbf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016bc4:	83 c4 10             	add    esp,0x10
c0016bc7:	48                   	dec    eax
c0016bc8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016bcd:	85 c0                	test   eax,eax
c0016bcf:	75 c9                	jne    c0016b9a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016bd1:	fb                   	sti    
c0016bd2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016bd6:	eb 59                	jmp    c0016c31 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016bd8:	0f b7 ff             	movzx  edi,di
c0016bdb:	50                   	push   eax
c0016bdc:	0f b7 f6             	movzx  esi,si
c0016bdf:	50                   	push   eax
c0016be0:	57                   	push   edi
c0016be1:	56                   	push   esi
c0016be2:	e8 a7 fc ff ff       	call   c001688e <Vm::realToLinear(unsigned short, unsigned short)>
c0016be7:	5a                   	pop    edx
c0016be8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016beb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016bef:	51                   	push   ecx
c0016bf0:	50                   	push   eax
c0016bf1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016bf5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016bf9:	55                   	push   ebp
c0016bfa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016bfd:	83 c4 14             	add    esp,0x14
c0016c00:	55                   	push   ebp
c0016c01:	e8 6e 4d ff ff       	call   c000b974 <File::close()>
c0016c06:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c0b:	83 c4 10             	add    esp,0x10
c0016c0e:	48                   	dec    eax
c0016c0f:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016c16:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c1b:	85 c0                	test   eax,eax
c0016c1d:	75 01                	jne    c0016c20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016c1f:	fb                   	sti    
c0016c20:	83 ec 0c             	sub    esp,0xc
c0016c23:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016c29:	e8 4a f5 ff ff       	call   c0016178 <unblockTask(ThreadControlBlock*)>
c0016c2e:	83 c4 10             	add    esp,0x10
c0016c31:	83 c4 2c             	add    esp,0x2c
c0016c34:	88 d8                	mov    al,bl
c0016c36:	5b                   	pop    ebx
c0016c37:	5e                   	pop    esi
c0016c38:	5f                   	pop    edi
c0016c39:	5d                   	pop    ebp
c0016c3a:	c3                   	ret    

c0016c3b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016c3b:	57                   	push   edi
c0016c3c:	56                   	push   esi
c0016c3d:	53                   	push   ebx
c0016c3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c46:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016c4a:	83 e8 06             	sub    eax,0x6
c0016c4d:	0f b7 c0             	movzx  eax,ax
c0016c50:	50                   	push   eax
c0016c51:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016c56:	50                   	push   eax
c0016c57:	e8 32 fc ff ff       	call   c001688e <Vm::realToLinear(unsigned short, unsigned short)>
c0016c5c:	5a                   	pop    edx
c0016c5d:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016c60:	59                   	pop    ecx
c0016c61:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016c64:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016c67:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016c6d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016c70:	8d 56 02             	lea    edx,[esi+0x2]
c0016c73:	66 89 10             	mov    WORD PTR [eax],dx
c0016c76:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016c7a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016c7e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c81:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016c85:	0f b6 f1             	movzx  esi,cl
c0016c88:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016c8c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c92:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016c96:	0f b6 d5             	movzx  edx,ch
c0016c99:	74 0a                	je     c0016ca5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016c9b:	c1 e2 08             	shl    edx,0x8
c0016c9e:	09 f2                	or     edx,esi
c0016ca0:	80 ce 02             	or     dh,0x2
c0016ca3:	eb 08                	jmp    c0016cad <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016ca5:	c1 e2 08             	shl    edx,0x8
c0016ca8:	09 f2                	or     edx,esi
c0016caa:	80 e6 fd             	and    dh,0xfd
c0016cad:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016cb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cb6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016cba:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016cc2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016cc5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016ccd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016cd0:	5b                   	pop    ebx
c0016cd1:	5e                   	pop    esi
c0016cd2:	5f                   	pop    edi
c0016cd3:	c3                   	ret    

c0016cd4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016cd4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cd9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cde:	c1 e0 04             	shl    eax,0x4
c0016ce1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016ce4:	c3                   	ret    

c0016ce5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016ce5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cef:	c1 e0 04             	shl    eax,0x4
c0016cf2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016cf6:	c3                   	ret    

c0016cf7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016cf7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cfc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d01:	c1 e0 04             	shl    eax,0x4
c0016d04:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016d07:	c3                   	ret    

c0016d08 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016d08:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d0d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d12:	c1 e0 04             	shl    eax,0x4
c0016d15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d19:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016d1c:	c3                   	ret    

c0016d1d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016d1d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d22:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d27:	c1 e0 04             	shl    eax,0x4
c0016d2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d2e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016d32:	c3                   	ret    

c0016d33 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d38:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d3d:	c1 e0 04             	shl    eax,0x4
c0016d40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d44:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016d47:	c3                   	ret    

c0016d48 <Vm::faultHandler(regs*)>:
c0016d48:	55                   	push   ebp
c0016d49:	57                   	push   edi
c0016d4a:	56                   	push   esi
c0016d4b:	53                   	push   ebx
c0016d4c:	83 ec 2c             	sub    esp,0x2c
c0016d4f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d53:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016d56:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016d5a:	0f b7 f8             	movzx  edi,ax
c0016d5d:	52                   	push   edx
c0016d5e:	0f b7 c0             	movzx  eax,ax
c0016d61:	50                   	push   eax
c0016d62:	e8 27 fb ff ff       	call   c001688e <Vm::realToLinear(unsigned short, unsigned short)>
c0016d67:	5a                   	pop    edx
c0016d68:	59                   	pop    ecx
c0016d69:	89 c1                	mov    ecx,eax
c0016d6b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d72:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d7b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016d7e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d82:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016d87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d8f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d93:	e8 f6 fa ff ff       	call   c001688e <Vm::realToLinear(unsigned short, unsigned short)>
c0016d98:	5e                   	pop    esi
c0016d99:	be 06 00 00 00       	mov    esi,0x6
c0016d9e:	5d                   	pop    ebp
c0016d9f:	31 ed                	xor    ebp,ebp
c0016da1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016da6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016da9:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016daf:	0f 84 74 02 00 00    	je     c0017029 <Vm::faultHandler(regs*)+0x2e1>
c0016db5:	0f 87 94 00 00 00    	ja     c0016e4f <Vm::faultHandler(regs*)+0x107>
c0016dbb:	83 fa 66             	cmp    edx,0x66
c0016dbe:	0f 84 e2 01 00 00    	je     c0016fa6 <Vm::faultHandler(regs*)+0x25e>
c0016dc4:	77 47                	ja     c0016e0d <Vm::faultHandler(regs*)+0xc5>
c0016dc6:	83 fa 36             	cmp    edx,0x36
c0016dc9:	0f 84 ca 01 00 00    	je     c0016f99 <Vm::faultHandler(regs*)+0x251>
c0016dcf:	77 1a                	ja     c0016deb <Vm::faultHandler(regs*)+0xa3>
c0016dd1:	83 fa 26             	cmp    edx,0x26
c0016dd4:	0f 84 98 01 00 00    	je     c0016f72 <Vm::faultHandler(regs*)+0x22a>
c0016dda:	83 fa 2e             	cmp    edx,0x2e
c0016ddd:	0f 85 21 06 00 00    	jne    c0017404 <Vm::faultHandler(regs*)+0x6bc>
c0016de3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016de6:	31 f6                	xor    esi,esi
c0016de8:	41                   	inc    ecx
c0016de9:	eb bb                	jmp    c0016da6 <Vm::faultHandler(regs*)+0x5e>
c0016deb:	83 fa 64             	cmp    edx,0x64
c0016dee:	0f 84 8b 01 00 00    	je     c0016f7f <Vm::faultHandler(regs*)+0x237>
c0016df4:	0f 87 92 01 00 00    	ja     c0016f8c <Vm::faultHandler(regs*)+0x244>
c0016dfa:	83 fa 3e             	cmp    edx,0x3e
c0016dfd:	0f 85 01 06 00 00    	jne    c0017404 <Vm::faultHandler(regs*)+0x6bc>
c0016e03:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e06:	be 01 00 00 00       	mov    esi,0x1
c0016e0b:	eb db                	jmp    c0016de8 <Vm::faultHandler(regs*)+0xa0>
c0016e0d:	83 fa 6d             	cmp    edx,0x6d
c0016e10:	0f 84 34 03 00 00    	je     c001714a <Vm::faultHandler(regs*)+0x402>
c0016e16:	77 17                	ja     c0016e2f <Vm::faultHandler(regs*)+0xe7>
c0016e18:	83 fa 67             	cmp    edx,0x67
c0016e1b:	0f 84 92 01 00 00    	je     c0016fb3 <Vm::faultHandler(regs*)+0x26b>
c0016e21:	83 fa 6c             	cmp    edx,0x6c
c0016e24:	0f 84 b1 02 00 00    	je     c00170db <Vm::faultHandler(regs*)+0x393>
c0016e2a:	e9 d5 05 00 00       	jmp    c0017404 <Vm::faultHandler(regs*)+0x6bc>
c0016e2f:	83 fa 6f             	cmp    edx,0x6f
c0016e32:	0f 84 3d 04 00 00    	je     c0017275 <Vm::faultHandler(regs*)+0x52d>
c0016e38:	0f 82 9f 03 00 00    	jb     c00171dd <Vm::faultHandler(regs*)+0x495>
c0016e3e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016e44:	0f 84 76 01 00 00    	je     c0016fc0 <Vm::faultHandler(regs*)+0x278>
c0016e4a:	e9 b5 05 00 00       	jmp    c0017404 <Vm::faultHandler(regs*)+0x6bc>
c0016e4f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016e55:	0f 84 51 05 00 00    	je     c00173ac <Vm::faultHandler(regs*)+0x664>
c0016e5b:	0f 87 a9 00 00 00    	ja     c0016f0a <Vm::faultHandler(regs*)+0x1c2>
c0016e61:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016e67:	0f 84 d0 04 00 00    	je     c001733d <Vm::faultHandler(regs*)+0x5f5>
c0016e6d:	77 78                	ja     c0016ee7 <Vm::faultHandler(regs*)+0x19f>
c0016e6f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016e75:	0f 84 0e 02 00 00    	je     c0017089 <Vm::faultHandler(regs*)+0x341>
c0016e7b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016e81:	0f 85 7d 05 00 00    	jne    c0017404 <Vm::faultHandler(regs*)+0x6bc>
c0016e87:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016e8b:	89 d1                	mov    ecx,edx
c0016e8d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016e90:	c1 e1 08             	shl    ecx,0x8
c0016e93:	09 ca                	or     edx,ecx
c0016e95:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016e98:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016e9c:	89 d1                	mov    ecx,edx
c0016e9e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016ea2:	c1 e1 08             	shl    ecx,0x8
c0016ea5:	09 ca                	or     edx,ecx
c0016ea7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016eaa:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016eae:	89 d1                	mov    ecx,edx
c0016eb0:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016eb4:	c1 e1 08             	shl    ecx,0x8
c0016eb7:	09 ca                	or     edx,ecx
c0016eb9:	81 ca 00 02 02 00    	or     edx,0x20200
c0016ebf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016ec2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016ec6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ecc:	d1 e8                	shr    eax,1
c0016ece:	83 e0 01             	and    eax,0x1
c0016ed1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ed4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ed7:	83 c0 06             	add    eax,0x6
c0016eda:	25 ff ff 00 00       	and    eax,0xffff
c0016edf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016ee2:	e9 19 05 00 00       	jmp    c0017400 <Vm::faultHandler(regs*)+0x6b8>
c0016ee7:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016eed:	0f 84 8f 04 00 00    	je     c0017382 <Vm::faultHandler(regs*)+0x63a>
c0016ef3:	0f 82 60 04 00 00    	jb     c0017359 <Vm::faultHandler(regs*)+0x611>
c0016ef9:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016eff:	0f 84 94 04 00 00    	je     c0017399 <Vm::faultHandler(regs*)+0x651>
c0016f05:	e9 fa 04 00 00       	jmp    c0017404 <Vm::faultHandler(regs*)+0x6bc>
c0016f0a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016f10:	0f 84 d7 04 00 00    	je     c00173ed <Vm::faultHandler(regs*)+0x6a5>
c0016f16:	77 2e                	ja     c0016f46 <Vm::faultHandler(regs*)+0x1fe>
c0016f18:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016f1e:	0f 84 a4 04 00 00    	je     c00173c8 <Vm::faultHandler(regs*)+0x680>
c0016f24:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016f2a:	0f 85 d4 04 00 00    	jne    c0017404 <Vm::faultHandler(regs*)+0x6bc>
c0016f30:	50                   	push   eax
c0016f31:	50                   	push   eax
c0016f32:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016f36:	50                   	push   eax
c0016f37:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f3b:	50                   	push   eax
c0016f3c:	e8 17 f9 ff ff       	call   c0016858 <Vm::outbv(unsigned short, unsigned char)>
c0016f41:	e9 9f 04 00 00       	jmp    c00173e5 <Vm::faultHandler(regs*)+0x69d>
c0016f46:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016f4c:	0f 84 6d 01 00 00    	je     c00170bf <Vm::faultHandler(regs*)+0x377>
c0016f52:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016f58:	0f 84 6f 01 00 00    	je     c00170cd <Vm::faultHandler(regs*)+0x385>
c0016f5e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016f64:	0f 85 9a 04 00 00    	jne    c0017404 <Vm::faultHandler(regs*)+0x6bc>
c0016f6a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f6d:	e9 76 fe ff ff       	jmp    c0016de8 <Vm::faultHandler(regs*)+0xa0>
c0016f72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f75:	be 02 00 00 00       	mov    esi,0x2
c0016f7a:	e9 69 fe ff ff       	jmp    c0016de8 <Vm::faultHandler(regs*)+0xa0>
c0016f7f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f82:	be 03 00 00 00       	mov    esi,0x3
c0016f87:	e9 5c fe ff ff       	jmp    c0016de8 <Vm::faultHandler(regs*)+0xa0>
c0016f8c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f8f:	be 04 00 00 00       	mov    esi,0x4
c0016f94:	e9 4f fe ff ff       	jmp    c0016de8 <Vm::faultHandler(regs*)+0xa0>
c0016f99:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f9c:	be 05 00 00 00       	mov    esi,0x5
c0016fa1:	e9 42 fe ff ff       	jmp    c0016de8 <Vm::faultHandler(regs*)+0xa0>
c0016fa6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fa9:	bd 01 00 00 00       	mov    ebp,0x1
c0016fae:	e9 35 fe ff ff       	jmp    c0016de8 <Vm::faultHandler(regs*)+0xa0>
c0016fb3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016fb6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016fbb:	e9 28 fe ff ff       	jmp    c0016de8 <Vm::faultHandler(regs*)+0xa0>
c0016fc0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016fc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016fc7:	83 e5 01             	and    ebp,0x1
c0016fca:	74 30                	je     c0016ffc <Vm::faultHandler(regs*)+0x2b4>
c0016fcc:	83 e9 04             	sub    ecx,0x4
c0016fcf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016fd5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016fdb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016fde:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016fe1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016fe7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016feb:	0f 84 0c 04 00 00    	je     c00173fd <Vm::faultHandler(regs*)+0x6b5>
c0016ff1:	80 ce 02             	or     dh,0x2
c0016ff4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ff7:	e9 01 04 00 00       	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c0016ffc:	83 e9 02             	sub    ecx,0x2
c0016fff:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017005:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017008:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001700c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017012:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017016:	74 05                	je     c001701d <Vm::faultHandler(regs*)+0x2d5>
c0017018:	80 ce 02             	or     dh,0x2
c001701b:	eb 03                	jmp    c0017020 <Vm::faultHandler(regs*)+0x2d8>
c001701d:	80 e6 fd             	and    dh,0xfd
c0017020:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017024:	e9 d4 03 00 00       	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c0017029:	83 e5 01             	and    ebp,0x1
c001702c:	74 2a                	je     c0017058 <Vm::faultHandler(regs*)+0x310>
c001702e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017030:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017036:	81 ca 00 02 02 00    	or     edx,0x20200
c001703c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001703f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017041:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017047:	c1 e8 09             	shr    eax,0x9
c001704a:	83 e0 01             	and    eax,0x1
c001704d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017050:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017053:	83 c0 04             	add    eax,0x4
c0017056:	eb 24                	jmp    c001707c <Vm::faultHandler(regs*)+0x334>
c0017058:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001705b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017061:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017064:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017067:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001706d:	c1 e8 09             	shr    eax,0x9
c0017070:	83 e0 01             	and    eax,0x1
c0017073:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017076:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017079:	83 c0 02             	add    eax,0x2
c001707c:	25 ff ff 00 00       	and    eax,0xffff
c0017081:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017084:	e9 74 03 00 00       	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c0017089:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001708d:	3d ee 00 00 00       	cmp    eax,0xee
c0017092:	75 10                	jne    c00170a4 <Vm::faultHandler(regs*)+0x35c>
c0017094:	83 ec 0c             	sub    esp,0xc
c0017097:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001709a:	e8 56 f8 ff ff       	call   c00168f5 <Vm::mainloop3(unsigned long)>
c001709f:	e9 44 03 00 00       	jmp    c00173e8 <Vm::faultHandler(regs*)+0x6a0>
c00170a4:	83 ec 0c             	sub    esp,0xc
c00170a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00170ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170af:	51                   	push   ecx
c00170b0:	50                   	push   eax
c00170b1:	53                   	push   ebx
c00170b2:	e8 84 fb ff ff       	call   c0016c3b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00170b7:	83 c4 20             	add    esp,0x20
c00170ba:	e9 41 03 00 00       	jmp    c0017400 <Vm::faultHandler(regs*)+0x6b8>
c00170bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170c4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00170c8:	e9 30 03 00 00       	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c00170cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170d2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00170d6:	e9 22 03 00 00       	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c00170db:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00170de:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170e3:	74 2b                	je     c0017110 <Vm::faultHandler(regs*)+0x3c8>
c00170e5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00170ec:	76 22                	jbe    c0017110 <Vm::faultHandler(regs*)+0x3c8>
c00170ee:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170f2:	50                   	push   eax
c00170f3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170f7:	50                   	push   eax
c00170f8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170fc:	50                   	push   eax
c00170fd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017101:	50                   	push   eax
c0017102:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017106:	50                   	push   eax
c0017107:	6a 6c                	push   0x6c
c0017109:	6a 6c                	push   0x6c
c001710b:	e9 bd 01 00 00       	jmp    c00172cd <Vm::faultHandler(regs*)+0x585>
c0017110:	83 ec 0c             	sub    esp,0xc
c0017113:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017117:	0f b7 f6             	movzx  esi,si
c001711a:	50                   	push   eax
c001711b:	e8 25 f7 ff ff       	call   c0016845 <Vm::inbv(unsigned short)>
c0017120:	83 c4 0c             	add    esp,0xc
c0017123:	0f b6 c0             	movzx  eax,al
c0017126:	50                   	push   eax
c0017127:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001712b:	50                   	push   eax
c001712c:	56                   	push   esi
c001712d:	e8 d6 fb ff ff       	call   c0016d08 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017138:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001713c:	74 03                	je     c0017141 <Vm::faultHandler(regs*)+0x3f9>
c001713e:	48                   	dec    eax
c001713f:	eb 01                	jmp    c0017142 <Vm::faultHandler(regs*)+0x3fa>
c0017141:	40                   	inc    eax
c0017142:	0f b7 c0             	movzx  eax,ax
c0017145:	e9 8b 00 00 00       	jmp    c00171d5 <Vm::faultHandler(regs*)+0x48d>
c001714a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001714d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017150:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017155:	74 29                	je     c0017180 <Vm::faultHandler(regs*)+0x438>
c0017157:	3d ff ff 00 00       	cmp    eax,0xffff
c001715c:	76 22                	jbe    c0017180 <Vm::faultHandler(regs*)+0x438>
c001715e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017162:	50                   	push   eax
c0017163:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017167:	50                   	push   eax
c0017168:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001716c:	50                   	push   eax
c001716d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017171:	50                   	push   eax
c0017172:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017176:	50                   	push   eax
c0017177:	6a 6d                	push   0x6d
c0017179:	6a 6d                	push   0x6d
c001717b:	e9 4d 01 00 00       	jmp    c00172cd <Vm::faultHandler(regs*)+0x585>
c0017180:	0f b7 c8             	movzx  ecx,ax
c0017183:	0f b7 f6             	movzx  esi,si
c0017186:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017189:	83 e5 01             	and    ebp,0x1
c001718c:	74 20                	je     c00171ae <Vm::faultHandler(regs*)+0x466>
c001718e:	ed                   	in     eax,dx
c001718f:	55                   	push   ebp
c0017190:	50                   	push   eax
c0017191:	51                   	push   ecx
c0017192:	56                   	push   esi
c0017193:	e8 9b fb ff ff       	call   c0016d33 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017198:	83 c4 10             	add    esp,0x10
c001719b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001719e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171a2:	74 05                	je     c00171a9 <Vm::faultHandler(regs*)+0x461>
c00171a4:	83 e8 04             	sub    eax,0x4
c00171a7:	eb 27                	jmp    c00171d0 <Vm::faultHandler(regs*)+0x488>
c00171a9:	83 c0 04             	add    eax,0x4
c00171ac:	eb 22                	jmp    c00171d0 <Vm::faultHandler(regs*)+0x488>
c00171ae:	66 ed                	in     ax,dx
c00171b0:	0f b7 c0             	movzx  eax,ax
c00171b3:	57                   	push   edi
c00171b4:	50                   	push   eax
c00171b5:	51                   	push   ecx
c00171b6:	56                   	push   esi
c00171b7:	e8 61 fb ff ff       	call   c0016d1d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00171c2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171c6:	74 05                	je     c00171cd <Vm::faultHandler(regs*)+0x485>
c00171c8:	83 e8 02             	sub    eax,0x2
c00171cb:	eb 03                	jmp    c00171d0 <Vm::faultHandler(regs*)+0x488>
c00171cd:	83 c0 02             	add    eax,0x2
c00171d0:	25 ff ff 00 00       	and    eax,0xffff
c00171d5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00171d8:	e9 20 02 00 00       	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c00171dd:	8d 46 ff             	lea    eax,[esi-0x1]
c00171e0:	0f b6 f0             	movzx  esi,al
c00171e3:	83 fe 05             	cmp    esi,0x5
c00171e6:	77 23                	ja     c001720b <Vm::faultHandler(regs*)+0x4c3>
c00171e8:	ff 24 b5 4c 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd9b4]
c00171ef:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00171f4:	eb 15                	jmp    c001720b <Vm::faultHandler(regs*)+0x4c3>
c00171f6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00171fa:	eb 0f                	jmp    c001720b <Vm::faultHandler(regs*)+0x4c3>
c00171fc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017200:	eb 09                	jmp    c001720b <Vm::faultHandler(regs*)+0x4c3>
c0017202:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017206:	eb 03                	jmp    c001720b <Vm::faultHandler(regs*)+0x4c3>
c0017208:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001720b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001720e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017213:	74 29                	je     c001723e <Vm::faultHandler(regs*)+0x4f6>
c0017215:	3d ff ff 00 00       	cmp    eax,0xffff
c001721a:	76 22                	jbe    c001723e <Vm::faultHandler(regs*)+0x4f6>
c001721c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017220:	50                   	push   eax
c0017221:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017225:	50                   	push   eax
c0017226:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001722a:	50                   	push   eax
c001722b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001722f:	50                   	push   eax
c0017230:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017234:	50                   	push   eax
c0017235:	6a 6e                	push   0x6e
c0017237:	6a 6e                	push   0x6e
c0017239:	e9 8f 00 00 00       	jmp    c00172cd <Vm::faultHandler(regs*)+0x585>
c001723e:	0f b7 c0             	movzx  eax,ax
c0017241:	52                   	push   edx
c0017242:	52                   	push   edx
c0017243:	50                   	push   eax
c0017244:	57                   	push   edi
c0017245:	e8 8a fa ff ff       	call   c0016cd4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001724a:	59                   	pop    ecx
c001724b:	0f b6 c0             	movzx  eax,al
c001724e:	5e                   	pop    esi
c001724f:	50                   	push   eax
c0017250:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017254:	50                   	push   eax
c0017255:	e8 fe f5 ff ff       	call   c0016858 <Vm::outbv(unsigned short, unsigned char)>
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017260:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017264:	74 03                	je     c0017269 <Vm::faultHandler(regs*)+0x521>
c0017266:	48                   	dec    eax
c0017267:	eb 01                	jmp    c001726a <Vm::faultHandler(regs*)+0x522>
c0017269:	40                   	inc    eax
c001726a:	0f b7 c0             	movzx  eax,ax
c001726d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017270:	e9 88 01 00 00       	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c0017275:	8d 46 ff             	lea    eax,[esi-0x1]
c0017278:	0f b6 f0             	movzx  esi,al
c001727b:	83 fe 05             	cmp    esi,0x5
c001727e:	77 1e                	ja     c001729e <Vm::faultHandler(regs*)+0x556>
c0017280:	ff 24 b5 64 26 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd99c]
c0017287:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001728b:	eb 11                	jmp    c001729e <Vm::faultHandler(regs*)+0x556>
c001728d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017290:	eb 0c                	jmp    c001729e <Vm::faultHandler(regs*)+0x556>
c0017292:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017295:	eb 07                	jmp    c001729e <Vm::faultHandler(regs*)+0x556>
c0017297:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001729a:	eb 02                	jmp    c001729e <Vm::faultHandler(regs*)+0x556>
c001729c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001729e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00172a1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00172a6:	74 37                	je     c00172df <Vm::faultHandler(regs*)+0x597>
c00172a8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00172ae:	76 2f                	jbe    c00172df <Vm::faultHandler(regs*)+0x597>
c00172b0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172b4:	50                   	push   eax
c00172b5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172b9:	50                   	push   eax
c00172ba:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172be:	50                   	push   eax
c00172bf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172c3:	50                   	push   eax
c00172c4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172c8:	50                   	push   eax
c00172c9:	6a 6f                	push   0x6f
c00172cb:	6a 6f                	push   0x6f
c00172cd:	68 f0 25 02 c0       	push   0xc00225f0
c00172d2:	e8 6e 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00172d7:	83 c4 20             	add    esp,0x20
c00172da:	e9 83 01 00 00       	jmp    c0017462 <Vm::faultHandler(regs*)+0x71a>
c00172df:	0f b7 d7             	movzx  edx,di
c00172e2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00172e5:	0f b7 c6             	movzx  eax,si
c00172e8:	81 e1 00 04 00 00    	and    ecx,0x400
c00172ee:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00172f1:	83 e5 01             	and    ebp,0x1
c00172f4:	74 1d                	je     c0017313 <Vm::faultHandler(regs*)+0x5cb>
c00172f6:	55                   	push   ebp
c00172f7:	55                   	push   ebp
c00172f8:	50                   	push   eax
c00172f9:	52                   	push   edx
c00172fa:	e8 f8 f9 ff ff       	call   c0016cf7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00172ff:	83 c4 10             	add    esp,0x10
c0017302:	89 fa                	mov    edx,edi
c0017304:	ef                   	out    dx,eax
c0017305:	85 c9                	test   ecx,ecx
c0017307:	74 05                	je     c001730e <Vm::faultHandler(regs*)+0x5c6>
c0017309:	83 ee 04             	sub    esi,0x4
c001730c:	eb 21                	jmp    c001732f <Vm::faultHandler(regs*)+0x5e7>
c001730e:	83 c6 04             	add    esi,0x4
c0017311:	eb 1c                	jmp    c001732f <Vm::faultHandler(regs*)+0x5e7>
c0017313:	55                   	push   ebp
c0017314:	55                   	push   ebp
c0017315:	50                   	push   eax
c0017316:	52                   	push   edx
c0017317:	e8 c9 f9 ff ff       	call   c0016ce5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001731c:	83 c4 10             	add    esp,0x10
c001731f:	89 fa                	mov    edx,edi
c0017321:	66 ef                	out    dx,ax
c0017323:	85 c9                	test   ecx,ecx
c0017325:	74 05                	je     c001732c <Vm::faultHandler(regs*)+0x5e4>
c0017327:	83 ee 02             	sub    esi,0x2
c001732a:	eb 03                	jmp    c001732f <Vm::faultHandler(regs*)+0x5e7>
c001732c:	83 c6 02             	add    esi,0x2
c001732f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017335:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017338:	e9 c0 00 00 00       	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c001733d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017344:	83 ec 0c             	sub    esp,0xc
c0017347:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001734b:	50                   	push   eax
c001734c:	e8 f4 f4 ff ff       	call   c0016845 <Vm::inbv(unsigned short)>
c0017351:	0f b6 c0             	movzx  eax,al
c0017354:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017357:	eb 3a                	jmp    c0017393 <Vm::faultHandler(regs*)+0x64b>
c0017359:	83 e5 01             	and    ebp,0x1
c001735c:	74 07                	je     c0017365 <Vm::faultHandler(regs*)+0x61d>
c001735e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017362:	ed                   	in     eax,dx
c0017363:	eb 14                	jmp    c0017379 <Vm::faultHandler(regs*)+0x631>
c0017365:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017368:	66 31 f6             	xor    si,si
c001736b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001736e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017372:	66 ed                	in     ax,dx
c0017374:	0f b7 c0             	movzx  eax,ax
c0017377:	09 f0                	or     eax,esi
c0017379:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001737c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017380:	eb 7e                	jmp    c0017400 <Vm::faultHandler(regs*)+0x6b8>
c0017382:	52                   	push   edx
c0017383:	52                   	push   edx
c0017384:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017388:	50                   	push   eax
c0017389:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001738d:	50                   	push   eax
c001738e:	e8 c5 f4 ff ff       	call   c0016858 <Vm::outbv(unsigned short, unsigned char)>
c0017393:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017397:	eb 4f                	jmp    c00173e8 <Vm::faultHandler(regs*)+0x6a0>
c0017399:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001739c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00173a0:	83 e5 01             	and    ebp,0x1
c00173a3:	74 03                	je     c00173a8 <Vm::faultHandler(regs*)+0x660>
c00173a5:	ef                   	out    dx,eax
c00173a6:	eb d4                	jmp    c001737c <Vm::faultHandler(regs*)+0x634>
c00173a8:	66 ef                	out    dx,ax
c00173aa:	eb d0                	jmp    c001737c <Vm::faultHandler(regs*)+0x634>
c00173ac:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00173b3:	83 ec 0c             	sub    esp,0xc
c00173b6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173ba:	50                   	push   eax
c00173bb:	e8 85 f4 ff ff       	call   c0016845 <Vm::inbv(unsigned short)>
c00173c0:	0f b6 c0             	movzx  eax,al
c00173c3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00173c6:	eb 1d                	jmp    c00173e5 <Vm::faultHandler(regs*)+0x69d>
c00173c8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00173cb:	83 e5 01             	and    ebp,0x1
c00173ce:	74 03                	je     c00173d3 <Vm::faultHandler(regs*)+0x68b>
c00173d0:	ed                   	in     eax,dx
c00173d1:	eb 0d                	jmp    c00173e0 <Vm::faultHandler(regs*)+0x698>
c00173d3:	66 ed                	in     ax,dx
c00173d5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00173d8:	0f b7 c0             	movzx  eax,ax
c00173db:	66 31 d2             	xor    dx,dx
c00173de:	09 d0                	or     eax,edx
c00173e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00173e3:	eb 18                	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c00173e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173e8:	83 c4 10             	add    esp,0x10
c00173eb:	eb 13                	jmp    c0017400 <Vm::faultHandler(regs*)+0x6b8>
c00173ed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00173f0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00173f3:	83 e5 01             	and    ebp,0x1
c00173f6:	74 03                	je     c00173fb <Vm::faultHandler(regs*)+0x6b3>
c00173f8:	ef                   	out    dx,eax
c00173f9:	eb 02                	jmp    c00173fd <Vm::faultHandler(regs*)+0x6b5>
c00173fb:	66 ef                	out    dx,ax
c00173fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017400:	b0 01                	mov    al,0x1
c0017402:	eb 60                	jmp    c0017464 <Vm::faultHandler(regs*)+0x71c>
c0017404:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017408:	50                   	push   eax
c0017409:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001740d:	50                   	push   eax
c001740e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017412:	50                   	push   eax
c0017413:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017417:	50                   	push   eax
c0017418:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001741c:	50                   	push   eax
c001741d:	52                   	push   edx
c001741e:	52                   	push   edx
c001741f:	68 1d 26 02 c0       	push   0xc002261d
c0017424:	e8 1c 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017429:	83 c4 20             	add    esp,0x20
c001742c:	83 ec 0c             	sub    esp,0xc
c001742f:	6a 60                	push   0x60
c0017431:	e8 0f f4 ff ff       	call   c0016845 <Vm::inbv(unsigned short)>
c0017436:	83 c4 10             	add    esp,0x10
c0017439:	0f b6 d0             	movzx  edx,al
c001743c:	83 fa 1c             	cmp    edx,0x1c
c001743f:	74 05                	je     c0017446 <Vm::faultHandler(regs*)+0x6fe>
c0017441:	83 fa 5a             	cmp    edx,0x5a
c0017444:	75 e6                	jne    c001742c <Vm::faultHandler(regs*)+0x6e4>
c0017446:	0f b6 c0             	movzx  eax,al
c0017449:	83 f8 1c             	cmp    eax,0x1c
c001744c:	74 05                	je     c0017453 <Vm::faultHandler(regs*)+0x70b>
c001744e:	83 f8 5a             	cmp    eax,0x5a
c0017451:	75 0f                	jne    c0017462 <Vm::faultHandler(regs*)+0x71a>
c0017453:	83 ec 0c             	sub    esp,0xc
c0017456:	6a 60                	push   0x60
c0017458:	e8 e8 f3 ff ff       	call   c0016845 <Vm::inbv(unsigned short)>
c001745d:	83 c4 10             	add    esp,0x10
c0017460:	eb e4                	jmp    c0017446 <Vm::faultHandler(regs*)+0x6fe>
c0017462:	31 c0                	xor    eax,eax
c0017464:	83 c4 2c             	add    esp,0x2c
c0017467:	5b                   	pop    ebx
c0017468:	5e                   	pop    esi
c0017469:	5f                   	pop    edi
c001746a:	5d                   	pop    ebp
c001746b:	c3                   	ret    

c001746c <noCopro(unsigned long)>:
c001746c:	c3                   	ret    

c001746d <nmiHandler(regs*, void*)>:
c001746d:	83 ec 0c             	sub    esp,0xc
c0017470:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017475:	83 ec 0c             	sub    esp,0xc
c0017478:	50                   	push   eax
c0017479:	e8 38 fe fe ff       	call   c00072b6 <Computer::handleNMI()>
c001747e:	83 c4 10             	add    esp,0x10
c0017481:	90                   	nop
c0017482:	83 c4 0c             	add    esp,0xc
c0017485:	c3                   	ret    

c0017486 <doubleFault(regs*, void*)>:
c0017486:	55                   	push   ebp
c0017487:	89 e5                	mov    ebp,esp
c0017489:	83 ec 08             	sub    esp,0x8
c001748c:	83 ec 0c             	sub    esp,0xc
c001748f:	68 7c 26 02 c0       	push   0xc002267c
c0017494:	e8 08 9f ff ff       	call   c00113a1 <KePanic(char const*)>
c0017499:	83 c4 10             	add    esp,0x10
c001749c:	90                   	nop
c001749d:	c9                   	leave  
c001749e:	c3                   	ret    

c001749f <displayDebugInfo(regs*)>:
c001749f:	83 ec 1c             	sub    esp,0x1c
c00174a2:	0f 20 c0             	mov    eax,cr0
c00174a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174a9:	0f 20 d0             	mov    eax,cr2
c00174ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174b0:	0f 20 d8             	mov    eax,cr3
c00174b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174b7:	0f 20 e0             	mov    eax,cr4
c00174ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00174bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174c1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00174c4:	83 ec 08             	sub    esp,0x8
c00174c7:	50                   	push   eax
c00174c8:	68 98 26 02 c0       	push   0xc0022698
c00174cd:	e8 73 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174d2:	83 c4 10             	add    esp,0x10
c00174d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174d9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00174dc:	83 ec 08             	sub    esp,0x8
c00174df:	50                   	push   eax
c00174e0:	68 89 26 02 c0       	push   0xc0022689
c00174e5:	e8 5b 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174ea:	83 c4 10             	add    esp,0x10
c00174ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174f1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00174f4:	83 ec 08             	sub    esp,0x8
c00174f7:	50                   	push   eax
c00174f8:	68 94 26 02 c0       	push   0xc0022694
c00174fd:	e8 43 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017502:	83 c4 10             	add    esp,0x10
c0017505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017509:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001750c:	83 ec 08             	sub    esp,0x8
c001750f:	50                   	push   eax
c0017510:	68 a3 26 02 c0       	push   0xc00226a3
c0017515:	e8 2b 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001751a:	83 c4 10             	add    esp,0x10
c001751d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017521:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017524:	83 ec 08             	sub    esp,0x8
c0017527:	50                   	push   eax
c0017528:	68 ae 26 02 c0       	push   0xc00226ae
c001752d:	e8 13 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017532:	83 c4 10             	add    esp,0x10
c0017535:	83 ec 08             	sub    esp,0x8
c0017538:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001753c:	68 b9 26 02 c0       	push   0xc00226b9
c0017541:	e8 ff 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017546:	83 c4 10             	add    esp,0x10
c0017549:	83 ec 08             	sub    esp,0x8
c001754c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017550:	68 c4 26 02 c0       	push   0xc00226c4
c0017555:	e8 eb 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001755a:	83 c4 10             	add    esp,0x10
c001755d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017561:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017564:	c1 e0 05             	shl    eax,0x5
c0017567:	8d 90 40 36 02 c0    	lea    edx,[eax-0x3ffdc9c0]
c001756d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017571:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017574:	83 ec 04             	sub    esp,0x4
c0017577:	52                   	push   edx
c0017578:	50                   	push   eax
c0017579:	68 cf 26 02 c0       	push   0xc00226cf
c001757e:	e8 c2 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017583:	83 c4 10             	add    esp,0x10
c0017586:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001758b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017591:	83 ec 0c             	sub    esp,0xc
c0017594:	50                   	push   eax
c0017595:	e8 bf 11 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001759a:	83 c4 10             	add    esp,0x10
c001759d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175a2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175a8:	83 ec 08             	sub    esp,0x8
c00175ab:	68 de 26 02 c0       	push   0xc00226de
c00175b0:	50                   	push   eax
c00175b1:	e8 f0 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175b6:	83 c4 10             	add    esp,0x10
c00175b9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175be:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175c8:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00175cb:	83 ec 08             	sub    esp,0x8
c00175ce:	52                   	push   edx
c00175cf:	50                   	push   eax
c00175d0:	e8 8b 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175d5:	83 c4 10             	add    esp,0x10
c00175d8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175e3:	83 ec 08             	sub    esp,0x8
c00175e6:	68 ec 26 02 c0       	push   0xc00226ec
c00175eb:	50                   	push   eax
c00175ec:	e8 b5 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175f1:	83 c4 10             	add    esp,0x10
c00175f4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ff:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017604:	8b 12                	mov    edx,DWORD PTR [edx]
c0017606:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017609:	83 c2 0c             	add    edx,0xc
c001760c:	83 ec 08             	sub    esp,0x8
c001760f:	52                   	push   edx
c0017610:	50                   	push   eax
c0017611:	e8 90 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017616:	83 c4 10             	add    esp,0x10
c0017619:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001761e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017624:	83 ec 08             	sub    esp,0x8
c0017627:	68 f5 26 02 c0       	push   0xc00226f5
c001762c:	50                   	push   eax
c001762d:	e8 74 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017632:	83 c4 10             	add    esp,0x10
c0017635:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001763a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017640:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017644:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017647:	83 ec 08             	sub    esp,0x8
c001764a:	52                   	push   edx
c001764b:	50                   	push   eax
c001764c:	e8 0f 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017651:	83 c4 10             	add    esp,0x10
c0017654:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017659:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001765f:	83 ec 08             	sub    esp,0x8
c0017662:	68 fd 26 02 c0       	push   0xc00226fd
c0017667:	50                   	push   eax
c0017668:	e8 39 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001766d:	83 c4 10             	add    esp,0x10
c0017670:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017675:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001767b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001767f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017682:	83 ec 08             	sub    esp,0x8
c0017685:	52                   	push   edx
c0017686:	50                   	push   eax
c0017687:	e8 d4 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001768c:	83 c4 10             	add    esp,0x10
c001768f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017694:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001769a:	83 ec 08             	sub    esp,0x8
c001769d:	68 05 27 02 c0       	push   0xc0022705
c00176a2:	50                   	push   eax
c00176a3:	e8 fe 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176a8:	83 c4 10             	add    esp,0x10
c00176ab:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176b0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176ba:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00176bd:	83 ec 08             	sub    esp,0x8
c00176c0:	52                   	push   edx
c00176c1:	50                   	push   eax
c00176c2:	e8 99 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176c7:	83 c4 10             	add    esp,0x10
c00176ca:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d5:	83 ec 08             	sub    esp,0x8
c00176d8:	68 0d 27 02 c0       	push   0xc002270d
c00176dd:	50                   	push   eax
c00176de:	e8 c3 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176e3:	83 c4 10             	add    esp,0x10
c00176e6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176f5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00176f8:	83 ec 08             	sub    esp,0x8
c00176fb:	52                   	push   edx
c00176fc:	50                   	push   eax
c00176fd:	e8 5e 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017702:	83 c4 10             	add    esp,0x10
c0017705:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001770a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017710:	83 ec 08             	sub    esp,0x8
c0017713:	68 15 27 02 c0       	push   0xc0022715
c0017718:	50                   	push   eax
c0017719:	e8 88 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001771e:	83 c4 10             	add    esp,0x10
c0017721:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017726:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001772c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017730:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017733:	83 ec 08             	sub    esp,0x8
c0017736:	52                   	push   edx
c0017737:	50                   	push   eax
c0017738:	e8 23 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017745:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001774b:	83 ec 08             	sub    esp,0x8
c001774e:	68 1d 27 02 c0       	push   0xc002271d
c0017753:	50                   	push   eax
c0017754:	e8 4d 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017759:	83 c4 10             	add    esp,0x10
c001775c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017761:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017767:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001776b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001776e:	83 ec 08             	sub    esp,0x8
c0017771:	52                   	push   edx
c0017772:	50                   	push   eax
c0017773:	e8 e8 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017780:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017786:	83 ec 08             	sub    esp,0x8
c0017789:	68 25 27 02 c0       	push   0xc0022725
c001778e:	50                   	push   eax
c001778f:	e8 12 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001779c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177a2:	83 ec 08             	sub    esp,0x8
c00177a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00177a9:	50                   	push   eax
c00177aa:	e8 b1 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177af:	83 c4 10             	add    esp,0x10
c00177b2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177bd:	83 ec 08             	sub    esp,0x8
c00177c0:	68 2e 27 02 c0       	push   0xc002272e
c00177c5:	50                   	push   eax
c00177c6:	e8 db 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177cb:	83 c4 10             	add    esp,0x10
c00177ce:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177d9:	83 ec 08             	sub    esp,0x8
c00177dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00177e0:	50                   	push   eax
c00177e1:	e8 7a 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177e6:	83 c4 10             	add    esp,0x10
c00177e9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177f4:	83 ec 08             	sub    esp,0x8
c00177f7:	68 36 27 02 c0       	push   0xc0022736
c00177fc:	50                   	push   eax
c00177fd:	e8 a4 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017802:	83 c4 10             	add    esp,0x10
c0017805:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001780a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017810:	83 ec 08             	sub    esp,0x8
c0017813:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017817:	50                   	push   eax
c0017818:	e8 43 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001781d:	83 c4 10             	add    esp,0x10
c0017820:	fa                   	cli    
c0017821:	f4                   	hlt    
c0017822:	eb fe                	jmp    c0017822 <displayDebugInfo(regs*)+0x383>

c0017824 <HalSystemIdle()>:
c0017824:	56                   	push   esi
c0017825:	53                   	push   ebx
c0017826:	83 ec 14             	sub    esp,0x14
c0017829:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001782e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017834:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001783a:	83 e0 04             	and    eax,0x4
c001783d:	0f b6 c0             	movzx  eax,al
c0017840:	85 c0                	test   eax,eax
c0017842:	0f 95 c0             	setne  al
c0017845:	0f b6 c0             	movzx  eax,al
c0017848:	85 c0                	test   eax,eax
c001784a:	74 4c                	je     c0017898 <HalSystemIdle()+0x74>
c001784c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017851:	83 ec 08             	sub    esp,0x8
c0017854:	68 e1 00 00 00       	push   0xe1
c0017859:	50                   	push   eax
c001785a:	e8 61 f8 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001785f:	83 c4 10             	add    esp,0x10
c0017862:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017866:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001786a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001786f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017873:	83 e2 02             	and    edx,0x2
c0017876:	89 d3                	mov    ebx,edx
c0017878:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001787c:	83 e2 00             	and    edx,0x0
c001787f:	89 d6                	mov    esi,edx
c0017881:	56                   	push   esi
c0017882:	53                   	push   ebx
c0017883:	68 e1 00 00 00       	push   0xe1
c0017888:	50                   	push   eax
c0017889:	e8 5e f8 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c001788e:	83 c4 10             	add    esp,0x10
c0017891:	e8 fe 88 fe ff       	call   c0000194 <doTPAUSE>
c0017896:	eb 01                	jmp    c0017899 <HalSystemIdle()+0x75>
c0017898:	f4                   	hlt    
c0017899:	90                   	nop
c001789a:	83 c4 14             	add    esp,0x14
c001789d:	5b                   	pop    ebx
c001789e:	5e                   	pop    esi
c001789f:	c3                   	ret    

c00178a0 <displayProgramFault(char const*)>:
c00178a0:	83 ec 0c             	sub    esp,0xc
c00178a3:	83 ec 0c             	sub    esp,0xc
c00178a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178aa:	e8 96 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178af:	83 c4 10             	add    esp,0x10
c00178b2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00178b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178c2:	85 c0                	test   eax,eax
c00178c4:	74 21                	je     c00178e7 <displayProgramFault(char const*)+0x47>
c00178c6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00178cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178d6:	6a 04                	push   0x4
c00178d8:	6a 0f                	push   0xf
c00178da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178de:	50                   	push   eax
c00178df:	e8 34 12 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00178e4:	83 c4 10             	add    esp,0x10
c00178e7:	90                   	nop
c00178e8:	83 c4 0c             	add    esp,0xc
c00178eb:	c3                   	ret    

c00178ec <gpFault(regs*, void*)>:
c00178ec:	83 ec 1c             	sub    esp,0x1c
c00178ef:	c7 05 74 97 02 c0 48 6d 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016d48
c00178f9:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00178fe:	85 c0                	test   eax,eax
c0017900:	74 1e                	je     c0017920 <gpFault(regs*, void*)+0x34>
c0017902:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017907:	83 ec 0c             	sub    esp,0xc
c001790a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001790e:	ff d0                	call   eax
c0017910:	83 c4 10             	add    esp,0x10
c0017913:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017917:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001791c:	85 c0                	test   eax,eax
c001791e:	75 2e                	jne    c001794e <gpFault(regs*, void*)+0x62>
c0017920:	83 ec 0c             	sub    esp,0xc
c0017923:	68 3e 27 02 c0       	push   0xc002273e
c0017928:	e8 73 ff ff ff       	call   c00178a0 <displayProgramFault(char const*)>
c001792d:	83 c4 10             	add    esp,0x10
c0017930:	83 ec 0c             	sub    esp,0xc
c0017933:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017937:	e8 63 fb ff ff       	call   c001749f <displayDebugInfo(regs*)>
c001793c:	83 c4 10             	add    esp,0x10
c001793f:	83 ec 0c             	sub    esp,0xc
c0017942:	6a 00                	push   0x0
c0017944:	e8 a3 ed ff ff       	call   c00166ec <Thr::terminateFromIRQ(int)>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	eb 01                	jmp    c001794f <gpFault(regs*, void*)+0x63>
c001794e:	90                   	nop
c001794f:	83 c4 1c             	add    esp,0x1c
c0017952:	c3                   	ret    

c0017953 <pgFault(regs*, void*)>:
c0017953:	83 ec 1c             	sub    esp,0x1c
c0017956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001795a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001795d:	0f 20 d0             	mov    eax,cr2
c0017960:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017968:	83 ec 04             	sub    esp,0x4
c001796b:	52                   	push   edx
c001796c:	50                   	push   eax
c001796d:	68 1c 28 02 c0       	push   0xc002281c
c0017972:	e8 ce 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001797f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017981:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017984:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001798a:	0f 20 d2             	mov    edx,cr2
c001798d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017991:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017995:	83 ec 08             	sub    esp,0x8
c0017998:	52                   	push   edx
c0017999:	50                   	push   eax
c001799a:	e8 f1 29 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c001799f:	83 c4 10             	add    esp,0x10
c00179a2:	0f b6 c0             	movzx  eax,al
c00179a5:	85 c0                	test   eax,eax
c00179a7:	75 2e                	jne    c00179d7 <pgFault(regs*, void*)+0x84>
c00179a9:	83 ec 0c             	sub    esp,0xc
c00179ac:	68 57 27 02 c0       	push   0xc0022757
c00179b1:	e8 ea fe ff ff       	call   c00178a0 <displayProgramFault(char const*)>
c00179b6:	83 c4 10             	add    esp,0x10
c00179b9:	83 ec 0c             	sub    esp,0xc
c00179bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179c0:	e8 da fa ff ff       	call   c001749f <displayDebugInfo(regs*)>
c00179c5:	83 c4 10             	add    esp,0x10
c00179c8:	83 ec 0c             	sub    esp,0xc
c00179cb:	6a 00                	push   0x0
c00179cd:	e8 1a ed ff ff       	call   c00166ec <Thr::terminateFromIRQ(int)>
c00179d2:	83 c4 10             	add    esp,0x10
c00179d5:	eb 01                	jmp    c00179d8 <pgFault(regs*, void*)+0x85>
c00179d7:	90                   	nop
c00179d8:	83 c4 1c             	add    esp,0x1c
c00179db:	c3                   	ret    

c00179dc <otherISRHandler(regs*, void*)>:
c00179dc:	83 ec 0c             	sub    esp,0xc
c00179df:	83 ec 0c             	sub    esp,0xc
c00179e2:	68 44 28 02 c0       	push   0xc0022844
c00179e7:	e8 b4 fe ff ff       	call   c00178a0 <displayProgramFault(char const*)>
c00179ec:	83 c4 10             	add    esp,0x10
c00179ef:	83 ec 0c             	sub    esp,0xc
c00179f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179f6:	e8 a4 fa ff ff       	call   c001749f <displayDebugInfo(regs*)>
c00179fb:	83 c4 10             	add    esp,0x10
c00179fe:	83 ec 0c             	sub    esp,0xc
c0017a01:	6a 00                	push   0x0
c0017a03:	e8 e4 ec ff ff       	call   c00166ec <Thr::terminateFromIRQ(int)>
c0017a08:	83 c4 10             	add    esp,0x10
c0017a0b:	90                   	nop
c0017a0c:	83 c4 0c             	add    esp,0xc
c0017a0f:	c3                   	ret    

c0017a10 <opcodeFault(regs*, void*)>:
c0017a10:	55                   	push   ebp
c0017a11:	89 e5                	mov    ebp,esp
c0017a13:	83 ec 08             	sub    esp,0x8
c0017a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a1c:	83 ec 08             	sub    esp,0x8
c0017a1f:	50                   	push   eax
c0017a20:	68 62 27 02 c0       	push   0xc0022762
c0017a25:	e8 1b 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a2a:	83 c4 10             	add    esp,0x10
c0017a2d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017a32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017a38:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017a3e:	0f b6 c0             	movzx  eax,al
c0017a41:	85 c0                	test   eax,eax
c0017a43:	74 21                	je     c0017a66 <opcodeFault(regs*, void*)+0x56>
c0017a45:	83 ec 0c             	sub    esp,0xc
c0017a48:	68 6c 28 02 c0       	push   0xc002286c
c0017a4d:	e8 f3 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a5b:	8d 50 19             	lea    edx,[eax+0x19]
c0017a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a61:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017a64:	eb 2b                	jmp    c0017a91 <opcodeFault(regs*, void*)+0x81>
c0017a66:	83 ec 0c             	sub    esp,0xc
c0017a69:	68 70 27 02 c0       	push   0xc0022770
c0017a6e:	e8 2d fe ff ff       	call   c00178a0 <displayProgramFault(char const*)>
c0017a73:	83 c4 10             	add    esp,0x10
c0017a76:	83 ec 0c             	sub    esp,0xc
c0017a79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017a7c:	e8 1e fa ff ff       	call   c001749f <displayDebugInfo(regs*)>
c0017a81:	83 c4 10             	add    esp,0x10
c0017a84:	83 ec 0c             	sub    esp,0xc
c0017a87:	6a 00                	push   0x0
c0017a89:	e8 5e ec ff ff       	call   c00166ec <Thr::terminateFromIRQ(int)>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	c9                   	leave  
c0017a92:	c3                   	ret    

c0017a93 <i386SaveCoprocessor(void*)>:
c0017a93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a97:	83 c0 3f             	add    eax,0x3f
c0017a9a:	83 e0 c0             	and    eax,0xffffffc0
c0017a9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017aa1:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017aa7 <i386LoadCoprocessor(void*)>:
c0017aa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017aab:	83 c0 3f             	add    eax,0x3f
c0017aae:	83 e0 c0             	and    eax,0xffffffc0
c0017ab1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ab5:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017abb <x87EmulHandler(regs*, void*)>:
c0017abb:	53                   	push   ebx
c0017abc:	83 ec 08             	sub    esp,0x8
c0017abf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ac4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ac8:	74 10                	je     c0017ada <x87EmulHandler(regs*, void*)+0x1f>
c0017aca:	83 ec 0c             	sub    esp,0xc
c0017acd:	68 7d 27 02 c0       	push   0xc002277d
c0017ad2:	e8 ca 98 ff ff       	call   c00113a1 <KePanic(char const*)>
c0017ad7:	83 c4 10             	add    esp,0x10
c0017ada:	0f 20 c0             	mov    eax,cr0
c0017add:	a8 08                	test   al,0x8
c0017adf:	74 59                	je     c0017b3a <x87EmulHandler(regs*, void*)+0x7f>
c0017ae1:	0f 06                	clts   
c0017ae3:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017ae8:	85 c0                	test   eax,eax
c0017aea:	74 0e                	je     c0017afa <x87EmulHandler(regs*, void*)+0x3f>
c0017aec:	83 ec 0c             	sub    esp,0xc
c0017aef:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017af2:	e8 9c ff ff ff       	call   c0017a93 <i386SaveCoprocessor(void*)>
c0017af7:	83 c4 10             	add    esp,0x10
c0017afa:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017b00:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017b04:	75 12                	jne    c0017b18 <x87EmulHandler(regs*, void*)+0x5d>
c0017b06:	83 ec 0c             	sub    esp,0xc
c0017b09:	68 40 02 00 00       	push   0x240
c0017b0e:	e8 a3 ff fe ff       	call   c0007ab6 <malloc>
c0017b13:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017b16:	eb 10                	jmp    c0017b28 <x87EmulHandler(regs*, void*)+0x6d>
c0017b18:	83 ec 0c             	sub    esp,0xc
c0017b1b:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017b20:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017b23:	e8 7f ff ff ff       	call   c0017aa7 <i386LoadCoprocessor(void*)>
c0017b28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b2d:	83 c4 10             	add    esp,0x10
c0017b30:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017b35:	83 c4 08             	add    esp,0x8
c0017b38:	5b                   	pop    ebx
c0017b39:	c3                   	ret    
c0017b3a:	83 ec 0c             	sub    esp,0xc
c0017b3d:	68 91 27 02 c0       	push   0xc0022791
c0017b42:	e8 fe 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017b47:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017b4f:	83 c4 18             	add    esp,0x18
c0017b52:	5b                   	pop    ebx
c0017b53:	e9 94 eb ff ff       	jmp    c00166ec <Thr::terminateFromIRQ(int)>

c0017b58 <HalInitialiseCoprocessor()>:
c0017b58:	83 ec 10             	sub    esp,0x10
c0017b5b:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017b65:	6a 00                	push   0x0
c0017b67:	68 bb 7a 01 c0       	push   0xc0017abb
c0017b6c:	6a 07                	push   0x7
c0017b6e:	e8 33 51 ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017b73:	e8 48 70 00 00       	call   c001ebc0 <avxDetect>
c0017b78:	83 c4 10             	add    esp,0x10
c0017b7b:	85 c0                	test   eax,eax
c0017b7d:	74 1c                	je     c0017b9b <HalInitialiseCoprocessor()+0x43>
c0017b7f:	c7 05 70 97 02 c0 ea eb 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ebea
c0017b89:	c7 05 6c 97 02 c0 fb eb 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ebfb
c0017b93:	83 c4 0c             	add    esp,0xc
c0017b96:	e9 71 70 00 00       	jmp    c001ec0c <avxInit>
c0017b9b:	e8 b0 73 00 00       	call   c001ef50 <absolutelyNoChanceInHell>
c0017ba0:	85 c0                	test   eax,eax
c0017ba2:	74 1c                	je     c0017bc0 <HalInitialiseCoprocessor()+0x68>
c0017ba4:	c7 05 70 97 02 c0 68 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef68
c0017bae:	c7 05 6c 97 02 c0 70 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef70
c0017bb8:	83 c4 0c             	add    esp,0xc
c0017bbb:	e9 b8 73 00 00       	jmp    c001ef78 <sseInit>
c0017bc0:	e8 d1 73 00 00       	call   c001ef96 <x87Detect>
c0017bc5:	85 c0                	test   eax,eax
c0017bc7:	74 1c                	je     c0017be5 <HalInitialiseCoprocessor()+0x8d>
c0017bc9:	c7 05 70 97 02 c0 b1 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001efb1
c0017bd3:	c7 05 6c 97 02 c0 b8 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001efb8
c0017bdd:	83 c4 0c             	add    esp,0xc
c0017be0:	e9 da 73 00 00       	jmp    c001efbf <x87Init>
c0017be5:	c7 05 70 97 02 c0 6c 74 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001746c
c0017bef:	c7 05 6c 97 02 c0 6c 74 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001746c
c0017bf9:	0f 20 c0             	mov    eax,cr0
c0017bfc:	83 c8 04             	or     eax,0x4
c0017bff:	0f 22 c0             	mov    cr0,eax
c0017c02:	83 c4 0c             	add    esp,0xc
c0017c05:	c3                   	ret    

c0017c06 <HalPanic(char const*)>:
c0017c06:	53                   	push   ebx
c0017c07:	83 ec 10             	sub    esp,0x10
c0017c0a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c0e:	fa                   	cli    
c0017c0f:	53                   	push   ebx
c0017c10:	68 a7 27 02 c0       	push   0xc00227a7
c0017c15:	e8 2b 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017c1a:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017c1f:	83 c4 10             	add    esp,0x10
c0017c22:	85 c0                	test   eax,eax
c0017c24:	74 09                	je     c0017c2f <HalPanic(char const*)+0x29>
c0017c26:	83 ec 0c             	sub    esp,0xc
c0017c29:	53                   	push   ebx
c0017c2a:	ff d0                	call   eax
c0017c2c:	83 c4 10             	add    esp,0x10
c0017c2f:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017c34:	85 c0                	test   eax,eax
c0017c36:	0f 84 dc 00 00 00    	je     c0017d18 <HalPanic(char const*)+0x112>
c0017c3c:	52                   	push   edx
c0017c3d:	6a 01                	push   0x1
c0017c3f:	6a 0f                	push   0xf
c0017c41:	50                   	push   eax
c0017c42:	e8 6d 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c47:	59                   	pop    ecx
c0017c48:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c4e:	e8 51 0b ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017c53:	58                   	pop    eax
c0017c54:	5a                   	pop    edx
c0017c55:	68 04 0a 02 c0       	push   0xc0020a04
c0017c5a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c60:	e8 87 09 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017c65:	83 c4 0c             	add    esp,0xc
c0017c68:	6a 01                	push   0x1
c0017c6a:	6a 0f                	push   0xf
c0017c6c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c72:	e8 3d 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c77:	59                   	pop    ecx
c0017c78:	58                   	pop    eax
c0017c79:	68 c0 27 02 c0       	push   0xc00227c0
c0017c7e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c84:	e8 1d 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c89:	83 c4 0c             	add    esp,0xc
c0017c8c:	6a 0f                	push   0xf
c0017c8e:	6a 01                	push   0x1
c0017c90:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c96:	e8 19 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c9b:	58                   	pop    eax
c0017c9c:	5a                   	pop    edx
c0017c9d:	68 c9 27 02 c0       	push   0xc00227c9
c0017ca2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ca8:	e8 f9 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cad:	83 c4 0c             	add    esp,0xc
c0017cb0:	6a 01                	push   0x1
c0017cb2:	6a 0f                	push   0xf
c0017cb4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cba:	e8 f5 08 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017cbf:	59                   	pop    ecx
c0017cc0:	58                   	pop    eax
c0017cc1:	68 0d 28 02 c0       	push   0xc002280d
c0017cc6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ccc:	e8 d5 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cd1:	58                   	pop    eax
c0017cd2:	5a                   	pop    edx
c0017cd3:	68 d6 27 02 c0       	push   0xc00227d6
c0017cd8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cde:	e8 c3 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ce3:	59                   	pop    ecx
c0017ce4:	58                   	pop    eax
c0017ce5:	68 10 28 02 c0       	push   0xc0022810
c0017cea:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cf0:	e8 b1 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017cf5:	58                   	pop    eax
c0017cf6:	5a                   	pop    edx
c0017cf7:	53                   	push   ebx
c0017cf8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017cfe:	e8 a3 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d03:	59                   	pop    ecx
c0017d04:	5b                   	pop    ebx
c0017d05:	68 0d 28 02 c0       	push   0xc002280d
c0017d0a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017d10:	e8 91 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d15:	83 c4 10             	add    esp,0x10
c0017d18:	eb fe                	jmp    c0017d18 <HalPanic(char const*)+0x112>

c0017d1a <HalQueryPerformanceCounter()>:
c0017d1a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d1f:	31 d2                	xor    edx,edx
c0017d21:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017d27:	31 c0                	xor    eax,eax
c0017d29:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017d30:	74 02                	je     c0017d34 <HalQueryPerformanceCounter()+0x1a>
c0017d32:	0f 31                	rdtsc  
c0017d34:	c3                   	ret    

c0017d35 <HalInitialise()>:
c0017d35:	53                   	push   ebx
c0017d36:	83 ec 08             	sub    esp,0x8
c0017d39:	e8 98 51 ff ff       	call   c000ced6 <setupINTS()>
c0017d3e:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017d45:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d4a:	75 0f                	jne    c0017d5b <HalInitialise()+0x26>
c0017d4c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d52:	83 e2 fe             	and    edx,0xfffffffe
c0017d55:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d5b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017d61:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017d68:	83 e2 fe             	and    edx,0xfffffffe
c0017d6b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017d71:	e8 9e 02 00 00       	call   c0018014 <picOpen()>
c0017d76:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017d7d:	74 0a                	je     c0017d89 <HalInitialise()+0x54>
c0017d7f:	e8 e0 01 00 00       	call   c0017f64 <picDisable()>
c0017d84:	e8 ad 67 00 00       	call   c001e536 <apicOpen()>
c0017d89:	bb 0f 00 00 00       	mov    ebx,0xf
c0017d8e:	50                   	push   eax
c0017d8f:	6a 00                	push   0x0
c0017d91:	68 dc 79 01 c0       	push   0xc00179dc
c0017d96:	6a 00                	push   0x0
c0017d98:	e8 09 4f ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d9d:	83 c4 0c             	add    esp,0xc
c0017da0:	6a 00                	push   0x0
c0017da2:	68 dc 79 01 c0       	push   0xc00179dc
c0017da7:	6a 01                	push   0x1
c0017da9:	e8 f8 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dae:	83 c4 0c             	add    esp,0xc
c0017db1:	6a 00                	push   0x0
c0017db3:	68 6d 74 01 c0       	push   0xc001746d
c0017db8:	6a 02                	push   0x2
c0017dba:	e8 e7 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dbf:	83 c4 0c             	add    esp,0xc
c0017dc2:	6a 00                	push   0x0
c0017dc4:	68 dc 79 01 c0       	push   0xc00179dc
c0017dc9:	6a 03                	push   0x3
c0017dcb:	e8 d6 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dd0:	83 c4 0c             	add    esp,0xc
c0017dd3:	6a 00                	push   0x0
c0017dd5:	68 dc 79 01 c0       	push   0xc00179dc
c0017dda:	6a 04                	push   0x4
c0017ddc:	e8 c5 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017de1:	83 c4 0c             	add    esp,0xc
c0017de4:	6a 00                	push   0x0
c0017de6:	68 dc 79 01 c0       	push   0xc00179dc
c0017deb:	6a 05                	push   0x5
c0017ded:	e8 b4 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017df2:	83 c4 0c             	add    esp,0xc
c0017df5:	6a 00                	push   0x0
c0017df7:	68 10 7a 01 c0       	push   0xc0017a10
c0017dfc:	6a 06                	push   0x6
c0017dfe:	e8 a3 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e03:	83 c4 0c             	add    esp,0xc
c0017e06:	6a 00                	push   0x0
c0017e08:	68 86 74 01 c0       	push   0xc0017486
c0017e0d:	6a 08                	push   0x8
c0017e0f:	e8 92 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e14:	83 c4 0c             	add    esp,0xc
c0017e17:	6a 00                	push   0x0
c0017e19:	68 dc 79 01 c0       	push   0xc00179dc
c0017e1e:	6a 09                	push   0x9
c0017e20:	e8 81 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e25:	83 c4 0c             	add    esp,0xc
c0017e28:	6a 00                	push   0x0
c0017e2a:	68 dc 79 01 c0       	push   0xc00179dc
c0017e2f:	6a 0a                	push   0xa
c0017e31:	e8 70 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e36:	83 c4 0c             	add    esp,0xc
c0017e39:	6a 00                	push   0x0
c0017e3b:	68 dc 79 01 c0       	push   0xc00179dc
c0017e40:	6a 0b                	push   0xb
c0017e42:	e8 5f 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e47:	83 c4 0c             	add    esp,0xc
c0017e4a:	6a 00                	push   0x0
c0017e4c:	68 ec 78 01 c0       	push   0xc00178ec
c0017e51:	6a 0d                	push   0xd
c0017e53:	e8 4e 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e58:	83 c4 0c             	add    esp,0xc
c0017e5b:	6a 00                	push   0x0
c0017e5d:	68 53 79 01 c0       	push   0xc0017953
c0017e62:	6a 0e                	push   0xe
c0017e64:	e8 3d 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e69:	83 c4 10             	add    esp,0x10
c0017e6c:	50                   	push   eax
c0017e6d:	6a 00                	push   0x0
c0017e6f:	68 dc 79 01 c0       	push   0xc00179dc
c0017e74:	53                   	push   ebx
c0017e75:	43                   	inc    ebx
c0017e76:	e8 2b 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e7b:	83 c4 10             	add    esp,0x10
c0017e7e:	83 fb 1e             	cmp    ebx,0x1e
c0017e81:	75 e9                	jne    c0017e6c <HalInitialise()+0x137>
c0017e83:	50                   	push   eax
c0017e84:	6a 00                	push   0x0
c0017e86:	68 87 26 01 c0       	push   0xc0012687
c0017e8b:	6a 60                	push   0x60
c0017e8d:	e8 14 4e ff ff       	call   c000cca6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017e92:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e97:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017ea1:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017ea8:	e8 09 fc fe ff       	call   c0007ab6 <malloc>
c0017ead:	89 04 24             	mov    DWORD PTR [esp],eax
c0017eb0:	89 c3                	mov    ebx,eax
c0017eb2:	e8 3b 09 00 00       	call   c00187f2 <RTC::RTC()>
c0017eb7:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017ec1:	5a                   	pop    edx
c0017ec2:	59                   	pop    ecx
c0017ec3:	53                   	push   ebx
c0017ec4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017eca:	e8 a3 48 ff ff       	call   c000c772 <Device::addChild(Device*)>
c0017ecf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ed1:	6a 00                	push   0x0
c0017ed3:	6a 00                	push   0x0
c0017ed5:	6a 00                	push   0x0
c0017ed7:	53                   	push   ebx
c0017ed8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017edb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017ee0:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017ee6:	83 c4 28             	add    esp,0x28
c0017ee9:	5b                   	pop    ebx
c0017eea:	c3                   	ret    

c0017eeb <HalMakeBeep(int)>:
c0017eeb:	53                   	push   ebx
c0017eec:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017ef0:	85 db                	test   ebx,ebx
c0017ef2:	75 07                	jne    c0017efb <HalMakeBeep(int)+0x10>
c0017ef4:	e4 61                	in     al,0x61
c0017ef6:	83 e0 fc             	and    eax,0xfffffffc
c0017ef9:	eb 26                	jmp    c0017f21 <HalMakeBeep(int)+0x36>
c0017efb:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017f00:	99                   	cdq    
c0017f01:	f7 fb                	idiv   ebx
c0017f03:	89 c1                	mov    ecx,eax
c0017f05:	b0 b6                	mov    al,0xb6
c0017f07:	e6 43                	out    0x43,al
c0017f09:	88 c8                	mov    al,cl
c0017f0b:	e6 42                	out    0x42,al
c0017f0d:	89 c8                	mov    eax,ecx
c0017f0f:	c1 e8 08             	shr    eax,0x8
c0017f12:	e6 42                	out    0x42,al
c0017f14:	e4 61                	in     al,0x61
c0017f16:	89 c2                	mov    edx,eax
c0017f18:	83 ca 03             	or     edx,0x3
c0017f1b:	38 d0                	cmp    al,dl
c0017f1d:	74 04                	je     c0017f23 <HalMakeBeep(int)+0x38>
c0017f1f:	88 d0                	mov    al,dl
c0017f21:	e6 61                	out    0x61,al
c0017f23:	5b                   	pop    ebx
c0017f24:	c3                   	ret    

c0017f25 <HalGetRand()>:
c0017f25:	31 c0                	xor    eax,eax
c0017f27:	c3                   	ret    

c0017f28 <HalEndOfInterrupt(int)>:
c0017f28:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017f2f:	74 23                	je     c0017f54 <HalEndOfInterrupt(int)+0x2c>
c0017f31:	83 ec 14             	sub    esp,0x14
c0017f34:	6a 1b                	push   0x1b
c0017f36:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f3c:	e8 7f f1 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017f41:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017f46:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017f50:	83 c4 1c             	add    esp,0x1c
c0017f53:	c3                   	ret    
c0017f54:	e9 3f 02 00 00       	jmp    c0018198 <picEOI(int)>

c0017f59 <HalRestart()>:
c0017f59:	c3                   	ret    

c0017f5a <HalShutdown()>:
c0017f5a:	c3                   	ret    

c0017f5b <HalSleep()>:
c0017f5b:	c3                   	ret    

c0017f5c <picIoWait()>:
c0017f5c:	eb 00                	jmp    c0017f5e <picIoWait()+0x2>
c0017f5e:	eb 00                	jmp    c0017f60 <picIoWait()+0x4>
c0017f60:	90                   	nop
c0017f61:	c3                   	ret    
c0017f62:	66 90                	xchg   ax,ax

c0017f64 <picDisable()>:
c0017f64:	83 ec 10             	sub    esp,0x10
c0017f67:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017f6e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017f73:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f77:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017f7c:	ee                   	out    dx,al
c0017f7d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017f84:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017f89:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f8d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017f92:	ee                   	out    dx,al
c0017f93:	90                   	nop
c0017f94:	83 c4 10             	add    esp,0x10
c0017f97:	c3                   	ret    

c0017f98 <picGetIRQReg(int)>:
c0017f98:	83 ec 10             	sub    esp,0x10
c0017f9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f9f:	0f b6 c0             	movzx  eax,al
c0017fa2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017fa9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017fad:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017fb1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017fb6:	ee                   	out    dx,al
c0017fb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fbb:	0f b6 c0             	movzx  eax,al
c0017fbe:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017fc5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017fc9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017fcd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017fd2:	ee                   	out    dx,al
c0017fd3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017fda:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017fdf:	89 c2                	mov    edx,eax
c0017fe1:	ec                   	in     al,dx
c0017fe2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017fe6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017fea:	0f b6 c0             	movzx  eax,al
c0017fed:	c1 e0 08             	shl    eax,0x8
c0017ff0:	89 c1                	mov    ecx,eax
c0017ff2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017ff9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017ffe:	89 c2                	mov    edx,eax
c0018000:	ec                   	in     al,dx
c0018001:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018005:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018009:	0f b6 c0             	movzx  eax,al
c001800c:	09 c8                	or     eax,ecx
c001800e:	83 c4 10             	add    esp,0x10
c0018011:	c3                   	ret    
c0018012:	66 90                	xchg   ax,ax

c0018014 <picOpen()>:
c0018014:	83 ec 50             	sub    esp,0x50
c0018017:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001801e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018023:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018027:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001802b:	ee                   	out    dx,al
c001802c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018033:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018038:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001803c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018040:	ee                   	out    dx,al
c0018041:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018049:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018051:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018058:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001805c:	89 c2                	mov    edx,eax
c001805e:	ec                   	in     al,dx
c001805f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018063:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018067:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001806b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018072:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018076:	89 c2                	mov    edx,eax
c0018078:	ec                   	in     al,dx
c0018079:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001807d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018081:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018085:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001808c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018091:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018095:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018099:	ee                   	out    dx,al
c001809a:	e8 bd fe ff ff       	call   c0017f5c <picIoWait()>
c001809f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00180a6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00180ab:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00180af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180b3:	ee                   	out    dx,al
c00180b4:	e8 a3 fe ff ff       	call   c0017f5c <picIoWait()>
c00180b9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00180bd:	0f b6 c0             	movzx  eax,al
c00180c0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00180c7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00180cb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00180cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d3:	ee                   	out    dx,al
c00180d4:	e8 83 fe ff ff       	call   c0017f5c <picIoWait()>
c00180d9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00180dd:	0f b6 c0             	movzx  eax,al
c00180e0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00180e7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00180eb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00180ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180f3:	ee                   	out    dx,al
c00180f4:	e8 63 fe ff ff       	call   c0017f5c <picIoWait()>
c00180f9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018100:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018105:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018109:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001810d:	ee                   	out    dx,al
c001810e:	e8 49 fe ff ff       	call   c0017f5c <picIoWait()>
c0018113:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001811a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001811f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018123:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018127:	ee                   	out    dx,al
c0018128:	e8 2f fe ff ff       	call   c0017f5c <picIoWait()>
c001812d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018134:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018139:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001813d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018141:	ee                   	out    dx,al
c0018142:	e8 15 fe ff ff       	call   c0017f5c <picIoWait()>
c0018147:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001814e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018153:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018157:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001815b:	ee                   	out    dx,al
c001815c:	e8 fb fd ff ff       	call   c0017f5c <picIoWait()>
c0018161:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018166:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001816d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018171:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018175:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018179:	ee                   	out    dx,al
c001817a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001817f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018186:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001818a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001818e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018192:	ee                   	out    dx,al
c0018193:	90                   	nop
c0018194:	83 c4 50             	add    esp,0x50
c0018197:	c3                   	ret    

c0018198 <picEOI(int)>:
c0018198:	83 ec 10             	sub    esp,0x10
c001819b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00181a0:	75 1e                	jne    c00181c0 <picEOI(int)+0x28>
c00181a2:	6a 0b                	push   0xb
c00181a4:	e8 ef fd ff ff       	call   c0017f98 <picGetIRQReg(int)>
c00181a9:	83 c4 04             	add    esp,0x4
c00181ac:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00181b1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00181b6:	25 80 00 00 00       	and    eax,0x80
c00181bb:	74 73                	je     c0018230 <picEOI(int)+0x98>
c00181bd:	8d 76 00             	lea    esi,[esi+0x0]
c00181c0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00181c5:	75 31                	jne    c00181f8 <picEOI(int)+0x60>
c00181c7:	6a 0b                	push   0xb
c00181c9:	e8 ca fd ff ff       	call   c0017f98 <picGetIRQReg(int)>
c00181ce:	83 c4 04             	add    esp,0x4
c00181d1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00181d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181da:	98                   	cwde   
c00181db:	85 c0                	test   eax,eax
c00181dd:	78 19                	js     c00181f8 <picEOI(int)+0x60>
c00181df:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00181e6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00181eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00181ef:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00181f4:	ee                   	out    dx,al
c00181f5:	eb 3d                	jmp    c0018234 <picEOI(int)+0x9c>
c00181f7:	90                   	nop
c00181f8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00181fd:	7e 19                	jle    c0018218 <picEOI(int)+0x80>
c00181ff:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018206:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001820b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001820f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018214:	ee                   	out    dx,al
c0018215:	8d 76 00             	lea    esi,[esi+0x0]
c0018218:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001821f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018224:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018228:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001822d:	ee                   	out    dx,al
c001822e:	eb 04                	jmp    c0018234 <picEOI(int)+0x9c>
c0018230:	90                   	nop
c0018231:	8d 76 00             	lea    esi,[esi+0x0]
c0018234:	83 c4 10             	add    esp,0x10
c0018237:	c3                   	ret    

c0018238 <RTC::open(int, int, void*)>:
c0018238:	31 c0                	xor    eax,eax
c001823a:	c3                   	ret    
c001823b:	90                   	nop

c001823c <RTC::close(int, int, void*)>:
c001823c:	31 c0                	xor    eax,eax
c001823e:	c3                   	ret    
c001823f:	90                   	nop

c0018240 <RTC::timeInSecondsUTC()>:
c0018240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018244:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001824a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018250:	c3                   	ret    
c0018251:	90                   	nop

c0018252 <RTC::timeInDatetimeUTC()>:
c0018252:	53                   	push   ebx
c0018253:	83 ec 14             	sub    esp,0x14
c0018256:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001825a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001825e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018260:	50                   	push   eax
c0018261:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018264:	83 c4 0c             	add    esp,0xc
c0018267:	52                   	push   edx
c0018268:	50                   	push   eax
c0018269:	53                   	push   ebx
c001826a:	e8 77 42 ff ff       	call   c000c4e6 <secondsToDatetime(unsigned long long)>
c001826f:	89 d8                	mov    eax,ebx
c0018271:	83 c4 14             	add    esp,0x14
c0018274:	5b                   	pop    ebx
c0018275:	c2 04 00             	ret    0x4

c0018278 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018278:	56                   	push   esi
c0018279:	53                   	push   ebx
c001827a:	83 ec 14             	sub    esp,0x14
c001827d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018281:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018283:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018286:	8d 44 24 08          	lea    eax,[esp+0x8]
c001828a:	52                   	push   edx
c001828b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001828f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018293:	50                   	push   eax
c0018294:	e8 4d 42 ff ff       	call   c000c4e6 <secondsToDatetime(unsigned long long)>
c0018299:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001829d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00182a5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00182a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00182ad:	89 f0                	mov    eax,esi
c00182af:	83 c4 20             	add    esp,0x20
c00182b2:	5b                   	pop    ebx
c00182b3:	5e                   	pop    esi
c00182b4:	ff e0                	jmp    eax

c00182b6 <RTC::~RTC()>:
c00182b6:	83 ec 0c             	sub    esp,0xc
c00182b9:	ba ac 28 02 c0       	mov    edx,0xc00228ac
c00182be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c2:	89 10                	mov    DWORD PTR [eax],edx
c00182c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c8:	83 ec 0c             	sub    esp,0xc
c00182cb:	50                   	push   eax
c00182cc:	e8 a7 3f ff ff       	call   c000c278 <Clock::~Clock()>
c00182d1:	83 c4 10             	add    esp,0x10
c00182d4:	90                   	nop
c00182d5:	83 c4 0c             	add    esp,0xc
c00182d8:	c3                   	ret    
c00182d9:	90                   	nop

c00182da <RTC::~RTC()>:
c00182da:	83 ec 0c             	sub    esp,0xc
c00182dd:	83 ec 0c             	sub    esp,0xc
c00182e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182e4:	e8 cd ff ff ff       	call   c00182b6 <RTC::~RTC()>
c00182e9:	83 c4 10             	add    esp,0x10
c00182ec:	83 ec 08             	sub    esp,0x8
c00182ef:	68 60 01 00 00       	push   0x160
c00182f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182f8:	e8 1b 25 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00182fd:	83 c4 10             	add    esp,0x10
c0018300:	83 c4 0c             	add    esp,0xc
c0018303:	c3                   	ret    

c0018304 <RTC::get_update_in_progress_flag()>:
c0018304:	83 ec 14             	sub    esp,0x14
c0018307:	6a 0a                	push   0xa
c0018309:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001830f:	e8 64 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018314:	83 c4 1c             	add    esp,0x1c
c0018317:	0f b6 c0             	movzx  eax,al
c001831a:	c1 e8 07             	shr    eax,0x7
c001831d:	c3                   	ret    

c001831e <RTC::completeRTCRefresh()>:
c001831e:	55                   	push   ebp
c001831f:	57                   	push   edi
c0018320:	56                   	push   esi
c0018321:	53                   	push   ebx
c0018322:	83 ec 3c             	sub    esp,0x3c
c0018325:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001832b:	83 ec 0c             	sub    esp,0xc
c001832e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018332:	e8 cd ff ff ff       	call   c0018304 <RTC::get_update_in_progress_flag()>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	84 c0                	test   al,al
c001833c:	74 0e                	je     c001834c <RTC::completeRTCRefresh()+0x2e>
c001833e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018344:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001834a:	73 df                	jae    c001832b <RTC::completeRTCRefresh()+0xd>
c001834c:	51                   	push   ecx
c001834d:	51                   	push   ecx
c001834e:	6a 00                	push   0x0
c0018350:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018356:	e8 1d ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001835b:	5b                   	pop    ebx
c001835c:	89 c7                	mov    edi,eax
c001835e:	5e                   	pop    esi
c001835f:	6a 02                	push   0x2
c0018361:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018367:	e8 0c ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001836c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018370:	5d                   	pop    ebp
c0018371:	58                   	pop    eax
c0018372:	6a 04                	push   0x4
c0018374:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001837a:	e8 f9 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001837f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018383:	58                   	pop    eax
c0018384:	5a                   	pop    edx
c0018385:	6a 07                	push   0x7
c0018387:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001838d:	e8 e6 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018392:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018396:	59                   	pop    ecx
c0018397:	5b                   	pop    ebx
c0018398:	6a 08                	push   0x8
c001839a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183a0:	e8 d3 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183a5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00183a9:	5e                   	pop    esi
c00183aa:	5d                   	pop    ebp
c00183ab:	6a 09                	push   0x9
c00183ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183b3:	e8 c0 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183b8:	0f b6 c0             	movzx  eax,al
c00183bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00183bf:	83 c4 10             	add    esp,0x10
c00183c2:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00183c8:	83 ec 0c             	sub    esp,0xc
c00183cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00183cf:	e8 30 ff ff ff       	call   c0018304 <RTC::get_update_in_progress_flag()>
c00183d4:	83 c4 10             	add    esp,0x10
c00183d7:	84 c0                	test   al,al
c00183d9:	74 0e                	je     c00183e9 <RTC::completeRTCRefresh()+0xcb>
c00183db:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00183e1:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00183e7:	73 df                	jae    c00183c8 <RTC::completeRTCRefresh()+0xaa>
c00183e9:	51                   	push   ecx
c00183ea:	51                   	push   ecx
c00183eb:	6a 00                	push   0x0
c00183ed:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183f3:	e8 80 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183f8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00183fc:	5b                   	pop    ebx
c00183fd:	5e                   	pop    esi
c00183fe:	6a 02                	push   0x2
c0018400:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018406:	e8 6d ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001840b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001840f:	5d                   	pop    ebp
c0018410:	58                   	pop    eax
c0018411:	6a 04                	push   0x4
c0018413:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018419:	e8 5a ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001841e:	88 c3                	mov    bl,al
c0018420:	58                   	pop    eax
c0018421:	5a                   	pop    edx
c0018422:	6a 07                	push   0x7
c0018424:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001842a:	e8 49 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001842f:	59                   	pop    ecx
c0018430:	89 c6                	mov    esi,eax
c0018432:	5d                   	pop    ebp
c0018433:	6a 08                	push   0x8
c0018435:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001843b:	e8 38 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018440:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018444:	58                   	pop    eax
c0018445:	5a                   	pop    edx
c0018446:	6a 09                	push   0x9
c0018448:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001844e:	e8 25 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018453:	89 f9                	mov    ecx,edi
c0018455:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018459:	0f b6 e8             	movzx  ebp,al
c001845c:	83 c4 10             	add    esp,0x10
c001845f:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018463:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018468:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001846d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018475:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018479:	0f 94 c0             	sete   al
c001847c:	0f b6 fb             	movzx  edi,bl
c001847f:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0018483:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018488:	0f 94 c2             	sete   dl
c001848b:	21 d0                	and    eax,edx
c001848d:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018491:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018495:	0f 94 c2             	sete   dl
c0018498:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001849c:	21 c2                	and    edx,eax
c001849e:	89 f0                	mov    eax,esi
c00184a0:	0f b6 c0             	movzx  eax,al
c00184a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00184a7:	89 f0                	mov    eax,esi
c00184a9:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00184ad:	0f 94 c0             	sete   al
c00184b0:	21 d0                	and    eax,edx
c00184b2:	31 d2                	xor    edx,edx
c00184b4:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00184b8:	0f 94 c2             	sete   dl
c00184bb:	85 c2                	test   edx,eax
c00184bd:	75 27                	jne    c00184e6 <RTC::completeRTCRefresh()+0x1c8>
c00184bf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00184c3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00184c7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00184cb:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00184cf:	89 f0                	mov    eax,esi
c00184d1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00184d5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00184d9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00184dd:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00184e1:	e9 dc fe ff ff       	jmp    c00183c2 <RTC::completeRTCRefresh()+0xa4>
c00184e6:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00184ea:	75 d3                	jne    c00184bf <RTC::completeRTCRefresh()+0x1a1>
c00184ec:	52                   	push   edx
c00184ed:	52                   	push   edx
c00184ee:	6a 0b                	push   0xb
c00184f0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184f6:	e8 7d ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184fb:	83 c4 10             	add    esp,0x10
c00184fe:	a8 04                	test   al,0x4
c0018500:	75 7a                	jne    c001857c <RTC::completeRTCRefresh()+0x25e>
c0018502:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018506:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001850a:	83 e1 0f             	and    ecx,0xf
c001850d:	c1 ea 04             	shr    edx,0x4
c0018510:	c1 ef 04             	shr    edi,0x4
c0018513:	6b d2 0a             	imul   edx,edx,0xa
c0018516:	83 e6 0f             	and    esi,0xf
c0018519:	01 d1                	add    ecx,edx
c001851b:	c1 ed 04             	shr    ebp,0x4
c001851e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018522:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018526:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001852a:	c1 ea 04             	shr    edx,0x4
c001852d:	83 e1 0f             	and    ecx,0xf
c0018530:	6b d2 0a             	imul   edx,edx,0xa
c0018533:	6b ed 0a             	imul   ebp,ebp,0xa
c0018536:	01 d1                	add    ecx,edx
c0018538:	89 fa                	mov    edx,edi
c001853a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001853e:	83 e2 07             	and    edx,0x7
c0018541:	89 d9                	mov    ecx,ebx
c0018543:	6b d2 0a             	imul   edx,edx,0xa
c0018546:	83 e1 0f             	and    ecx,0xf
c0018549:	83 e3 80             	and    ebx,0xffffff80
c001854c:	01 d1                	add    ecx,edx
c001854e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018552:	09 cb                	or     ebx,ecx
c0018554:	c1 ea 04             	shr    edx,0x4
c0018557:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001855b:	6b d2 0a             	imul   edx,edx,0xa
c001855e:	83 e1 0f             	and    ecx,0xf
c0018561:	01 d6                	add    esi,edx
c0018563:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018567:	c1 ea 04             	shr    edx,0x4
c001856a:	6b d2 0a             	imul   edx,edx,0xa
c001856d:	01 d1                	add    ecx,edx
c001856f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018573:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018577:	83 e2 0f             	and    edx,0xf
c001857a:	01 d5                	add    ebp,edx
c001857c:	a8 02                	test   al,0x2
c001857e:	75 15                	jne    c0018595 <RTC::completeRTCRefresh()+0x277>
c0018580:	f6 c3 80             	test   bl,0x80
c0018583:	74 10                	je     c0018595 <RTC::completeRTCRefresh()+0x277>
c0018585:	83 e3 7f             	and    ebx,0x7f
c0018588:	b9 18 00 00 00       	mov    ecx,0x18
c001858d:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018590:	99                   	cdq    
c0018591:	f7 f9                	idiv   ecx
c0018593:	88 d3                	mov    bl,dl
c0018595:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001859b:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00185a1:	77 06                	ja     c00185a9 <RTC::completeRTCRefresh()+0x28b>
c00185a3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00185a9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185ae:	31 c9                	xor    ecx,ecx
c00185b0:	c1 e0 10             	shl    eax,0x10
c00185b3:	89 cd                	mov    ebp,ecx
c00185b5:	c1 e7 10             	shl    edi,0x10
c00185b8:	31 d2                	xor    edx,edx
c00185ba:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00185c0:	09 c5                	or     ebp,eax
c00185c2:	89 f0                	mov    eax,esi
c00185c4:	89 e9                	mov    ecx,ebp
c00185c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00185ca:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00185ce:	88 c2                	mov    dl,al
c00185d0:	88 d9                	mov    cl,bl
c00185d2:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00185d6:	0f b7 c2             	movzx  eax,dx
c00185d9:	09 f8                	or     eax,edi
c00185db:	89 c2                	mov    edx,eax
c00185dd:	50                   	push   eax
c00185de:	50                   	push   eax
c00185df:	51                   	push   ecx
c00185e0:	52                   	push   edx
c00185e1:	e8 81 3d ff ff       	call   c000c367 <datetimeToSeconds(datetime_t)>
c00185e6:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00185ea:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00185f0:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00185f6:	83 c4 4c             	add    esp,0x4c
c00185f9:	5b                   	pop    ebx
c00185fa:	5e                   	pop    esi
c00185fb:	5f                   	pop    edi
c00185fc:	5d                   	pop    ebp
c00185fd:	c3                   	ret    

c00185fe <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00185fe:	55                   	push   ebp
c00185ff:	57                   	push   edi
c0018600:	56                   	push   esi
c0018601:	53                   	push   ebx
c0018602:	83 ec 30             	sub    esp,0x30
c0018605:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018609:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001860d:	6a 00                	push   0x0
c001860f:	6a 00                	push   0x0
c0018611:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018617:	e8 76 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001861c:	83 c4 0c             	add    esp,0xc
c001861f:	6a 00                	push   0x0
c0018621:	6a 02                	push   0x2
c0018623:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018629:	e8 64 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001862e:	31 d2                	xor    edx,edx
c0018630:	89 f9                	mov    ecx,edi
c0018632:	89 f8                	mov    eax,edi
c0018634:	c1 e9 10             	shr    ecx,0x10
c0018637:	0f b6 c4             	movzx  eax,ah
c001863a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001863e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018642:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018646:	b9 64 00 00 00       	mov    ecx,0x64
c001864b:	89 f0                	mov    eax,esi
c001864d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018651:	89 f0                	mov    eax,esi
c0018653:	0f b6 c4             	movzx  eax,ah
c0018656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001865a:	89 f0                	mov    eax,esi
c001865c:	c1 e8 10             	shr    eax,0x10
c001865f:	f7 f1                	div    ecx
c0018661:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018665:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018669:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001866d:	59                   	pop    ecx
c001866e:	5b                   	pop    ebx
c001866f:	89 fb                	mov    ebx,edi
c0018671:	6a 0b                	push   0xb
c0018673:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018679:	e8 fa ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	89 c5                	mov    ebp,eax
c0018683:	a8 04                	test   al,0x4
c0018685:	75 6e                	jne    c00186f5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018687:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001868b:	31 d2                	xor    edx,edx
c001868d:	0f b6 c1             	movzx  eax,cl
c0018690:	b9 0a 00 00 00       	mov    ecx,0xa
c0018695:	f7 f1                	div    ecx
c0018697:	c1 e0 04             	shl    eax,0x4
c001869a:	09 d0                	or     eax,edx
c001869c:	31 d2                	xor    edx,edx
c001869e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00186a2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00186a7:	f7 f1                	div    ecx
c00186a9:	c1 e0 04             	shl    eax,0x4
c00186ac:	09 d0                	or     eax,edx
c00186ae:	31 d2                	xor    edx,edx
c00186b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00186b4:	0f b6 c3             	movzx  eax,bl
c00186b7:	f7 f1                	div    ecx
c00186b9:	c1 e0 04             	shl    eax,0x4
c00186bc:	09 d0                	or     eax,edx
c00186be:	31 d2                	xor    edx,edx
c00186c0:	89 c3                	mov    ebx,eax
c00186c2:	89 f0                	mov    eax,esi
c00186c4:	0f b6 c0             	movzx  eax,al
c00186c7:	f7 f1                	div    ecx
c00186c9:	c1 e0 04             	shl    eax,0x4
c00186cc:	09 d0                	or     eax,edx
c00186ce:	31 d2                	xor    edx,edx
c00186d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00186d9:	f7 f1                	div    ecx
c00186db:	c1 e0 04             	shl    eax,0x4
c00186de:	09 d0                	or     eax,edx
c00186e0:	31 d2                	xor    edx,edx
c00186e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00186e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186ea:	f7 f1                	div    ecx
c00186ec:	c1 e0 04             	shl    eax,0x4
c00186ef:	09 d0                	or     eax,edx
c00186f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00186f5:	83 e5 02             	and    ebp,0x2
c00186f8:	75 1e                	jne    c0018718 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00186fa:	0f b6 c3             	movzx  eax,bl
c00186fd:	83 f8 0b             	cmp    eax,0xb
c0018700:	76 10                	jbe    c0018712 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018702:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018705:	88 d3                	mov    bl,dl
c0018707:	84 d2                	test   dl,dl
c0018709:	75 02                	jne    c001870d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c001870b:	b3 0c                	mov    bl,0xc
c001870d:	83 cb 80             	or     ebx,0xffffff80
c0018710:	eb 06                	jmp    c0018718 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018712:	85 c0                	test   eax,eax
c0018714:	75 02                	jne    c0018718 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018716:	b3 0c                	mov    bl,0xc
c0018718:	0f b6 db             	movzx  ebx,bl
c001871b:	50                   	push   eax
c001871c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018721:	52                   	push   edx
c0018722:	6a 00                	push   0x0
c0018724:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001872a:	e8 63 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001872f:	83 c4 0c             	add    esp,0xc
c0018732:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018737:	50                   	push   eax
c0018738:	6a 02                	push   0x2
c001873a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018740:	e8 4d eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018745:	83 c4 0c             	add    esp,0xc
c0018748:	53                   	push   ebx
c0018749:	6a 04                	push   0x4
c001874b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018751:	e8 3c eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018756:	83 c4 0c             	add    esp,0xc
c0018759:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001875e:	52                   	push   edx
c001875f:	6a 07                	push   0x7
c0018761:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018767:	e8 26 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001876c:	83 c4 0c             	add    esp,0xc
c001876f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018774:	50                   	push   eax
c0018775:	6a 08                	push   0x8
c0018777:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001877d:	e8 10 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018782:	83 c4 0c             	add    esp,0xc
c0018785:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001878a:	55                   	push   ebp
c001878b:	6a 09                	push   0x9
c001878d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018793:	e8 fa ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018798:	5a                   	pop    edx
c0018799:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001879d:	e8 7c fb ff ff       	call   c001831e <RTC::completeRTCRefresh()>
c00187a2:	83 c4 3c             	add    esp,0x3c
c00187a5:	b0 01                	mov    al,0x1
c00187a7:	5b                   	pop    ebx
c00187a8:	5e                   	pop    esi
c00187a9:	5f                   	pop    edi
c00187aa:	5d                   	pop    ebp
c00187ab:	c3                   	ret    

c00187ac <rtcIRQHandler(regs*, void*)>:
c00187ac:	53                   	push   ebx
c00187ad:	83 ec 10             	sub    esp,0x10
c00187b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00187b4:	6a 0c                	push   0xc
c00187b6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187bc:	e8 b7 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187c1:	83 c4 10             	add    esp,0x10
c00187c4:	a8 80                	test   al,0x80
c00187c6:	74 24                	je     c00187ec <rtcIRQHandler(regs*, void*)+0x40>
c00187c8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00187cf:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00187d6:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00187dd:	75 0d                	jne    c00187ec <rtcIRQHandler(regs*, void*)+0x40>
c00187df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00187e3:	83 c4 08             	add    esp,0x8
c00187e6:	5b                   	pop    ebx
c00187e7:	e9 32 fb ff ff       	jmp    c001831e <RTC::completeRTCRefresh()>
c00187ec:	83 c4 08             	add    esp,0x8
c00187ef:	5b                   	pop    ebx
c00187f0:	c3                   	ret    
c00187f1:	90                   	nop

c00187f2 <RTC::RTC()>:
c00187f2:	83 ec 1c             	sub    esp,0x1c
c00187f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f9:	83 ec 08             	sub    esp,0x8
c00187fc:	68 8f 28 02 c0       	push   0xc002288f
c0018801:	50                   	push   eax
c0018802:	e8 3b 3a ff ff       	call   c000c242 <Clock::Clock(char const*)>
c0018807:	83 c4 10             	add    esp,0x10
c001880a:	ba ac 28 02 c0       	mov    edx,0xc00228ac
c001880f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018813:	89 10                	mov    DWORD PTR [eax],edx
c0018815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018819:	83 ec 0c             	sub    esp,0xc
c001881c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018820:	6a 01                	push   0x1
c0018822:	68 ac 87 01 c0       	push   0xc00187ac
c0018827:	6a 08                	push   0x8
c0018829:	50                   	push   eax
c001882a:	e8 ef 3e ff ff       	call   c000c71e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001882f:	83 c4 20             	add    esp,0x20
c0018832:	89 c2                	mov    edx,eax
c0018834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018838:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001883e:	fa                   	cli    
c001883f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018844:	83 c0 01             	add    eax,0x1
c0018847:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001884c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018851:	83 ec 08             	sub    esp,0x8
c0018854:	6a 0b                	push   0xb
c0018856:	50                   	push   eax
c0018857:	e8 1c e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001885c:	83 c4 10             	add    esp,0x10
c001885f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018863:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018868:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001886c:	83 ca 10             	or     edx,0x10
c001886f:	0f b6 d2             	movzx  edx,dl
c0018872:	83 ec 04             	sub    esp,0x4
c0018875:	52                   	push   edx
c0018876:	6a 0b                	push   0xb
c0018878:	50                   	push   eax
c0018879:	e8 14 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001887e:	83 c4 10             	add    esp,0x10
c0018881:	83 ec 0c             	sub    esp,0xc
c0018884:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018888:	e8 91 fa ff ff       	call   c001831e <RTC::completeRTCRefresh()>
c001888d:	83 c4 10             	add    esp,0x10
c0018890:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018895:	83 e8 01             	sub    eax,0x1
c0018898:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001889d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00188a2:	85 c0                	test   eax,eax
c00188a4:	75 01                	jne    c00188a7 <RTC::RTC()+0xb5>
c00188a6:	fb                   	sti    
c00188a7:	90                   	nop
c00188a8:	83 c4 1c             	add    esp,0x1c
c00188ab:	c3                   	ret    

c00188ac <HalConsoleScroll(int, int)>:
c00188ac:	83 ec 10             	sub    esp,0x10
c00188af:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00188b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00188bf:	90                   	nop
c00188c0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00188c5:	0f 8f e1 00 00 00    	jg     c00189ac <HalConsoleScroll(int, int)+0x100>
c00188cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00188d3:	90                   	nop
c00188d4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00188dc:	0f 8f be 00 00 00    	jg     c00189a0 <HalConsoleScroll(int, int)+0xf4>
c00188e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188e6:	89 d0                	mov    eax,edx
c00188e8:	c1 e0 02             	shl    eax,0x2
c00188eb:	01 d0                	add    eax,edx
c00188ed:	c1 e0 05             	shl    eax,0x5
c00188f0:	89 c2                	mov    edx,eax
c00188f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188f6:	01 d0                	add    eax,edx
c00188f8:	89 c2                	mov    edx,eax
c00188fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188fe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018901:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018905:	89 d0                	mov    eax,edx
c0018907:	c1 e0 02             	shl    eax,0x2
c001890a:	01 d0                	add    eax,edx
c001890c:	c1 e0 05             	shl    eax,0x5
c001890f:	89 c2                	mov    edx,eax
c0018911:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018915:	01 d0                	add    eax,edx
c0018917:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001891d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018921:	01 c2                	add    edx,eax
c0018923:	8a 01                	mov    al,BYTE PTR [ecx]
c0018925:	88 02                	mov    BYTE PTR [edx],al
c0018927:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001892c:	75 66                	jne    c0018994 <HalConsoleScroll(int, int)+0xe8>
c001892e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018932:	83 e0 01             	and    eax,0x1
c0018935:	74 39                	je     c0018970 <HalConsoleScroll(int, int)+0xc4>
c0018937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001893b:	83 e0 0f             	and    eax,0xf
c001893e:	88 c2                	mov    dl,al
c0018940:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018944:	c1 e0 04             	shl    eax,0x4
c0018947:	09 d0                	or     eax,edx
c0018949:	88 c1                	mov    cl,al
c001894b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001894f:	89 d0                	mov    eax,edx
c0018951:	c1 e0 02             	shl    eax,0x2
c0018954:	01 d0                	add    eax,edx
c0018956:	c1 e0 05             	shl    eax,0x5
c0018959:	89 c2                	mov    edx,eax
c001895b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001895f:	01 d0                	add    eax,edx
c0018961:	89 c2                	mov    edx,eax
c0018963:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018967:	01 d0                	add    eax,edx
c0018969:	88 ca                	mov    dl,cl
c001896b:	88 10                	mov    BYTE PTR [eax],dl
c001896d:	eb 25                	jmp    c0018994 <HalConsoleScroll(int, int)+0xe8>
c001896f:	90                   	nop
c0018970:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018974:	89 d0                	mov    eax,edx
c0018976:	c1 e0 02             	shl    eax,0x2
c0018979:	01 d0                	add    eax,edx
c001897b:	c1 e0 05             	shl    eax,0x5
c001897e:	89 c2                	mov    edx,eax
c0018980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018984:	01 d0                	add    eax,edx
c0018986:	89 c2                	mov    edx,eax
c0018988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001898c:	01 d0                	add    eax,edx
c001898e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018991:	8d 76 00             	lea    esi,[esi+0x0]
c0018994:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018999:	e9 36 ff ff ff       	jmp    c00188d4 <HalConsoleScroll(int, int)+0x28>
c001899e:	66 90                	xchg   ax,ax
c00189a0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00189a5:	e9 16 ff ff ff       	jmp    c00188c0 <HalConsoleScroll(int, int)+0x14>
c00189aa:	66 90                	xchg   ax,ax
c00189ac:	90                   	nop
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	c3                   	ret    
c00189b1:	8d 76 00             	lea    esi,[esi+0x0]

c00189b4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00189b4:	83 ec 14             	sub    esp,0x14
c00189b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189bb:	88 04 24             	mov    BYTE PTR [esp],al
c00189be:	8a 04 24             	mov    al,BYTE PTR [esp]
c00189c1:	0f b6 c0             	movzx  eax,al
c00189c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189c8:	89 d1                	mov    ecx,edx
c00189ca:	83 e1 0f             	and    ecx,0xf
c00189cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00189d1:	c1 e2 04             	shl    edx,0x4
c00189d4:	0f b6 d2             	movzx  edx,dl
c00189d7:	09 ca                	or     edx,ecx
c00189d9:	c1 e2 08             	shl    edx,0x8
c00189dc:	09 d0                	or     eax,edx
c00189de:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00189e3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00189eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189ef:	89 d0                	mov    eax,edx
c00189f1:	c1 e0 02             	shl    eax,0x2
c00189f4:	01 d0                	add    eax,edx
c00189f6:	c1 e0 04             	shl    eax,0x4
c00189f9:	89 c2                	mov    edx,eax
c00189fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189ff:	01 d0                	add    eax,edx
c0018a01:	01 c0                	add    eax,eax
c0018a03:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018a07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a0b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018a10:	66 89 02             	mov    WORD PTR [edx],ax
c0018a13:	90                   	nop
c0018a14:	83 c4 14             	add    esp,0x14
c0018a17:	c3                   	ret    

c0018a18 <HalConsoleCursorUpdate(int, int)>:
c0018a18:	83 ec 20             	sub    esp,0x20
c0018a1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a1f:	89 c2                	mov    edx,eax
c0018a21:	c1 e2 02             	shl    edx,0x2
c0018a24:	01 d0                	add    eax,edx
c0018a26:	c1 e0 04             	shl    eax,0x4
c0018a29:	89 c2                	mov    edx,eax
c0018a2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a2f:	01 d0                	add    eax,edx
c0018a31:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018a36:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018a3d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018a42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018a46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a4a:	ee                   	out    dx,al
c0018a4b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018a50:	0f b6 c0             	movzx  eax,al
c0018a53:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018a5a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018a5e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018a62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a66:	ee                   	out    dx,al
c0018a67:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018a6e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018a73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018a77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a7b:	ee                   	out    dx,al
c0018a7c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018a81:	c1 e8 08             	shr    eax,0x8
c0018a84:	0f b6 c0             	movzx  eax,al
c0018a87:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018a8e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018a92:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018a96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a9a:	ee                   	out    dx,al
c0018a9b:	90                   	nop
c0018a9c:	83 c4 20             	add    esp,0x20
c0018a9f:	c3                   	ret    

c0018aa0 <FAT::getName()>:
c0018aa0:	b8 e0 28 02 c0       	mov    eax,0xc00228e0
c0018aa5:	c3                   	ret    
c0018aa6:	66 90                	xchg   ax,ax

c0018aa8 <FAT::tell(void*, unsigned long long*)>:
c0018aa8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018aad:	75 09                	jne    c0018ab8 <FAT::tell(void*, unsigned long long*)+0x10>
c0018aaf:	b8 04 00 00 00       	mov    eax,0x4
c0018ab4:	c3                   	ret    
c0018ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ab8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018abd:	75 09                	jne    c0018ac8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018abf:	b8 04 00 00 00       	mov    eax,0x4
c0018ac4:	c3                   	ret    
c0018ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ac8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018acc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018acf:	ba 00 00 00 00       	mov    edx,0x0
c0018ad4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ad8:	89 01                	mov    DWORD PTR [ecx],eax
c0018ada:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018add:	b8 00 00 00 00       	mov    eax,0x0
c0018ae2:	c3                   	ret    
c0018ae3:	90                   	nop

c0018ae4 <FAT::stat(void*, unsigned long long*)>:
c0018ae4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ae9:	75 09                	jne    c0018af4 <FAT::stat(void*, unsigned long long*)+0x10>
c0018aeb:	b8 04 00 00 00       	mov    eax,0x4
c0018af0:	c3                   	ret    
c0018af1:	8d 76 00             	lea    esi,[esi+0x0]
c0018af4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018af9:	75 09                	jne    c0018b04 <FAT::stat(void*, unsigned long long*)+0x20>
c0018afb:	b8 04 00 00 00       	mov    eax,0x4
c0018b00:	c3                   	ret    
c0018b01:	8d 76 00             	lea    esi,[esi+0x0]
c0018b04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b0b:	ba 00 00 00 00       	mov    edx,0x0
c0018b10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b14:	89 01                	mov    DWORD PTR [ecx],eax
c0018b16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018b19:	b8 00 00 00 00       	mov    eax,0x0
c0018b1e:	c3                   	ret    
c0018b1f:	90                   	nop

c0018b20 <FAT::~FAT()>:
c0018b20:	83 ec 0c             	sub    esp,0xc
c0018b23:	ba 2c 29 02 c0       	mov    edx,0xc002292c
c0018b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b2c:	89 10                	mov    DWORD PTR [eax],edx
c0018b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b32:	83 ec 0c             	sub    esp,0xc
c0018b35:	50                   	push   eax
c0018b36:	e8 29 2a ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c0018b3b:	83 c4 10             	add    esp,0x10
c0018b3e:	90                   	nop
c0018b3f:	83 c4 0c             	add    esp,0xc
c0018b42:	c3                   	ret    
c0018b43:	90                   	nop

c0018b44 <FAT::~FAT()>:
c0018b44:	83 ec 0c             	sub    esp,0xc
c0018b47:	83 ec 0c             	sub    esp,0xc
c0018b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b4e:	e8 cd ff ff ff       	call   c0018b20 <FAT::~FAT()>
c0018b53:	83 c4 10             	add    esp,0x10
c0018b56:	83 ec 08             	sub    esp,0x8
c0018b59:	6a 08                	push   0x8
c0018b5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018b5f:	e8 b4 1c ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018b64:	83 c4 10             	add    esp,0x10
c0018b67:	83 c4 0c             	add    esp,0xc
c0018b6a:	c3                   	ret    
c0018b6b:	90                   	nop

c0018b6c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018b6c:	83 ec 1c             	sub    esp,0x1c
c0018b6f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018b76:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018b7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b7f:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b86:	83 f8 ff             	cmp    eax,0xffffffff
c0018b89:	75 35                	jne    c0018bc0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018b8b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b8f:	88 c2                	mov    dl,al
c0018b91:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b96:	01 d0                	add    eax,edx
c0018b98:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b9c:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018ba2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ba6:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018bad:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018bb6:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018bbd:	eb 19                	jmp    c0018bd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018bbf:	90                   	nop
c0018bc0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018bc4:	88 c2                	mov    dl,al
c0018bc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bca:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bd1:	01 d0                	add    eax,edx
c0018bd3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bd7:	90                   	nop
c0018bd8:	83 ec 04             	sub    esp,0x4
c0018bdb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018bdf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018be3:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018be7:	50                   	push   eax
c0018be8:	e8 e2 c3 fe ff       	call   c0004fcf <f_getlabel>
c0018bed:	83 c4 10             	add    esp,0x10
c0018bf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bf4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018bf9:	75 09                	jne    c0018c04 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018bfb:	b8 00 00 00 00       	mov    eax,0x0
c0018c00:	eb 0a                	jmp    c0018c0c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018c02:	66 90                	xchg   ax,ax
c0018c04:	b8 01 00 00 00       	mov    eax,0x1
c0018c09:	8d 76 00             	lea    esi,[esi+0x0]
c0018c0c:	83 c4 1c             	add    esp,0x1c
c0018c0f:	c3                   	ret    

c0018c10 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018c10:	57                   	push   edi
c0018c11:	83 ec 58             	sub    esp,0x58
c0018c14:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018c1c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c20:	b8 00 00 00 00       	mov    eax,0x0
c0018c25:	b9 0f 00 00 00       	mov    ecx,0xf
c0018c2a:	fc                   	cld    
c0018c2b:	89 d7                	mov    edi,edx
c0018c2d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018c2f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c33:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c3a:	83 f8 ff             	cmp    eax,0xffffffff
c0018c3d:	75 35                	jne    c0018c74 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018c3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c43:	88 c2                	mov    dl,al
c0018c45:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c4a:	01 d0                	add    eax,edx
c0018c4c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c50:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018c56:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c5a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018c61:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018c66:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018c6a:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018c71:	eb 19                	jmp    c0018c8c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018c73:	90                   	nop
c0018c74:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018c78:	88 c2                	mov    dl,al
c0018c7a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018c7e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018c85:	01 d0                	add    eax,edx
c0018c87:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c8b:	90                   	nop
c0018c8c:	83 ec 08             	sub    esp,0x8
c0018c8f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018c93:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c97:	50                   	push   eax
c0018c98:	e8 a3 7b fe ff       	call   c0000840 <strcat>
c0018c9d:	83 c4 10             	add    esp,0x10
c0018ca0:	83 ec 0c             	sub    esp,0xc
c0018ca3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ca7:	50                   	push   eax
c0018ca8:	e8 73 c4 fe ff       	call   c0005120 <f_setlabel>
c0018cad:	83 c4 10             	add    esp,0x10
c0018cb0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018cb4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018cb9:	75 09                	jne    c0018cc4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018cbb:	b8 00 00 00 00       	mov    eax,0x0
c0018cc0:	eb 0a                	jmp    c0018ccc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018cc2:	66 90                	xchg   ax,ax
c0018cc4:	b8 01 00 00 00       	mov    eax,0x1
c0018cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ccc:	83 c4 58             	add    esp,0x58
c0018ccf:	5f                   	pop    edi
c0018cd0:	c3                   	ret    
c0018cd1:	90                   	nop
c0018cd2:	66 90                	xchg   ax,ax

c0018cd4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018cd4:	83 ec 2c             	sub    esp,0x2c
c0018cd7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018cdf:	83 ec 08             	sub    esp,0x8
c0018ce2:	68 04 29 02 c0       	push   0xc0022904
c0018ce7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ceb:	e8 60 7a fe ff       	call   c0000750 <strcmp>
c0018cf0:	83 c4 10             	add    esp,0x10
c0018cf3:	85 c0                	test   eax,eax
c0018cf5:	0f 94 c0             	sete   al
c0018cf8:	0f b6 c0             	movzx  eax,al
c0018cfb:	85 c0                	test   eax,eax
c0018cfd:	74 0d                	je     c0018d0c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018cff:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d07:	e9 c0 00 00 00       	jmp    c0018dcc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d0c:	83 ec 08             	sub    esp,0x8
c0018d0f:	68 f6 28 02 c0       	push   0xc00228f6
c0018d14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d18:	e8 33 7a fe ff       	call   c0000750 <strcmp>
c0018d1d:	83 c4 10             	add    esp,0x10
c0018d20:	85 c0                	test   eax,eax
c0018d22:	0f 94 c0             	sete   al
c0018d25:	0f b6 c0             	movzx  eax,al
c0018d28:	85 c0                	test   eax,eax
c0018d2a:	74 10                	je     c0018d3c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018d2c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d34:	e9 93 00 00 00       	jmp    c0018dcc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d39:	8d 76 00             	lea    esi,[esi+0x0]
c0018d3c:	83 ec 08             	sub    esp,0x8
c0018d3f:	68 fc 28 02 c0       	push   0xc00228fc
c0018d44:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d48:	e8 03 7a fe ff       	call   c0000750 <strcmp>
c0018d4d:	83 c4 10             	add    esp,0x10
c0018d50:	85 c0                	test   eax,eax
c0018d52:	0f 94 c0             	sete   al
c0018d55:	0f b6 c0             	movzx  eax,al
c0018d58:	85 c0                	test   eax,eax
c0018d5a:	74 0c                	je     c0018d68 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018d5c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018d64:	eb 66                	jmp    c0018dcc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d66:	66 90                	xchg   ax,ax
c0018d68:	83 ec 08             	sub    esp,0x8
c0018d6b:	68 bc 00 02 c0       	push   0xc00200bc
c0018d70:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d74:	e8 d7 79 fe ff       	call   c0000750 <strcmp>
c0018d79:	83 c4 10             	add    esp,0x10
c0018d7c:	85 c0                	test   eax,eax
c0018d7e:	0f 94 c0             	sete   al
c0018d81:	0f b6 c0             	movzx  eax,al
c0018d84:	85 c0                	test   eax,eax
c0018d86:	74 0c                	je     c0018d94 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018d88:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018d90:	eb 3a                	jmp    c0018dcc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d92:	66 90                	xchg   ax,ax
c0018d94:	83 ec 08             	sub    esp,0x8
c0018d97:	68 02 29 02 c0       	push   0xc0022902
c0018d9c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018da0:	e8 ab 79 fe ff       	call   c0000750 <strcmp>
c0018da5:	83 c4 10             	add    esp,0x10
c0018da8:	85 c0                	test   eax,eax
c0018daa:	0f 94 c0             	sete   al
c0018dad:	0f b6 c0             	movzx  eax,al
c0018db0:	85 c0                	test   eax,eax
c0018db2:	74 0c                	je     c0018dc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018db4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018dbc:	eb 0e                	jmp    c0018dcc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018dbe:	66 90                	xchg   ax,ax
c0018dc0:	b8 08 00 00 00       	mov    eax,0x8
c0018dc5:	e9 ea 00 00 00       	jmp    c0018eb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018dca:	66 90                	xchg   ax,ax
c0018dcc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018dd3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018dd8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ddc:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018de3:	83 f8 ff             	cmp    eax,0xffffffff
c0018de6:	75 34                	jne    c0018e1c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018de8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018dec:	88 c2                	mov    dl,al
c0018dee:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018df3:	01 d0                	add    eax,edx
c0018df5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018df9:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018dff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e03:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e0a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e0f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018e13:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018e1a:	eb 18                	jmp    c0018e34 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018e1c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018e20:	88 c2                	mov    dl,al
c0018e22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e26:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e2d:	01 d0                	add    eax,edx
c0018e2f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018e33:	90                   	nop
c0018e34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018e38:	88 04 24             	mov    BYTE PTR [esp],al
c0018e3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e43:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018e4b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018e50:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e58:	83 ec 0c             	sub    esp,0xc
c0018e5b:	68 00 20 00 00       	push   0x2000
c0018e60:	e8 51 ec fe ff       	call   c0007ab6 <malloc>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e6c:	68 00 20 00 00       	push   0x2000
c0018e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e75:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e79:	50                   	push   eax
c0018e7a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018e7e:	50                   	push   eax
c0018e7f:	e8 99 c5 fe ff       	call   c000541d <f_mkfs>
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018e90:	75 0a                	jne    c0018e9c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018e92:	b8 00 00 00 00       	mov    eax,0x0
c0018e97:	eb 1b                	jmp    c0018eb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018e99:	8d 76 00             	lea    esi,[esi+0x0]
c0018e9c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018ea1:	75 09                	jne    c0018eac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018ea3:	b8 09 00 00 00       	mov    eax,0x9
c0018ea8:	eb 0a                	jmp    c0018eb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018eaa:	66 90                	xchg   ax,ax
c0018eac:	b8 01 00 00 00       	mov    eax,0x1
c0018eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb4:	83 c4 2c             	add    esp,0x2c
c0018eb7:	c3                   	ret    

c0018eb8 <FAT::tryMount(LogicalDisk*, int)>:
c0018eb8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018ebe:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ec3:	83 f8 14             	cmp    eax,0x14
c0018ec6:	75 18                	jne    c0018ee0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018ec8:	83 ec 0c             	sub    esp,0xc
c0018ecb:	68 08 29 02 c0       	push   0xc0022908
c0018ed0:	e8 cc 84 ff ff       	call   c00113a1 <KePanic(char const*)>
c0018ed5:	83 c4 10             	add    esp,0x10
c0018ed8:	b0 00                	mov    al,0x0
c0018eda:	e9 ed 01 00 00       	jmp    c00190cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018edf:	90                   	nop
c0018ee0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018ee7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018eed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018ef3:	3d 00 02 00 00       	cmp    eax,0x200
c0018ef8:	74 0a                	je     c0018f04 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018efa:	b0 00                	mov    al,0x0
c0018efc:	e9 cb 01 00 00       	jmp    c00190cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f01:	8d 76 00             	lea    esi,[esi+0x0]
c0018f04:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018f0c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f13:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018f1a:	83 f8 ff             	cmp    eax,0xffffffff
c0018f1d:	74 09                	je     c0018f28 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018f1f:	b0 01                	mov    al,0x1
c0018f21:	e9 a6 01 00 00       	jmp    c00190cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f26:	66 90                	xchg   ax,ax
c0018f28:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018f32:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018f3a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018f41:	88 c2                	mov    dl,al
c0018f43:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f48:	01 d0                	add    eax,edx
c0018f4a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018f51:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018f57:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018f5e:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018f65:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f6a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018f71:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018f78:	83 ec 0c             	sub    esp,0xc
c0018f7b:	68 34 02 00 00       	push   0x234
c0018f80:	e8 31 eb fe ff       	call   c0007ab6 <malloc>
c0018f85:	83 c4 10             	add    esp,0x10
c0018f88:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018f8f:	83 ec 04             	sub    esp,0x4
c0018f92:	6a 00                	push   0x0
c0018f94:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f9b:	50                   	push   eax
c0018f9c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018fa3:	e8 50 ac fe ff       	call   c0003bf8 <f_mount>
c0018fa8:	83 c4 10             	add    esp,0x10
c0018fab:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018fb2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018fba:	74 1c                	je     c0018fd8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018fbc:	83 ec 0c             	sub    esp,0xc
c0018fbf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018fc6:	e8 0b eb fe ff       	call   c0007ad6 <rfree>
c0018fcb:	83 c4 10             	add    esp,0x10
c0018fce:	b0 00                	mov    al,0x0
c0018fd0:	e9 f7 00 00 00       	jmp    c00190cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd8:	83 ec 04             	sub    esp,0x4
c0018fdb:	68 00 01 00 00       	push   0x100
c0018fe0:	6a 00                	push   0x0
c0018fe2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018fe9:	50                   	push   eax
c0018fea:	e8 01 75 fe ff       	call   c00004f0 <memset>
c0018fef:	83 c4 10             	add    esp,0x10
c0018ff2:	83 ec 08             	sub    esp,0x8
c0018ff5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018ffc:	50                   	push   eax
c0018ffd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019004:	50                   	push   eax
c0019005:	e8 36 78 fe ff       	call   c0000840 <strcat>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	83 ec 08             	sub    esp,0x8
c0019010:	68 16 29 02 c0       	push   0xc0022916
c0019015:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001901c:	50                   	push   eax
c001901d:	e8 1e 78 fe ff       	call   c0000840 <strcat>
c0019022:	83 c4 10             	add    esp,0x10
c0019025:	83 ec 04             	sub    esp,0x4
c0019028:	6a 01                	push   0x1
c001902a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019031:	50                   	push   eax
c0019032:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019036:	50                   	push   eax
c0019037:	e8 1e ac fe ff       	call   c0003c5a <f_open>
c001903c:	83 c4 10             	add    esp,0x10
c001903f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019046:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001904d:	85 c0                	test   eax,eax
c001904f:	74 0b                	je     c001905c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019051:	78 31                	js     c0019084 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019053:	83 e8 04             	sub    eax,0x4
c0019056:	83 f8 01             	cmp    eax,0x1
c0019059:	77 29                	ja     c0019084 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001905b:	90                   	nop
c001905c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019064:	83 ec 0c             	sub    esp,0xc
c0019067:	8d 44 24 14          	lea    eax,[esp+0x14]
c001906b:	50                   	push   eax
c001906c:	e8 b8 b3 fe ff       	call   c0004429 <f_close>
c0019071:	83 c4 10             	add    esp,0x10
c0019074:	90                   	nop
c0019075:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001907d:	85 c0                	test   eax,eax
c001907f:	74 43                	je     c00190c4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019081:	eb 31                	jmp    c00190b4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019083:	90                   	nop
c0019084:	83 ec 0c             	sub    esp,0xc
c0019087:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001908e:	e8 43 ea fe ff       	call   c0007ad6 <rfree>
c0019093:	83 c4 10             	add    esp,0x10
c0019096:	83 ec 04             	sub    esp,0x4
c0019099:	6a 00                	push   0x0
c001909b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00190a2:	50                   	push   eax
c00190a3:	6a 00                	push   0x0
c00190a5:	e8 4e ab fe ff       	call   c0003bf8 <f_mount>
c00190aa:	83 c4 10             	add    esp,0x10
c00190ad:	b0 00                	mov    al,0x0
c00190af:	eb 1b                	jmp    c00190cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00190b1:	8d 76 00             	lea    esi,[esi+0x0]
c00190b4:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00190b9:	83 c0 01             	add    eax,0x1
c00190bc:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c00190c1:	8d 76 00             	lea    esi,[esi+0x0]
c00190c4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00190cb:	90                   	nop
c00190cc:	81 c4 4c 03 00 00    	add    esp,0x34c
c00190d2:	c3                   	ret    
c00190d3:	90                   	nop

c00190d4 <FAT::allocateSwapfile(char const*, int)>:
c00190d4:	55                   	push   ebp
c00190d5:	57                   	push   edi
c00190d6:	56                   	push   esi
c00190d7:	53                   	push   ebx
c00190d8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00190de:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00190e9:	83 ec 0c             	sub    esp,0xc
c00190ec:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00190f3:	e8 be e9 fe ff       	call   c0007ab6 <malloc>
c00190f8:	83 c4 10             	add    esp,0x10
c00190fb:	89 c7                	mov    edi,eax
c00190fd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0019102:	83 ec 04             	sub    esp,0x4
c0019105:	50                   	push   eax
c0019106:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001910d:	57                   	push   edi
c001910e:	e8 3b 27 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c0019113:	83 c4 10             	add    esp,0x10
c0019116:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001911d:	83 ec 04             	sub    esp,0x4
c0019120:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019124:	50                   	push   eax
c0019125:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019129:	50                   	push   eax
c001912a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019131:	e8 e2 2a ff ff       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c0019136:	83 c4 10             	add    esp,0x10
c0019139:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019140:	c1 e0 14             	shl    eax,0x14
c0019143:	89 c7                	mov    edi,eax
c0019145:	89 c5                	mov    ebp,eax
c0019147:	c1 fd 1f             	sar    ebp,0x1f
c001914a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001914e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019152:	89 f9                	mov    ecx,edi
c0019154:	31 c1                	xor    ecx,eax
c0019156:	89 cb                	mov    ebx,ecx
c0019158:	89 e9                	mov    ecx,ebp
c001915a:	31 d1                	xor    ecx,edx
c001915c:	89 ce                	mov    esi,ecx
c001915e:	89 f0                	mov    eax,esi
c0019160:	09 d8                	or     eax,ebx
c0019162:	0f 84 9c 00 00 00    	je     c0019204 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019168:	83 ec 0c             	sub    esp,0xc
c001916b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019172:	e8 6d 29 ff ff       	call   c000bae4 <File::unlink()>
c0019177:	83 c4 10             	add    esp,0x10
c001917a:	83 ec 08             	sub    esp,0x8
c001917d:	6a 12                	push   0x12
c001917f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019186:	e8 8b 27 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c001918b:	83 c4 10             	add    esp,0x10
c001918e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019195:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001919b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00191a2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00191a9:	c1 e0 14             	shl    eax,0x14
c00191ac:	83 ec 04             	sub    esp,0x4
c00191af:	6a 01                	push   0x1
c00191b1:	50                   	push   eax
c00191b2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00191b9:	e8 f2 c0 fe ff       	call   c00052b0 <f_expand>
c00191be:	83 c4 10             	add    esp,0x10
c00191c1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00191c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00191ca:	83 c0 10             	add    eax,0x10
c00191cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00191cf:	83 ec 0c             	sub    esp,0xc
c00191d2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00191d6:	52                   	push   edx
c00191d7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00191db:	52                   	push   edx
c00191dc:	6a 00                	push   0x0
c00191de:	68 00 04 00 00       	push   0x400
c00191e3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00191ea:	ff d0                	call   eax
c00191ec:	83 c4 20             	add    esp,0x20
c00191ef:	83 ec 0c             	sub    esp,0xc
c00191f2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191f9:	e8 76 27 ff ff       	call   c000b974 <File::close()>
c00191fe:	83 c4 10             	add    esp,0x10
c0019201:	8d 76 00             	lea    esi,[esi+0x0]
c0019204:	83 ec 08             	sub    esp,0x8
c0019207:	6a 01                	push   0x1
c0019209:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019210:	e8 01 27 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c0019215:	83 c4 10             	add    esp,0x10
c0019218:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001921f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019221:	83 c0 0c             	add    eax,0xc
c0019224:	8b 00                	mov    eax,DWORD PTR [eax]
c0019226:	83 ec 0c             	sub    esp,0xc
c0019229:	8d 54 24 24          	lea    edx,[esp+0x24]
c001922d:	52                   	push   edx
c001922e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019232:	52                   	push   edx
c0019233:	6a 00                	push   0x0
c0019235:	6a 04                	push   0x4
c0019237:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001923e:	ff d0                	call   eax
c0019240:	83 c4 20             	add    esp,0x20
c0019243:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001924a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019250:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019257:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001925e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019261:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019268:	83 ec 0c             	sub    esp,0xc
c001926b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019272:	e8 fd 26 ff ff       	call   c000b974 <File::close()>
c0019277:	83 c4 10             	add    esp,0x10
c001927a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019281:	ba 00 00 00 00       	mov    edx,0x0
c0019286:	81 c4 3c 04 00 00    	add    esp,0x43c
c001928c:	5b                   	pop    ebx
c001928d:	5e                   	pop    esi
c001928e:	5f                   	pop    edi
c001928f:	5d                   	pop    ebp
c0019290:	c3                   	ret    
c0019291:	90                   	nop
c0019292:	66 90                	xchg   ax,ax

c0019294 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019294:	57                   	push   edi
c0019295:	56                   	push   esi
c0019296:	53                   	push   ebx
c0019297:	81 ec 50 02 00 00    	sub    esp,0x250
c001929d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00192a5:	74 0d                	je     c00192b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00192a7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00192af:	75 0f                	jne    c00192c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00192b1:	8d 76 00             	lea    esi,[esi+0x0]
c00192b4:	b8 04 00 00 00       	mov    eax,0x4
c00192b9:	e9 3a 01 00 00       	jmp    c00193f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192be:	66 90                	xchg   ax,ax
c00192c0:	83 ec 08             	sub    esp,0x8
c00192c3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00192ca:	50                   	push   eax
c00192cb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00192d2:	e8 1f b4 fe ff       	call   c00046f6 <f_readdir>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00192e1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00192e8:	83 ec 0c             	sub    esp,0xc
c00192eb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00192f2:	83 c0 16             	add    eax,0x16
c00192f5:	50                   	push   eax
c00192f6:	e8 75 72 fe ff       	call   c0000570 <strlen>
c00192fb:	83 c4 10             	add    esp,0x10
c00192fe:	ba 00 00 00 00       	mov    edx,0x0
c0019303:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019307:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001930b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019312:	0f b6 c0             	movzx  eax,al
c0019315:	83 e0 10             	and    eax,0x10
c0019318:	74 0a                	je     c0019324 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001931a:	b8 02 00 00 00       	mov    eax,0x2
c001931f:	eb 0b                	jmp    c001932c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019321:	8d 76 00             	lea    esi,[esi+0x0]
c0019324:	b8 01 00 00 00       	mov    eax,0x1
c0019329:	8d 76 00             	lea    esi,[esi+0x0]
c001932c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019330:	83 ec 08             	sub    esp,0x8
c0019333:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001933a:	83 c0 16             	add    eax,0x16
c001933d:	50                   	push   eax
c001933e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019342:	83 c0 10             	add    eax,0x10
c0019345:	50                   	push   eax
c0019346:	e8 f5 72 fe ff       	call   c0000640 <strcpy>
c001934b:	83 c4 10             	add    esp,0x10
c001934e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019355:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001935c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019360:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019367:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001936e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019375:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001937c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019383:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001938a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019391:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019398:	89 c6                	mov    esi,eax
c001939a:	89 d7                	mov    edi,edx
c001939c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001939e:	89 c8                	mov    eax,ecx
c00193a0:	89 fa                	mov    edx,edi
c00193a2:	89 f3                	mov    ebx,esi
c00193a4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00193ab:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00193b2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00193b9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00193c0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00193c6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00193cd:	0f be c0             	movsx  eax,al
c00193d0:	85 c0                	test   eax,eax
c00193d2:	75 08                	jne    c00193dc <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00193d4:	b8 07 00 00 00       	mov    eax,0x7
c00193d9:	eb 1d                	jmp    c00193f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00193db:	90                   	nop
c00193dc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00193e3:	85 c0                	test   eax,eax
c00193e5:	75 09                	jne    c00193f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00193e7:	b8 00 00 00 00       	mov    eax,0x0
c00193ec:	eb 0a                	jmp    c00193f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00193ee:	66 90                	xchg   ax,ax
c00193f0:	b8 01 00 00 00       	mov    eax,0x1
c00193f5:	8d 76 00             	lea    esi,[esi+0x0]
c00193f8:	81 c4 50 02 00 00    	add    esp,0x250
c00193fe:	5b                   	pop    ebx
c00193ff:	5e                   	pop    esi
c0019400:	5f                   	pop    edi
c0019401:	c3                   	ret    
c0019402:	66 90                	xchg   ax,ax

c0019404 <FAT::read(void*, unsigned long, void*, int*)>:
c0019404:	83 ec 1c             	sub    esp,0x1c
c0019407:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001940c:	74 0a                	je     c0019418 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001940e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019413:	75 0b                	jne    c0019420 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019415:	8d 76 00             	lea    esi,[esi+0x0]
c0019418:	b8 04 00 00 00       	mov    eax,0x4
c001941d:	eb 41                	jmp    c0019460 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001941f:	90                   	nop
c0019420:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019424:	50                   	push   eax
c0019425:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019429:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001942d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019431:	e8 e7 aa fe ff       	call   c0003f1d <f_read>
c0019436:	83 c4 10             	add    esp,0x10
c0019439:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001943d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019441:	89 c2                	mov    edx,eax
c0019443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019447:	89 10                	mov    DWORD PTR [eax],edx
c0019449:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001944d:	85 c0                	test   eax,eax
c001944f:	75 07                	jne    c0019458 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019451:	b8 00 00 00 00       	mov    eax,0x0
c0019456:	eb 08                	jmp    c0019460 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019458:	b8 01 00 00 00       	mov    eax,0x1
c001945d:	8d 76 00             	lea    esi,[esi+0x0]
c0019460:	83 c4 1c             	add    esp,0x1c
c0019463:	c3                   	ret    

c0019464 <FAT::write(void*, unsigned long, void*, int*)>:
c0019464:	83 ec 1c             	sub    esp,0x1c
c0019467:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001946c:	74 0a                	je     c0019478 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001946e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019473:	75 0b                	jne    c0019480 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019475:	8d 76 00             	lea    esi,[esi+0x0]
c0019478:	b8 04 00 00 00       	mov    eax,0x4
c001947d:	eb 41                	jmp    c00194c0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001947f:	90                   	nop
c0019480:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019484:	50                   	push   eax
c0019485:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019489:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001948d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019491:	e8 86 ac fe ff       	call   c000411c <f_write>
c0019496:	83 c4 10             	add    esp,0x10
c0019499:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001949d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194a1:	89 c2                	mov    edx,eax
c00194a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194a7:	89 10                	mov    DWORD PTR [eax],edx
c00194a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194ad:	85 c0                	test   eax,eax
c00194af:	75 07                	jne    c00194b8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00194b1:	b8 00 00 00 00       	mov    eax,0x0
c00194b6:	eb 08                	jmp    c00194c0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00194b8:	b8 01 00 00 00       	mov    eax,0x1
c00194bd:	8d 76 00             	lea    esi,[esi+0x0]
c00194c0:	83 c4 1c             	add    esp,0x1c
c00194c3:	c3                   	ret    

c00194c4 <FAT::close(void*)>:
c00194c4:	83 ec 1c             	sub    esp,0x1c
c00194c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194cc:	75 0a                	jne    c00194d8 <FAT::close(void*)+0x14>
c00194ce:	b8 04 00 00 00       	mov    eax,0x4
c00194d3:	eb 3f                	jmp    c0019514 <FAT::close(void*)+0x50>
c00194d5:	8d 76 00             	lea    esi,[esi+0x0]
c00194d8:	83 ec 0c             	sub    esp,0xc
c00194db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194df:	e8 45 af fe ff       	call   c0004429 <f_close>
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194eb:	83 ec 0c             	sub    esp,0xc
c00194ee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194f2:	e8 cf e5 fe ff       	call   c0007ac6 <free>
c00194f7:	83 c4 10             	add    esp,0x10
c00194fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194fe:	85 c0                	test   eax,eax
c0019500:	75 0a                	jne    c001950c <FAT::close(void*)+0x48>
c0019502:	b8 00 00 00 00       	mov    eax,0x0
c0019507:	eb 0b                	jmp    c0019514 <FAT::close(void*)+0x50>
c0019509:	8d 76 00             	lea    esi,[esi+0x0]
c001950c:	b8 01 00 00 00       	mov    eax,0x1
c0019511:	8d 76 00             	lea    esi,[esi+0x0]
c0019514:	83 c4 1c             	add    esp,0x1c
c0019517:	c3                   	ret    

c0019518 <FAT::closeDir(void*)>:
c0019518:	83 ec 1c             	sub    esp,0x1c
c001951b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019520:	75 0a                	jne    c001952c <FAT::closeDir(void*)+0x14>
c0019522:	b8 04 00 00 00       	mov    eax,0x4
c0019527:	eb 3f                	jmp    c0019568 <FAT::closeDir(void*)+0x50>
c0019529:	8d 76 00             	lea    esi,[esi+0x0]
c001952c:	83 ec 0c             	sub    esp,0xc
c001952f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019533:	e8 9c b1 fe ff       	call   c00046d4 <f_closedir>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001953f:	83 ec 0c             	sub    esp,0xc
c0019542:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019546:	e8 7b e5 fe ff       	call   c0007ac6 <free>
c001954b:	83 c4 10             	add    esp,0x10
c001954e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019552:	85 c0                	test   eax,eax
c0019554:	75 0a                	jne    c0019560 <FAT::closeDir(void*)+0x48>
c0019556:	b8 00 00 00 00       	mov    eax,0x0
c001955b:	eb 0b                	jmp    c0019568 <FAT::closeDir(void*)+0x50>
c001955d:	8d 76 00             	lea    esi,[esi+0x0]
c0019560:	b8 01 00 00 00       	mov    eax,0x1
c0019565:	8d 76 00             	lea    esi,[esi+0x0]
c0019568:	83 c4 1c             	add    esp,0x1c
c001956b:	c3                   	ret    

c001956c <FAT::truncate(void*, unsigned long long)>:
c001956c:	83 ec 2c             	sub    esp,0x2c
c001956f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019573:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019577:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001957b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001957f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019584:	75 0a                	jne    c0019590 <FAT::truncate(void*, unsigned long long)+0x24>
c0019586:	b8 04 00 00 00       	mov    eax,0x4
c001958b:	eb 47                	jmp    c00195d4 <FAT::truncate(void*, unsigned long long)+0x68>
c001958d:	8d 76 00             	lea    esi,[esi+0x0]
c0019590:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019594:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019597:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001959b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00195a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195a7:	83 ec 08             	sub    esp,0x8
c00195aa:	50                   	push   eax
c00195ab:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00195af:	e8 a4 ae fe ff       	call   c0004458 <f_lseek>
c00195b4:	83 c4 10             	add    esp,0x10
c00195b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195bf:	85 c0                	test   eax,eax
c00195c1:	75 09                	jne    c00195cc <FAT::truncate(void*, unsigned long long)+0x60>
c00195c3:	b8 00 00 00 00       	mov    eax,0x0
c00195c8:	eb 0a                	jmp    c00195d4 <FAT::truncate(void*, unsigned long long)+0x68>
c00195ca:	66 90                	xchg   ax,ax
c00195cc:	b8 01 00 00 00       	mov    eax,0x1
c00195d1:	8d 76 00             	lea    esi,[esi+0x0]
c00195d4:	83 c4 2c             	add    esp,0x2c
c00195d7:	c3                   	ret    

c00195d8 <FAT::seek(void*, unsigned long long)>:
c00195d8:	83 ec 2c             	sub    esp,0x2c
c00195db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195eb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00195f0:	75 0a                	jne    c00195fc <FAT::seek(void*, unsigned long long)+0x24>
c00195f2:	b8 04 00 00 00       	mov    eax,0x4
c00195f7:	eb 33                	jmp    c001962c <FAT::seek(void*, unsigned long long)+0x54>
c00195f9:	8d 76 00             	lea    esi,[esi+0x0]
c00195fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019600:	83 ec 08             	sub    esp,0x8
c0019603:	50                   	push   eax
c0019604:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019608:	e8 4b ae fe ff       	call   c0004458 <f_lseek>
c001960d:	83 c4 10             	add    esp,0x10
c0019610:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019618:	85 c0                	test   eax,eax
c001961a:	75 08                	jne    c0019624 <FAT::seek(void*, unsigned long long)+0x4c>
c001961c:	b8 00 00 00 00       	mov    eax,0x0
c0019621:	eb 09                	jmp    c001962c <FAT::seek(void*, unsigned long long)+0x54>
c0019623:	90                   	nop
c0019624:	b8 01 00 00 00       	mov    eax,0x1
c0019629:	8d 76 00             	lea    esi,[esi+0x0]
c001962c:	83 c4 2c             	add    esp,0x2c
c001962f:	c3                   	ret    

c0019630 <fatWrapperReadDisk>:
c0019630:	53                   	push   ebx
c0019631:	83 ec 18             	sub    esp,0x18
c0019634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019638:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001963c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019641:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019648:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001964c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019650:	ba 00 00 00 00       	mov    edx,0x0
c0019655:	83 ec 0c             	sub    esp,0xc
c0019658:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001965c:	53                   	push   ebx
c001965d:	52                   	push   edx
c001965e:	50                   	push   eax
c001965f:	51                   	push   ecx
c0019660:	e8 ef 44 ff ff       	call   c000db54 <LogicalDisk::read(unsigned long long, int, void*)>
c0019665:	83 c4 20             	add    esp,0x20
c0019668:	83 c4 18             	add    esp,0x18
c001966b:	5b                   	pop    ebx
c001966c:	c3                   	ret    
c001966d:	8d 76 00             	lea    esi,[esi+0x0]

c0019670 <fatWrapperWriteDisk>:
c0019670:	53                   	push   ebx
c0019671:	83 ec 18             	sub    esp,0x18
c0019674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019678:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001967c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019681:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019688:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001968c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019690:	ba 00 00 00 00       	mov    edx,0x0
c0019695:	83 ec 0c             	sub    esp,0xc
c0019698:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001969c:	53                   	push   ebx
c001969d:	52                   	push   edx
c001969e:	50                   	push   eax
c001969f:	51                   	push   ecx
c00196a0:	e8 1b 45 ff ff       	call   c000dbc0 <LogicalDisk::write(unsigned long long, int, void*)>
c00196a5:	83 c4 20             	add    esp,0x20
c00196a8:	83 c4 18             	add    esp,0x18
c00196ab:	5b                   	pop    ebx
c00196ac:	c3                   	ret    
c00196ad:	8d 76 00             	lea    esi,[esi+0x0]

c00196b0 <fatWrapperIoctl>:
c00196b0:	53                   	push   ebx
c00196b1:	83 ec 28             	sub    esp,0x28
c00196b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00196bc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00196c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00196c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196c9:	83 f8 02             	cmp    eax,0x2
c00196cc:	75 32                	jne    c0019700 <fatWrapperIoctl+0x50>
c00196ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196db:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00196e2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196e8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00196ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196f2:	66 89 02             	mov    WORD PTR [edx],ax
c00196f5:	b8 00 00 00 00       	mov    eax,0x0
c00196fa:	e9 c5 00 00 00       	jmp    c00197c4 <fatWrapperIoctl+0x114>
c00196ff:	90                   	nop
c0019700:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019705:	83 f8 01             	cmp    eax,0x1
c0019708:	75 6a                	jne    c0019774 <fatWrapperIoctl+0xc4>
c001970a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001970e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019712:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019717:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001971e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019724:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001972a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019730:	89 c8                	mov    eax,ecx
c0019732:	89 da                	mov    edx,ebx
c0019734:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019738:	c1 e0 0a             	shl    eax,0xa
c001973b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019740:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0019747:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001974d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019753:	89 cb                	mov    ebx,ecx
c0019755:	c1 fb 1f             	sar    ebx,0x1f
c0019758:	53                   	push   ebx
c0019759:	51                   	push   ecx
c001975a:	52                   	push   edx
c001975b:	50                   	push   eax
c001975c:	e8 6f 5b 00 00       	call   c001f2d0 <__udivdi3>
c0019761:	83 c4 10             	add    esp,0x10
c0019764:	89 c2                	mov    edx,eax
c0019766:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001976a:	89 10                	mov    DWORD PTR [eax],edx
c001976c:	b8 00 00 00 00       	mov    eax,0x0
c0019771:	eb 51                	jmp    c00197c4 <fatWrapperIoctl+0x114>
c0019773:	90                   	nop
c0019774:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019779:	85 c0                	test   eax,eax
c001977b:	75 07                	jne    c0019784 <fatWrapperIoctl+0xd4>
c001977d:	b8 00 00 00 00       	mov    eax,0x0
c0019782:	eb 40                	jmp    c00197c4 <fatWrapperIoctl+0x114>
c0019784:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019789:	83 f8 03             	cmp    eax,0x3
c001978c:	75 1a                	jne    c00197a8 <fatWrapperIoctl+0xf8>
c001978e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019792:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019796:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001979a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00197a0:	b8 00 00 00 00       	mov    eax,0x0
c00197a5:	eb 1d                	jmp    c00197c4 <fatWrapperIoctl+0x114>
c00197a7:	90                   	nop
c00197a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00197ad:	83 f8 04             	cmp    eax,0x4
c00197b0:	75 0a                	jne    c00197bc <fatWrapperIoctl+0x10c>
c00197b2:	b8 00 00 00 00       	mov    eax,0x0
c00197b7:	eb 0b                	jmp    c00197c4 <fatWrapperIoctl+0x114>
c00197b9:	8d 76 00             	lea    esi,[esi+0x0]
c00197bc:	b8 04 00 00 00       	mov    eax,0x4
c00197c1:	8d 76 00             	lea    esi,[esi+0x0]
c00197c4:	83 c4 28             	add    esp,0x28
c00197c7:	5b                   	pop    ebx
c00197c8:	c3                   	ret    
c00197c9:	90                   	nop
c00197ca:	66 90                	xchg   ax,ax

c00197cc <FAT::FAT()>:
c00197cc:	83 ec 1c             	sub    esp,0x1c
c00197cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197d3:	83 ec 0c             	sub    esp,0xc
c00197d6:	50                   	push   eax
c00197d7:	e8 64 1d ff ff       	call   c000b540 <Filesystem::Filesystem()>
c00197dc:	83 c4 10             	add    esp,0x10
c00197df:	ba 2c 29 02 c0       	mov    edx,0xc002292c
c00197e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197e8:	89 10                	mov    DWORD PTR [eax],edx
c00197ea:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00197f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197fc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019801:	7f 19                	jg     c001981c <FAT::FAT()+0x50>
c0019803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019807:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c0019812:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019817:	eb e3                	jmp    c00197fc <FAT::FAT()+0x30>
c0019819:	8d 76 00             	lea    esi,[esi+0x0]
c001981c:	90                   	nop
c001981d:	83 c4 1c             	add    esp,0x1c
c0019820:	c3                   	ret    
c0019821:	90                   	nop
c0019822:	66 90                	xchg   ax,ax

c0019824 <FAT::fixFilepath(char*)>:
c0019824:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019828:	8a 00                	mov    al,BYTE PTR [eax]
c001982a:	0f be c0             	movsx  eax,al
c001982d:	83 f8 40             	cmp    eax,0x40
c0019830:	7e 2e                	jle    c0019860 <FAT::fixFilepath(char*)+0x3c>
c0019832:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019836:	8a 00                	mov    al,BYTE PTR [eax]
c0019838:	83 e8 41             	sub    eax,0x41
c001983b:	88 c2                	mov    dl,al
c001983d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019841:	88 10                	mov    BYTE PTR [eax],dl
c0019843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019847:	8a 00                	mov    al,BYTE PTR [eax]
c0019849:	0f be c0             	movsx  eax,al
c001984c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0019853:	83 c0 30             	add    eax,0x30
c0019856:	88 c2                	mov    dl,al
c0019858:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001985c:	88 10                	mov    BYTE PTR [eax],dl
c001985e:	66 90                	xchg   ax,ax
c0019860:	90                   	nop
c0019861:	c3                   	ret    
c0019862:	66 90                	xchg   ax,ax

c0019864 <FAT::open(char const*, void**, FileOpenMode)>:
c0019864:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001986a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019872:	74 0c                	je     c0019880 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019874:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001987c:	75 0e                	jne    c001988c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001987e:	66 90                	xchg   ax,ax
c0019880:	b8 04 00 00 00       	mov    eax,0x4
c0019885:	e9 46 01 00 00       	jmp    c00199d0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001988a:	66 90                	xchg   ax,ax
c001988c:	83 ec 08             	sub    esp,0x8
c001988f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019896:	8d 44 24 14          	lea    eax,[esp+0x14]
c001989a:	50                   	push   eax
c001989b:	e8 a0 6d fe ff       	call   c0000640 <strcpy>
c00198a0:	83 c4 10             	add    esp,0x10
c00198a3:	83 ec 08             	sub    esp,0x8
c00198a6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198aa:	50                   	push   eax
c00198ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198b2:	e8 6d ff ff ff       	call   c0019824 <FAT::fixFilepath(char*)>
c00198b7:	83 c4 10             	add    esp,0x10
c00198ba:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00198c2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198c9:	83 e0 01             	and    eax,0x1
c00198cc:	74 12                	je     c00198e0 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00198ce:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198d5:	83 c8 01             	or     eax,0x1
c00198d8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198df:	90                   	nop
c00198e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198e7:	83 e0 04             	and    eax,0x4
c00198ea:	74 24                	je     c0019910 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00198ec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198f3:	83 c8 30             	or     eax,0x30
c00198f6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198fd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019904:	83 c8 02             	or     eax,0x2
c0019907:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001990e:	66 90                	xchg   ax,ax
c0019910:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019917:	83 e0 02             	and    eax,0x2
c001991a:	74 14                	je     c0019930 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001991c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019923:	83 c8 02             	or     eax,0x2
c0019926:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001992d:	8d 76 00             	lea    esi,[esi+0x0]
c0019930:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019937:	83 e0 08             	and    eax,0x8
c001993a:	74 14                	je     c0019950 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001993c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019943:	83 c8 04             	or     eax,0x4
c0019946:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001994d:	8d 76 00             	lea    esi,[esi+0x0]
c0019950:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019957:	83 e0 10             	and    eax,0x10
c001995a:	74 14                	je     c0019970 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001995c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019963:	83 c8 08             	or     eax,0x8
c0019966:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	83 ec 0c             	sub    esp,0xc
c0019973:	68 28 02 00 00       	push   0x228
c0019978:	e8 39 e1 fe ff       	call   c0007ab6 <malloc>
c001997d:	83 c4 10             	add    esp,0x10
c0019980:	89 c2                	mov    edx,eax
c0019982:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019989:	89 10                	mov    DWORD PTR [eax],edx
c001998b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019993:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001999a:	8b 00                	mov    eax,DWORD PTR [eax]
c001999c:	83 ec 04             	sub    esp,0x4
c001999f:	52                   	push   edx
c00199a0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00199a4:	52                   	push   edx
c00199a5:	50                   	push   eax
c00199a6:	e8 af a2 fe ff       	call   c0003c5a <f_open>
c00199ab:	83 c4 10             	add    esp,0x10
c00199ae:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00199b5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00199bd:	74 09                	je     c00199c8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00199bf:	b8 01 00 00 00       	mov    eax,0x1
c00199c4:	eb 0a                	jmp    c00199d0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00199c6:	66 90                	xchg   ax,ax
c00199c8:	b8 00 00 00 00       	mov    eax,0x0
c00199cd:	8d 76 00             	lea    esi,[esi+0x0]
c00199d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199d6:	c3                   	ret    
c00199d7:	90                   	nop

c00199d8 <FAT::openDir(char const*, void**)>:
c00199d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199e6:	74 0c                	je     c00199f4 <FAT::openDir(char const*, void**)+0x1c>
c00199e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00199f0:	75 0e                	jne    c0019a00 <FAT::openDir(char const*, void**)+0x28>
c00199f2:	66 90                	xchg   ax,ax
c00199f4:	b8 04 00 00 00       	mov    eax,0x4
c00199f9:	e9 82 00 00 00       	jmp    c0019a80 <FAT::openDir(char const*, void**)+0xa8>
c00199fe:	66 90                	xchg   ax,ax
c0019a00:	83 ec 08             	sub    esp,0x8
c0019a03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a0e:	50                   	push   eax
c0019a0f:	e8 2c 6c fe ff       	call   c0000640 <strcpy>
c0019a14:	83 c4 10             	add    esp,0x10
c0019a17:	83 ec 08             	sub    esp,0x8
c0019a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a1e:	50                   	push   eax
c0019a1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a26:	e8 f9 fd ff ff       	call   c0019824 <FAT::fixFilepath(char*)>
c0019a2b:	83 c4 10             	add    esp,0x10
c0019a2e:	83 ec 0c             	sub    esp,0xc
c0019a31:	6a 30                	push   0x30
c0019a33:	e8 7e e0 fe ff       	call   c0007ab6 <malloc>
c0019a38:	83 c4 10             	add    esp,0x10
c0019a3b:	89 c2                	mov    edx,eax
c0019a3d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a44:	89 10                	mov    DWORD PTR [eax],edx
c0019a46:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a4f:	83 ec 08             	sub    esp,0x8
c0019a52:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019a56:	52                   	push   edx
c0019a57:	50                   	push   eax
c0019a58:	e8 ac ab fe ff       	call   c0004609 <f_opendir>
c0019a5d:	83 c4 10             	add    esp,0x10
c0019a60:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a67:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019a6f:	74 07                	je     c0019a78 <FAT::openDir(char const*, void**)+0xa0>
c0019a71:	b8 01 00 00 00       	mov    eax,0x1
c0019a76:	eb 08                	jmp    c0019a80 <FAT::openDir(char const*, void**)+0xa8>
c0019a78:	b8 00 00 00 00       	mov    eax,0x0
c0019a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a80:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a86:	c3                   	ret    
c0019a87:	90                   	nop

c0019a88 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a88:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a8e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a96:	75 0c                	jne    c0019aa4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019a98:	b8 04 00 00 00       	mov    eax,0x4
c0019a9d:	e9 d6 00 00 00       	jmp    c0019b78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019aa2:	66 90                	xchg   ax,ax
c0019aa4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019aac:	75 0a                	jne    c0019ab8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019aae:	b8 04 00 00 00       	mov    eax,0x4
c0019ab3:	e9 c0 00 00 00       	jmp    c0019b78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ab8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019ac0:	75 0a                	jne    c0019acc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019ac2:	b8 04 00 00 00       	mov    eax,0x4
c0019ac7:	e9 ac 00 00 00       	jmp    c0019b78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019acc:	83 ec 08             	sub    esp,0x8
c0019acf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ad6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019add:	50                   	push   eax
c0019ade:	e8 5d 6b fe ff       	call   c0000640 <strcpy>
c0019ae3:	83 c4 10             	add    esp,0x10
c0019ae6:	83 ec 08             	sub    esp,0x8
c0019ae9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019af0:	50                   	push   eax
c0019af1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019af8:	e8 27 fd ff ff       	call   c0019824 <FAT::fixFilepath(char*)>
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	83 ec 08             	sub    esp,0x8
c0019b03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019b07:	50                   	push   eax
c0019b08:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019b0f:	50                   	push   eax
c0019b10:	e8 73 ac fe ff       	call   c0004788 <f_stat>
c0019b15:	83 c4 10             	add    esp,0x10
c0019b18:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019b1f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019b26:	85 c0                	test   eax,eax
c0019b28:	74 0a                	je     c0019b34 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019b2a:	83 f8 04             	cmp    eax,0x4
c0019b2d:	74 39                	je     c0019b68 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019b2f:	eb 3f                	jmp    c0019b70 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019b31:	8d 76 00             	lea    esi,[esi+0x0]
c0019b34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b38:	0f b6 c0             	movzx  eax,al
c0019b3b:	83 e0 10             	and    eax,0x10
c0019b3e:	0f 95 c2             	setne  dl
c0019b41:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019b48:	88 10                	mov    BYTE PTR [eax],dl
c0019b4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b4e:	ba 00 00 00 00       	mov    edx,0x0
c0019b53:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019b5a:	89 01                	mov    DWORD PTR [ecx],eax
c0019b5c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b5f:	b8 00 00 00 00       	mov    eax,0x0
c0019b64:	eb 12                	jmp    c0019b78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b66:	66 90                	xchg   ax,ax
c0019b68:	b8 02 00 00 00       	mov    eax,0x2
c0019b6d:	eb 09                	jmp    c0019b78 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019b6f:	90                   	nop
c0019b70:	b8 01 00 00 00       	mov    eax,0x1
c0019b75:	8d 76 00             	lea    esi,[esi+0x0]
c0019b78:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b7e:	c3                   	ret    
c0019b7f:	90                   	nop

c0019b80 <FAT::unlink(char const*)>:
c0019b80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b8e:	75 08                	jne    c0019b98 <FAT::unlink(char const*)+0x18>
c0019b90:	b8 04 00 00 00       	mov    eax,0x4
c0019b95:	eb 61                	jmp    c0019bf8 <FAT::unlink(char const*)+0x78>
c0019b97:	90                   	nop
c0019b98:	83 ec 08             	sub    esp,0x8
c0019b9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ba2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ba6:	50                   	push   eax
c0019ba7:	e8 94 6a fe ff       	call   c0000640 <strcpy>
c0019bac:	83 c4 10             	add    esp,0x10
c0019baf:	83 ec 08             	sub    esp,0x8
c0019bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bb6:	50                   	push   eax
c0019bb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019bbe:	e8 61 fc ff ff       	call   c0019824 <FAT::fixFilepath(char*)>
c0019bc3:	83 c4 10             	add    esp,0x10
c0019bc6:	83 ec 0c             	sub    esp,0xc
c0019bc9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019bcd:	50                   	push   eax
c0019bce:	e8 27 ae fe ff       	call   c00049fa <f_unlink>
c0019bd3:	83 c4 10             	add    esp,0x10
c0019bd6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019bdd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019be4:	85 c0                	test   eax,eax
c0019be6:	75 08                	jne    c0019bf0 <FAT::unlink(char const*)+0x70>
c0019be8:	b8 00 00 00 00       	mov    eax,0x0
c0019bed:	eb 09                	jmp    c0019bf8 <FAT::unlink(char const*)+0x78>
c0019bef:	90                   	nop
c0019bf0:	b8 01 00 00 00       	mov    eax,0x1
c0019bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bf8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019bfe:	c3                   	ret    
c0019bff:	90                   	nop

c0019c00 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019c00:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019c06:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019c0d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019c14:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019c18:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c1c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019c24:	75 0a                	jne    c0019c30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019c26:	b8 04 00 00 00       	mov    eax,0x4
c0019c2b:	e9 7c 01 00 00       	jmp    c0019dac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019c30:	83 ec 08             	sub    esp,0x8
c0019c33:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c3a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c3e:	50                   	push   eax
c0019c3f:	e8 fc 69 fe ff       	call   c0000640 <strcpy>
c0019c44:	83 c4 10             	add    esp,0x10
c0019c47:	83 ec 08             	sub    esp,0x8
c0019c4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c4e:	50                   	push   eax
c0019c4f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c56:	e8 c9 fb ff ff       	call   c0019824 <FAT::fixFilepath(char*)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019c66:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c6e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c73:	83 e0 01             	and    eax,0x1
c0019c76:	74 14                	je     c0019c8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019c78:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c7f:	83 c8 01             	or     eax,0x1
c0019c82:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c89:	8d 76 00             	lea    esi,[esi+0x0]
c0019c8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c91:	83 e0 02             	and    eax,0x2
c0019c94:	74 12                	je     c0019ca8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019c96:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c9d:	83 c8 20             	or     eax,0x20
c0019ca0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ca7:	90                   	nop
c0019ca8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cad:	83 e0 04             	and    eax,0x4
c0019cb0:	74 12                	je     c0019cc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019cb2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cb9:	83 c8 04             	or     eax,0x4
c0019cbc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019cc3:	90                   	nop
c0019cc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cc9:	83 e0 08             	and    eax,0x8
c0019ccc:	74 12                	je     c0019ce0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019cce:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cd5:	83 c8 02             	or     eax,0x2
c0019cd8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019cdf:	90                   	nop
c0019ce0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ce5:	83 e0 01             	and    eax,0x1
c0019ce8:	74 12                	je     c0019cfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019cea:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019cf1:	83 c8 01             	or     eax,0x1
c0019cf4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cfb:	90                   	nop
c0019cfc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d01:	83 e0 02             	and    eax,0x2
c0019d04:	74 12                	je     c0019d18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019d06:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d0d:	83 c8 20             	or     eax,0x20
c0019d10:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d17:	90                   	nop
c0019d18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d1d:	83 e0 04             	and    eax,0x4
c0019d20:	74 12                	je     c0019d34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019d22:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d29:	83 c8 04             	or     eax,0x4
c0019d2c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d33:	90                   	nop
c0019d34:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019d39:	83 e0 08             	and    eax,0x8
c0019d3c:	74 12                	je     c0019d50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019d3e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019d45:	83 c8 02             	or     eax,0x2
c0019d48:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d4f:	90                   	nop
c0019d50:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019d57:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019d5e:	09 d0                	or     eax,edx
c0019d60:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019d67:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019d6f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019d77:	83 ec 04             	sub    esp,0x4
c0019d7a:	52                   	push   edx
c0019d7b:	50                   	push   eax
c0019d7c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d80:	50                   	push   eax
c0019d81:	e8 e9 b0 fe ff       	call   c0004e6f <f_chmod>
c0019d86:	83 c4 10             	add    esp,0x10
c0019d89:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019d90:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019d97:	85 c0                	test   eax,eax
c0019d99:	75 09                	jne    c0019da4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019d9b:	b8 00 00 00 00       	mov    eax,0x0
c0019da0:	eb 0a                	jmp    c0019dac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019da2:	66 90                	xchg   ax,ax
c0019da4:	b8 01 00 00 00       	mov    eax,0x1
c0019da9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dac:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019db2:	c3                   	ret    
c0019db3:	90                   	nop

c0019db4 <FAT::rename(char const*, char const*)>:
c0019db4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019dba:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019dc2:	74 0c                	je     c0019dd0 <FAT::rename(char const*, char const*)+0x1c>
c0019dc4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019dcc:	75 0e                	jne    c0019ddc <FAT::rename(char const*, char const*)+0x28>
c0019dce:	66 90                	xchg   ax,ax
c0019dd0:	b8 04 00 00 00       	mov    eax,0x4
c0019dd5:	e9 9e 00 00 00       	jmp    c0019e78 <FAT::rename(char const*, char const*)+0xc4>
c0019dda:	66 90                	xchg   ax,ax
c0019ddc:	83 ec 08             	sub    esp,0x8
c0019ddf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019de6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ded:	50                   	push   eax
c0019dee:	e8 4d 68 fe ff       	call   c0000640 <strcpy>
c0019df3:	83 c4 10             	add    esp,0x10
c0019df6:	83 ec 08             	sub    esp,0x8
c0019df9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019e00:	50                   	push   eax
c0019e01:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e08:	e8 17 fa ff ff       	call   c0019824 <FAT::fixFilepath(char*)>
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	83 ec 08             	sub    esp,0x8
c0019e13:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019e1a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e1e:	50                   	push   eax
c0019e1f:	e8 1c 68 fe ff       	call   c0000640 <strcpy>
c0019e24:	83 c4 10             	add    esp,0x10
c0019e27:	83 ec 08             	sub    esp,0x8
c0019e2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e2e:	50                   	push   eax
c0019e2f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019e36:	e8 e9 f9 ff ff       	call   c0019824 <FAT::fixFilepath(char*)>
c0019e3b:	83 c4 10             	add    esp,0x10
c0019e3e:	83 ec 08             	sub    esp,0x8
c0019e41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e45:	50                   	push   eax
c0019e46:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019e4d:	50                   	push   eax
c0019e4e:	e8 64 ae fe ff       	call   c0004cb7 <f_rename>
c0019e53:	83 c4 10             	add    esp,0x10
c0019e56:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019e5d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019e64:	85 c0                	test   eax,eax
c0019e66:	75 08                	jne    c0019e70 <FAT::rename(char const*, char const*)+0xbc>
c0019e68:	b8 00 00 00 00       	mov    eax,0x0
c0019e6d:	eb 09                	jmp    c0019e78 <FAT::rename(char const*, char const*)+0xc4>
c0019e6f:	90                   	nop
c0019e70:	b8 01 00 00 00       	mov    eax,0x1
c0019e75:	8d 76 00             	lea    esi,[esi+0x0]
c0019e78:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019e7e:	c3                   	ret    
c0019e7f:	90                   	nop

c0019e80 <FAT::mkdir(char const*)>:
c0019e80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e8e:	75 08                	jne    c0019e98 <FAT::mkdir(char const*)+0x18>
c0019e90:	b8 04 00 00 00       	mov    eax,0x4
c0019e95:	eb 61                	jmp    c0019ef8 <FAT::mkdir(char const*)+0x78>
c0019e97:	90                   	nop
c0019e98:	83 ec 08             	sub    esp,0x8
c0019e9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ea2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ea6:	50                   	push   eax
c0019ea7:	e8 94 67 fe ff       	call   c0000640 <strcpy>
c0019eac:	83 c4 10             	add    esp,0x10
c0019eaf:	83 ec 08             	sub    esp,0x8
c0019eb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019eb6:	50                   	push   eax
c0019eb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ebe:	e8 61 f9 ff ff       	call   c0019824 <FAT::fixFilepath(char*)>
c0019ec3:	83 c4 10             	add    esp,0x10
c0019ec6:	83 ec 0c             	sub    esp,0xc
c0019ec9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ecd:	50                   	push   eax
c0019ece:	e8 49 ac fe ff       	call   c0004b1c <f_mkdir>
c0019ed3:	83 c4 10             	add    esp,0x10
c0019ed6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019edd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019ee4:	85 c0                	test   eax,eax
c0019ee6:	75 08                	jne    c0019ef0 <FAT::mkdir(char const*)+0x70>
c0019ee8:	b8 00 00 00 00       	mov    eax,0x0
c0019eed:	eb 09                	jmp    c0019ef8 <FAT::mkdir(char const*)+0x78>
c0019eef:	90                   	nop
c0019ef0:	b8 01 00 00 00       	mov    eax,0x1
c0019ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ef8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019efe:	c3                   	ret    
c0019eff:	90                   	nop

c0019f00 <FAT::exists(char const*)>:
c0019f00:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f06:	83 ec 08             	sub    esp,0x8
c0019f09:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f14:	50                   	push   eax
c0019f15:	e8 26 67 fe ff       	call   c0000640 <strcpy>
c0019f1a:	83 c4 10             	add    esp,0x10
c0019f1d:	83 ec 08             	sub    esp,0x8
c0019f20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f24:	50                   	push   eax
c0019f25:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f2c:	e8 f3 f8 ff ff       	call   c0019824 <FAT::fixFilepath(char*)>
c0019f31:	83 c4 10             	add    esp,0x10
c0019f34:	83 ec 08             	sub    esp,0x8
c0019f37:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019f3e:	50                   	push   eax
c0019f3f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019f43:	50                   	push   eax
c0019f44:	e8 3f a8 fe ff       	call   c0004788 <f_stat>
c0019f49:	83 c4 10             	add    esp,0x10
c0019f4c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f53:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f5a:	85 c0                	test   eax,eax
c0019f5c:	75 06                	jne    c0019f64 <FAT::exists(char const*)+0x64>
c0019f5e:	b0 01                	mov    al,0x1
c0019f60:	eb 06                	jmp    c0019f68 <FAT::exists(char const*)+0x68>
c0019f62:	66 90                	xchg   ax,ax
c0019f64:	b0 00                	mov    al,0x0
c0019f66:	66 90                	xchg   ax,ax
c0019f68:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019f6e:	c3                   	ret    
c0019f6f:	90                   	nop

c0019f70 <isoReadDiscSectorHelper>:
c0019f70:	83 ec 2c             	sub    esp,0x2c
c0019f73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019f77:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f7b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019f80:	83 e8 41             	sub    eax,0x41
c0019f83:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019f8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f8e:	ba 00 00 00 00       	mov    edx,0x0
c0019f93:	83 ec 0c             	sub    esp,0xc
c0019f96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f9a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f9e:	52                   	push   edx
c0019f9f:	50                   	push   eax
c0019fa0:	51                   	push   ecx
c0019fa1:	e8 ae 3b ff ff       	call   c000db54 <LogicalDisk::read(unsigned long long, int, void*)>
c0019fa6:	83 c4 20             	add    esp,0x20
c0019fa9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019fad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019fb2:	74 0c                	je     c0019fc0 <isoReadDiscSectorHelper+0x50>
c0019fb4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fb8:	c1 e0 0b             	shl    eax,0xb
c0019fbb:	eb 0b                	jmp    c0019fc8 <isoReadDiscSectorHelper+0x58>
c0019fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc0:	b8 00 00 00 00       	mov    eax,0x0
c0019fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fc8:	83 c4 2c             	add    esp,0x2c
c0019fcb:	c3                   	ret    

c0019fcc <iso_kprintf>:
c0019fcc:	83 ec 0c             	sub    esp,0xc
c0019fcf:	83 ec 08             	sub    esp,0x8
c0019fd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019fd6:	68 da 26 02 c0       	push   0xc00226da
c0019fdb:	e8 65 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019fe0:	83 c4 10             	add    esp,0x10
c0019fe3:	90                   	nop
c0019fe4:	83 c4 0c             	add    esp,0xc
c0019fe7:	c3                   	ret    

c0019fe8 <iso_kprintfd>:
c0019fe8:	83 ec 0c             	sub    esp,0xc
c0019feb:	83 ec 08             	sub    esp,0x8
c0019fee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ff2:	68 9a 0e 02 c0       	push   0xc0020e9a
c0019ff7:	e8 49 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	90                   	nop
c001a000:	83 c4 0c             	add    esp,0xc
c001a003:	c3                   	ret    

c001a004 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a004:	b8 08 00 00 00       	mov    eax,0x8
c001a009:	c3                   	ret    

c001a00a <ISO9660::truncate(void*, unsigned long long)>:
c001a00a:	b8 01 00 00 00       	mov    eax,0x1
c001a00f:	c3                   	ret    

c001a010 <ISO9660::getName()>:
c001a010:	b8 90 29 02 c0       	mov    eax,0xc0022990
c001a015:	c3                   	ret    

c001a016 <ISO9660::closeDir(void*)>:
c001a016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a01a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a01c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a01f:	90                   	nop

c001a020 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a020:	b8 01 00 00 00       	mov    eax,0x1
c001a025:	c3                   	ret    

c001a026 <ISO9660::unlink(char const*)>:
c001a026:	b8 01 00 00 00       	mov    eax,0x1
c001a02b:	c3                   	ret    

c001a02c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a02c:	b8 03 00 00 00       	mov    eax,0x3
c001a031:	c3                   	ret    

c001a032 <ISO9660::rename(char const*, char const*)>:
c001a032:	b8 01 00 00 00       	mov    eax,0x1
c001a037:	c3                   	ret    

c001a038 <ISO9660::mkdir(char const*)>:
c001a038:	b8 01 00 00 00       	mov    eax,0x1
c001a03d:	c3                   	ret    

c001a03e <ISO9660::~ISO9660()>:
c001a03e:	83 ec 0c             	sub    esp,0xc
c001a041:	ba d0 2a 02 c0       	mov    edx,0xc0022ad0
c001a046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a04a:	89 10                	mov    DWORD PTR [eax],edx
c001a04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a050:	83 ec 0c             	sub    esp,0xc
c001a053:	50                   	push   eax
c001a054:	e8 0b 15 ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c001a059:	83 c4 10             	add    esp,0x10
c001a05c:	90                   	nop
c001a05d:	83 c4 0c             	add    esp,0xc
c001a060:	c3                   	ret    
c001a061:	90                   	nop

c001a062 <ISO9660::~ISO9660()>:
c001a062:	83 ec 0c             	sub    esp,0xc
c001a065:	83 ec 0c             	sub    esp,0xc
c001a068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a06c:	e8 cd ff ff ff       	call   c001a03e <ISO9660::~ISO9660()>
c001a071:	83 c4 10             	add    esp,0x10
c001a074:	83 ec 08             	sub    esp,0x8
c001a077:	6a 08                	push   0x8
c001a079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a07d:	e8 96 07 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a082:	83 c4 10             	add    esp,0x10
c001a085:	83 c4 0c             	add    esp,0xc
c001a088:	c3                   	ret    
c001a089:	90                   	nop

c001a08a <ISO9660::exists(char const*)>:
c001a08a:	83 ec 18             	sub    esp,0x18
c001a08d:	68 ab 29 02 c0       	push   0xc00229ab
c001a092:	e8 0a 73 ff ff       	call   c00113a1 <KePanic(char const*)>
c001a097:	31 c0                	xor    eax,eax
c001a099:	83 c4 1c             	add    esp,0x1c
c001a09c:	c3                   	ret    
c001a09d:	90                   	nop

c001a09e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a09e:	56                   	push   esi
c001a09f:	53                   	push   ebx
c001a0a0:	53                   	push   ebx
c001a0a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a0a5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a0a9:	85 db                	test   ebx,ebx
c001a0ab:	0f 84 ca 00 00 00    	je     c001a17b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a0b1:	85 f6                	test   esi,esi
c001a0b3:	0f 84 c2 00 00 00    	je     c001a17b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a0b9:	b8 03 00 00 00       	mov    eax,0x3
c001a0be:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a0c3:	0f 85 b7 00 00 00    	jne    c001a180 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a0c9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a0cb:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a0d2:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a0d8:	74 1b                	je     c001a0f5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a0da:	85 c0                	test   eax,eax
c001a0dc:	74 10                	je     c001a0ee <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a0de:	83 ec 0c             	sub    esp,0xc
c001a0e1:	68 c9 29 02 c0       	push   0xc00229c9
c001a0e6:	e8 b6 72 ff ff       	call   c00113a1 <KePanic(char const*)>
c001a0eb:	83 c4 10             	add    esp,0x10
c001a0ee:	8a 03                	mov    al,BYTE PTR [ebx]
c001a0f0:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a0f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a0f8:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a0ff:	85 c0                	test   eax,eax
c001a101:	74 09                	je     c001a10c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a103:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a10a:	74 48                	je     c001a154 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a10c:	83 ec 0c             	sub    esp,0xc
c001a10f:	68 d9 29 02 c0       	push   0xc00229d9
c001a114:	e8 2c 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a119:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a11c:	83 c4 10             	add    esp,0x10
c001a11f:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a126:	85 c0                	test   eax,eax
c001a128:	74 17                	je     c001a141 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a12a:	83 ec 0c             	sub    esp,0xc
c001a12d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a134:	68 f9 29 02 c0       	push   0xc00229f9
c001a139:	e8 07 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a13e:	83 c4 10             	add    esp,0x10
c001a141:	83 ec 0c             	sub    esp,0xc
c001a144:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a14b:	50                   	push   eax
c001a14c:	e8 f5 c8 fe ff       	call   c0006a46 <init_percd>
c001a151:	83 c4 10             	add    esp,0x10
c001a154:	83 c3 03             	add    ebx,0x3
c001a157:	51                   	push   ecx
c001a158:	51                   	push   ecx
c001a159:	6a 00                	push   0x0
c001a15b:	53                   	push   ebx
c001a15c:	e8 ac c3 fe ff       	call   c000650d <iso_open>
c001a161:	83 c4 10             	add    esp,0x10
c001a164:	89 c2                	mov    edx,eax
c001a166:	b8 01 00 00 00       	mov    eax,0x1
c001a16b:	83 fa ff             	cmp    edx,0xffffffff
c001a16e:	74 10                	je     c001a180 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a170:	83 c2 32             	add    edx,0x32
c001a173:	31 c0                	xor    eax,eax
c001a175:	01 d2                	add    edx,edx
c001a177:	89 16                	mov    DWORD PTR [esi],edx
c001a179:	eb 05                	jmp    c001a180 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a17b:	b8 04 00 00 00       	mov    eax,0x4
c001a180:	5a                   	pop    edx
c001a181:	5b                   	pop    ebx
c001a182:	5e                   	pop    esi
c001a183:	c3                   	ret    

c001a184 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a184:	53                   	push   ebx
c001a185:	83 ec 08             	sub    esp,0x8
c001a188:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a18c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a190:	85 c0                	test   eax,eax
c001a192:	74 2d                	je     c001a1c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a194:	85 db                	test   ebx,ebx
c001a196:	74 29                	je     c001a1c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a198:	b9 02 00 00 00       	mov    ecx,0x2
c001a19d:	52                   	push   edx
c001a19e:	99                   	cdq    
c001a19f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1a3:	f7 f9                	idiv   ecx
c001a1a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1a9:	83 e8 32             	sub    eax,0x32
c001a1ac:	50                   	push   eax
c001a1ad:	e8 03 c4 fe ff       	call   c00065b5 <iso_read>
c001a1b2:	83 c4 10             	add    esp,0x10
c001a1b5:	89 03                	mov    DWORD PTR [ebx],eax
c001a1b7:	09 d0                	or     eax,edx
c001a1b9:	0f 94 c0             	sete   al
c001a1bc:	0f b6 c0             	movzx  eax,al
c001a1bf:	eb 05                	jmp    c001a1c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a1c1:	b8 04 00 00 00       	mov    eax,0x4
c001a1c6:	83 c4 08             	add    esp,0x8
c001a1c9:	5b                   	pop    ebx
c001a1ca:	c3                   	ret    
c001a1cb:	90                   	nop

c001a1cc <ISO9660::seek(void*, unsigned long long)>:
c001a1cc:	57                   	push   edi
c001a1cd:	56                   	push   esi
c001a1ce:	b8 04 00 00 00       	mov    eax,0x4
c001a1d3:	51                   	push   ecx
c001a1d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a1d8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a1dc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a1e0:	85 d2                	test   edx,edx
c001a1e2:	74 26                	je     c001a20a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a1e4:	6a 00                	push   0x0
c001a1e6:	b9 02 00 00 00       	mov    ecx,0x2
c001a1eb:	57                   	push   edi
c001a1ec:	89 d0                	mov    eax,edx
c001a1ee:	56                   	push   esi
c001a1ef:	99                   	cdq    
c001a1f0:	f7 f9                	idiv   ecx
c001a1f2:	83 e8 32             	sub    eax,0x32
c001a1f5:	50                   	push   eax
c001a1f6:	e8 d0 c4 fe ff       	call   c00066cb <iso_seek>
c001a1fb:	83 c4 10             	add    esp,0x10
c001a1fe:	31 f0                	xor    eax,esi
c001a200:	31 fa                	xor    edx,edi
c001a202:	09 d0                	or     eax,edx
c001a204:	0f 95 c0             	setne  al
c001a207:	0f b6 c0             	movzx  eax,al
c001a20a:	5a                   	pop    edx
c001a20b:	5e                   	pop    esi
c001a20c:	5f                   	pop    edi
c001a20d:	c3                   	ret    

c001a20e <ISO9660::tell(void*, unsigned long long*)>:
c001a20e:	53                   	push   ebx
c001a20f:	83 ec 08             	sub    esp,0x8
c001a212:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a216:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a21a:	85 c0                	test   eax,eax
c001a21c:	74 24                	je     c001a242 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a21e:	85 db                	test   ebx,ebx
c001a220:	74 20                	je     c001a242 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a222:	83 ec 0c             	sub    esp,0xc
c001a225:	b9 02 00 00 00       	mov    ecx,0x2
c001a22a:	99                   	cdq    
c001a22b:	f7 f9                	idiv   ecx
c001a22d:	83 e8 32             	sub    eax,0x32
c001a230:	50                   	push   eax
c001a231:	e8 19 c5 fe ff       	call   c000674f <iso_tell>
c001a236:	83 c4 10             	add    esp,0x10
c001a239:	89 03                	mov    DWORD PTR [ebx],eax
c001a23b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a23e:	31 c0                	xor    eax,eax
c001a240:	eb 05                	jmp    c001a247 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a242:	b8 04 00 00 00       	mov    eax,0x4
c001a247:	83 c4 08             	add    esp,0x8
c001a24a:	5b                   	pop    ebx
c001a24b:	c3                   	ret    

c001a24c <ISO9660::stat(void*, unsigned long long*)>:
c001a24c:	53                   	push   ebx
c001a24d:	83 ec 14             	sub    esp,0x14
c001a250:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a254:	68 1d 2a 02 c0       	push   0xc0022a1d
c001a259:	e8 e7 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a25e:	83 c4 10             	add    esp,0x10
c001a261:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a266:	74 2c                	je     c001a294 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a268:	85 db                	test   ebx,ebx
c001a26a:	74 28                	je     c001a294 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a26c:	83 ec 0c             	sub    esp,0xc
c001a26f:	b9 02 00 00 00       	mov    ecx,0x2
c001a274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a278:	99                   	cdq    
c001a279:	f7 f9                	idiv   ecx
c001a27b:	83 e8 32             	sub    eax,0x32
c001a27e:	50                   	push   eax
c001a27f:	e8 fc c4 fe ff       	call   c0006780 <iso_total>
c001a284:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a28b:	89 03                	mov    DWORD PTR [ebx],eax
c001a28d:	83 c4 10             	add    esp,0x10
c001a290:	31 c0                	xor    eax,eax
c001a292:	eb 05                	jmp    c001a299 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a294:	b8 04 00 00 00       	mov    eax,0x4
c001a299:	83 c4 08             	add    esp,0x8
c001a29c:	5b                   	pop    ebx
c001a29d:	c3                   	ret    

c001a29e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a29e:	55                   	push   ebp
c001a29f:	57                   	push   edi
c001a2a0:	56                   	push   esi
c001a2a1:	53                   	push   ebx
c001a2a2:	83 ec 18             	sub    esp,0x18
c001a2a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a2a9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a2ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a2b1:	68 25 2a 02 c0       	push   0xc0022a25
c001a2b6:	e8 8a 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a2bb:	83 c4 10             	add    esp,0x10
c001a2be:	85 ff                	test   edi,edi
c001a2c0:	0f 94 c0             	sete   al
c001a2c3:	85 f6                	test   esi,esi
c001a2c5:	0f 94 c2             	sete   dl
c001a2c8:	09 d0                	or     eax,edx
c001a2ca:	a8 01                	test   al,0x1
c001a2cc:	0f 85 dd 00 00 00    	jne    c001a3af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a2d2:	85 db                	test   ebx,ebx
c001a2d4:	0f 84 d5 00 00 00    	je     c001a3af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a2da:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a2dd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a2e3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a2ea:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2f1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a2f3:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a2f9:	74 1b                	je     c001a316 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a2fb:	85 c0                	test   eax,eax
c001a2fd:	74 10                	je     c001a30f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a2ff:	83 ec 0c             	sub    esp,0xc
c001a302:	68 c9 29 02 c0       	push   0xc00229c9
c001a307:	e8 95 70 ff ff       	call   c00113a1 <KePanic(char const*)>
c001a30c:	83 c4 10             	add    esp,0x10
c001a30f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a311:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a316:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a319:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a320:	85 c0                	test   eax,eax
c001a322:	74 09                	je     c001a32d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a324:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a32b:	74 51                	je     c001a37e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a32d:	83 ec 0c             	sub    esp,0xc
c001a330:	68 2d 2a 02 c0       	push   0xc0022a2d
c001a335:	e8 0b 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a33a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a33d:	83 c4 10             	add    esp,0x10
c001a340:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a348:	74 21                	je     c001a36b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a34a:	83 ec 0c             	sub    esp,0xc
c001a34d:	68 4d 2a 02 c0       	push   0xc0022a4d
c001a352:	e8 ee 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a357:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a35a:	83 c4 10             	add    esp,0x10
c001a35d:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a364:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a36b:	83 ec 0c             	sub    esp,0xc
c001a36e:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a375:	50                   	push   eax
c001a376:	e8 cb c6 fe ff       	call   c0006a46 <init_percd>
c001a37b:	83 c4 10             	add    esp,0x10
c001a37e:	83 c3 03             	add    ebx,0x3
c001a381:	52                   	push   edx
c001a382:	52                   	push   edx
c001a383:	6a 00                	push   0x0
c001a385:	53                   	push   ebx
c001a386:	e8 82 c1 fe ff       	call   c000650d <iso_open>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	89 c5                	mov    ebp,eax
c001a390:	83 f8 ff             	cmp    eax,0xffffffff
c001a393:	75 21                	jne    c001a3b6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a395:	50                   	push   eax
c001a396:	50                   	push   eax
c001a397:	6a 01                	push   0x1
c001a399:	53                   	push   ebx
c001a39a:	e8 6e c1 fe ff       	call   c000650d <iso_open>
c001a39f:	83 c4 10             	add    esp,0x10
c001a3a2:	ba 02 00 00 00       	mov    edx,0x2
c001a3a7:	40                   	inc    eax
c001a3a8:	74 2b                	je     c001a3d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a3aa:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a3ad:	eb 24                	jmp    c001a3d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a3af:	ba 04 00 00 00       	mov    edx,0x4
c001a3b4:	eb 1f                	jmp    c001a3d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a3b6:	83 ec 0c             	sub    esp,0xc
c001a3b9:	50                   	push   eax
c001a3ba:	e8 c1 c3 fe ff       	call   c0006780 <iso_total>
c001a3bf:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a3c6:	89 07                	mov    DWORD PTR [edi],eax
c001a3c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a3cb:	e8 c7 c1 fe ff       	call   c0006597 <iso_close>
c001a3d0:	83 c4 10             	add    esp,0x10
c001a3d3:	31 d2                	xor    edx,edx
c001a3d5:	83 c4 0c             	add    esp,0xc
c001a3d8:	89 d0                	mov    eax,edx
c001a3da:	5b                   	pop    ebx
c001a3db:	5e                   	pop    esi
c001a3dc:	5f                   	pop    edi
c001a3dd:	5d                   	pop    ebp
c001a3de:	c3                   	ret    
c001a3df:	90                   	nop

c001a3e0 <ISO9660::close(void*)>:
c001a3e0:	83 ec 0c             	sub    esp,0xc
c001a3e3:	b8 04 00 00 00       	mov    eax,0x4
c001a3e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3ec:	85 d2                	test   edx,edx
c001a3ee:	74 1b                	je     c001a40b <ISO9660::close(void*)+0x2b>
c001a3f0:	83 ec 0c             	sub    esp,0xc
c001a3f3:	b9 02 00 00 00       	mov    ecx,0x2
c001a3f8:	89 d0                	mov    eax,edx
c001a3fa:	99                   	cdq    
c001a3fb:	f7 f9                	idiv   ecx
c001a3fd:	83 e8 32             	sub    eax,0x32
c001a400:	50                   	push   eax
c001a401:	e8 91 c1 fe ff       	call   c0006597 <iso_close>
c001a406:	83 c4 10             	add    esp,0x10
c001a409:	31 c0                	xor    eax,eax
c001a40b:	83 c4 0c             	add    esp,0xc
c001a40e:	c3                   	ret    
c001a40f:	90                   	nop

c001a410 <ISO9660::openDir(char const*, void**)>:
c001a410:	56                   	push   esi
c001a411:	53                   	push   ebx
c001a412:	50                   	push   eax
c001a413:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a417:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a41b:	85 db                	test   ebx,ebx
c001a41d:	0f 84 bd 00 00 00    	je     c001a4e0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a423:	85 f6                	test   esi,esi
c001a425:	0f 84 b5 00 00 00    	je     c001a4e0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a42b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a42d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a434:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a43a:	74 1b                	je     c001a457 <ISO9660::openDir(char const*, void**)+0x47>
c001a43c:	85 c0                	test   eax,eax
c001a43e:	74 10                	je     c001a450 <ISO9660::openDir(char const*, void**)+0x40>
c001a440:	83 ec 0c             	sub    esp,0xc
c001a443:	68 c9 29 02 c0       	push   0xc00229c9
c001a448:	e8 54 6f ff ff       	call   c00113a1 <KePanic(char const*)>
c001a44d:	83 c4 10             	add    esp,0x10
c001a450:	8a 03                	mov    al,BYTE PTR [ebx]
c001a452:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a457:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a45a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a461:	85 c0                	test   eax,eax
c001a463:	74 10                	je     c001a475 <ISO9660::openDir(char const*, void**)+0x65>
c001a465:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a46c:	74 1a                	je     c001a488 <ISO9660::openDir(char const*, void**)+0x78>
c001a46e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a475:	83 ec 0c             	sub    esp,0xc
c001a478:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a47f:	50                   	push   eax
c001a480:	e8 c1 c5 fe ff       	call   c0006a46 <init_percd>
c001a485:	83 c4 10             	add    esp,0x10
c001a488:	83 c3 03             	add    ebx,0x3
c001a48b:	50                   	push   eax
c001a48c:	50                   	push   eax
c001a48d:	6a 01                	push   0x1
c001a48f:	53                   	push   ebx
c001a490:	e8 78 c0 fe ff       	call   c000650d <iso_open>
c001a495:	83 c4 10             	add    esp,0x10
c001a498:	89 c3                	mov    ebx,eax
c001a49a:	83 f8 ff             	cmp    eax,0xffffffff
c001a49d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4a2:	75 1c                	jne    c001a4c0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a4a4:	53                   	push   ebx
c001a4a5:	53                   	push   ebx
c001a4a6:	68 71 2a 02 c0       	push   0xc0022a71
c001a4ab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4b1:	e8 f0 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4b6:	83 c4 10             	add    esp,0x10
c001a4b9:	b8 01 00 00 00       	mov    eax,0x1
c001a4be:	eb 25                	jmp    c001a4e5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a4c0:	01 db                	add    ebx,ebx
c001a4c2:	51                   	push   ecx
c001a4c3:	83 c3 65             	add    ebx,0x65
c001a4c6:	51                   	push   ecx
c001a4c7:	68 84 2a 02 c0       	push   0xc0022a84
c001a4cc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4d2:	e8 cf e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4d7:	89 1e                	mov    DWORD PTR [esi],ebx
c001a4d9:	83 c4 10             	add    esp,0x10
c001a4dc:	31 c0                	xor    eax,eax
c001a4de:	eb 05                	jmp    c001a4e5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a4e0:	b8 04 00 00 00       	mov    eax,0x4
c001a4e5:	5a                   	pop    edx
c001a4e6:	5b                   	pop    ebx
c001a4e7:	5e                   	pop    esi
c001a4e8:	c3                   	ret    
c001a4e9:	90                   	nop

c001a4ea <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a4ea:	55                   	push   ebp
c001a4eb:	57                   	push   edi
c001a4ec:	56                   	push   esi
c001a4ed:	53                   	push   ebx
c001a4ee:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a4f4:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a4fb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a502:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a50a:	0f 84 e7 00 00 00    	je     c001a5f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a510:	85 db                	test   ebx,ebx
c001a512:	0f 84 df 00 00 00    	je     c001a5f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a518:	83 ec 0c             	sub    esp,0xc
c001a51b:	68 97 2a 02 c0       	push   0xc0022a97
c001a520:	e8 20 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a525:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a52c:	b9 02 00 00 00       	mov    ecx,0x2
c001a531:	99                   	cdq    
c001a532:	f7 f9                	idiv   ecx
c001a534:	83 e8 32             	sub    eax,0x32
c001a537:	89 04 24             	mov    DWORD PTR [esp],eax
c001a53a:	e8 93 c2 fe ff       	call   c00067d2 <iso_readdir>
c001a53f:	83 c4 10             	add    esp,0x10
c001a542:	89 c6                	mov    esi,eax
c001a544:	85 c0                	test   eax,eax
c001a546:	75 37                	jne    c001a57f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a548:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a54d:	56                   	push   esi
c001a54e:	56                   	push   esi
c001a54f:	68 a2 2a 02 c0       	push   0xc0022aa2
c001a554:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a55a:	e8 47 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a55f:	83 c4 0c             	add    esp,0xc
c001a562:	68 10 01 00 00       	push   0x110
c001a567:	6a 00                	push   0x0
c001a569:	57                   	push   edi
c001a56a:	e8 81 5f fe ff       	call   c00004f0 <memset>
c001a56f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	b8 01 00 00 00       	mov    eax,0x1
c001a57d:	eb 7d                	jmp    c001a5fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a57f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a585:	8d 68 08             	lea    ebp,[eax+0x8]
c001a588:	83 ec 0c             	sub    esp,0xc
c001a58b:	55                   	push   ebp
c001a58c:	e8 df 5f fe ff       	call   c0000570 <strlen>
c001a591:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a599:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a59d:	83 c4 10             	add    esp,0x10
c001a5a0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a5a4:	75 0a                	jne    c001a5b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a5a6:	b8 02 00 00 00       	mov    eax,0x2
c001a5ab:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a5ae:	74 05                	je     c001a5b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a5b0:	b8 01 00 00 00       	mov    eax,0x1
c001a5b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5b9:	50                   	push   eax
c001a5ba:	50                   	push   eax
c001a5bb:	55                   	push   ebp
c001a5bc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5c0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a5c4:	50                   	push   eax
c001a5c5:	e8 76 60 fe ff       	call   c0000640 <strcpy>
c001a5ca:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a5d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5d3:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a5d9:	5a                   	pop    edx
c001a5da:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a5df:	59                   	pop    ecx
c001a5e0:	68 b5 2a 02 c0       	push   0xc0022ab5
c001a5e5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a5eb:	e8 b6 e4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	31 c0                	xor    eax,eax
c001a5f5:	eb 05                	jmp    c001a5fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a5f7:	b8 04 00 00 00       	mov    eax,0x4
c001a5fc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a602:	5b                   	pop    ebx
c001a603:	5e                   	pop    esi
c001a604:	5f                   	pop    edi
c001a605:	5d                   	pop    ebp
c001a606:	c3                   	ret    

c001a607 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a607:	57                   	push   edi
c001a608:	56                   	push   esi
c001a609:	53                   	push   ebx
c001a60a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a60e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a612:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a616:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a61c:	0f be cb             	movsx  ecx,bl
c001a61f:	75 0b                	jne    c001a62c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a621:	0f be 05 e0 38 02 c0 	movsx  eax,BYTE PTR ds:0xc00238e0
c001a628:	39 c8                	cmp    eax,ecx
c001a62a:	74 47                	je     c001a673 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a62c:	83 ec 0c             	sub    esp,0xc
c001a62f:	31 d2                	xor    edx,edx
c001a631:	68 a0 98 02 c0       	push   0xc00298a0
c001a636:	6a 01                	push   0x1
c001a638:	52                   	push   edx
c001a639:	56                   	push   esi
c001a63a:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a641:	e8 0e 35 ff ff       	call   c000db54 <LogicalDisk::read(unsigned long long, int, void*)>
c001a646:	83 c4 20             	add    esp,0x20
c001a649:	85 c0                	test   eax,eax
c001a64b:	75 0e                	jne    c001a65b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a64d:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a653:	88 1d e0 38 02 c0    	mov    BYTE PTR ds:0xc00238e0,bl
c001a659:	eb 18                	jmp    c001a673 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a65b:	50                   	push   eax
c001a65c:	68 00 08 00 00       	push   0x800
c001a661:	6a 00                	push   0x0
c001a663:	57                   	push   edi
c001a664:	e8 87 5e fe ff       	call   c00004f0 <memset>
c001a669:	83 c4 10             	add    esp,0x10
c001a66c:	b8 01 00 00 00       	mov    eax,0x1
c001a671:	eb 0e                	jmp    c001a681 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a673:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a678:	b9 00 08 00 00       	mov    ecx,0x800
c001a67d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a67f:	31 c0                	xor    eax,eax
c001a681:	5b                   	pop    ebx
c001a682:	5e                   	pop    esi
c001a683:	5f                   	pop    edi
c001a684:	c3                   	ret    
c001a685:	90                   	nop

c001a686 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a686:	53                   	push   ebx
c001a687:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a68d:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a697:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a69e:	8d 58 41             	lea    ebx,[eax+0x41]
c001a6a1:	0f be db             	movsx  ebx,bl
c001a6a4:	53                   	push   ebx
c001a6a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6a9:	50                   	push   eax
c001a6aa:	6a 10                	push   0x10
c001a6ac:	e8 56 ff ff ff       	call   c001a607 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6b1:	83 c4 10             	add    esp,0x10
c001a6b4:	31 d2                	xor    edx,edx
c001a6b6:	85 c0                	test   eax,eax
c001a6b8:	75 33                	jne    c001a6ed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6ba:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a6bf:	75 2c                	jne    c001a6ed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6c1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a6c6:	75 25                	jne    c001a6ed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6c8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a6cd:	75 1e                	jne    c001a6ed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6cf:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a6d4:	75 17                	jne    c001a6ed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6d6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a6db:	75 10                	jne    c001a6ed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a6dd:	83 ec 0c             	sub    esp,0xc
c001a6e0:	53                   	push   ebx
c001a6e1:	e8 60 c3 fe ff       	call   c0006a46 <init_percd>
c001a6e6:	83 c4 10             	add    esp,0x10
c001a6e9:	40                   	inc    eax
c001a6ea:	0f 95 c2             	setne  dl
c001a6ed:	88 d0                	mov    al,dl
c001a6ef:	81 c4 08 08 00 00    	add    esp,0x808
c001a6f5:	5b                   	pop    ebx
c001a6f6:	c3                   	ret    
c001a6f7:	90                   	nop

c001a6f8 <ISO9660::ISO9660()>:
c001a6f8:	83 ec 0c             	sub    esp,0xc
c001a6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6ff:	83 ec 0c             	sub    esp,0xc
c001a702:	50                   	push   eax
c001a703:	e8 38 0e ff ff       	call   c000b540 <Filesystem::Filesystem()>
c001a708:	83 c4 10             	add    esp,0x10
c001a70b:	ba d0 2a 02 c0       	mov    edx,0xc0022ad0
c001a710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a714:	89 10                	mov    DWORD PTR [eax],edx
c001a716:	e8 3d c4 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a71b:	90                   	nop
c001a71c:	83 c4 0c             	add    esp,0xc
c001a71f:	c3                   	ret    

c001a720 <SoundCard::beginPlayback()>:
c001a720:	c7 44 24 04 34 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b34
c001a728:	e9 74 6c ff ff       	jmp    c00113a1 <KePanic(char const*)>
c001a72d:	90                   	nop

c001a72e <SoundCard::stopPlayback()>:
c001a72e:	c7 44 24 04 34 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b34
c001a736:	e9 66 6c ff ff       	jmp    c00113a1 <KePanic(char const*)>
c001a73b:	90                   	nop

c001a73c <SoundCard::SoundCard(char const*)>:
c001a73c:	83 ec 1c             	sub    esp,0x1c
c001a73f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a743:	83 ec 08             	sub    esp,0x8
c001a746:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a74a:	50                   	push   eax
c001a74b:	e8 ba 21 ff ff       	call   c000c90a <Device::Device(char const*)>
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	ba 80 2b 02 c0       	mov    edx,0xc0022b80
c001a758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a75c:	89 10                	mov    DWORD PTR [eax],edx
c001a75e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a762:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a76d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a77b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a789:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a797:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a7a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a7a9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a7ae:	7f 1a                	jg     c001a7ca <SoundCard::SoundCard(char const*)+0x8e>
c001a7b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7b8:	83 c2 54             	add    edx,0x54
c001a7bb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a7c3:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a7c8:	eb df                	jmp    c001a7a9 <SoundCard::SoundCard(char const*)+0x6d>
c001a7ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7ce:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a7d5:	90                   	nop
c001a7d6:	83 c4 1c             	add    esp,0x1c
c001a7d9:	c3                   	ret    

c001a7da <SoundCard::~SoundCard()>:
c001a7da:	83 ec 0c             	sub    esp,0xc
c001a7dd:	ba 80 2b 02 c0       	mov    edx,0xc0022b80
c001a7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7e6:	89 10                	mov    DWORD PTR [eax],edx
c001a7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7ec:	83 ec 0c             	sub    esp,0xc
c001a7ef:	50                   	push   eax
c001a7f0:	e8 7f 1e ff ff       	call   c000c674 <Device::~Device()>
c001a7f5:	83 c4 10             	add    esp,0x10
c001a7f8:	90                   	nop
c001a7f9:	83 c4 0c             	add    esp,0xc
c001a7fc:	c3                   	ret    
c001a7fd:	90                   	nop

c001a7fe <SoundCard::~SoundCard()>:
c001a7fe:	83 ec 0c             	sub    esp,0xc
c001a801:	83 ec 0c             	sub    esp,0xc
c001a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a808:	e8 cd ff ff ff       	call   c001a7da <SoundCard::~SoundCard()>
c001a80d:	83 c4 10             	add    esp,0x10
c001a810:	83 ec 08             	sub    esp,0x8
c001a813:	68 e8 01 00 00       	push   0x1e8
c001a818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a81c:	e8 f7 ff fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a821:	83 c4 10             	add    esp,0x10
c001a824:	83 c4 0c             	add    esp,0xc
c001a827:	c3                   	ret    

c001a828 <SoundCard::configureRates(int, int, int)>:
c001a828:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a82c:	31 c0                	xor    eax,eax
c001a82e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a835:	75 20                	jne    c001a857 <SoundCard::configureRates(int, int, int)+0x2f>
c001a837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a83b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a845:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a84f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a855:	b0 01                	mov    al,0x1
c001a857:	c3                   	ret    

c001a858 <SoundCard::getSamples16(int, short*)>:
c001a858:	55                   	push   ebp
c001a859:	57                   	push   edi
c001a85a:	31 ff                	xor    edi,edi
c001a85c:	56                   	push   esi
c001a85d:	53                   	push   ebx
c001a85e:	31 db                	xor    ebx,ebx
c001a860:	83 ec 10             	sub    esp,0x10
c001a863:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a867:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a86b:	8d 04 36             	lea    eax,[esi+esi*1]
c001a86e:	50                   	push   eax
c001a86f:	6a 00                	push   0x0
c001a871:	55                   	push   ebp
c001a872:	e8 79 5c fe ff       	call   c00004f0 <memset>
c001a877:	83 c4 10             	add    esp,0x10
c001a87a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a87e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a885:	85 c0                	test   eax,eax
c001a887:	74 1b                	je     c001a8a4 <SoundCard::getSamples16(int, short*)+0x4c>
c001a889:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a88d:	75 15                	jne    c001a8a4 <SoundCard::getSamples16(int, short*)+0x4c>
c001a88f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a893:	55                   	push   ebp
c001a894:	56                   	push   esi
c001a895:	50                   	push   eax
c001a896:	e8 f1 02 00 00       	call   c001ab8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a89b:	83 c4 10             	add    esp,0x10
c001a89e:	39 c7                	cmp    edi,eax
c001a8a0:	7d 02                	jge    c001a8a4 <SoundCard::getSamples16(int, short*)+0x4c>
c001a8a2:	89 c7                	mov    edi,eax
c001a8a4:	43                   	inc    ebx
c001a8a5:	83 fb 20             	cmp    ebx,0x20
c001a8a8:	75 d0                	jne    c001a87a <SoundCard::getSamples16(int, short*)+0x22>
c001a8aa:	83 c4 0c             	add    esp,0xc
c001a8ad:	89 f8                	mov    eax,edi
c001a8af:	5b                   	pop    ebx
c001a8b0:	5e                   	pop    esi
c001a8b1:	5f                   	pop    edi
c001a8b2:	5d                   	pop    ebp
c001a8b3:	c3                   	ret    

c001a8b4 <SoundCard::getSamples32(int, int*)>:
c001a8b4:	55                   	push   ebp
c001a8b5:	57                   	push   edi
c001a8b6:	31 ff                	xor    edi,edi
c001a8b8:	56                   	push   esi
c001a8b9:	31 f6                	xor    esi,esi
c001a8bb:	53                   	push   ebx
c001a8bc:	83 ec 10             	sub    esp,0x10
c001a8bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a8c3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a8c7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a8cb:	c1 e0 02             	shl    eax,0x2
c001a8ce:	50                   	push   eax
c001a8cf:	6a 00                	push   0x0
c001a8d1:	55                   	push   ebp
c001a8d2:	e8 19 5c fe ff       	call   c00004f0 <memset>
c001a8d7:	83 c4 10             	add    esp,0x10
c001a8da:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a8e1:	85 c0                	test   eax,eax
c001a8e3:	74 1b                	je     c001a900 <SoundCard::getSamples32(int, int*)+0x4c>
c001a8e5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a8e9:	75 15                	jne    c001a900 <SoundCard::getSamples32(int, int*)+0x4c>
c001a8eb:	53                   	push   ebx
c001a8ec:	55                   	push   ebp
c001a8ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8f1:	50                   	push   eax
c001a8f2:	e8 61 03 00 00       	call   c001ac58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a8f7:	83 c4 10             	add    esp,0x10
c001a8fa:	39 c6                	cmp    esi,eax
c001a8fc:	7d 02                	jge    c001a900 <SoundCard::getSamples32(int, int*)+0x4c>
c001a8fe:	89 c6                	mov    esi,eax
c001a900:	47                   	inc    edi
c001a901:	83 ff 20             	cmp    edi,0x20
c001a904:	75 d4                	jne    c001a8da <SoundCard::getSamples32(int, int*)+0x26>
c001a906:	85 f6                	test   esi,esi
c001a908:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a90f:	75 0f                	jne    c001a920 <SoundCard::getSamples32(int, int*)+0x6c>
c001a911:	85 c0                	test   eax,eax
c001a913:	74 1b                	je     c001a930 <SoundCard::getSamples32(int, int*)+0x7c>
c001a915:	83 ec 0c             	sub    esp,0xc
c001a918:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a91a:	53                   	push   ebx
c001a91b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a91e:	eb 0d                	jmp    c001a92d <SoundCard::getSamples32(int, int*)+0x79>
c001a920:	85 c0                	test   eax,eax
c001a922:	75 0c                	jne    c001a930 <SoundCard::getSamples32(int, int*)+0x7c>
c001a924:	83 ec 0c             	sub    esp,0xc
c001a927:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a929:	53                   	push   ebx
c001a92a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a92d:	83 c4 10             	add    esp,0x10
c001a930:	83 c4 0c             	add    esp,0xc
c001a933:	89 f0                	mov    eax,esi
c001a935:	5b                   	pop    ebx
c001a936:	5e                   	pop    esi
c001a937:	5f                   	pop    edi
c001a938:	5d                   	pop    ebp
c001a939:	c3                   	ret    

c001a93a <SoundCard::addChannel(SoundPort*)>:
c001a93a:	83 ec 0c             	sub    esp,0xc
c001a93d:	31 c0                	xor    eax,eax
c001a93f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a943:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a94b:	74 1b                	je     c001a968 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a94d:	40                   	inc    eax
c001a94e:	83 f8 20             	cmp    eax,0x20
c001a951:	75 f0                	jne    c001a943 <SoundCard::addChannel(SoundPort*)+0x9>
c001a953:	83 ec 0c             	sub    esp,0xc
c001a956:	68 59 2b 02 c0       	push   0xc0022b59
c001a95b:	e8 41 6a ff ff       	call   c00113a1 <KePanic(char const*)>
c001a960:	83 c4 10             	add    esp,0x10
c001a963:	83 c8 ff             	or     eax,0xffffffff
c001a966:	eb 0b                	jmp    c001a973 <SoundCard::addChannel(SoundPort*)+0x39>
c001a968:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a96c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a973:	83 c4 0c             	add    esp,0xc
c001a976:	c3                   	ret    
c001a977:	90                   	nop

c001a978 <SoundCard::removeChannel(int)>:
c001a978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a97c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a980:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a98b:	c3                   	ret    

c001a98c <SoundPort::SoundPort(int, int, int, int)>:
c001a98c:	83 ec 0c             	sub    esp,0xc
c001a98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a993:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a99e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a9aa:	89 10                	mov    DWORD PTR [eax],edx
c001a9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9bf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a9c2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a9c7:	75 13                	jne    c001a9dc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cd:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9cf:	05 a0 0f 00 00       	add    eax,0xfa0
c001a9d4:	01 c0                	add    eax,eax
c001a9d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a9da:	66 90                	xchg   ax,ax
c001a9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a9e4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9eb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9f9:	c1 e0 02             	shl    eax,0x2
c001a9fc:	83 ec 0c             	sub    esp,0xc
c001a9ff:	50                   	push   eax
c001aa00:	e8 b1 d0 fe ff       	call   c0007ab6 <malloc>
c001aa05:	83 c4 10             	add    esp,0x10
c001aa08:	89 c2                	mov    edx,eax
c001aa0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa0e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aa11:	90                   	nop
c001aa12:	83 c4 0c             	add    esp,0xc
c001aa15:	c3                   	ret    
c001aa16:	66 90                	xchg   ax,ax

c001aa18 <SoundPort::~SoundPort()>:
c001aa18:	83 ec 0c             	sub    esp,0xc
c001aa1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa22:	85 c0                	test   eax,eax
c001aa24:	74 1e                	je     c001aa44 <SoundPort::~SoundPort()+0x2c>
c001aa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa2d:	83 ec 0c             	sub    esp,0xc
c001aa30:	50                   	push   eax
c001aa31:	e8 90 d0 fe ff       	call   c0007ac6 <free>
c001aa36:	83 c4 10             	add    esp,0x10
c001aa39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa3d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aa44:	90                   	nop
c001aa45:	83 c4 0c             	add    esp,0xc
c001aa48:	c3                   	ret    
c001aa49:	90                   	nop
c001aa4a:	66 90                	xchg   ax,ax

c001aa4c <SoundPort::unpause()>:
c001aa4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa50:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001aa54:	c3                   	ret    
c001aa55:	90                   	nop
c001aa56:	66 90                	xchg   ax,ax

c001aa58 <SoundPort::pause()>:
c001aa58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa5c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aa60:	c3                   	ret    
c001aa61:	90                   	nop
c001aa62:	66 90                	xchg   ax,ax

c001aa64 <SoundPort::getBufferUsed()>:
c001aa64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa68:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa6b:	c3                   	ret    

c001aa6c <SoundPort::getBufferSize()>:
c001aa6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa73:	c3                   	ret    

c001aa74 <SoundPort::buffer16(short*, int)>:
c001aa74:	55                   	push   ebp
c001aa75:	57                   	push   edi
c001aa76:	56                   	push   esi
c001aa77:	53                   	push   ebx
c001aa78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa7c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aa80:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aa83:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aa86:	74 68                	je     c001aaf0 <SoundPort::buffer16(short*, int)+0x7c>
c001aa88:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aa8c:	85 c9                	test   ecx,ecx
c001aa8e:	7e 60                	jle    c001aaf0 <SoundPort::buffer16(short*, int)+0x7c>
c001aa90:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aa94:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa97:	c1 e1 0f             	shl    ecx,0xf
c001aa9a:	8d 70 01             	lea    esi,[eax+0x1]
c001aa9d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aaa0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aaa3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aaa6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaa9:	74 4d                	je     c001aaf8 <SoundPort::buffer16(short*, int)+0x84>
c001aaab:	31 f6                	xor    esi,esi
c001aaad:	eb 21                	jmp    c001aad0 <SoundPort::buffer16(short*, int)+0x5c>
c001aaaf:	90                   	nop
c001aab0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aab5:	8d 79 01             	lea    edi,[ecx+0x1]
c001aab8:	c1 e3 0f             	shl    ebx,0xf
c001aabb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aabe:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aac1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aac4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aac7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaca:	74 1c                	je     c001aae8 <SoundPort::buffer16(short*, int)+0x74>
c001aacc:	89 c6                	mov    esi,eax
c001aace:	66 90                	xchg   ax,ax
c001aad0:	8d 46 01             	lea    eax,[esi+0x1]
c001aad3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aad7:	75 d7                	jne    c001aab0 <SoundPort::buffer16(short*, int)+0x3c>
c001aad9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aadd:	8d 76 00             	lea    esi,[esi+0x0]
c001aae0:	5b                   	pop    ebx
c001aae1:	5e                   	pop    esi
c001aae2:	5f                   	pop    edi
c001aae3:	5d                   	pop    ebp
c001aae4:	c3                   	ret    
c001aae5:	8d 76 00             	lea    esi,[esi+0x0]
c001aae8:	5b                   	pop    ebx
c001aae9:	8d 46 02             	lea    eax,[esi+0x2]
c001aaec:	5e                   	pop    esi
c001aaed:	5f                   	pop    edi
c001aaee:	5d                   	pop    ebp
c001aaef:	c3                   	ret    
c001aaf0:	5b                   	pop    ebx
c001aaf1:	31 c0                	xor    eax,eax
c001aaf3:	5e                   	pop    esi
c001aaf4:	5f                   	pop    edi
c001aaf5:	5d                   	pop    ebp
c001aaf6:	c3                   	ret    
c001aaf7:	90                   	nop
c001aaf8:	b8 01 00 00 00       	mov    eax,0x1
c001aafd:	eb e1                	jmp    c001aae0 <SoundPort::buffer16(short*, int)+0x6c>
c001aaff:	90                   	nop

c001ab00 <SoundPort::buffer32(int*, int)>:
c001ab00:	55                   	push   ebp
c001ab01:	57                   	push   edi
c001ab02:	56                   	push   esi
c001ab03:	53                   	push   ebx
c001ab04:	83 ec 04             	sub    esp,0x4
c001ab07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab12:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab16:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab19:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab1c:	74 5a                	je     c001ab78 <SoundPort::buffer32(int*, int)+0x78>
c001ab1e:	85 c0                	test   eax,eax
c001ab20:	7e 56                	jle    c001ab78 <SoundPort::buffer32(int*, int)+0x78>
c001ab22:	8d 71 01             	lea    esi,[ecx+0x1]
c001ab25:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ab28:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ab2b:	8b 37                	mov    esi,DWORD PTR [edi]
c001ab2d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001ab30:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab33:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab36:	74 4c                	je     c001ab84 <SoundPort::buffer32(int*, int)+0x84>
c001ab38:	31 f6                	xor    esi,esi
c001ab3a:	eb 1c                	jmp    c001ab58 <SoundPort::buffer32(int*, int)+0x58>
c001ab3c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001ab3f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001ab42:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001ab45:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ab48:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001ab4c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ab4f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ab52:	74 18                	je     c001ab6c <SoundPort::buffer32(int*, int)+0x6c>
c001ab54:	89 de                	mov    esi,ebx
c001ab56:	66 90                	xchg   ax,ax
c001ab58:	8d 5e 01             	lea    ebx,[esi+0x1]
c001ab5b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001ab5e:	75 dc                	jne    c001ab3c <SoundPort::buffer32(int*, int)+0x3c>
c001ab60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ab63:	90                   	nop
c001ab64:	83 c4 04             	add    esp,0x4
c001ab67:	5b                   	pop    ebx
c001ab68:	5e                   	pop    esi
c001ab69:	5f                   	pop    edi
c001ab6a:	5d                   	pop    ebp
c001ab6b:	c3                   	ret    
c001ab6c:	83 c4 04             	add    esp,0x4
c001ab6f:	8d 46 02             	lea    eax,[esi+0x2]
c001ab72:	5b                   	pop    ebx
c001ab73:	5e                   	pop    esi
c001ab74:	5f                   	pop    edi
c001ab75:	5d                   	pop    ebp
c001ab76:	c3                   	ret    
c001ab77:	90                   	nop
c001ab78:	83 c4 04             	add    esp,0x4
c001ab7b:	31 c0                	xor    eax,eax
c001ab7d:	5b                   	pop    ebx
c001ab7e:	5e                   	pop    esi
c001ab7f:	5f                   	pop    edi
c001ab80:	5d                   	pop    ebp
c001ab81:	c3                   	ret    
c001ab82:	66 90                	xchg   ax,ax
c001ab84:	b8 01 00 00 00       	mov    eax,0x1
c001ab89:	eb d9                	jmp    c001ab64 <SoundPort::buffer32(int*, int)+0x64>
c001ab8b:	90                   	nop

c001ab8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ab8c:	57                   	push   edi
c001ab8d:	56                   	push   esi
c001ab8e:	53                   	push   ebx
c001ab8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab93:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ab97:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ab9d:	39 03                	cmp    DWORD PTR [ebx],eax
c001ab9f:	74 13                	je     c001abb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001aba1:	83 ec 0c             	sub    esp,0xc
c001aba4:	68 ac 2b 02 c0       	push   0xc0022bac
c001aba9:	e8 f3 67 ff ff       	call   c00113a1 <KePanic(char const*)>
c001abae:	83 c4 10             	add    esp,0x10
c001abb1:	8d 76 00             	lea    esi,[esi+0x0]
c001abb4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001abba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001abbd:	74 11                	je     c001abd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001abbf:	83 ec 0c             	sub    esp,0xc
c001abc2:	68 eb 2b 02 c0       	push   0xc0022beb
c001abc7:	e8 d5 67 ff ff       	call   c00113a1 <KePanic(char const*)>
c001abcc:	83 c4 10             	add    esp,0x10
c001abcf:	90                   	nop
c001abd0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001abd6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001abd9:	74 11                	je     c001abec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001abdb:	83 ec 0c             	sub    esp,0xc
c001abde:	68 eb 2b 02 c0       	push   0xc0022beb
c001abe3:	e8 b9 67 ff ff       	call   c00113a1 <KePanic(char const*)>
c001abe8:	83 c4 10             	add    esp,0x10
c001abeb:	90                   	nop
c001abec:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001abef:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001abf3:	7e 07                	jle    c001abfc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001abf5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001abf9:	8d 76 00             	lea    esi,[esi+0x0]
c001abfc:	85 f6                	test   esi,esi
c001abfe:	7e 2c                	jle    c001ac2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001ac00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac04:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ac07:	31 c9                	xor    ecx,ecx
c001ac09:	01 d7                	add    edi,edx
c001ac0b:	90                   	nop
c001ac0c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ac0f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ac12:	85 c0                	test   eax,eax
c001ac14:	79 06                	jns    c001ac1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ac16:	05 ff 7f 00 00       	add    eax,0x7fff
c001ac1b:	90                   	nop
c001ac1c:	c1 f8 0f             	sar    eax,0xf
c001ac1f:	83 c1 04             	add    ecx,0x4
c001ac22:	66 01 02             	add    WORD PTR [edx],ax
c001ac25:	83 c2 02             	add    edx,0x2
c001ac28:	39 d7                	cmp    edi,edx
c001ac2a:	75 e0                	jne    c001ac0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ac2c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ac2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac32:	83 ec 04             	sub    esp,0x4
c001ac35:	29 f0                	sub    eax,esi
c001ac37:	c1 e0 02             	shl    eax,0x2
c001ac3a:	50                   	push   eax
c001ac3b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ac3e:	50                   	push   eax
c001ac3f:	52                   	push   edx
c001ac40:	e8 8b 57 fe ff       	call   c00003d0 <memmove>
c001ac45:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac48:	83 c4 10             	add    esp,0x10
c001ac4b:	29 f0                	sub    eax,esi
c001ac4d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ac50:	89 f0                	mov    eax,esi
c001ac52:	5b                   	pop    ebx
c001ac53:	5e                   	pop    esi
c001ac54:	5f                   	pop    edi
c001ac55:	c3                   	ret    
c001ac56:	66 90                	xchg   ax,ax

c001ac58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ac58:	57                   	push   edi
c001ac59:	56                   	push   esi
c001ac5a:	53                   	push   ebx
c001ac5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ac63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ac67:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ac6d:	39 06                	cmp    DWORD PTR [esi],eax
c001ac6f:	74 13                	je     c001ac84 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ac71:	83 ec 0c             	sub    esp,0xc
c001ac74:	68 cc 2b 02 c0       	push   0xc0022bcc
c001ac79:	e8 23 67 ff ff       	call   c00113a1 <KePanic(char const*)>
c001ac7e:	83 c4 10             	add    esp,0x10
c001ac81:	8d 76 00             	lea    esi,[esi+0x0]
c001ac84:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ac8a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ac8d:	74 11                	je     c001aca0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ac8f:	83 ec 0c             	sub    esp,0xc
c001ac92:	68 07 2c 02 c0       	push   0xc0022c07
c001ac97:	e8 05 67 ff ff       	call   c00113a1 <KePanic(char const*)>
c001ac9c:	83 c4 10             	add    esp,0x10
c001ac9f:	90                   	nop
c001aca0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001aca6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001aca9:	74 11                	je     c001acbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001acab:	83 ec 0c             	sub    esp,0xc
c001acae:	68 07 2c 02 c0       	push   0xc0022c07
c001acb3:	e8 e9 66 ff ff       	call   c00113a1 <KePanic(char const*)>
c001acb8:	83 c4 10             	add    esp,0x10
c001acbb:	90                   	nop
c001acbc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001acbf:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001acc3:	7e 07                	jle    c001accc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001acc5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001acc9:	8d 76 00             	lea    esi,[esi+0x0]
c001accc:	85 ff                	test   edi,edi
c001acce:	7e 1c                	jle    c001acec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001acd0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001acd7:	31 c0                	xor    eax,eax
c001acd9:	8d 76 00             	lea    esi,[esi+0x0]
c001acdc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001acdf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ace2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ace5:	83 c0 04             	add    eax,0x4
c001ace8:	39 c1                	cmp    ecx,eax
c001acea:	75 f0                	jne    c001acdc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001acec:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001acef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001acf2:	83 ec 04             	sub    esp,0x4
c001acf5:	29 f8                	sub    eax,edi
c001acf7:	c1 e0 02             	shl    eax,0x2
c001acfa:	50                   	push   eax
c001acfb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001acfe:	50                   	push   eax
c001acff:	52                   	push   edx
c001ad00:	e8 cb 56 fe ff       	call   c00003d0 <memmove>
c001ad05:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ad08:	83 c4 10             	add    esp,0x10
c001ad0b:	29 f8                	sub    eax,edi
c001ad0d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ad10:	89 f8                	mov    eax,edi
c001ad12:	5b                   	pop    ebx
c001ad13:	5e                   	pop    esi
c001ad14:	5f                   	pop    edi
c001ad15:	c3                   	ret    

c001ad16 <PCI::open(int, int, void*)>:
c001ad16:	83 ec 18             	sub    esp,0x18
c001ad19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad21:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ad27:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad29:	50                   	push   eax
c001ad2a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ad2d:	31 c0                	xor    eax,eax
c001ad2f:	83 c4 1c             	add    esp,0x1c
c001ad32:	c3                   	ret    
c001ad33:	90                   	nop

c001ad34 <PCI::close(int, int, void*)>:
c001ad34:	31 c0                	xor    eax,eax
c001ad36:	c3                   	ret    
c001ad37:	90                   	nop

c001ad38 <PCI::PCI()>:
c001ad38:	83 ec 0c             	sub    esp,0xc
c001ad3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad3f:	83 ec 08             	sub    esp,0x8
c001ad42:	68 23 2c 02 c0       	push   0xc0022c23
c001ad47:	50                   	push   eax
c001ad48:	e8 87 13 ff ff       	call   c000c0d4 <Bus::Bus(char const*)>
c001ad4d:	83 c4 10             	add    esp,0x10
c001ad50:	ba cc 2c 02 c0       	mov    edx,0xc0022ccc
c001ad55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad59:	89 10                	mov    DWORD PTR [eax],edx
c001ad5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad5f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ad69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad6d:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ad72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad7c:	0f b6 d0             	movzx  edx,al
c001ad7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad83:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ad8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad8e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ad94:	0f b6 d0             	movzx  edx,al
c001ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ada0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001adaa:	8d 50 01             	lea    edx,[eax+0x1]
c001adad:	88 d1                	mov    cl,dl
c001adaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adb3:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001adb9:	0f b6 d0             	movzx  edx,al
c001adbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001adc4:	83 c9 c0             	or     ecx,0xffffffc0
c001adc7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001adcb:	90                   	nop
c001adcc:	83 c4 0c             	add    esp,0xc
c001adcf:	c3                   	ret    

c001add0 <PCI::readBAR8(unsigned int, int)>:
c001add0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001add4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001add8:	f6 c2 01             	test   dl,0x1
c001addb:	74 07                	je     c001ade4 <PCI::readBAR8(unsigned int, int)+0x14>
c001addd:	83 e2 fc             	and    edx,0xfffffffc
c001ade0:	01 c2                	add    edx,eax
c001ade2:	ec                   	in     al,dx
c001ade3:	c3                   	ret    
c001ade4:	83 e2 f0             	and    edx,0xfffffff0
c001ade7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001adea:	c3                   	ret    
c001adeb:	90                   	nop

c001adec <PCI::readBAR16(unsigned int, int)>:
c001adec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adf4:	f6 c2 01             	test   dl,0x1
c001adf7:	74 08                	je     c001ae01 <PCI::readBAR16(unsigned int, int)+0x15>
c001adf9:	83 e2 fc             	and    edx,0xfffffffc
c001adfc:	01 c2                	add    edx,eax
c001adfe:	66 ed                	in     ax,dx
c001ae00:	c3                   	ret    
c001ae01:	83 e2 f0             	and    edx,0xfffffff0
c001ae04:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ae08:	c3                   	ret    
c001ae09:	90                   	nop

c001ae0a <PCI::readBAR32(unsigned int, int)>:
c001ae0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae12:	f6 c2 01             	test   dl,0x1
c001ae15:	74 07                	je     c001ae1e <PCI::readBAR32(unsigned int, int)+0x14>
c001ae17:	83 e2 fc             	and    edx,0xfffffffc
c001ae1a:	01 c2                	add    edx,eax
c001ae1c:	ed                   	in     eax,dx
c001ae1d:	c3                   	ret    
c001ae1e:	83 e2 f0             	and    edx,0xfffffff0
c001ae21:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ae24:	c3                   	ret    
c001ae25:	90                   	nop

c001ae26 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ae26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae32:	f6 c2 01             	test   dl,0x1
c001ae35:	74 07                	je     c001ae3e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ae37:	83 e2 fc             	and    edx,0xfffffffc
c001ae3a:	01 ca                	add    edx,ecx
c001ae3c:	ee                   	out    dx,al
c001ae3d:	c3                   	ret    
c001ae3e:	83 e2 f0             	and    edx,0xfffffff0
c001ae41:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ae44:	c3                   	ret    
c001ae45:	90                   	nop

c001ae46 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ae46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae52:	f6 c2 01             	test   dl,0x1
c001ae55:	74 08                	je     c001ae5f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ae57:	83 e2 fc             	and    edx,0xfffffffc
c001ae5a:	01 ca                	add    edx,ecx
c001ae5c:	66 ef                	out    dx,ax
c001ae5e:	c3                   	ret    
c001ae5f:	83 e2 f0             	and    edx,0xfffffff0
c001ae62:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ae66:	c3                   	ret    
c001ae67:	90                   	nop

c001ae68 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ae68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae74:	f6 c2 01             	test   dl,0x1
c001ae77:	74 07                	je     c001ae80 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ae79:	83 e2 fc             	and    edx,0xfffffffc
c001ae7c:	01 ca                	add    edx,ecx
c001ae7e:	ef                   	out    dx,eax
c001ae7f:	c3                   	ret    
c001ae80:	83 e2 f0             	and    edx,0xfffffff0
c001ae83:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ae86:	c3                   	ret    
c001ae87:	90                   	nop

c001ae88 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae88:	55                   	push   ebp
c001ae89:	57                   	push   edi
c001ae8a:	56                   	push   esi
c001ae8b:	53                   	push   ebx
c001ae8c:	83 ec 0c             	sub    esp,0xc
c001ae8f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ae94:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ae98:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ae9c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aea0:	83 fe 07             	cmp    esi,0x7
c001aea3:	76 10                	jbe    c001aeb5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001aea5:	83 ec 0c             	sub    esp,0xc
c001aea8:	68 2b 2c 02 c0       	push   0xc0022c2b
c001aead:	e8 ef 64 ff ff       	call   c00113a1 <KePanic(char const*)>
c001aeb2:	83 c4 10             	add    esp,0x10
c001aeb5:	0f b6 db             	movzx  ebx,bl
c001aeb8:	83 fb 0f             	cmp    ebx,0xf
c001aebb:	76 10                	jbe    c001aecd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001aebd:	83 ec 0c             	sub    esp,0xc
c001aec0:	68 5b 2c 02 c0       	push   0xc0022c5b
c001aec5:	e8 d7 64 ff ff       	call   c00113a1 <KePanic(char const*)>
c001aeca:	83 c4 10             	add    esp,0x10
c001aecd:	8d 04 36             	lea    eax,[esi+esi*1]
c001aed0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aed5:	83 c8 f0             	or     eax,0xfffffff0
c001aed8:	ee                   	out    dx,al
c001aed9:	ba fa 0c 00 00       	mov    edx,0xcfa
c001aede:	89 e8                	mov    eax,ebp
c001aee0:	ee                   	out    dx,al
c001aee1:	83 c4 0c             	add    esp,0xc
c001aee4:	89 d8                	mov    eax,ebx
c001aee6:	89 f9                	mov    ecx,edi
c001aee8:	c1 e0 08             	shl    eax,0x8
c001aeeb:	0f b6 d9             	movzx  ebx,cl
c001aeee:	83 e3 fc             	and    ebx,0xfffffffc
c001aef1:	09 d8                	or     eax,ebx
c001aef3:	5b                   	pop    ebx
c001aef4:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001aef9:	5e                   	pop    esi
c001aefa:	5f                   	pop    edi
c001aefb:	5d                   	pop    ebp
c001aefc:	c3                   	ret    
c001aefd:	90                   	nop

c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aefe:	57                   	push   edi
c001aeff:	56                   	push   esi
c001af00:	53                   	push   ebx
c001af01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af09:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001af0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af13:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af1b:	83 ff 01             	cmp    edi,0x1
c001af1e:	75 3f                	jne    c001af5f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001af20:	89 de                	mov    esi,ebx
c001af22:	0f b6 c0             	movzx  eax,al
c001af25:	81 e6 fc 00 00 00    	and    esi,0xfc
c001af2b:	c1 e0 10             	shl    eax,0x10
c001af2e:	0f b6 c9             	movzx  ecx,cl
c001af31:	09 f0                	or     eax,esi
c001af33:	c1 e1 08             	shl    ecx,0x8
c001af36:	0f b6 d2             	movzx  edx,dl
c001af39:	09 c8                	or     eax,ecx
c001af3b:	c1 e2 0b             	shl    edx,0xb
c001af3e:	09 d0                	or     eax,edx
c001af40:	ba f8 0c 00 00       	mov    edx,0xcf8
c001af45:	0d 00 00 00 80       	or     eax,0x80000000
c001af4a:	ef                   	out    dx,eax
c001af4b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001af50:	ed                   	in     eax,dx
c001af51:	83 e3 02             	and    ebx,0x2
c001af54:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af5b:	d3 e8                	shr    eax,cl
c001af5d:	eb 44                	jmp    c001afa3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af5f:	83 ff 02             	cmp    edi,0x2
c001af62:	75 2d                	jne    c001af91 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001af64:	83 ec 0c             	sub    esp,0xc
c001af67:	0f b6 c9             	movzx  ecx,cl
c001af6a:	0f b6 d2             	movzx  edx,dl
c001af6d:	0f b6 fb             	movzx  edi,bl
c001af70:	0f b6 c0             	movzx  eax,al
c001af73:	57                   	push   edi
c001af74:	51                   	push   ecx
c001af75:	52                   	push   edx
c001af76:	50                   	push   eax
c001af77:	56                   	push   esi
c001af78:	e8 0b ff ff ff       	call   c001ae88 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af7d:	89 c2                	mov    edx,eax
c001af7f:	ed                   	in     eax,dx
c001af80:	83 e3 02             	and    ebx,0x2
c001af83:	83 c4 20             	add    esp,0x20
c001af86:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001af8d:	d3 e8                	shr    eax,cl
c001af8f:	eb 12                	jmp    c001afa3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001af91:	83 ec 0c             	sub    esp,0xc
c001af94:	68 8b 2c 02 c0       	push   0xc0022c8b
c001af99:	e8 03 64 ff ff       	call   c00113a1 <KePanic(char const*)>
c001af9e:	83 c4 10             	add    esp,0x10
c001afa1:	31 c0                	xor    eax,eax
c001afa3:	5b                   	pop    ebx
c001afa4:	5e                   	pop    esi
c001afa5:	5f                   	pop    edi
c001afa6:	c3                   	ret    
c001afa7:	90                   	nop

c001afa8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001afa8:	83 ec 18             	sub    esp,0x18
c001afab:	6a 00                	push   0x0
c001afad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afb2:	50                   	push   eax
c001afb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afb8:	50                   	push   eax
c001afb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afbe:	50                   	push   eax
c001afbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afc3:	e8 36 ff ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afc8:	83 c4 2c             	add    esp,0x2c
c001afcb:	c3                   	ret    

c001afcc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001afcc:	83 ec 18             	sub    esp,0x18
c001afcf:	6a 0e                	push   0xe
c001afd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afd6:	50                   	push   eax
c001afd7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afdc:	50                   	push   eax
c001afdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afe2:	50                   	push   eax
c001afe3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afe7:	e8 12 ff ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afec:	83 c4 2c             	add    esp,0x2c
c001afef:	0f b6 c0             	movzx  eax,al
c001aff2:	c3                   	ret    
c001aff3:	90                   	nop

c001aff4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001aff4:	55                   	push   ebp
c001aff5:	57                   	push   edi
c001aff6:	56                   	push   esi
c001aff7:	53                   	push   ebx
c001aff8:	83 ec 18             	sub    esp,0x18
c001affb:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b000:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b005:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b00a:	6a 0a                	push   0xa
c001b00c:	56                   	push   esi
c001b00d:	55                   	push   ebp
c001b00e:	57                   	push   edi
c001b00f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b013:	e8 e6 fe ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b018:	83 c4 14             	add    esp,0x14
c001b01b:	89 c3                	mov    ebx,eax
c001b01d:	6a 0a                	push   0xa
c001b01f:	0f b6 db             	movzx  ebx,bl
c001b022:	56                   	push   esi
c001b023:	55                   	push   ebp
c001b024:	57                   	push   edi
c001b025:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b029:	e8 d0 fe ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b02e:	83 c4 2c             	add    esp,0x2c
c001b031:	25 00 ff 00 00       	and    eax,0xff00
c001b036:	09 d8                	or     eax,ebx
c001b038:	5b                   	pop    ebx
c001b039:	5e                   	pop    esi
c001b03a:	5f                   	pop    edi
c001b03b:	5d                   	pop    ebp
c001b03c:	c3                   	ret    
c001b03d:	90                   	nop

c001b03e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b03e:	83 ec 18             	sub    esp,0x18
c001b041:	6a 08                	push   0x8
c001b043:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b048:	50                   	push   eax
c001b049:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b04e:	50                   	push   eax
c001b04f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b054:	50                   	push   eax
c001b055:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b059:	e8 a0 fe ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b05e:	83 c4 2c             	add    esp,0x2c
c001b061:	0f b6 c4             	movzx  eax,ah
c001b064:	c3                   	ret    
c001b065:	90                   	nop

c001b066 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b066:	83 ec 18             	sub    esp,0x18
c001b069:	6a 08                	push   0x8
c001b06b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b070:	50                   	push   eax
c001b071:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b076:	50                   	push   eax
c001b077:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b07c:	50                   	push   eax
c001b07d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b081:	e8 78 fe ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b086:	83 c4 2c             	add    esp,0x2c
c001b089:	c3                   	ret    

c001b08a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b08a:	83 ec 18             	sub    esp,0x18
c001b08d:	6a 3c                	push   0x3c
c001b08f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b094:	50                   	push   eax
c001b095:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b09a:	50                   	push   eax
c001b09b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0a0:	50                   	push   eax
c001b0a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0a5:	e8 54 fe ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0aa:	83 c4 2c             	add    esp,0x2c
c001b0ad:	c3                   	ret    

c001b0ae <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b0ae:	83 ec 18             	sub    esp,0x18
c001b0b1:	6a 18                	push   0x18
c001b0b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0b8:	50                   	push   eax
c001b0b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0be:	50                   	push   eax
c001b0bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b0c4:	50                   	push   eax
c001b0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0c9:	e8 30 fe ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0ce:	83 c4 2c             	add    esp,0x2c
c001b0d1:	0f b6 c4             	movzx  eax,ah
c001b0d4:	c3                   	ret    
c001b0d5:	90                   	nop

c001b0d6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b0d6:	55                   	push   ebp
c001b0d7:	57                   	push   edi
c001b0d8:	56                   	push   esi
c001b0d9:	53                   	push   ebx
c001b0da:	83 ec 28             	sub    esp,0x28
c001b0dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b0e1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b0e6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b0eb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b0f0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b0f7:	8d 43 12             	lea    eax,[ebx+0x12]
c001b0fa:	83 c3 10             	add    ebx,0x10
c001b0fd:	0f b6 c0             	movzx  eax,al
c001b100:	0f b6 db             	movzx  ebx,bl
c001b103:	50                   	push   eax
c001b104:	51                   	push   ecx
c001b105:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b109:	57                   	push   edi
c001b10a:	55                   	push   ebp
c001b10b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b10f:	e8 ea fd ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b114:	83 c4 14             	add    esp,0x14
c001b117:	89 c6                	mov    esi,eax
c001b119:	53                   	push   ebx
c001b11a:	c1 e6 10             	shl    esi,0x10
c001b11d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b121:	51                   	push   ecx
c001b122:	57                   	push   edi
c001b123:	55                   	push   ebp
c001b124:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b128:	e8 d1 fd ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b12d:	83 c4 3c             	add    esp,0x3c
c001b130:	0f b7 c0             	movzx  eax,ax
c001b133:	5b                   	pop    ebx
c001b134:	09 f0                	or     eax,esi
c001b136:	5e                   	pop    esi
c001b137:	5f                   	pop    edi
c001b138:	5d                   	pop    ebp
c001b139:	c3                   	ret    

c001b13a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b13a:	55                   	push   ebp
c001b13b:	57                   	push   edi
c001b13c:	56                   	push   esi
c001b13d:	53                   	push   ebx
c001b13e:	83 ec 0c             	sub    esp,0xc
c001b141:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b145:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b149:	89 f5                	mov    ebp,esi
c001b14b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b151:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b155:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b159:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b15d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b161:	83 f9 01             	cmp    ecx,0x1
c001b164:	75 5d                	jne    c001b1c3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b166:	0f b6 c8             	movzx  ecx,al
c001b169:	0f b6 d2             	movzx  edx,dl
c001b16c:	c1 e1 10             	shl    ecx,0x10
c001b16f:	c1 e2 0b             	shl    edx,0xb
c001b172:	89 f0                	mov    eax,esi
c001b174:	25 fc 00 00 00       	and    eax,0xfc
c001b179:	09 c1                	or     ecx,eax
c001b17b:	89 e8                	mov    eax,ebp
c001b17d:	0f b6 c0             	movzx  eax,al
c001b180:	c1 e0 08             	shl    eax,0x8
c001b183:	09 c1                	or     ecx,eax
c001b185:	09 d1                	or     ecx,edx
c001b187:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b18c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b192:	89 c8                	mov    eax,ecx
c001b194:	ef                   	out    dx,eax
c001b195:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b19a:	ed                   	in     eax,dx
c001b19b:	0f b7 db             	movzx  ebx,bx
c001b19e:	83 e6 02             	and    esi,0x2
c001b1a1:	74 0a                	je     c001b1ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b1a3:	0f b7 d0             	movzx  edx,ax
c001b1a6:	c1 e3 10             	shl    ebx,0x10
c001b1a9:	09 d3                	or     ebx,edx
c001b1ab:	eb 05                	jmp    c001b1b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b1ad:	66 31 c0             	xor    ax,ax
c001b1b0:	09 c3                	or     ebx,eax
c001b1b2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1b7:	89 c8                	mov    eax,ecx
c001b1b9:	ef                   	out    dx,eax
c001b1ba:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1bf:	89 d8                	mov    eax,ebx
c001b1c1:	eb 41                	jmp    c001b204 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b1c3:	83 f9 02             	cmp    ecx,0x2
c001b1c6:	75 45                	jne    c001b20d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b1c8:	83 ec 0c             	sub    esp,0xc
c001b1cb:	0f b6 d2             	movzx  edx,dl
c001b1ce:	89 f1                	mov    ecx,esi
c001b1d0:	0f b6 c0             	movzx  eax,al
c001b1d3:	0f b6 f1             	movzx  esi,cl
c001b1d6:	89 e9                	mov    ecx,ebp
c001b1d8:	56                   	push   esi
c001b1d9:	0f b6 c9             	movzx  ecx,cl
c001b1dc:	51                   	push   ecx
c001b1dd:	52                   	push   edx
c001b1de:	50                   	push   eax
c001b1df:	57                   	push   edi
c001b1e0:	e8 a3 fc ff ff       	call   c001ae88 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1e5:	89 c2                	mov    edx,eax
c001b1e7:	ed                   	in     eax,dx
c001b1e8:	83 c4 20             	add    esp,0x20
c001b1eb:	0f b7 db             	movzx  ebx,bx
c001b1ee:	f6 c2 02             	test   dl,0x2
c001b1f1:	74 0c                	je     c001b1ff <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b1f3:	0f b7 c8             	movzx  ecx,ax
c001b1f6:	89 d8                	mov    eax,ebx
c001b1f8:	c1 e0 10             	shl    eax,0x10
c001b1fb:	09 c8                	or     eax,ecx
c001b1fd:	eb 05                	jmp    c001b204 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b1ff:	66 31 c0             	xor    ax,ax
c001b202:	09 d8                	or     eax,ebx
c001b204:	ef                   	out    dx,eax
c001b205:	83 c4 0c             	add    esp,0xc
c001b208:	5b                   	pop    ebx
c001b209:	5e                   	pop    esi
c001b20a:	5f                   	pop    edi
c001b20b:	5d                   	pop    ebp
c001b20c:	c3                   	ret    
c001b20d:	c7 44 24 20 8b 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c8b
c001b215:	83 c4 0c             	add    esp,0xc
c001b218:	5b                   	pop    ebx
c001b219:	5e                   	pop    esi
c001b21a:	5f                   	pop    edi
c001b21b:	5d                   	pop    ebp
c001b21c:	e9 80 61 ff ff       	jmp    c00113a1 <KePanic(char const*)>
c001b221:	90                   	nop

c001b222 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b222:	55                   	push   ebp
c001b223:	57                   	push   edi
c001b224:	56                   	push   esi
c001b225:	53                   	push   ebx
c001b226:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b22c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b233:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b23a:	0f 85 bd 00 00 00    	jne    c001b2fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b240:	83 ec 0c             	sub    esp,0xc
c001b243:	68 14 01 00 00       	push   0x114
c001b248:	e8 69 c8 fe ff       	call   c0007ab6 <malloc>
c001b24d:	83 c4 0c             	add    esp,0xc
c001b250:	89 c3                	mov    ebx,eax
c001b252:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b258:	68 91 2c 02 c0       	push   0xc0022c91
c001b25d:	50                   	push   eax
c001b25e:	e8 eb 05 ff ff       	call   c000b84e <File::File(char const*, Process*)>
c001b263:	83 c4 10             	add    esp,0x10
c001b266:	85 db                	test   ebx,ebx
c001b268:	0f 84 67 02 00 00    	je     c001b4d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b26e:	56                   	push   esi
c001b26f:	56                   	push   esi
c001b270:	6a 01                	push   0x1
c001b272:	53                   	push   ebx
c001b273:	e8 9e 06 ff ff       	call   c000b916 <File::open(FileOpenMode)>
c001b278:	83 c4 10             	add    esp,0x10
c001b27b:	85 c0                	test   eax,eax
c001b27d:	0f 85 52 02 00 00    	jne    c001b4d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b283:	52                   	push   edx
c001b284:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b288:	50                   	push   eax
c001b289:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b28d:	50                   	push   eax
c001b28e:	53                   	push   ebx
c001b28f:	e8 84 09 ff ff       	call   c000bc18 <File::stat(unsigned long long*, bool*)>
c001b294:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b298:	40                   	inc    eax
c001b299:	89 04 24             	mov    DWORD PTR [esp],eax
c001b29c:	e8 15 c8 fe ff       	call   c0007ab6 <malloc>
c001b2a1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b2a5:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b2aa:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b2ae:	59                   	pop    ecx
c001b2af:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2b1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b2b5:	51                   	push   ecx
c001b2b6:	50                   	push   eax
c001b2b7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b2bb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b2bf:	53                   	push   ebx
c001b2c0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2c3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b2c7:	83 c4 20             	add    esp,0x20
c001b2ca:	89 c8                	mov    eax,ecx
c001b2cc:	99                   	cdq    
c001b2cd:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b2d1:	0f 85 fe 01 00 00    	jne    c001b4d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b2d7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b2db:	0f 85 f4 01 00 00    	jne    c001b4d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b2e1:	83 ec 0c             	sub    esp,0xc
c001b2e4:	53                   	push   ebx
c001b2e5:	e8 8a 06 ff ff       	call   c000b974 <File::close()>
c001b2ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2ee:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b2f5:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b302:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b30c:	31 f6                	xor    esi,esi
c001b30e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b316:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b31d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b322:	31 c9                	xor    ecx,ecx
c001b324:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b32c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b331:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b339:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b33d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b345:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b349:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b34d:	0f 8e 82 01 00 00    	jle    c001b4d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b353:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b356:	d4 40                	aam    0x40
c001b358:	d5 39                	aad    0x39
c001b35a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b35e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b362:	d4 40                	aam    0x40
c001b364:	d5 39                	aad    0x39
c001b366:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b36a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b36e:	d4 40                	aam    0x40
c001b370:	d5 39                	aad    0x39
c001b372:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b376:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b37a:	d4 40                	aam    0x40
c001b37c:	d5 39                	aad    0x39
c001b37e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b382:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b386:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b38a:	3c 56                	cmp    al,0x56
c001b38c:	74 43                	je     c001b3d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b38e:	d4 40                	aam    0x40
c001b390:	d5 39                	aad    0x39
c001b392:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b395:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b399:	0f b6 c9             	movzx  ecx,cl
c001b39c:	c1 e1 04             	shl    ecx,0x4
c001b39f:	d4 40                	aam    0x40
c001b3a1:	d5 39                	aad    0x39
c001b3a3:	83 e8 30             	sub    eax,0x30
c001b3a6:	0f b6 c0             	movzx  eax,al
c001b3a9:	09 c1                	or     ecx,eax
c001b3ab:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b3af:	c1 e1 04             	shl    ecx,0x4
c001b3b2:	d4 40                	aam    0x40
c001b3b4:	d5 39                	aad    0x39
c001b3b6:	83 e8 30             	sub    eax,0x30
c001b3b9:	0f b6 c0             	movzx  eax,al
c001b3bc:	09 c1                	or     ecx,eax
c001b3be:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b3c2:	c1 e1 04             	shl    ecx,0x4
c001b3c5:	d4 40                	aam    0x40
c001b3c7:	d5 39                	aad    0x39
c001b3c9:	83 e8 30             	sub    eax,0x30
c001b3cc:	0f b6 c0             	movzx  eax,al
c001b3cf:	09 c1                	or     ecx,eax
c001b3d1:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b3d5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b3d9:	3c 58                	cmp    al,0x58
c001b3db:	74 47                	je     c001b424 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b3dd:	d4 40                	aam    0x40
c001b3df:	d5 39                	aad    0x39
c001b3e1:	8d 50 d0             	lea    edx,[eax-0x30]
c001b3e4:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b3e8:	0f b6 d2             	movzx  edx,dl
c001b3eb:	c1 e2 04             	shl    edx,0x4
c001b3ee:	d4 40                	aam    0x40
c001b3f0:	d5 39                	aad    0x39
c001b3f2:	83 e8 30             	sub    eax,0x30
c001b3f5:	0f b6 c0             	movzx  eax,al
c001b3f8:	09 c2                	or     edx,eax
c001b3fa:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b3fe:	c1 e2 04             	shl    edx,0x4
c001b401:	d4 40                	aam    0x40
c001b403:	d5 39                	aad    0x39
c001b405:	83 e8 30             	sub    eax,0x30
c001b408:	0f b6 c0             	movzx  eax,al
c001b40b:	09 c2                	or     edx,eax
c001b40d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b411:	c1 e2 04             	shl    edx,0x4
c001b414:	d4 40                	aam    0x40
c001b416:	d5 39                	aad    0x39
c001b418:	83 e8 30             	sub    eax,0x30
c001b41b:	0f b6 c0             	movzx  eax,al
c001b41e:	09 c2                	or     edx,eax
c001b420:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b424:	83 c6 10             	add    esi,0x10
c001b427:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b42b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b42f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b433:	83 fa 0a             	cmp    edx,0xa
c001b436:	74 0b                	je     c001b443 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b438:	47                   	inc    edi
c001b439:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b43d:	75 19                	jne    c001b458 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b43f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b443:	31 c0                	xor    eax,eax
c001b445:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b44a:	0f 94 c0             	sete   al
c001b44d:	01 c6                	add    esi,eax
c001b44f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b454:	75 0b                	jne    c001b461 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b456:	eb 14                	jmp    c001b46c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b458:	46                   	inc    esi
c001b459:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b45c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b45f:	eb ca                	jmp    c001b42b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b461:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b466:	0f 85 dd fe ff ff    	jne    c001b349 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b46c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b471:	74 10                	je     c001b483 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b473:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b478:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b47d:	0f 85 c6 fe ff ff    	jne    c001b349 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b483:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b487:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b48b:	83 e8 30             	sub    eax,0x30
c001b48e:	83 ef 30             	sub    edi,0x30
c001b491:	c1 e0 04             	shl    eax,0x4
c001b494:	09 f8                	or     eax,edi
c001b496:	0f b6 c0             	movzx  eax,al
c001b499:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b49d:	0f 85 a6 fe ff ff    	jne    c001b349 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b4a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4a7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b4ab:	83 e8 30             	sub    eax,0x30
c001b4ae:	83 ef 30             	sub    edi,0x30
c001b4b1:	c1 e0 04             	shl    eax,0x4
c001b4b4:	09 f8                	or     eax,edi
c001b4b6:	0f b6 c0             	movzx  eax,al
c001b4b9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b4bd:	0f 85 86 fe ff ff    	jne    c001b349 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b4c3:	50                   	push   eax
c001b4c4:	50                   	push   eax
c001b4c5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b4c9:	50                   	push   eax
c001b4ca:	55                   	push   ebp
c001b4cb:	e8 70 51 fe ff       	call   c0000640 <strcpy>
c001b4d0:	83 c4 10             	add    esp,0x10
c001b4d3:	eb 06                	jmp    c001b4db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b4d5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b4d9:	31 ed                	xor    ebp,ebp
c001b4db:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b4e1:	89 e8                	mov    eax,ebp
c001b4e3:	5b                   	pop    ebx
c001b4e4:	5e                   	pop    esi
c001b4e5:	5f                   	pop    edi
c001b4e6:	5d                   	pop    ebp
c001b4e7:	c3                   	ret    

c001b4e8 <PCI::checkBus(unsigned char)>:
c001b4e8:	56                   	push   esi
c001b4e9:	53                   	push   ebx
c001b4ea:	31 db                	xor    ebx,ebx
c001b4ec:	51                   	push   ecx
c001b4ed:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b4f2:	52                   	push   edx
c001b4f3:	53                   	push   ebx
c001b4f4:	43                   	inc    ebx
c001b4f5:	56                   	push   esi
c001b4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4fa:	e8 03 03 00 00       	call   c001b802 <PCI::checkDevice(unsigned char, unsigned char)>
c001b4ff:	83 c4 10             	add    esp,0x10
c001b502:	83 fb 20             	cmp    ebx,0x20
c001b505:	75 eb                	jne    c001b4f2 <PCI::checkBus(unsigned char)+0xa>
c001b507:	58                   	pop    eax
c001b508:	5b                   	pop    ebx
c001b509:	5e                   	pop    esi
c001b50a:	c3                   	ret    
c001b50b:	90                   	nop

c001b50c <PCI::foundDevice(PCIDeviceInfo)>:
c001b50c:	55                   	push   ebp
c001b50d:	57                   	push   edi
c001b50e:	56                   	push   esi
c001b50f:	53                   	push   ebx
c001b510:	83 ec 1c             	sub    esp,0x1c
c001b513:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b518:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b51c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b521:	0f 84 57 01 00 00    	je     c001b67e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b527:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b52c:	66 3d 06 04          	cmp    ax,0x406
c001b530:	75 2c                	jne    c001b55e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b532:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b537:	50                   	push   eax
c001b538:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b53d:	50                   	push   eax
c001b53e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b543:	50                   	push   eax
c001b544:	53                   	push   ebx
c001b545:	e8 64 fb ff ff       	call   c001b0ae <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b54a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b54e:	0f b6 c0             	movzx  eax,al
c001b551:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b555:	83 c4 2c             	add    esp,0x2c
c001b558:	5b                   	pop    ebx
c001b559:	5e                   	pop    esi
c001b55a:	5f                   	pop    edi
c001b55b:	5d                   	pop    ebp
c001b55c:	eb 8a                	jmp    c001b4e8 <PCI::checkBus(unsigned char)>
c001b55e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b562:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b568:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b56c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b570:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b575:	85 d2                	test   edx,edx
c001b577:	74 36                	je     c001b5af <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b579:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b57c:	85 c9                	test   ecx,ecx
c001b57e:	74 2b                	je     c001b5ab <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b580:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b586:	31 ee                	xor    esi,ebp
c001b588:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b58e:	75 1b                	jne    c001b5ab <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b590:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b594:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b59a:	75 0f                	jne    c001b5ab <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b59c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b5a3:	39 f9                	cmp    ecx,edi
c001b5a5:	0f 84 d3 00 00 00    	je     c001b67e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b5ab:	8b 12                	mov    edx,DWORD PTR [edx]
c001b5ad:	eb c6                	jmp    c001b575 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b5af:	3d 01 06 00 00       	cmp    eax,0x601
c001b5b4:	75 19                	jne    c001b5cf <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b5b6:	83 ec 0c             	sub    esp,0xc
c001b5b9:	68 64 01 00 00       	push   0x164
c001b5be:	e8 f3 c4 fe ff       	call   c0007ab6 <malloc>
c001b5c3:	89 c5                	mov    ebp,eax
c001b5c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5c8:	e8 a1 0e 00 00       	call   c001c46e <SATABus::SATABus()>
c001b5cd:	eb 1e                	jmp    c001b5ed <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b5cf:	3d 01 01 00 00       	cmp    eax,0x101
c001b5d4:	75 62                	jne    c001b638 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b5d6:	83 ec 0c             	sub    esp,0xc
c001b5d9:	68 70 02 00 00       	push   0x270
c001b5de:	e8 d3 c4 fe ff       	call   c0007ab6 <malloc>
c001b5e3:	89 c5                	mov    ebp,eax
c001b5e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5e8:	e8 e5 02 00 00       	call   c001b8d2 <IDE::IDE()>
c001b5ed:	5f                   	pop    edi
c001b5ee:	58                   	pop    eax
c001b5ef:	55                   	push   ebp
c001b5f0:	53                   	push   ebx
c001b5f1:	e8 7c 11 ff ff       	call   c000c772 <Device::addChild(Device*)>
c001b5f6:	83 ec 1c             	sub    esp,0x1c
c001b5f9:	b9 09 00 00 00       	mov    ecx,0x9
c001b5fe:	fc                   	cld    
c001b5ff:	89 e7                	mov    edi,esp
c001b601:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b605:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b607:	55                   	push   ebp
c001b608:	e8 ab 10 ff ff       	call   c000c6b8 <Device::preOpenPCI(PCIDeviceInfo)>
c001b60d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b610:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b614:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b61c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b624:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b62c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b62f:	83 c4 4c             	add    esp,0x4c
c001b632:	5b                   	pop    ebx
c001b633:	5e                   	pop    esi
c001b634:	5f                   	pop    edi
c001b635:	5d                   	pop    ebp
c001b636:	ff e0                	jmp    eax
c001b638:	83 ec 0c             	sub    esp,0xc
c001b63b:	68 58 01 00 00       	push   0x158
c001b640:	e8 71 c4 fe ff       	call   c0007ab6 <malloc>
c001b645:	89 c5                	mov    ebp,eax
c001b647:	58                   	pop    eax
c001b648:	5a                   	pop    edx
c001b649:	68 aa 2c 02 c0       	push   0xc0022caa
c001b64e:	55                   	push   ebp
c001b64f:	e8 bc 13 ff ff       	call   c000ca10 <DriverlessDevice::DriverlessDevice(char const*)>
c001b654:	59                   	pop    ecx
c001b655:	5e                   	pop    esi
c001b656:	55                   	push   ebp
c001b657:	53                   	push   ebx
c001b658:	e8 15 11 ff ff       	call   c000c772 <Device::addChild(Device*)>
c001b65d:	83 c4 10             	add    esp,0x10
c001b660:	b9 09 00 00 00       	mov    ecx,0x9
c001b665:	fc                   	cld    
c001b666:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b66a:	89 fe                	mov    esi,edi
c001b66c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b66e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b672:	83 c4 1c             	add    esp,0x1c
c001b675:	5b                   	pop    ebx
c001b676:	5e                   	pop    esi
c001b677:	5f                   	pop    edi
c001b678:	5d                   	pop    ebp
c001b679:	e9 3a 10 ff ff       	jmp    c000c6b8 <Device::preOpenPCI(PCIDeviceInfo)>
c001b67e:	83 c4 1c             	add    esp,0x1c
c001b681:	5b                   	pop    ebx
c001b682:	5e                   	pop    esi
c001b683:	5f                   	pop    edi
c001b684:	5d                   	pop    ebp
c001b685:	c3                   	ret    

c001b686 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b686:	55                   	push   ebp
c001b687:	57                   	push   edi
c001b688:	56                   	push   esi
c001b689:	53                   	push   ebx
c001b68a:	83 ec 68             	sub    esp,0x68
c001b68d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b691:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b698:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b69c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b6a3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b6a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b6ac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b6b3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b6b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b6bc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b6c1:	6a 0c                	push   0xc
c001b6c3:	57                   	push   edi
c001b6c4:	53                   	push   ebx
c001b6c5:	56                   	push   esi
c001b6c6:	55                   	push   ebp
c001b6c7:	e8 32 f8 ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6cc:	83 c4 20             	add    esp,0x20
c001b6cf:	57                   	push   edi
c001b6d0:	53                   	push   ebx
c001b6d1:	56                   	push   esi
c001b6d2:	55                   	push   ebp
c001b6d3:	e8 1c f9 ff ff       	call   c001aff4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b6d8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b6dd:	57                   	push   edi
c001b6de:	53                   	push   ebx
c001b6df:	56                   	push   esi
c001b6e0:	55                   	push   ebp
c001b6e1:	e8 a4 f9 ff ff       	call   c001b08a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b6e6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b6ea:	83 c4 14             	add    esp,0x14
c001b6ed:	6a 3c                	push   0x3c
c001b6ef:	57                   	push   edi
c001b6f0:	53                   	push   ebx
c001b6f1:	56                   	push   esi
c001b6f2:	55                   	push   ebp
c001b6f3:	e8 06 f8 ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6f8:	0f b6 c4             	movzx  eax,ah
c001b6fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6ff:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b703:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b707:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b70c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b712:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b718:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b71c:	83 c4 20             	add    esp,0x20
c001b71f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b724:	74 30                	je     c001b756 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b726:	31 c0                	xor    eax,eax
c001b728:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b72c:	7e 28                	jle    c001b756 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b72e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b736:	39 cb                	cmp    ebx,ecx
c001b738:	75 19                	jne    c001b753 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b73a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b742:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b746:	75 0b                	jne    c001b753 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b748:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b74f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b753:	40                   	inc    eax
c001b754:	eb d2                	jmp    c001b728 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b756:	31 d2                	xor    edx,edx
c001b758:	83 ec 0c             	sub    esp,0xc
c001b75b:	57                   	push   edi
c001b75c:	53                   	push   ebx
c001b75d:	56                   	push   esi
c001b75e:	52                   	push   edx
c001b75f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b763:	55                   	push   ebp
c001b764:	e8 6d f9 ff ff       	call   c001b0d6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b769:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b76d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b771:	42                   	inc    edx
c001b772:	83 c4 20             	add    esp,0x20
c001b775:	83 fa 06             	cmp    edx,0x6
c001b778:	75 de                	jne    c001b758 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b77a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b77e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b782:	c1 e2 08             	shl    edx,0x8
c001b785:	83 ec 0c             	sub    esp,0xc
c001b788:	0f b6 c4             	movzx  eax,ah
c001b78b:	09 d0                	or     eax,edx
c001b78d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b792:	6a 02                	push   0x2
c001b794:	57                   	push   edi
c001b795:	53                   	push   ebx
c001b796:	56                   	push   esi
c001b797:	55                   	push   ebp
c001b798:	e8 61 f7 ff ff       	call   c001aefe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b79d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b7a2:	83 c4 20             	add    esp,0x20
c001b7a5:	57                   	push   edi
c001b7a6:	53                   	push   ebx
c001b7a7:	56                   	push   esi
c001b7a8:	55                   	push   ebp
c001b7a9:	e8 90 f8 ff ff       	call   c001b03e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b7ae:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b7b2:	57                   	push   edi
c001b7b3:	53                   	push   ebx
c001b7b4:	56                   	push   esi
c001b7b5:	55                   	push   ebp
c001b7b6:	e8 ed f7 ff ff       	call   c001afa8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7bb:	b9 09 00 00 00       	mov    ecx,0x9
c001b7c0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b7c5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b7c9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b7cd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b7d1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b7d5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b7d9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b7dd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b7e1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b7e5:	83 ec 0c             	sub    esp,0xc
c001b7e8:	fc                   	cld    
c001b7e9:	89 e7                	mov    edi,esp
c001b7eb:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b7ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b7f1:	55                   	push   ebp
c001b7f2:	e8 15 fd ff ff       	call   c001b50c <PCI::foundDevice(PCIDeviceInfo)>
c001b7f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b7fd:	5b                   	pop    ebx
c001b7fe:	5e                   	pop    esi
c001b7ff:	5f                   	pop    edi
c001b800:	5d                   	pop    ebp
c001b801:	c3                   	ret    

c001b802 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b802:	55                   	push   ebp
c001b803:	57                   	push   edi
c001b804:	56                   	push   esi
c001b805:	53                   	push   ebx
c001b806:	83 ec 0c             	sub    esp,0xc
c001b809:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b80d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b812:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b817:	6a 00                	push   0x0
c001b819:	56                   	push   esi
c001b81a:	57                   	push   edi
c001b81b:	55                   	push   ebp
c001b81c:	e8 87 f7 ff ff       	call   c001afa8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b821:	6a 00                	push   0x0
c001b823:	56                   	push   esi
c001b824:	57                   	push   edi
c001b825:	55                   	push   ebp
c001b826:	e8 5b fe ff ff       	call   c001b686 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b82b:	83 c4 20             	add    esp,0x20
c001b82e:	6a 00                	push   0x0
c001b830:	56                   	push   esi
c001b831:	57                   	push   edi
c001b832:	55                   	push   ebp
c001b833:	e8 94 f7 ff ff       	call   c001afcc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b838:	83 c4 10             	add    esp,0x10
c001b83b:	a8 80                	test   al,0x80
c001b83d:	74 2d                	je     c001b86c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b83f:	bb 01 00 00 00       	mov    ebx,0x1
c001b844:	53                   	push   ebx
c001b845:	56                   	push   esi
c001b846:	57                   	push   edi
c001b847:	55                   	push   ebp
c001b848:	e8 5b f7 ff ff       	call   c001afa8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b84d:	83 c4 10             	add    esp,0x10
c001b850:	0f b7 c0             	movzx  eax,ax
c001b853:	3d ff ff 00 00       	cmp    eax,0xffff
c001b858:	74 0c                	je     c001b866 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b85a:	53                   	push   ebx
c001b85b:	56                   	push   esi
c001b85c:	57                   	push   edi
c001b85d:	55                   	push   ebp
c001b85e:	e8 23 fe ff ff       	call   c001b686 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b863:	83 c4 10             	add    esp,0x10
c001b866:	43                   	inc    ebx
c001b867:	83 fb 08             	cmp    ebx,0x8
c001b86a:	75 d8                	jne    c001b844 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b86c:	83 c4 0c             	add    esp,0xc
c001b86f:	5b                   	pop    ebx
c001b870:	5e                   	pop    esi
c001b871:	5f                   	pop    edi
c001b872:	5d                   	pop    ebp
c001b873:	c3                   	ret    

c001b874 <PCI::detect()>:
c001b874:	56                   	push   esi
c001b875:	53                   	push   ebx
c001b876:	53                   	push   ebx
c001b877:	31 db                	xor    ebx,ebx
c001b879:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b87d:	6a 00                	push   0x0
c001b87f:	6a 00                	push   0x0
c001b881:	6a 00                	push   0x0
c001b883:	56                   	push   esi
c001b884:	e8 43 f7 ff ff       	call   c001afcc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b889:	83 c4 10             	add    esp,0x10
c001b88c:	a8 80                	test   al,0x80
c001b88e:	75 21                	jne    c001b8b1 <PCI::detect()+0x3d>
c001b890:	51                   	push   ecx
c001b891:	51                   	push   ecx
c001b892:	6a 00                	push   0x0
c001b894:	56                   	push   esi
c001b895:	e8 4e fc ff ff       	call   c001b4e8 <PCI::checkBus(unsigned char)>
c001b89a:	83 c4 10             	add    esp,0x10
c001b89d:	eb 2a                	jmp    c001b8c9 <PCI::detect()+0x55>
c001b89f:	52                   	push   edx
c001b8a0:	52                   	push   edx
c001b8a1:	53                   	push   ebx
c001b8a2:	43                   	inc    ebx
c001b8a3:	56                   	push   esi
c001b8a4:	e8 3f fc ff ff       	call   c001b4e8 <PCI::checkBus(unsigned char)>
c001b8a9:	83 c4 10             	add    esp,0x10
c001b8ac:	83 fb 08             	cmp    ebx,0x8
c001b8af:	74 18                	je     c001b8c9 <PCI::detect()+0x55>
c001b8b1:	53                   	push   ebx
c001b8b2:	6a 00                	push   0x0
c001b8b4:	6a 00                	push   0x0
c001b8b6:	56                   	push   esi
c001b8b7:	e8 ec f6 ff ff       	call   c001afa8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b8bc:	83 c4 10             	add    esp,0x10
c001b8bf:	0f b7 c0             	movzx  eax,ax
c001b8c2:	3d ff ff 00 00       	cmp    eax,0xffff
c001b8c7:	74 d6                	je     c001b89f <PCI::detect()+0x2b>
c001b8c9:	58                   	pop    eax
c001b8ca:	5b                   	pop    ebx
c001b8cb:	5e                   	pop    esi
c001b8cc:	c3                   	ret    
c001b8cd:	90                   	nop

c001b8ce <IDE::close(int, int, void*)>:
c001b8ce:	83 c8 ff             	or     eax,0xffffffff
c001b8d1:	c3                   	ret    

c001b8d2 <IDE::IDE()>:
c001b8d2:	83 ec 0c             	sub    esp,0xc
c001b8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d9:	83 ec 08             	sub    esp,0x8
c001b8dc:	68 f0 2c 02 c0       	push   0xc0022cf0
c001b8e1:	50                   	push   eax
c001b8e2:	e8 cd 11 ff ff       	call   c000cab4 <HardDiskController::HardDiskController(char const*)>
c001b8e7:	83 c4 10             	add    esp,0x10
c001b8ea:	ba 80 2d 02 c0       	mov    edx,0xc0022d80
c001b8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f3:	89 10                	mov    DWORD PTR [eax],edx
c001b8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b900:	90                   	nop
c001b901:	83 c4 0c             	add    esp,0xc
c001b904:	c3                   	ret    
c001b905:	90                   	nop

c001b906 <IDE::prepareInterrupt(unsigned char)>:
c001b906:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b90b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b90f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b917:	c3                   	ret    

c001b918 <selectDrive(unsigned char, unsigned char)>:
c001b918:	c3                   	ret    
c001b919:	90                   	nop

c001b91a <IDE::getBase(unsigned char)>:
c001b91a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b91f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b923:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b92b:	c3                   	ret    

c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b92c:	55                   	push   ebp
c001b92d:	57                   	push   edi
c001b92e:	56                   	push   esi
c001b92f:	53                   	push   ebx
c001b930:	83 ec 1c             	sub    esp,0x1c
c001b933:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b93b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b93e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b942:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b946:	80 f9 03             	cmp    cl,0x3
c001b949:	77 4f                	ja     c001b99a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b94b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b94f:	0f b6 fa             	movzx  edi,dl
c001b952:	0f b6 db             	movzx  ebx,bl
c001b955:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b958:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b95d:	80 ca 80             	or     dl,0x80
c001b960:	52                   	push   edx
c001b961:	6a 0c                	push   0xc
c001b963:	57                   	push   edi
c001b964:	56                   	push   esi
c001b965:	e8 c2 ff ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b96a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b96f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b973:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b977:	ee                   	out    dx,al
c001b978:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b97d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b981:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b985:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b989:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b991:	83 c4 2c             	add    esp,0x2c
c001b994:	5b                   	pop    ebx
c001b995:	5e                   	pop    esi
c001b996:	5f                   	pop    edi
c001b997:	5d                   	pop    ebp
c001b998:	eb 92                	jmp    c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b99a:	0f b6 cb             	movzx  ecx,bl
c001b99d:	83 f9 07             	cmp    ecx,0x7
c001b9a0:	77 12                	ja     c001b9b4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b9a2:	0f b6 d2             	movzx  edx,dl
c001b9a5:	0f b6 db             	movzx  ebx,bl
c001b9a8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b9b0:	01 da                	add    edx,ebx
c001b9b2:	eb 2f                	jmp    c001b9e3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b9b4:	83 f9 0d             	cmp    ecx,0xd
c001b9b7:	77 13                	ja     c001b9cc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b9b9:	0f b6 d2             	movzx  edx,dl
c001b9bc:	0f b6 db             	movzx  ebx,bl
c001b9bf:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b9c6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b9ca:	eb 17                	jmp    c001b9e3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b9cc:	83 f9 15             	cmp    ecx,0x15
c001b9cf:	77 13                	ja     c001b9e4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b9d1:	0f b6 d2             	movzx  edx,dl
c001b9d4:	0f b6 db             	movzx  ebx,bl
c001b9d7:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b9df:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b9e3:	ee                   	out    dx,al
c001b9e4:	83 c4 1c             	add    esp,0x1c
c001b9e7:	5b                   	pop    ebx
c001b9e8:	5e                   	pop    esi
c001b9e9:	5f                   	pop    edi
c001b9ea:	5d                   	pop    ebp
c001b9eb:	c3                   	ret    

c001b9ec <IDE::read(unsigned char, unsigned char)>:
c001b9ec:	55                   	push   ebp
c001b9ed:	57                   	push   edi
c001b9ee:	56                   	push   esi
c001b9ef:	53                   	push   ebx
c001b9f0:	83 ec 1c             	sub    esp,0x1c
c001b9f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b9f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b9fb:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b9fe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ba02:	3c 03                	cmp    al,0x3
c001ba04:	77 40                	ja     c001ba46 <IDE::read(unsigned char, unsigned char)+0x5a>
c001ba06:	0f b6 f9             	movzx  edi,cl
c001ba09:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ba0c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ba11:	0c 80                	or     al,0x80
c001ba13:	50                   	push   eax
c001ba14:	6a 0c                	push   0xc
c001ba16:	57                   	push   edi
c001ba17:	56                   	push   esi
c001ba18:	e8 0f ff ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba1d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ba22:	0f b6 d3             	movzx  edx,bl
c001ba25:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ba29:	ec                   	in     al,dx
c001ba2a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ba2e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ba33:	52                   	push   edx
c001ba34:	6a 0c                	push   0xc
c001ba36:	57                   	push   edi
c001ba37:	56                   	push   esi
c001ba38:	e8 ef fe ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba3d:	83 c4 20             	add    esp,0x20
c001ba40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ba44:	eb 4c                	jmp    c001ba92 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ba46:	0f b6 d3             	movzx  edx,bl
c001ba49:	83 fa 07             	cmp    edx,0x7
c001ba4c:	77 12                	ja     c001ba60 <IDE::read(unsigned char, unsigned char)+0x74>
c001ba4e:	0f b6 c9             	movzx  ecx,cl
c001ba51:	0f b6 d3             	movzx  edx,bl
c001ba54:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ba5c:	01 c2                	add    edx,eax
c001ba5e:	eb 31                	jmp    c001ba91 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ba60:	83 fa 0d             	cmp    edx,0xd
c001ba63:	77 13                	ja     c001ba78 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ba65:	0f b6 c9             	movzx  ecx,cl
c001ba68:	0f b6 d3             	movzx  edx,bl
c001ba6b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ba72:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ba76:	eb 19                	jmp    c001ba91 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ba78:	31 c0                	xor    eax,eax
c001ba7a:	83 fa 15             	cmp    edx,0x15
c001ba7d:	77 13                	ja     c001ba92 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ba7f:	0f b6 c9             	movzx  ecx,cl
c001ba82:	0f b6 d3             	movzx  edx,bl
c001ba85:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ba8d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ba91:	ec                   	in     al,dx
c001ba92:	83 c4 1c             	add    esp,0x1c
c001ba95:	5b                   	pop    ebx
c001ba96:	5e                   	pop    esi
c001ba97:	5f                   	pop    edi
c001ba98:	5d                   	pop    ebp
c001ba99:	c3                   	ret    

c001ba9a <IDE::waitInterrupt(unsigned char)>:
c001ba9a:	55                   	push   ebp
c001ba9b:	57                   	push   edi
c001ba9c:	56                   	push   esi
c001ba9d:	53                   	push   ebx
c001ba9e:	31 db                	xor    ebx,ebx
c001baa0:	83 ec 0c             	sub    esp,0xc
c001baa3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001baa7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001baac:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bab4:	89 e8                	mov    eax,ebp
c001bab6:	84 c0                	test   al,al
c001bab8:	75 30                	jne    c001baea <IDE::waitInterrupt(unsigned char)+0x50>
c001baba:	50                   	push   eax
c001babb:	6a 0c                	push   0xc
c001babd:	56                   	push   esi
c001babe:	57                   	push   edi
c001babf:	e8 28 ff ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001bac4:	83 c4 10             	add    esp,0x10
c001bac7:	a8 01                	test   al,0x1
c001bac9:	75 27                	jne    c001baf2 <IDE::waitInterrupt(unsigned char)+0x58>
c001bacb:	f6 c3 04             	test   bl,0x4
c001bace:	75 12                	jne    c001bae2 <IDE::waitInterrupt(unsigned char)+0x48>
c001bad0:	83 fb 32             	cmp    ebx,0x32
c001bad3:	7e 0d                	jle    c001bae2 <IDE::waitInterrupt(unsigned char)+0x48>
c001bad5:	83 ec 0c             	sub    esp,0xc
c001bad8:	6a 64                	push   0x64
c001bada:	e8 b1 a4 ff ff       	call   c0015f90 <milliTenthSleep(unsigned int)>
c001badf:	83 c4 10             	add    esp,0x10
c001bae2:	83 fb 3c             	cmp    ebx,0x3c
c001bae5:	74 0b                	je     c001baf2 <IDE::waitInterrupt(unsigned char)+0x58>
c001bae7:	43                   	inc    ebx
c001bae8:	eb c2                	jmp    c001baac <IDE::waitInterrupt(unsigned char)+0x12>
c001baea:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001baf2:	83 c4 0c             	add    esp,0xc
c001baf5:	89 e8                	mov    eax,ebp
c001baf7:	5b                   	pop    ebx
c001baf8:	5e                   	pop    esi
c001baf9:	5f                   	pop    edi
c001bafa:	5d                   	pop    ebp
c001bafb:	c3                   	ret    

c001bafc <ideChannel0IRQHandler(regs*, void*)>:
c001bafc:	83 ec 10             	sub    esp,0x10
c001baff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb03:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bb0a:	6a 07                	push   0x7
c001bb0c:	6a 00                	push   0x0
c001bb0e:	50                   	push   eax
c001bb0f:	e8 d8 fe ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001bb14:	83 c4 1c             	add    esp,0x1c
c001bb17:	c3                   	ret    

c001bb18 <ideChannel1IRQHandler(regs*, void*)>:
c001bb18:	83 ec 10             	sub    esp,0x10
c001bb1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb1f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bb26:	6a 07                	push   0x7
c001bb28:	6a 01                	push   0x1
c001bb2a:	50                   	push   eax
c001bb2b:	e8 bc fe ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001bb30:	83 c4 1c             	add    esp,0x1c
c001bb33:	c3                   	ret    

c001bb34 <IDE::enableIRQs(unsigned char, bool)>:
c001bb34:	57                   	push   edi
c001bb35:	b8 02 00 00 00       	mov    eax,0x2
c001bb3a:	56                   	push   esi
c001bb3b:	53                   	push   ebx
c001bb3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb40:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bb44:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bb49:	74 02                	je     c001bb4d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bb4b:	31 c0                	xor    eax,eax
c001bb4d:	0f b6 db             	movzx  ebx,bl
c001bb50:	bf 04 00 00 00       	mov    edi,0x4
c001bb55:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bb5c:	50                   	push   eax
c001bb5d:	6a 0c                	push   0xc
c001bb5f:	53                   	push   ebx
c001bb60:	56                   	push   esi
c001bb61:	e8 c6 fd ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb66:	83 c4 10             	add    esp,0x10
c001bb69:	50                   	push   eax
c001bb6a:	6a 0c                	push   0xc
c001bb6c:	53                   	push   ebx
c001bb6d:	56                   	push   esi
c001bb6e:	e8 79 fe ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001bb73:	83 c4 10             	add    esp,0x10
c001bb76:	4f                   	dec    edi
c001bb77:	75 f0                	jne    c001bb69 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bb79:	5b                   	pop    ebx
c001bb7a:	5e                   	pop    esi
c001bb7b:	5f                   	pop    edi
c001bb7c:	c3                   	ret    
c001bb7d:	90                   	nop

c001bb7e <IDE::open(int, int, void*)>:
c001bb7e:	55                   	push   ebp
c001bb7f:	57                   	push   edi
c001bb80:	56                   	push   esi
c001bb81:	53                   	push   ebx
c001bb82:	83 ec 1c             	sub    esp,0x1c
c001bb85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bb89:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bb92:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bb9b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bba2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bba9:	0f 85 de 02 00 00    	jne    c001be8d <IDE::open(int, int, void*)+0x30f>
c001bbaf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bbb5:	88 04 24             	mov    BYTE PTR [esp],al
c001bbb8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bbbb:	83 e0 7f             	and    eax,0x7f
c001bbbe:	83 f8 05             	cmp    eax,0x5
c001bbc1:	74 05                	je     c001bbc8 <IDE::open(int, int, void*)+0x4a>
c001bbc3:	83 f8 0f             	cmp    eax,0xf
c001bbc6:	75 32                	jne    c001bbfa <IDE::open(int, int, void*)+0x7c>
c001bbc8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bbce:	83 e0 fc             	and    eax,0xfffffffc
c001bbd1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bbd8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bbde:	83 e0 fc             	and    eax,0xfffffffc
c001bbe1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bbe8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bbee:	83 e0 fc             	and    eax,0xfffffffc
c001bbf1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbf8:	eb 14                	jmp    c001bc0e <IDE::open(int, int, void*)+0x90>
c001bbfa:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bc04:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bc0e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bc15:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bc1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc20:	89 c6                	mov    esi,eax
c001bc22:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bc27:	c1 e6 10             	shl    esi,0x10
c001bc2a:	89 e8                	mov    eax,ebp
c001bc2c:	89 fa                	mov    edx,edi
c001bc2e:	c1 e0 0b             	shl    eax,0xb
c001bc31:	09 f0                	or     eax,esi
c001bc33:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bc3a:	c1 e6 08             	shl    esi,0x8
c001bc3d:	09 c6                	or     esi,eax
c001bc3f:	89 f0                	mov    eax,esi
c001bc41:	0d 08 00 00 80       	or     eax,0x80000008
c001bc46:	ef                   	out    dx,eax
c001bc47:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bc4c:	89 ca                	mov    edx,ecx
c001bc4e:	ed                   	in     eax,dx
c001bc4f:	c1 e8 10             	shr    eax,0x10
c001bc52:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc57:	0f 84 f9 00 00 00    	je     c001bd56 <IDE::open(int, int, void*)+0x1d8>
c001bc5d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bc63:	89 fa                	mov    edx,edi
c001bc65:	89 f0                	mov    eax,esi
c001bc67:	ef                   	out    dx,eax
c001bc68:	b0 fe                	mov    al,0xfe
c001bc6a:	89 ca                	mov    edx,ecx
c001bc6c:	ee                   	out    dx,al
c001bc6d:	89 f0                	mov    eax,esi
c001bc6f:	89 fa                	mov    edx,edi
c001bc71:	ef                   	out    dx,eax
c001bc72:	89 ca                	mov    edx,ecx
c001bc74:	ed                   	in     eax,dx
c001bc75:	3c fe                	cmp    al,0xfe
c001bc77:	0f 85 a9 00 00 00    	jne    c001bd26 <IDE::open(int, int, void*)+0x1a8>
c001bc7d:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bc83:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bc8a:	74 33                	je     c001bcbf <IDE::open(int, int, void*)+0x141>
c001bc8c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bc92:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bc96:	40                   	inc    eax
c001bc97:	83 ec 0c             	sub    esp,0xc
c001bc9a:	0f b6 c0             	movzx  eax,al
c001bc9d:	50                   	push   eax
c001bc9e:	55                   	push   ebp
c001bc9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bca3:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bca9:	51                   	push   ecx
c001bcaa:	e8 35 3a ff ff       	call   c000f6e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bcaf:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bcb4:	83 c4 1c             	add    esp,0x1c
c001bcb7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bcbd:	eb 0a                	jmp    c001bcc9 <IDE::open(int, int, void*)+0x14b>
c001bcbf:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bcc9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bcd0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bcd7:	c1 e1 10             	shl    ecx,0x10
c001bcda:	c1 e0 08             	shl    eax,0x8
c001bcdd:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bce2:	09 c1                	or     ecx,eax
c001bce4:	89 fa                	mov    edx,edi
c001bce6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bced:	c1 e0 0b             	shl    eax,0xb
c001bcf0:	09 c1                	or     ecx,eax
c001bcf2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bcf8:	89 c8                	mov    eax,ecx
c001bcfa:	ef                   	out    dx,eax
c001bcfb:	be fc 0c 00 00       	mov    esi,0xcfc
c001bd00:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bd06:	89 f2                	mov    edx,esi
c001bd08:	ee                   	out    dx,al
c001bd09:	89 c8                	mov    eax,ecx
c001bd0b:	89 fa                	mov    edx,edi
c001bd0d:	ef                   	out    dx,eax
c001bd0e:	89 f2                	mov    edx,esi
c001bd10:	ed                   	in     eax,dx
c001bd11:	0f b6 c0             	movzx  eax,al
c001bd14:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bd1a:	74 4a                	je     c001bd66 <IDE::open(int, int, void*)+0x1e8>
c001bd1c:	83 ec 0c             	sub    esp,0xc
c001bd1f:	68 08 2d 02 c0       	push   0xc0022d08
c001bd24:	eb 38                	jmp    c001bd5e <IDE::open(int, int, void*)+0x1e0>
c001bd26:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bd2f:	75 1b                	jne    c001bd4c <IDE::open(int, int, void*)+0x1ce>
c001bd31:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bd35:	3d 80 00 00 00       	cmp    eax,0x80
c001bd3a:	74 07                	je     c001bd43 <IDE::open(int, int, void*)+0x1c5>
c001bd3c:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bd41:	75 09                	jne    c001bd4c <IDE::open(int, int, void*)+0x1ce>
c001bd43:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd4a:	eb 1a                	jmp    c001bd66 <IDE::open(int, int, void*)+0x1e8>
c001bd4c:	83 ec 0c             	sub    esp,0xc
c001bd4f:	68 10 2d 02 c0       	push   0xc0022d10
c001bd54:	eb 08                	jmp    c001bd5e <IDE::open(int, int, void*)+0x1e0>
c001bd56:	83 ec 0c             	sub    esp,0xc
c001bd59:	68 41 2d 02 c0       	push   0xc0022d41
c001bd5e:	e8 3e 56 ff ff       	call   c00113a1 <KePanic(char const*)>
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bd6d:	74 1a                	je     c001bd89 <IDE::open(int, int, void*)+0x20b>
c001bd6f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bd75:	83 e0 fc             	and    eax,0xfffffffc
c001bd78:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bd7f:	83 c0 08             	add    eax,0x8
c001bd82:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bd89:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bd8f:	89 c2                	mov    edx,eax
c001bd91:	83 e2 0f             	and    edx,0xf
c001bd94:	83 fa 08             	cmp    edx,0x8
c001bd97:	75 0a                	jne    c001bda3 <IDE::open(int, int, void*)+0x225>
c001bd99:	83 e8 02             	sub    eax,0x2
c001bd9c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bda3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bda9:	89 c2                	mov    edx,eax
c001bdab:	83 e2 0f             	and    edx,0xf
c001bdae:	83 fa 08             	cmp    edx,0x8
c001bdb1:	75 0a                	jne    c001bdbd <IDE::open(int, int, void*)+0x23f>
c001bdb3:	83 e8 02             	sub    eax,0x2
c001bdb6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bdbd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bdc4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bdcb:	89 d0                	mov    eax,edx
c001bdcd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdd0:	8d 7a 01             	lea    edi,[edx+0x1]
c001bdd3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdd7:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bddb:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bddf:	83 e1 3f             	and    ecx,0x3f
c001bde2:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bde6:	89 f9                	mov    ecx,edi
c001bde8:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bdef:	0f b6 c9             	movzx  ecx,cl
c001bdf2:	8d 78 02             	lea    edi,[eax+0x2]
c001bdf5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bdf8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bdfc:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001be00:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001be04:	83 e2 3f             	and    edx,0x3f
c001be07:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be0b:	89 f9                	mov    ecx,edi
c001be0d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001be13:	0f b6 d1             	movzx  edx,cl
c001be16:	8d 78 03             	lea    edi,[eax+0x3]
c001be19:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be1c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be20:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001be24:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001be28:	83 e1 3f             	and    ecx,0x3f
c001be2b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001be2f:	89 f9                	mov    ecx,edi
c001be31:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001be37:	0f b6 c9             	movzx  ecx,cl
c001be3a:	8d 78 04             	lea    edi,[eax+0x4]
c001be3d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001be40:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001be44:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001be48:	89 fa                	mov    edx,edi
c001be4a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001be50:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001be54:	83 e2 3f             	and    edx,0x3f
c001be57:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001be5b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001be62:	66 85 f6             	test   si,si
c001be65:	74 65                	je     c001becc <IDE::open(int, int, void*)+0x34e>
c001be67:	89 f9                	mov    ecx,edi
c001be69:	83 c0 05             	add    eax,0x5
c001be6c:	0f b6 d1             	movzx  edx,cl
c001be6f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001be72:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001be76:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001be7a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001be80:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001be84:	83 e0 3f             	and    eax,0x3f
c001be87:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001be8b:	eb 3f                	jmp    c001becc <IDE::open(int, int, void*)+0x34e>
c001be8d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001be93:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001be9a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bea1:	05 06 02 00 00       	add    eax,0x206
c001bea6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bead:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001beb4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bebb:	05 06 02 00 00       	add    eax,0x206
c001bec0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bec7:	e9 bd fe ff ff       	jmp    c001bd89 <IDE::open(int, int, void*)+0x20b>
c001becc:	50                   	push   eax
c001becd:	50                   	push   eax
c001bece:	6a 00                	push   0x0
c001bed0:	53                   	push   ebx
c001bed1:	e8 30 fa ff ff       	call   c001b906 <IDE::prepareInterrupt(unsigned char)>
c001bed6:	5a                   	pop    edx
c001bed7:	59                   	pop    ecx
c001bed8:	6a 01                	push   0x1
c001beda:	53                   	push   ebx
c001bedb:	e8 26 fa ff ff       	call   c001b906 <IDE::prepareInterrupt(unsigned char)>
c001bee0:	83 c4 0c             	add    esp,0xc
c001bee3:	6a 00                	push   0x0
c001bee5:	6a 00                	push   0x0
c001bee7:	53                   	push   ebx
c001bee8:	e8 47 fc ff ff       	call   c001bb34 <IDE::enableIRQs(unsigned char, bool)>
c001beed:	83 c4 0c             	add    esp,0xc
c001bef0:	6a 00                	push   0x0
c001bef2:	6a 01                	push   0x1
c001bef4:	53                   	push   ebx
c001bef5:	e8 3a fc ff ff       	call   c001bb34 <IDE::enableIRQs(unsigned char, bool)>
c001befa:	83 c4 10             	add    esp,0x10
c001befd:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bf04:	74 34                	je     c001bf3a <IDE::open(int, int, void*)+0x3bc>
c001bf06:	83 ec 0c             	sub    esp,0xc
c001bf09:	53                   	push   ebx
c001bf0a:	6a 01                	push   0x1
c001bf0c:	68 fc ba 01 c0       	push   0xc001bafc
c001bf11:	6a 0e                	push   0xe
c001bf13:	53                   	push   ebx
c001bf14:	e8 05 08 ff ff       	call   c000c71e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf19:	83 c4 14             	add    esp,0x14
c001bf1c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf22:	53                   	push   ebx
c001bf23:	6a 01                	push   0x1
c001bf25:	68 18 bb 01 c0       	push   0xc001bb18
c001bf2a:	6a 0f                	push   0xf
c001bf2c:	53                   	push   ebx
c001bf2d:	e8 ec 07 ff ff       	call   c000c71e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf32:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bf38:	eb 38                	jmp    c001bf72 <IDE::open(int, int, void*)+0x3f4>
c001bf3a:	83 ec 0c             	sub    esp,0xc
c001bf3d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bf47:	53                   	push   ebx
c001bf48:	6a 00                	push   0x0
c001bf4a:	68 fc ba 01 c0       	push   0xc001bafc
c001bf4f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bf55:	53                   	push   ebx
c001bf56:	e8 c3 07 ff ff       	call   c000c71e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf5b:	83 c4 14             	add    esp,0x14
c001bf5e:	53                   	push   ebx
c001bf5f:	6a 00                	push   0x0
c001bf61:	68 18 bb 01 c0       	push   0xc001bb18
c001bf66:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bf6c:	53                   	push   ebx
c001bf6d:	e8 ac 07 ff ff       	call   c000c71e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bf72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf74:	83 c4 20             	add    esp,0x20
c001bf77:	83 ec 0c             	sub    esp,0xc
c001bf7a:	53                   	push   ebx
c001bf7b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bf7e:	83 c4 0c             	add    esp,0xc
c001bf81:	6a 07                	push   0x7
c001bf83:	6a 00                	push   0x0
c001bf85:	53                   	push   ebx
c001bf86:	e8 61 fa ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001bf8b:	83 c4 0c             	add    esp,0xc
c001bf8e:	6a 07                	push   0x7
c001bf90:	6a 01                	push   0x1
c001bf92:	53                   	push   ebx
c001bf93:	e8 54 fa ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001bf98:	83 c4 0c             	add    esp,0xc
c001bf9b:	6a 01                	push   0x1
c001bf9d:	6a 00                	push   0x0
c001bf9f:	53                   	push   ebx
c001bfa0:	e8 8f fb ff ff       	call   c001bb34 <IDE::enableIRQs(unsigned char, bool)>
c001bfa5:	83 c4 0c             	add    esp,0xc
c001bfa8:	6a 01                	push   0x1
c001bfaa:	6a 01                	push   0x1
c001bfac:	53                   	push   ebx
c001bfad:	e8 82 fb ff ff       	call   c001bb34 <IDE::enableIRQs(unsigned char, bool)>
c001bfb2:	83 c4 2c             	add    esp,0x2c
c001bfb5:	31 c0                	xor    eax,eax
c001bfb7:	5b                   	pop    ebx
c001bfb8:	5e                   	pop    esi
c001bfb9:	5f                   	pop    edi
c001bfba:	5d                   	pop    ebp
c001bfbb:	c3                   	ret    

c001bfbc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bfbc:	55                   	push   ebp
c001bfbd:	57                   	push   edi
c001bfbe:	56                   	push   esi
c001bfbf:	53                   	push   ebx
c001bfc0:	83 ec 1c             	sub    esp,0x1c
c001bfc3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bfc7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bfcb:	8d 42 f8             	lea    eax,[edx-0x8]
c001bfce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bfd2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bfd6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bfda:	3c 03                	cmp    al,0x3
c001bfdc:	77 5a                	ja     c001c038 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bfde:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bfe2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bfe6:	0f b6 db             	movzx  ebx,bl
c001bfe9:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bfec:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bff1:	0c 80                	or     al,0x80
c001bff3:	50                   	push   eax
c001bff4:	6a 0c                	push   0xc
c001bff6:	53                   	push   ebx
c001bff7:	56                   	push   esi
c001bff8:	e8 2f f9 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bffd:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c002:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c006:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c00a:	0f b6 d2             	movzx  edx,dl
c001c00d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c011:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c013:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c018:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c01c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c020:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c024:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c02c:	83 c4 2c             	add    esp,0x2c
c001c02f:	5b                   	pop    ebx
c001c030:	5e                   	pop    esi
c001c031:	5f                   	pop    edi
c001c032:	5d                   	pop    ebp
c001c033:	e9 f4 f8 ff ff       	jmp    c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c038:	0f b6 c2             	movzx  eax,dl
c001c03b:	83 f8 07             	cmp    eax,0x7
c001c03e:	77 12                	ja     c001c052 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c040:	0f b6 c2             	movzx  eax,dl
c001c043:	0f b6 db             	movzx  ebx,bl
c001c046:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c04e:	01 c2                	add    edx,eax
c001c050:	eb 2f                	jmp    c001c081 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c052:	83 f8 0d             	cmp    eax,0xd
c001c055:	77 13                	ja     c001c06a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c057:	0f b6 db             	movzx  ebx,bl
c001c05a:	0f b6 d2             	movzx  edx,dl
c001c05d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c064:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c068:	eb 17                	jmp    c001c081 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c06a:	83 f8 15             	cmp    eax,0x15
c001c06d:	77 14                	ja     c001c083 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c06f:	0f b6 db             	movzx  ebx,bl
c001c072:	0f b6 d2             	movzx  edx,dl
c001c075:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c07d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c081:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c083:	83 c4 1c             	add    esp,0x1c
c001c086:	5b                   	pop    ebx
c001c087:	5e                   	pop    esi
c001c088:	5f                   	pop    edi
c001c089:	5d                   	pop    ebp
c001c08a:	c3                   	ret    
c001c08b:	90                   	nop

c001c08c <IDE::detect()>:
c001c08c:	55                   	push   ebp
c001c08d:	57                   	push   edi
c001c08e:	56                   	push   esi
c001c08f:	53                   	push   ebx
c001c090:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c096:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c09d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c0a4:	0f 85 a4 02 00 00    	jne    c001c34e <IDE::detect()+0x2c2>
c001c0aa:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c0b1:	31 f6                	xor    esi,esi
c001c0b3:	31 ed                	xor    ebp,ebp
c001c0b5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c0bd:	89 e8                	mov    eax,ebp
c001c0bf:	c1 e0 06             	shl    eax,0x6
c001c0c2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c0ca:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c0ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c0d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0d6:	c1 e0 04             	shl    eax,0x4
c001c0d9:	83 c8 a0             	or     eax,0xffffffa0
c001c0dc:	0f b6 c0             	movzx  eax,al
c001c0df:	50                   	push   eax
c001c0e0:	6a 06                	push   0x6
c001c0e2:	56                   	push   esi
c001c0e3:	53                   	push   ebx
c001c0e4:	e8 43 f8 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0e9:	83 c4 0c             	add    esp,0xc
c001c0ec:	6a 0c                	push   0xc
c001c0ee:	56                   	push   esi
c001c0ef:	53                   	push   ebx
c001c0f0:	e8 f7 f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c0f5:	83 c4 0c             	add    esp,0xc
c001c0f8:	6a 0c                	push   0xc
c001c0fa:	56                   	push   esi
c001c0fb:	53                   	push   ebx
c001c0fc:	e8 eb f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c101:	83 c4 0c             	add    esp,0xc
c001c104:	6a 0c                	push   0xc
c001c106:	56                   	push   esi
c001c107:	53                   	push   ebx
c001c108:	e8 df f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c10d:	83 c4 0c             	add    esp,0xc
c001c110:	6a 0c                	push   0xc
c001c112:	56                   	push   esi
c001c113:	53                   	push   ebx
c001c114:	e8 d3 f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c119:	68 ec 00 00 00       	push   0xec
c001c11e:	6a 07                	push   0x7
c001c120:	56                   	push   esi
c001c121:	53                   	push   ebx
c001c122:	e8 05 f8 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c127:	83 c4 1c             	add    esp,0x1c
c001c12a:	6a 0c                	push   0xc
c001c12c:	56                   	push   esi
c001c12d:	53                   	push   ebx
c001c12e:	e8 b9 f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c133:	83 c4 0c             	add    esp,0xc
c001c136:	6a 0c                	push   0xc
c001c138:	56                   	push   esi
c001c139:	53                   	push   ebx
c001c13a:	e8 ad f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c13f:	83 c4 0c             	add    esp,0xc
c001c142:	6a 0c                	push   0xc
c001c144:	56                   	push   esi
c001c145:	53                   	push   ebx
c001c146:	e8 a1 f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c14b:	83 c4 0c             	add    esp,0xc
c001c14e:	6a 0c                	push   0xc
c001c150:	56                   	push   esi
c001c151:	53                   	push   ebx
c001c152:	e8 95 f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c157:	83 c4 0c             	add    esp,0xc
c001c15a:	6a 0c                	push   0xc
c001c15c:	56                   	push   esi
c001c15d:	53                   	push   ebx
c001c15e:	e8 89 f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c163:	83 c4 10             	add    esp,0x10
c001c166:	84 c0                	test   al,al
c001c168:	0f 84 60 01 00 00    	je     c001c2ce <IDE::detect()+0x242>
c001c16e:	31 ff                	xor    edi,edi
c001c170:	50                   	push   eax
c001c171:	6a 0c                	push   0xc
c001c173:	56                   	push   esi
c001c174:	53                   	push   ebx
c001c175:	e8 72 f8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c17a:	83 c4 10             	add    esp,0x10
c001c17d:	a8 01                	test   al,0x1
c001c17f:	0f 85 6a 01 00 00    	jne    c001c2ef <IDE::detect()+0x263>
c001c185:	a8 80                	test   al,0x80
c001c187:	75 04                	jne    c001c18d <IDE::detect()+0x101>
c001c189:	a8 08                	test   al,0x8
c001c18b:	75 23                	jne    c001c1b0 <IDE::detect()+0x124>
c001c18d:	47                   	inc    edi
c001c18e:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c194:	7e da                	jle    c001c170 <IDE::detect()+0xe4>
c001c196:	83 ec 0c             	sub    esp,0xc
c001c199:	6a 32                	push   0x32
c001c19b:	e8 f0 9d ff ff       	call   c0015f90 <milliTenthSleep(unsigned int)>
c001c1a0:	83 c4 10             	add    esp,0x10
c001c1a3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c1a9:	75 c5                	jne    c001c170 <IDE::detect()+0xe4>
c001c1ab:	e9 3f 01 00 00       	jmp    c001c2ef <IDE::detect()+0x263>
c001c1b0:	31 c9                	xor    ecx,ecx
c001c1b2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c1b6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c1ba:	83 ec 0c             	sub    esp,0xc
c001c1bd:	68 80 00 00 00       	push   0x80
c001c1c2:	57                   	push   edi
c001c1c3:	6a 00                	push   0x0
c001c1c5:	56                   	push   esi
c001c1c6:	53                   	push   ebx
c001c1c7:	e8 f0 fd ff ff       	call   c001bfbc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c1cc:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c1d1:	89 e8                	mov    eax,ebp
c001c1d3:	89 d1                	mov    ecx,edx
c001c1d5:	c1 e0 06             	shl    eax,0x6
c001c1d8:	01 d8                	add    eax,ebx
c001c1da:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c1e1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c1e8:	89 f2                	mov    edx,esi
c001c1ea:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c1f0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c1f4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c1fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c1fe:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c205:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c20d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c214:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c21c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c222:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c229:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c22f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c233:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c237:	83 c4 20             	add    esp,0x20
c001c23a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c23d:	83 c0 02             	add    eax,0x2
c001c240:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c246:	83 c7 02             	add    edi,0x2
c001c249:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c24c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c252:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c256:	75 e2                	jne    c001c23a <IDE::detect()+0x1ae>
c001c258:	89 e8                	mov    eax,ebp
c001c25a:	c1 e0 06             	shl    eax,0x6
c001c25d:	01 d8                	add    eax,ebx
c001c25f:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c266:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c26d:	c1 ea 09             	shr    edx,0x9
c001c270:	83 e2 01             	and    edx,0x1
c001c273:	80 e1 01             	and    cl,0x1
c001c276:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c27c:	75 22                	jne    c001c2a0 <IDE::detect()+0x214>
c001c27e:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c285:	74 46                	je     c001c2cd <IDE::detect()+0x241>
c001c287:	83 ec 0c             	sub    esp,0xc
c001c28a:	68 7c 01 00 00       	push   0x17c
c001c28f:	e8 22 b8 fe ff       	call   c0007ab6 <malloc>
c001c294:	89 c7                	mov    edi,eax
c001c296:	89 04 24             	mov    DWORD PTR [esp],eax
c001c299:	e8 1a 05 00 00       	call   c001c7b8 <ATA::ATA()>
c001c29e:	eb 17                	jmp    c001c2b7 <IDE::detect()+0x22b>
c001c2a0:	83 ec 0c             	sub    esp,0xc
c001c2a3:	68 84 01 00 00       	push   0x184
c001c2a8:	e8 09 b8 fe ff       	call   c0007ab6 <malloc>
c001c2ad:	89 c7                	mov    edi,eax
c001c2af:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2b2:	e8 45 0e 00 00       	call   c001d0fc <ATAPI::ATAPI()>
c001c2b7:	5a                   	pop    edx
c001c2b8:	59                   	pop    ecx
c001c2b9:	57                   	push   edi
c001c2ba:	53                   	push   ebx
c001c2bb:	e8 b2 04 ff ff       	call   c000c772 <Device::addChild(Device*)>
c001c2c0:	8b 07                	mov    eax,DWORD PTR [edi]
c001c2c2:	53                   	push   ebx
c001c2c3:	55                   	push   ebp
c001c2c4:	6a 00                	push   0x0
c001c2c6:	57                   	push   edi
c001c2c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2ca:	83 c4 20             	add    esp,0x20
c001c2cd:	45                   	inc    ebp
c001c2ce:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c2d3:	74 0d                	je     c001c2e2 <IDE::detect()+0x256>
c001c2d5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c2dd:	e9 db fd ff ff       	jmp    c001c0bd <IDE::detect()+0x31>
c001c2e2:	4e                   	dec    esi
c001c2e3:	74 69                	je     c001c34e <IDE::detect()+0x2c2>
c001c2e5:	be 01 00 00 00       	mov    esi,0x1
c001c2ea:	e9 c6 fd ff ff       	jmp    c001c0b5 <IDE::detect()+0x29>
c001c2ef:	50                   	push   eax
c001c2f0:	6a 04                	push   0x4
c001c2f2:	56                   	push   esi
c001c2f3:	53                   	push   ebx
c001c2f4:	e8 f3 f6 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c2f9:	83 c4 0c             	add    esp,0xc
c001c2fc:	89 c7                	mov    edi,eax
c001c2fe:	6a 05                	push   0x5
c001c300:	56                   	push   esi
c001c301:	53                   	push   ebx
c001c302:	e8 e5 f6 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c307:	83 c4 10             	add    esp,0x10
c001c30a:	89 f9                	mov    ecx,edi
c001c30c:	0f b6 c0             	movzx  eax,al
c001c30f:	0f b6 f9             	movzx  edi,cl
c001c312:	83 ff 14             	cmp    edi,0x14
c001c315:	75 07                	jne    c001c31e <IDE::detect()+0x292>
c001c317:	3d eb 00 00 00       	cmp    eax,0xeb
c001c31c:	eb 0a                	jmp    c001c328 <IDE::detect()+0x29c>
c001c31e:	3d 96 00 00 00       	cmp    eax,0x96
c001c323:	75 a9                	jne    c001c2ce <IDE::detect()+0x242>
c001c325:	83 ff 69             	cmp    edi,0x69
c001c328:	75 a4                	jne    c001c2ce <IDE::detect()+0x242>
c001c32a:	68 a1 00 00 00       	push   0xa1
c001c32f:	6a 07                	push   0x7
c001c331:	56                   	push   esi
c001c332:	53                   	push   ebx
c001c333:	e8 f4 f5 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c338:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c33f:	e8 4c 9c ff ff       	call   c0015f90 <milliTenthSleep(unsigned int)>
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	b1 01                	mov    cl,0x1
c001c349:	e9 64 fe ff ff       	jmp    c001c1b2 <IDE::detect()+0x126>
c001c34e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c354:	5b                   	pop    ebx
c001c355:	5e                   	pop    esi
c001c356:	5f                   	pop    edi
c001c357:	5d                   	pop    ebp
c001c358:	c3                   	ret    
c001c359:	90                   	nop

c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c35a:	55                   	push   ebp
c001c35b:	57                   	push   edi
c001c35c:	56                   	push   esi
c001c35d:	53                   	push   ebx
c001c35e:	83 ec 1c             	sub    esp,0x1c
c001c361:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c365:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c369:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c36d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c371:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c375:	88 c3                	mov    bl,al
c001c377:	25 ff 00 00 00       	and    eax,0xff
c001c37c:	0f 84 88 00 00 00    	je     c001c40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c382:	83 ec 0c             	sub    esp,0xc
c001c385:	89 c7                	mov    edi,eax
c001c387:	68 6b 2d 02 c0       	push   0xc0022d6b
c001c38c:	e8 b4 e5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c391:	83 c4 10             	add    esp,0x10
c001c394:	83 ff 01             	cmp    edi,0x1
c001c397:	74 6b                	je     c001c404 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c399:	83 ff 02             	cmp    edi,0x2
c001c39c:	75 58                	jne    c001c3f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c39e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c3a3:	01 ff                	add    edi,edi
c001c3a5:	50                   	push   eax
c001c3a6:	09 fe                	or     esi,edi
c001c3a8:	6a 01                	push   0x1
c001c3aa:	89 f0                	mov    eax,esi
c001c3ac:	0f b6 f0             	movzx  esi,al
c001c3af:	c1 e6 06             	shl    esi,0x6
c001c3b2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c3ba:	50                   	push   eax
c001c3bb:	55                   	push   ebp
c001c3bc:	e8 2b f6 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c3c1:	83 c4 10             	add    esp,0x10
c001c3c4:	a8 01                	test   al,0x1
c001c3c6:	74 02                	je     c001c3ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c3c8:	b3 07                	mov    bl,0x7
c001c3ca:	a8 02                	test   al,0x2
c001c3cc:	74 02                	je     c001c3d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c3ce:	b3 03                	mov    bl,0x3
c001c3d0:	a8 04                	test   al,0x4
c001c3d2:	74 02                	je     c001c3d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c3d4:	b3 14                	mov    bl,0x14
c001c3d6:	a8 08                	test   al,0x8
c001c3d8:	74 02                	je     c001c3dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c3da:	b3 03                	mov    bl,0x3
c001c3dc:	a8 10                	test   al,0x10
c001c3de:	74 02                	je     c001c3e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c3e0:	b3 15                	mov    bl,0x15
c001c3e2:	a8 20                	test   al,0x20
c001c3e4:	74 02                	je     c001c3e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c3e6:	b3 03                	mov    bl,0x3
c001c3e8:	a8 40                	test   al,0x40
c001c3ea:	74 02                	je     c001c3ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c3ec:	b3 16                	mov    bl,0x16
c001c3ee:	a8 80                	test   al,0x80
c001c3f0:	74 18                	je     c001c40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3f2:	b3 0d                	mov    bl,0xd
c001c3f4:	eb 14                	jmp    c001c40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c3f6:	83 ff 03             	cmp    edi,0x3
c001c3f9:	74 0d                	je     c001c408 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c3fb:	83 ff 04             	cmp    edi,0x4
c001c3fe:	75 0a                	jne    c001c40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c400:	b3 08                	mov    bl,0x8
c001c402:	eb 06                	jmp    c001c40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c404:	b3 13                	mov    bl,0x13
c001c406:	eb 02                	jmp    c001c40a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c408:	b3 17                	mov    bl,0x17
c001c40a:	83 c4 1c             	add    esp,0x1c
c001c40d:	88 d8                	mov    al,bl
c001c40f:	5b                   	pop    ebx
c001c410:	5e                   	pop    esi
c001c411:	5f                   	pop    edi
c001c412:	5d                   	pop    ebp
c001c413:	c3                   	ret    

c001c414 <IDE::polling(unsigned char, unsigned int)>:
c001c414:	57                   	push   edi
c001c415:	56                   	push   esi
c001c416:	53                   	push   ebx
c001c417:	bb 04 00 00 00       	mov    ebx,0x4
c001c41c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c420:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c425:	52                   	push   edx
c001c426:	6a 0c                	push   0xc
c001c428:	56                   	push   esi
c001c429:	57                   	push   edi
c001c42a:	e8 bd f5 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c42f:	83 c4 10             	add    esp,0x10
c001c432:	4b                   	dec    ebx
c001c433:	75 f0                	jne    c001c425 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c435:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c43a:	50                   	push   eax
c001c43b:	6a 0c                	push   0xc
c001c43d:	56                   	push   esi
c001c43e:	57                   	push   edi
c001c43f:	e8 a8 f5 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c444:	83 c4 10             	add    esp,0x10
c001c447:	a8 01                	test   al,0x1
c001c449:	75 17                	jne    c001c462 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c44b:	a8 20                	test   al,0x20
c001c44d:	75 0f                	jne    c001c45e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c44f:	4b                   	dec    ebx
c001c450:	74 10                	je     c001c462 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c452:	a8 80                	test   al,0x80
c001c454:	75 e4                	jne    c001c43a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c456:	a8 08                	test   al,0x8
c001c458:	74 e0                	je     c001c43a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c45a:	31 c0                	xor    eax,eax
c001c45c:	eb 06                	jmp    c001c464 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c45e:	b0 01                	mov    al,0x1
c001c460:	eb 02                	jmp    c001c464 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c462:	b0 02                	mov    al,0x2
c001c464:	5b                   	pop    ebx
c001c465:	5e                   	pop    esi
c001c466:	5f                   	pop    edi
c001c467:	c3                   	ret    

c001c468 <SATABus::close(int, int, void*)>:
c001c468:	31 c0                	xor    eax,eax
c001c46a:	c3                   	ret    
c001c46b:	90                   	nop

c001c46c <SATABus::detect()>:
c001c46c:	c3                   	ret    
c001c46d:	90                   	nop

c001c46e <SATABus::SATABus()>:
c001c46e:	83 ec 0c             	sub    esp,0xc
c001c471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c475:	83 ec 08             	sub    esp,0x8
c001c478:	68 a4 2d 02 c0       	push   0xc0022da4
c001c47d:	50                   	push   eax
c001c47e:	e8 31 06 ff ff       	call   c000cab4 <HardDiskController::HardDiskController(char const*)>
c001c483:	83 c4 10             	add    esp,0x10
c001c486:	ba d0 2d 02 c0       	mov    edx,0xc0022dd0
c001c48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48f:	89 10                	mov    DWORD PTR [eax],edx
c001c491:	83 ec 0c             	sub    esp,0xc
c001c494:	6a 50                	push   0x50
c001c496:	e8 f3 b9 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c49b:	83 c4 10             	add    esp,0x10
c001c49e:	89 c2                	mov    edx,eax
c001c4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c4aa:	83 ec 0c             	sub    esp,0xc
c001c4ad:	6a 50                	push   0x50
c001c4af:	e8 59 d1 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c4b4:	83 c4 10             	add    esp,0x10
c001c4b7:	89 c2                	mov    edx,eax
c001c4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c4c3:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c4c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4cc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c4d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4d6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c4dc:	83 ec 0c             	sub    esp,0xc
c001c4df:	6a 03                	push   0x3
c001c4e1:	6a 50                	push   0x50
c001c4e3:	51                   	push   ecx
c001c4e4:	52                   	push   edx
c001c4e5:	50                   	push   eax
c001c4e6:	e8 2f da fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c4eb:	83 c4 20             	add    esp,0x20
c001c4ee:	90                   	nop
c001c4ef:	83 c4 0c             	add    esp,0xc
c001c4f2:	c3                   	ret    
c001c4f3:	90                   	nop

c001c4f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c4f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4f8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c4fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c4fe:	09 c2                	or     edx,eax
c001c500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c504:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c50a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c50c:	31 c0                	xor    eax,eax
c001c50e:	c1 e9 08             	shr    ecx,0x8
c001c511:	83 e1 0f             	and    ecx,0xf
c001c514:	39 c8                	cmp    eax,ecx
c001c516:	74 0a                	je     c001c522 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c518:	f6 c2 01             	test   dl,0x1
c001c51b:	74 08                	je     c001c525 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c51d:	d1 ea                	shr    edx,1
c001c51f:	40                   	inc    eax
c001c520:	eb f2                	jmp    c001c514 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c522:	83 c8 ff             	or     eax,0xffffffff
c001c525:	c3                   	ret    

c001c526 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c526:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c52a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c52d:	89 c2                	mov    edx,eax
c001c52f:	c1 ea 08             	shr    edx,0x8
c001c532:	83 e2 0f             	and    edx,0xf
c001c535:	4a                   	dec    edx
c001c536:	75 32                	jne    c001c56a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c538:	83 e0 0f             	and    eax,0xf
c001c53b:	83 f8 03             	cmp    eax,0x3
c001c53e:	75 2a                	jne    c001c56a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c540:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c543:	b8 02 00 00 00       	mov    eax,0x2
c001c548:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c54e:	74 1c                	je     c001c56c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c550:	b8 04 00 00 00       	mov    eax,0x4
c001c555:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c55b:	74 0f                	je     c001c56c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c55d:	31 c0                	xor    eax,eax
c001c55f:	83 fa 03             	cmp    edx,0x3
c001c562:	0f 94 c0             	sete   al
c001c565:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c569:	c3                   	ret    
c001c56a:	31 c0                	xor    eax,eax
c001c56c:	c3                   	ret    
c001c56d:	90                   	nop

c001c56e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c56e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c572:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c575:	0f ba e2 0f          	bt     edx,0xf
c001c579:	72 f7                	jb     c001c572 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c57b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c57e:	83 ca 10             	or     edx,0x10
c001c581:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c584:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c587:	83 ca 01             	or     edx,0x1
c001c58a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c58d:	c3                   	ret    

c001c58e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c592:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c595:	83 e2 fe             	and    edx,0xfffffffe
c001c598:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c59b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c59e:	83 e2 ef             	and    edx,0xffffffef
c001c5a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c5a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5a7:	0f ba e2 0e          	bt     edx,0xe
c001c5ab:	72 f7                	jb     c001c5a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c5ad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c5b0:	0f ba e2 0f          	bt     edx,0xf
c001c5b4:	72 ee                	jb     c001c5a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c5b6:	c3                   	ret    
c001c5b7:	90                   	nop

c001c5b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c5b8:	55                   	push   ebp
c001c5b9:	57                   	push   edi
c001c5ba:	56                   	push   esi
c001c5bb:	53                   	push   ebx
c001c5bc:	83 ec 1c             	sub    esp,0x1c
c001c5bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c5c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c5c7:	53                   	push   ebx
c001c5c8:	56                   	push   esi
c001c5c9:	e8 c0 ff ff ff       	call   c001c58e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c5ce:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c5d2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c5d8:	83 ec 0c             	sub    esp,0xc
c001c5db:	c1 e5 0a             	shl    ebp,0xa
c001c5de:	01 e8                	add    eax,ebp
c001c5e0:	89 03                	mov    DWORD PTR [ebx],eax
c001c5e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5e4:	68 00 04 00 00       	push   0x400
c001c5e9:	6a 00                	push   0x0
c001c5eb:	50                   	push   eax
c001c5ec:	e8 ff 3e fe ff       	call   c00004f0 <memset>
c001c5f1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c5f7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c5fb:	01 e8                	add    eax,ebp
c001c5fd:	83 c4 1c             	add    esp,0x1c
c001c600:	89 03                	mov    DWORD PTR [ebx],eax
c001c602:	c1 e2 08             	shl    edx,0x8
c001c605:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c60c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c612:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c618:	01 f8                	add    eax,edi
c001c61a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c61d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c620:	68 00 01 00 00       	push   0x100
c001c625:	6a 00                	push   0x0
c001c627:	50                   	push   eax
c001c628:	e8 c3 3e fe ff       	call   c00004f0 <memset>
c001c62d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c633:	01 fa                	add    edx,edi
c001c635:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c639:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c63c:	c1 e7 0d             	shl    edi,0xd
c001c63f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c646:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c64c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c652:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c656:	31 ff                	xor    edi,edi
c001c658:	83 c4 10             	add    esp,0x10
c001c65b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c665:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c66b:	83 c5 20             	add    ebp,0x20
c001c66e:	01 f8                	add    eax,edi
c001c670:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c673:	52                   	push   edx
c001c674:	68 00 01 00 00       	push   0x100
c001c679:	6a 00                	push   0x0
c001c67b:	50                   	push   eax
c001c67c:	e8 6f 3e fe ff       	call   c00004f0 <memset>
c001c681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c685:	83 c4 10             	add    esp,0x10
c001c688:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c68e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c695:	01 f8                	add    eax,edi
c001c697:	81 c7 00 01 00 00    	add    edi,0x100
c001c69d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c6a0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c6a6:	75 b3                	jne    c001c65b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c6a8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c6af:	50                   	push   eax
c001c6b0:	50                   	push   eax
c001c6b1:	53                   	push   ebx
c001c6b2:	56                   	push   esi
c001c6b3:	e8 b6 fe ff ff       	call   c001c56e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c6b8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c6bf:	83 c4 2c             	add    esp,0x2c
c001c6c2:	5b                   	pop    ebx
c001c6c3:	5e                   	pop    esi
c001c6c4:	5f                   	pop    edi
c001c6c5:	5d                   	pop    ebp
c001c6c6:	c3                   	ret    
c001c6c7:	90                   	nop

c001c6c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c6c8:	55                   	push   ebp
c001c6c9:	57                   	push   edi
c001c6ca:	56                   	push   esi
c001c6cb:	53                   	push   ebx
c001c6cc:	31 db                	xor    ebx,ebx
c001c6ce:	83 ec 0c             	sub    esp,0xc
c001c6d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c6d9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c6dc:	f7 c7 01 00 00 00    	test   edi,0x1
c001c6e2:	74 7a                	je     c001c75e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c6e4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c6e8:	89 d8                	mov    eax,ebx
c001c6ea:	c1 e0 07             	shl    eax,0x7
c001c6ed:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c6f4:	55                   	push   ebp
c001c6f5:	56                   	push   esi
c001c6f6:	e8 2b fe ff ff       	call   c001c526 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c6fb:	5a                   	pop    edx
c001c6fc:	83 f8 01             	cmp    eax,0x1
c001c6ff:	59                   	pop    ecx
c001c700:	75 21                	jne    c001c723 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c702:	50                   	push   eax
c001c703:	53                   	push   ebx
c001c704:	55                   	push   ebp
c001c705:	56                   	push   esi
c001c706:	e8 ad fe ff ff       	call   c001c5b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c70b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c712:	e8 9f b3 fe ff       	call   c0007ab6 <malloc>
c001c717:	89 c5                	mov    ebp,eax
c001c719:	89 04 24             	mov    DWORD PTR [esp],eax
c001c71c:	e8 99 10 00 00       	call   c001d7ba <SATA::SATA()>
c001c721:	eb 24                	jmp    c001c747 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c723:	83 f8 04             	cmp    eax,0x4
c001c726:	75 36                	jne    c001c75e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c728:	51                   	push   ecx
c001c729:	53                   	push   ebx
c001c72a:	55                   	push   ebp
c001c72b:	56                   	push   esi
c001c72c:	e8 87 fe ff ff       	call   c001c5b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c731:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c738:	e8 79 b3 fe ff       	call   c0007ab6 <malloc>
c001c73d:	89 c5                	mov    ebp,eax
c001c73f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c742:	e8 d5 17 00 00       	call   c001df1c <SATAPI::SATAPI()>
c001c747:	58                   	pop    eax
c001c748:	5a                   	pop    edx
c001c749:	55                   	push   ebp
c001c74a:	56                   	push   esi
c001c74b:	e8 22 00 ff ff       	call   c000c772 <Device::addChild(Device*)>
c001c750:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c753:	56                   	push   esi
c001c754:	6a 00                	push   0x0
c001c756:	53                   	push   ebx
c001c757:	55                   	push   ebp
c001c758:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c75b:	83 c4 20             	add    esp,0x20
c001c75e:	d1 ef                	shr    edi,1
c001c760:	43                   	inc    ebx
c001c761:	83 fb 20             	cmp    ebx,0x20
c001c764:	0f 85 72 ff ff ff    	jne    c001c6dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c76a:	83 c4 0c             	add    esp,0xc
c001c76d:	5b                   	pop    ebx
c001c76e:	5e                   	pop    esi
c001c76f:	5f                   	pop    edi
c001c770:	5d                   	pop    ebp
c001c771:	c3                   	ret    

c001c772 <SATABus::open(int, int, void*)>:
c001c772:	83 ec 14             	sub    esp,0x14
c001c775:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c779:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c77f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c785:	52                   	push   edx
c001c786:	50                   	push   eax
c001c787:	e8 3c ff ff ff       	call   c001c6c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c78c:	31 c0                	xor    eax,eax
c001c78e:	83 c4 1c             	add    esp,0x1c
c001c791:	c3                   	ret    

c001c792 <ATA::close(int, int, void*)>:
c001c792:	83 ec 0c             	sub    esp,0xc
c001c795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c799:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c79f:	85 c0                	test   eax,eax
c001c7a1:	74 0c                	je     c001c7af <ATA::close(int, int, void*)+0x1d>
c001c7a3:	83 ec 0c             	sub    esp,0xc
c001c7a6:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7a8:	50                   	push   eax
c001c7a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7ac:	83 c4 10             	add    esp,0x10
c001c7af:	31 c0                	xor    eax,eax
c001c7b1:	83 c4 0c             	add    esp,0xc
c001c7b4:	c3                   	ret    
c001c7b5:	90                   	nop

c001c7b6 <ATA::powerSaving(PowerSavingLevel)>:
c001c7b6:	c3                   	ret    
c001c7b7:	90                   	nop

c001c7b8 <ATA::ATA()>:
c001c7b8:	83 ec 0c             	sub    esp,0xc
c001c7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bf:	83 ec 04             	sub    esp,0x4
c001c7c2:	68 00 02 00 00       	push   0x200
c001c7c7:	68 9d 2e 02 c0       	push   0xc0022e9d
c001c7cc:	50                   	push   eax
c001c7cd:	e8 6c 03 ff ff       	call   c000cb3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7d2:	83 c4 10             	add    esp,0x10
c001c7d5:	ba 10 2e 02 c0       	mov    edx,0xc0022e10
c001c7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7de:	89 10                	mov    DWORD PTR [eax],edx
c001c7e0:	90                   	nop
c001c7e1:	83 c4 0c             	add    esp,0xc
c001c7e4:	c3                   	ret    
c001c7e5:	90                   	nop

c001c7e6 <ATA::flush(bool)>:
c001c7e6:	53                   	push   ebx
c001c7e7:	83 ec 08             	sub    esp,0x8
c001c7ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7ee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c7f3:	83 f8 01             	cmp    eax,0x1
c001c7f6:	19 c0                	sbb    eax,eax
c001c7f8:	83 e0 fd             	and    eax,0xfffffffd
c001c7fb:	05 ea 00 00 00       	add    eax,0xea
c001c800:	50                   	push   eax
c001c801:	6a 07                	push   0x7
c001c803:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c80a:	50                   	push   eax
c001c80b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c811:	e8 16 f1 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c816:	83 c4 0c             	add    esp,0xc
c001c819:	6a 00                	push   0x0
c001c81b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c822:	50                   	push   eax
c001c823:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c829:	e8 e6 fb ff ff       	call   c001c414 <IDE::polling(unsigned char, unsigned int)>
c001c82e:	83 c4 18             	add    esp,0x18
c001c831:	5b                   	pop    ebx
c001c832:	c3                   	ret    
c001c833:	90                   	nop

c001c834 <ATA::readyForCommand()>:
c001c834:	56                   	push   esi
c001c835:	53                   	push   ebx
c001c836:	53                   	push   ebx
c001c837:	31 db                	xor    ebx,ebx
c001c839:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c83d:	51                   	push   ecx
c001c83e:	6a 0c                	push   0xc
c001c840:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c847:	50                   	push   eax
c001c848:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c84e:	e8 99 f1 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001c853:	83 c4 10             	add    esp,0x10
c001c856:	a8 88                	test   al,0x88
c001c858:	74 1f                	je     c001c879 <ATA::readyForCommand()+0x45>
c001c85a:	43                   	inc    ebx
c001c85b:	83 fb 63             	cmp    ebx,0x63
c001c85e:	7e dd                	jle    c001c83d <ATA::readyForCommand()+0x9>
c001c860:	83 ec 0c             	sub    esp,0xc
c001c863:	6a 0a                	push   0xa
c001c865:	e8 26 97 ff ff       	call   c0015f90 <milliTenthSleep(unsigned int)>
c001c86a:	83 c4 10             	add    esp,0x10
c001c86d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c873:	75 c8                	jne    c001c83d <ATA::readyForCommand()+0x9>
c001c875:	31 c0                	xor    eax,eax
c001c877:	eb 02                	jmp    c001c87b <ATA::readyForCommand()+0x47>
c001c879:	b0 01                	mov    al,0x1
c001c87b:	5a                   	pop    edx
c001c87c:	5b                   	pop    ebx
c001c87d:	5e                   	pop    esi
c001c87e:	c3                   	ret    
c001c87f:	90                   	nop

c001c880 <ATA::access(unsigned long long, int, void*, bool)>:
c001c880:	55                   	push   ebp
c001c881:	57                   	push   edi
c001c882:	56                   	push   esi
c001c883:	53                   	push   ebx
c001c884:	83 ec 2c             	sub    esp,0x2c
c001c887:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c88b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c88f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c893:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c897:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c89b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c89f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c8a3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c8a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8ad:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c8b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8b7:	c1 e0 06             	shl    eax,0x6
c001c8ba:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c8c2:	74 5d                	je     c001c921 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c8c4:	89 fa                	mov    edx,edi
c001c8c6:	89 f0                	mov    eax,esi
c001c8c8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c8cc:	c1 ea 1c             	shr    edx,0x1c
c001c8cf:	89 d1                	mov    ecx,edx
c001c8d1:	09 c1                	or     ecx,eax
c001c8d3:	74 25                	je     c001c8fa <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c8d5:	31 ed                	xor    ebp,ebp
c001c8d7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c8de:	89 fa                	mov    edx,edi
c001c8e0:	89 f0                	mov    eax,esi
c001c8e2:	0f ad d0             	shrd   eax,edx,cl
c001c8e5:	d3 ea                	shr    edx,cl
c001c8e7:	f6 c1 20             	test   cl,0x20
c001c8ea:	74 02                	je     c001c8ee <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c8ec:	89 d0                	mov    eax,edx
c001c8ee:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c8f2:	45                   	inc    ebp
c001c8f3:	83 fd 06             	cmp    ebp,0x6
c001c8f6:	75 df                	jne    c001c8d7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c8f8:	eb 76                	jmp    c001c970 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c8fa:	89 f0                	mov    eax,esi
c001c8fc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c901:	89 fa                	mov    edx,edi
c001c903:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c90a:	0f ac d0 10          	shrd   eax,edx,0x10
c001c90e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c913:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c917:	c1 ee 18             	shr    esi,0x18
c001c91a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c91f:	eb 56                	jmp    c001c977 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c921:	6a 00                	push   0x0
c001c923:	6a 3f                	push   0x3f
c001c925:	57                   	push   edi
c001c926:	56                   	push   esi
c001c927:	e8 a4 2a 00 00       	call   c001f3d0 <__umoddi3>
c001c92c:	83 c4 10             	add    esp,0x10
c001c92f:	40                   	inc    eax
c001c930:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c934:	6a 00                	push   0x0
c001c936:	68 f0 03 00 00       	push   0x3f0
c001c93b:	57                   	push   edi
c001c93c:	56                   	push   esi
c001c93d:	e8 8e 29 00 00       	call   c001f2d0 <__udivdi3>
c001c942:	83 c4 10             	add    esp,0x10
c001c945:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c94a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c951:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c956:	6a 00                	push   0x0
c001c958:	6a 3f                	push   0x3f
c001c95a:	57                   	push   edi
c001c95b:	56                   	push   esi
c001c95c:	e8 6f 29 00 00       	call   c001f2d0 <__udivdi3>
c001c961:	83 c4 10             	add    esp,0x10
c001c964:	83 e0 0f             	and    eax,0xf
c001c967:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c96c:	89 c6                	mov    esi,eax
c001c96e:	eb 07                	jmp    c001c977 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c970:	31 f6                	xor    esi,esi
c001c972:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c977:	bf 01 00 00 00       	mov    edi,0x1
c001c97c:	50                   	push   eax
c001c97d:	6a 00                	push   0x0
c001c97f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c986:	50                   	push   eax
c001c987:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c98b:	e8 a4 f1 ff ff       	call   c001bb34 <IDE::enableIRQs(unsigned char, bool)>
c001c990:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c993:	e8 9c fe ff ff       	call   c001c834 <ATA::readyForCommand()>
c001c998:	83 c4 10             	add    esp,0x10
c001c99b:	84 c0                	test   al,al
c001c99d:	0f 84 69 02 00 00    	je     c001cc0c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c9a3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9a9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9af:	c1 e0 04             	shl    eax,0x4
c001c9b2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c9b9:	09 c6                	or     esi,eax
c001c9bb:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c9c0:	75 05                	jne    c001c9c7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c9c2:	83 ce a0             	or     esi,0xffffffa0
c001c9c5:	eb 03                	jmp    c001c9ca <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c9c7:	83 ce e0             	or     esi,0xffffffe0
c001c9ca:	89 f0                	mov    eax,esi
c001c9cc:	0f b6 f0             	movzx  esi,al
c001c9cf:	56                   	push   esi
c001c9d0:	6a 06                	push   0x6
c001c9d2:	51                   	push   ecx
c001c9d3:	52                   	push   edx
c001c9d4:	e8 53 ef ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d9:	83 c4 10             	add    esp,0x10
c001c9dc:	6a 00                	push   0x0
c001c9de:	6a 01                	push   0x1
c001c9e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e7:	50                   	push   eax
c001c9e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9ee:	e8 39 ef ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f3:	83 c4 10             	add    esp,0x10
c001c9f6:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c9fb:	83 f8 02             	cmp    eax,0x2
c001c9fe:	75 6e                	jne    c001ca6e <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001ca00:	6a 00                	push   0x0
c001ca02:	6a 08                	push   0x8
c001ca04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca0b:	50                   	push   eax
c001ca0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca12:	e8 15 ef ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca17:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca1c:	50                   	push   eax
c001ca1d:	6a 09                	push   0x9
c001ca1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca26:	50                   	push   eax
c001ca27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca2d:	e8 fa ee ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca32:	83 c4 20             	add    esp,0x20
c001ca35:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca3a:	50                   	push   eax
c001ca3b:	6a 0a                	push   0xa
c001ca3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca44:	50                   	push   eax
c001ca45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca4b:	e8 dc ee ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca50:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca55:	50                   	push   eax
c001ca56:	6a 0b                	push   0xb
c001ca58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5f:	50                   	push   eax
c001ca60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca66:	e8 c1 ee ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca6b:	83 c4 20             	add    esp,0x20
c001ca6e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca73:	50                   	push   eax
c001ca74:	6a 02                	push   0x2
c001ca76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca7d:	50                   	push   eax
c001ca7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca84:	e8 a3 ee ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca89:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca8e:	50                   	push   eax
c001ca8f:	6a 03                	push   0x3
c001ca91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca98:	50                   	push   eax
c001ca99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca9f:	e8 88 ee ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa4:	83 c4 20             	add    esp,0x20
c001caa7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001caac:	50                   	push   eax
c001caad:	6a 04                	push   0x4
c001caaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cab6:	50                   	push   eax
c001cab7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cabd:	e8 6a ee ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cac7:	50                   	push   eax
c001cac8:	6a 05                	push   0x5
c001caca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cad1:	50                   	push   eax
c001cad2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cad8:	e8 4f ee ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cadd:	83 c4 20             	add    esp,0x20
c001cae0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cae5:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001caea:	74 11                	je     c001cafd <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001caec:	b8 30 00 00 00       	mov    eax,0x30
c001caf1:	83 fa 02             	cmp    edx,0x2
c001caf4:	75 16                	jne    c001cb0c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001caf6:	b8 34 00 00 00       	mov    eax,0x34
c001cafb:	eb 0f                	jmp    c001cb0c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cafd:	b8 20 00 00 00       	mov    eax,0x20
c001cb02:	83 fa 02             	cmp    edx,0x2
c001cb05:	75 05                	jne    c001cb0c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cb07:	b8 24 00 00 00       	mov    eax,0x24
c001cb0c:	50                   	push   eax
c001cb0d:	6a 07                	push   0x7
c001cb0f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb16:	50                   	push   eax
c001cb17:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb1d:	e8 0a ee ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb22:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb26:	83 c4 10             	add    esp,0x10
c001cb29:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cb2e:	85 f6                	test   esi,esi
c001cb30:	0f 84 b3 00 00 00    	je     c001cbe9 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cb36:	50                   	push   eax
c001cb37:	6a 01                	push   0x1
c001cb39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb40:	50                   	push   eax
c001cb41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb47:	e8 c8 f8 ff ff       	call   c001c414 <IDE::polling(unsigned char, unsigned int)>
c001cb4c:	83 c4 10             	add    esp,0x10
c001cb4f:	0f b6 f8             	movzx  edi,al
c001cb52:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb58:	85 ff                	test   edi,edi
c001cb5a:	74 1d                	je     c001cb79 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cb5c:	57                   	push   edi
c001cb5d:	0f b6 d2             	movzx  edx,dl
c001cb60:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb67:	50                   	push   eax
c001cb68:	52                   	push   edx
c001cb69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb6f:	e8 e6 f7 ff ff       	call   c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb74:	e9 90 00 00 00       	jmp    c001cc09 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cb79:	85 ed                	test   ebp,ebp
c001cb7b:	74 3b                	je     c001cbb8 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cb7d:	31 c9                	xor    ecx,ecx
c001cb7f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cb83:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb87:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cb8b:	50                   	push   eax
c001cb8c:	50                   	push   eax
c001cb8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb94:	50                   	push   eax
c001cb95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb9b:	e8 7a ed ff ff       	call   c001b91a <IDE::getBase(unsigned char)>
c001cba0:	89 c2                	mov    edx,eax
c001cba2:	89 f8                	mov    eax,edi
c001cba4:	66 ef                	out    dx,ax
c001cba6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cbaa:	83 c4 10             	add    esp,0x10
c001cbad:	41                   	inc    ecx
c001cbae:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cbb4:	75 c9                	jne    c001cb7f <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cbb6:	eb 23                	jmp    c001cbdb <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cbb8:	0f b6 d2             	movzx  edx,dl
c001cbbb:	51                   	push   ecx
c001cbbc:	51                   	push   ecx
c001cbbd:	52                   	push   edx
c001cbbe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbc4:	e8 51 ed ff ff       	call   c001b91a <IDE::getBase(unsigned char)>
c001cbc9:	b9 00 01 00 00       	mov    ecx,0x100
c001cbce:	89 c2                	mov    edx,eax
c001cbd0:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cbd4:	fc                   	cld    
c001cbd5:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cbd8:	83 c4 10             	add    esp,0x10
c001cbdb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cbe3:	4e                   	dec    esi
c001cbe4:	e9 45 ff ff ff       	jmp    c001cb2e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cbe9:	31 ff                	xor    edi,edi
c001cbeb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cbf0:	74 1a                	je     c001cc0c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cbf2:	50                   	push   eax
c001cbf3:	50                   	push   eax
c001cbf4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cbf9:	83 f8 02             	cmp    eax,0x2
c001cbfc:	0f 94 c0             	sete   al
c001cbff:	0f b6 c0             	movzx  eax,al
c001cc02:	50                   	push   eax
c001cc03:	53                   	push   ebx
c001cc04:	e8 dd fb ff ff       	call   c001c7e6 <ATA::flush(bool)>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	83 c4 2c             	add    esp,0x2c
c001cc0f:	89 f8                	mov    eax,edi
c001cc11:	5b                   	pop    ebx
c001cc12:	5e                   	pop    esi
c001cc13:	5f                   	pop    edi
c001cc14:	5d                   	pop    ebp
c001cc15:	c3                   	ret    

c001cc16 <ATA::detectCHS()>:
c001cc16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc1a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cc20:	c1 e0 06             	shl    eax,0x6
c001cc23:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cc29:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cc33:	c7 44 24 04 f4 2d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022df4
c001cc3b:	e9 61 47 ff ff       	jmp    c00113a1 <KePanic(char const*)>

c001cc40 <ATA::open(int, int, void*)>:
c001cc40:	53                   	push   ebx
c001cc41:	83 ec 08             	sub    esp,0x8
c001cc44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc50:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc56:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc5c:	c1 e0 06             	shl    eax,0x6
c001cc5f:	01 d0                	add    eax,edx
c001cc61:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cc68:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cc6e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cc75:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cc7f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cc85:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cc8c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cc93:	75 0c                	jne    c001cca1 <ATA::open(int, int, void*)+0x61>
c001cc95:	83 ec 0c             	sub    esp,0xc
c001cc98:	53                   	push   ebx
c001cc99:	e8 78 ff ff ff       	call   c001cc16 <ATA::detectCHS()>
c001cc9e:	83 c4 10             	add    esp,0x10
c001cca1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cca7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ccad:	c1 e0 06             	shl    eax,0x6
c001ccb0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ccb7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ccc1:	d1 e8                	shr    eax,1
c001ccc3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ccc9:	6a 04                	push   0x4
c001cccb:	6a 0c                	push   0xc
c001cccd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccd4:	50                   	push   eax
c001ccd5:	52                   	push   edx
c001ccd6:	e8 51 ec ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccdb:	90                   	nop
c001ccdc:	90                   	nop
c001ccdd:	6a 00                	push   0x0
c001ccdf:	6a 0c                	push   0xc
c001cce1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cce8:	50                   	push   eax
c001cce9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccef:	e8 38 ec ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccf4:	83 c4 14             	add    esp,0x14
c001ccf7:	53                   	push   ebx
c001ccf8:	e8 a9 fe fe ff       	call   c000cba6 <PhysicalDisk::startCache()>
c001ccfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd00:	e8 e5 10 ff ff       	call   c000ddea <createPartitionsForDisk(PhysicalDisk*)>
c001cd05:	31 c0                	xor    eax,eax
c001cd07:	83 c4 18             	add    esp,0x18
c001cd0a:	5b                   	pop    ebx
c001cd0b:	c3                   	ret    

c001cd0c <combineCharAndColour(char, unsigned char)>:
c001cd0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd11:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cd17:	c1 e0 08             	shl    eax,0x8
c001cd1a:	09 d0                	or     eax,edx
c001cd1c:	c3                   	ret    

c001cd1d <combineColours(unsigned char, unsigned char)>:
c001cd1d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cd22:	c1 e0 04             	shl    eax,0x4
c001cd25:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cd29:	c3                   	ret    

c001cd2a <ATA::read(unsigned long long, int, void*)>:
c001cd2a:	55                   	push   ebp
c001cd2b:	57                   	push   edi
c001cd2c:	56                   	push   esi
c001cd2d:	be 04 00 00 00       	mov    esi,0x4
c001cd32:	53                   	push   ebx
c001cd33:	83 ec 0c             	sub    esp,0xc
c001cd36:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd3e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd45:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd49:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd4f:	0f 87 a1 01 00 00    	ja     c001cef6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd55:	be 06 00 00 00       	mov    esi,0x6
c001cd5a:	85 c9                	test   ecx,ecx
c001cd5c:	0f 84 94 01 00 00    	je     c001cef6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd62:	55                   	push   ebp
c001cd63:	55                   	push   ebp
c001cd64:	6a 00                	push   0x0
c001cd66:	51                   	push   ecx
c001cd67:	53                   	push   ebx
c001cd68:	52                   	push   edx
c001cd69:	50                   	push   eax
c001cd6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd6e:	e8 0d fb ff ff       	call   c001c880 <ATA::access(unsigned long long, int, void*, bool)>
c001cd73:	83 c4 20             	add    esp,0x20
c001cd76:	89 c6                	mov    esi,eax
c001cd78:	85 c0                	test   eax,eax
c001cd7a:	0f 85 71 01 00 00    	jne    c001cef1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cd80:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cd86:	89 da                	mov    edx,ebx
c001cd88:	50                   	push   eax
c001cd89:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd8e:	50                   	push   eax
c001cd8f:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cd95:	6a 0f                	push   0xf
c001cd97:	6a 00                	push   0x0
c001cd99:	e8 7f ff ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001cd9e:	59                   	pop    ecx
c001cd9f:	b9 0a 00 00 00       	mov    ecx,0xa
c001cda4:	5b                   	pop    ebx
c001cda5:	0f b6 d8             	movzx  ebx,al
c001cda8:	89 d0                	mov    eax,edx
c001cdaa:	53                   	push   ebx
c001cdab:	99                   	cdq    
c001cdac:	f7 fd                	idiv   ebp
c001cdae:	99                   	cdq    
c001cdaf:	f7 f9                	idiv   ecx
c001cdb1:	83 c2 30             	add    edx,0x30
c001cdb4:	0f b6 d2             	movzx  edx,dl
c001cdb7:	52                   	push   edx
c001cdb8:	e8 4f ff ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001cdbd:	5f                   	pop    edi
c001cdbe:	bf e8 03 00 00       	mov    edi,0x3e8
c001cdc3:	5a                   	pop    edx
c001cdc4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdca:	53                   	push   ebx
c001cdcb:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdd0:	99                   	cdq    
c001cdd1:	f7 ff                	idiv   edi
c001cdd3:	99                   	cdq    
c001cdd4:	f7 f9                	idiv   ecx
c001cdd6:	8d 42 30             	lea    eax,[edx+0x30]
c001cdd9:	0f b6 c0             	movzx  eax,al
c001cddc:	50                   	push   eax
c001cddd:	e8 2a ff ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001cde2:	5f                   	pop    edi
c001cde3:	bf 64 00 00 00       	mov    edi,0x64
c001cde8:	5a                   	pop    edx
c001cde9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cdef:	53                   	push   ebx
c001cdf0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cdf5:	99                   	cdq    
c001cdf6:	f7 ff                	idiv   edi
c001cdf8:	99                   	cdq    
c001cdf9:	f7 f9                	idiv   ecx
c001cdfb:	8d 42 30             	lea    eax,[edx+0x30]
c001cdfe:	0f b6 c0             	movzx  eax,al
c001ce01:	50                   	push   eax
c001ce02:	e8 05 ff ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001ce07:	5a                   	pop    edx
c001ce08:	5a                   	pop    edx
c001ce09:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce0f:	53                   	push   ebx
c001ce10:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce15:	99                   	cdq    
c001ce16:	f7 f9                	idiv   ecx
c001ce18:	99                   	cdq    
c001ce19:	f7 f9                	idiv   ecx
c001ce1b:	8d 42 30             	lea    eax,[edx+0x30]
c001ce1e:	0f b6 c0             	movzx  eax,al
c001ce21:	50                   	push   eax
c001ce22:	e8 e5 fe ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001ce27:	5a                   	pop    edx
c001ce28:	5a                   	pop    edx
c001ce29:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce2f:	53                   	push   ebx
c001ce30:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce35:	99                   	cdq    
c001ce36:	f7 f9                	idiv   ecx
c001ce38:	83 c2 30             	add    edx,0x30
c001ce3b:	0f b6 d2             	movzx  edx,dl
c001ce3e:	52                   	push   edx
c001ce3f:	e8 c8 fe ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001ce44:	5a                   	pop    edx
c001ce45:	5a                   	pop    edx
c001ce46:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce4c:	53                   	push   ebx
c001ce4d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce52:	99                   	cdq    
c001ce53:	f7 fd                	idiv   ebp
c001ce55:	99                   	cdq    
c001ce56:	f7 f9                	idiv   ecx
c001ce58:	8d 42 30             	lea    eax,[edx+0x30]
c001ce5b:	0f b6 c0             	movzx  eax,al
c001ce5e:	50                   	push   eax
c001ce5f:	e8 a8 fe ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001ce64:	5d                   	pop    ebp
c001ce65:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce6a:	5a                   	pop    edx
c001ce6b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce71:	53                   	push   ebx
c001ce72:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce77:	99                   	cdq    
c001ce78:	f7 fd                	idiv   ebp
c001ce7a:	99                   	cdq    
c001ce7b:	f7 f9                	idiv   ecx
c001ce7d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce80:	0f b6 c0             	movzx  eax,al
c001ce83:	50                   	push   eax
c001ce84:	e8 83 fe ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001ce89:	5d                   	pop    ebp
c001ce8a:	5a                   	pop    edx
c001ce8b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce91:	53                   	push   ebx
c001ce92:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce97:	99                   	cdq    
c001ce98:	f7 ff                	idiv   edi
c001ce9a:	99                   	cdq    
c001ce9b:	f7 f9                	idiv   ecx
c001ce9d:	8d 42 30             	lea    eax,[edx+0x30]
c001cea0:	0f b6 c0             	movzx  eax,al
c001cea3:	50                   	push   eax
c001cea4:	e8 63 fe ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001cea9:	5f                   	pop    edi
c001ceaa:	5d                   	pop    ebp
c001ceab:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ceb1:	53                   	push   ebx
c001ceb2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ceb7:	99                   	cdq    
c001ceb8:	f7 f9                	idiv   ecx
c001ceba:	99                   	cdq    
c001cebb:	f7 f9                	idiv   ecx
c001cebd:	8d 42 30             	lea    eax,[edx+0x30]
c001cec0:	0f b6 c0             	movzx  eax,al
c001cec3:	50                   	push   eax
c001cec4:	e8 43 fe ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001cec9:	5a                   	pop    edx
c001ceca:	5f                   	pop    edi
c001cecb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ced1:	53                   	push   ebx
c001ced2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ced7:	99                   	cdq    
c001ced8:	f7 f9                	idiv   ecx
c001ceda:	83 c2 30             	add    edx,0x30
c001cedd:	0f b6 d2             	movzx  edx,dl
c001cee0:	52                   	push   edx
c001cee1:	e8 26 fe ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001cee6:	83 c4 10             	add    esp,0x10
c001cee9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ceef:	eb 05                	jmp    c001cef6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cef1:	be 01 00 00 00       	mov    esi,0x1
c001cef6:	83 c4 0c             	add    esp,0xc
c001cef9:	89 f0                	mov    eax,esi
c001cefb:	5b                   	pop    ebx
c001cefc:	5e                   	pop    esi
c001cefd:	5f                   	pop    edi
c001cefe:	5d                   	pop    ebp
c001ceff:	c3                   	ret    

c001cf00 <ATA::write(unsigned long long, int, void*)>:
c001cf00:	55                   	push   ebp
c001cf01:	57                   	push   edi
c001cf02:	56                   	push   esi
c001cf03:	be 04 00 00 00       	mov    esi,0x4
c001cf08:	53                   	push   ebx
c001cf09:	83 ec 0c             	sub    esp,0xc
c001cf0c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cf10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf14:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cf17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf1b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf1f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cf25:	0f 87 9c 01 00 00    	ja     c001d0c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf2b:	be 06 00 00 00       	mov    esi,0x6
c001cf30:	85 c9                	test   ecx,ecx
c001cf32:	0f 84 8f 01 00 00    	je     c001d0c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf38:	55                   	push   ebp
c001cf39:	55                   	push   ebp
c001cf3a:	6a 01                	push   0x1
c001cf3c:	51                   	push   ecx
c001cf3d:	53                   	push   ebx
c001cf3e:	52                   	push   edx
c001cf3f:	50                   	push   eax
c001cf40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf44:	e8 37 f9 ff ff       	call   c001c880 <ATA::access(unsigned long long, int, void*, bool)>
c001cf49:	83 c4 20             	add    esp,0x20
c001cf4c:	89 c6                	mov    esi,eax
c001cf4e:	85 c0                	test   eax,eax
c001cf50:	0f 85 6c 01 00 00    	jne    c001d0c2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cf56:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cf5c:	bd 10 27 00 00       	mov    ebp,0x2710
c001cf61:	50                   	push   eax
c001cf62:	50                   	push   eax
c001cf63:	6a 0f                	push   0xf
c001cf65:	6a 00                	push   0x0
c001cf67:	e8 b1 fd ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001cf6c:	5a                   	pop    edx
c001cf6d:	0f b6 d8             	movzx  ebx,al
c001cf70:	59                   	pop    ecx
c001cf71:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf76:	53                   	push   ebx
c001cf77:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf7c:	99                   	cdq    
c001cf7d:	f7 fd                	idiv   ebp
c001cf7f:	99                   	cdq    
c001cf80:	f7 f9                	idiv   ecx
c001cf82:	8d 42 30             	lea    eax,[edx+0x30]
c001cf85:	0f b6 c0             	movzx  eax,al
c001cf88:	50                   	push   eax
c001cf89:	e8 7e fd ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001cf8e:	5f                   	pop    edi
c001cf8f:	bf e8 03 00 00       	mov    edi,0x3e8
c001cf94:	5a                   	pop    edx
c001cf95:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cf9b:	53                   	push   ebx
c001cf9c:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfa1:	99                   	cdq    
c001cfa2:	f7 ff                	idiv   edi
c001cfa4:	99                   	cdq    
c001cfa5:	f7 f9                	idiv   ecx
c001cfa7:	8d 42 30             	lea    eax,[edx+0x30]
c001cfaa:	0f b6 c0             	movzx  eax,al
c001cfad:	50                   	push   eax
c001cfae:	e8 59 fd ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001cfb3:	5f                   	pop    edi
c001cfb4:	bf 64 00 00 00       	mov    edi,0x64
c001cfb9:	5a                   	pop    edx
c001cfba:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cfc0:	53                   	push   ebx
c001cfc1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfc6:	99                   	cdq    
c001cfc7:	f7 ff                	idiv   edi
c001cfc9:	99                   	cdq    
c001cfca:	f7 f9                	idiv   ecx
c001cfcc:	8d 42 30             	lea    eax,[edx+0x30]
c001cfcf:	0f b6 c0             	movzx  eax,al
c001cfd2:	50                   	push   eax
c001cfd3:	e8 34 fd ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001cfd8:	5a                   	pop    edx
c001cfd9:	5a                   	pop    edx
c001cfda:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cfe0:	53                   	push   ebx
c001cfe1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfe6:	99                   	cdq    
c001cfe7:	f7 f9                	idiv   ecx
c001cfe9:	99                   	cdq    
c001cfea:	f7 f9                	idiv   ecx
c001cfec:	8d 42 30             	lea    eax,[edx+0x30]
c001cfef:	0f b6 c0             	movzx  eax,al
c001cff2:	50                   	push   eax
c001cff3:	e8 14 fd ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001cff8:	5a                   	pop    edx
c001cff9:	5a                   	pop    edx
c001cffa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d000:	53                   	push   ebx
c001d001:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d006:	99                   	cdq    
c001d007:	f7 f9                	idiv   ecx
c001d009:	8d 42 30             	lea    eax,[edx+0x30]
c001d00c:	0f b6 c0             	movzx  eax,al
c001d00f:	50                   	push   eax
c001d010:	e8 f7 fc ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001d015:	5a                   	pop    edx
c001d016:	5a                   	pop    edx
c001d017:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d01d:	53                   	push   ebx
c001d01e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d023:	99                   	cdq    
c001d024:	f7 fd                	idiv   ebp
c001d026:	99                   	cdq    
c001d027:	f7 f9                	idiv   ecx
c001d029:	8d 42 30             	lea    eax,[edx+0x30]
c001d02c:	0f b6 c0             	movzx  eax,al
c001d02f:	50                   	push   eax
c001d030:	e8 d7 fc ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001d035:	5d                   	pop    ebp
c001d036:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d03b:	5a                   	pop    edx
c001d03c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d042:	53                   	push   ebx
c001d043:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d048:	99                   	cdq    
c001d049:	f7 fd                	idiv   ebp
c001d04b:	99                   	cdq    
c001d04c:	f7 f9                	idiv   ecx
c001d04e:	8d 42 30             	lea    eax,[edx+0x30]
c001d051:	0f b6 c0             	movzx  eax,al
c001d054:	50                   	push   eax
c001d055:	e8 b2 fc ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001d05a:	5d                   	pop    ebp
c001d05b:	5a                   	pop    edx
c001d05c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d062:	53                   	push   ebx
c001d063:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d068:	99                   	cdq    
c001d069:	f7 ff                	idiv   edi
c001d06b:	99                   	cdq    
c001d06c:	f7 f9                	idiv   ecx
c001d06e:	8d 42 30             	lea    eax,[edx+0x30]
c001d071:	0f b6 c0             	movzx  eax,al
c001d074:	50                   	push   eax
c001d075:	e8 92 fc ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001d07a:	5f                   	pop    edi
c001d07b:	5d                   	pop    ebp
c001d07c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d082:	53                   	push   ebx
c001d083:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d088:	99                   	cdq    
c001d089:	f7 f9                	idiv   ecx
c001d08b:	99                   	cdq    
c001d08c:	f7 f9                	idiv   ecx
c001d08e:	8d 42 30             	lea    eax,[edx+0x30]
c001d091:	0f b6 c0             	movzx  eax,al
c001d094:	50                   	push   eax
c001d095:	e8 72 fc ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001d09a:	5a                   	pop    edx
c001d09b:	5f                   	pop    edi
c001d09c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d0a2:	53                   	push   ebx
c001d0a3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d0a8:	99                   	cdq    
c001d0a9:	f7 f9                	idiv   ecx
c001d0ab:	83 c2 30             	add    edx,0x30
c001d0ae:	0f b6 d2             	movzx  edx,dl
c001d0b1:	52                   	push   edx
c001d0b2:	e8 55 fc ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001d0b7:	83 c4 10             	add    esp,0x10
c001d0ba:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d0c0:	eb 05                	jmp    c001d0c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d0c2:	be 01 00 00 00       	mov    esi,0x1
c001d0c7:	83 c4 0c             	add    esp,0xc
c001d0ca:	89 f0                	mov    eax,esi
c001d0cc:	5b                   	pop    ebx
c001d0cd:	5e                   	pop    esi
c001d0ce:	5f                   	pop    edi
c001d0cf:	5d                   	pop    ebp
c001d0d0:	c3                   	ret    
c001d0d1:	90                   	nop

c001d0d2 <ATAPI::write(unsigned long long, int, void*)>:
c001d0d2:	b8 03 00 00 00       	mov    eax,0x3
c001d0d7:	c3                   	ret    

c001d0d8 <ATAPI::close(int, int, void*)>:
c001d0d8:	83 ec 0c             	sub    esp,0xc
c001d0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d0e5:	85 c0                	test   eax,eax
c001d0e7:	74 0c                	je     c001d0f5 <ATAPI::close(int, int, void*)+0x1d>
c001d0e9:	83 ec 0c             	sub    esp,0xc
c001d0ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0ee:	50                   	push   eax
c001d0ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d0f2:	83 c4 10             	add    esp,0x10
c001d0f5:	31 c0                	xor    eax,eax
c001d0f7:	83 c4 0c             	add    esp,0xc
c001d0fa:	c3                   	ret    
c001d0fb:	90                   	nop

c001d0fc <ATAPI::ATAPI()>:
c001d0fc:	83 ec 0c             	sub    esp,0xc
c001d0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d103:	83 ec 04             	sub    esp,0x4
c001d106:	68 00 08 00 00       	push   0x800
c001d10b:	68 3d 2f 02 c0       	push   0xc0022f3d
c001d110:	50                   	push   eax
c001d111:	e8 28 fa fe ff       	call   c000cb3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d116:	83 c4 10             	add    esp,0x10
c001d119:	ba 58 2e 02 c0       	mov    edx,0xc0022e58
c001d11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d122:	89 10                	mov    DWORD PTR [eax],edx
c001d124:	90                   	nop
c001d125:	83 c4 0c             	add    esp,0xc
c001d128:	c3                   	ret    
c001d129:	90                   	nop

c001d12a <ATAPI::readyForCommand()>:
c001d12a:	56                   	push   esi
c001d12b:	53                   	push   ebx
c001d12c:	53                   	push   ebx
c001d12d:	31 db                	xor    ebx,ebx
c001d12f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d133:	51                   	push   ecx
c001d134:	6a 0c                	push   0xc
c001d136:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d13d:	50                   	push   eax
c001d13e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d144:	e8 a3 e8 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001d149:	83 c4 10             	add    esp,0x10
c001d14c:	a8 88                	test   al,0x88
c001d14e:	74 25                	je     c001d175 <ATAPI::readyForCommand()+0x4b>
c001d150:	43                   	inc    ebx
c001d151:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d157:	7e da                	jle    c001d133 <ATAPI::readyForCommand()+0x9>
c001d159:	83 ec 0c             	sub    esp,0xc
c001d15c:	68 5e 01 00 00       	push   0x15e
c001d161:	e8 2a 8e ff ff       	call   c0015f90 <milliTenthSleep(unsigned int)>
c001d166:	83 c4 10             	add    esp,0x10
c001d169:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d16f:	75 c2                	jne    c001d133 <ATAPI::readyForCommand()+0x9>
c001d171:	31 c0                	xor    eax,eax
c001d173:	eb 02                	jmp    c001d177 <ATAPI::readyForCommand()+0x4d>
c001d175:	b0 01                	mov    al,0x1
c001d177:	5a                   	pop    edx
c001d178:	5b                   	pop    ebx
c001d179:	5e                   	pop    esi
c001d17a:	c3                   	ret    
c001d17b:	90                   	nop

c001d17c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d17c:	55                   	push   ebp
c001d17d:	57                   	push   edi
c001d17e:	56                   	push   esi
c001d17f:	53                   	push   ebx
c001d180:	83 ec 20             	sub    esp,0x20
c001d183:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d187:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d18b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d18f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d193:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d197:	6a 01                	push   0x1
c001d199:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1a0:	50                   	push   eax
c001d1a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1a7:	e8 88 e9 ff ff       	call   c001bb34 <IDE::enableIRQs(unsigned char, bool)>
c001d1ac:	5e                   	pop    esi
c001d1ad:	58                   	pop    eax
c001d1ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1b5:	50                   	push   eax
c001d1b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1bc:	e8 45 e7 ff ff       	call   c001b906 <IDE::prepareInterrupt(unsigned char)>
c001d1c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d1c4:	e8 61 ff ff ff       	call   c001d12a <ATAPI::readyForCommand()>
c001d1c9:	83 c4 10             	add    esp,0x10
c001d1cc:	84 c0                	test   al,al
c001d1ce:	75 0a                	jne    c001d1da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d1d0:	bb 01 00 00 00       	mov    ebx,0x1
c001d1d5:	e9 60 02 00 00       	jmp    c001d43a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d1da:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d1e0:	c1 e0 04             	shl    eax,0x4
c001d1e3:	0f b6 c0             	movzx  eax,al
c001d1e6:	50                   	push   eax
c001d1e7:	6a 06                	push   0x6
c001d1e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1f0:	50                   	push   eax
c001d1f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1f7:	e8 30 e7 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1fc:	6a 00                	push   0x0
c001d1fe:	6a 01                	push   0x1
c001d200:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d207:	50                   	push   eax
c001d208:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d20e:	e8 19 e7 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d213:	83 c4 20             	add    esp,0x20
c001d216:	0f b6 c3             	movzx  eax,bl
c001d219:	0f b6 df             	movzx  ebx,bh
c001d21c:	50                   	push   eax
c001d21d:	6a 04                	push   0x4
c001d21f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d226:	50                   	push   eax
c001d227:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d22d:	e8 fa e6 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d232:	53                   	push   ebx
c001d233:	6a 05                	push   0x5
c001d235:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d23c:	50                   	push   eax
c001d23d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d243:	e8 e4 e6 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d248:	83 c4 20             	add    esp,0x20
c001d24b:	68 a0 00 00 00       	push   0xa0
c001d250:	6a 07                	push   0x7
c001d252:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d259:	50                   	push   eax
c001d25a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d260:	e8 c7 e6 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d265:	83 c4 0c             	add    esp,0xc
c001d268:	6a 01                	push   0x1
c001d26a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d271:	50                   	push   eax
c001d272:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d278:	e8 97 f1 ff ff       	call   c001c414 <IDE::polling(unsigned char, unsigned int)>
c001d27d:	83 c4 10             	add    esp,0x10
c001d280:	0f b6 d8             	movzx  ebx,al
c001d283:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d289:	85 db                	test   ebx,ebx
c001d28b:	74 20                	je     c001d2ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d28d:	53                   	push   ebx
c001d28e:	0f b6 c0             	movzx  eax,al
c001d291:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d298:	52                   	push   edx
c001d299:	50                   	push   eax
c001d29a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2a0:	e8 b5 f0 ff ff       	call   c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d2a5:	83 c4 10             	add    esp,0x10
c001d2a8:	e9 8d 01 00 00       	jmp    c001d43a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d2ad:	0f b6 c0             	movzx  eax,al
c001d2b0:	53                   	push   ebx
c001d2b1:	53                   	push   ebx
c001d2b2:	50                   	push   eax
c001d2b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2b9:	e8 5c e6 ff ff       	call   c001b91a <IDE::getBase(unsigned char)>
c001d2be:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d2c2:	b9 06 00 00 00       	mov    ecx,0x6
c001d2c7:	89 c2                	mov    edx,eax
c001d2c9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d2cc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d2d0:	83 c4 10             	add    esp,0x10
c001d2d3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d2d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d2dc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d2e2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d2e9:	85 db                	test   ebx,ebx
c001d2eb:	0f 84 ec 00 00 00    	je     c001d3dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d2f1:	51                   	push   ecx
c001d2f2:	51                   	push   ecx
c001d2f3:	52                   	push   edx
c001d2f4:	50                   	push   eax
c001d2f5:	e8 a0 e7 ff ff       	call   c001ba9a <IDE::waitInterrupt(unsigned char)>
c001d2fa:	83 c4 10             	add    esp,0x10
c001d2fd:	84 c0                	test   al,al
c001d2ff:	0f 84 cb fe ff ff    	je     c001d1d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d305:	56                   	push   esi
c001d306:	56                   	push   esi
c001d307:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d30e:	50                   	push   eax
c001d30f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d315:	e8 ec e5 ff ff       	call   c001b906 <IDE::prepareInterrupt(unsigned char)>
c001d31a:	83 c4 0c             	add    esp,0xc
c001d31d:	6a 04                	push   0x4
c001d31f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d326:	50                   	push   eax
c001d327:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d32d:	e8 ba e6 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001d332:	83 c4 0c             	add    esp,0xc
c001d335:	89 c6                	mov    esi,eax
c001d337:	6a 05                	push   0x5
c001d339:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d340:	50                   	push   eax
c001d341:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d347:	e8 a0 e6 ff ff       	call   c001b9ec <IDE::read(unsigned char, unsigned char)>
c001d34c:	89 f1                	mov    ecx,esi
c001d34e:	0f b6 c0             	movzx  eax,al
c001d351:	0f b6 f1             	movzx  esi,cl
c001d354:	c1 e0 08             	shl    eax,0x8
c001d357:	09 c6                	or     esi,eax
c001d359:	d1 fe                	sar    esi,1
c001d35b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d35f:	83 c4 10             	add    esp,0x10
c001d362:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d367:	74 41                	je     c001d3aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d369:	31 c9                	xor    ecx,ecx
c001d36b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d371:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d378:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d37c:	75 0a                	jne    c001d388 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d37e:	01 c9                	add    ecx,ecx
c001d380:	01 cd                	add    ebp,ecx
c001d382:	4b                   	dec    ebx
c001d383:	e9 54 ff ff ff       	jmp    c001d2dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d388:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d38d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d391:	51                   	push   ecx
c001d392:	51                   	push   ecx
c001d393:	52                   	push   edx
c001d394:	50                   	push   eax
c001d395:	e8 80 e5 ff ff       	call   c001b91a <IDE::getBase(unsigned char)>
c001d39a:	89 c2                	mov    edx,eax
c001d39c:	89 f0                	mov    eax,esi
c001d39e:	66 ef                	out    dx,ax
c001d3a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d3a4:	83 c4 10             	add    esp,0x10
c001d3a7:	41                   	inc    ecx
c001d3a8:	eb c1                	jmp    c001d36b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d3aa:	31 f6                	xor    esi,esi
c001d3ac:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d3b2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d3b9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d3bd:	75 06                	jne    c001d3c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d3bf:	01 f6                	add    esi,esi
c001d3c1:	01 f5                	add    ebp,esi
c001d3c3:	eb bd                	jmp    c001d382 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d3c5:	51                   	push   ecx
c001d3c6:	51                   	push   ecx
c001d3c7:	52                   	push   edx
c001d3c8:	50                   	push   eax
c001d3c9:	e8 4c e5 ff ff       	call   c001b91a <IDE::getBase(unsigned char)>
c001d3ce:	89 c2                	mov    edx,eax
c001d3d0:	66 ed                	in     ax,dx
c001d3d2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d3d7:	83 c4 10             	add    esp,0x10
c001d3da:	46                   	inc    esi
c001d3db:	eb cf                	jmp    c001d3ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d3dd:	51                   	push   ecx
c001d3de:	51                   	push   ecx
c001d3df:	52                   	push   edx
c001d3e0:	50                   	push   eax
c001d3e1:	e8 b4 e6 ff ff       	call   c001ba9a <IDE::waitInterrupt(unsigned char)>
c001d3e6:	83 c4 10             	add    esp,0x10
c001d3e9:	84 c0                	test   al,al
c001d3eb:	0f 84 df fd ff ff    	je     c001d1d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d3f1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d3f6:	52                   	push   edx
c001d3f7:	52                   	push   edx
c001d3f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3ff:	50                   	push   eax
c001d400:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d406:	e8 fb e4 ff ff       	call   c001b906 <IDE::prepareInterrupt(unsigned char)>
c001d40b:	83 c4 10             	add    esp,0x10
c001d40e:	50                   	push   eax
c001d40f:	50                   	push   eax
c001d410:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d417:	50                   	push   eax
c001d418:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d41e:	e8 f7 e4 ff ff       	call   c001b91a <IDE::getBase(unsigned char)>
c001d423:	8d 50 07             	lea    edx,[eax+0x7]
c001d426:	ec                   	in     al,dx
c001d427:	83 c4 10             	add    esp,0x10
c001d42a:	a8 88                	test   al,0x88
c001d42c:	74 0a                	je     c001d438 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d42e:	4b                   	dec    ebx
c001d42f:	75 dd                	jne    c001d40e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d431:	bb 02 00 00 00       	mov    ebx,0x2
c001d436:	eb 02                	jmp    c001d43a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d438:	31 db                	xor    ebx,ebx
c001d43a:	83 c4 1c             	add    esp,0x1c
c001d43d:	89 d8                	mov    eax,ebx
c001d43f:	5b                   	pop    ebx
c001d440:	5e                   	pop    esi
c001d441:	5f                   	pop    edi
c001d442:	5d                   	pop    ebp
c001d443:	c3                   	ret    

c001d444 <ATAPI::diskRemoved()>:
c001d444:	53                   	push   ebx
c001d445:	83 ec 14             	sub    esp,0x14
c001d448:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d44c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d453:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d459:	e8 7c 06 ff ff       	call   c000dada <LogicalDisk::unmount()>
c001d45e:	58                   	pop    eax
c001d45f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d465:	e8 52 10 ff ff       	call   c000e4bc <VCache::writeWriteBuffer()>
c001d46a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d470:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d474:	83 c4 18             	add    esp,0x18
c001d477:	5b                   	pop    ebx
c001d478:	e9 2f 10 ff ff       	jmp    c000e4ac <VCache::invalidateReadBuffer()>
c001d47d:	90                   	nop

c001d47e <ATAPI::eject()>:
c001d47e:	57                   	push   edi
c001d47f:	b9 03 00 00 00       	mov    ecx,0x3
c001d484:	53                   	push   ebx
c001d485:	83 ec 14             	sub    esp,0x14
c001d488:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d48c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d490:	fc                   	cld    
c001d491:	31 c0                	xor    eax,eax
c001d493:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d495:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d49a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d49f:	50                   	push   eax
c001d4a0:	50                   	push   eax
c001d4a1:	6a 00                	push   0x0
c001d4a3:	6a 00                	push   0x0
c001d4a5:	6a 00                	push   0x0
c001d4a7:	6a 02                	push   0x2
c001d4a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d4ad:	50                   	push   eax
c001d4ae:	53                   	push   ebx
c001d4af:	e8 c8 fc ff ff       	call   c001d17c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4b4:	83 c4 14             	add    esp,0x14
c001d4b7:	53                   	push   ebx
c001d4b8:	e8 87 ff ff ff       	call   c001d444 <ATAPI::diskRemoved()>
c001d4bd:	83 c4 24             	add    esp,0x24
c001d4c0:	31 c0                	xor    eax,eax
c001d4c2:	5b                   	pop    ebx
c001d4c3:	5f                   	pop    edi
c001d4c4:	c3                   	ret    
c001d4c5:	90                   	nop

c001d4c6 <ATAPI::diskInserted()>:
c001d4c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4ca:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d4d1:	c3                   	ret    

c001d4d2 <ATAPI::detectMedia()>:
c001d4d2:	56                   	push   esi
c001d4d3:	53                   	push   ebx
c001d4d4:	83 ec 28             	sub    esp,0x28
c001d4d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d4db:	6a 0c                	push   0xc
c001d4dd:	6a 00                	push   0x0
c001d4df:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d4e3:	56                   	push   esi
c001d4e4:	e8 07 30 fe ff       	call   c00004f0 <memset>
c001d4e9:	58                   	pop    eax
c001d4ea:	5a                   	pop    edx
c001d4eb:	6a 00                	push   0x0
c001d4ed:	6a 00                	push   0x0
c001d4ef:	6a 00                	push   0x0
c001d4f1:	6a 00                	push   0x0
c001d4f3:	56                   	push   esi
c001d4f4:	53                   	push   ebx
c001d4f5:	e8 82 fc ff ff       	call   c001d17c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d4fa:	83 c4 1c             	add    esp,0x1c
c001d4fd:	6a 0c                	push   0xc
c001d4ff:	6a 00                	push   0x0
c001d501:	56                   	push   esi
c001d502:	e8 e9 2f fe ff       	call   c00004f0 <memset>
c001d507:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d50c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d511:	59                   	pop    ecx
c001d512:	58                   	pop    eax
c001d513:	6a 01                	push   0x1
c001d515:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d519:	50                   	push   eax
c001d51a:	6a 00                	push   0x0
c001d51c:	6a 12                	push   0x12
c001d51e:	56                   	push   esi
c001d51f:	53                   	push   ebx
c001d520:	e8 57 fc ff ff       	call   c001d17c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d525:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d529:	83 c4 20             	add    esp,0x20
c001d52c:	83 e0 7f             	and    eax,0x7f
c001d52f:	83 f8 70             	cmp    eax,0x70
c001d532:	74 15                	je     c001d549 <ATAPI::detectMedia()+0x77>
c001d534:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d53b:	75 0c                	jne    c001d549 <ATAPI::detectMedia()+0x77>
c001d53d:	83 ec 0c             	sub    esp,0xc
c001d540:	53                   	push   ebx
c001d541:	e8 80 ff ff ff       	call   c001d4c6 <ATAPI::diskInserted()>
c001d546:	83 c4 10             	add    esp,0x10
c001d549:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d54d:	83 e0 0f             	and    eax,0xf
c001d550:	83 f8 02             	cmp    eax,0x2
c001d553:	75 1b                	jne    c001d570 <ATAPI::detectMedia()+0x9e>
c001d555:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d55a:	75 2d                	jne    c001d589 <ATAPI::detectMedia()+0xb7>
c001d55c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d563:	74 24                	je     c001d589 <ATAPI::detectMedia()+0xb7>
c001d565:	83 ec 0c             	sub    esp,0xc
c001d568:	53                   	push   ebx
c001d569:	e8 d6 fe ff ff       	call   c001d444 <ATAPI::diskRemoved()>
c001d56e:	eb 16                	jmp    c001d586 <ATAPI::detectMedia()+0xb4>
c001d570:	85 c0                	test   eax,eax
c001d572:	75 15                	jne    c001d589 <ATAPI::detectMedia()+0xb7>
c001d574:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d57b:	75 0c                	jne    c001d589 <ATAPI::detectMedia()+0xb7>
c001d57d:	83 ec 0c             	sub    esp,0xc
c001d580:	53                   	push   ebx
c001d581:	e8 40 ff ff ff       	call   c001d4c6 <ATAPI::diskInserted()>
c001d586:	83 c4 10             	add    esp,0x10
c001d589:	83 c4 24             	add    esp,0x24
c001d58c:	5b                   	pop    ebx
c001d58d:	5e                   	pop    esi
c001d58e:	c3                   	ret    
c001d58f:	90                   	nop

c001d590 <ATAPI::open(int, int, void*)>:
c001d590:	56                   	push   esi
c001d591:	53                   	push   ebx
c001d592:	50                   	push   eax
c001d593:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d59b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d59f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d5a5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d5ab:	c1 e0 06             	shl    eax,0x6
c001d5ae:	01 d0                	add    eax,edx
c001d5b0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d5b7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d5bd:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d5c4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d5ce:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5d4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5db:	6a 04                	push   0x4
c001d5dd:	6a 0c                	push   0xc
c001d5df:	51                   	push   ecx
c001d5e0:	52                   	push   edx
c001d5e1:	e8 46 e3 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5e6:	90                   	nop
c001d5e7:	90                   	nop
c001d5e8:	6a 00                	push   0x0
c001d5ea:	6a 0c                	push   0xc
c001d5ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5f3:	50                   	push   eax
c001d5f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5fa:	e8 2d e3 ff ff       	call   c001b92c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5ff:	83 c4 14             	add    esp,0x14
c001d602:	68 78 01 00 00       	push   0x178
c001d607:	e8 aa a4 fe ff       	call   c0007ab6 <malloc>
c001d60c:	83 c4 0c             	add    esp,0xc
c001d60f:	89 c6                	mov    esi,eax
c001d611:	6a 00                	push   0x0
c001d613:	68 ff ff ff 7f       	push   0x7fffffff
c001d618:	6a 00                	push   0x0
c001d61a:	6a 00                	push   0x0
c001d61c:	53                   	push   ebx
c001d61d:	68 ef 2f 02 c0       	push   0xc0022fef
c001d622:	50                   	push   eax
c001d623:	e8 f0 02 ff ff       	call   c000d918 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d628:	83 c4 14             	add    esp,0x14
c001d62b:	56                   	push   esi
c001d62c:	e8 a7 03 ff ff       	call   c000d9d8 <LogicalDisk::assignDriveLetter()>
c001d631:	5a                   	pop    edx
c001d632:	0f be c0             	movsx  eax,al
c001d635:	59                   	pop    ecx
c001d636:	50                   	push   eax
c001d637:	68 40 2e 02 c0       	push   0xc0022e40
c001d63c:	e8 04 d3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d641:	58                   	pop    eax
c001d642:	5a                   	pop    edx
c001d643:	56                   	push   esi
c001d644:	53                   	push   ebx
c001d645:	e8 28 f1 fe ff       	call   c000c772 <Device::addChild(Device*)>
c001d64a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d650:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d653:	e8 4e f5 fe ff       	call   c000cba6 <PhysicalDisk::startCache()>
c001d658:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d65f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d662:	e8 6b fe ff ff       	call   c001d4d2 <ATAPI::detectMedia()>
c001d667:	83 c4 14             	add    esp,0x14
c001d66a:	31 c0                	xor    eax,eax
c001d66c:	5b                   	pop    ebx
c001d66d:	5e                   	pop    esi
c001d66e:	c3                   	ret    
c001d66f:	90                   	nop

c001d670 <ATAPI::read(unsigned long long, int, void*)>:
c001d670:	55                   	push   ebp
c001d671:	57                   	push   edi
c001d672:	56                   	push   esi
c001d673:	53                   	push   ebx
c001d674:	83 ec 1c             	sub    esp,0x1c
c001d677:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d67b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d67f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d683:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d68a:	74 3c                	je     c001d6c8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d68c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d690:	b9 03 00 00 00       	mov    ecx,0x3
c001d695:	fc                   	cld    
c001d696:	31 c0                	xor    eax,eax
c001d698:	0f ce                	bswap  esi
c001d69a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d69c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d6a1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d6a5:	89 e8                	mov    eax,ebp
c001d6a7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d6ab:	50                   	push   eax
c001d6ac:	50                   	push   eax
c001d6ad:	55                   	push   ebp
c001d6ae:	c1 e5 0b             	shl    ebp,0xb
c001d6b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6b5:	6a 00                	push   0x0
c001d6b7:	55                   	push   ebp
c001d6b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d6bc:	50                   	push   eax
c001d6bd:	53                   	push   ebx
c001d6be:	e8 b9 fa ff ff       	call   c001d17c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d6c3:	83 c4 20             	add    esp,0x20
c001d6c6:	eb 1a                	jmp    c001d6e2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d6c8:	83 ec 0c             	sub    esp,0xc
c001d6cb:	53                   	push   ebx
c001d6cc:	e8 01 fe ff ff       	call   c001d4d2 <ATAPI::detectMedia()>
c001d6d1:	83 c4 10             	add    esp,0x10
c001d6d4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6db:	75 af                	jne    c001d68c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d6dd:	b8 02 00 00 00       	mov    eax,0x2
c001d6e2:	83 c4 1c             	add    esp,0x1c
c001d6e5:	5b                   	pop    ebx
c001d6e6:	5e                   	pop    esi
c001d6e7:	5f                   	pop    edi
c001d6e8:	5d                   	pop    ebp
c001d6e9:	c3                   	ret    

c001d6ea <SATA::close(int, int, void*)>:
c001d6ea:	83 ec 0c             	sub    esp,0xc
c001d6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d6f7:	85 c0                	test   eax,eax
c001d6f9:	74 0c                	je     c001d707 <SATA::close(int, int, void*)+0x1d>
c001d6fb:	83 ec 0c             	sub    esp,0xc
c001d6fe:	8b 10                	mov    edx,DWORD PTR [eax]
c001d700:	50                   	push   eax
c001d701:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d704:	83 c4 10             	add    esp,0x10
c001d707:	31 c0                	xor    eax,eax
c001d709:	83 c4 0c             	add    esp,0xc
c001d70c:	c3                   	ret    
c001d70d:	90                   	nop

c001d70e <SATA::powerSaving(PowerSavingLevel)>:
c001d70e:	c3                   	ret    
c001d70f:	90                   	nop

c001d710 <SATA::open(int, int, void*)>:
c001d710:	56                   	push   esi
c001d711:	53                   	push   ebx
c001d712:	50                   	push   eax
c001d713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d717:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d71b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d725:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d72b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d735:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d739:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d743:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d749:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d750:	e8 6a a6 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d755:	89 c6                	mov    esi,eax
c001d757:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d75d:	81 c6 00 10 00 00    	add    esi,0x1000
c001d763:	e8 57 a6 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d768:	39 c6                	cmp    esi,eax
c001d76a:	74 10                	je     c001d77c <SATA::open(int, int, void*)+0x6c>
c001d76c:	83 ec 0c             	sub    esp,0xc
c001d76f:	68 88 2e 02 c0       	push   0xc0022e88
c001d774:	e8 28 3c ff ff       	call   c00113a1 <KePanic(char const*)>
c001d779:	83 c4 10             	add    esp,0x10
c001d77c:	83 ec 0c             	sub    esp,0xc
c001d77f:	6a 02                	push   0x2
c001d781:	e8 87 be fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d786:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d78c:	6a 03                	push   0x3
c001d78e:	50                   	push   eax
c001d78f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d795:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d79b:	e8 80 c5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d7a0:	83 c4 14             	add    esp,0x14
c001d7a3:	53                   	push   ebx
c001d7a4:	e8 fd f3 fe ff       	call   c000cba6 <PhysicalDisk::startCache()>
c001d7a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7ac:	e8 39 06 ff ff       	call   c000ddea <createPartitionsForDisk(PhysicalDisk*)>
c001d7b1:	83 c4 14             	add    esp,0x14
c001d7b4:	31 c0                	xor    eax,eax
c001d7b6:	5b                   	pop    ebx
c001d7b7:	5e                   	pop    esi
c001d7b8:	c3                   	ret    
c001d7b9:	90                   	nop

c001d7ba <SATA::SATA()>:
c001d7ba:	83 ec 0c             	sub    esp,0xc
c001d7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c1:	83 ec 04             	sub    esp,0x4
c001d7c4:	68 00 02 00 00       	push   0x200
c001d7c9:	68 9c 2e 02 c0       	push   0xc0022e9c
c001d7ce:	50                   	push   eax
c001d7cf:	e8 6a f3 fe ff       	call   c000cb3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d7d4:	83 c4 10             	add    esp,0x10
c001d7d7:	ba 0c 2f 02 c0       	mov    edx,0xc0022f0c
c001d7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e0:	89 10                	mov    DWORD PTR [eax],edx
c001d7e2:	90                   	nop
c001d7e3:	83 c4 0c             	add    esp,0xc
c001d7e6:	c3                   	ret    
c001d7e7:	90                   	nop

c001d7e8 <SATA::access(unsigned long long, int, void*, bool)>:
c001d7e8:	55                   	push   ebp
c001d7e9:	57                   	push   edi
c001d7ea:	56                   	push   esi
c001d7eb:	53                   	push   ebx
c001d7ec:	83 ec 2c             	sub    esp,0x2c
c001d7ef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d7f3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d7f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7fb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d7ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d803:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d808:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d80c:	7e 10                	jle    c001d81e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d80e:	83 ec 0c             	sub    esp,0xc
c001d811:	68 ac 2e 02 c0       	push   0xc0022eac
c001d816:	e8 86 3b ff ff       	call   c00113a1 <KePanic(char const*)>
c001d81b:	83 c4 10             	add    esp,0x10
c001d81e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d824:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d82a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d830:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d834:	89 d0                	mov    eax,edx
c001d836:	c1 e0 07             	shl    eax,0x7
c001d839:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d83d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d847:	51                   	push   ecx
c001d848:	8d 42 02             	lea    eax,[edx+0x2]
c001d84b:	51                   	push   ecx
c001d84c:	c1 e0 07             	shl    eax,0x7
c001d84f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d853:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d857:	50                   	push   eax
c001d858:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d85e:	e8 91 ec ff ff       	call   c001c4f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d863:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d867:	83 c4 10             	add    esp,0x10
c001d86a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d86f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d873:	0f 84 57 01 00 00    	je     c001d9d0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d879:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d87d:	c1 e0 09             	shl    eax,0x9
c001d880:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d885:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d889:	74 0e                	je     c001d899 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d88b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d891:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d895:	89 c1                	mov    ecx,eax
c001d897:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d899:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d89f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d8a3:	8d 42 02             	lea    eax,[edx+0x2]
c001d8a6:	c1 e0 07             	shl    eax,0x7
c001d8a9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d8ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8af:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d8b5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d8bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8bf:	c1 e1 05             	shl    ecx,0x5
c001d8c2:	01 c8                	add    eax,ecx
c001d8c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d8c8:	83 e1 01             	and    ecx,0x1
c001d8cb:	89 ce                	mov    esi,ecx
c001d8cd:	8a 08                	mov    cl,BYTE PTR [eax]
c001d8cf:	c1 e6 06             	shl    esi,0x6
c001d8d2:	83 e1 bf             	and    ecx,0xffffffbf
c001d8d5:	09 f1                	or     ecx,esi
c001d8d7:	88 08                	mov    BYTE PTR [eax],cl
c001d8d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d8db:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d8e1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d8e7:	89 08                	mov    DWORD PTR [eax],ecx
c001d8e9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d8ef:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d8f5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d8fb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d8fe:	50                   	push   eax
c001d8ff:	68 90 00 00 00       	push   0x90
c001d904:	6a 00                	push   0x0
c001d906:	56                   	push   esi
c001d907:	e8 e4 2b fe ff       	call   c00004f0 <memset>
c001d90c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d912:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d918:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d91c:	83 c4 10             	add    esp,0x10
c001d91f:	48                   	dec    eax
c001d920:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d925:	89 c1                	mov    ecx,eax
c001d927:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d92d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d932:	09 c8                	or     eax,ecx
c001d934:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d93a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d940:	83 c8 80             	or     eax,0xffffff80
c001d943:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d949:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d94c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d950:	25 00 7f 00 00       	and    eax,0x7f00
c001d955:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d95a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d95f:	66 89 06             	mov    WORD PTR [esi],ax
c001d962:	b0 35                	mov    al,0x35
c001d964:	75 02                	jne    c001d968 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d966:	b0 25                	mov    al,0x25
c001d968:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d96b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d96f:	89 e8                	mov    eax,ebp
c001d971:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d975:	c1 e8 10             	shr    eax,0x10
c001d978:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d97b:	89 e8                	mov    eax,ebp
c001d97d:	c1 e8 18             	shr    eax,0x18
c001d980:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d983:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d987:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d98a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d98e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d991:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d995:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d999:	89 d6                	mov    esi,edx
c001d99b:	31 c0                	xor    eax,eax
c001d99d:	c1 e6 07             	shl    esi,0x7
c001d9a0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d9a4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d9aa:	80 e1 88             	and    cl,0x88
c001d9ad:	74 0a                	je     c001d9b9 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d9af:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d9b4:	74 0a                	je     c001d9c0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d9b6:	40                   	inc    eax
c001d9b7:	eb eb                	jmp    c001d9a4 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d9b9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d9be:	75 17                	jne    c001d9d7 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d9c0:	83 ec 0c             	sub    esp,0xc
c001d9c3:	68 e5 2e 02 c0       	push   0xc0022ee5
c001d9c8:	e8 78 cf fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d9cd:	83 c4 10             	add    esp,0x10
c001d9d0:	b8 01 00 00 00       	mov    eax,0x1
c001d9d5:	eb 5d                	jmp    c001da34 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d9d7:	b8 01 00 00 00       	mov    eax,0x1
c001d9dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d9e0:	c1 e2 07             	shl    edx,0x7
c001d9e3:	d3 e0                	shl    eax,cl
c001d9e5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d9e9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d9ef:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d9f5:	85 c8                	test   eax,ecx
c001d9f7:	74 16                	je     c001da0f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d9f9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d9ff:	0f ba e1 1e          	bt     ecx,0x1e
c001da03:	73 ea                	jae    c001d9ef <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001da05:	83 ec 0c             	sub    esp,0xc
c001da08:	68 f3 2e 02 c0       	push   0xc0022ef3
c001da0d:	eb b9                	jmp    c001d9c8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001da0f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001da15:	0f ba e0 1e          	bt     eax,0x1e
c001da19:	72 b5                	jb     c001d9d0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001da1b:	31 c0                	xor    eax,eax
c001da1d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001da22:	75 10                	jne    c001da34 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001da24:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001da2a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001da2e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001da32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001da34:	83 c4 2c             	add    esp,0x2c
c001da37:	5b                   	pop    ebx
c001da38:	5e                   	pop    esi
c001da39:	5f                   	pop    edi
c001da3a:	5d                   	pop    ebp
c001da3b:	c3                   	ret    

c001da3c <SATA::read(unsigned long long, int, void*)>:
c001da3c:	55                   	push   ebp
c001da3d:	57                   	push   edi
c001da3e:	56                   	push   esi
c001da3f:	be 04 00 00 00       	mov    esi,0x4
c001da44:	53                   	push   ebx
c001da45:	83 ec 0c             	sub    esp,0xc
c001da48:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001da4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da50:	8d 7b ff             	lea    edi,[ebx-0x1]
c001da53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da57:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001da5b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001da61:	0f 87 1a 02 00 00    	ja     c001dc81 <SATA::read(unsigned long long, int, void*)+0x245>
c001da67:	be 06 00 00 00       	mov    esi,0x6
c001da6c:	85 c9                	test   ecx,ecx
c001da6e:	0f 84 0d 02 00 00    	je     c001dc81 <SATA::read(unsigned long long, int, void*)+0x245>
c001da74:	56                   	push   esi
c001da75:	56                   	push   esi
c001da76:	6a 00                	push   0x0
c001da78:	51                   	push   ecx
c001da79:	53                   	push   ebx
c001da7a:	52                   	push   edx
c001da7b:	50                   	push   eax
c001da7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da80:	e8 63 fd ff ff       	call   c001d7e8 <SATA::access(unsigned long long, int, void*, bool)>
c001da85:	83 c4 20             	add    esp,0x20
c001da88:	89 c6                	mov    esi,eax
c001da8a:	85 c0                	test   eax,eax
c001da8c:	0f 85 ea 01 00 00    	jne    c001dc7c <SATA::read(unsigned long long, int, void*)+0x240>
c001da92:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001da98:	bb 0a 00 00 00       	mov    ebx,0xa
c001da9d:	50                   	push   eax
c001da9e:	50                   	push   eax
c001da9f:	6a 0f                	push   0xf
c001daa1:	6a 00                	push   0x0
c001daa3:	e8 75 f2 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001daa8:	5a                   	pop    edx
c001daa9:	0f b6 c0             	movzx  eax,al
c001daac:	59                   	pop    ecx
c001daad:	b9 10 27 00 00       	mov    ecx,0x2710
c001dab2:	50                   	push   eax
c001dab3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dab8:	99                   	cdq    
c001dab9:	f7 f9                	idiv   ecx
c001dabb:	99                   	cdq    
c001dabc:	f7 fb                	idiv   ebx
c001dabe:	8d 42 30             	lea    eax,[edx+0x30]
c001dac1:	0f b6 c0             	movzx  eax,al
c001dac4:	50                   	push   eax
c001dac5:	e8 42 f2 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001daca:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dad0:	5f                   	pop    edi
c001dad1:	5d                   	pop    ebp
c001dad2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dad7:	6a 0f                	push   0xf
c001dad9:	6a 00                	push   0x0
c001dadb:	e8 3d f2 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dae0:	5a                   	pop    edx
c001dae1:	0f b6 c0             	movzx  eax,al
c001dae4:	59                   	pop    ecx
c001dae5:	50                   	push   eax
c001dae6:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001daeb:	99                   	cdq    
c001daec:	f7 fd                	idiv   ebp
c001daee:	99                   	cdq    
c001daef:	f7 fb                	idiv   ebx
c001daf1:	8d 42 30             	lea    eax,[edx+0x30]
c001daf4:	0f b6 c0             	movzx  eax,al
c001daf7:	50                   	push   eax
c001daf8:	e8 0f f2 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dafd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001db03:	5f                   	pop    edi
c001db04:	bf 64 00 00 00       	mov    edi,0x64
c001db09:	58                   	pop    eax
c001db0a:	6a 0f                	push   0xf
c001db0c:	6a 00                	push   0x0
c001db0e:	e8 0a f2 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001db13:	5a                   	pop    edx
c001db14:	0f b6 c0             	movzx  eax,al
c001db17:	59                   	pop    ecx
c001db18:	50                   	push   eax
c001db19:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db1e:	99                   	cdq    
c001db1f:	f7 ff                	idiv   edi
c001db21:	99                   	cdq    
c001db22:	f7 fb                	idiv   ebx
c001db24:	8d 42 30             	lea    eax,[edx+0x30]
c001db27:	0f b6 c0             	movzx  eax,al
c001db2a:	50                   	push   eax
c001db2b:	e8 dc f1 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001db30:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001db36:	58                   	pop    eax
c001db37:	5a                   	pop    edx
c001db38:	6a 0f                	push   0xf
c001db3a:	6a 00                	push   0x0
c001db3c:	e8 dc f1 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001db41:	59                   	pop    ecx
c001db42:	0f b6 c0             	movzx  eax,al
c001db45:	5a                   	pop    edx
c001db46:	50                   	push   eax
c001db47:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db4c:	99                   	cdq    
c001db4d:	f7 fb                	idiv   ebx
c001db4f:	99                   	cdq    
c001db50:	f7 fb                	idiv   ebx
c001db52:	8d 42 30             	lea    eax,[edx+0x30]
c001db55:	0f b6 c0             	movzx  eax,al
c001db58:	50                   	push   eax
c001db59:	e8 ae f1 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001db5e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001db64:	59                   	pop    ecx
c001db65:	58                   	pop    eax
c001db66:	6a 0f                	push   0xf
c001db68:	6a 00                	push   0x0
c001db6a:	e8 ae f1 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001db6f:	5a                   	pop    edx
c001db70:	0f b6 c0             	movzx  eax,al
c001db73:	59                   	pop    ecx
c001db74:	50                   	push   eax
c001db75:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001db7a:	99                   	cdq    
c001db7b:	f7 fb                	idiv   ebx
c001db7d:	8d 42 30             	lea    eax,[edx+0x30]
c001db80:	0f b6 c0             	movzx  eax,al
c001db83:	50                   	push   eax
c001db84:	e8 83 f1 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001db89:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001db8f:	58                   	pop    eax
c001db90:	5a                   	pop    edx
c001db91:	6a 0f                	push   0xf
c001db93:	6a 00                	push   0x0
c001db95:	e8 83 f1 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001db9a:	59                   	pop    ecx
c001db9b:	0f b6 c0             	movzx  eax,al
c001db9e:	5a                   	pop    edx
c001db9f:	b9 10 27 00 00       	mov    ecx,0x2710
c001dba4:	50                   	push   eax
c001dba5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbaa:	99                   	cdq    
c001dbab:	f7 f9                	idiv   ecx
c001dbad:	99                   	cdq    
c001dbae:	f7 fb                	idiv   ebx
c001dbb0:	8d 42 30             	lea    eax,[edx+0x30]
c001dbb3:	0f b6 c0             	movzx  eax,al
c001dbb6:	50                   	push   eax
c001dbb7:	e8 50 f1 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dbbc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dbc2:	59                   	pop    ecx
c001dbc3:	58                   	pop    eax
c001dbc4:	6a 0f                	push   0xf
c001dbc6:	6a 00                	push   0x0
c001dbc8:	e8 50 f1 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dbcd:	5a                   	pop    edx
c001dbce:	0f b6 c0             	movzx  eax,al
c001dbd1:	59                   	pop    ecx
c001dbd2:	50                   	push   eax
c001dbd3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbd8:	99                   	cdq    
c001dbd9:	f7 fd                	idiv   ebp
c001dbdb:	99                   	cdq    
c001dbdc:	f7 fb                	idiv   ebx
c001dbde:	8d 42 30             	lea    eax,[edx+0x30]
c001dbe1:	0f b6 c0             	movzx  eax,al
c001dbe4:	50                   	push   eax
c001dbe5:	e8 22 f1 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dbea:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dbf0:	5d                   	pop    ebp
c001dbf1:	58                   	pop    eax
c001dbf2:	6a 0f                	push   0xf
c001dbf4:	6a 00                	push   0x0
c001dbf6:	e8 22 f1 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dbfb:	5a                   	pop    edx
c001dbfc:	0f b6 c0             	movzx  eax,al
c001dbff:	59                   	pop    ecx
c001dc00:	50                   	push   eax
c001dc01:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc06:	99                   	cdq    
c001dc07:	f7 ff                	idiv   edi
c001dc09:	99                   	cdq    
c001dc0a:	f7 fb                	idiv   ebx
c001dc0c:	8d 42 30             	lea    eax,[edx+0x30]
c001dc0f:	0f b6 c0             	movzx  eax,al
c001dc12:	50                   	push   eax
c001dc13:	e8 f4 f0 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dc18:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dc1e:	5f                   	pop    edi
c001dc1f:	5d                   	pop    ebp
c001dc20:	6a 0f                	push   0xf
c001dc22:	6a 00                	push   0x0
c001dc24:	e8 f4 f0 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dc29:	5a                   	pop    edx
c001dc2a:	0f b6 c0             	movzx  eax,al
c001dc2d:	59                   	pop    ecx
c001dc2e:	50                   	push   eax
c001dc2f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc34:	99                   	cdq    
c001dc35:	f7 fb                	idiv   ebx
c001dc37:	99                   	cdq    
c001dc38:	f7 fb                	idiv   ebx
c001dc3a:	8d 42 30             	lea    eax,[edx+0x30]
c001dc3d:	0f b6 c0             	movzx  eax,al
c001dc40:	50                   	push   eax
c001dc41:	e8 c6 f0 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dc46:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dc4c:	5f                   	pop    edi
c001dc4d:	5d                   	pop    ebp
c001dc4e:	6a 0f                	push   0xf
c001dc50:	6a 00                	push   0x0
c001dc52:	e8 c6 f0 ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dc57:	5a                   	pop    edx
c001dc58:	0f b6 c0             	movzx  eax,al
c001dc5b:	59                   	pop    ecx
c001dc5c:	50                   	push   eax
c001dc5d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dc62:	99                   	cdq    
c001dc63:	f7 fb                	idiv   ebx
c001dc65:	83 c2 30             	add    edx,0x30
c001dc68:	0f b6 d2             	movzx  edx,dl
c001dc6b:	52                   	push   edx
c001dc6c:	e8 9b f0 ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dc71:	83 c4 10             	add    esp,0x10
c001dc74:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dc7a:	eb 05                	jmp    c001dc81 <SATA::read(unsigned long long, int, void*)+0x245>
c001dc7c:	be 01 00 00 00       	mov    esi,0x1
c001dc81:	83 c4 0c             	add    esp,0xc
c001dc84:	89 f0                	mov    eax,esi
c001dc86:	5b                   	pop    ebx
c001dc87:	5e                   	pop    esi
c001dc88:	5f                   	pop    edi
c001dc89:	5d                   	pop    ebp
c001dc8a:	c3                   	ret    
c001dc8b:	90                   	nop

c001dc8c <SATA::write(unsigned long long, int, void*)>:
c001dc8c:	55                   	push   ebp
c001dc8d:	b8 04 00 00 00       	mov    eax,0x4
c001dc92:	57                   	push   edi
c001dc93:	56                   	push   esi
c001dc94:	53                   	push   ebx
c001dc95:	83 ec 1c             	sub    esp,0x1c
c001dc98:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dc9c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dca0:	8d 75 ff             	lea    esi,[ebp-0x1]
c001dca3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dca7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001dcab:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dcb1:	0f 87 32 02 00 00    	ja     c001dee9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dcb7:	b8 06 00 00 00       	mov    eax,0x6
c001dcbc:	85 ff                	test   edi,edi
c001dcbe:	0f 84 25 02 00 00    	je     c001dee9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dcc4:	89 ee                	mov    esi,ebp
c001dcc6:	c1 e6 09             	shl    esi,0x9
c001dcc9:	01 fe                	add    esi,edi
c001dccb:	89 c8                	mov    eax,ecx
c001dccd:	89 da                	mov    edx,ebx
c001dccf:	83 c0 01             	add    eax,0x1
c001dcd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcd6:	83 d2 00             	adc    edx,0x0
c001dcd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dcdd:	50                   	push   eax
c001dcde:	50                   	push   eax
c001dcdf:	6a 01                	push   0x1
c001dce1:	57                   	push   edi
c001dce2:	81 c7 00 02 00 00    	add    edi,0x200
c001dce8:	6a 01                	push   0x1
c001dcea:	53                   	push   ebx
c001dceb:	51                   	push   ecx
c001dcec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dcf0:	e8 f3 fa ff ff       	call   c001d7e8 <SATA::access(unsigned long long, int, void*, bool)>
c001dcf5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dcf9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dcfd:	83 c4 20             	add    esp,0x20
c001dd00:	39 f7                	cmp    edi,esi
c001dd02:	75 c7                	jne    c001dccb <SATA::write(unsigned long long, int, void*)+0x3f>
c001dd04:	bb 0a 00 00 00       	mov    ebx,0xa
c001dd09:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001dd0f:	bd 10 27 00 00       	mov    ebp,0x2710
c001dd14:	50                   	push   eax
c001dd15:	50                   	push   eax
c001dd16:	6a 0f                	push   0xf
c001dd18:	6a 00                	push   0x0
c001dd1a:	e8 fe ef ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dd1f:	5a                   	pop    edx
c001dd20:	0f b6 c0             	movzx  eax,al
c001dd23:	59                   	pop    ecx
c001dd24:	50                   	push   eax
c001dd25:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd2a:	99                   	cdq    
c001dd2b:	f7 fd                	idiv   ebp
c001dd2d:	99                   	cdq    
c001dd2e:	f7 fb                	idiv   ebx
c001dd30:	8d 42 30             	lea    eax,[edx+0x30]
c001dd33:	0f b6 c0             	movzx  eax,al
c001dd36:	50                   	push   eax
c001dd37:	e8 d0 ef ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dd3c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dd42:	5e                   	pop    esi
c001dd43:	5f                   	pop    edi
c001dd44:	bf e8 03 00 00       	mov    edi,0x3e8
c001dd49:	6a 0f                	push   0xf
c001dd4b:	6a 00                	push   0x0
c001dd4d:	e8 cb ef ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dd52:	5a                   	pop    edx
c001dd53:	0f b6 c0             	movzx  eax,al
c001dd56:	59                   	pop    ecx
c001dd57:	50                   	push   eax
c001dd58:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd5d:	99                   	cdq    
c001dd5e:	f7 ff                	idiv   edi
c001dd60:	99                   	cdq    
c001dd61:	f7 fb                	idiv   ebx
c001dd63:	8d 42 30             	lea    eax,[edx+0x30]
c001dd66:	0f b6 c0             	movzx  eax,al
c001dd69:	50                   	push   eax
c001dd6a:	e8 9d ef ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dd6f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dd75:	5e                   	pop    esi
c001dd76:	be 64 00 00 00       	mov    esi,0x64
c001dd7b:	58                   	pop    eax
c001dd7c:	6a 0f                	push   0xf
c001dd7e:	6a 00                	push   0x0
c001dd80:	e8 98 ef ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dd85:	5a                   	pop    edx
c001dd86:	0f b6 c0             	movzx  eax,al
c001dd89:	59                   	pop    ecx
c001dd8a:	50                   	push   eax
c001dd8b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd90:	99                   	cdq    
c001dd91:	f7 fe                	idiv   esi
c001dd93:	99                   	cdq    
c001dd94:	f7 fb                	idiv   ebx
c001dd96:	8d 42 30             	lea    eax,[edx+0x30]
c001dd99:	0f b6 c0             	movzx  eax,al
c001dd9c:	50                   	push   eax
c001dd9d:	e8 6a ef ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dda2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dda8:	58                   	pop    eax
c001dda9:	5a                   	pop    edx
c001ddaa:	6a 0f                	push   0xf
c001ddac:	6a 00                	push   0x0
c001ddae:	e8 6a ef ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001ddb3:	59                   	pop    ecx
c001ddb4:	0f b6 c0             	movzx  eax,al
c001ddb7:	5a                   	pop    edx
c001ddb8:	50                   	push   eax
c001ddb9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddbe:	99                   	cdq    
c001ddbf:	f7 fb                	idiv   ebx
c001ddc1:	99                   	cdq    
c001ddc2:	f7 fb                	idiv   ebx
c001ddc4:	8d 42 30             	lea    eax,[edx+0x30]
c001ddc7:	0f b6 c0             	movzx  eax,al
c001ddca:	50                   	push   eax
c001ddcb:	e8 3c ef ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001ddd0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ddd6:	59                   	pop    ecx
c001ddd7:	58                   	pop    eax
c001ddd8:	6a 0f                	push   0xf
c001ddda:	6a 00                	push   0x0
c001dddc:	e8 3c ef ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dde1:	5a                   	pop    edx
c001dde2:	0f b6 c0             	movzx  eax,al
c001dde5:	59                   	pop    ecx
c001dde6:	50                   	push   eax
c001dde7:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ddec:	99                   	cdq    
c001dded:	f7 fb                	idiv   ebx
c001ddef:	83 c2 30             	add    edx,0x30
c001ddf2:	0f b6 d2             	movzx  edx,dl
c001ddf5:	52                   	push   edx
c001ddf6:	e8 11 ef ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001ddfb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001de01:	58                   	pop    eax
c001de02:	5a                   	pop    edx
c001de03:	6a 0f                	push   0xf
c001de05:	6a 00                	push   0x0
c001de07:	e8 11 ef ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001de0c:	59                   	pop    ecx
c001de0d:	0f b6 c0             	movzx  eax,al
c001de10:	5a                   	pop    edx
c001de11:	50                   	push   eax
c001de12:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de17:	99                   	cdq    
c001de18:	f7 fd                	idiv   ebp
c001de1a:	99                   	cdq    
c001de1b:	f7 fb                	idiv   ebx
c001de1d:	8d 42 30             	lea    eax,[edx+0x30]
c001de20:	0f b6 c0             	movzx  eax,al
c001de23:	50                   	push   eax
c001de24:	e8 e3 ee ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001de29:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001de2f:	59                   	pop    ecx
c001de30:	5d                   	pop    ebp
c001de31:	6a 0f                	push   0xf
c001de33:	6a 00                	push   0x0
c001de35:	e8 e3 ee ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001de3a:	5a                   	pop    edx
c001de3b:	0f b6 c0             	movzx  eax,al
c001de3e:	59                   	pop    ecx
c001de3f:	50                   	push   eax
c001de40:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de45:	99                   	cdq    
c001de46:	f7 ff                	idiv   edi
c001de48:	99                   	cdq    
c001de49:	f7 fb                	idiv   ebx
c001de4b:	8d 42 30             	lea    eax,[edx+0x30]
c001de4e:	0f b6 c0             	movzx  eax,al
c001de51:	50                   	push   eax
c001de52:	e8 b5 ee ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001de57:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001de5d:	5f                   	pop    edi
c001de5e:	5d                   	pop    ebp
c001de5f:	6a 0f                	push   0xf
c001de61:	6a 00                	push   0x0
c001de63:	e8 b5 ee ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001de68:	5a                   	pop    edx
c001de69:	0f b6 c0             	movzx  eax,al
c001de6c:	59                   	pop    ecx
c001de6d:	50                   	push   eax
c001de6e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de73:	99                   	cdq    
c001de74:	f7 fe                	idiv   esi
c001de76:	99                   	cdq    
c001de77:	f7 fb                	idiv   ebx
c001de79:	8d 42 30             	lea    eax,[edx+0x30]
c001de7c:	0f b6 c0             	movzx  eax,al
c001de7f:	50                   	push   eax
c001de80:	e8 87 ee ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001de85:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001de8b:	5e                   	pop    esi
c001de8c:	5f                   	pop    edi
c001de8d:	6a 0f                	push   0xf
c001de8f:	6a 00                	push   0x0
c001de91:	e8 87 ee ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001de96:	5d                   	pop    ebp
c001de97:	0f b6 c0             	movzx  eax,al
c001de9a:	5a                   	pop    edx
c001de9b:	50                   	push   eax
c001de9c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dea1:	99                   	cdq    
c001dea2:	f7 fb                	idiv   ebx
c001dea4:	99                   	cdq    
c001dea5:	f7 fb                	idiv   ebx
c001dea7:	8d 42 30             	lea    eax,[edx+0x30]
c001deaa:	0f b6 c0             	movzx  eax,al
c001dead:	50                   	push   eax
c001deae:	e8 59 ee ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001deb3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001deb9:	59                   	pop    ecx
c001deba:	5e                   	pop    esi
c001debb:	6a 0f                	push   0xf
c001debd:	6a 00                	push   0x0
c001debf:	e8 59 ee ff ff       	call   c001cd1d <combineColours(unsigned char, unsigned char)>
c001dec4:	5f                   	pop    edi
c001dec5:	0f b6 c0             	movzx  eax,al
c001dec8:	5d                   	pop    ebp
c001dec9:	50                   	push   eax
c001deca:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001decf:	99                   	cdq    
c001ded0:	f7 fb                	idiv   ebx
c001ded2:	83 c2 30             	add    edx,0x30
c001ded5:	0f b6 d2             	movzx  edx,dl
c001ded8:	52                   	push   edx
c001ded9:	e8 2e ee ff ff       	call   c001cd0c <combineCharAndColour(char, unsigned char)>
c001dede:	83 c4 10             	add    esp,0x10
c001dee1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dee7:	31 c0                	xor    eax,eax
c001dee9:	83 c4 1c             	add    esp,0x1c
c001deec:	5b                   	pop    ebx
c001deed:	5e                   	pop    esi
c001deee:	5f                   	pop    edi
c001deef:	5d                   	pop    ebp
c001def0:	c3                   	ret    
c001def1:	90                   	nop

c001def2 <SATAPI::write(unsigned long long, int, void*)>:
c001def2:	b8 03 00 00 00       	mov    eax,0x3
c001def7:	c3                   	ret    

c001def8 <SATAPI::close(int, int, void*)>:
c001def8:	83 ec 0c             	sub    esp,0xc
c001defb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001df05:	85 c0                	test   eax,eax
c001df07:	74 0c                	je     c001df15 <SATAPI::close(int, int, void*)+0x1d>
c001df09:	83 ec 0c             	sub    esp,0xc
c001df0c:	8b 10                	mov    edx,DWORD PTR [eax]
c001df0e:	50                   	push   eax
c001df0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001df12:	83 c4 10             	add    esp,0x10
c001df15:	31 c0                	xor    eax,eax
c001df17:	83 c4 0c             	add    esp,0xc
c001df1a:	c3                   	ret    
c001df1b:	90                   	nop

c001df1c <SATAPI::SATAPI()>:
c001df1c:	83 ec 0c             	sub    esp,0xc
c001df1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df23:	83 ec 04             	sub    esp,0x4
c001df26:	68 00 08 00 00       	push   0x800
c001df2b:	68 3c 2f 02 c0       	push   0xc0022f3c
c001df30:	50                   	push   eax
c001df31:	e8 08 ec fe ff       	call   c000cb3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001df36:	83 c4 10             	add    esp,0x10
c001df39:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001df3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df42:	89 10                	mov    DWORD PTR [eax],edx
c001df44:	90                   	nop
c001df45:	83 c4 0c             	add    esp,0xc
c001df48:	c3                   	ret    
c001df49:	90                   	nop

c001df4a <SATAPI::diskRemoved()>:
c001df4a:	c3                   	ret    
c001df4b:	90                   	nop

c001df4c <SATAPI::diskInserted()>:
c001df4c:	83 ec 18             	sub    esp,0x18
c001df4f:	68 48 2f 02 c0       	push   0xc0022f48
c001df54:	e8 ec c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001df59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df5d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001df64:	83 c4 1c             	add    esp,0x1c
c001df67:	c3                   	ret    

c001df68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001df68:	55                   	push   ebp
c001df69:	57                   	push   edi
c001df6a:	56                   	push   esi
c001df6b:	53                   	push   ebx
c001df6c:	83 ec 34             	sub    esp,0x34
c001df6f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001df73:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df77:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001df7b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df7f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001df83:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001df89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df93:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001df99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df9d:	83 c0 02             	add    eax,0x2
c001dfa0:	c1 e0 07             	shl    eax,0x7
c001dfa3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dfa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfaf:	c1 e0 07             	shl    eax,0x7
c001dfb2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dfb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dfba:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dfc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfc8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dfce:	e8 21 e5 ff ff       	call   c001c4f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dfd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dfd7:	83 c4 10             	add    esp,0x10
c001dfda:	b8 01 00 00 00       	mov    eax,0x1
c001dfdf:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dfe4:	0f 84 53 02 00 00    	je     c001e23d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001dfea:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dff4:	8b 00                	mov    eax,DWORD PTR [eax]
c001dff6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dffc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e002:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e006:	c1 e1 05             	shl    ecx,0x5
c001e009:	01 c8                	add    eax,ecx
c001e00b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e00d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e013:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e019:	89 08                	mov    DWORD PTR [eax],ecx
c001e01b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e021:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e027:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e02d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e030:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e033:	50                   	push   eax
c001e034:	68 90 00 00 00       	push   0x90
c001e039:	6a 00                	push   0x0
c001e03b:	53                   	push   ebx
c001e03c:	e8 af 24 fe ff       	call   c00004f0 <memset>
c001e041:	b9 0c 00 00 00       	mov    ecx,0xc
c001e046:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e04a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e04c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e052:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e056:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e05c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e060:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e064:	48                   	dec    eax
c001e065:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e06a:	89 c1                	mov    ecx,eax
c001e06c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e072:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e077:	09 c8                	or     eax,ecx
c001e079:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e07f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e085:	83 c8 80             	or     eax,0xffffff80
c001e088:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e08e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e091:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e095:	25 00 7f 00 00       	and    eax,0x7f00
c001e09a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e09e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e0a3:	66 89 03             	mov    WORD PTR [ebx],ax
c001e0a6:	89 d0                	mov    eax,edx
c001e0a8:	c1 ea 18             	shr    edx,0x18
c001e0ab:	c1 e8 10             	shr    eax,0x10
c001e0ae:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e0b1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e0b4:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e0b8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e0bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0bf:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e0c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e0c6:	83 c4 10             	add    esp,0x10
c001e0c9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e0cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0d1:	31 c0                	xor    eax,eax
c001e0d3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e0d9:	80 e1 88             	and    cl,0x88
c001e0dc:	74 0a                	je     c001e0e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e0de:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0e3:	74 0a                	je     c001e0ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e0e5:	40                   	inc    eax
c001e0e6:	eb eb                	jmp    c001e0d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e0e8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e0ed:	75 43                	jne    c001e132 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e0ef:	83 ec 0c             	sub    esp,0xc
c001e0f2:	68 60 2f 02 c0       	push   0xc0022f60
c001e0f7:	e8 49 c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e0fc:	58                   	pop    eax
c001e0fd:	5a                   	pop    edx
c001e0fe:	68 75 2f 02 c0       	push   0xc0022f75
c001e103:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e109:	e8 98 a9 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e10e:	59                   	pop    ecx
c001e10f:	5b                   	pop    ebx
c001e110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e114:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e11a:	e8 6f e4 ff ff       	call   c001c58e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e11f:	5e                   	pop    esi
c001e120:	5f                   	pop    edi
c001e121:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e125:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e12b:	e8 3e e4 ff ff       	call   c001c56e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e130:	eb 48                	jmp    c001e17a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e132:	be 01 00 00 00       	mov    esi,0x1
c001e137:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e13b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e13f:	d3 e6                	shl    esi,cl
c001e141:	c1 e7 07             	shl    edi,0x7
c001e144:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e14a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e14f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e153:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e159:	85 c6                	test   esi,eax
c001e15b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e161:	0f 84 a3 00 00 00    	je     c001e20a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e167:	0f ba e0 1e          	bt     eax,0x1e
c001e16b:	73 1a                	jae    c001e187 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e16d:	83 ec 0c             	sub    esp,0xc
c001e170:	68 87 2f 02 c0       	push   0xc0022f87
c001e175:	e8 cb c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e17a:	83 c4 10             	add    esp,0x10
c001e17d:	b8 01 00 00 00       	mov    eax,0x1
c001e182:	e9 b6 00 00 00       	jmp    c001e23d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e187:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e18d:	83 f8 0d             	cmp    eax,0xd
c001e190:	77 0a                	ja     c001e19c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e192:	83 ec 0c             	sub    esp,0xc
c001e195:	68 c8 00 00 00       	push   0xc8
c001e19a:	eb 28                	jmp    c001e1c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e19c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e1a2:	83 f8 0d             	cmp    eax,0xd
c001e1a5:	77 0a                	ja     c001e1b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e1a7:	83 ec 0c             	sub    esp,0xc
c001e1aa:	68 58 02 00 00       	push   0x258
c001e1af:	eb 13                	jmp    c001e1c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e1b1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e1b7:	83 f8 06             	cmp    eax,0x6
c001e1ba:	77 10                	ja     c001e1cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e1bc:	83 ec 0c             	sub    esp,0xc
c001e1bf:	68 dc 05 00 00       	push   0x5dc
c001e1c4:	e8 c7 7d ff ff       	call   c0015f90 <milliTenthSleep(unsigned int)>
c001e1c9:	83 c4 10             	add    esp,0x10
c001e1cc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e1d0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e1d3:	75 06                	jne    c001e1db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e1d5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e1d9:	74 15                	je     c001e1f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e1db:	83 fb 06             	cmp    ebx,0x6
c001e1de:	77 10                	ja     c001e1f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e1e0:	83 ec 0c             	sub    esp,0xc
c001e1e3:	68 c4 09 00 00       	push   0x9c4
c001e1e8:	e8 a3 7d ff ff       	call   c0015f90 <milliTenthSleep(unsigned int)>
c001e1ed:	83 c4 10             	add    esp,0x10
c001e1f0:	43                   	inc    ebx
c001e1f1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e1f7:	0f 85 56 ff ff ff    	jne    c001e153 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e1fd:	83 ec 0c             	sub    esp,0xc
c001e200:	68 9a 2f 02 c0       	push   0xc0022f9a
c001e205:	e9 6b ff ff ff       	jmp    c001e175 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e20a:	0f ba e0 1e          	bt     eax,0x1e
c001e20e:	73 0d                	jae    c001e21d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	68 ae 2f 02 c0       	push   0xc0022fae
c001e218:	e9 58 ff ff ff       	jmp    c001e175 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e21d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e222:	74 17                	je     c001e23b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e224:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e229:	74 10                	je     c001e23b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e22b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e231:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e235:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e239:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e23b:	31 c0                	xor    eax,eax
c001e23d:	83 c4 2c             	add    esp,0x2c
c001e240:	5b                   	pop    ebx
c001e241:	5e                   	pop    esi
c001e242:	5f                   	pop    edi
c001e243:	5d                   	pop    ebp
c001e244:	c3                   	ret    
c001e245:	90                   	nop

c001e246 <SATAPI::eject()>:
c001e246:	57                   	push   edi
c001e247:	b9 03 00 00 00       	mov    ecx,0x3
c001e24c:	83 ec 18             	sub    esp,0x18
c001e24f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e253:	fc                   	cld    
c001e254:	31 c0                	xor    eax,eax
c001e256:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e258:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e25d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e262:	50                   	push   eax
c001e263:	6a 00                	push   0x0
c001e265:	6a 00                	push   0x0
c001e267:	6a 00                	push   0x0
c001e269:	6a 00                	push   0x0
c001e26b:	6a 02                	push   0x2
c001e26d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e271:	50                   	push   eax
c001e272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e276:	e8 ed fc ff ff       	call   c001df68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e27b:	31 c0                	xor    eax,eax
c001e27d:	83 c4 38             	add    esp,0x38
c001e280:	5f                   	pop    edi
c001e281:	c3                   	ret    

c001e282 <SATAPI::detectMedia()>:
c001e282:	53                   	push   ebx
c001e283:	83 ec 14             	sub    esp,0x14
c001e286:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e28a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e290:	e8 27 02 ff ff       	call   c000e4bc <VCache::writeWriteBuffer()>
c001e295:	59                   	pop    ecx
c001e296:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e29c:	e8 0b 02 ff ff       	call   c000e4ac <VCache::invalidateReadBuffer()>
c001e2a1:	c7 04 24 c3 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fc3
c001e2a8:	e8 98 c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e2ad:	83 c4 10             	add    esp,0x10
c001e2b0:	31 c0                	xor    eax,eax
c001e2b2:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e2b9:	85 d2                	test   edx,edx
c001e2bb:	74 0f                	je     c001e2cc <SATAPI::detectMedia()+0x4a>
c001e2bd:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e2c3:	75 07                	jne    c001e2cc <SATAPI::detectMedia()+0x4a>
c001e2c5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e2cc:	40                   	inc    eax
c001e2cd:	83 f8 1a             	cmp    eax,0x1a
c001e2d0:	75 e0                	jne    c001e2b2 <SATAPI::detectMedia()+0x30>
c001e2d2:	83 c4 08             	add    esp,0x8
c001e2d5:	5b                   	pop    ebx
c001e2d6:	c3                   	ret    
c001e2d7:	90                   	nop

c001e2d8 <SATAPI::open(int, int, void*)>:
c001e2d8:	56                   	push   esi
c001e2d9:	53                   	push   ebx
c001e2da:	51                   	push   ecx
c001e2db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e2df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e2e3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e2ed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e2f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e2fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e301:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e30b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e311:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e318:	e8 a2 9a fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e31d:	89 c6                	mov    esi,eax
c001e31f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e325:	81 c6 00 10 00 00    	add    esi,0x1000
c001e32b:	e8 8f 9a fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e330:	39 c6                	cmp    esi,eax
c001e332:	74 10                	je     c001e344 <SATAPI::open(int, int, void*)+0x6c>
c001e334:	83 ec 0c             	sub    esp,0xc
c001e337:	68 d8 2f 02 c0       	push   0xc0022fd8
c001e33c:	e8 60 30 ff ff       	call   c00113a1 <KePanic(char const*)>
c001e341:	83 c4 10             	add    esp,0x10
c001e344:	83 ec 0c             	sub    esp,0xc
c001e347:	6a 02                	push   0x2
c001e349:	e8 bf b2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e34e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e354:	6a 03                	push   0x3
c001e356:	50                   	push   eax
c001e357:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e35d:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e363:	e8 b8 b9 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e368:	83 c4 14             	add    esp,0x14
c001e36b:	68 78 01 00 00       	push   0x178
c001e370:	e8 41 97 fe ff       	call   c0007ab6 <malloc>
c001e375:	83 c4 0c             	add    esp,0xc
c001e378:	89 c6                	mov    esi,eax
c001e37a:	6a 00                	push   0x0
c001e37c:	68 ff ff ff 7f       	push   0x7fffffff
c001e381:	6a 00                	push   0x0
c001e383:	6a 00                	push   0x0
c001e385:	53                   	push   ebx
c001e386:	68 ee 2f 02 c0       	push   0xc0022fee
c001e38b:	50                   	push   eax
c001e38c:	e8 87 f5 fe ff       	call   c000d918 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e391:	83 c4 14             	add    esp,0x14
c001e394:	56                   	push   esi
c001e395:	e8 3e f6 fe ff       	call   c000d9d8 <LogicalDisk::assignDriveLetter()>
c001e39a:	5a                   	pop    edx
c001e39b:	0f be c0             	movsx  eax,al
c001e39e:	59                   	pop    ecx
c001e39f:	50                   	push   eax
c001e3a0:	68 40 2e 02 c0       	push   0xc0022e40
c001e3a5:	e8 9b c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e3aa:	58                   	pop    eax
c001e3ab:	5a                   	pop    edx
c001e3ac:	56                   	push   esi
c001e3ad:	53                   	push   ebx
c001e3ae:	e8 bf e3 fe ff       	call   c000c772 <Device::addChild(Device*)>
c001e3b3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e3b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3bc:	e8 e5 e7 fe ff       	call   c000cba6 <PhysicalDisk::startCache()>
c001e3c1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e3c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3cb:	e8 b2 fe ff ff       	call   c001e282 <SATAPI::detectMedia()>
c001e3d0:	83 c4 14             	add    esp,0x14
c001e3d3:	31 c0                	xor    eax,eax
c001e3d5:	5b                   	pop    ebx
c001e3d6:	5e                   	pop    esi
c001e3d7:	c3                   	ret    

c001e3d8 <SATAPI::read(unsigned long long, int, void*)>:
c001e3d8:	57                   	push   edi
c001e3d9:	56                   	push   esi
c001e3da:	53                   	push   ebx
c001e3db:	83 ec 30             	sub    esp,0x30
c001e3de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e3e2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e3e6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e3ea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e3ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3f6:	83 fe 04             	cmp    esi,0x4
c001e3f9:	7e 10                	jle    c001e40b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e3fb:	83 ec 0c             	sub    esp,0xc
c001e3fe:	68 fc 2f 02 c0       	push   0xc0022ffc
c001e403:	e8 99 2f ff ff       	call   c00113a1 <KePanic(char const*)>
c001e408:	83 c4 10             	add    esp,0x10
c001e40b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e411:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e417:	51                   	push   ecx
c001e418:	50                   	push   eax
c001e419:	83 c0 02             	add    eax,0x2
c001e41c:	c1 e0 07             	shl    eax,0x7
c001e41f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e425:	50                   	push   eax
c001e426:	52                   	push   edx
c001e427:	e8 8c e1 ff ff       	call   c001c5b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e42c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e430:	b9 03 00 00 00       	mov    ecx,0x3
c001e435:	fc                   	cld    
c001e436:	31 c0                	xor    eax,eax
c001e438:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e43a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e43f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e444:	83 c4 0c             	add    esp,0xc
c001e447:	6a 00                	push   0x0
c001e449:	6a 00                	push   0x0
c001e44b:	6a 00                	push   0x0
c001e44d:	6a 00                	push   0x0
c001e44f:	6a 02                	push   0x2
c001e451:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e455:	50                   	push   eax
c001e456:	53                   	push   ebx
c001e457:	e8 0c fb ff ff       	call   c001df68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e45c:	83 c4 20             	add    esp,0x20
c001e45f:	85 c0                	test   eax,eax
c001e461:	75 44                	jne    c001e4a7 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e463:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e467:	b9 03 00 00 00       	mov    ecx,0x3
c001e46c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e46e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e472:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e477:	0f c8                	bswap  eax
c001e479:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e47d:	89 f0                	mov    eax,esi
c001e47f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e483:	50                   	push   eax
c001e484:	56                   	push   esi
c001e485:	c1 e6 0b             	shl    esi,0xb
c001e488:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e48c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e490:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e494:	56                   	push   esi
c001e495:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e499:	50                   	push   eax
c001e49a:	53                   	push   ebx
c001e49b:	e8 c8 fa ff ff       	call   c001df68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e4a0:	83 c4 20             	add    esp,0x20
c001e4a3:	85 c0                	test   eax,eax
c001e4a5:	74 14                	je     c001e4bb <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e4a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e4ab:	83 ec 0c             	sub    esp,0xc
c001e4ae:	53                   	push   ebx
c001e4af:	e8 ce fd ff ff       	call   c001e282 <SATAPI::detectMedia()>
c001e4b4:	83 c4 10             	add    esp,0x10
c001e4b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4bb:	83 c4 30             	add    esp,0x30
c001e4be:	5b                   	pop    ebx
c001e4bf:	5e                   	pop    esi
c001e4c0:	5f                   	pop    edi
c001e4c1:	c3                   	ret    

c001e4c2 <IOAPIC::close(int, int, void*)>:
c001e4c2:	b8 00 00 00 00       	mov    eax,0x0
c001e4c7:	c3                   	ret    

c001e4c8 <apicGetBase()>:
c001e4c8:	55                   	push   ebp
c001e4c9:	89 e5                	mov    ebp,esp
c001e4cb:	83 ec 18             	sub    esp,0x18
c001e4ce:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4d3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e4d9:	83 e0 08             	and    eax,0x8
c001e4dc:	0f b6 c0             	movzx  eax,al
c001e4df:	85 c0                	test   eax,eax
c001e4e1:	75 07                	jne    c001e4ea <apicGetBase()+0x22>
c001e4e3:	b8 00 00 00 00       	mov    eax,0x0
c001e4e8:	eb 21                	jmp    c001e50b <apicGetBase()+0x43>
c001e4ea:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4ef:	83 ec 08             	sub    esp,0x8
c001e4f2:	6a 1b                	push   0x1b
c001e4f4:	50                   	push   eax
c001e4f5:	e8 c6 8b fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e4fa:	83 c4 10             	add    esp,0x10
c001e4fd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e500:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e503:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e506:	25 00 00 ff ff       	and    eax,0xffff0000
c001e50b:	c9                   	leave  
c001e50c:	c3                   	ret    
c001e50d:	90                   	nop

c001e50e <IOAPIC::IOAPIC()>:
c001e50e:	83 ec 0c             	sub    esp,0xc
c001e511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e515:	83 ec 08             	sub    esp,0x8
c001e518:	68 60 30 02 c0       	push   0xc0023060
c001e51d:	50                   	push   eax
c001e51e:	e8 e7 e3 fe ff       	call   c000c90a <Device::Device(char const*)>
c001e523:	83 c4 10             	add    esp,0x10
c001e526:	ba 70 30 02 c0       	mov    edx,0xc0023070
c001e52b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e52f:	89 10                	mov    DWORD PTR [eax],edx
c001e531:	90                   	nop
c001e532:	83 c4 0c             	add    esp,0xc
c001e535:	c3                   	ret    

c001e536 <apicOpen()>:
c001e536:	55                   	push   ebp
c001e537:	89 e5                	mov    ebp,esp
c001e539:	53                   	push   ebx
c001e53a:	83 ec 34             	sub    esp,0x34
c001e53d:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e542:	83 f0 01             	xor    eax,0x1
c001e545:	0f b6 c0             	movzx  eax,al
c001e548:	85 c0                	test   eax,eax
c001e54a:	0f 84 a3 00 00 00    	je     c001e5f3 <apicOpen()+0xbd>
c001e550:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e554:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e559:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e55d:	0f b6 c0             	movzx  eax,al
c001e560:	39 c2                	cmp    edx,eax
c001e562:	0f 83 84 00 00 00    	jae    c001e5ec <apicOpen()+0xb6>
c001e568:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e56f:	83 ec 0c             	sub    esp,0xc
c001e572:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e575:	e8 3c 95 fe ff       	call   c0007ab6 <malloc>
c001e57a:	83 c4 10             	add    esp,0x10
c001e57d:	89 c3                	mov    ebx,eax
c001e57f:	83 ec 0c             	sub    esp,0xc
c001e582:	53                   	push   ebx
c001e583:	e8 86 ff ff ff       	call   c001e50e <IOAPIC::IOAPIC()>
c001e588:	83 c4 10             	add    esp,0x10
c001e58b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e58e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e592:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e595:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e59c:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e5a1:	83 c0 01             	add    eax,0x1
c001e5a4:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e5a9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e5ae:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e5b4:	83 ec 08             	sub    esp,0x8
c001e5b7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5ba:	50                   	push   eax
c001e5bb:	e8 b2 e1 fe ff       	call   c000c772 <Device::addChild(Device*)>
c001e5c0:	83 c4 10             	add    esp,0x10
c001e5c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e5c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5c8:	83 c0 08             	add    eax,0x8
c001e5cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5cd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e5d1:	6a 00                	push   0x0
c001e5d3:	6a 00                	push   0x0
c001e5d5:	52                   	push   edx
c001e5d6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e5d9:	ff d0                	call   eax
c001e5db:	83 c4 10             	add    esp,0x10
c001e5de:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e5e1:	83 c0 01             	add    eax,0x1
c001e5e4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e5e7:	e9 68 ff ff ff       	jmp    c001e554 <apicOpen()+0x1e>
c001e5ec:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e5f3:	e8 d0 fe ff ff       	call   c001e4c8 <apicGetBase()>
c001e5f8:	05 f0 00 00 00       	add    eax,0xf0
c001e5fd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e600:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e603:	8b 00                	mov    eax,DWORD PTR [eax]
c001e605:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e608:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e60f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e616:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e619:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e61c:	89 10                	mov    DWORD PTR [eax],edx
c001e61e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e625:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e62a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e62d:	7d 7c                	jge    c001e6ab <apicOpen()+0x175>
c001e62f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e632:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e639:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e63c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e63f:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e646:	c1 e8 08             	shr    eax,0x8
c001e649:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e64d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e650:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e657:	c1 e8 18             	shr    eax,0x18
c001e65a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e65d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e661:	3d ff 00 00 00       	cmp    eax,0xff
c001e666:	75 3a                	jne    c001e6a2 <apicOpen()+0x16c>
c001e668:	e8 5b fe ff ff       	call   c001e4c8 <apicGetBase()>
c001e66d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e671:	83 fa 01             	cmp    edx,0x1
c001e674:	75 07                	jne    c001e67d <apicOpen()+0x147>
c001e676:	ba 60 03 00 00       	mov    edx,0x360
c001e67b:	eb 05                	jmp    c001e682 <apicOpen()+0x14c>
c001e67d:	ba 50 03 00 00       	mov    edx,0x350
c001e682:	01 d0                	add    eax,edx
c001e684:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e687:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e68a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e68c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e68f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e696:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e69a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e69d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e6a0:	89 10                	mov    DWORD PTR [eax],edx
c001e6a2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e6a6:	e9 7a ff ff ff       	jmp    c001e625 <apicOpen()+0xef>
c001e6ab:	90                   	nop
c001e6ac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e6af:	c9                   	leave  
c001e6b0:	c3                   	ret    
c001e6b1:	90                   	nop

c001e6b2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e6b2:	55                   	push   ebp
c001e6b3:	89 e5                	mov    ebp,esp
c001e6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e6be:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6c1:	72 1d                	jb     c001e6e0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6c6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e6cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6cf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e6d5:	01 d0                	add    eax,edx
c001e6d7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e6da:	73 04                	jae    c001e6e0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e6dc:	b0 01                	mov    al,0x1
c001e6de:	eb 02                	jmp    c001e6e2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e6e0:	b0 00                	mov    al,0x0
c001e6e2:	5d                   	pop    ebp
c001e6e3:	c3                   	ret    

c001e6e4 <IOAPIC::read(int)>:
c001e6e4:	55                   	push   ebp
c001e6e5:	89 e5                	mov    ebp,esp
c001e6e7:	83 ec 10             	sub    esp,0x10
c001e6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6f3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6f9:	0f b6 d0             	movzx  edx,al
c001e6fc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6ff:	89 10                	mov    DWORD PTR [eax],edx
c001e701:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e704:	83 c0 10             	add    eax,0x10
c001e707:	8b 00                	mov    eax,DWORD PTR [eax]
c001e709:	c9                   	leave  
c001e70a:	c3                   	ret    
c001e70b:	90                   	nop

c001e70c <IOAPIC::open(int, int, void*)>:
c001e70c:	55                   	push   ebp
c001e70d:	89 e5                	mov    ebp,esp
c001e70f:	57                   	push   edi
c001e710:	56                   	push   esi
c001e711:	53                   	push   ebx
c001e712:	83 ec 04             	sub    esp,0x4
c001e715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e718:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e71b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e724:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e72a:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e734:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e73a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e73d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e743:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e74a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e74d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e756:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e75c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e75f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e765:	0f b6 f0             	movzx  esi,al
c001e768:	89 d0                	mov    eax,edx
c001e76a:	ba 00 00 00 00       	mov    edx,0x0
c001e76f:	89 c7                	mov    edi,eax
c001e771:	83 e7 ff             	and    edi,0xffffffff
c001e774:	89 f9                	mov    ecx,edi
c001e776:	0f b6 da             	movzx  ebx,dl
c001e779:	89 c8                	mov    eax,ecx
c001e77b:	89 da                	mov    edx,ebx
c001e77d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e780:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e783:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e787:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e78b:	83 e0 00             	and    eax,0x0
c001e78e:	09 d0                	or     eax,edx
c001e790:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e797:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e79d:	8d 50 01             	lea    edx,[eax+0x1]
c001e7a0:	88 d1                	mov    cl,dl
c001e7a2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e7a5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e7ab:	0f b6 d0             	movzx  edx,al
c001e7ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7b1:	83 c2 08             	add    edx,0x8
c001e7b4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e7b8:	0f b6 c9             	movzx  ecx,cl
c001e7bb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e7c1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e7c5:	6a 01                	push   0x1
c001e7c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7ca:	e8 15 ff ff ff       	call   c001e6e4 <IOAPIC::read(int)>
c001e7cf:	83 c4 08             	add    esp,0x8
c001e7d2:	c1 f8 10             	sar    eax,0x10
c001e7d5:	0f b6 c0             	movzx  eax,al
c001e7d8:	8d 50 01             	lea    edx,[eax+0x1]
c001e7db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7de:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e7e4:	b8 00 00 00 00       	mov    eax,0x0
c001e7e9:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e7ec:	5b                   	pop    ebx
c001e7ed:	5e                   	pop    esi
c001e7ee:	5f                   	pop    edi
c001e7ef:	5d                   	pop    ebp
c001e7f0:	c3                   	ret    
c001e7f1:	90                   	nop

c001e7f2 <IOAPIC::write(int, int)>:
c001e7f2:	55                   	push   ebp
c001e7f3:	89 e5                	mov    ebp,esp
c001e7f5:	83 ec 10             	sub    esp,0x10
c001e7f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7fb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e801:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e804:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e807:	0f b6 d0             	movzx  edx,al
c001e80a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e80d:	89 10                	mov    DWORD PTR [eax],edx
c001e80f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e812:	8d 50 10             	lea    edx,[eax+0x10]
c001e815:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e818:	89 02                	mov    DWORD PTR [edx],eax
c001e81a:	90                   	nop
c001e81b:	c9                   	leave  
c001e81c:	c3                   	ret    
c001e81d:	90                   	nop

c001e81e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e81e:	55                   	push   ebp
c001e81f:	89 e5                	mov    ebp,esp
c001e821:	53                   	push   ebx
c001e822:	83 ec 2c             	sub    esp,0x2c
c001e825:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e828:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e82b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e82e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e831:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e834:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e837:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e83a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e83d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e840:	88 d8                	mov    al,bl
c001e842:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e845:	88 c8                	mov    al,cl
c001e847:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e84a:	88 d0                	mov    al,dl
c001e84c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e84f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e853:	83 c0 08             	add    eax,0x8
c001e856:	01 c0                	add    eax,eax
c001e858:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e85b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e85f:	83 c0 08             	add    eax,0x8
c001e862:	01 c0                	add    eax,eax
c001e864:	83 c0 01             	add    eax,0x1
c001e867:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e86a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e86d:	50                   	push   eax
c001e86e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e871:	e8 6e fe ff ff       	call   c001e6e4 <IOAPIC::read(int)>
c001e876:	83 c4 08             	add    esp,0x8
c001e879:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e87c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e883:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e886:	c1 e0 18             	shl    eax,0x18
c001e889:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e88c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e88f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e892:	52                   	push   edx
c001e893:	50                   	push   eax
c001e894:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e897:	e8 56 ff ff ff       	call   c001e7f2 <IOAPIC::write(int, int)>
c001e89c:	83 c4 0c             	add    esp,0xc
c001e89f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8a2:	50                   	push   eax
c001e8a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8a6:	e8 39 fe ff ff       	call   c001e6e4 <IOAPIC::read(int)>
c001e8ab:	83 c4 08             	add    esp,0x8
c001e8ae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e8b1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e8b8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e8bf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e8c6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e8ca:	85 c0                	test   eax,eax
c001e8cc:	74 09                	je     c001e8d7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e8ce:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e8d5:	eb 07                	jmp    c001e8de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e8d7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e8de:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e8e2:	85 c0                	test   eax,eax
c001e8e4:	74 09                	je     c001e8ef <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e8e6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e8ed:	eb 07                	jmp    c001e8f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e8ef:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e8f6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e8fd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e901:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e904:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e907:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e90a:	52                   	push   edx
c001e90b:	50                   	push   eax
c001e90c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e90f:	e8 de fe ff ff       	call   c001e7f2 <IOAPIC::write(int, int)>
c001e914:	83 c4 0c             	add    esp,0xc
c001e917:	90                   	nop
c001e918:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e91b:	c9                   	leave  
c001e91c:	c3                   	ret    
c001e91d:	66 90                	xchg   ax,ax
c001e91f:	90                   	nop

c001e920 <APICTimer::close(int, int, void*)>:
c001e920:	b8 00 00 00 00       	mov    eax,0x0
c001e925:	c3                   	ret    
c001e926:	66 90                	xchg   ax,ax

c001e928 <apicTimerHandler(regs*, void*)>:
c001e928:	83 ec 0c             	sub    esp,0xc
c001e92b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e92f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e931:	b8 10 27 00 00       	mov    eax,0x2710
c001e936:	ba 00 00 00 00       	mov    edx,0x0
c001e93b:	f7 f1                	div    ecx
c001e93d:	83 ec 0c             	sub    esp,0xc
c001e940:	50                   	push   eax
c001e941:	e8 8e f8 fe ff       	call   c000e1d4 <timerHandler(unsigned int)>
c001e946:	83 c4 10             	add    esp,0x10
c001e949:	90                   	nop
c001e94a:	83 c4 0c             	add    esp,0xc
c001e94d:	c3                   	ret    
c001e94e:	66 90                	xchg   ax,ax

c001e950 <APICTimer::open(int, int, void*)>:
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e957:	8b 00                	mov    eax,DWORD PTR [eax]
c001e959:	83 c0 24             	add    eax,0x24
c001e95c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e95e:	83 ec 08             	sub    esp,0x8
c001e961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e969:	ff d0                	call   eax
c001e96b:	83 c4 10             	add    esp,0x10
c001e96e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e972:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e976:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e980:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e984:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e98a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e98e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e994:	83 ec 0c             	sub    esp,0xc
c001e997:	51                   	push   ecx
c001e998:	6a 01                	push   0x1
c001e99a:	68 28 e9 01 c0       	push   0xc001e928
c001e99f:	52                   	push   edx
c001e9a0:	50                   	push   eax
c001e9a1:	e8 78 dd fe ff       	call   c000c71e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9a6:	83 c4 20             	add    esp,0x20
c001e9a9:	89 c2                	mov    edx,eax
c001e9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9af:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e9b5:	b8 00 00 00 00       	mov    eax,0x0
c001e9ba:	83 c4 0c             	add    esp,0xc
c001e9bd:	c3                   	ret    
c001e9be:	66 90                	xchg   ax,ax

c001e9c0 <APICTimer::write(int)>:
c001e9c0:	83 ec 0c             	sub    esp,0xc
c001e9c3:	83 ec 0c             	sub    esp,0xc
c001e9c6:	68 94 30 02 c0       	push   0xc0023094
c001e9cb:	e8 d1 29 ff ff       	call   c00113a1 <KePanic(char const*)>
c001e9d0:	83 c4 10             	add    esp,0x10
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e9e1:	90                   	nop
c001e9e2:	83 c4 0c             	add    esp,0xc
c001e9e5:	c3                   	ret    
c001e9e6:	66 90                	xchg   ax,ax

c001e9e8 <APICTimer::APICTimer()>:
c001e9e8:	83 ec 0c             	sub    esp,0xc
c001e9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ef:	83 ec 08             	sub    esp,0x8
c001e9f2:	68 a4 30 02 c0       	push   0xc00230a4
c001e9f7:	50                   	push   eax
c001e9f8:	e8 0b f7 fe ff       	call   c000e108 <Timer::Timer(char const*)>
c001e9fd:	83 c4 10             	add    esp,0x10
c001ea00:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c001ea05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea09:	89 10                	mov    DWORD PTR [eax],edx
c001ea0b:	90                   	nop
c001ea0c:	83 c4 0c             	add    esp,0xc
c001ea0f:	c3                   	ret    

c001ea10 <PIT::write(int)>:
c001ea10:	83 ec 10             	sub    esp,0x10
c001ea13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ea21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea25:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001ea2a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ea2f:	89 c2                	mov    edx,eax
c001ea31:	c1 fa 1f             	sar    edx,0x1f
c001ea34:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ea38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea3c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ea43:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ea48:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ea4c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ea51:	ee                   	out    dx,al
c001ea52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea56:	0f b6 c0             	movzx  eax,al
c001ea59:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ea60:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ea64:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ea68:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ea6d:	ee                   	out    dx,al
c001ea6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea72:	c1 f8 08             	sar    eax,0x8
c001ea75:	0f b6 c0             	movzx  eax,al
c001ea78:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ea7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ea83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ea87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ea8c:	ee                   	out    dx,al
c001ea8d:	90                   	nop
c001ea8e:	83 c4 10             	add    esp,0x10
c001ea91:	c3                   	ret    
c001ea92:	66 90                	xchg   ax,ax

c001ea94 <pitHandler(regs*, void*)>:
c001ea94:	83 ec 0c             	sub    esp,0xc
c001ea97:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001ea9d:	b8 10 27 00 00       	mov    eax,0x2710
c001eaa2:	89 c2                	mov    edx,eax
c001eaa4:	c1 fa 1f             	sar    edx,0x1f
c001eaa7:	f7 f9                	idiv   ecx
c001eaa9:	83 ec 0c             	sub    esp,0xc
c001eaac:	50                   	push   eax
c001eaad:	e8 22 f7 fe ff       	call   c000e1d4 <timerHandler(unsigned int)>
c001eab2:	83 c4 10             	add    esp,0x10
c001eab5:	90                   	nop
c001eab6:	83 c4 0c             	add    esp,0xc
c001eab9:	c3                   	ret    
c001eaba:	66 90                	xchg   ax,ax

c001eabc <PIT::open(int, int, void*)>:
c001eabc:	83 ec 0c             	sub    esp,0xc
c001eabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac5:	83 c0 24             	add    eax,0x24
c001eac8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaca:	83 ec 08             	sub    esp,0x8
c001eacd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead5:	ff d0                	call   eax
c001ead7:	83 c4 10             	add    esp,0x10
c001eada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eade:	83 ec 0c             	sub    esp,0xc
c001eae1:	6a 00                	push   0x0
c001eae3:	6a 01                	push   0x1
c001eae5:	68 94 ea 01 c0       	push   0xc001ea94
c001eaea:	6a 00                	push   0x0
c001eaec:	50                   	push   eax
c001eaed:	e8 2c dc fe ff       	call   c000c71e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eaf2:	83 c4 20             	add    esp,0x20
c001eaf5:	89 c2                	mov    edx,eax
c001eaf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eb01:	b8 00 00 00 00       	mov    eax,0x0
c001eb06:	83 c4 0c             	add    esp,0xc
c001eb09:	c3                   	ret    
c001eb0a:	66 90                	xchg   ax,ax

c001eb0c <PIT::close(int, int, void*)>:
c001eb0c:	83 ec 0c             	sub    esp,0xc
c001eb0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb13:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb21:	6a 01                	push   0x1
c001eb23:	68 94 ea 01 c0       	push   0xc001ea94
c001eb28:	6a 00                	push   0x0
c001eb2a:	50                   	push   eax
c001eb2b:	e8 24 dc fe ff       	call   c000c754 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eb30:	83 c4 10             	add    esp,0x10
c001eb33:	b8 00 00 00 00       	mov    eax,0x0
c001eb38:	83 c4 0c             	add    esp,0xc
c001eb3b:	c3                   	ret    

c001eb3c <PIT::PIT()>:
c001eb3c:	83 ec 0c             	sub    esp,0xc
c001eb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb43:	83 ec 08             	sub    esp,0x8
c001eb46:	68 e0 30 02 c0       	push   0xc00230e0
c001eb4b:	50                   	push   eax
c001eb4c:	e8 b7 f5 fe ff       	call   c000e108 <Timer::Timer(char const*)>
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	ba 08 31 02 c0       	mov    edx,0xc0023108
c001eb59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5d:	89 10                	mov    DWORD PTR [eax],edx
c001eb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb69:	0f b6 d0             	movzx  edx,al
c001eb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb70:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb7b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb81:	0f b6 d0             	movzx  edx,al
c001eb84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb88:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb91:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eb97:	8d 50 01             	lea    edx,[eax+0x1]
c001eb9a:	88 d1                	mov    cl,dl
c001eb9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eba0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001eba6:	0f b6 d0             	movzx  edx,al
c001eba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ebb1:	83 e1 3f             	and    ecx,0x3f
c001ebb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ebb8:	90                   	nop
c001ebb9:	83 c4 0c             	add    esp,0xc
c001ebbc:	c3                   	ret    
c001ebbd:	66 90                	xchg   ax,ax
c001ebbf:	90                   	nop

c001ebc0 <avxDetect>:
c001ebc0:	b8 01 00 00 00       	mov    eax,0x1
c001ebc5:	0f a2                	cpuid  
c001ebc7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ebcd:	74 15                	je     c001ebe4 <avxDetect.noAVX>
c001ebcf:	b8 01 00 00 00       	mov    eax,0x1
c001ebd4:	0f a2                	cpuid  
c001ebd6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ebdc:	74 06                	je     c001ebe4 <avxDetect.noAVX>
c001ebde:	b8 01 00 00 00       	mov    eax,0x1
c001ebe3:	c3                   	ret    

c001ebe4 <avxDetect.noAVX>:
c001ebe4:	b8 00 00 00 00       	mov    eax,0x0
c001ebe9:	c3                   	ret    

c001ebea <avxSave>:
c001ebea:	53                   	push   ebx
c001ebeb:	52                   	push   edx
c001ebec:	31 c0                	xor    eax,eax
c001ebee:	48                   	dec    eax
c001ebef:	89 c2                	mov    edx,eax
c001ebf1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebf5:	0f ae 23             	xsave  [ebx]
c001ebf8:	5a                   	pop    edx
c001ebf9:	5b                   	pop    ebx
c001ebfa:	c3                   	ret    

c001ebfb <avxLoad>:
c001ebfb:	53                   	push   ebx
c001ebfc:	52                   	push   edx
c001ebfd:	31 c0                	xor    eax,eax
c001ebff:	48                   	dec    eax
c001ec00:	89 c2                	mov    edx,eax
c001ec02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec06:	0f ae 2b             	xrstor [ebx]
c001ec09:	5a                   	pop    edx
c001ec0a:	5b                   	pop    ebx
c001ec0b:	c3                   	ret    

c001ec0c <avxInit>:
c001ec0c:	e8 67 03 00 00       	call   c001ef78 <sseInit>
c001ec11:	50                   	push   eax
c001ec12:	51                   	push   ecx
c001ec13:	0f 20 e0             	mov    eax,cr4
c001ec16:	0d 00 00 04 00       	or     eax,0x40000
c001ec1b:	0f 22 e0             	mov    cr4,eax
c001ec1e:	31 c9                	xor    ecx,ecx
c001ec20:	0f 01 d0             	xgetbv 
c001ec23:	0d 07 00 00 00       	or     eax,0x7
c001ec28:	0f 01 d1             	xsetbv 
c001ec2b:	59                   	pop    ecx
c001ec2c:	58                   	pop    eax
c001ec2d:	c3                   	ret    

c001ec2e <avxClose>:
c001ec2e:	c3                   	ret    

c001ec2f <wouldSheSayYes>:
c001ec2f:	c3                   	ret    
c001ec30:	49                   	dec    ecx
c001ec31:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ec35:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ec39:	75 20                	jne    c001ec5b <isr0+0xb>
c001ec3b:	4e                   	dec    esi
c001ec3c:	79 61                	jns    c001ec9f <isr7+0x3>
c001ec3e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ec43:	66 90                	xchg   ax,ax
c001ec45:	66 90                	xchg   ax,ax
c001ec47:	66 90                	xchg   ax,ax
c001ec49:	66 90                	xchg   ax,ax
c001ec4b:	66 90                	xchg   ax,ax
c001ec4d:	66 90                	xchg   ax,ax
c001ec4f:	90                   	nop

c001ec50 <isr0>:
c001ec50:	fa                   	cli    
c001ec51:	68 00 00 00 00       	push   0x0
c001ec56:	68 00 00 00 00       	push   0x0
c001ec5b:	e9 56 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec60 <isr1>:
c001ec60:	fa                   	cli    
c001ec61:	6a 00                	push   0x0
c001ec63:	6a 01                	push   0x1
c001ec65:	e9 4c 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec6a <isr2>:
c001ec6a:	fa                   	cli    
c001ec6b:	6a 00                	push   0x0
c001ec6d:	6a 02                	push   0x2
c001ec6f:	e9 42 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec74 <isr3>:
c001ec74:	fa                   	cli    
c001ec75:	6a 00                	push   0x0
c001ec77:	6a 03                	push   0x3
c001ec79:	e9 38 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec7e <isr4>:
c001ec7e:	fa                   	cli    
c001ec7f:	6a 00                	push   0x0
c001ec81:	6a 04                	push   0x4
c001ec83:	e9 2e 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec88 <isr5>:
c001ec88:	fa                   	cli    
c001ec89:	6a 00                	push   0x0
c001ec8b:	6a 05                	push   0x5
c001ec8d:	e9 24 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec92 <isr6>:
c001ec92:	fa                   	cli    
c001ec93:	6a 00                	push   0x0
c001ec95:	6a 06                	push   0x6
c001ec97:	e9 1a 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ec9c <isr7>:
c001ec9c:	fa                   	cli    
c001ec9d:	6a 00                	push   0x0
c001ec9f:	6a 07                	push   0x7
c001eca1:	e9 10 01 00 00       	jmp    c001edb6 <int_common_stub>

c001eca6 <isr8>:
c001eca6:	fa                   	cli    
c001eca7:	6a 08                	push   0x8
c001eca9:	e9 08 01 00 00       	jmp    c001edb6 <int_common_stub>

c001ecae <isr9>:
c001ecae:	fa                   	cli    
c001ecaf:	6a 00                	push   0x0
c001ecb1:	6a 09                	push   0x9
c001ecb3:	e9 fe 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecb8 <isr10>:
c001ecb8:	fa                   	cli    
c001ecb9:	6a 0a                	push   0xa
c001ecbb:	e9 f6 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecc0 <isr11>:
c001ecc0:	fa                   	cli    
c001ecc1:	6a 0b                	push   0xb
c001ecc3:	e9 ee 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecc8 <isr12>:
c001ecc8:	fa                   	cli    
c001ecc9:	6a 0c                	push   0xc
c001eccb:	e9 e6 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecd0 <isr13>:
c001ecd0:	fa                   	cli    
c001ecd1:	6a 0d                	push   0xd
c001ecd3:	53                   	push   ebx
c001ecd4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ecd8:	81 fb a6 ee 01 c0    	cmp    ebx,0xc001eea6
c001ecde:	5b                   	pop    ebx
c001ecdf:	0f 84 c3 01 00 00    	je     c001eea8 <finishSignal2>
c001ece5:	e9 cc 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecea <isr14>:
c001ecea:	fa                   	cli    
c001eceb:	6a 0e                	push   0xe
c001eced:	e9 c4 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecf2 <isr15>:
c001ecf2:	fa                   	cli    
c001ecf3:	6a 00                	push   0x0
c001ecf5:	6a 0f                	push   0xf
c001ecf7:	e9 ba 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ecfc <isr16>:
c001ecfc:	fa                   	cli    
c001ecfd:	6a 00                	push   0x0
c001ecff:	6a 10                	push   0x10
c001ed01:	e9 b0 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed06 <isr17>:
c001ed06:	fa                   	cli    
c001ed07:	6a 00                	push   0x0
c001ed09:	6a 11                	push   0x11
c001ed0b:	e9 a6 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed10 <isr18>:
c001ed10:	fa                   	cli    
c001ed11:	6a 00                	push   0x0
c001ed13:	6a 12                	push   0x12
c001ed15:	e9 9c 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed1a <irq3>:
c001ed1a:	fa                   	cli    
c001ed1b:	6a 00                	push   0x0
c001ed1d:	6a 23                	push   0x23
c001ed1f:	e9 92 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed24 <irq4>:
c001ed24:	fa                   	cli    
c001ed25:	6a 00                	push   0x0
c001ed27:	6a 24                	push   0x24
c001ed29:	e9 88 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed2e <irq5>:
c001ed2e:	fa                   	cli    
c001ed2f:	6a 00                	push   0x0
c001ed31:	6a 25                	push   0x25
c001ed33:	e9 7e 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed38 <irq6>:
c001ed38:	fa                   	cli    
c001ed39:	6a 00                	push   0x0
c001ed3b:	6a 26                	push   0x26
c001ed3d:	e9 74 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed42 <irq7>:
c001ed42:	fa                   	cli    
c001ed43:	6a 00                	push   0x0
c001ed45:	6a 27                	push   0x27
c001ed47:	e9 6a 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed4c <irq8>:
c001ed4c:	fa                   	cli    
c001ed4d:	6a 00                	push   0x0
c001ed4f:	6a 28                	push   0x28
c001ed51:	e9 60 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed56 <irq9>:
c001ed56:	fa                   	cli    
c001ed57:	6a 00                	push   0x0
c001ed59:	6a 29                	push   0x29
c001ed5b:	e9 56 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed60 <irq10>:
c001ed60:	fa                   	cli    
c001ed61:	6a 00                	push   0x0
c001ed63:	6a 2a                	push   0x2a
c001ed65:	e9 4c 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed6a <irq11>:
c001ed6a:	fa                   	cli    
c001ed6b:	6a 00                	push   0x0
c001ed6d:	6a 2b                	push   0x2b
c001ed6f:	e9 42 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed74 <irq12>:
c001ed74:	fa                   	cli    
c001ed75:	6a 00                	push   0x0
c001ed77:	6a 2c                	push   0x2c
c001ed79:	e9 38 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed7e <irq13>:
c001ed7e:	fa                   	cli    
c001ed7f:	6a 00                	push   0x0
c001ed81:	6a 2d                	push   0x2d
c001ed83:	e9 2e 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed88 <irq14>:
c001ed88:	fa                   	cli    
c001ed89:	6a 00                	push   0x0
c001ed8b:	6a 2e                	push   0x2e
c001ed8d:	e9 24 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed92 <irq15>:
c001ed92:	fa                   	cli    
c001ed93:	6a 00                	push   0x0
c001ed95:	6a 2f                	push   0x2f
c001ed97:	e9 1a 00 00 00       	jmp    c001edb6 <int_common_stub>

c001ed9c <irq1>:
c001ed9c:	fa                   	cli    
c001ed9d:	6a 00                	push   0x0
c001ed9f:	6a 21                	push   0x21
c001eda1:	eb 13                	jmp    c001edb6 <int_common_stub>

c001eda3 <irq2>:
c001eda3:	fa                   	cli    
c001eda4:	6a 00                	push   0x0
c001eda6:	6a 22                	push   0x22
c001eda8:	eb 0c                	jmp    c001edb6 <int_common_stub>

c001edaa <isr96>:
c001edaa:	6a 00                	push   0x0
c001edac:	6a 60                	push   0x60
c001edae:	fb                   	sti    
c001edaf:	eb 37                	jmp    c001ede8 <syscall_common_stub>

c001edb1 <irq0>:
c001edb1:	fa                   	cli    
c001edb2:	6a 00                	push   0x0
c001edb4:	6a 20                	push   0x20

c001edb6 <int_common_stub>:
c001edb6:	60                   	pusha  
c001edb7:	1e                   	push   ds
c001edb8:	06                   	push   es
c001edb9:	0f a0                	push   fs
c001edbb:	0f a8                	push   gs
c001edbd:	66 b8 10 00          	mov    ax,0x10
c001edc1:	66 8e d8             	mov    ds,ax
c001edc4:	66 8e c0             	mov    es,ax
c001edc7:	66 8e e0             	mov    fs,ax
c001edca:	66 8e e8             	mov    gs,ax
c001edcd:	54                   	push   esp
c001edce:	fc                   	cld    
c001edcf:	e8 48 de fe ff       	call   c000cc1c <int_handler>
c001edd4:	81 c4 04 00 00 00    	add    esp,0x4
c001edda:	0f a9                	pop    gs
c001eddc:	0f a1                	pop    fs
c001edde:	07                   	pop    es
c001eddf:	1f                   	pop    ds
c001ede0:	61                   	popa   
c001ede1:	81 c4 08 00 00 00    	add    esp,0x8
c001ede7:	cf                   	iret   

c001ede8 <syscall_common_stub>:
c001ede8:	60                   	pusha  
c001ede9:	1e                   	push   ds
c001edea:	06                   	push   es
c001edeb:	0f a0                	push   fs
c001eded:	0f a8                	push   gs
c001edef:	66 b8 10 00          	mov    ax,0x10
c001edf3:	66 8e d8             	mov    ds,ax
c001edf6:	66 8e c0             	mov    es,ax
c001edf9:	66 8e e0             	mov    fs,ax
c001edfc:	66 8e e8             	mov    gs,ax
c001edff:	54                   	push   esp
c001ee00:	fc                   	cld    
c001ee01:	e8 16 de fe ff       	call   c000cc1c <int_handler>
c001ee06:	81 c4 04 00 00 00    	add    esp,0x4
c001ee0c:	0f a9                	pop    gs
c001ee0e:	0f a1                	pop    fs
c001ee10:	07                   	pop    es
c001ee11:	1f                   	pop    ds
c001ee12:	e8 9f 2b ff ff       	call   c00119b6 <KiCheckSignalZ>
c001ee17:	3d 00 00 00 00       	cmp    eax,0x0
c001ee1c:	0f 84 c0 00 00 00    	je     c001eee2 <skipSignals>
c001ee22:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ee27:	61                   	popa   
c001ee28:	53                   	push   ebx
c001ee29:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ee2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ee32:	5b                   	pop    ebx
c001ee33:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ee38:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ee3b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ee3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ee41:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ee44:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ee47:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ee4a:	81 c4 08 00 00 00    	add    esp,0x8
c001ee50:	5e                   	pop    esi
c001ee51:	5b                   	pop    ebx
c001ee52:	59                   	pop    ecx
c001ee53:	5a                   	pop    edx
c001ee54:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ee57:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ee5a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ee5d:	52                   	push   edx
c001ee5e:	51                   	push   ecx
c001ee5f:	53                   	push   ebx
c001ee60:	56                   	push   esi
c001ee61:	81 ec 08 00 00 00    	sub    esp,0x8
c001ee67:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ee6a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ee6d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ee70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ee73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ee76:	60                   	pusha  
c001ee77:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ee7d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ee80:	89 e3                	mov    ebx,esp
c001ee82:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ee85:	52                   	push   edx
c001ee86:	68 a6 ee 01 c0       	push   0xc001eea6
c001ee8b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ee8e:	89 dc                	mov    esp,ebx
c001ee90:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ee93:	68 23 00 00 00       	push   0x23
c001ee98:	51                   	push   ecx
c001ee99:	68 02 02 00 00       	push   0x202
c001ee9e:	68 1b 00 00 00       	push   0x1b
c001eea3:	ff 36                	push   DWORD PTR [esi]
c001eea5:	cf                   	iret   

c001eea6 <finishSignal>:
c001eea6:	cd 0f                	int    0xf

c001eea8 <finishSignal2>:
c001eea8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001eeae:	e8 80 2b ff ff       	call   c0011a33 <KiFinishSignalZ>
c001eeb3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001eeb9:	68 23 00 00 00       	push   0x23
c001eebe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001eec1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001eec4:	68 1b 00 00 00       	push   0x1b
c001eec9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001eecc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eecf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001eed2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001eed5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001eed8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001eedb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001eede:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001eee1:	cf                   	iret   

c001eee2 <skipSignals>:
c001eee2:	61                   	popa   
c001eee3:	81 c4 08 00 00 00    	add    esp,0x8
c001eee9:	cf                   	iret   
c001eeea:	90                   	nop
c001eeeb:	90                   	nop

c001eeec <irq16>:
c001eeec:	fa                   	cli    
c001eeed:	6a 00                	push   0x0
c001eeef:	6a 30                	push   0x30
c001eef1:	e9 c0 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001eef6 <irq17>:
c001eef6:	fa                   	cli    
c001eef7:	6a 00                	push   0x0
c001eef9:	6a 31                	push   0x31
c001eefb:	e9 b6 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef00 <irq18>:
c001ef00:	fa                   	cli    
c001ef01:	6a 00                	push   0x0
c001ef03:	6a 32                	push   0x32
c001ef05:	e9 ac fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef0a <irq19>:
c001ef0a:	fa                   	cli    
c001ef0b:	6a 00                	push   0x0
c001ef0d:	6a 33                	push   0x33
c001ef0f:	e9 a2 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef14 <irq20>:
c001ef14:	fa                   	cli    
c001ef15:	6a 00                	push   0x0
c001ef17:	6a 34                	push   0x34
c001ef19:	e9 98 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef1e <irq21>:
c001ef1e:	fa                   	cli    
c001ef1f:	6a 00                	push   0x0
c001ef21:	6a 35                	push   0x35
c001ef23:	e9 8e fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef28 <irq22>:
c001ef28:	fa                   	cli    
c001ef29:	6a 00                	push   0x0
c001ef2b:	6a 36                	push   0x36
c001ef2d:	e9 84 fe ff ff       	jmp    c001edb6 <int_common_stub>

c001ef32 <irq23>:
c001ef32:	fa                   	cli    
c001ef33:	6a 00                	push   0x0
c001ef35:	6a 37                	push   0x37
c001ef37:	e9 7a fe ff ff       	jmp    c001edb6 <int_common_stub>
c001ef3c:	66 90                	xchg   ax,ax
c001ef3e:	66 90                	xchg   ax,ax

c001ef40 <i386GetRDRAND>:
c001ef40:	b9 64 00 00 00       	mov    ecx,0x64

c001ef45 <retry>:
c001ef45:	0f c7 f0             	rdrand eax
c001ef48:	72 05                	jb     c001ef4f <retry.done>
c001ef4a:	e2 f9                	loop   c001ef45 <retry>

c001ef4c <retry.fail>:
c001ef4c:	31 c0                	xor    eax,eax
c001ef4e:	c3                   	ret    

c001ef4f <retry.done>:
c001ef4f:	c3                   	ret    

c001ef50 <absolutelyNoChanceInHell>:
c001ef50:	b8 01 00 00 00       	mov    eax,0x1
c001ef55:	0f a2                	cpuid  
c001ef57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ef5d:	74 06                	je     c001ef65 <sseDetect.noSSE>
c001ef5f:	b8 01 00 00 00       	mov    eax,0x1
c001ef64:	c3                   	ret    

c001ef65 <sseDetect.noSSE>:
c001ef65:	31 c0                	xor    eax,eax
c001ef67:	c3                   	ret    

c001ef68 <sseSave>:
c001ef68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6c:	0f ae 00             	fxsave [eax]
c001ef6f:	c3                   	ret    

c001ef70 <sseLoad>:
c001ef70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef74:	0f ae 08             	fxrstor [eax]
c001ef77:	c3                   	ret    

c001ef78 <sseInit>:
c001ef78:	e8 42 00 00 00       	call   c001efbf <x87Init>
c001ef7d:	0f 20 e0             	mov    eax,cr4
c001ef80:	66 0d 00 06          	or     ax,0x600
c001ef84:	0f 22 e0             	mov    cr4,eax
c001ef87:	c3                   	ret    

c001ef88 <sseClose>:
c001ef88:	c3                   	ret    
c001ef89:	66 90                	xchg   ax,ax
c001ef8b:	66 90                	xchg   ax,ax
c001ef8d:	66 90                	xchg   ax,ax
c001ef8f:	90                   	nop

c001ef90 <value_37F>:
c001ef90:	7f 03                	jg     c001ef95 <value_37A+0x1>

c001ef92 <value_37E>:
c001ef92:	7e 03                	jle    c001ef97 <x87Detect+0x1>

c001ef94 <value_37A>:
c001ef94:	7a 03                	jp     c001ef99 <x87Detect+0x3>

c001ef96 <x87Detect>:
c001ef96:	b8 01 00 00 00       	mov    eax,0x1
c001ef9b:	0f a2                	cpuid  
c001ef9d:	f7 c2 01 00 00 00    	test   edx,0x1
c001efa3:	74 06                	je     c001efab <x87Detect.nox87>
c001efa5:	b8 01 00 00 00       	mov    eax,0x1
c001efaa:	c3                   	ret    

c001efab <x87Detect.nox87>:
c001efab:	b8 00 00 00 00       	mov    eax,0x0
c001efb0:	c3                   	ret    

c001efb1 <x87Save>:
c001efb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efb5:	dd 30                	fnsave [eax]
c001efb7:	c3                   	ret    

c001efb8 <x87Load>:
c001efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbc:	dd 20                	frstor [eax]
c001efbe:	c3                   	ret    

c001efbf <x87Init>:
c001efbf:	0f 20 c0             	mov    eax,cr0
c001efc2:	66 25 fb ff          	and    ax,0xfffb
c001efc6:	66 0d 22 00          	or     ax,0x22
c001efca:	0f 22 c0             	mov    cr0,eax
c001efcd:	db e3                	fninit 
c001efcf:	0f 06                	clts   
c001efd1:	d9 2d 94 ef 01 c0    	fldcw  WORD PTR ds:0xc001ef94
c001efd7:	c3                   	ret    

c001efd8 <x87Close>:
c001efd8:	c3                   	ret    
c001efd9:	66 90                	xchg   ax,ax
c001efdb:	90                   	nop

c001efdc <__do_global_ctors_aux>:
c001efdc:	a1 90 ff 01 c0       	mov    eax,ds:0xc001ff90
c001efe1:	83 f8 ff             	cmp    eax,0xffffffff
c001efe4:	74 1a                	je     c001f000 <__do_global_ctors_aux+0x24>
c001efe6:	55                   	push   ebp
c001efe7:	89 e5                	mov    ebp,esp
c001efe9:	53                   	push   ebx
c001efea:	52                   	push   edx
c001efeb:	bb 90 ff 01 c0       	mov    ebx,0xc001ff90
c001eff0:	ff d0                	call   eax
c001eff2:	83 eb 04             	sub    ebx,0x4
c001eff5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eff7:	83 f8 ff             	cmp    eax,0xffffffff
c001effa:	75 f4                	jne    c001eff0 <__do_global_ctors_aux+0x14>
c001effc:	58                   	pop    eax
c001effd:	5b                   	pop    ebx
c001effe:	5d                   	pop    ebp
c001efff:	c3                   	ret    
c001f000:	c3                   	ret    
c001f001:	66 90                	xchg   ax,ax
c001f003:	90                   	nop

c001f004 <__divdi3>:
c001f004:	55                   	push   ebp
c001f005:	57                   	push   edi
c001f006:	56                   	push   esi
c001f007:	53                   	push   ebx
c001f008:	83 ec 1c             	sub    esp,0x1c
c001f00b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f00f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f013:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f016:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f01a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f01e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f022:	85 db                	test   ebx,ebx
c001f024:	0f 88 8e 00 00 00    	js     c001f0b8 <__divdi3+0xb4>
c001f02a:	89 dd                	mov    ebp,ebx
c001f02c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f034:	89 d3                	mov    ebx,edx
c001f036:	85 d2                	test   edx,edx
c001f038:	79 0d                	jns    c001f047 <__divdi3+0x43>
c001f03a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f03e:	f7 d8                	neg    eax
c001f040:	83 d2 00             	adc    edx,0x0
c001f043:	f7 da                	neg    edx
c001f045:	89 d3                	mov    ebx,edx
c001f047:	89 c7                	mov    edi,eax
c001f049:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f04c:	85 db                	test   ebx,ebx
c001f04e:	75 48                	jne    c001f098 <__divdi3+0x94>
c001f050:	39 ef                	cmp    edi,ebp
c001f052:	76 24                	jbe    c001f078 <__divdi3+0x74>
c001f054:	89 ea                	mov    edx,ebp
c001f056:	f7 f7                	div    edi
c001f058:	89 c1                	mov    ecx,eax
c001f05a:	31 f6                	xor    esi,esi
c001f05c:	89 c8                	mov    eax,ecx
c001f05e:	89 f2                	mov    edx,esi
c001f060:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f064:	85 c9                	test   ecx,ecx
c001f066:	74 07                	je     c001f06f <__divdi3+0x6b>
c001f068:	f7 d8                	neg    eax
c001f06a:	83 d2 00             	adc    edx,0x0
c001f06d:	f7 da                	neg    edx
c001f06f:	83 c4 1c             	add    esp,0x1c
c001f072:	5b                   	pop    ebx
c001f073:	5e                   	pop    esi
c001f074:	5f                   	pop    edi
c001f075:	5d                   	pop    ebp
c001f076:	c3                   	ret    
c001f077:	90                   	nop
c001f078:	85 ff                	test   edi,edi
c001f07a:	75 0b                	jne    c001f087 <__divdi3+0x83>
c001f07c:	b8 01 00 00 00       	mov    eax,0x1
c001f081:	31 d2                	xor    edx,edx
c001f083:	f7 f3                	div    ebx
c001f085:	89 c7                	mov    edi,eax
c001f087:	31 d2                	xor    edx,edx
c001f089:	89 e8                	mov    eax,ebp
c001f08b:	f7 f7                	div    edi
c001f08d:	89 c6                	mov    esi,eax
c001f08f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f092:	f7 f7                	div    edi
c001f094:	89 c1                	mov    ecx,eax
c001f096:	eb c4                	jmp    c001f05c <__divdi3+0x58>
c001f098:	39 eb                	cmp    ebx,ebp
c001f09a:	77 3c                	ja     c001f0d8 <__divdi3+0xd4>
c001f09c:	0f bd f3             	bsr    esi,ebx
c001f09f:	83 f6 1f             	xor    esi,0x1f
c001f0a2:	75 40                	jne    c001f0e4 <__divdi3+0xe0>
c001f0a4:	39 eb                	cmp    ebx,ebp
c001f0a6:	72 09                	jb     c001f0b1 <__divdi3+0xad>
c001f0a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f0ab:	0f 87 97 00 00 00    	ja     c001f148 <__divdi3+0x144>
c001f0b1:	b9 01 00 00 00       	mov    ecx,0x1
c001f0b6:	eb a4                	jmp    c001f05c <__divdi3+0x58>
c001f0b8:	f7 d9                	neg    ecx
c001f0ba:	83 d3 00             	adc    ebx,0x0
c001f0bd:	f7 db                	neg    ebx
c001f0bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f0c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f0c6:	89 dd                	mov    ebp,ebx
c001f0c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f0d0:	e9 5f ff ff ff       	jmp    c001f034 <__divdi3+0x30>
c001f0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f0d8:	31 f6                	xor    esi,esi
c001f0da:	31 c9                	xor    ecx,ecx
c001f0dc:	e9 7b ff ff ff       	jmp    c001f05c <__divdi3+0x58>
c001f0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0e4:	b8 20 00 00 00       	mov    eax,0x20
c001f0e9:	29 f0                	sub    eax,esi
c001f0eb:	89 f1                	mov    ecx,esi
c001f0ed:	d3 e3                	shl    ebx,cl
c001f0ef:	89 fa                	mov    edx,edi
c001f0f1:	88 c1                	mov    cl,al
c001f0f3:	d3 ea                	shr    edx,cl
c001f0f5:	09 da                	or     edx,ebx
c001f0f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0fb:	89 f1                	mov    ecx,esi
c001f0fd:	d3 e7                	shl    edi,cl
c001f0ff:	89 eb                	mov    ebx,ebp
c001f101:	88 c1                	mov    cl,al
c001f103:	d3 eb                	shr    ebx,cl
c001f105:	89 f1                	mov    ecx,esi
c001f107:	d3 e5                	shl    ebp,cl
c001f109:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f10c:	88 c1                	mov    cl,al
c001f10e:	d3 ea                	shr    edx,cl
c001f110:	09 d5                	or     ebp,edx
c001f112:	89 e8                	mov    eax,ebp
c001f114:	89 da                	mov    edx,ebx
c001f116:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f11a:	89 d3                	mov    ebx,edx
c001f11c:	89 c5                	mov    ebp,eax
c001f11e:	f7 e7                	mul    edi
c001f120:	39 d3                	cmp    ebx,edx
c001f122:	72 18                	jb     c001f13c <__divdi3+0x138>
c001f124:	74 0a                	je     c001f130 <__divdi3+0x12c>
c001f126:	89 e9                	mov    ecx,ebp
c001f128:	31 f6                	xor    esi,esi
c001f12a:	e9 2d ff ff ff       	jmp    c001f05c <__divdi3+0x58>
c001f12f:	90                   	nop
c001f130:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f133:	89 f1                	mov    ecx,esi
c001f135:	d3 e7                	shl    edi,cl
c001f137:	39 c7                	cmp    edi,eax
c001f139:	73 eb                	jae    c001f126 <__divdi3+0x122>
c001f13b:	90                   	nop
c001f13c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f13f:	31 f6                	xor    esi,esi
c001f141:	e9 16 ff ff ff       	jmp    c001f05c <__divdi3+0x58>
c001f146:	66 90                	xchg   ax,ax
c001f148:	31 c9                	xor    ecx,ecx
c001f14a:	e9 0d ff ff ff       	jmp    c001f05c <__divdi3+0x58>
c001f14f:	90                   	nop

c001f150 <__moddi3>:
c001f150:	55                   	push   ebp
c001f151:	57                   	push   edi
c001f152:	56                   	push   esi
c001f153:	53                   	push   ebx
c001f154:	83 ec 2c             	sub    esp,0x2c
c001f157:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f15b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f15f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f163:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f167:	85 db                	test   ebx,ebx
c001f169:	0f 88 85 00 00 00    	js     c001f1f4 <__moddi3+0xa4>
c001f16f:	89 de                	mov    esi,ebx
c001f171:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f179:	89 d7                	mov    edi,edx
c001f17b:	85 d2                	test   edx,edx
c001f17d:	79 09                	jns    c001f188 <__moddi3+0x38>
c001f17f:	f7 d8                	neg    eax
c001f181:	83 d2 00             	adc    edx,0x0
c001f184:	f7 da                	neg    edx
c001f186:	89 d7                	mov    edi,edx
c001f188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f18c:	89 cd                	mov    ebp,ecx
c001f18e:	85 ff                	test   edi,edi
c001f190:	75 52                	jne    c001f1e4 <__moddi3+0x94>
c001f192:	89 c3                	mov    ebx,eax
c001f194:	39 f0                	cmp    eax,esi
c001f196:	76 24                	jbe    c001f1bc <__moddi3+0x6c>
c001f198:	89 c8                	mov    eax,ecx
c001f19a:	89 f2                	mov    edx,esi
c001f19c:	f7 f3                	div    ebx
c001f19e:	89 d6                	mov    esi,edx
c001f1a0:	89 f0                	mov    eax,esi
c001f1a2:	31 d2                	xor    edx,edx
c001f1a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1a8:	85 c9                	test   ecx,ecx
c001f1aa:	74 07                	je     c001f1b3 <__moddi3+0x63>
c001f1ac:	f7 d8                	neg    eax
c001f1ae:	83 d2 00             	adc    edx,0x0
c001f1b1:	f7 da                	neg    edx
c001f1b3:	83 c4 2c             	add    esp,0x2c
c001f1b6:	5b                   	pop    ebx
c001f1b7:	5e                   	pop    esi
c001f1b8:	5f                   	pop    edi
c001f1b9:	5d                   	pop    ebp
c001f1ba:	c3                   	ret    
c001f1bb:	90                   	nop
c001f1bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1c0:	85 db                	test   ebx,ebx
c001f1c2:	75 0d                	jne    c001f1d1 <__moddi3+0x81>
c001f1c4:	b8 01 00 00 00       	mov    eax,0x1
c001f1c9:	31 d2                	xor    edx,edx
c001f1cb:	f7 f7                	div    edi
c001f1cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1d1:	89 f0                	mov    eax,esi
c001f1d3:	31 d2                	xor    edx,edx
c001f1d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1d9:	f7 f7                	div    edi
c001f1db:	89 e8                	mov    eax,ebp
c001f1dd:	f7 f7                	div    edi
c001f1df:	89 d6                	mov    esi,edx
c001f1e1:	eb bd                	jmp    c001f1a0 <__moddi3+0x50>
c001f1e3:	90                   	nop
c001f1e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f1e8:	39 f7                	cmp    edi,esi
c001f1ea:	76 20                	jbe    c001f20c <__moddi3+0xbc>
c001f1ec:	89 c8                	mov    eax,ecx
c001f1ee:	89 f2                	mov    edx,esi
c001f1f0:	eb b2                	jmp    c001f1a4 <__moddi3+0x54>
c001f1f2:	66 90                	xchg   ax,ax
c001f1f4:	f7 d9                	neg    ecx
c001f1f6:	83 d3 00             	adc    ebx,0x0
c001f1f9:	f7 db                	neg    ebx
c001f1fb:	89 de                	mov    esi,ebx
c001f1fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f205:	e9 6f ff ff ff       	jmp    c001f179 <__moddi3+0x29>
c001f20a:	66 90                	xchg   ax,ax
c001f20c:	0f bd c7             	bsr    eax,edi
c001f20f:	83 f0 1f             	xor    eax,0x1f
c001f212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f216:	75 24                	jne    c001f23c <__moddi3+0xec>
c001f218:	39 f7                	cmp    edi,esi
c001f21a:	72 06                	jb     c001f222 <__moddi3+0xd2>
c001f21c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f220:	77 0c                	ja     c001f22e <__moddi3+0xde>
c001f222:	89 e9                	mov    ecx,ebp
c001f224:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f228:	19 fe                	sbb    esi,edi
c001f22a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f22e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f232:	89 f2                	mov    edx,esi
c001f234:	e9 6b ff ff ff       	jmp    c001f1a4 <__moddi3+0x54>
c001f239:	8d 76 00             	lea    esi,[esi+0x0]
c001f23c:	b8 20 00 00 00       	mov    eax,0x20
c001f241:	89 c2                	mov    edx,eax
c001f243:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f247:	29 da                	sub    edx,ebx
c001f249:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f24d:	88 d9                	mov    cl,bl
c001f24f:	d3 e7                	shl    edi,cl
c001f251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f255:	88 d1                	mov    cl,dl
c001f257:	d3 e8                	shr    eax,cl
c001f259:	09 c7                	or     edi,eax
c001f25b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f25f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f263:	89 d8                	mov    eax,ebx
c001f265:	88 d9                	mov    cl,bl
c001f267:	d3 e7                	shl    edi,cl
c001f269:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f26d:	89 f3                	mov    ebx,esi
c001f26f:	88 d1                	mov    cl,dl
c001f271:	d3 eb                	shr    ebx,cl
c001f273:	89 c7                	mov    edi,eax
c001f275:	88 c1                	mov    cl,al
c001f277:	d3 e6                	shl    esi,cl
c001f279:	89 e8                	mov    eax,ebp
c001f27b:	88 d1                	mov    cl,dl
c001f27d:	d3 e8                	shr    eax,cl
c001f27f:	09 f0                	or     eax,esi
c001f281:	89 f9                	mov    ecx,edi
c001f283:	d3 e5                	shl    ebp,cl
c001f285:	89 da                	mov    edx,ebx
c001f287:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f28b:	89 d3                	mov    ebx,edx
c001f28d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f291:	89 c6                	mov    esi,eax
c001f293:	89 d1                	mov    ecx,edx
c001f295:	39 d3                	cmp    ebx,edx
c001f297:	72 27                	jb     c001f2c0 <__moddi3+0x170>
c001f299:	74 21                	je     c001f2bc <__moddi3+0x16c>
c001f29b:	29 f5                	sub    ebp,esi
c001f29d:	19 cb                	sbb    ebx,ecx
c001f29f:	89 de                	mov    esi,ebx
c001f2a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f2a5:	d3 e6                	shl    esi,cl
c001f2a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f2ab:	89 f9                	mov    ecx,edi
c001f2ad:	d3 ed                	shr    ebp,cl
c001f2af:	09 ee                	or     esi,ebp
c001f2b1:	89 f0                	mov    eax,esi
c001f2b3:	d3 eb                	shr    ebx,cl
c001f2b5:	89 da                	mov    edx,ebx
c001f2b7:	e9 e8 fe ff ff       	jmp    c001f1a4 <__moddi3+0x54>
c001f2bc:	39 c5                	cmp    ebp,eax
c001f2be:	73 db                	jae    c001f29b <__moddi3+0x14b>
c001f2c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f2c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f2c8:	89 d1                	mov    ecx,edx
c001f2ca:	89 c6                	mov    esi,eax
c001f2cc:	eb cd                	jmp    c001f29b <__moddi3+0x14b>
c001f2ce:	66 90                	xchg   ax,ax

c001f2d0 <__udivdi3>:
c001f2d0:	55                   	push   ebp
c001f2d1:	57                   	push   edi
c001f2d2:	56                   	push   esi
c001f2d3:	53                   	push   ebx
c001f2d4:	83 ec 1c             	sub    esp,0x1c
c001f2d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f2db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f2df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f2e7:	85 d2                	test   edx,edx
c001f2e9:	75 41                	jne    c001f32c <__udivdi3+0x5c>
c001f2eb:	39 f7                	cmp    edi,esi
c001f2ed:	76 15                	jbe    c001f304 <__udivdi3+0x34>
c001f2ef:	89 e8                	mov    eax,ebp
c001f2f1:	89 f2                	mov    edx,esi
c001f2f3:	f7 f7                	div    edi
c001f2f5:	31 db                	xor    ebx,ebx
c001f2f7:	89 da                	mov    edx,ebx
c001f2f9:	83 c4 1c             	add    esp,0x1c
c001f2fc:	5b                   	pop    ebx
c001f2fd:	5e                   	pop    esi
c001f2fe:	5f                   	pop    edi
c001f2ff:	5d                   	pop    ebp
c001f300:	c3                   	ret    
c001f301:	8d 76 00             	lea    esi,[esi+0x0]
c001f304:	89 f9                	mov    ecx,edi
c001f306:	85 ff                	test   edi,edi
c001f308:	75 0b                	jne    c001f315 <__udivdi3+0x45>
c001f30a:	b8 01 00 00 00       	mov    eax,0x1
c001f30f:	31 d2                	xor    edx,edx
c001f311:	f7 f7                	div    edi
c001f313:	89 c1                	mov    ecx,eax
c001f315:	31 d2                	xor    edx,edx
c001f317:	89 f0                	mov    eax,esi
c001f319:	f7 f1                	div    ecx
c001f31b:	89 c3                	mov    ebx,eax
c001f31d:	89 e8                	mov    eax,ebp
c001f31f:	f7 f1                	div    ecx
c001f321:	89 da                	mov    edx,ebx
c001f323:	83 c4 1c             	add    esp,0x1c
c001f326:	5b                   	pop    ebx
c001f327:	5e                   	pop    esi
c001f328:	5f                   	pop    edi
c001f329:	5d                   	pop    ebp
c001f32a:	c3                   	ret    
c001f32b:	90                   	nop
c001f32c:	39 f2                	cmp    edx,esi
c001f32e:	77 1c                	ja     c001f34c <__udivdi3+0x7c>
c001f330:	0f bd da             	bsr    ebx,edx
c001f333:	83 f3 1f             	xor    ebx,0x1f
c001f336:	75 24                	jne    c001f35c <__udivdi3+0x8c>
c001f338:	39 f2                	cmp    edx,esi
c001f33a:	72 08                	jb     c001f344 <__udivdi3+0x74>
c001f33c:	39 ef                	cmp    edi,ebp
c001f33e:	0f 87 84 00 00 00    	ja     c001f3c8 <__udivdi3+0xf8>
c001f344:	b8 01 00 00 00       	mov    eax,0x1
c001f349:	eb ac                	jmp    c001f2f7 <__udivdi3+0x27>
c001f34b:	90                   	nop
c001f34c:	31 db                	xor    ebx,ebx
c001f34e:	31 c0                	xor    eax,eax
c001f350:	89 da                	mov    edx,ebx
c001f352:	83 c4 1c             	add    esp,0x1c
c001f355:	5b                   	pop    ebx
c001f356:	5e                   	pop    esi
c001f357:	5f                   	pop    edi
c001f358:	5d                   	pop    ebp
c001f359:	c3                   	ret    
c001f35a:	66 90                	xchg   ax,ax
c001f35c:	b8 20 00 00 00       	mov    eax,0x20
c001f361:	29 d8                	sub    eax,ebx
c001f363:	88 d9                	mov    cl,bl
c001f365:	d3 e2                	shl    edx,cl
c001f367:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f36b:	89 fa                	mov    edx,edi
c001f36d:	88 c1                	mov    cl,al
c001f36f:	d3 ea                	shr    edx,cl
c001f371:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f375:	09 d1                	or     ecx,edx
c001f377:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f37b:	88 d9                	mov    cl,bl
c001f37d:	d3 e7                	shl    edi,cl
c001f37f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f383:	89 f7                	mov    edi,esi
c001f385:	88 c1                	mov    cl,al
c001f387:	d3 ef                	shr    edi,cl
c001f389:	88 d9                	mov    cl,bl
c001f38b:	d3 e6                	shl    esi,cl
c001f38d:	89 ea                	mov    edx,ebp
c001f38f:	88 c1                	mov    cl,al
c001f391:	d3 ea                	shr    edx,cl
c001f393:	09 d6                	or     esi,edx
c001f395:	89 f0                	mov    eax,esi
c001f397:	89 fa                	mov    edx,edi
c001f399:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f39d:	89 d7                	mov    edi,edx
c001f39f:	89 c6                	mov    esi,eax
c001f3a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3a5:	39 d7                	cmp    edi,edx
c001f3a7:	72 13                	jb     c001f3bc <__udivdi3+0xec>
c001f3a9:	74 09                	je     c001f3b4 <__udivdi3+0xe4>
c001f3ab:	89 f0                	mov    eax,esi
c001f3ad:	31 db                	xor    ebx,ebx
c001f3af:	e9 43 ff ff ff       	jmp    c001f2f7 <__udivdi3+0x27>
c001f3b4:	88 d9                	mov    cl,bl
c001f3b6:	d3 e5                	shl    ebp,cl
c001f3b8:	39 c5                	cmp    ebp,eax
c001f3ba:	73 ef                	jae    c001f3ab <__udivdi3+0xdb>
c001f3bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f3bf:	31 db                	xor    ebx,ebx
c001f3c1:	e9 31 ff ff ff       	jmp    c001f2f7 <__udivdi3+0x27>
c001f3c6:	66 90                	xchg   ax,ax
c001f3c8:	31 c0                	xor    eax,eax
c001f3ca:	e9 28 ff ff ff       	jmp    c001f2f7 <__udivdi3+0x27>
c001f3cf:	90                   	nop

c001f3d0 <__umoddi3>:
c001f3d0:	55                   	push   ebp
c001f3d1:	57                   	push   edi
c001f3d2:	56                   	push   esi
c001f3d3:	53                   	push   ebx
c001f3d4:	83 ec 1c             	sub    esp,0x1c
c001f3d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f3db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f3e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f3e7:	89 da                	mov    edx,ebx
c001f3e9:	85 c0                	test   eax,eax
c001f3eb:	75 37                	jne    c001f424 <__umoddi3+0x54>
c001f3ed:	39 df                	cmp    edi,ebx
c001f3ef:	76 13                	jbe    c001f404 <__umoddi3+0x34>
c001f3f1:	89 f0                	mov    eax,esi
c001f3f3:	f7 f7                	div    edi
c001f3f5:	89 d0                	mov    eax,edx
c001f3f7:	31 d2                	xor    edx,edx
c001f3f9:	83 c4 1c             	add    esp,0x1c
c001f3fc:	5b                   	pop    ebx
c001f3fd:	5e                   	pop    esi
c001f3fe:	5f                   	pop    edi
c001f3ff:	5d                   	pop    ebp
c001f400:	c3                   	ret    
c001f401:	8d 76 00             	lea    esi,[esi+0x0]
c001f404:	89 fd                	mov    ebp,edi
c001f406:	85 ff                	test   edi,edi
c001f408:	75 0b                	jne    c001f415 <__umoddi3+0x45>
c001f40a:	b8 01 00 00 00       	mov    eax,0x1
c001f40f:	31 d2                	xor    edx,edx
c001f411:	f7 f7                	div    edi
c001f413:	89 c5                	mov    ebp,eax
c001f415:	89 d8                	mov    eax,ebx
c001f417:	31 d2                	xor    edx,edx
c001f419:	f7 f5                	div    ebp
c001f41b:	89 f0                	mov    eax,esi
c001f41d:	f7 f5                	div    ebp
c001f41f:	89 d0                	mov    eax,edx
c001f421:	eb d4                	jmp    c001f3f7 <__umoddi3+0x27>
c001f423:	90                   	nop
c001f424:	89 f1                	mov    ecx,esi
c001f426:	39 d8                	cmp    eax,ebx
c001f428:	76 0a                	jbe    c001f434 <__umoddi3+0x64>
c001f42a:	89 f0                	mov    eax,esi
c001f42c:	83 c4 1c             	add    esp,0x1c
c001f42f:	5b                   	pop    ebx
c001f430:	5e                   	pop    esi
c001f431:	5f                   	pop    edi
c001f432:	5d                   	pop    ebp
c001f433:	c3                   	ret    
c001f434:	0f bd e8             	bsr    ebp,eax
c001f437:	83 f5 1f             	xor    ebp,0x1f
c001f43a:	75 1c                	jne    c001f458 <__umoddi3+0x88>
c001f43c:	39 d8                	cmp    eax,ebx
c001f43e:	72 04                	jb     c001f444 <__umoddi3+0x74>
c001f440:	39 f7                	cmp    edi,esi
c001f442:	77 08                	ja     c001f44c <__umoddi3+0x7c>
c001f444:	89 da                	mov    edx,ebx
c001f446:	29 fe                	sub    esi,edi
c001f448:	19 c2                	sbb    edx,eax
c001f44a:	89 f1                	mov    ecx,esi
c001f44c:	89 c8                	mov    eax,ecx
c001f44e:	83 c4 1c             	add    esp,0x1c
c001f451:	5b                   	pop    ebx
c001f452:	5e                   	pop    esi
c001f453:	5f                   	pop    edi
c001f454:	5d                   	pop    ebp
c001f455:	c3                   	ret    
c001f456:	66 90                	xchg   ax,ax
c001f458:	ba 20 00 00 00       	mov    edx,0x20
c001f45d:	29 ea                	sub    edx,ebp
c001f45f:	89 e9                	mov    ecx,ebp
c001f461:	d3 e0                	shl    eax,cl
c001f463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f467:	89 f8                	mov    eax,edi
c001f469:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f46d:	88 d1                	mov    cl,dl
c001f46f:	d3 e8                	shr    eax,cl
c001f471:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f475:	09 c1                	or     ecx,eax
c001f477:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f47b:	89 e9                	mov    ecx,ebp
c001f47d:	d3 e7                	shl    edi,cl
c001f47f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f483:	89 d8                	mov    eax,ebx
c001f485:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f489:	88 d1                	mov    cl,dl
c001f48b:	d3 e8                	shr    eax,cl
c001f48d:	89 c7                	mov    edi,eax
c001f48f:	89 e9                	mov    ecx,ebp
c001f491:	d3 e3                	shl    ebx,cl
c001f493:	89 f0                	mov    eax,esi
c001f495:	88 d1                	mov    cl,dl
c001f497:	d3 e8                	shr    eax,cl
c001f499:	09 d8                	or     eax,ebx
c001f49b:	89 e9                	mov    ecx,ebp
c001f49d:	d3 e6                	shl    esi,cl
c001f49f:	89 f3                	mov    ebx,esi
c001f4a1:	89 fa                	mov    edx,edi
c001f4a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f4a7:	89 d1                	mov    ecx,edx
c001f4a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4ad:	89 c6                	mov    esi,eax
c001f4af:	89 d7                	mov    edi,edx
c001f4b1:	39 d1                	cmp    ecx,edx
c001f4b3:	72 27                	jb     c001f4dc <__umoddi3+0x10c>
c001f4b5:	74 21                	je     c001f4d8 <__umoddi3+0x108>
c001f4b7:	89 ca                	mov    edx,ecx
c001f4b9:	29 f3                	sub    ebx,esi
c001f4bb:	19 fa                	sbb    edx,edi
c001f4bd:	89 d0                	mov    eax,edx
c001f4bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f4c3:	d3 e0                	shl    eax,cl
c001f4c5:	89 e9                	mov    ecx,ebp
c001f4c7:	d3 eb                	shr    ebx,cl
c001f4c9:	09 d8                	or     eax,ebx
c001f4cb:	d3 ea                	shr    edx,cl
c001f4cd:	83 c4 1c             	add    esp,0x1c
c001f4d0:	5b                   	pop    ebx
c001f4d1:	5e                   	pop    esi
c001f4d2:	5f                   	pop    edi
c001f4d3:	5d                   	pop    ebp
c001f4d4:	c3                   	ret    
c001f4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f4d8:	39 c3                	cmp    ebx,eax
c001f4da:	73 db                	jae    c001f4b7 <__umoddi3+0xe7>
c001f4dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f4e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f4e4:	89 d7                	mov    edi,edx
c001f4e6:	89 c6                	mov    esi,eax
c001f4e8:	eb cd                	jmp    c001f4b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f4ea <_init>:
c001f4ea:	55                   	push   ebp
c001f4eb:	89 e5                	mov    ebp,esp
c001f4ed:	e8 02 0c fe ff       	call   c00000f4 <frame_dummy>
c001f4f2:	e8 e5 fa ff ff       	call   c001efdc <__do_global_ctors_aux>
c001f4f7:	5d                   	pop    ebp
c001f4f8:	c3                   	ret    

Disassembly of section .fini:

c001f4f9 <_fini>:
c001f4f9:	55                   	push   ebp
c001f4fa:	89 e5                	mov    ebp,esp
c001f4fc:	e8 83 0b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f501:	5d                   	pop    ebp
c001f502:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f504 <Computer::~Computer()>:
c001f504:	83 ec 0c             	sub    esp,0xc
c001f507:	ba 14 08 02 c0       	mov    edx,0xc0020814
c001f50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f510:	89 10                	mov    DWORD PTR [eax],edx
c001f512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f516:	83 ec 0c             	sub    esp,0xc
c001f519:	50                   	push   eax
c001f51a:	e8 55 d1 fe ff       	call   c000c674 <Device::~Device()>
c001f51f:	83 c4 10             	add    esp,0x10
c001f522:	90                   	nop
c001f523:	83 c4 0c             	add    esp,0xc
c001f526:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f528 <Computer::~Computer()>:
c001f528:	83 ec 0c             	sub    esp,0xc
c001f52b:	83 ec 0c             	sub    esp,0xc
c001f52e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f532:	e8 cd ff ff ff       	call   c001f504 <Computer::~Computer()>
c001f537:	83 c4 10             	add    esp,0x10
c001f53a:	83 ec 08             	sub    esp,0x8
c001f53d:	68 70 01 00 00       	push   0x170
c001f542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f546:	e8 cd b2 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f54b:	83 c4 10             	add    esp,0x10
c001f54e:	83 c4 0c             	add    esp,0xc
c001f551:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f552 <idleCommon()>:
c001f552:	83 ec 0c             	sub    esp,0xc
c001f555:	fa                   	cli    
c001f556:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f55c:	e8 ff 66 ff ff       	call   c0015c60 <schedule()>
c001f561:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f566:	48                   	dec    eax
c001f567:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f56c:	75 01                	jne    c001f56f <idleCommon()+0x1d>
c001f56e:	fb                   	sti    
c001f56f:	83 c4 0c             	add    esp,0xc
c001f572:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f574 <LinkedList<UnixFile>::~LinkedList()>:
c001f574:	90                   	nop
c001f575:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f576 <LinkedList<UnixFile>::LinkedList()>:
c001f576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f57a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f584:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f58b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f58f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f59a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5b6:	90                   	nop
c001f5b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f5b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f5b8:	83 ec 0c             	sub    esp,0xc
c001f5bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5c0:	75 10                	jne    c001f5d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f5c2:	83 ec 0c             	sub    esp,0xc
c001f5c5:	68 28 0a 02 c0       	push   0xc0020a28
c001f5ca:	e8 d2 1d ff ff       	call   c00113a1 <KePanic(char const*)>
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5d8:	85 c0                	test   eax,eax
c001f5da:	74 34                	je     c001f610 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5e3:	85 c0                	test   eax,eax
c001f5e5:	74 29                	je     c001f610 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f604:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f607:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f60e:	eb 65                	jmp    c001f675 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f614:	8b 00                	mov    eax,DWORD PTR [eax]
c001f616:	85 c0                	test   eax,eax
c001f618:	75 4b                	jne    c001f665 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f61e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f621:	85 c0                	test   eax,eax
c001f623:	75 40                	jne    c001f665 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f629:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f62d:	89 10                	mov    DWORD PTR [eax],edx
c001f62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f633:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f637:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f641:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f64f:	85 c0                	test   eax,eax
c001f651:	74 22                	je     c001f675 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f653:	83 ec 0c             	sub    esp,0xc
c001f656:	68 4a 0a 02 c0       	push   0xc0020a4a
c001f65b:	e8 41 1d ff ff       	call   c00113a1 <KePanic(char const*)>
c001f660:	83 c4 10             	add    esp,0x10
c001f663:	eb 10                	jmp    c001f675 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f665:	83 ec 0c             	sub    esp,0xc
c001f668:	68 54 0a 02 c0       	push   0xc0020a54
c001f66d:	e8 2f 1d ff ff       	call   c00113a1 <KePanic(char const*)>
c001f672:	83 c4 10             	add    esp,0x10
c001f675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f679:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f67c:	8d 50 01             	lea    edx,[eax+0x1]
c001f67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f683:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f686:	90                   	nop
c001f687:	83 c4 0c             	add    esp,0xc
c001f68a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f68c <LinkedList<UnixFile>::getFirstElement()>:
c001f68c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f690:	8b 00                	mov    eax,DWORD PTR [eax]
c001f692:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f694 <LinkedList<UnixFile>::removeFirst()>:
c001f694:	83 ec 0c             	sub    esp,0xc
c001f697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f69d:	85 c0                	test   eax,eax
c001f69f:	75 12                	jne    c001f6b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f6a1:	83 ec 0c             	sub    esp,0xc
c001f6a4:	68 60 0a 02 c0       	push   0xc0020a60
c001f6a9:	e8 f3 1c ff ff       	call   c00113a1 <KePanic(char const*)>
c001f6ae:	83 c4 10             	add    esp,0x10
c001f6b1:	eb 7e                	jmp    c001f731 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f6b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6bd:	85 c0                	test   eax,eax
c001f6bf:	74 10                	je     c001f6d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f6c1:	83 ec 0c             	sub    esp,0xc
c001f6c4:	68 ab 0a 02 c0       	push   0xc0020aab
c001f6c9:	e8 d3 1c ff ff       	call   c00113a1 <KePanic(char const*)>
c001f6ce:	83 c4 10             	add    esp,0x10
c001f6d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6da:	85 c0                	test   eax,eax
c001f6dc:	75 33                	jne    c001f711 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6fa:	83 f8 01             	cmp    eax,0x1
c001f6fd:	74 21                	je     c001f720 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6ff:	83 ec 0c             	sub    esp,0xc
c001f702:	68 84 0a 02 c0       	push   0xc0020a84
c001f707:	e8 95 1c ff ff       	call   c00113a1 <KePanic(char const*)>
c001f70c:	83 c4 10             	add    esp,0x10
c001f70f:	eb 0f                	jmp    c001f720 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f715:	8b 00                	mov    eax,DWORD PTR [eax]
c001f717:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71e:	89 10                	mov    DWORD PTR [eax],edx
c001f720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f724:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f727:	8d 50 ff             	lea    edx,[eax-0x1]
c001f72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f731:	83 c4 0c             	add    esp,0xc
c001f734:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f736 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f736:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f73a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f73d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f73e <DriverlessDevice::~DriverlessDevice()>:
c001f73e:	ba 5c 16 02 c0       	mov    edx,0xc002165c
c001f743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f747:	89 10                	mov    DWORD PTR [eax],edx
c001f749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f74d:	50                   	push   eax
c001f74e:	e8 21 cf fe ff       	call   c000c674 <Device::~Device()>
c001f753:	83 c4 04             	add    esp,0x4
c001f756:	90                   	nop
c001f757:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f758 <DriverlessDevice::~DriverlessDevice()>:
c001f758:	83 ec 0c             	sub    esp,0xc
c001f75b:	83 ec 0c             	sub    esp,0xc
c001f75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f762:	e8 d7 ff ff ff       	call   c001f73e <DriverlessDevice::~DriverlessDevice()>
c001f767:	83 c4 10             	add    esp,0x10
c001f76a:	83 ec 08             	sub    esp,0x8
c001f76d:	68 58 01 00 00       	push   0x158
c001f772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f776:	e8 9d b0 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f77b:	83 c4 10             	add    esp,0x10
c001f77e:	83 c4 0c             	add    esp,0xc
c001f781:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f782 <LinkedList<Device>::addElement(Device*)>:
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f78a:	75 10                	jne    c001f79c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f78c:	83 ec 0c             	sub    esp,0xc
c001f78f:	68 28 0a 02 c0       	push   0xc0020a28
c001f794:	e8 08 1c ff ff       	call   c00113a1 <KePanic(char const*)>
c001f799:	83 c4 10             	add    esp,0x10
c001f79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7a2:	85 c0                	test   eax,eax
c001f7a4:	74 3a                	je     c001f7e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7ad:	85 c0                	test   eax,eax
c001f7af:	74 2f                	je     c001f7e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7bc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7d4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7de:	eb 68                	jmp    c001f848 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e6:	85 c0                	test   eax,eax
c001f7e8:	75 4e                	jne    c001f838 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7f1:	85 c0                	test   eax,eax
c001f7f3:	75 43                	jne    c001f838 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7fd:	89 10                	mov    DWORD PTR [eax],edx
c001f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f803:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f807:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f811:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f822:	85 c0                	test   eax,eax
c001f824:	74 22                	je     c001f848 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f826:	83 ec 0c             	sub    esp,0xc
c001f829:	68 4a 0a 02 c0       	push   0xc0020a4a
c001f82e:	e8 6e 1b ff ff       	call   c00113a1 <KePanic(char const*)>
c001f833:	83 c4 10             	add    esp,0x10
c001f836:	eb 10                	jmp    c001f848 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	68 54 0a 02 c0       	push   0xc0020a54
c001f840:	e8 5c 1b ff ff       	call   c00113a1 <KePanic(char const*)>
c001f845:	83 c4 10             	add    esp,0x10
c001f848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f84f:	8d 50 01             	lea    edx,[eax+0x1]
c001f852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f856:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f859:	90                   	nop
c001f85a:	83 c4 0c             	add    esp,0xc
c001f85d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f85e <LinkedList<Device>::LinkedList()>:
c001f85e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f862:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f86c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f873:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f877:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f882:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f88c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f897:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f89e:	90                   	nop
c001f89f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f8a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8a6:	85 c0                	test   eax,eax
c001f8a8:	75 0e                	jne    c001f8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b1:	85 c0                	test   eax,eax
c001f8b3:	75 03                	jne    c001f8b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8b5:	b0 01                	mov    al,0x1
c001f8b7:	c3                   	ret    
c001f8b8:	b0 00                	mov    al,0x0
c001f8ba:	90                   	nop
c001f8bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f8bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f8bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f8c4:	83 ec 0c             	sub    esp,0xc
c001f8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8cd:	85 c0                	test   eax,eax
c001f8cf:	75 17                	jne    c001f8e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f8d1:	83 ec 0c             	sub    esp,0xc
c001f8d4:	68 60 0a 02 c0       	push   0xc0020a60
c001f8d9:	e8 c3 1a ff ff       	call   c00113a1 <KePanic(char const*)>
c001f8de:	83 c4 10             	add    esp,0x10
c001f8e1:	e9 96 00 00 00       	jmp    c001f97c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f8e6:	66 90                	xchg   ax,ax
c001f8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f8f2:	85 c0                	test   eax,eax
c001f8f4:	0f 95 c0             	setne  al
c001f8f7:	0f b6 c0             	movzx  eax,al
c001f8fa:	85 c0                	test   eax,eax
c001f8fc:	74 12                	je     c001f910 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f8fe:	83 ec 0c             	sub    esp,0xc
c001f901:	68 ab 0a 02 c0       	push   0xc0020aab
c001f906:	e8 96 1a ff ff       	call   c00113a1 <KePanic(char const*)>
c001f90b:	83 c4 10             	add    esp,0x10
c001f90e:	66 90                	xchg   ax,ax
c001f910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f914:	8b 00                	mov    eax,DWORD PTR [eax]
c001f916:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f919:	85 c0                	test   eax,eax
c001f91b:	0f 94 c0             	sete   al
c001f91e:	0f b6 c0             	movzx  eax,al
c001f921:	85 c0                	test   eax,eax
c001f923:	74 33                	je     c001f958 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f929:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f933:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f941:	83 f8 01             	cmp    eax,0x1
c001f944:	74 22                	je     c001f968 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	68 84 0a 02 c0       	push   0xc0020a84
c001f94e:	e8 4e 1a ff ff       	call   c00113a1 <KePanic(char const*)>
c001f953:	83 c4 10             	add    esp,0x10
c001f956:	eb 10                	jmp    c001f968 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f95e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f965:	89 10                	mov    DWORD PTR [eax],edx
c001f967:	90                   	nop
c001f968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f96f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f976:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f979:	8d 76 00             	lea    esi,[esi+0x0]
c001f97c:	83 c4 0c             	add    esp,0xc
c001f97f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f980:	83 ec 0c             	sub    esp,0xc
c001f983:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f988:	75 12                	jne    c001f99c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f98a:	83 ec 0c             	sub    esp,0xc
c001f98d:	68 28 0a 02 c0       	push   0xc0020a28
c001f992:	e8 0a 1a ff ff       	call   c00113a1 <KePanic(char const*)>
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	66 90                	xchg   ax,ax
c001f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9a2:	85 c0                	test   eax,eax
c001f9a4:	74 36                	je     c001f9dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9ad:	85 c0                	test   eax,eax
c001f9af:	74 2b                	je     c001f9dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9d8:	eb 6a                	jmp    c001fa44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f9da:	66 90                	xchg   ax,ax
c001f9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9e2:	85 c0                	test   eax,eax
c001f9e4:	75 4e                	jne    c001fa34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9ed:	85 c0                	test   eax,eax
c001f9ef:	75 43                	jne    c001fa34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9f9:	89 10                	mov    DWORD PTR [eax],edx
c001f9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa0d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa1b:	85 c0                	test   eax,eax
c001fa1d:	74 25                	je     c001fa44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa1f:	83 ec 0c             	sub    esp,0xc
c001fa22:	68 4a 0a 02 c0       	push   0xc0020a4a
c001fa27:	e8 75 19 ff ff       	call   c00113a1 <KePanic(char const*)>
c001fa2c:	83 c4 10             	add    esp,0x10
c001fa2f:	eb 13                	jmp    c001fa44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fa31:	8d 76 00             	lea    esi,[esi+0x0]
c001fa34:	83 ec 0c             	sub    esp,0xc
c001fa37:	68 54 0a 02 c0       	push   0xc0020a54
c001fa3c:	e8 60 19 ff ff       	call   c00113a1 <KePanic(char const*)>
c001fa41:	83 c4 10             	add    esp,0x10
c001fa44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa4b:	8d 50 01             	lea    edx,[eax+0x1]
c001fa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa55:	90                   	nop
c001fa56:	83 c4 0c             	add    esp,0xc
c001fa59:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa5c <ACPI::~ACPI()>:
c001fa5c:	83 ec 0c             	sub    esp,0xc
c001fa5f:	ba 44 1c 02 c0       	mov    edx,0xc0021c44
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	89 10                	mov    DWORD PTR [eax],edx
c001fa6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6e:	83 ec 0c             	sub    esp,0xc
c001fa71:	50                   	push   eax
c001fa72:	e8 fd cb fe ff       	call   c000c674 <Device::~Device()>
c001fa77:	83 c4 10             	add    esp,0x10
c001fa7a:	90                   	nop
c001fa7b:	83 c4 0c             	add    esp,0xc
c001fa7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa80 <ACPI::~ACPI()>:
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	83 ec 0c             	sub    esp,0xc
c001fa86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa8a:	e8 cd ff ff ff       	call   c001fa5c <ACPI::~ACPI()>
c001fa8f:	83 c4 10             	add    esp,0x10
c001fa92:	83 ec 08             	sub    esp,0x8
c001fa95:	68 64 12 00 00       	push   0x1264
c001fa9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa9e:	e8 75 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001faa3:	83 c4 10             	add    esp,0x10
c001faa6:	83 c4 0c             	add    esp,0xc
c001faa9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001faac <LinkedList<Device>::~LinkedList()>:
c001faac:	90                   	nop
c001faad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fab0 <LinkedList<Device>::isEmpty()>:
c001fab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fab6:	85 c0                	test   eax,eax
c001fab8:	75 0e                	jne    c001fac8 <LinkedList<Device>::isEmpty()+0x18>
c001faba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fac1:	85 c0                	test   eax,eax
c001fac3:	75 03                	jne    c001fac8 <LinkedList<Device>::isEmpty()+0x18>
c001fac5:	b0 01                	mov    al,0x1
c001fac7:	c3                   	ret    
c001fac8:	b0 00                	mov    al,0x0
c001faca:	90                   	nop
c001facb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001facc <LinkedList<Device>::getFirstElement()>:
c001facc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fad4 <LinkedList<Device>::removeFirst()>:
c001fad4:	83 ec 0c             	sub    esp,0xc
c001fad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fadd:	85 c0                	test   eax,eax
c001fadf:	75 17                	jne    c001faf8 <LinkedList<Device>::removeFirst()+0x24>
c001fae1:	83 ec 0c             	sub    esp,0xc
c001fae4:	68 60 0a 02 c0       	push   0xc0020a60
c001fae9:	e8 b3 18 ff ff       	call   c00113a1 <KePanic(char const*)>
c001faee:	83 c4 10             	add    esp,0x10
c001faf1:	e9 92 00 00 00       	jmp    c001fb88 <LinkedList<Device>::removeFirst()+0xb4>
c001faf6:	66 90                	xchg   ax,ax
c001faf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb05:	85 c0                	test   eax,eax
c001fb07:	74 13                	je     c001fb1c <LinkedList<Device>::removeFirst()+0x48>
c001fb09:	83 ec 0c             	sub    esp,0xc
c001fb0c:	68 ab 0a 02 c0       	push   0xc0020aab
c001fb11:	e8 8b 18 ff ff       	call   c00113a1 <KePanic(char const*)>
c001fb16:	83 c4 10             	add    esp,0x10
c001fb19:	8d 76 00             	lea    esi,[esi+0x0]
c001fb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb22:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fb28:	85 c0                	test   eax,eax
c001fb2a:	75 34                	jne    c001fb60 <LinkedList<Device>::removeFirst()+0x8c>
c001fb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb48:	83 f8 01             	cmp    eax,0x1
c001fb4b:	74 27                	je     c001fb74 <LinkedList<Device>::removeFirst()+0xa0>
c001fb4d:	83 ec 0c             	sub    esp,0xc
c001fb50:	68 84 0a 02 c0       	push   0xc0020a84
c001fb55:	e8 47 18 ff ff       	call   c00113a1 <KePanic(char const*)>
c001fb5a:	83 c4 10             	add    esp,0x10
c001fb5d:	eb 15                	jmp    c001fb74 <LinkedList<Device>::removeFirst()+0xa0>
c001fb5f:	90                   	nop
c001fb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb66:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb70:	89 10                	mov    DWORD PTR [eax],edx
c001fb72:	66 90                	xchg   ax,ax
c001fb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb7b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb85:	8d 76 00             	lea    esi,[esi+0x0]
c001fb88:	83 c4 0c             	add    esp,0xc
c001fb8b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fb8c <CPU::~CPU()>:
c001fb8c:	83 ec 0c             	sub    esp,0xc
c001fb8f:	ba ec 1d 02 c0       	mov    edx,0xc0021dec
c001fb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb98:	89 10                	mov    DWORD PTR [eax],edx
c001fb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9e:	83 ec 0c             	sub    esp,0xc
c001fba1:	50                   	push   eax
c001fba2:	e8 cd ca fe ff       	call   c000c674 <Device::~Device()>
c001fba7:	83 c4 10             	add    esp,0x10
c001fbaa:	90                   	nop
c001fbab:	83 c4 0c             	add    esp,0xc
c001fbae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fbb0 <CPU::~CPU()>:
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	83 ec 0c             	sub    esp,0xc
c001fbb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbba:	e8 cd ff ff ff       	call   c001fb8c <CPU::~CPU()>
c001fbbf:	83 c4 10             	add    esp,0x10
c001fbc2:	83 ec 08             	sub    esp,0x8
c001fbc5:	68 94 11 00 00       	push   0x1194
c001fbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbce:	e8 45 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbd3:	83 c4 10             	add    esp,0x10
c001fbd6:	83 c4 0c             	add    esp,0xc
c001fbd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fbdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fbdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbe0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fbe3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fbe4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fbe4:	90                   	nop
c001fbe5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fbe8 <ThreadControlBlock::ThreadControlBlock()>:
c001fbe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fbf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fbfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc02:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fc09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc0d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fc14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc18:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fc1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc23:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fc27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc2b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fc2f:	90                   	nop
c001fc30:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fc34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fc34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc74:	90                   	nop
c001fc75:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fc76 <PCI::~PCI()>:
c001fc76:	83 ec 0c             	sub    esp,0xc
c001fc79:	ba cc 2c 02 c0       	mov    edx,0xc0022ccc
c001fc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc82:	89 10                	mov    DWORD PTR [eax],edx
c001fc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc88:	83 ec 0c             	sub    esp,0xc
c001fc8b:	50                   	push   eax
c001fc8c:	e8 7b c4 fe ff       	call   c000c10c <Bus::~Bus()>
c001fc91:	83 c4 10             	add    esp,0x10
c001fc94:	90                   	nop
c001fc95:	83 c4 0c             	add    esp,0xc
c001fc98:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fc9a <PCI::~PCI()>:
c001fc9a:	83 ec 0c             	sub    esp,0xc
c001fc9d:	83 ec 0c             	sub    esp,0xc
c001fca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca4:	e8 cd ff ff ff       	call   c001fc76 <PCI::~PCI()>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	83 ec 08             	sub    esp,0x8
c001fcaf:	68 5c 01 00 00       	push   0x15c
c001fcb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb8:	e8 5b ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcbd:	83 c4 10             	add    esp,0x10
c001fcc0:	83 c4 0c             	add    esp,0xc
c001fcc3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fcc4 <IDE::~IDE()>:
c001fcc4:	83 ec 0c             	sub    esp,0xc
c001fcc7:	ba 80 2d 02 c0       	mov    edx,0xc0022d80
c001fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd0:	89 10                	mov    DWORD PTR [eax],edx
c001fcd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd6:	83 ec 0c             	sub    esp,0xc
c001fcd9:	50                   	push   eax
c001fcda:	e8 0d ce fe ff       	call   c000caec <HardDiskController::~HardDiskController()>
c001fcdf:	83 c4 10             	add    esp,0x10
c001fce2:	90                   	nop
c001fce3:	83 c4 0c             	add    esp,0xc
c001fce6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fce8 <IDE::~IDE()>:
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	83 ec 0c             	sub    esp,0xc
c001fcee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcf2:	e8 cd ff ff ff       	call   c001fcc4 <IDE::~IDE()>
c001fcf7:	83 c4 10             	add    esp,0x10
c001fcfa:	83 ec 08             	sub    esp,0x8
c001fcfd:	68 70 02 00 00       	push   0x270
c001fd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd06:	e8 0d ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	83 c4 0c             	add    esp,0xc
c001fd11:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fd12 <SATABus::~SATABus()>:
c001fd12:	83 ec 0c             	sub    esp,0xc
c001fd15:	ba d0 2d 02 c0       	mov    edx,0xc0022dd0
c001fd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1e:	89 10                	mov    DWORD PTR [eax],edx
c001fd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd24:	83 ec 0c             	sub    esp,0xc
c001fd27:	50                   	push   eax
c001fd28:	e8 bf cd fe ff       	call   c000caec <HardDiskController::~HardDiskController()>
c001fd2d:	83 c4 10             	add    esp,0x10
c001fd30:	90                   	nop
c001fd31:	83 c4 0c             	add    esp,0xc
c001fd34:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fd36 <SATABus::~SATABus()>:
c001fd36:	83 ec 0c             	sub    esp,0xc
c001fd39:	83 ec 0c             	sub    esp,0xc
c001fd3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd40:	e8 cd ff ff ff       	call   c001fd12 <SATABus::~SATABus()>
c001fd45:	83 c4 10             	add    esp,0x10
c001fd48:	83 ec 08             	sub    esp,0x8
c001fd4b:	68 64 01 00 00       	push   0x164
c001fd50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd54:	e8 bf aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd59:	83 c4 10             	add    esp,0x10
c001fd5c:	83 c4 0c             	add    esp,0xc
c001fd5f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fd60 <ATA::~ATA()>:
c001fd60:	83 ec 0c             	sub    esp,0xc
c001fd63:	ba 10 2e 02 c0       	mov    edx,0xc0022e10
c001fd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6c:	89 10                	mov    DWORD PTR [eax],edx
c001fd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd72:	83 ec 0c             	sub    esp,0xc
c001fd75:	50                   	push   eax
c001fd76:	e8 53 ce fe ff       	call   c000cbce <PhysicalDisk::~PhysicalDisk()>
c001fd7b:	83 c4 10             	add    esp,0x10
c001fd7e:	90                   	nop
c001fd7f:	83 c4 0c             	add    esp,0xc
c001fd82:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fd84 <ATA::~ATA()>:
c001fd84:	83 ec 0c             	sub    esp,0xc
c001fd87:	83 ec 0c             	sub    esp,0xc
c001fd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd8e:	e8 cd ff ff ff       	call   c001fd60 <ATA::~ATA()>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	83 ec 08             	sub    esp,0x8
c001fd99:	68 7c 01 00 00       	push   0x17c
c001fd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda2:	e8 71 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	83 c4 0c             	add    esp,0xc
c001fdad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fdae <ATAPI::~ATAPI()>:
c001fdae:	83 ec 0c             	sub    esp,0xc
c001fdb1:	ba 58 2e 02 c0       	mov    edx,0xc0022e58
c001fdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdba:	89 10                	mov    DWORD PTR [eax],edx
c001fdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc0:	83 ec 0c             	sub    esp,0xc
c001fdc3:	50                   	push   eax
c001fdc4:	e8 05 ce fe ff       	call   c000cbce <PhysicalDisk::~PhysicalDisk()>
c001fdc9:	83 c4 10             	add    esp,0x10
c001fdcc:	90                   	nop
c001fdcd:	83 c4 0c             	add    esp,0xc
c001fdd0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fdd2 <ATAPI::~ATAPI()>:
c001fdd2:	83 ec 0c             	sub    esp,0xc
c001fdd5:	83 ec 0c             	sub    esp,0xc
c001fdd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fddc:	e8 cd ff ff ff       	call   c001fdae <ATAPI::~ATAPI()>
c001fde1:	83 c4 10             	add    esp,0x10
c001fde4:	83 ec 08             	sub    esp,0x8
c001fde7:	68 84 01 00 00       	push   0x184
c001fdec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf0:	e8 23 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdf5:	83 c4 10             	add    esp,0x10
c001fdf8:	83 c4 0c             	add    esp,0xc
c001fdfb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fdfc <SATA::~SATA()>:
c001fdfc:	83 ec 0c             	sub    esp,0xc
c001fdff:	ba 0c 2f 02 c0       	mov    edx,0xc0022f0c
c001fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe08:	89 10                	mov    DWORD PTR [eax],edx
c001fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0e:	83 ec 0c             	sub    esp,0xc
c001fe11:	50                   	push   eax
c001fe12:	e8 b7 cd fe ff       	call   c000cbce <PhysicalDisk::~PhysicalDisk()>
c001fe17:	83 c4 10             	add    esp,0x10
c001fe1a:	90                   	nop
c001fe1b:	83 c4 0c             	add    esp,0xc
c001fe1e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fe20 <SATA::~SATA()>:
c001fe20:	83 ec 0c             	sub    esp,0xc
c001fe23:	83 ec 0c             	sub    esp,0xc
c001fe26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe2a:	e8 cd ff ff ff       	call   c001fdfc <SATA::~SATA()>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	83 ec 08             	sub    esp,0x8
c001fe35:	68 7c 01 00 00       	push   0x17c
c001fe3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe3e:	e8 d5 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	83 c4 0c             	add    esp,0xc
c001fe49:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fe4a <SATAPI::~SATAPI()>:
c001fe4a:	83 ec 0c             	sub    esp,0xc
c001fe4d:	ba 30 30 02 c0       	mov    edx,0xc0023030
c001fe52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe56:	89 10                	mov    DWORD PTR [eax],edx
c001fe58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	50                   	push   eax
c001fe60:	e8 69 cd fe ff       	call   c000cbce <PhysicalDisk::~PhysicalDisk()>
c001fe65:	83 c4 10             	add    esp,0x10
c001fe68:	90                   	nop
c001fe69:	83 c4 0c             	add    esp,0xc
c001fe6c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fe6e <SATAPI::~SATAPI()>:
c001fe6e:	83 ec 0c             	sub    esp,0xc
c001fe71:	83 ec 0c             	sub    esp,0xc
c001fe74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe78:	e8 cd ff ff ff       	call   c001fe4a <SATAPI::~SATAPI()>
c001fe7d:	83 c4 10             	add    esp,0x10
c001fe80:	83 ec 08             	sub    esp,0x8
c001fe83:	68 84 01 00 00       	push   0x184
c001fe88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe8c:	e8 87 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe91:	83 c4 10             	add    esp,0x10
c001fe94:	83 c4 0c             	add    esp,0xc
c001fe97:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe98 <IOAPIC::~IOAPIC()>:
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	ba 70 30 02 c0       	mov    edx,0xc0023070
c001fea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea4:	89 10                	mov    DWORD PTR [eax],edx
c001fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaa:	83 ec 0c             	sub    esp,0xc
c001fead:	50                   	push   eax
c001feae:	e8 c1 c7 fe ff       	call   c000c674 <Device::~Device()>
c001feb3:	83 c4 10             	add    esp,0x10
c001feb6:	90                   	nop
c001feb7:	83 c4 0c             	add    esp,0xc
c001feba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001febc <IOAPIC::~IOAPIC()>:
c001febc:	83 ec 0c             	sub    esp,0xc
c001febf:	83 ec 0c             	sub    esp,0xc
c001fec2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fec6:	e8 cd ff ff ff       	call   c001fe98 <IOAPIC::~IOAPIC()>
c001fecb:	83 c4 10             	add    esp,0x10
c001fece:	83 ec 08             	sub    esp,0x8
c001fed1:	68 68 01 00 00       	push   0x168
c001fed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feda:	e8 39 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	83 c4 0c             	add    esp,0xc
c001fee5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fee8 <APICTimer::~APICTimer()>:
c001fee8:	83 ec 0c             	sub    esp,0xc
c001feeb:	ba b8 30 02 c0       	mov    edx,0xc00230b8
c001fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef4:	89 10                	mov    DWORD PTR [eax],edx
c001fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	50                   	push   eax
c001fefe:	e8 3d e2 fe ff       	call   c000e140 <Timer::~Timer()>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	90                   	nop
c001ff07:	83 c4 0c             	add    esp,0xc
c001ff0a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ff0c <APICTimer::~APICTimer()>:
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	83 ec 0c             	sub    esp,0xc
c001ff12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff16:	e8 cd ff ff ff       	call   c001fee8 <APICTimer::~APICTimer()>
c001ff1b:	83 c4 10             	add    esp,0x10
c001ff1e:	83 ec 08             	sub    esp,0x8
c001ff21:	68 60 01 00 00       	push   0x160
c001ff26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff2a:	e8 e9 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	83 c4 0c             	add    esp,0xc
c001ff35:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff38 <PIT::~PIT()>:
c001ff38:	83 ec 0c             	sub    esp,0xc
c001ff3b:	ba 08 31 02 c0       	mov    edx,0xc0023108
c001ff40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff44:	89 10                	mov    DWORD PTR [eax],edx
c001ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4a:	83 ec 0c             	sub    esp,0xc
c001ff4d:	50                   	push   eax
c001ff4e:	e8 ed e1 fe ff       	call   c000e140 <Timer::~Timer()>
c001ff53:	83 c4 10             	add    esp,0x10
c001ff56:	90                   	nop
c001ff57:	83 c4 0c             	add    esp,0xc
c001ff5a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ff5c <PIT::~PIT()>:
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	83 ec 0c             	sub    esp,0xc
c001ff62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff66:	e8 cd ff ff ff       	call   c001ff38 <PIT::~PIT()>
c001ff6b:	83 c4 10             	add    esp,0x10
c001ff6e:	83 ec 08             	sub    esp,0x8
c001ff71:	68 5c 01 00 00       	push   0x15c
c001ff76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff7a:	e8 99 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	83 c4 0c             	add    esp,0xc
c001ff85:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 1d 1f 02 c0       	mov    esi,0xc0021f1d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 39 1f 02 c0       	mov    esi,0xc0021f39
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
