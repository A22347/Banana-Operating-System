
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e3 fb 00 00       	call   c000fc03 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 87 02 00       	call   c00287d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 8e 93 02 c0       	mov    ebx,0xc002938e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 9c 93 02 c0    	cmp    ebx,0xc002939c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 db 02 c0       	mov    eax,0xc002db98
c0000049:	3d 98 db 02 c0       	cmp    eax,0xc002db98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 db 02 c0       	push   0xc002db98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 db 02 c0       	mov    eax,0xc002db98
c0000075:	2d 98 db 02 c0       	sub    eax,0xc002db98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 db 02 c0       	push   0xc002db98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e1c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a4 93 02 c0       	mov    ebx,0xc00293a4
c00000bb:	81 eb a0 93 02 c0    	sub    ebx,0xc00293a0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a0 93 02 c0       	mov    esi,0xc00293a0
c00000ca:	a1 cc e1 02 c0       	mov    eax,ds:0xc002e1cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc e1 02 c0       	mov    ds:0xc002e1cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc e1 02 c0       	mov    eax,ds:0xc002e1cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 db 02 c0       	push   0xc002db98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e1c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 e1 02 c0       	push   0xc002e1d0
c000012c:	68 98 db 02 c0       	push   0xc002db98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 45 d6 01 00       	call   c001d9e8 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 2c 29 01 00       	call   c0012ce7 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 23 d6 01 00       	call   c001d9e8 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 71 da 01 00       	call   c001de55 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 59 e0 01 00       	call   c001e446 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 e6 02 c0 	lgdtd  ds:0xc002e610
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 10 46 01 00       	call   c0014bf1 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>
c0000645:	66 90                	xchg   ax,ax
c0000647:	90                   	nop

c0000648 <memcmp>:
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000656:	85 f6                	test   esi,esi
c0000658:	74 1d                	je     c0000677 <memcmp+0x2f>
c000065a:	8a 08                	mov    cl,BYTE PTR [eax]
c000065c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000065f:	38 cb                	cmp    bl,cl
c0000661:	75 19                	jne    c000067c <memcmp+0x34>
c0000663:	01 c6                	add    esi,eax
c0000665:	eb 0a                	jmp    c0000671 <memcmp+0x29>
c0000667:	90                   	nop
c0000668:	8a 08                	mov    cl,BYTE PTR [eax]
c000066a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000066d:	38 d9                	cmp    cl,bl
c000066f:	75 0b                	jne    c000067c <memcmp+0x34>
c0000671:	40                   	inc    eax
c0000672:	42                   	inc    edx
c0000673:	39 f0                	cmp    eax,esi
c0000675:	75 f1                	jne    c0000668 <memcmp+0x20>
c0000677:	31 c0                	xor    eax,eax
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    
c000067c:	0f b6 c1             	movzx  eax,cl
c000067f:	29 d8                	sub    eax,ebx
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memmove>:
c0000684:	55                   	push   ebp
c0000685:	57                   	push   edi
c0000686:	56                   	push   esi
c0000687:	53                   	push   ebx
c0000688:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000068c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000694:	39 dd                	cmp    ebp,ebx
c0000696:	0f 83 80 00 00 00    	jae    c000071c <memmove+0x98>
c000069c:	85 d2                	test   edx,edx
c000069e:	74 74                	je     c0000714 <memmove+0x90>
c00006a0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006a6:	39 cd                	cmp    ebp,ecx
c00006a8:	0f 93 c1             	setae  cl
c00006ab:	39 f3                	cmp    ebx,esi
c00006ad:	0f 93 c0             	setae  al
c00006b0:	89 c6                	mov    esi,eax
c00006b2:	09 ce                	or     esi,ecx
c00006b4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006b7:	89 f0                	mov    eax,esi
c00006b9:	83 f9 0c             	cmp    ecx,0xc
c00006bc:	0f 97 c1             	seta   cl
c00006bf:	84 c8                	test   al,cl
c00006c1:	74 75                	je     c0000738 <memmove+0xb4>
c00006c3:	89 e9                	mov    ecx,ebp
c00006c5:	09 d9                	or     ecx,ebx
c00006c7:	83 e1 03             	and    ecx,0x3
c00006ca:	75 6c                	jne    c0000738 <memmove+0xb4>
c00006cc:	89 d7                	mov    edi,edx
c00006ce:	89 d9                	mov    ecx,ebx
c00006d0:	83 e7 fc             	and    edi,0xfffffffc
c00006d3:	89 ee                	mov    esi,ebp
c00006d5:	01 df                	add    edi,ebx
c00006d7:	90                   	nop
c00006d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006da:	83 c6 04             	add    esi,0x4
c00006dd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e0:	83 c1 04             	add    ecx,0x4
c00006e3:	39 f9                	cmp    ecx,edi
c00006e5:	75 f1                	jne    c00006d8 <memmove+0x54>
c00006e7:	89 d1                	mov    ecx,edx
c00006e9:	89 d7                	mov    edi,edx
c00006eb:	83 e1 fc             	and    ecx,0xfffffffc
c00006ee:	29 cf                	sub    edi,ecx
c00006f0:	01 cb                	add    ebx,ecx
c00006f2:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006f6:	39 ca                	cmp    edx,ecx
c00006f8:	74 1a                	je     c0000714 <memmove+0x90>
c00006fa:	8a 03                	mov    al,BYTE PTR [ebx]
c00006fc:	83 ff 01             	cmp    edi,0x1
c00006ff:	88 06                	mov    BYTE PTR [esi],al
c0000701:	74 11                	je     c0000714 <memmove+0x90>
c0000703:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000706:	83 ff 02             	cmp    edi,0x2
c0000709:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000070c:	74 06                	je     c0000714 <memmove+0x90>
c000070e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000711:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000714:	5b                   	pop    ebx
c0000715:	89 e8                	mov    eax,ebp
c0000717:	5e                   	pop    esi
c0000718:	5f                   	pop    edi
c0000719:	5d                   	pop    ebp
c000071a:	c3                   	ret    
c000071b:	90                   	nop
c000071c:	76 f6                	jbe    c0000714 <memmove+0x90>
c000071e:	85 d2                	test   edx,edx
c0000720:	74 f2                	je     c0000714 <memmove+0x90>
c0000722:	4b                   	dec    ebx
c0000723:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000726:	66 90                	xchg   ax,ax
c0000728:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000072e:	4a                   	dec    edx
c000072f:	75 f7                	jne    c0000728 <memmove+0xa4>
c0000731:	5b                   	pop    ebx
c0000732:	89 e8                	mov    eax,ebp
c0000734:	5e                   	pop    esi
c0000735:	5f                   	pop    edi
c0000736:	5d                   	pop    ebp
c0000737:	c3                   	ret    
c0000738:	01 ea                	add    edx,ebp
c000073a:	89 e9                	mov    ecx,ebp
c000073c:	8a 03                	mov    al,BYTE PTR [ebx]
c000073e:	41                   	inc    ecx
c000073f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000742:	43                   	inc    ebx
c0000743:	39 d1                	cmp    ecx,edx
c0000745:	75 f5                	jne    c000073c <memmove+0xb8>
c0000747:	eb cb                	jmp    c0000714 <memmove+0x90>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]

c000074c <memcpy>:
c000074c:	57                   	push   edi
c000074d:	56                   	push   esi
c000074e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000752:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000756:	a8 03                	test   al,0x3
c0000758:	74 12                	je     c000076c <memcpy+0x20>
c000075a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075e:	89 c1                	mov    ecx,eax
c0000760:	fc                   	cld    
c0000761:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000763:	29 c7                	sub    edi,eax
c0000765:	5e                   	pop    esi
c0000766:	89 f8                	mov    eax,edi
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax
c000076c:	89 c1                	mov    ecx,eax
c000076e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000772:	c1 e9 02             	shr    ecx,0x2
c0000775:	fc                   	cld    
c0000776:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000778:	29 c7                	sub    edi,eax
c000077a:	5e                   	pop    esi
c000077b:	89 f8                	mov    eax,edi
c000077d:	5f                   	pop    edi
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <memset>:
c0000780:	57                   	push   edi
c0000781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000785:	85 c9                	test   ecx,ecx
c0000787:	74 0b                	je     c0000794 <memset+0x14>
c0000789:	fc                   	cld    
c000078a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000792:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000798:	5f                   	pop    edi
c0000799:	c3                   	ret    
c000079a:	66 90                	xchg   ax,ax

c000079c <strlen>:
c000079c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007a5:	74 09                	je     c00007b0 <strlen+0x14>
c00007a7:	90                   	nop
c00007a8:	40                   	inc    eax
c00007a9:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007ad:	75 f9                	jne    c00007a8 <strlen+0xc>
c00007af:	c3                   	ret    
c00007b0:	c3                   	ret    
c00007b1:	8d 76 00             	lea    esi,[esi+0x0]

c00007b4 <strpbrk>:
c00007b4:	57                   	push   edi
c00007b5:	56                   	push   esi
c00007b6:	53                   	push   ebx
c00007b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007bf:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007c1:	84 db                	test   bl,bl
c00007c3:	74 21                	je     c00007e6 <strpbrk+0x32>
c00007c5:	8a 07                	mov    al,BYTE PTR [edi]
c00007c7:	84 c0                	test   al,al
c00007c9:	74 14                	je     c00007df <strpbrk+0x2b>
c00007cb:	38 d8                	cmp    al,bl
c00007cd:	74 19                	je     c00007e8 <strpbrk+0x34>
c00007cf:	89 fa                	mov    edx,edi
c00007d1:	eb 05                	jmp    c00007d8 <strpbrk+0x24>
c00007d3:	90                   	nop
c00007d4:	38 d9                	cmp    cl,bl
c00007d6:	74 10                	je     c00007e8 <strpbrk+0x34>
c00007d8:	42                   	inc    edx
c00007d9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007db:	84 c9                	test   cl,cl
c00007dd:	75 f5                	jne    c00007d4 <strpbrk+0x20>
c00007df:	46                   	inc    esi
c00007e0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007e2:	84 db                	test   bl,bl
c00007e4:	75 e1                	jne    c00007c7 <strpbrk+0x13>
c00007e6:	31 f6                	xor    esi,esi
c00007e8:	89 f0                	mov    eax,esi
c00007ea:	5b                   	pop    ebx
c00007eb:	5e                   	pop    esi
c00007ec:	5f                   	pop    edi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strtok>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007fa:	85 db                	test   ebx,ebx
c00007fc:	75 07                	jne    c0000805 <strtok+0x15>
c00007fe:	eb 2c                	jmp    c000082c <strtok+0x3c>
c0000800:	43                   	inc    ebx
c0000801:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000805:	56                   	push   esi
c0000806:	53                   	push   ebx
c0000807:	e8 a8 ff ff ff       	call   c00007b4 <strpbrk>
c000080c:	5a                   	pop    edx
c000080d:	a3 e8 e1 02 c0       	mov    ds:0xc002e1e8,eax
c0000812:	59                   	pop    ecx
c0000813:	39 d8                	cmp    eax,ebx
c0000815:	74 e9                	je     c0000800 <strtok+0x10>
c0000817:	85 c0                	test   eax,eax
c0000819:	74 1b                	je     c0000836 <strtok+0x46>
c000081b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000081e:	8d 50 01             	lea    edx,[eax+0x1]
c0000821:	89 d8                	mov    eax,ebx
c0000823:	89 15 e8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1e8,edx
c0000829:	5b                   	pop    ebx
c000082a:	5e                   	pop    esi
c000082b:	c3                   	ret    
c000082c:	8b 1d e8 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1e8
c0000832:	85 db                	test   ebx,ebx
c0000834:	75 cf                	jne    c0000805 <strtok+0x15>
c0000836:	31 c0                	xor    eax,eax
c0000838:	5b                   	pop    ebx
c0000839:	5e                   	pop    esi
c000083a:	c3                   	ret    
c000083b:	90                   	nop

c000083c <strcpy>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000845:	89 c3                	mov    ebx,eax
c0000847:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000849:	84 d2                	test   dl,dl
c000084b:	74 0d                	je     c000085a <strcpy+0x1e>
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	88 13                	mov    BYTE PTR [ebx],dl
c0000852:	41                   	inc    ecx
c0000853:	43                   	inc    ebx
c0000854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000856:	84 d2                	test   dl,dl
c0000858:	75 f6                	jne    c0000850 <strcpy+0x14>
c000085a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000085d:	5b                   	pop    ebx
c000085e:	c3                   	ret    
c000085f:	90                   	nop

c0000860 <strncpy>:
c0000860:	55                   	push   ebp
c0000861:	57                   	push   edi
c0000862:	56                   	push   esi
c0000863:	53                   	push   ebx
c0000864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000868:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000086c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000870:	85 c0                	test   eax,eax
c0000872:	74 39                	je     c00008ad <strncpy+0x4d>
c0000874:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000876:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000879:	8d 55 01             	lea    edx,[ebp+0x1]
c000087c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000087f:	84 db                	test   bl,bl
c0000881:	74 31                	je     c00008b4 <strncpy+0x54>
c0000883:	85 c9                	test   ecx,ecx
c0000885:	74 26                	je     c00008ad <strncpy+0x4d>
c0000887:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000088a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000088d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000890:	8d 46 02             	lea    eax,[esi+0x2]
c0000893:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000896:	84 db                	test   bl,bl
c0000898:	75 0f                	jne    c00008a9 <strncpy+0x49>
c000089a:	eb 18                	jmp    c00008b4 <strncpy+0x54>
c000089c:	40                   	inc    eax
c000089d:	42                   	inc    edx
c000089e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008a1:	49                   	dec    ecx
c00008a2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a5:	84 db                	test   bl,bl
c00008a7:	74 0b                	je     c00008b4 <strncpy+0x54>
c00008a9:	85 c9                	test   ecx,ecx
c00008ab:	75 ef                	jne    c000089c <strncpy+0x3c>
c00008ad:	5b                   	pop    ebx
c00008ae:	89 e8                	mov    eax,ebp
c00008b0:	5e                   	pop    esi
c00008b1:	5f                   	pop    edi
c00008b2:	5d                   	pop    ebp
c00008b3:	c3                   	ret    
c00008b4:	85 c9                	test   ecx,ecx
c00008b6:	74 f5                	je     c00008ad <strncpy+0x4d>
c00008b8:	fc                   	cld    
c00008b9:	31 c0                	xor    eax,eax
c00008bb:	89 d7                	mov    edi,edx
c00008bd:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008bf:	89 e8                	mov    eax,ebp
c00008c1:	5b                   	pop    ebx
c00008c2:	5e                   	pop    esi
c00008c3:	5f                   	pop    edi
c00008c4:	5d                   	pop    ebp
c00008c5:	c3                   	ret    
c00008c6:	66 90                	xchg   ax,ax

c00008c8 <strcmp>:
c00008c8:	56                   	push   esi
c00008c9:	53                   	push   ebx
c00008ca:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008d4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008d7:	38 d1                	cmp    cl,dl
c00008d9:	75 1d                	jne    c00008f8 <strcmp+0x30>
c00008db:	84 c9                	test   cl,cl
c00008dd:	74 21                	je     c0000900 <strcmp+0x38>
c00008df:	b8 01 00 00 00       	mov    eax,0x1
c00008e4:	eb 07                	jmp    c00008ed <strcmp+0x25>
c00008e6:	66 90                	xchg   ax,ax
c00008e8:	40                   	inc    eax
c00008e9:	84 d2                	test   dl,dl
c00008eb:	74 13                	je     c0000900 <strcmp+0x38>
c00008ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008f0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008f4:	38 ca                	cmp    dl,cl
c00008f6:	74 f0                	je     c00008e8 <strcmp+0x20>
c00008f8:	0f b6 c2             	movzx  eax,dl
c00008fb:	5b                   	pop    ebx
c00008fc:	29 c8                	sub    eax,ecx
c00008fe:	5e                   	pop    esi
c00008ff:	c3                   	ret    
c0000900:	31 c0                	xor    eax,eax
c0000902:	5b                   	pop    ebx
c0000903:	5e                   	pop    esi
c0000904:	c3                   	ret    
c0000905:	8d 76 00             	lea    esi,[esi+0x0]

c0000908 <strchr>:
c0000908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000090c:	8a 10                	mov    dl,BYTE PTR [eax]
c000090e:	84 d2                	test   dl,dl
c0000910:	74 15                	je     c0000927 <strchr+0x1f>
c0000912:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000916:	38 ca                	cmp    dl,cl
c0000918:	75 06                	jne    c0000920 <strchr+0x18>
c000091a:	eb 0e                	jmp    c000092a <strchr+0x22>
c000091c:	38 ca                	cmp    dl,cl
c000091e:	74 09                	je     c0000929 <strchr+0x21>
c0000920:	40                   	inc    eax
c0000921:	8a 10                	mov    dl,BYTE PTR [eax]
c0000923:	84 d2                	test   dl,dl
c0000925:	75 f5                	jne    c000091c <strchr+0x14>
c0000927:	31 c0                	xor    eax,eax
c0000929:	c3                   	ret    
c000092a:	c3                   	ret    
c000092b:	90                   	nop

c000092c <strncmp>:
c000092c:	57                   	push   edi
c000092d:	56                   	push   esi
c000092e:	53                   	push   ebx
c000092f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000937:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000093b:	85 ff                	test   edi,edi
c000093d:	74 28                	je     c0000967 <strncmp+0x3b>
c000093f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000941:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000944:	38 d1                	cmp    cl,dl
c0000946:	75 28                	jne    c0000970 <strncmp+0x44>
c0000948:	8d 46 01             	lea    eax,[esi+0x1]
c000094b:	84 c9                	test   cl,cl
c000094d:	74 18                	je     c0000967 <strncmp+0x3b>
c000094f:	01 fe                	add    esi,edi
c0000951:	eb 0f                	jmp    c0000962 <strncmp+0x36>
c0000953:	90                   	nop
c0000954:	8a 10                	mov    dl,BYTE PTR [eax]
c0000956:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000959:	38 ca                	cmp    dl,cl
c000095b:	75 13                	jne    c0000970 <strncmp+0x44>
c000095d:	40                   	inc    eax
c000095e:	84 d2                	test   dl,dl
c0000960:	74 05                	je     c0000967 <strncmp+0x3b>
c0000962:	43                   	inc    ebx
c0000963:	39 c6                	cmp    esi,eax
c0000965:	75 ed                	jne    c0000954 <strncmp+0x28>
c0000967:	5b                   	pop    ebx
c0000968:	31 c0                	xor    eax,eax
c000096a:	5e                   	pop    esi
c000096b:	5f                   	pop    edi
c000096c:	c3                   	ret    
c000096d:	8d 76 00             	lea    esi,[esi+0x0]
c0000970:	5b                   	pop    ebx
c0000971:	0f b6 c2             	movzx  eax,dl
c0000974:	5e                   	pop    esi
c0000975:	29 c8                	sub    eax,ecx
c0000977:	5f                   	pop    edi
c0000978:	c3                   	ret    
c0000979:	8d 76 00             	lea    esi,[esi+0x0]

c000097c <strcat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000982:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000986:	89 c3                	mov    ebx,eax
c0000988:	eb 04                	jmp    c000098e <strcat+0x12>
c000098a:	66 90                	xchg   ax,ax
c000098c:	89 d3                	mov    ebx,edx
c000098e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f5                	jne    c000098c <strcat+0x10>
c0000997:	31 d2                	xor    edx,edx
c0000999:	8d 76 00             	lea    esi,[esi+0x0]
c000099c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000099f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009a2:	42                   	inc    edx
c00009a3:	84 c9                	test   cl,cl
c00009a5:	75 f5                	jne    c000099c <strcat+0x20>
c00009a7:	5b                   	pop    ebx
c00009a8:	5e                   	pop    esi
c00009a9:	c3                   	ret    
c00009aa:	66 90                	xchg   ax,ax

c00009ac <strncat>:
c00009ac:	56                   	push   esi
c00009ad:	53                   	push   ebx
c00009ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009ba:	85 f6                	test   esi,esi
c00009bc:	74 1e                	je     c00009dc <strncat+0x30>
c00009be:	89 c2                	mov    edx,eax
c00009c0:	42                   	inc    edx
c00009c1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009c5:	75 f9                	jne    c00009c0 <strncat+0x14>
c00009c7:	01 ce                	add    esi,ecx
c00009c9:	eb 06                	jmp    c00009d1 <strncat+0x25>
c00009cb:	90                   	nop
c00009cc:	39 f1                	cmp    ecx,esi
c00009ce:	74 10                	je     c00009e0 <strncat+0x34>
c00009d0:	42                   	inc    edx
c00009d1:	41                   	inc    ecx
c00009d2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009d5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d8:	84 db                	test   bl,bl
c00009da:	75 f0                	jne    c00009cc <strncat+0x20>
c00009dc:	5b                   	pop    ebx
c00009dd:	5e                   	pop    esi
c00009de:	c3                   	ret    
c00009df:	90                   	nop
c00009e0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009e3:	5b                   	pop    ebx
c00009e4:	5e                   	pop    esi
c00009e5:	c3                   	ret    
c00009e6:	66 90                	xchg   ax,ax

c00009e8 <strstr>:
c00009e8:	57                   	push   edi
c00009e9:	56                   	push   esi
c00009ea:	53                   	push   ebx
c00009eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009f3:	57                   	push   edi
c00009f4:	e8 a3 fd ff ff       	call   c000079c <strlen>
c00009f9:	59                   	pop    ecx
c00009fa:	85 c0                	test   eax,eax
c00009fc:	74 2a                	je     c0000a28 <strstr+0x40>
c00009fe:	89 c6                	mov    esi,eax
c0000a00:	eb 12                	jmp    c0000a14 <strstr+0x2c>
c0000a02:	66 90                	xchg   ax,ax
c0000a04:	56                   	push   esi
c0000a05:	57                   	push   edi
c0000a06:	53                   	push   ebx
c0000a07:	e8 3c fc ff ff       	call   c0000648 <memcmp>
c0000a0c:	83 c4 0c             	add    esp,0xc
c0000a0f:	85 c0                	test   eax,eax
c0000a11:	74 15                	je     c0000a28 <strstr+0x40>
c0000a13:	43                   	inc    ebx
c0000a14:	53                   	push   ebx
c0000a15:	e8 82 fd ff ff       	call   c000079c <strlen>
c0000a1a:	5a                   	pop    edx
c0000a1b:	39 f0                	cmp    eax,esi
c0000a1d:	73 e5                	jae    c0000a04 <strstr+0x1c>
c0000a1f:	5b                   	pop    ebx
c0000a20:	31 c0                	xor    eax,eax
c0000a22:	5e                   	pop    esi
c0000a23:	5f                   	pop    edi
c0000a24:	c3                   	ret    
c0000a25:	8d 76 00             	lea    esi,[esi+0x0]
c0000a28:	89 d8                	mov    eax,ebx
c0000a2a:	5b                   	pop    ebx
c0000a2b:	5e                   	pop    esi
c0000a2c:	5f                   	pop    edi
c0000a2d:	c3                   	ret    
c0000a2e:	66 90                	xchg   ax,ax

c0000a30 <toupper>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 c0 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6c40],0x2
c0000a3e:	74 03                	je     c0000a43 <toupper+0x13>
c0000a40:	83 e8 20             	sub    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <tolower>:
c0000a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a48:	0f b6 d0             	movzx  edx,al
c0000a4b:	f6 82 c0 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6c40],0x1
c0000a52:	74 03                	je     c0000a57 <tolower+0x13>
c0000a54:	83 c0 20             	add    eax,0x20
c0000a57:	c3                   	ret    

c0000a58 <simple_strtoul>:
c0000a58:	55                   	push   ebp
c0000a59:	57                   	push   edi
c0000a5a:	56                   	push   esi
c0000a5b:	53                   	push   ebx
c0000a5c:	83 ec 08             	sub    esp,0x8
c0000a5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a67:	90                   	nop
c0000a68:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a6b:	f6 82 c0 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6c40],0x8
c0000a72:	75 05                	jne    c0000a79 <simple_strtoul+0x21>
c0000a74:	80 fa 09             	cmp    dl,0x9
c0000a77:	75 03                	jne    c0000a7c <simple_strtoul+0x24>
c0000a79:	41                   	inc    ecx
c0000a7a:	eb ec                	jmp    c0000a68 <simple_strtoul+0x10>
c0000a7c:	80 fa 2d             	cmp    dl,0x2d
c0000a7f:	0f 84 1b 01 00 00    	je     c0000ba0 <simple_strtoul+0x148>
c0000a85:	80 fa 2b             	cmp    dl,0x2b
c0000a88:	0f 84 c2 00 00 00    	je     c0000b50 <simple_strtoul+0xf8>
c0000a8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a96:	85 f6                	test   esi,esi
c0000a98:	0f 85 c3 00 00 00    	jne    c0000b61 <simple_strtoul+0x109>
c0000a9e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aa0:	80 fa 30             	cmp    dl,0x30
c0000aa3:	0f 84 47 01 00 00    	je     c0000bf0 <simple_strtoul+0x198>
c0000aa9:	be 0a 00 00 00       	mov    esi,0xa
c0000aae:	84 d2                	test   dl,dl
c0000ab0:	0f 84 6f 01 00 00    	je     c0000c25 <simple_strtoul+0x1cd>
c0000ab6:	31 ed                	xor    ebp,ebp
c0000ab8:	31 ff                	xor    edi,edi
c0000aba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ac1:	eb 2b                	jmp    c0000aee <simple_strtoul+0x96>
c0000ac3:	90                   	nop
c0000ac4:	83 eb 30             	sub    ebx,0x30
c0000ac7:	39 f3                	cmp    ebx,esi
c0000ac9:	73 4d                	jae    c0000b18 <simple_strtoul+0xc0>
c0000acb:	31 d2                	xor    edx,edx
c0000acd:	89 d8                	mov    eax,ebx
c0000acf:	f7 d0                	not    eax
c0000ad1:	f7 f6                	div    esi
c0000ad3:	39 f8                	cmp    eax,edi
c0000ad5:	0f 82 b1 00 00 00    	jb     c0000b8c <simple_strtoul+0x134>
c0000adb:	0f af fe             	imul   edi,esi
c0000ade:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ae5:	01 df                	add    edi,ebx
c0000ae7:	41                   	inc    ecx
c0000ae8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aea:	84 d2                	test   dl,dl
c0000aec:	74 2a                	je     c0000b18 <simple_strtoul+0xc0>
c0000aee:	0f b6 da             	movzx  ebx,dl
c0000af1:	f6 83 c0 93 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6c40],0x4
c0000af8:	75 ca                	jne    c0000ac4 <simple_strtoul+0x6c>
c0000afa:	0f be d2             	movsx  edx,dl
c0000afd:	52                   	push   edx
c0000afe:	e8 2d ff ff ff       	call   c0000a30 <toupper>
c0000b03:	5b                   	pop    ebx
c0000b04:	0f b6 d0             	movzx  edx,al
c0000b07:	f6 82 c0 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6c40],0x1
c0000b0e:	74 08                	je     c0000b18 <simple_strtoul+0xc0>
c0000b10:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b13:	39 f3                	cmp    ebx,esi
c0000b15:	72 b4                	jb     c0000acb <simple_strtoul+0x73>
c0000b17:	90                   	nop
c0000b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b1c:	85 c0                	test   eax,eax
c0000b1e:	74 14                	je     c0000b34 <simple_strtoul+0xdc>
c0000b20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b23:	09 f8                	or     eax,edi
c0000b25:	75 71                	jne    c0000b98 <simple_strtoul+0x140>
c0000b27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b2f:	31 ff                	xor    edi,edi
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	90                   	nop
c0000b34:	4d                   	dec    ebp
c0000b35:	75 05                	jne    c0000b3c <simple_strtoul+0xe4>
c0000b37:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b3c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b41:	75 02                	jne    c0000b45 <simple_strtoul+0xed>
c0000b43:	f7 df                	neg    edi
c0000b45:	83 c4 08             	add    esp,0x8
c0000b48:	89 f8                	mov    eax,edi
c0000b4a:	5b                   	pop    ebx
c0000b4b:	5e                   	pop    esi
c0000b4c:	5f                   	pop    edi
c0000b4d:	5d                   	pop    ebp
c0000b4e:	c3                   	ret    
c0000b4f:	90                   	nop
c0000b50:	41                   	inc    ecx
c0000b51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b59:	85 f6                	test   esi,esi
c0000b5b:	0f 84 3d ff ff ff    	je     c0000a9e <simple_strtoul+0x46>
c0000b61:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b64:	83 f8 22             	cmp    eax,0x22
c0000b67:	77 6a                	ja     c0000bd3 <simple_strtoul+0x17b>
c0000b69:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b6b:	83 fe 08             	cmp    esi,0x8
c0000b6e:	0f 84 a2 00 00 00    	je     c0000c16 <simple_strtoul+0x1be>
c0000b74:	83 fe 10             	cmp    esi,0x10
c0000b77:	0f 85 31 ff ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000b7d:	80 fa 30             	cmp    dl,0x30
c0000b80:	74 2c                	je     c0000bae <simple_strtoul+0x156>
c0000b82:	be 10 00 00 00       	mov    esi,0x10
c0000b87:	e9 22 ff ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000b8c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b91:	31 ff                	xor    edi,edi
c0000b93:	e9 4f ff ff ff       	jmp    c0000ae7 <simple_strtoul+0x8f>
c0000b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b9c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b9e:	eb 94                	jmp    c0000b34 <simple_strtoul+0xdc>
c0000ba0:	41                   	inc    ecx
c0000ba1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba9:	e9 e8 fe ff ff       	jmp    c0000a96 <simple_strtoul+0x3e>
c0000bae:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bb2:	88 04 24             	mov    BYTE PTR [esp],al
c0000bb5:	50                   	push   eax
c0000bb6:	e8 89 fe ff ff       	call   c0000a44 <tolower>
c0000bbb:	5e                   	pop    esi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	0f 84 84 00 00 00    	je     c0000c49 <simple_strtoul+0x1f1>
c0000bc5:	41                   	inc    ecx
c0000bc6:	be 10 00 00 00       	mov    esi,0x10
c0000bcb:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bce:	e9 db fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000bd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bd7:	85 ff                	test   edi,edi
c0000bd9:	74 5c                	je     c0000c37 <simple_strtoul+0x1df>
c0000bdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bdf:	85 c9                	test   ecx,ecx
c0000be1:	75 4e                	jne    c0000c31 <simple_strtoul+0x1d9>
c0000be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be9:	31 ff                	xor    edi,edi
c0000beb:	e9 4c ff ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000bf0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bf4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bf7:	50                   	push   eax
c0000bf8:	e8 47 fe ff ff       	call   c0000a44 <tolower>
c0000bfd:	5d                   	pop    ebp
c0000bfe:	83 f8 78             	cmp    eax,0x78
c0000c01:	74 3b                	je     c0000c3e <simple_strtoul+0x1e6>
c0000c03:	41                   	inc    ecx
c0000c04:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c07:	80 fa 30             	cmp    dl,0x30
c0000c0a:	74 13                	je     c0000c1f <simple_strtoul+0x1c7>
c0000c0c:	be 08 00 00 00       	mov    esi,0x8
c0000c11:	e9 98 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>
c0000c16:	80 fa 30             	cmp    dl,0x30
c0000c19:	0f 85 8f fe ff ff    	jne    c0000aae <simple_strtoul+0x56>
c0000c1f:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c22:	41                   	inc    ecx
c0000c23:	eb e7                	jmp    c0000c0c <simple_strtoul+0x1b4>
c0000c25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c29:	85 d2                	test   edx,edx
c0000c2b:	74 0a                	je     c0000c37 <simple_strtoul+0x1df>
c0000c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c35:	89 30                	mov    DWORD PTR [eax],esi
c0000c37:	31 ff                	xor    edi,edi
c0000c39:	e9 fe fe ff ff       	jmp    c0000b3c <simple_strtoul+0xe4>
c0000c3e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c41:	83 c1 02             	add    ecx,0x2
c0000c44:	e9 34 ff ff ff       	jmp    c0000b7d <simple_strtoul+0x125>
c0000c49:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c4c:	be 10 00 00 00       	mov    esi,0x10
c0000c51:	83 c1 02             	add    ecx,0x2
c0000c54:	e9 55 fe ff ff       	jmp    c0000aae <simple_strtoul+0x56>

c0000c59 <largebin_index>:
c0000c59:	89 c2                	mov    edx,eax
c0000c5b:	c1 ea 08             	shr    edx,0x8
c0000c5e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c64:	77 10                	ja     c0000c76 <largebin_index+0x1d>
c0000c66:	0f bd d2             	bsr    edx,edx
c0000c69:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c6c:	d3 e8                	shr    eax,cl
c0000c6e:	83 e0 03             	and    eax,0x3
c0000c71:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c75:	c3                   	ret    
c0000c76:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c7b:	c3                   	ret    

c0000c7c <malloc_init_state>:
c0000c7c:	53                   	push   ebx
c0000c7d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c80:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c86:	89 d1                	mov    ecx,edx
c0000c88:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c8b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c8e:	83 c2 08             	add    edx,0x8
c0000c91:	39 da                	cmp    edx,ebx
c0000c93:	75 f3                	jne    c0000c88 <malloc_init_state+0xc>
c0000c95:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c97:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ca1:	83 e2 03             	and    edx,0x3
c0000ca4:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cae:	83 ca 48             	or     edx,0x48
c0000cb1:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cbb:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cc5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ccc:	89 10                	mov    DWORD PTR [eax],edx
c0000cce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cd1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cdb:	5b                   	pop    ebx
c0000cdc:	c3                   	ret    

c0000cdd <malloc_consolidate>:
c0000cdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cdf:	85 d2                	test   edx,edx
c0000ce1:	0f 84 d8 00 00 00    	je     c0000dbf <malloc_consolidate+0xe2>
c0000ce7:	55                   	push   ebp
c0000ce8:	83 e2 fd             	and    edx,0xfffffffd
c0000ceb:	57                   	push   edi
c0000cec:	89 c5                	mov    ebp,eax
c0000cee:	56                   	push   esi
c0000cef:	8d 78 34             	lea    edi,[eax+0x34]
c0000cf2:	53                   	push   ebx
c0000cf3:	83 ec 10             	sub    esp,0x10
c0000cf6:	89 10                	mov    DWORD PTR [eax],edx
c0000cf8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cfc:	c1 ea 03             	shr    edx,0x3
c0000cff:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d03:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d07:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d0a:	85 d2                	test   edx,edx
c0000d0c:	0f 84 98 00 00 00    	je     c0000daa <malloc_consolidate+0xcd>
c0000d12:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d19:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d1c:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d1f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d23:	89 f9                	mov    ecx,edi
c0000d25:	83 e1 fe             	and    ecx,0xfffffffe
c0000d28:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d2e:	83 e3 fc             	and    ebx,0xfffffffc
c0000d31:	83 e7 01             	and    edi,0x1
c0000d34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d37:	75 14                	jne    c0000d4d <malloc_consolidate+0x70>
c0000d39:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d3b:	29 fa                	sub    edx,edi
c0000d3d:	01 f9                	add    ecx,edi
c0000d3f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d42:	89 fb                	mov    ebx,edi
c0000d44:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d47:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d4a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d4d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d50:	74 40                	je     c0000d92 <malloc_consolidate+0xb5>
c0000d52:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d55:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d58:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d5c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d5f:	83 e7 01             	and    edi,0x1
c0000d62:	75 0e                	jne    c0000d72 <malloc_consolidate+0x95>
c0000d64:	01 d9                	add    ecx,ebx
c0000d66:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d6f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d72:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d75:	89 ce                	mov    esi,ecx
c0000d77:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d7a:	83 ce 01             	or     esi,0x1
c0000d7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d80:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d83:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d86:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d8a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d8d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d90:	eb 0c                	jmp    c0000d9e <malloc_consolidate+0xc1>
c0000d92:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d95:	83 c9 01             	or     ecx,0x1
c0000d98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d9b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000da2:	85 d2                	test   edx,edx
c0000da4:	0f 85 6f ff ff ff    	jne    c0000d19 <malloc_consolidate+0x3c>
c0000daa:	83 c5 04             	add    ebp,0x4
c0000dad:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000db1:	0f 85 50 ff ff ff    	jne    c0000d07 <malloc_consolidate+0x2a>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	5b                   	pop    ebx
c0000dbb:	5e                   	pop    esi
c0000dbc:	5f                   	pop    edi
c0000dbd:	5d                   	pop    ebp
c0000dbe:	c3                   	ret    
c0000dbf:	e9 b8 fe ff ff       	jmp    c0000c7c <malloc_init_state>

c0000dc4 <dlfree>:
c0000dc4:	57                   	push   edi
c0000dc5:	56                   	push   esi
c0000dc6:	53                   	push   ebx
c0000dc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dcb:	85 db                	test   ebx,ebx
c0000dcd:	0f 84 e2 00 00 00    	je     c0000eb5 <dlfree+0xf1>
c0000dd3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dd6:	8b 0d 00 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e200
c0000ddc:	89 f0                	mov    eax,esi
c0000dde:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000de1:	83 e0 fc             	and    eax,0xfffffffc
c0000de4:	39 c1                	cmp    ecx,eax
c0000de6:	72 24                	jb     c0000e0c <dlfree+0x48>
c0000de8:	83 c9 03             	or     ecx,0x3
c0000deb:	c1 e8 03             	shr    eax,0x3
c0000dee:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c0000df4:	83 e8 02             	sub    eax,0x2
c0000df7:	8b 0c 85 04 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1dfc]
c0000dfe:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e00:	89 14 85 04 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1dfc],edx
c0000e07:	e9 a9 00 00 00       	jmp    c0000eb5 <dlfree+0xf1>
c0000e0c:	83 e6 02             	and    esi,0x2
c0000e0f:	0f 85 a0 00 00 00    	jne    c0000eb5 <dlfree+0xf1>
c0000e15:	83 c9 01             	or     ecx,0x1
c0000e18:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e1b:	89 0d 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,ecx
c0000e21:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e24:	83 e1 fc             	and    ecx,0xfffffffc
c0000e27:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e2b:	75 13                	jne    c0000e40 <dlfree+0x7c>
c0000e2d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e30:	29 da                	sub    edx,ebx
c0000e32:	01 d8                	add    eax,ebx
c0000e34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e37:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e40:	39 35 2c e2 02 c0    	cmp    DWORD PTR ds:0xc002e22c,esi
c0000e46:	74 40                	je     c0000e88 <dlfree+0xc4>
c0000e48:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e4c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e4f:	80 e3 01             	and    bl,0x1
c0000e52:	75 0e                	jne    c0000e62 <dlfree+0x9e>
c0000e54:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e57:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e5a:	01 c8                	add    eax,ecx
c0000e5c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e5f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e62:	8b 0d 3c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e23c
c0000e68:	c7 42 0c 34 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e234
c0000e6f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e72:	89 15 3c e2 02 c0    	mov    DWORD PTR ds:0xc002e23c,edx
c0000e78:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e7b:	89 c1                	mov    ecx,eax
c0000e7d:	83 c9 01             	or     ecx,0x1
c0000e80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e83:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e86:	eb 10                	jmp    c0000e98 <dlfree+0xd4>
c0000e88:	01 c8                	add    eax,ecx
c0000e8a:	89 c1                	mov    ecx,eax
c0000e8c:	83 c9 01             	or     ecx,0x1
c0000e8f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e92:	89 15 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,edx
c0000e98:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e9d:	76 16                	jbe    c0000eb5 <dlfree+0xf1>
c0000e9f:	f6 05 00 e2 02 c0 02 	test   BYTE PTR ds:0xc002e200,0x2
c0000ea6:	74 0d                	je     c0000eb5 <dlfree+0xf1>
c0000ea8:	5b                   	pop    ebx
c0000ea9:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	e9 28 fe ff ff       	jmp    c0000cdd <malloc_consolidate>
c0000eb5:	5b                   	pop    ebx
c0000eb6:	5e                   	pop    esi
c0000eb7:	5f                   	pop    edi
c0000eb8:	c3                   	ret    

c0000eb9 <sYSMALLOc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	89 d3                	mov    ebx,edx
c0000ebf:	83 ec 2c             	sub    esp,0x2c
c0000ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ec6:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ecc:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ecf:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ed6:	74 1f                	je     c0000ef7 <sYSMALLOc+0x3e>
c0000ed8:	89 d8                	mov    eax,ebx
c0000eda:	e8 fe fd ff ff       	call   c0000cdd <malloc_consolidate>
c0000edf:	83 ec 0c             	sub    esp,0xc
c0000ee2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ee6:	83 e8 07             	sub    eax,0x7
c0000ee9:	50                   	push   eax
c0000eea:	e8 30 02 00 00       	call   c000111f <dlmalloc>
c0000eef:	83 c4 10             	add    esp,0x10
c0000ef2:	e9 20 02 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000ef7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000efa:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f00:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f03:	83 e0 fc             	and    eax,0xfffffffc
c0000f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f0e:	83 c0 10             	add    eax,0x10
c0000f11:	01 c1                	add    ecx,eax
c0000f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f17:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f1e:	74 04                	je     c0000f24 <sYSMALLOc+0x6b>
c0000f20:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f24:	f7 da                	neg    edx
c0000f26:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f2e:	21 d1                	and    ecx,edx
c0000f30:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f34:	7f 07                	jg     c0000f3d <sYSMALLOc+0x84>
c0000f36:	31 c0                	xor    eax,eax
c0000f38:	e9 da 01 00 00       	jmp    c0001117 <sYSMALLOc+0x25e>
c0000f3d:	83 ec 0c             	sub    esp,0xc
c0000f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f44:	e8 56 e7 00 00       	call   c000f69f <sbrk>
c0000f49:	83 c4 10             	add    esp,0x10
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f51:	74 e3                	je     c0000f36 <sYSMALLOc+0x7d>
c0000f53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f57:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f5b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f5e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f64:	39 f1                	cmp    ecx,esi
c0000f66:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f6c:	75 13                	jne    c0000f81 <sYSMALLOc+0xc8>
c0000f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f72:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f76:	83 c8 01             	or     eax,0x1
c0000f79:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f7c:	e9 3e 01 00 00       	jmp    c00010bf <sYSMALLOc+0x206>
c0000f81:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f87:	88 d0                	mov    al,dl
c0000f89:	83 e0 01             	and    eax,0x1
c0000f8c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f91:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f95:	0f 95 c0             	setne  al
c0000f98:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f9c:	39 f1                	cmp    ecx,esi
c0000f9e:	76 12                	jbe    c0000fb2 <sYSMALLOc+0xf9>
c0000fa0:	84 c0                	test   al,al
c0000fa2:	74 0e                	je     c0000fb2 <sYSMALLOc+0xf9>
c0000fa4:	83 e2 fe             	and    edx,0xfffffffe
c0000fa7:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fad:	e9 83 00 00 00       	jmp    c0001035 <sYSMALLOc+0x17c>
c0000fb2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fb7:	74 7c                	je     c0001035 <sYSMALLOc+0x17c>
c0000fb9:	84 c0                	test   al,al
c0000fbb:	74 0c                	je     c0000fc9 <sYSMALLOc+0x110>
c0000fbd:	89 f0                	mov    eax,esi
c0000fbf:	29 c8                	sub    eax,ecx
c0000fc1:	01 e8                	add    eax,ebp
c0000fc3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc9:	89 f2                	mov    edx,esi
c0000fcb:	83 e2 07             	and    edx,0x7
c0000fce:	74 0c                	je     c0000fdc <sYSMALLOc+0x123>
c0000fd0:	b8 08 00 00 00       	mov    eax,0x8
c0000fd5:	29 d0                	sub    eax,edx
c0000fd7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fda:	eb 04                	jmp    c0000fe0 <sYSMALLOc+0x127>
c0000fdc:	89 f5                	mov    ebp,esi
c0000fde:	31 c0                	xor    eax,eax
c0000fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fe4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fec:	01 c1                	add    ecx,eax
c0000fee:	83 ec 0c             	sub    esp,0xc
c0000ff1:	01 f1                	add    ecx,esi
c0000ff3:	01 ca                	add    edx,ecx
c0000ff5:	29 c8                	sub    eax,ecx
c0000ff7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ffb:	01 c2                	add    edx,eax
c0000ffd:	52                   	push   edx
c0000ffe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001002:	e8 98 e6 00 00       	call   c000f69f <sbrk>
c0001007:	83 c4 10             	add    esp,0x10
c000100a:	83 f8 ff             	cmp    eax,0xffffffff
c000100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001011:	75 0f                	jne    c0001022 <sYSMALLOc+0x169>
c0001013:	83 ec 0c             	sub    esp,0xc
c0001016:	6a 00                	push   0x0
c0001018:	e8 82 e6 00 00       	call   c000f69f <sbrk>
c000101d:	83 c4 10             	add    esp,0x10
c0001020:	eb 30                	jmp    c0001052 <sYSMALLOc+0x199>
c0001022:	39 c6                	cmp    esi,eax
c0001024:	76 33                	jbe    c0001059 <sYSMALLOc+0x1a0>
c0001026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000102a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001031:	01 f0                	add    eax,esi
c0001033:	eb 1d                	jmp    c0001052 <sYSMALLOc+0x199>
c0001035:	83 ec 0c             	sub    esp,0xc
c0001038:	89 f5                	mov    ebp,esi
c000103a:	6a 00                	push   0x0
c000103c:	e8 5e e6 00 00       	call   c000f69f <sbrk>
c0001041:	89 c2                	mov    edx,eax
c0001043:	29 f2                	sub    edx,esi
c0001045:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001052:	31 d2                	xor    edx,edx
c0001054:	83 f8 ff             	cmp    eax,0xffffffff
c0001057:	74 66                	je     c00010bf <sYSMALLOc+0x206>
c0001059:	29 e8                	sub    eax,ebp
c000105b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000105e:	01 d0                	add    eax,edx
c0001060:	83 c8 01             	or     eax,0x1
c0001063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001066:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001071:	74 4c                	je     c00010bf <sYSMALLOc+0x206>
c0001073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001077:	83 e8 0c             	sub    eax,0xc
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c2                	mov    edx,eax
c000107f:	83 ca 01             	or     edx,0x1
c0001082:	83 f8 0f             	cmp    eax,0xf
c0001085:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001088:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001090:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001098:	76 25                	jbe    c00010bf <sYSMALLOc+0x206>
c000109a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010a0:	83 ec 0c             	sub    esp,0xc
c00010a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ad:	83 c7 08             	add    edi,0x8
c00010b0:	57                   	push   edi
c00010b1:	e8 0e fd ff ff       	call   c0000dc4 <dlfree>
c00010b6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010c5:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x21a>
c00010cd:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010d3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010df:	73 06                	jae    c00010e7 <sYSMALLOc+0x22e>
c00010e1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ed:	83 e2 fc             	and    edx,0xfffffffc
c00010f0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010f4:	0f 82 3c fe ff ff    	jb     c0000f36 <sYSMALLOc+0x7d>
c00010fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010fe:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001101:	29 fa                	sub    edx,edi
c0001103:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001106:	83 ca 01             	or     edx,0x1
c0001109:	89 fb                	mov    ebx,edi
c000110b:	83 c0 08             	add    eax,0x8
c000110e:	83 cb 01             	or     ebx,0x1
c0001111:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	83 c4 2c             	add    esp,0x2c
c000111a:	5b                   	pop    ebx
c000111b:	5e                   	pop    esi
c000111c:	5f                   	pop    edi
c000111d:	5d                   	pop    ebp
c000111e:	c3                   	ret    

c000111f <dlmalloc>:
c000111f:	55                   	push   ebp
c0001120:	57                   	push   edi
c0001121:	56                   	push   esi
c0001122:	53                   	push   ebx
c0001123:	83 ec 1c             	sub    esp,0x1c
c0001126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000112a:	83 f8 df             	cmp    eax,0xffffffdf
c000112d:	0f 87 70 03 00 00    	ja     c00014a3 <dlmalloc+0x384>
c0001133:	83 c0 0b             	add    eax,0xb
c0001136:	be 10 00 00 00       	mov    esi,0x10
c000113b:	83 f8 0f             	cmp    eax,0xf
c000113e:	76 05                	jbe    c0001145 <dlmalloc+0x26>
c0001140:	83 e0 f8             	and    eax,0xfffffff8
c0001143:	89 c6                	mov    esi,eax
c0001145:	8b 3d 00 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e200
c000114b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001151:	75 17                	jne    c000116a <dlmalloc+0x4b>
c0001153:	85 ff                	test   edi,edi
c0001155:	0f 85 05 03 00 00    	jne    c0001460 <dlmalloc+0x341>
c000115b:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001160:	e8 78 fb ff ff       	call   c0000cdd <malloc_consolidate>
c0001165:	e9 f6 02 00 00       	jmp    c0001460 <dlmalloc+0x341>
c000116a:	39 f7                	cmp    edi,esi
c000116c:	72 1f                	jb     c000118d <dlmalloc+0x6e>
c000116e:	89 f2                	mov    edx,esi
c0001170:	c1 ea 03             	shr    edx,0x3
c0001173:	83 ea 02             	sub    edx,0x2
c0001176:	8b 04 95 04 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1dfc]
c000117d:	85 c0                	test   eax,eax
c000117f:	74 0c                	je     c000118d <dlmalloc+0x6e>
c0001181:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001184:	89 0c 95 04 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1dfc],ecx
c000118b:	eb 30                	jmp    c00011bd <dlmalloc+0x9e>
c000118d:	89 f0                	mov    eax,esi
c000118f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001195:	77 2e                	ja     c00011c5 <dlmalloc+0xa6>
c0001197:	c1 e8 03             	shr    eax,0x3
c000119a:	8d 14 c5 34 e2 02 c0 	lea    edx,[eax*8-0x3ffd1dcc]
c00011a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ab:	39 c3                	cmp    ebx,eax
c00011ad:	74 2e                	je     c00011dd <dlmalloc+0xbe>
c00011af:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011b2:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011b7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011ba:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011bd:	83 c0 08             	add    eax,0x8
c00011c0:	e9 e0 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c00011c5:	e8 8f fa ff ff       	call   c0000c59 <largebin_index>
c00011ca:	83 e7 02             	and    edi,0x2
c00011cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011d1:	74 0a                	je     c00011dd <dlmalloc+0xbe>
c00011d3:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c00011d8:	e8 00 fb ff ff       	call   c0000cdd <malloc_consolidate>
c00011dd:	8d 46 10             	lea    eax,[esi+0x10]
c00011e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e4:	8b 1d 40 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e240
c00011ea:	81 fb 34 e2 02 c0    	cmp    ebx,0xc002e234
c00011f0:	0f 84 13 01 00 00    	je     c0001309 <dlmalloc+0x1ea>
c00011f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011fc:	83 e7 fc             	and    edi,0xfffffffc
c00011ff:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001205:	77 4c                	ja     c0001253 <dlmalloc+0x134>
c0001207:	3d 34 e2 02 c0       	cmp    eax,0xc002e234
c000120c:	75 45                	jne    c0001253 <dlmalloc+0x134>
c000120e:	39 1d 30 e2 02 c0    	cmp    DWORD PTR ds:0xc002e230,ebx
c0001214:	75 3d                	jne    c0001253 <dlmalloc+0x134>
c0001216:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000121a:	73 37                	jae    c0001253 <dlmalloc+0x134>
c000121c:	8d 04 33             	lea    eax,[ebx+esi*1]
c000121f:	89 fa                	mov    edx,edi
c0001221:	a3 3c e2 02 c0       	mov    ds:0xc002e23c,eax
c0001226:	a3 40 e2 02 c0       	mov    ds:0xc002e240,eax
c000122b:	a3 30 e2 02 c0       	mov    ds:0xc002e230,eax
c0001230:	29 f2                	sub    edx,esi
c0001232:	c7 40 08 34 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e234
c0001239:	c7 40 0c 34 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e234
c0001240:	83 ce 01             	or     esi,0x1
c0001243:	89 d1                	mov    ecx,edx
c0001245:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001248:	83 c9 01             	or     ecx,0x1
c000124b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000124e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001251:	eb 15                	jmp    c0001268 <dlmalloc+0x149>
c0001253:	a3 40 e2 02 c0       	mov    ds:0xc002e240,eax
c0001258:	39 fe                	cmp    esi,edi
c000125a:	c7 40 08 34 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e234
c0001261:	75 0d                	jne    c0001270 <dlmalloc+0x151>
c0001263:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001268:	8d 43 08             	lea    eax,[ebx+0x8]
c000126b:	e9 35 02 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001270:	89 f8                	mov    eax,edi
c0001272:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001278:	77 19                	ja     c0001293 <dlmalloc+0x174>
c000127a:	c1 e8 03             	shr    eax,0x3
c000127d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001280:	83 c2 0d             	add    edx,0xd
c0001283:	8d 2c 95 f8 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1e08]
c000128a:	8b 14 95 00 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e00]
c0001291:	eb 46                	jmp    c00012d9 <dlmalloc+0x1ba>
c0001293:	e8 c1 f9 ff ff       	call   c0000c59 <largebin_index>
c0001298:	8d 14 00             	lea    edx,[eax+eax*1]
c000129b:	83 c2 0d             	add    edx,0xd
c000129e:	8d 0c 95 00 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1e00]
c00012a5:	8b 14 95 00 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e00]
c00012ac:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012b3:	89 d5                	mov    ebp,edx
c00012b5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b9:	74 1e                	je     c00012d9 <dlmalloc+0x1ba>
c00012bb:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012be:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012c1:	77 12                	ja     c00012d5 <dlmalloc+0x1b6>
c00012c3:	83 cf 01             	or     edi,0x1
c00012c6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c9:	76 05                	jbe    c00012d0 <dlmalloc+0x1b1>
c00012cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ce:	eb f6                	jmp    c00012c6 <dlmalloc+0x1a7>
c00012d0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012d3:	eb 04                	jmp    c00012d9 <dlmalloc+0x1ba>
c00012d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d9:	89 c7                	mov    edi,eax
c00012db:	88 c1                	mov    cl,al
c00012dd:	c1 ff 05             	sar    edi,0x5
c00012e0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012e4:	bf 01 00 00 00       	mov    edi,0x1
c00012e9:	d3 e7                	shl    edi,cl
c00012eb:	89 f8                	mov    eax,edi
c00012ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012f1:	09 04 bd 34 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1acc],eax
c00012f8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012fb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012fe:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001301:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001304:	e9 db fe ff ff       	jmp    c00011e4 <dlmalloc+0xc5>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	76 78                	jbe    c0001389 <dlmalloc+0x26a>
c0001311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001315:	8d 04 c5 34 e2 02 c0 	lea    eax,[eax*8-0x3ffd1dcc]
c000131c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000131f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001322:	39 ca                	cmp    edx,ecx
c0001324:	74 63                	je     c0001389 <dlmalloc+0x26a>
c0001326:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001329:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000132c:	83 e3 fc             	and    ebx,0xfffffffc
c000132f:	39 de                	cmp    esi,ebx
c0001331:	77 52                	ja     c0001385 <dlmalloc+0x266>
c0001333:	89 df                	mov    edi,ebx
c0001335:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001338:	29 f7                	sub    edi,esi
c000133a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000133d:	01 d3                	add    ebx,edx
c000133f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001342:	83 ff 0f             	cmp    edi,0xf
c0001345:	8d 42 08             	lea    eax,[edx+0x8]
c0001348:	77 09                	ja     c0001353 <dlmalloc+0x234>
c000134a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000134e:	e9 52 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001353:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001356:	83 ce 01             	or     esi,0x1
c0001359:	89 0d 3c e2 02 c0    	mov    DWORD PTR ds:0xc002e23c,ecx
c000135f:	89 0d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,ecx
c0001365:	c7 41 08 34 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e234
c000136c:	c7 41 0c 34 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e234
c0001373:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001376:	89 fa                	mov    edx,edi
c0001378:	83 ca 01             	or     edx,0x1
c000137b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000137e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001380:	e9 20 01 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001385:	89 c2                	mov    edx,eax
c0001387:	eb 99                	jmp    c0001322 <dlmalloc+0x203>
c0001389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000138d:	b8 01 00 00 00       	mov    eax,0x1
c0001392:	41                   	inc    ecx
c0001393:	89 cb                	mov    ebx,ecx
c0001395:	8d 14 cd 2c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1dd4]
c000139c:	c1 eb 05             	shr    ebx,0x5
c000139f:	d3 e0                	shl    eax,cl
c00013a1:	8b 3c 9d 34 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1acc]
c00013a8:	39 f8                	cmp    eax,edi
c00013aa:	77 04                	ja     c00013b0 <dlmalloc+0x291>
c00013ac:	85 c0                	test   eax,eax
c00013ae:	75 26                	jne    c00013d6 <dlmalloc+0x2b7>
c00013b0:	43                   	inc    ebx
c00013b1:	83 fb 02             	cmp    ebx,0x2
c00013b4:	0f 87 a6 00 00 00    	ja     c0001460 <dlmalloc+0x341>
c00013ba:	8b 3c 9d 34 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1acc]
c00013c1:	85 ff                	test   edi,edi
c00013c3:	74 eb                	je     c00013b0 <dlmalloc+0x291>
c00013c5:	89 d8                	mov    eax,ebx
c00013c7:	c1 e0 06             	shl    eax,0x6
c00013ca:	8d 14 85 2c e2 02 c0 	lea    edx,[eax*4-0x3ffd1dd4]
c00013d1:	b8 01 00 00 00       	mov    eax,0x1
c00013d6:	85 f8                	test   eax,edi
c00013d8:	75 07                	jne    c00013e1 <dlmalloc+0x2c2>
c00013da:	83 c2 08             	add    edx,0x8
c00013dd:	01 c0                	add    eax,eax
c00013df:	eb f5                	jmp    c00013d6 <dlmalloc+0x2b7>
c00013e1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013e4:	39 ca                	cmp    edx,ecx
c00013e6:	75 14                	jne    c00013fc <dlmalloc+0x2dd>
c00013e8:	89 c1                	mov    ecx,eax
c00013ea:	83 c2 08             	add    edx,0x8
c00013ed:	f7 d1                	not    ecx
c00013ef:	01 c0                	add    eax,eax
c00013f1:	21 cf                	and    edi,ecx
c00013f3:	89 3c 9d 34 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1acc],edi
c00013fa:	eb ac                	jmp    c00013a8 <dlmalloc+0x289>
c00013fc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013ff:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001402:	83 e0 fc             	and    eax,0xfffffffc
c0001405:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001408:	89 c3                	mov    ebx,eax
c000140a:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000140d:	29 f3                	sub    ebx,esi
c000140f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001412:	83 fb 0f             	cmp    ebx,0xf
c0001415:	8d 41 08             	lea    eax,[ecx+0x8]
c0001418:	77 09                	ja     c0001423 <dlmalloc+0x304>
c000141a:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000141e:	e9 82 00 00 00       	jmp    c00014a5 <dlmalloc+0x386>
c0001423:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001426:	81 fe ff 00 00 00    	cmp    esi,0xff
c000142c:	89 3d 3c e2 02 c0    	mov    DWORD PTR ds:0xc002e23c,edi
c0001432:	89 3d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,edi
c0001438:	c7 47 08 34 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e234
c000143f:	c7 47 0c 34 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e234
c0001446:	77 06                	ja     c000144e <dlmalloc+0x32f>
c0001448:	89 3d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,edi
c000144e:	83 ce 01             	or     esi,0x1
c0001451:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001454:	89 d9                	mov    ecx,ebx
c0001456:	83 c9 01             	or     ecx,0x1
c0001459:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000145c:	89 1a                	mov    DWORD PTR [edx],ebx
c000145e:	eb 45                	jmp    c00014a5 <dlmalloc+0x386>
c0001460:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0001465:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000146b:	83 e2 fc             	and    edx,0xfffffffc
c000146e:	39 d1                	cmp    ecx,edx
c0001470:	77 1e                	ja     c0001490 <dlmalloc+0x371>
c0001472:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001475:	89 f3                	mov    ebx,esi
c0001477:	89 0d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ecx
c000147d:	83 cb 01             	or     ebx,0x1
c0001480:	29 f2                	sub    edx,esi
c0001482:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001485:	83 ca 01             	or     edx,0x1
c0001488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000148b:	e9 2d fd ff ff       	jmp    c00011bd <dlmalloc+0x9e>
c0001490:	83 c4 1c             	add    esp,0x1c
c0001493:	89 f0                	mov    eax,esi
c0001495:	5b                   	pop    ebx
c0001496:	ba 00 e2 02 c0       	mov    edx,0xc002e200
c000149b:	5e                   	pop    esi
c000149c:	5f                   	pop    edi
c000149d:	5d                   	pop    ebp
c000149e:	e9 16 fa ff ff       	jmp    c0000eb9 <sYSMALLOc>
c00014a3:	31 c0                	xor    eax,eax
c00014a5:	83 c4 1c             	add    esp,0x1c
c00014a8:	5b                   	pop    ebx
c00014a9:	5e                   	pop    esi
c00014aa:	5f                   	pop    edi
c00014ab:	5d                   	pop    ebp
c00014ac:	c3                   	ret    

c00014ad <iALLOc>:
c00014ad:	55                   	push   ebp
c00014ae:	89 c5                	mov    ebp,eax
c00014b0:	57                   	push   edi
c00014b1:	56                   	push   esi
c00014b2:	53                   	push   ebx
c00014b3:	83 ec 2c             	sub    esp,0x2c
c00014b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c2:	83 3d 00 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e200,0x0
c00014c9:	75 12                	jne    c00014dd <iALLOc+0x30>
c00014cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014cf:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c00014d4:	e8 04 f8 ff ff       	call   c0000cdd <malloc_consolidate>
c00014d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	74 12                	je     c00014f6 <iALLOc+0x49>
c00014e4:	85 ed                	test   ebp,ebp
c00014e6:	0f 84 64 01 00 00    	je     c0001650 <iALLOc+0x1a3>
c00014ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014f4:	eb 33                	jmp    c0001529 <iALLOc+0x7c>
c00014f6:	85 ed                	test   ebp,ebp
c00014f8:	75 14                	jne    c000150e <iALLOc+0x61>
c00014fa:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001502:	83 c4 2c             	add    esp,0x2c
c0001505:	5b                   	pop    ebx
c0001506:	5e                   	pop    esi
c0001507:	5f                   	pop    edi
c0001508:	5d                   	pop    ebp
c0001509:	e9 11 fc ff ff       	jmp    c000111f <dlmalloc>
c000150e:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001515:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000151d:	83 f8 0f             	cmp    eax,0xf
c0001520:	76 07                	jbe    c0001529 <iALLOc+0x7c>
c0001522:	83 e0 f8             	and    eax,0xfffffff8
c0001525:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001529:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000152e:	75 09                	jne    c0001539 <iALLOc+0x8c>
c0001530:	89 d0                	mov    eax,edx
c0001532:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001535:	31 f6                	xor    esi,esi
c0001537:	eb 3b                	jmp    c0001574 <iALLOc+0xc7>
c0001539:	8b 02                	mov    eax,DWORD PTR [edx]
c000153b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001543:	83 c0 0b             	add    eax,0xb
c0001546:	83 f8 0f             	cmp    eax,0xf
c0001549:	76 07                	jbe    c0001552 <iALLOc+0xa5>
c000154b:	83 e0 f8             	and    eax,0xfffffff8
c000154e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001552:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001556:	0f af f5             	imul   esi,ebp
c0001559:	eb 25                	jmp    c0001580 <iALLOc+0xd3>
c000155b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000155d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001560:	bb 10 00 00 00       	mov    ebx,0x10
c0001565:	83 f9 0f             	cmp    ecx,0xf
c0001568:	76 05                	jbe    c000156f <iALLOc+0xc2>
c000156a:	83 e1 f8             	and    ecx,0xfffffff8
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	01 de                	add    esi,ebx
c0001571:	83 c0 04             	add    eax,0x4
c0001574:	39 c7                	cmp    edi,eax
c0001576:	75 e3                	jne    c000155b <iALLOc+0xae>
c0001578:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001580:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001584:	8b 1d 54 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e554
c000158a:	83 ec 0c             	sub    esp,0xc
c000158d:	c7 05 54 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e554,0x0
c0001597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000159b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000159f:	50                   	push   eax
c00015a0:	e8 7a fb ff ff       	call   c000111f <dlmalloc>
c00015a5:	83 c4 10             	add    esp,0x10
c00015a8:	89 1d 54 e5 02 c0    	mov    DWORD PTR ds:0xc002e554,ebx
c00015ae:	85 c0                	test   eax,eax
c00015b0:	0f 84 92 00 00 00    	je     c0001648 <iALLOc+0x19b>
c00015b6:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b9:	8d 78 f8             	lea    edi,[eax-0x8]
c00015bc:	83 e3 fc             	and    ebx,0xfffffffc
c00015bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015c3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c8:	74 1e                	je     c00015e8 <iALLOc+0x13b>
c00015ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ce:	89 d9                	mov    ecx,ebx
c00015d0:	52                   	push   edx
c00015d1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015d5:	83 e9 04             	sub    ecx,0x4
c00015d8:	51                   	push   ecx
c00015d9:	6a 00                	push   0x0
c00015db:	50                   	push   eax
c00015dc:	e8 9f f1 ff ff       	call   c0000780 <memset>
c00015e1:	83 c4 10             	add    esp,0x10
c00015e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ed:	75 14                	jne    c0001603 <iALLOc+0x156>
c00015ef:	8d 04 37             	lea    eax,[edi+esi*1]
c00015f2:	29 f3                	sub    ebx,esi
c00015f4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015f7:	83 cb 01             	or     ebx,0x1
c00015fa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001601:	89 f3                	mov    ebx,esi
c0001603:	31 c0                	xor    eax,eax
c0001605:	4d                   	dec    ebp
c0001606:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001609:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000160d:	39 c5                	cmp    ebp,eax
c000160f:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001612:	74 2c                	je     c0001640 <iALLOc+0x193>
c0001614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001618:	85 c9                	test   ecx,ecx
c000161a:	75 15                	jne    c0001631 <iALLOc+0x184>
c000161c:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000161f:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001622:	b9 10 00 00 00       	mov    ecx,0x10
c0001627:	83 fe 0f             	cmp    esi,0xf
c000162a:	76 05                	jbe    c0001631 <iALLOc+0x184>
c000162c:	83 e6 f8             	and    esi,0xfffffff8
c000162f:	89 f1                	mov    ecx,esi
c0001631:	89 ce                	mov    esi,ecx
c0001633:	29 cb                	sub    ebx,ecx
c0001635:	83 ce 01             	or     esi,0x1
c0001638:	40                   	inc    eax
c0001639:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000163c:	01 cf                	add    edi,ecx
c000163e:	eb c6                	jmp    c0001606 <iALLOc+0x159>
c0001640:	83 cb 01             	or     ebx,0x1
c0001643:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001646:	eb 08                	jmp    c0001650 <iALLOc+0x1a3>
c0001648:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001654:	83 c4 2c             	add    esp,0x2c
c0001657:	5b                   	pop    ebx
c0001658:	5e                   	pop    esi
c0001659:	5f                   	pop    edi
c000165a:	5d                   	pop    ebp
c000165b:	c3                   	ret    

c000165c <dlrealloc>:
c000165c:	55                   	push   ebp
c000165d:	57                   	push   edi
c000165e:	56                   	push   esi
c000165f:	53                   	push   ebx
c0001660:	83 ec 1c             	sub    esp,0x1c
c0001663:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001667:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000166b:	85 db                	test   ebx,ebx
c000166d:	75 10                	jne    c000167f <dlrealloc+0x23>
c000166f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001673:	83 c4 1c             	add    esp,0x1c
c0001676:	5b                   	pop    ebx
c0001677:	5e                   	pop    esi
c0001678:	5f                   	pop    edi
c0001679:	5d                   	pop    ebp
c000167a:	e9 a0 fa ff ff       	jmp    c000111f <dlmalloc>
c000167f:	83 f8 df             	cmp    eax,0xffffffdf
c0001682:	76 07                	jbe    c000168b <dlrealloc+0x2f>
c0001684:	31 db                	xor    ebx,ebx
c0001686:	e9 7c 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c000168b:	83 c0 0b             	add    eax,0xb
c000168e:	bf 10 00 00 00       	mov    edi,0x10
c0001693:	83 f8 0f             	cmp    eax,0xf
c0001696:	76 05                	jbe    c000169d <dlrealloc+0x41>
c0001698:	83 e0 f8             	and    eax,0xfffffff8
c000169b:	89 c7                	mov    edi,eax
c000169d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016a0:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016a3:	89 c6                	mov    esi,eax
c00016a5:	83 e6 fc             	and    esi,0xfffffffc
c00016a8:	a8 02                	test   al,0x2
c00016aa:	75 d8                	jne    c0001684 <dlrealloc+0x28>
c00016ac:	39 f7                	cmp    edi,esi
c00016ae:	0f 86 15 01 00 00    	jbe    c00017c9 <dlrealloc+0x16d>
c00016b4:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016bb:	39 15 2c e2 02 c0    	cmp    DWORD PTR ds:0xc002e22c,edx
c00016c1:	75 33                	jne    c00016f6 <dlrealloc+0x9a>
c00016c3:	83 e1 fc             	and    ecx,0xfffffffc
c00016c6:	01 f1                	add    ecx,esi
c00016c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cc:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016cf:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016d3:	77 49                	ja     c000171e <dlrealloc+0xc2>
c00016d5:	01 fd                	add    ebp,edi
c00016d7:	83 e0 01             	and    eax,0x1
c00016da:	09 f8                	or     eax,edi
c00016dc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016df:	89 2d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebp
c00016e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e9:	29 f8                	sub    eax,edi
c00016eb:	83 c8 01             	or     eax,0x1
c00016ee:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016f1:	e9 11 01 00 00       	jmp    c0001807 <dlrealloc+0x1ab>
c00016f6:	89 c8                	mov    eax,ecx
c00016f8:	83 e0 fe             	and    eax,0xfffffffe
c00016fb:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001700:	75 1c                	jne    c000171e <dlrealloc+0xc2>
c0001702:	83 e1 fc             	and    ecx,0xfffffffc
c0001705:	01 f1                	add    ecx,esi
c0001707:	39 cf                	cmp    edi,ecx
c0001709:	77 13                	ja     c000171e <dlrealloc+0xc2>
c000170b:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000170e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001711:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001714:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001717:	89 ce                	mov    esi,ecx
c0001719:	e9 ab 00 00 00       	jmp    c00017c9 <dlrealloc+0x16d>
c000171e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001722:	8d 47 f9             	lea    eax,[edi-0x7]
c0001725:	83 ec 0c             	sub    esp,0xc
c0001728:	50                   	push   eax
c0001729:	e8 f1 f9 ff ff       	call   c000111f <dlmalloc>
c000172e:	83 c4 10             	add    esp,0x10
c0001731:	89 c1                	mov    ecx,eax
c0001733:	85 c0                	test   eax,eax
c0001735:	0f 84 49 ff ff ff    	je     c0001684 <dlrealloc+0x28>
c000173b:	8d 40 f8             	lea    eax,[eax-0x8]
c000173e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001742:	39 c2                	cmp    edx,eax
c0001744:	75 0a                	jne    c0001750 <dlrealloc+0xf4>
c0001746:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	01 c6                	add    esi,eax
c000174e:	eb 79                	jmp    c00017c9 <dlrealloc+0x16d>
c0001750:	83 ee 04             	sub    esi,0x4
c0001753:	83 fe 27             	cmp    esi,0x27
c0001756:	76 16                	jbe    c000176e <dlrealloc+0x112>
c0001758:	50                   	push   eax
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	51                   	push   ecx
c000175c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001760:	e8 e7 ef ff ff       	call   c000074c <memcpy>
c0001765:	83 c4 10             	add    esp,0x10
c0001768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000176c:	eb 43                	jmp    c00017b1 <dlrealloc+0x155>
c000176e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001770:	83 fe 13             	cmp    esi,0x13
c0001773:	89 01                	mov    DWORD PTR [ecx],eax
c0001775:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001778:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000177b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000177e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001781:	76 2e                	jbe    c00017b1 <dlrealloc+0x155>
c0001783:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001786:	83 fe 1b             	cmp    esi,0x1b
c0001789:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000178c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000178f:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001792:	76 1d                	jbe    c00017b1 <dlrealloc+0x155>
c0001794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001797:	83 fe 23             	cmp    esi,0x23
c000179a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000179d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017a0:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017a3:	76 0c                	jbe    c00017b1 <dlrealloc+0x155>
c00017a5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a8:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ae:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017b5:	83 ec 0c             	sub    esp,0xc
c00017b8:	53                   	push   ebx
c00017b9:	e8 06 f6 ff ff       	call   c0000dc4 <dlfree>
c00017be:	83 c4 10             	add    esp,0x10
c00017c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017c5:	89 cb                	mov    ebx,ecx
c00017c7:	eb 3e                	jmp    c0001807 <dlrealloc+0x1ab>
c00017c9:	89 f2                	mov    edx,esi
c00017cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ce:	29 fa                	sub    edx,edi
c00017d0:	83 e1 01             	and    ecx,0x1
c00017d3:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017d7:	83 fa 0f             	cmp    edx,0xf
c00017da:	77 0b                	ja     c00017e7 <dlrealloc+0x18b>
c00017dc:	09 ce                	or     esi,ecx
c00017de:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017e1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e5:	eb 20                	jmp    c0001807 <dlrealloc+0x1ab>
c00017e7:	01 fd                	add    ebp,edi
c00017e9:	83 ec 0c             	sub    esp,0xc
c00017ec:	09 cf                	or     edi,ecx
c00017ee:	83 ca 01             	or     edx,0x1
c00017f1:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017f4:	83 c5 08             	add    ebp,0x8
c00017f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017fe:	55                   	push   ebp
c00017ff:	e8 c0 f5 ff ff       	call   c0000dc4 <dlfree>
c0001804:	83 c4 10             	add    esp,0x10
c0001807:	83 c4 1c             	add    esp,0x1c
c000180a:	89 d8                	mov    eax,ebx
c000180c:	5b                   	pop    ebx
c000180d:	5e                   	pop    esi
c000180e:	5f                   	pop    edi
c000180f:	5d                   	pop    ebp
c0001810:	c3                   	ret    

c0001811 <dlmemalign>:
c0001811:	55                   	push   ebp
c0001812:	57                   	push   edi
c0001813:	56                   	push   esi
c0001814:	53                   	push   ebx
c0001815:	83 ec 0c             	sub    esp,0xc
c0001818:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000181c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001820:	83 fa 08             	cmp    edx,0x8
c0001823:	77 10                	ja     c0001835 <dlmemalign+0x24>
c0001825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001829:	83 c4 0c             	add    esp,0xc
c000182c:	5b                   	pop    ebx
c000182d:	5e                   	pop    esi
c000182e:	5f                   	pop    edi
c000182f:	5d                   	pop    ebp
c0001830:	e9 ea f8 ff ff       	jmp    c000111f <dlmalloc>
c0001835:	bf 10 00 00 00       	mov    edi,0x10
c000183a:	83 fa 0f             	cmp    edx,0xf
c000183d:	76 13                	jbe    c0001852 <dlmemalign+0x41>
c000183f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001842:	85 d1                	test   ecx,edx
c0001844:	75 04                	jne    c000184a <dlmemalign+0x39>
c0001846:	89 d7                	mov    edi,edx
c0001848:	eb 08                	jmp    c0001852 <dlmemalign+0x41>
c000184a:	39 d7                	cmp    edi,edx
c000184c:	73 04                	jae    c0001852 <dlmemalign+0x41>
c000184e:	01 ff                	add    edi,edi
c0001850:	eb f8                	jmp    c000184a <dlmemalign+0x39>
c0001852:	83 f8 df             	cmp    eax,0xffffffdf
c0001855:	76 07                	jbe    c000185e <dlmemalign+0x4d>
c0001857:	31 c0                	xor    eax,eax
c0001859:	e9 ce 00 00 00       	jmp    c000192c <dlmemalign+0x11b>
c000185e:	83 c0 0b             	add    eax,0xb
c0001861:	bd 10 00 00 00       	mov    ebp,0x10
c0001866:	83 f8 0f             	cmp    eax,0xf
c0001869:	76 05                	jbe    c0001870 <dlmemalign+0x5f>
c000186b:	83 e0 f8             	and    eax,0xfffffff8
c000186e:	89 c5                	mov    ebp,eax
c0001870:	83 ec 0c             	sub    esp,0xc
c0001873:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001877:	50                   	push   eax
c0001878:	e8 a2 f8 ff ff       	call   c000111f <dlmalloc>
c000187d:	83 c4 10             	add    esp,0x10
c0001880:	89 c1                	mov    ecx,eax
c0001882:	85 c0                	test   eax,eax
c0001884:	74 d1                	je     c0001857 <dlmemalign+0x46>
c0001886:	31 d2                	xor    edx,edx
c0001888:	8d 70 f8             	lea    esi,[eax-0x8]
c000188b:	f7 f7                	div    edi
c000188d:	85 d2                	test   edx,edx
c000188f:	74 62                	je     c00018f3 <dlmemalign+0xe2>
c0001891:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001895:	89 f8                	mov    eax,edi
c0001897:	f7 d8                	neg    eax
c0001899:	21 c3                	and    ebx,eax
c000189b:	83 eb 08             	sub    ebx,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	29 f0                	sub    eax,esi
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	77 02                	ja     c00018a9 <dlmemalign+0x98>
c00018a7:	01 fb                	add    ebx,edi
c00018a9:	89 d8                	mov    eax,ebx
c00018ab:	29 f0                	sub    eax,esi
c00018ad:	89 c6                	mov    esi,eax
c00018af:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b2:	89 c2                	mov    edx,eax
c00018b4:	83 e2 fc             	and    edx,0xfffffffc
c00018b7:	29 f2                	sub    edx,esi
c00018b9:	a8 02                	test   al,0x2
c00018bb:	74 10                	je     c00018cd <dlmemalign+0xbc>
c00018bd:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018c0:	83 ca 02             	or     edx,0x2
c00018c3:	8d 43 08             	lea    eax,[ebx+0x8]
c00018c6:	89 33                	mov    DWORD PTR [ebx],esi
c00018c8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018cb:	eb 5f                	jmp    c000192c <dlmemalign+0x11b>
c00018cd:	83 ec 0c             	sub    esp,0xc
c00018d0:	89 d0                	mov    eax,edx
c00018d2:	83 c8 01             	or     eax,0x1
c00018d5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d8:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018dd:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018e0:	83 e0 01             	and    eax,0x1
c00018e3:	09 f0                	or     eax,esi
c00018e5:	89 de                	mov    esi,ebx
c00018e7:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018ea:	51                   	push   ecx
c00018eb:	e8 d4 f4 ff ff       	call   c0000dc4 <dlfree>
c00018f0:	83 c4 10             	add    esp,0x10
c00018f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f6:	a8 02                	test   al,0x2
c00018f8:	75 2f                	jne    c0001929 <dlmemalign+0x118>
c00018fa:	83 e0 fc             	and    eax,0xfffffffc
c00018fd:	8d 55 10             	lea    edx,[ebp+0x10]
c0001900:	39 c2                	cmp    edx,eax
c0001902:	73 25                	jae    c0001929 <dlmemalign+0x118>
c0001904:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	29 e8                	sub    eax,ebp
c000190c:	83 c2 08             	add    edx,0x8
c000190f:	83 c8 01             	or     eax,0x1
c0001912:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001915:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001918:	83 e0 01             	and    eax,0x1
c000191b:	09 c5                	or     ebp,eax
c000191d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001920:	52                   	push   edx
c0001921:	e8 9e f4 ff ff       	call   c0000dc4 <dlfree>
c0001926:	83 c4 10             	add    esp,0x10
c0001929:	8d 46 08             	lea    eax,[esi+0x8]
c000192c:	83 c4 0c             	add    esp,0xc
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlcalloc>:
c0001934:	53                   	push   ebx
c0001935:	83 ec 14             	sub    esp,0x14
c0001938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000193c:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001941:	50                   	push   eax
c0001942:	e8 d8 f7 ff ff       	call   c000111f <dlmalloc>
c0001947:	83 c4 10             	add    esp,0x10
c000194a:	89 c3                	mov    ebx,eax
c000194c:	85 c0                	test   eax,eax
c000194e:	74 77                	je     c00019c7 <dlcalloc+0x93>
c0001950:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001953:	89 d0                	mov    eax,edx
c0001955:	83 e0 fc             	and    eax,0xfffffffc
c0001958:	80 e2 02             	and    dl,0x2
c000195b:	75 5a                	jne    c00019b7 <dlcalloc+0x83>
c000195d:	83 e8 04             	sub    eax,0x4
c0001960:	83 f8 27             	cmp    eax,0x27
c0001963:	76 03                	jbe    c0001968 <dlcalloc+0x34>
c0001965:	51                   	push   ecx
c0001966:	eb 53                	jmp    c00019bb <dlcalloc+0x87>
c0001968:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000196e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001975:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000197c:	83 f8 13             	cmp    eax,0x13
c000197f:	76 46                	jbe    c00019c7 <dlcalloc+0x93>
c0001981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000198f:	83 f8 1b             	cmp    eax,0x1b
c0001992:	76 33                	jbe    c00019c7 <dlcalloc+0x93>
c0001994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000199b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019a2:	83 f8 23             	cmp    eax,0x23
c00019a5:	76 20                	jbe    c00019c7 <dlcalloc+0x93>
c00019a7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ae:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019b5:	eb 10                	jmp    c00019c7 <dlcalloc+0x93>
c00019b7:	83 e8 08             	sub    eax,0x8
c00019ba:	52                   	push   edx
c00019bb:	50                   	push   eax
c00019bc:	6a 00                	push   0x0
c00019be:	53                   	push   ebx
c00019bf:	e8 bc ed ff ff       	call   c0000780 <memset>
c00019c4:	83 c4 10             	add    esp,0x10
c00019c7:	89 d8                	mov    eax,ebx
c00019c9:	83 c4 08             	add    esp,0x8
c00019cc:	5b                   	pop    ebx
c00019cd:	c3                   	ret    

c00019ce <dlcfree>:
c00019ce:	e9 f1 f3 ff ff       	jmp    c0000dc4 <dlfree>

c00019d3 <dlindependent_calloc>:
c00019d3:	83 ec 28             	sub    esp,0x28
c00019d6:	b9 03 00 00 00       	mov    ecx,0x3
c00019db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ef:	e8 b9 fa ff ff       	call   c00014ad <iALLOc>
c00019f4:	83 c4 2c             	add    esp,0x2c
c00019f7:	c3                   	ret    

c00019f8 <dlindependent_comalloc>:
c00019f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a00:	31 c9                	xor    ecx,ecx
c0001a02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a0a:	e9 9e fa ff ff       	jmp    c00014ad <iALLOc>

c0001a0f <dlvalloc>:
c0001a0f:	83 ec 0c             	sub    esp,0xc
c0001a12:	83 3d 00 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e200,0x0
c0001a19:	75 0a                	jne    c0001a25 <dlvalloc+0x16>
c0001a1b:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001a20:	e8 b8 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a25:	50                   	push   eax
c0001a26:	50                   	push   eax
c0001a27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a2b:	ff 35 5c e5 02 c0    	push   DWORD PTR ds:0xc002e55c
c0001a31:	e8 db fd ff ff       	call   c0001811 <dlmemalign>
c0001a36:	83 c4 1c             	add    esp,0x1c
c0001a39:	c3                   	ret    

c0001a3a <dlpvalloc>:
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 3d 00 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e200,0x0
c0001a44:	75 0a                	jne    c0001a50 <dlpvalloc+0x16>
c0001a46:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001a4b:	e8 8d f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a50:	a1 5c e5 02 c0       	mov    eax,ds:0xc002e55c
c0001a55:	89 c1                	mov    ecx,eax
c0001a57:	52                   	push   edx
c0001a58:	f7 d9                	neg    ecx
c0001a5a:	52                   	push   edx
c0001a5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a63:	21 ca                	and    edx,ecx
c0001a65:	52                   	push   edx
c0001a66:	50                   	push   eax
c0001a67:	e8 a5 fd ff ff       	call   c0001811 <dlmemalign>
c0001a6c:	83 c4 1c             	add    esp,0x1c
c0001a6f:	c3                   	ret    

c0001a70 <dlmalloc_trim>:
c0001a70:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001a75:	e8 63 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001a7a:	31 c0                	xor    eax,eax
c0001a7c:	c3                   	ret    

c0001a7d <dlmalloc_usable_size>:
c0001a7d:	53                   	push   ebx
c0001a7e:	31 c0                	xor    eax,eax
c0001a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a84:	85 c9                	test   ecx,ecx
c0001a86:	74 24                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001a88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a8b:	f6 c2 02             	test   dl,0x2
c0001a8e:	74 08                	je     c0001a98 <dlmalloc_usable_size+0x1b>
c0001a90:	83 e2 fc             	and    edx,0xfffffffc
c0001a93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a96:	eb 14                	jmp    c0001aac <dlmalloc_usable_size+0x2f>
c0001a98:	89 d3                	mov    ebx,edx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001a9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001aa4:	74 06                	je     c0001aac <dlmalloc_usable_size+0x2f>
c0001aa6:	83 e2 fc             	and    edx,0xfffffffc
c0001aa9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aac:	5b                   	pop    ebx
c0001aad:	c3                   	ret    

c0001aae <dlmallinfo>:
c0001aae:	55                   	push   ebp
c0001aaf:	57                   	push   edi
c0001ab0:	56                   	push   esi
c0001ab1:	53                   	push   ebx
c0001ab2:	83 ec 08             	sub    esp,0x8
c0001ab5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab9:	83 3d 2c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e22c,0x0
c0001ac0:	75 0a                	jne    c0001acc <dlmallinfo+0x1e>
c0001ac2:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001ac7:	e8 11 f2 ff ff       	call   c0000cdd <malloc_consolidate>
c0001acc:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0001ad1:	31 ed                	xor    ebp,ebp
c0001ad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ad6:	31 c9                	xor    ecx,ecx
c0001ad8:	83 e0 fc             	and    eax,0xfffffffc
c0001adb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001adf:	31 c0                	xor    eax,eax
c0001ae1:	8b 14 85 04 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1dfc]
c0001ae8:	85 d2                	test   edx,edx
c0001aea:	74 0e                	je     c0001afa <dlmallinfo+0x4c>
c0001aec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aef:	45                   	inc    ebp
c0001af0:	83 e6 fc             	and    esi,0xfffffffc
c0001af3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001af6:	01 f1                	add    ecx,esi
c0001af8:	eb ee                	jmp    c0001ae8 <dlmallinfo+0x3a>
c0001afa:	40                   	inc    eax
c0001afb:	83 f8 0a             	cmp    eax,0xa
c0001afe:	75 e1                	jne    c0001ae1 <dlmallinfo+0x33>
c0001b00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b04:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b0e:	b8 34 e2 02 c0       	mov    eax,0xc002e234
c0001b13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b16:	39 f0                	cmp    eax,esi
c0001b18:	74 10                	je     c0001b2a <dlmallinfo+0x7c>
c0001b1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001b20:	83 e7 fc             	and    edi,0xfffffffc
c0001b23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b26:	01 fa                	add    edx,edi
c0001b28:	eb ec                	jmp    c0001b16 <dlmallinfo+0x68>
c0001b2a:	83 c0 08             	add    eax,0x8
c0001b2d:	3d 2c e5 02 c0       	cmp    eax,0xc002e52c
c0001b32:	75 df                	jne    c0001b13 <dlmallinfo+0x65>
c0001b34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b37:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b3a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b3d:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0001b42:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b45:	89 03                	mov    DWORD PTR [ebx],eax
c0001b47:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b4a:	8b 35 50 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e550
c0001b50:	29 d0                	sub    eax,edx
c0001b52:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b58:	8b 35 64 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e564
c0001b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b65:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b68:	8b 35 74 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e574
c0001b6e:	89 d8                	mov    eax,ebx
c0001b70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b73:	83 c4 08             	add    esp,0x8
c0001b76:	5b                   	pop    ebx
c0001b77:	5e                   	pop    esi
c0001b78:	5f                   	pop    edi
c0001b79:	5d                   	pop    ebp
c0001b7a:	c2 04 00             	ret    0x4

c0001b7d <dlmalloc_stats>:
c0001b7d:	83 ec 30             	sub    esp,0x30
c0001b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b84:	50                   	push   eax
c0001b85:	e8 24 ff ff ff       	call   c0001aae <dlmallinfo>
c0001b8a:	83 c4 30             	add    esp,0x30
c0001b8d:	c3                   	ret    

c0001b8e <dlmallopt>:
c0001b8e:	56                   	push   esi
c0001b8f:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0001b94:	53                   	push   ebx
c0001b95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b9d:	e8 3b f1 ff ff       	call   c0000cdd <malloc_consolidate>
c0001ba2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ba5:	83 f8 05             	cmp    eax,0x5
c0001ba8:	77 67                	ja     c0001c11 <dlmallopt+0x83>
c0001baa:	ff 24 85 c4 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6b3c]
c0001bb1:	83 fb 50             	cmp    ebx,0x50
c0001bb4:	77 5b                	ja     c0001c11 <dlmallopt+0x83>
c0001bb6:	ba 08 00 00 00       	mov    edx,0x8
c0001bbb:	85 db                	test   ebx,ebx
c0001bbd:	74 12                	je     c0001bd1 <dlmallopt+0x43>
c0001bbf:	83 c3 0b             	add    ebx,0xb
c0001bc2:	ba 10 00 00 00       	mov    edx,0x10
c0001bc7:	83 fb 0f             	cmp    ebx,0xf
c0001bca:	76 05                	jbe    c0001bd1 <dlmallopt+0x43>
c0001bcc:	89 da                	mov    edx,ebx
c0001bce:	83 e2 f8             	and    edx,0xfffffff8
c0001bd1:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c0001bd6:	83 e0 03             	and    eax,0x3
c0001bd9:	09 d0                	or     eax,edx
c0001bdb:	a3 00 e2 02 c0       	mov    ds:0xc002e200,eax
c0001be0:	eb 31                	jmp    c0001c13 <dlmallopt+0x85>
c0001be2:	89 1d 44 e5 02 c0    	mov    DWORD PTR ds:0xc002e544,ebx
c0001be8:	eb 06                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bea:	89 1d 48 e5 02 c0    	mov    DWORD PTR ds:0xc002e548,ebx
c0001bf0:	be 01 00 00 00       	mov    esi,0x1
c0001bf5:	eb 1c                	jmp    c0001c13 <dlmallopt+0x85>
c0001bf7:	89 1d 4c e5 02 c0    	mov    DWORD PTR ds:0xc002e54c,ebx
c0001bfd:	eb f1                	jmp    c0001bf0 <dlmallopt+0x62>
c0001bff:	31 f6                	xor    esi,esi
c0001c01:	85 db                	test   ebx,ebx
c0001c03:	75 0e                	jne    c0001c13 <dlmallopt+0x85>
c0001c05:	c7 05 54 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e554,0x0
c0001c0f:	eb df                	jmp    c0001bf0 <dlmallopt+0x62>
c0001c11:	31 f6                	xor    esi,esi
c0001c13:	89 f0                	mov    eax,esi
c0001c15:	5b                   	pop    ebx
c0001c16:	5e                   	pop    esi
c0001c17:	c3                   	ret    

c0001c18 <disk_status>:
c0001c18:	31 c0                	xor    eax,eax
c0001c1a:	c3                   	ret    

c0001c1b <disk_initialize>:
c0001c1b:	31 c0                	xor    eax,eax
c0001c1d:	c3                   	ret    

c0001c1e <disk_read>:
c0001c1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c23:	0f b6 04 85 e0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce320]
c0001c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2f:	e9 fa f2 01 00       	jmp    c0020f2e <fatWrapperReadDisk>

c0001c34 <disk_write>:
c0001c34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c39:	0f b6 04 85 e0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce320]
c0001c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c45:	e9 2b f3 01 00       	jmp    c0020f75 <fatWrapperWriteDisk>

c0001c4a <disk_ioctl>:
c0001c4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c53:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c58:	0f b6 04 85 e0 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce320]
c0001c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c64:	e9 53 f3 01 00       	jmp    c0020fbc <fatWrapperIoctl>

c0001c69 <ld_word>:
c0001c69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c70:	c1 e2 08             	shl    edx,0x8
c0001c73:	09 d0                	or     eax,edx
c0001c75:	c3                   	ret    

c0001c76 <ld_dword>:
c0001c76:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c7a:	89 d1                	mov    ecx,edx
c0001c7c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c80:	c1 e1 08             	shl    ecx,0x8
c0001c83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c86:	09 ca                	or     edx,ecx
c0001c88:	c1 e2 08             	shl    edx,0x8
c0001c8b:	09 d0                	or     eax,edx
c0001c8d:	c3                   	ret    

c0001c8e <ld_qword>:
c0001c8e:	57                   	push   edi
c0001c8f:	56                   	push   esi
c0001c90:	53                   	push   ebx
c0001c91:	31 db                	xor    ebx,ebx
c0001c93:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c96:	89 df                	mov    edi,ebx
c0001c98:	89 ce                	mov    esi,ecx
c0001c9a:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca2:	c1 e6 08             	shl    esi,0x8
c0001ca5:	09 f2                	or     edx,esi
c0001ca7:	89 d6                	mov    esi,edx
c0001ca9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cad:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb1:	c1 e6 08             	shl    esi,0x8
c0001cb4:	09 f2                	or     edx,esi
c0001cb6:	89 d6                	mov    esi,edx
c0001cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cbc:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc3:	c1 e6 08             	shl    esi,0x8
c0001cc6:	89 fb                	mov    ebx,edi
c0001cc8:	09 f2                	or     edx,esi
c0001cca:	89 d1                	mov    ecx,edx
c0001ccc:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cd0:	c1 e1 08             	shl    ecx,0x8
c0001cd3:	89 da                	mov    edx,ebx
c0001cd5:	09 c8                	or     eax,ecx
c0001cd7:	5b                   	pop    ebx
c0001cd8:	5e                   	pop    esi
c0001cd9:	5f                   	pop    edi
c0001cda:	c3                   	ret    

c0001cdb <st_word>:
c0001cdb:	66 89 10             	mov    WORD PTR [eax],dx
c0001cde:	c3                   	ret    

c0001cdf <st_dword>:
c0001cdf:	89 10                	mov    DWORD PTR [eax],edx
c0001ce1:	c3                   	ret    

c0001ce2 <st_qword>:
c0001ce2:	89 10                	mov    DWORD PTR [eax],edx
c0001ce4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ce7:	c3                   	ret    

c0001ce8 <mem_cpy>:
c0001ce8:	85 c9                	test   ecx,ecx
c0001cea:	74 10                	je     c0001cfc <mem_cpy+0x14>
c0001cec:	57                   	push   edi
c0001ced:	01 c1                	add    ecx,eax
c0001cef:	56                   	push   esi
c0001cf0:	89 c7                	mov    edi,eax
c0001cf2:	89 d6                	mov    esi,edx
c0001cf4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cf5:	39 f9                	cmp    ecx,edi
c0001cf7:	75 fb                	jne    c0001cf4 <mem_cpy+0xc>
c0001cf9:	5e                   	pop    esi
c0001cfa:	5f                   	pop    edi
c0001cfb:	c3                   	ret    
c0001cfc:	c3                   	ret    

c0001cfd <mem_set>:
c0001cfd:	01 c1                	add    ecx,eax
c0001cff:	40                   	inc    eax
c0001d00:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d03:	39 c8                	cmp    eax,ecx
c0001d05:	75 f8                	jne    c0001cff <mem_set+0x2>
c0001d07:	c3                   	ret    

c0001d08 <mem_cmp>:
c0001d08:	57                   	push   edi
c0001d09:	56                   	push   esi
c0001d0a:	89 c6                	mov    esi,eax
c0001d0c:	53                   	push   ebx
c0001d0d:	46                   	inc    esi
c0001d0e:	42                   	inc    edx
c0001d0f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d13:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d17:	29 fb                	sub    ebx,edi
c0001d19:	89 cf                	mov    edi,ecx
c0001d1b:	29 f7                	sub    edi,esi
c0001d1d:	01 c7                	add    edi,eax
c0001d1f:	74 04                	je     c0001d25 <mem_cmp+0x1d>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	74 e8                	je     c0001d0d <mem_cmp+0x5>
c0001d25:	89 d8                	mov    eax,ebx
c0001d27:	5b                   	pop    ebx
c0001d28:	5e                   	pop    esi
c0001d29:	5f                   	pop    edi
c0001d2a:	c3                   	ret    

c0001d2b <chk_chr>:
c0001d2b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d2e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d31:	74 07                	je     c0001d3a <chk_chr+0xf>
c0001d33:	39 d1                	cmp    ecx,edx
c0001d35:	74 03                	je     c0001d3a <chk_chr+0xf>
c0001d37:	40                   	inc    eax
c0001d38:	eb f1                	jmp    c0001d2b <chk_chr>
c0001d3a:	89 c8                	mov    eax,ecx
c0001d3c:	c3                   	ret    

c0001d3d <dbc_1st>:
c0001d3d:	31 c0                	xor    eax,eax
c0001d3f:	c3                   	ret    

c0001d40 <dbc_2nd>:
c0001d40:	31 c0                	xor    eax,eax
c0001d42:	c3                   	ret    

c0001d43 <tchar2uni>:
c0001d43:	57                   	push   edi
c0001d44:	89 c7                	mov    edi,eax
c0001d46:	56                   	push   esi
c0001d47:	53                   	push   ebx
c0001d48:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d4a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d4c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d4f:	84 c9                	test   cl,cl
c0001d51:	78 0a                	js     c0001d5d <tchar2uni+0x1a>
c0001d53:	0f b6 d1             	movzx  edx,cl
c0001d56:	89 f3                	mov    ebx,esi
c0001d58:	e9 9f 00 00 00       	jmp    c0001dfc <tchar2uni+0xb9>
c0001d5d:	88 ca                	mov    dl,cl
c0001d5f:	83 e2 e0             	and    edx,0xffffffe0
c0001d62:	80 fa c0             	cmp    dl,0xc0
c0001d65:	75 0c                	jne    c0001d73 <tchar2uni+0x30>
c0001d67:	89 ca                	mov    edx,ecx
c0001d69:	b9 01 00 00 00       	mov    ecx,0x1
c0001d6e:	83 e2 1f             	and    edx,0x1f
c0001d71:	eb 2e                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d73:	88 ca                	mov    dl,cl
c0001d75:	83 e2 f0             	and    edx,0xfffffff0
c0001d78:	80 fa e0             	cmp    dl,0xe0
c0001d7b:	75 0c                	jne    c0001d89 <tchar2uni+0x46>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 02 00 00 00       	mov    ecx,0x2
c0001d84:	83 e2 0f             	and    edx,0xf
c0001d87:	eb 18                	jmp    c0001da1 <tchar2uni+0x5e>
c0001d89:	88 ca                	mov    dl,cl
c0001d8b:	83 e2 f8             	and    edx,0xfffffff8
c0001d8e:	88 d0                	mov    al,dl
c0001d90:	83 ca ff             	or     edx,0xffffffff
c0001d93:	3c f0                	cmp    al,0xf0
c0001d95:	75 6c                	jne    c0001e03 <tchar2uni+0xc0>
c0001d97:	89 ca                	mov    edx,ecx
c0001d99:	b9 03 00 00 00       	mov    ecx,0x3
c0001d9e:	83 e2 07             	and    edx,0x7
c0001da1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001da5:	46                   	inc    esi
c0001da6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da9:	88 c8                	mov    al,cl
c0001dab:	83 e0 c0             	and    eax,0xffffffc0
c0001dae:	3c 80                	cmp    al,0x80
c0001db0:	75 4e                	jne    c0001e00 <tchar2uni+0xbd>
c0001db2:	c1 e2 06             	shl    edx,0x6
c0001db5:	83 e1 3f             	and    ecx,0x3f
c0001db8:	09 ca                	or     edx,ecx
c0001dba:	39 de                	cmp    esi,ebx
c0001dbc:	75 e7                	jne    c0001da5 <tchar2uni+0x62>
c0001dbe:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001dc1:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dc7:	77 37                	ja     c0001e00 <tchar2uni+0xbd>
c0001dc9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dcf:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dd5:	76 29                	jbe    c0001e00 <tchar2uni+0xbd>
c0001dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ddd:	76 1d                	jbe    c0001dfc <tchar2uni+0xb9>
c0001ddf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001de5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001deb:	c1 e1 06             	shl    ecx,0x6
c0001dee:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dfc:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dfe:	eb 03                	jmp    c0001e03 <tchar2uni+0xc0>
c0001e00:	83 ca ff             	or     edx,0xffffffff
c0001e03:	5b                   	pop    ebx
c0001e04:	89 d0                	mov    eax,edx
c0001e06:	5e                   	pop    esi
c0001e07:	5f                   	pop    edi
c0001e08:	c3                   	ret    

c0001e09 <put_utf>:
c0001e09:	53                   	push   ebx
c0001e0a:	83 f8 7f             	cmp    eax,0x7f
c0001e0d:	89 c3                	mov    ebx,eax
c0001e0f:	b0 00                	mov    al,0x0
c0001e11:	77 11                	ja     c0001e24 <put_utf+0x1b>
c0001e13:	85 c9                	test   ecx,ecx
c0001e15:	0f 84 e5 00 00 00    	je     c0001f00 <put_utf+0xf7>
c0001e1b:	88 1a                	mov    BYTE PTR [edx],bl
c0001e1d:	b0 01                	mov    al,0x1
c0001e1f:	e9 dc 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e24:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e2a:	77 23                	ja     c0001e4f <put_utf+0x46>
c0001e2c:	83 f9 01             	cmp    ecx,0x1
c0001e2f:	0f 86 cb 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e35:	89 d8                	mov    eax,ebx
c0001e37:	83 e3 3f             	and    ebx,0x3f
c0001e3a:	c1 e8 06             	shr    eax,0x6
c0001e3d:	83 cb 80             	or     ebx,0xffffff80
c0001e40:	83 c8 c0             	or     eax,0xffffffc0
c0001e43:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e46:	88 02                	mov    BYTE PTR [edx],al
c0001e48:	b0 02                	mov    al,0x2
c0001e4a:	e9 b1 00 00 00       	jmp    c0001f00 <put_utf+0xf7>
c0001e4f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e55:	77 40                	ja     c0001e97 <put_utf+0x8e>
c0001e57:	83 f9 02             	cmp    ecx,0x2
c0001e5a:	0f 86 a0 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e60:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e66:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e6c:	0f 86 8e 00 00 00    	jbe    c0001f00 <put_utf+0xf7>
c0001e72:	89 d8                	mov    eax,ebx
c0001e74:	c1 e8 0c             	shr    eax,0xc
c0001e77:	83 c8 e0             	or     eax,0xffffffe0
c0001e7a:	88 02                	mov    BYTE PTR [edx],al
c0001e7c:	89 d8                	mov    eax,ebx
c0001e7e:	83 e3 3f             	and    ebx,0x3f
c0001e81:	c1 e8 06             	shr    eax,0x6
c0001e84:	83 cb 80             	or     ebx,0xffffff80
c0001e87:	83 e0 3f             	and    eax,0x3f
c0001e8a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e8d:	83 c8 80             	or     eax,0xffffff80
c0001e90:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e93:	b0 03                	mov    al,0x3
c0001e95:	eb 69                	jmp    c0001f00 <put_utf+0xf7>
c0001e97:	83 f9 03             	cmp    ecx,0x3
c0001e9a:	76 64                	jbe    c0001f00 <put_utf+0xf7>
c0001e9c:	89 d9                	mov    ecx,ebx
c0001e9e:	0f b7 c3             	movzx  eax,bx
c0001ea1:	66 31 c9             	xor    cx,cx
c0001ea4:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eaa:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001eb0:	c1 e9 06             	shr    ecx,0x6
c0001eb3:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb9:	77 43                	ja     c0001efe <put_utf+0xf5>
c0001ebb:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ec1:	77 3b                	ja     c0001efe <put_utf+0xf5>
c0001ec3:	09 cb                	or     ebx,ecx
c0001ec5:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ecb:	89 d8                	mov    eax,ebx
c0001ecd:	c1 e8 12             	shr    eax,0x12
c0001ed0:	83 c8 f0             	or     eax,0xfffffff0
c0001ed3:	88 02                	mov    BYTE PTR [edx],al
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	83 c8 80             	or     eax,0xffffff80
c0001ee0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee3:	89 d8                	mov    eax,ebx
c0001ee5:	83 e3 3f             	and    ebx,0x3f
c0001ee8:	c1 e8 06             	shr    eax,0x6
c0001eeb:	83 cb 80             	or     ebx,0xffffff80
c0001eee:	83 e0 3f             	and    eax,0x3f
c0001ef1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ef4:	83 c8 80             	or     eax,0xffffff80
c0001ef7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001efa:	b0 04                	mov    al,0x4
c0001efc:	eb 02                	jmp    c0001f00 <put_utf+0xf7>
c0001efe:	31 c0                	xor    eax,eax
c0001f00:	5b                   	pop    ebx
c0001f01:	c3                   	ret    

c0001f02 <clst2sect>:
c0001f02:	89 c1                	mov    ecx,eax
c0001f04:	83 ea 02             	sub    edx,0x2
c0001f07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f0a:	83 e8 02             	sub    eax,0x2
c0001f0d:	39 d0                	cmp    eax,edx
c0001f0f:	76 0d                	jbe    c0001f1e <clst2sect+0x1c>
c0001f11:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f15:	f7 e2                	mul    edx
c0001f17:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f1a:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f1d:	c3                   	ret    
c0001f1e:	31 c0                	xor    eax,eax
c0001f20:	31 d2                	xor    edx,edx
c0001f22:	c3                   	ret    

c0001f23 <clmt_clust>:
c0001f23:	57                   	push   edi
c0001f24:	89 cf                	mov    edi,ecx
c0001f26:	56                   	push   esi
c0001f27:	89 d6                	mov    esi,edx
c0001f29:	53                   	push   ebx
c0001f2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f2e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f31:	89 f2                	mov    edx,esi
c0001f33:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f35:	c1 ef 09             	shr    edi,0x9
c0001f38:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f3c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f3f:	89 f9                	mov    ecx,edi
c0001f41:	31 ff                	xor    edi,edi
c0001f43:	57                   	push   edi
c0001f44:	56                   	push   esi
c0001f45:	51                   	push   ecx
c0001f46:	52                   	push   edx
c0001f47:	e8 e8 4b 02 00       	call   c0026b34 <__udivdi3>
c0001f4c:	83 c4 10             	add    esp,0x10
c0001f4f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f51:	85 d2                	test   edx,edx
c0001f53:	74 10                	je     c0001f65 <clmt_clust+0x42>
c0001f55:	39 d0                	cmp    eax,edx
c0001f57:	72 07                	jb     c0001f60 <clmt_clust+0x3d>
c0001f59:	29 d0                	sub    eax,edx
c0001f5b:	83 c3 08             	add    ebx,0x8
c0001f5e:	eb ef                	jmp    c0001f4f <clmt_clust+0x2c>
c0001f60:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f63:	89 c2                	mov    edx,eax
c0001f65:	5b                   	pop    ebx
c0001f66:	89 d0                	mov    eax,edx
c0001f68:	5e                   	pop    esi
c0001f69:	5f                   	pop    edi
c0001f6a:	c3                   	ret    

c0001f6b <pick_lfn>:
c0001f6b:	55                   	push   ebp
c0001f6c:	57                   	push   edi
c0001f6d:	56                   	push   esi
c0001f6e:	89 d6                	mov    esi,edx
c0001f70:	53                   	push   ebx
c0001f71:	89 c3                	mov    ebx,eax
c0001f73:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f76:	e8 ee fc ff ff       	call   c0001c69 <ld_word>
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 04                	je     c0001f84 <pick_lfn+0x19>
c0001f80:	31 c0                	xor    eax,eax
c0001f82:	eb 5c                	jmp    c0001fe0 <pick_lfn+0x75>
c0001f84:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f87:	bd 01 00 00 00       	mov    ebp,0x1
c0001f8c:	83 e1 bf             	and    ecx,0xffffffbf
c0001f8f:	31 ff                	xor    edi,edi
c0001f91:	49                   	dec    ecx
c0001f92:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f95:	0f b6 87 e0 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6a20]
c0001f9c:	01 f0                	add    eax,esi
c0001f9e:	e8 c6 fc ff ff       	call   c0001c69 <ld_word>
c0001fa3:	66 85 ed             	test   bp,bp
c0001fa6:	74 11                	je     c0001fb9 <pick_lfn+0x4e>
c0001fa8:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fae:	77 d0                	ja     c0001f80 <pick_lfn+0x15>
c0001fb0:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fb4:	89 c5                	mov    ebp,eax
c0001fb6:	41                   	inc    ecx
c0001fb7:	eb 04                	jmp    c0001fbd <pick_lfn+0x52>
c0001fb9:	66 40                	inc    ax
c0001fbb:	75 c3                	jne    c0001f80 <pick_lfn+0x15>
c0001fbd:	47                   	inc    edi
c0001fbe:	83 ff 0d             	cmp    edi,0xd
c0001fc1:	75 d2                	jne    c0001f95 <pick_lfn+0x2a>
c0001fc3:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fc6:	74 13                	je     c0001fdb <pick_lfn+0x70>
c0001fc8:	66 85 ed             	test   bp,bp
c0001fcb:	74 0e                	je     c0001fdb <pick_lfn+0x70>
c0001fcd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd3:	77 ab                	ja     c0001f80 <pick_lfn+0x15>
c0001fd5:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fdb:	b8 01 00 00 00       	mov    eax,0x1
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <put_lfn>:
c0001fe5:	55                   	push   ebp
c0001fe6:	31 ed                	xor    ebp,ebp
c0001fe8:	57                   	push   edi
c0001fe9:	89 d7                	mov    edi,edx
c0001feb:	56                   	push   esi
c0001fec:	31 f6                	xor    esi,esi
c0001fee:	53                   	push   ebx
c0001fef:	83 ec 08             	sub    esp,0x8
c0001ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ff5:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ffd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002003:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002006:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002009:	31 d2                	xor    edx,edx
c000200b:	e8 cb fc ff ff       	call   c0001cdb <st_word>
c0002010:	0f b6 d9             	movzx  ebx,cl
c0002013:	4b                   	dec    ebx
c0002014:	6b db 0d             	imul   ebx,ebx,0xd
c0002017:	66 83 fe ff          	cmp    si,0xffff
c000201b:	74 08                	je     c0002025 <put_lfn+0x40>
c000201d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002020:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002024:	43                   	inc    ebx
c0002025:	0f b6 85 e0 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6a20]
c000202c:	0f b7 d6             	movzx  edx,si
c000202f:	01 f8                	add    eax,edi
c0002031:	e8 a5 fc ff ff       	call   c0001cdb <st_word>
c0002036:	66 85 f6             	test   si,si
c0002039:	75 03                	jne    c000203e <put_lfn+0x59>
c000203b:	83 ce ff             	or     esi,0xffffffff
c000203e:	45                   	inc    ebp
c000203f:	83 fd 0d             	cmp    ebp,0xd
c0002042:	75 d3                	jne    c0002017 <put_lfn+0x32>
c0002044:	66 46                	inc    si
c0002046:	74 0a                	je     c0002052 <put_lfn+0x6d>
c0002048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000204b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002050:	75 09                	jne    c000205b <put_lfn+0x76>
c0002052:	88 c8                	mov    al,cl
c0002054:	83 c8 40             	or     eax,0x40
c0002057:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000205b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000205f:	88 07                	mov    BYTE PTR [edi],al
c0002061:	83 c4 08             	add    esp,0x8
c0002064:	5b                   	pop    ebx
c0002065:	5e                   	pop    esi
c0002066:	5f                   	pop    edi
c0002067:	5d                   	pop    ebp
c0002068:	c3                   	ret    

c0002069 <gen_numname>:
c0002069:	57                   	push   edi
c000206a:	89 cf                	mov    edi,ecx
c000206c:	56                   	push   esi
c000206d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002072:	53                   	push   ebx
c0002073:	89 c6                	mov    esi,eax
c0002075:	83 ec 10             	sub    esp,0x10
c0002078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000207c:	e8 67 fc ff ff       	call   c0001ce8 <mem_cpy>
c0002081:	83 fb 05             	cmp    ebx,0x5
c0002084:	76 2d                	jbe    c00020b3 <gen_numname+0x4a>
c0002086:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002089:	66 85 c0             	test   ax,ax
c000208c:	74 25                	je     c00020b3 <gen_numname+0x4a>
c000208e:	83 c7 02             	add    edi,0x2
c0002091:	ba 10 00 00 00       	mov    edx,0x10
c0002096:	01 db                	add    ebx,ebx
c0002098:	89 c1                	mov    ecx,eax
c000209a:	66 d1 e8             	shr    ax,1
c000209d:	83 e1 01             	and    ecx,0x1
c00020a0:	01 cb                	add    ebx,ecx
c00020a2:	0f ba e3 10          	bt     ebx,0x10
c00020a6:	73 06                	jae    c00020ae <gen_numname+0x45>
c00020a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ae:	4a                   	dec    edx
c00020af:	75 e5                	jne    c0002096 <gen_numname+0x2d>
c00020b1:	eb d3                	jmp    c0002086 <gen_numname+0x1d>
c00020b3:	b8 07 00 00 00       	mov    eax,0x7
c00020b8:	88 d9                	mov    cl,bl
c00020ba:	83 e1 0f             	and    ecx,0xf
c00020bd:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c0:	80 fa 39             	cmp    dl,0x39
c00020c3:	76 03                	jbe    c00020c8 <gen_numname+0x5f>
c00020c5:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c8:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020cb:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020cf:	89 da                	mov    edx,ebx
c00020d1:	c1 ea 04             	shr    edx,0x4
c00020d4:	83 fb 0f             	cmp    ebx,0xf
c00020d7:	76 06                	jbe    c00020df <gen_numname+0x76>
c00020d9:	89 c8                	mov    eax,ecx
c00020db:	89 d3                	mov    ebx,edx
c00020dd:	eb d9                	jmp    c00020b8 <gen_numname+0x4f>
c00020df:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020e4:	31 d2                	xor    edx,edx
c00020e6:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e9:	8d 04 16             	lea    eax,[esi+edx*1]
c00020ec:	39 ca                	cmp    edx,ecx
c00020ee:	73 18                	jae    c0002108 <gen_numname+0x9f>
c00020f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020f3:	3c 20                	cmp    al,0x20
c00020f5:	74 11                	je     c0002108 <gen_numname+0x9f>
c00020f7:	e8 41 fc ff ff       	call   c0001d3d <dbc_1st>
c00020fc:	85 c0                	test   eax,eax
c00020fe:	74 05                	je     c0002105 <gen_numname+0x9c>
c0002100:	39 d3                	cmp    ebx,edx
c0002102:	74 04                	je     c0002108 <gen_numname+0x9f>
c0002104:	42                   	inc    edx
c0002105:	42                   	inc    edx
c0002106:	eb e1                	jmp    c00020e9 <gen_numname+0x80>
c0002108:	b0 20                	mov    al,0x20
c000210a:	83 f9 07             	cmp    ecx,0x7
c000210d:	77 05                	ja     c0002114 <gen_numname+0xab>
c000210f:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002113:	41                   	inc    ecx
c0002114:	42                   	inc    edx
c0002115:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002119:	83 fa 07             	cmp    edx,0x7
c000211c:	76 ea                	jbe    c0002108 <gen_numname+0x9f>
c000211e:	83 c4 10             	add    esp,0x10
c0002121:	5b                   	pop    ebx
c0002122:	5e                   	pop    esi
c0002123:	5f                   	pop    edi
c0002124:	c3                   	ret    

c0002125 <sum_sfn>:
c0002125:	31 c9                	xor    ecx,ecx
c0002127:	31 d2                	xor    edx,edx
c0002129:	d0 ca                	ror    dl,1
c000212b:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000212e:	41                   	inc    ecx
c000212f:	83 f9 0b             	cmp    ecx,0xb
c0002132:	75 f5                	jne    c0002129 <sum_sfn+0x4>
c0002134:	88 d0                	mov    al,dl
c0002136:	c3                   	ret    

c0002137 <xdir_sum>:
c0002137:	56                   	push   esi
c0002138:	31 c9                	xor    ecx,ecx
c000213a:	53                   	push   ebx
c000213b:	31 d2                	xor    edx,edx
c000213d:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002141:	43                   	inc    ebx
c0002142:	c1 e3 05             	shl    ebx,0x5
c0002145:	83 fa 02             	cmp    edx,0x2
c0002148:	74 0b                	je     c0002155 <xdir_sum+0x1e>
c000214a:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000214e:	66 d1 c9             	ror    cx,1
c0002151:	01 f1                	add    ecx,esi
c0002153:	eb 05                	jmp    c000215a <xdir_sum+0x23>
c0002155:	ba 03 00 00 00       	mov    edx,0x3
c000215a:	42                   	inc    edx
c000215b:	39 d3                	cmp    ebx,edx
c000215d:	77 e6                	ja     c0002145 <xdir_sum+0xe>
c000215f:	89 c8                	mov    eax,ecx
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	c3                   	ret    

c0002164 <xsum32>:
c0002164:	d1 ca                	ror    edx,1
c0002166:	0f b6 c0             	movzx  eax,al
c0002169:	01 d0                	add    eax,edx
c000216b:	c3                   	ret    

c000216c <get_xfileinfo>:
c000216c:	55                   	push   ebp
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	57                   	push   edi
c0002170:	bd 40 00 00 00       	mov    ebp,0x40
c0002175:	56                   	push   esi
c0002176:	31 ff                	xor    edi,edi
c0002178:	53                   	push   ebx
c0002179:	89 c6                	mov    esi,eax
c000217b:	83 ec 0c             	sub    esp,0xc
c000217e:	89 d3                	mov    ebx,edx
c0002180:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002187:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000218b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000218e:	76 6d                	jbe    c00021fd <get_xfileinfo+0x91>
c0002190:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002196:	76 0b                	jbe    c00021a3 <get_xfileinfo+0x37>
c0002198:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000219c:	bf 01 00 00 00       	mov    edi,0x1
c00021a1:	eb 63                	jmp    c0002206 <get_xfileinfo+0x9a>
c00021a3:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a9:	75 03                	jne    c00021ae <get_xfileinfo+0x42>
c00021ab:	83 c5 02             	add    ebp,0x2
c00021ae:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021b1:	83 c5 02             	add    ebp,0x2
c00021b4:	e8 b0 fa ff ff       	call   c0001c69 <ld_word>
c00021b9:	ff 04 24             	inc    DWORD PTR [esp]
c00021bc:	66 85 c9             	test   cx,cx
c00021bf:	75 0d                	jne    c00021ce <get_xfileinfo+0x62>
c00021c1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021c7:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021cc:	76 2b                	jbe    c00021f9 <get_xfileinfo+0x8d>
c00021ce:	c1 e1 10             	shl    ecx,0x10
c00021d1:	ba ff 00 00 00       	mov    edx,0xff
c00021d6:	0f b7 c0             	movzx  eax,ax
c00021d9:	29 fa                	sub    edx,edi
c00021db:	09 c8                	or     eax,ecx
c00021dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021e1:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e9:	e8 1b fc ff ff       	call   c0001e09 <put_utf>
c00021ee:	84 c0                	test   al,al
c00021f0:	74 a6                	je     c0002198 <get_xfileinfo+0x2c>
c00021f2:	0f b6 c0             	movzx  eax,al
c00021f5:	01 c7                	add    edi,eax
c00021f7:	31 c0                	xor    eax,eax
c00021f9:	89 c1                	mov    ecx,eax
c00021fb:	eb 8a                	jmp    c0002187 <get_xfileinfo+0x1b>
c00021fd:	85 ff                	test   edi,edi
c00021ff:	74 97                	je     c0002198 <get_xfileinfo+0x2c>
c0002201:	66 85 c9             	test   cx,cx
c0002204:	75 92                	jne    c0002198 <get_xfileinfo+0x2c>
c0002206:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000220b:	31 c0                	xor    eax,eax
c000220d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002211:	31 d2                	xor    edx,edx
c0002213:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002216:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002219:	80 e1 10             	and    cl,0x10
c000221c:	75 08                	jne    c0002226 <get_xfileinfo+0xba>
c000221e:	8d 46 38             	lea    eax,[esi+0x38]
c0002221:	e8 68 fa ff ff       	call   c0001c8e <ld_qword>
c0002226:	89 03                	mov    DWORD PTR [ebx],eax
c0002228:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000222b:	8d 46 0c             	lea    eax,[esi+0xc]
c000222e:	e8 36 fa ff ff       	call   c0001c69 <ld_word>
c0002233:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002237:	8d 46 0e             	lea    eax,[esi+0xe]
c000223a:	e8 2a fa ff ff       	call   c0001c69 <ld_word>
c000223f:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002243:	83 c4 0c             	add    esp,0xc
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    

c000224b <get_ldnumber>:
c000224b:	8b 10                	mov    edx,DWORD PTR [eax]
c000224d:	85 d2                	test   edx,edx
c000224f:	74 14                	je     c0002265 <get_ldnumber+0x1a>
c0002251:	56                   	push   esi
c0002252:	53                   	push   ebx
c0002253:	89 d3                	mov    ebx,edx
c0002255:	43                   	inc    ebx
c0002256:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002259:	80 f9 1f             	cmp    cl,0x1f
c000225c:	76 0d                	jbe    c000226b <get_ldnumber+0x20>
c000225e:	80 f9 3a             	cmp    cl,0x3a
c0002261:	75 f2                	jne    c0002255 <get_ldnumber+0xa>
c0002263:	eb 0a                	jmp    c000226f <get_ldnumber+0x24>
c0002265:	83 c9 ff             	or     ecx,0xffffffff
c0002268:	89 c8                	mov    eax,ecx
c000226a:	c3                   	ret    
c000226b:	31 c9                	xor    ecx,ecx
c000226d:	eb 24                	jmp    c0002293 <get_ldnumber+0x48>
c000226f:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002272:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002275:	80 f9 09             	cmp    cl,0x9
c0002278:	77 16                	ja     c0002290 <get_ldnumber+0x45>
c000227a:	83 c2 02             	add    edx,0x2
c000227d:	83 c9 ff             	or     ecx,0xffffffff
c0002280:	39 d3                	cmp    ebx,edx
c0002282:	75 0f                	jne    c0002293 <get_ldnumber+0x48>
c0002284:	89 f2                	mov    edx,esi
c0002286:	89 18                	mov    DWORD PTR [eax],ebx
c0002288:	0f be ca             	movsx  ecx,dl
c000228b:	83 e9 30             	sub    ecx,0x30
c000228e:	eb 03                	jmp    c0002293 <get_ldnumber+0x48>
c0002290:	83 c9 ff             	or     ecx,0xffffffff
c0002293:	89 c8                	mov    eax,ecx
c0002295:	5b                   	pop    ebx
c0002296:	5e                   	pop    esi
c0002297:	c3                   	ret    

c0002298 <crc32>:
c0002298:	56                   	push   esi
c0002299:	89 d6                	mov    esi,edx
c000229b:	53                   	push   ebx
c000229c:	b2 01                	mov    dl,0x1
c000229e:	bb 08 00 00 00       	mov    ebx,0x8
c00022a3:	89 f1                	mov    ecx,esi
c00022a5:	84 d1                	test   cl,dl
c00022a7:	0f 95 c1             	setne  cl
c00022aa:	0f b6 c9             	movzx  ecx,cl
c00022ad:	31 c1                	xor    ecx,eax
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	d1 e8                	shr    eax,1
c00022b3:	80 e1 01             	and    cl,0x1
c00022b6:	74 05                	je     c00022bd <crc32+0x25>
c00022b8:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022bd:	d1 e2                	shl    edx,1
c00022bf:	4b                   	dec    ebx
c00022c0:	75 e1                	jne    c00022a3 <crc32+0xb>
c00022c2:	5b                   	pop    ebx
c00022c3:	5e                   	pop    esi
c00022c4:	c3                   	ret    

c00022c5 <test_gpt_header>:
c00022c5:	55                   	push   ebp
c00022c6:	b9 10 00 00 00       	mov    ecx,0x10
c00022cb:	57                   	push   edi
c00022cc:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c00022d1:	56                   	push   esi
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	53                   	push   ebx
c00022d5:	89 c3                	mov    ebx,eax
c00022d7:	e8 2c fa ff ff       	call   c0001d08 <mem_cmp>
c00022dc:	85 c0                	test   eax,eax
c00022de:	75 55                	jne    c0002335 <test_gpt_header+0x70>
c00022e0:	89 c7                	mov    edi,eax
c00022e2:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022e7:	83 ce ff             	or     esi,0xffffffff
c00022ea:	31 d2                	xor    edx,edx
c00022ec:	83 fd 03             	cmp    ebp,0x3
c00022ef:	76 05                	jbe    c00022f6 <test_gpt_header+0x31>
c00022f1:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022f6:	89 f0                	mov    eax,esi
c00022f8:	45                   	inc    ebp
c00022f9:	e8 9a ff ff ff       	call   c0002298 <crc32>
c00022fe:	83 fd 4c             	cmp    ebp,0x4c
c0002301:	89 c6                	mov    esi,eax
c0002303:	75 e5                	jne    c00022ea <test_gpt_header+0x25>
c0002305:	8d 43 10             	lea    eax,[ebx+0x10]
c0002308:	f7 d6                	not    esi
c000230a:	e8 67 f9 ff ff       	call   c0001c76 <ld_dword>
c000230f:	39 c6                	cmp    esi,eax
c0002311:	75 22                	jne    c0002335 <test_gpt_header+0x70>
c0002313:	8d 43 54             	lea    eax,[ebx+0x54]
c0002316:	e8 5b f9 ff ff       	call   c0001c76 <ld_dword>
c000231b:	83 c0 80             	add    eax,0xffffff80
c000231e:	75 15                	jne    c0002335 <test_gpt_header+0x70>
c0002320:	8d 43 50             	lea    eax,[ebx+0x50]
c0002323:	e8 4e f9 ff ff       	call   c0001c76 <ld_dword>
c0002328:	3d 80 00 00 00       	cmp    eax,0x80
c000232d:	0f 96 c0             	setbe  al
c0002330:	0f b6 c0             	movzx  eax,al
c0002333:	89 c7                	mov    edi,eax
c0002335:	5b                   	pop    ebx
c0002336:	89 f8                	mov    eax,edi
c0002338:	5e                   	pop    esi
c0002339:	5f                   	pop    edi
c000233a:	5d                   	pop    ebp
c000233b:	c3                   	ret    

c000233c <make_rand>:
c000233c:	56                   	push   esi
c000233d:	85 c0                	test   eax,eax
c000233f:	53                   	push   ebx
c0002340:	75 05                	jne    c0002347 <make_rand+0xb>
c0002342:	b8 01 00 00 00       	mov    eax,0x1
c0002347:	01 d1                	add    ecx,edx
c0002349:	bb 08 00 00 00       	mov    ebx,0x8
c000234e:	89 c6                	mov    esi,eax
c0002350:	d1 e8                	shr    eax,1
c0002352:	83 e6 01             	and    esi,0x1
c0002355:	85 f6                	test   esi,esi
c0002357:	74 05                	je     c000235e <make_rand+0x22>
c0002359:	35 00 00 00 a3       	xor    eax,0xa3000000
c000235e:	4b                   	dec    ebx
c000235f:	75 ed                	jne    c000234e <make_rand+0x12>
c0002361:	42                   	inc    edx
c0002362:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002365:	39 ca                	cmp    edx,ecx
c0002367:	75 e0                	jne    c0002349 <make_rand+0xd>
c0002369:	5b                   	pop    ebx
c000236a:	5e                   	pop    esi
c000236b:	c3                   	ret    

c000236c <validate>:
c000236c:	56                   	push   esi
c000236d:	53                   	push   ebx
c000236e:	89 d6                	mov    esi,edx
c0002370:	51                   	push   ecx
c0002371:	85 c0                	test   eax,eax
c0002373:	75 09                	jne    c000237e <validate+0x12>
c0002375:	b8 09 00 00 00       	mov    eax,0x9
c000237a:	31 c9                	xor    ecx,ecx
c000237c:	eb 2f                	jmp    c00023ad <validate+0x41>
c000237e:	89 c3                	mov    ebx,eax
c0002380:	8b 00                	mov    eax,DWORD PTR [eax]
c0002382:	85 c0                	test   eax,eax
c0002384:	74 ef                	je     c0002375 <validate+0x9>
c0002386:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002389:	74 ea                	je     c0002375 <validate+0x9>
c000238b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000238f:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002393:	75 e0                	jne    c0002375 <validate+0x9>
c0002395:	83 ec 0c             	sub    esp,0xc
c0002398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000239c:	50                   	push   eax
c000239d:	e8 76 f8 ff ff       	call   c0001c18 <disk_status>
c00023a2:	83 c4 10             	add    esp,0x10
c00023a5:	a8 01                	test   al,0x1
c00023a7:	75 cc                	jne    c0002375 <validate+0x9>
c00023a9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ab:	31 c0                	xor    eax,eax
c00023ad:	89 0e                	mov    DWORD PTR [esi],ecx
c00023af:	5a                   	pop    edx
c00023b0:	5b                   	pop    ebx
c00023b1:	5e                   	pop    esi
c00023b2:	c3                   	ret    

c00023b3 <sync_window>:
c00023b3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023b7:	0f 84 85 00 00 00    	je     c0002442 <sync_window+0x8f>
c00023bd:	55                   	push   ebp
c00023be:	8d 68 54             	lea    ebp,[eax+0x54]
c00023c1:	57                   	push   edi
c00023c2:	56                   	push   esi
c00023c3:	53                   	push   ebx
c00023c4:	89 c3                	mov    ebx,eax
c00023c6:	83 ec 28             	sub    esp,0x28
c00023c9:	6a 01                	push   0x1
c00023cb:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ce:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023d1:	55                   	push   ebp
c00023d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023d6:	50                   	push   eax
c00023d7:	e8 58 f8 ff ff       	call   c0001c34 <disk_write>
c00023dc:	83 c4 20             	add    esp,0x20
c00023df:	ba 01 00 00 00       	mov    edx,0x1
c00023e4:	85 c0                	test   eax,eax
c00023e6:	75 50                	jne    c0002438 <sync_window+0x85>
c00023e8:	31 ff                	xor    edi,edi
c00023ea:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023f1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023f5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f8:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023fb:	89 c6                	mov    esi,eax
c00023fd:	89 d7                	mov    edi,edx
c00023ff:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002402:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002406:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002409:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000240d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002411:	73 23                	jae    c0002436 <sync_window+0x83>
c0002413:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002417:	75 1d                	jne    c0002436 <sync_window+0x83>
c0002419:	83 ec 0c             	sub    esp,0xc
c000241c:	6a 01                	push   0x1
c000241e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002422:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002426:	52                   	push   edx
c0002427:	50                   	push   eax
c0002428:	55                   	push   ebp
c0002429:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000242d:	50                   	push   eax
c000242e:	e8 01 f8 ff ff       	call   c0001c34 <disk_write>
c0002433:	83 c4 20             	add    esp,0x20
c0002436:	31 d2                	xor    edx,edx
c0002438:	83 c4 1c             	add    esp,0x1c
c000243b:	89 d0                	mov    eax,edx
c000243d:	5b                   	pop    ebx
c000243e:	5e                   	pop    esi
c000243f:	5f                   	pop    edi
c0002440:	5d                   	pop    ebp
c0002441:	c3                   	ret    
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 d0                	mov    eax,edx
c0002446:	c3                   	ret    

c0002447 <move_window>:
c0002447:	56                   	push   esi
c0002448:	53                   	push   ebx
c0002449:	89 c3                	mov    ebx,eax
c000244b:	83 ec 14             	sub    esp,0x14
c000244e:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002451:	75 07                	jne    c000245a <move_window+0x13>
c0002453:	31 f6                	xor    esi,esi
c0002455:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002458:	74 59                	je     c00024b3 <move_window+0x6c>
c000245a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000245e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002462:	89 d8                	mov    eax,ebx
c0002464:	e8 4a ff ff ff       	call   c00023b3 <sync_window>
c0002469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000246d:	89 c6                	mov    esi,eax
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002475:	75 3c                	jne    c00024b3 <move_window+0x6c>
c0002477:	83 ec 0c             	sub    esp,0xc
c000247a:	8d 43 54             	lea    eax,[ebx+0x54]
c000247d:	6a 01                	push   0x1
c000247f:	51                   	push   ecx
c0002480:	52                   	push   edx
c0002481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002485:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002489:	50                   	push   eax
c000248a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248e:	50                   	push   eax
c000248f:	e8 8a f7 ff ff       	call   c0001c1e <disk_read>
c0002494:	83 c4 20             	add    esp,0x20
c0002497:	85 c0                	test   eax,eax
c0002499:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000249d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024a1:	74 0a                	je     c00024ad <move_window+0x66>
c00024a3:	83 ca ff             	or     edx,0xffffffff
c00024a6:	be 01 00 00 00       	mov    esi,0x1
c00024ab:	89 d1                	mov    ecx,edx
c00024ad:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024b0:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	83 c4 14             	add    esp,0x14
c00024b8:	5b                   	pop    ebx
c00024b9:	5e                   	pop    esi
c00024ba:	c3                   	ret    

c00024bb <check_fs>:
c00024bb:	53                   	push   ebx
c00024bc:	89 c3                	mov    ebx,eax
c00024be:	83 ec 08             	sub    esp,0x8
c00024c1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024c5:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024cc:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024d3:	e8 6f ff ff ff       	call   c0002447 <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	0f 85 89 00 00 00    	jne    c000256e <check_fs+0xb3>
c00024e5:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024eb:	e8 79 f7 ff ff       	call   c0001c69 <ld_word>
c00024f0:	ba 03 00 00 00       	mov    edx,0x3
c00024f5:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f9:	75 73                	jne    c000256e <check_fs+0xb3>
c00024fb:	ba 00 96 02 c0       	mov    edx,0xc0029600
c0002500:	8d 43 54             	lea    eax,[ebx+0x54]
c0002503:	b9 0b 00 00 00       	mov    ecx,0xb
c0002508:	e8 fb f7 ff ff       	call   c0001d08 <mem_cmp>
c000250d:	ba 01 00 00 00       	mov    edx,0x1
c0002512:	85 c0                	test   eax,eax
c0002514:	74 58                	je     c000256e <check_fs+0xb3>
c0002516:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002519:	8d 50 18             	lea    edx,[eax+0x18]
c000251c:	80 fa 01             	cmp    dl,0x1
c000251f:	76 09                	jbe    c000252a <check_fs+0x6f>
c0002521:	ba 02 00 00 00       	mov    edx,0x2
c0002526:	3c eb                	cmp    al,0xeb
c0002528:	75 44                	jne    c000256e <check_fs+0xb3>
c000252a:	ba e0 c9 02 c0       	mov    edx,0xc002c9e0
c000252f:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002535:	b9 03 00 00 00       	mov    ecx,0x3
c000253a:	e8 c9 f7 ff ff       	call   c0001d08 <mem_cmp>
c000253f:	31 d2                	xor    edx,edx
c0002541:	85 c0                	test   eax,eax
c0002543:	74 29                	je     c000256e <check_fs+0xb3>
c0002545:	ba 0c 96 02 c0       	mov    edx,0xc002960c
c000254a:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002550:	b9 05 00 00 00       	mov    ecx,0x5
c0002555:	e8 ae f7 ff ff       	call   c0001d08 <mem_cmp>
c000255a:	31 d2                	xor    edx,edx
c000255c:	85 c0                	test   eax,eax
c000255e:	74 0e                	je     c000256e <check_fs+0xb3>
c0002560:	31 d2                	xor    edx,edx
c0002562:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002569:	0f 95 c2             	setne  dl
c000256c:	01 d2                	add    edx,edx
c000256e:	89 d0                	mov    eax,edx
c0002570:	83 c4 08             	add    esp,0x8
c0002573:	5b                   	pop    ebx
c0002574:	c3                   	ret    

c0002575 <find_volume>:
c0002575:	55                   	push   ebp
c0002576:	31 c9                	xor    ecx,ecx
c0002578:	57                   	push   edi
c0002579:	56                   	push   esi
c000257a:	89 d6                	mov    esi,edx
c000257c:	53                   	push   ebx
c000257d:	31 d2                	xor    edx,edx
c000257f:	83 ec 3c             	sub    esp,0x3c
c0002582:	89 c3                	mov    ebx,eax
c0002584:	e8 32 ff ff ff       	call   c00024bb <check_fs>
c0002589:	83 f8 02             	cmp    eax,0x2
c000258c:	74 0e                	je     c000259c <find_volume+0x27>
c000258e:	0f 87 5d 01 00 00    	ja     c00026f1 <find_volume+0x17c>
c0002594:	85 f6                	test   esi,esi
c0002596:	0f 84 55 01 00 00    	je     c00026f1 <find_volume+0x17c>
c000259c:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025a3:	0f 85 dd 00 00 00    	jne    c0002686 <find_volume+0x111>
c00025a9:	31 c9                	xor    ecx,ecx
c00025ab:	ba 01 00 00 00       	mov    edx,0x1
c00025b0:	89 d8                	mov    eax,ebx
c00025b2:	e8 90 fe ff ff       	call   c0002447 <move_window>
c00025b7:	85 c0                	test   eax,eax
c00025b9:	74 0a                	je     c00025c5 <find_volume+0x50>
c00025bb:	b8 04 00 00 00       	mov    eax,0x4
c00025c0:	e9 2c 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025c5:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c8:	89 e8                	mov    eax,ebp
c00025ca:	e8 f6 fc ff ff       	call   c00022c5 <test_gpt_header>
c00025cf:	85 c0                	test   eax,eax
c00025d1:	75 0a                	jne    c00025dd <find_volume+0x68>
c00025d3:	b8 03 00 00 00       	mov    eax,0x3
c00025d8:	e9 14 01 00 00       	jmp    c00026f1 <find_volume+0x17c>
c00025dd:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025e3:	e8 8e f6 ff ff       	call   c0001c76 <ld_dword>
c00025e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025ec:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025f2:	e8 97 f6 ff ff       	call   c0001c8e <ld_qword>
c00025f7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002603:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002607:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000260f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002613:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002617:	74 ba                	je     c00025d3 <find_volume+0x5e>
c0002619:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	c1 e7 07             	shl    edi,0x7
c0002622:	89 d8                	mov    eax,ebx
c0002624:	89 fa                	mov    edx,edi
c0002626:	c1 ea 09             	shr    edx,0x9
c0002629:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000262d:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002631:	e8 11 fe ff ff       	call   c0002447 <move_window>
c0002636:	85 c0                	test   eax,eax
c0002638:	75 81                	jne    c00025bb <find_volume+0x46>
c000263a:	81 e7 80 01 00 00    	and    edi,0x180
c0002640:	b9 10 00 00 00       	mov    ecx,0x10
c0002645:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002649:	ba f0 95 02 c0       	mov    edx,0xc00295f0
c000264e:	e8 b5 f6 ff ff       	call   c0001d08 <mem_cmp>
c0002653:	85 c0                	test   eax,eax
c0002655:	75 29                	jne    c0002680 <find_volume+0x10b>
c0002657:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000265b:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000265f:	e8 2a f6 ff ff       	call   c0001c8e <ld_qword>
c0002664:	89 d1                	mov    ecx,edx
c0002666:	89 c2                	mov    edx,eax
c0002668:	89 d8                	mov    eax,ebx
c000266a:	e8 4c fe ff ff       	call   c00024bb <check_fs>
c000266f:	85 f6                	test   esi,esi
c0002671:	75 07                	jne    c000267a <find_volume+0x105>
c0002673:	83 f8 01             	cmp    eax,0x1
c0002676:	77 08                	ja     c0002680 <find_volume+0x10b>
c0002678:	eb 77                	jmp    c00026f1 <find_volume+0x17c>
c000267a:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000267e:	74 71                	je     c00026f1 <find_volume+0x17c>
c0002680:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002684:	eb 89                	jmp    c000260f <find_volume+0x9a>
c0002686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000268a:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002690:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000269a:	89 cd                	mov    ebp,ecx
c000269c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026a0:	89 f8                	mov    eax,edi
c00026a2:	83 c7 10             	add    edi,0x10
c00026a5:	e8 cc f5 ff ff       	call   c0001c76 <ld_dword>
c00026aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ae:	89 01                	mov    DWORD PTR [ecx],eax
c00026b0:	83 c1 04             	add    ecx,0x4
c00026b3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026b7:	75 e3                	jne    c000269c <find_volume+0x127>
c00026b9:	31 ff                	xor    edi,edi
c00026bb:	85 f6                	test   esi,esi
c00026bd:	74 03                	je     c00026c2 <find_volume+0x14d>
c00026bf:	8d 7e ff             	lea    edi,[esi-0x1]
c00026c2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026c6:	85 d2                	test   edx,edx
c00026c8:	74 14                	je     c00026de <find_volume+0x169>
c00026ca:	31 c9                	xor    ecx,ecx
c00026cc:	89 d8                	mov    eax,ebx
c00026ce:	e8 e8 fd ff ff       	call   c00024bb <check_fs>
c00026d3:	83 f8 01             	cmp    eax,0x1
c00026d6:	76 19                	jbe    c00026f1 <find_volume+0x17c>
c00026d8:	85 f6                	test   esi,esi
c00026da:	74 0f                	je     c00026eb <find_volume+0x176>
c00026dc:	eb 13                	jmp    c00026f1 <find_volume+0x17c>
c00026de:	85 f6                	test   esi,esi
c00026e0:	0f 85 ed fe ff ff    	jne    c00025d3 <find_volume+0x5e>
c00026e6:	b8 03 00 00 00       	mov    eax,0x3
c00026eb:	47                   	inc    edi
c00026ec:	83 ff 03             	cmp    edi,0x3
c00026ef:	76 d1                	jbe    c00026c2 <find_volume+0x14d>
c00026f1:	83 c4 3c             	add    esp,0x3c
c00026f4:	5b                   	pop    ebx
c00026f5:	5e                   	pop    esi
c00026f6:	5f                   	pop    edi
c00026f7:	5d                   	pop    ebp
c00026f8:	c3                   	ret    

c00026f9 <mount_volume>:
c00026f9:	55                   	push   ebp
c00026fa:	57                   	push   edi
c00026fb:	89 cf                	mov    edi,ecx
c00026fd:	56                   	push   esi
c00026fe:	53                   	push   ebx
c00026ff:	bb 0b 00 00 00       	mov    ebx,0xb
c0002704:	83 ec 3c             	sub    esp,0x3c
c0002707:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000270d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002711:	e8 35 fb ff ff       	call   c000224b <get_ldnumber>
c0002716:	85 c0                	test   eax,eax
c0002718:	0f 88 3a 05 00 00    	js     c0002c58 <mount_volume+0x55f>
c000271e:	8b 2c 85 a0 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a60]
c0002725:	89 c6                	mov    esi,eax
c0002727:	bb 0c 00 00 00       	mov    ebx,0xc
c000272c:	85 ed                	test   ebp,ebp
c000272e:	0f 84 24 05 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002738:	83 e7 fe             	and    edi,0xfffffffe
c000273b:	89 2a                	mov    DWORD PTR [edx],ebp
c000273d:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002741:	74 32                	je     c0002775 <mount_volume+0x7c>
c0002743:	83 ec 0c             	sub    esp,0xc
c0002746:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000274a:	50                   	push   eax
c000274b:	e8 c8 f4 ff ff       	call   c0001c18 <disk_status>
c0002750:	83 c4 10             	add    esp,0x10
c0002753:	a8 01                	test   al,0x1
c0002755:	75 1e                	jne    c0002775 <mount_volume+0x7c>
c0002757:	31 db                	xor    ebx,ebx
c0002759:	89 f9                	mov    ecx,edi
c000275b:	84 c9                	test   cl,cl
c000275d:	0f 84 f5 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c0002763:	a8 04                	test   al,0x4
c0002765:	0f 84 ed 04 00 00    	je     c0002c58 <mount_volume+0x55f>
c000276b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002770:	e9 e3 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002775:	83 ec 0c             	sub    esp,0xc
c0002778:	89 f0                	mov    eax,esi
c000277a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000277e:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002781:	0f b6 f0             	movzx  esi,al
c0002784:	bb 03 00 00 00       	mov    ebx,0x3
c0002789:	56                   	push   esi
c000278a:	e8 8c f4 ff ff       	call   c0001c1b <disk_initialize>
c000278f:	83 c4 10             	add    esp,0x10
c0002792:	a8 01                	test   al,0x1
c0002794:	0f 85 be 04 00 00    	jne    c0002c58 <mount_volume+0x55f>
c000279a:	89 f9                	mov    ecx,edi
c000279c:	84 c9                	test   cl,cl
c000279e:	74 04                	je     c00027a4 <mount_volume+0xab>
c00027a0:	a8 04                	test   al,0x4
c00027a2:	75 c7                	jne    c000276b <mount_volume+0x72>
c00027a4:	31 d2                	xor    edx,edx
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	e8 c8 fd ff ff       	call   c0002575 <find_volume>
c00027ad:	83 f8 04             	cmp    eax,0x4
c00027b0:	75 0a                	jne    c00027bc <mount_volume+0xc3>
c00027b2:	bb 01 00 00 00       	mov    ebx,0x1
c00027b7:	e9 9c 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027bc:	83 f8 01             	cmp    eax,0x1
c00027bf:	76 0a                	jbe    c00027cb <mount_volume+0xd2>
c00027c1:	bb 0d 00 00 00       	mov    ebx,0xd
c00027c6:	e9 8d 04 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c00027cb:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ce:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d9:	75 17                	jne    c00027f2 <mount_volume+0xf9>
c00027db:	b8 0b 00 00 00       	mov    eax,0xb
c00027e0:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027e5:	75 da                	jne    c00027c1 <mount_volume+0xc8>
c00027e7:	40                   	inc    eax
c00027e8:	83 f8 40             	cmp    eax,0x40
c00027eb:	75 f3                	jne    c00027e0 <mount_volume+0xe7>
c00027ed:	e9 5a 02 00 00       	jmp    c0002a4c <mount_volume+0x353>
c00027f2:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027f5:	e8 6f f4 ff ff       	call   c0001c69 <ld_word>
c00027fa:	66 3d 00 02          	cmp    ax,0x200
c00027fe:	75 c1                	jne    c00027c1 <mount_volume+0xc8>
c0002800:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002803:	e8 61 f4 ff ff       	call   c0001c69 <ld_word>
c0002808:	0f b7 c0             	movzx  eax,ax
c000280b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000280f:	85 c0                	test   eax,eax
c0002811:	75 0c                	jne    c000281f <mount_volume+0x126>
c0002813:	8d 45 78             	lea    eax,[ebp+0x78]
c0002816:	e8 5b f4 ff ff       	call   c0001c76 <ld_dword>
c000281b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002823:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002826:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002829:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	48                   	dec    eax
c0002831:	3c 01                	cmp    al,0x1
c0002833:	77 8c                	ja     c00027c1 <mount_volume+0xc8>
c0002835:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002839:	89 c3                	mov    ebx,eax
c000283b:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000283f:	66 85 c0             	test   ax,ax
c0002842:	0f 84 79 ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002848:	8d 40 ff             	lea    eax,[eax-0x1]
c000284b:	85 d8                	test   eax,ebx
c000284d:	0f 85 6e ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002853:	8d 45 65             	lea    eax,[ebp+0x65]
c0002856:	e8 0e f4 ff ff       	call   c0001c69 <ld_word>
c000285b:	89 c7                	mov    edi,eax
c000285d:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002861:	a8 0f                	test   al,0xf
c0002863:	0f 85 58 ff ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002869:	8d 45 67             	lea    eax,[ebp+0x67]
c000286c:	e8 f8 f3 ff ff       	call   c0001c69 <ld_word>
c0002871:	0f b7 f0             	movzx  esi,ax
c0002874:	85 f6                	test   esi,esi
c0002876:	75 0a                	jne    c0002882 <mount_volume+0x189>
c0002878:	8d 45 74             	lea    eax,[ebp+0x74]
c000287b:	e8 f6 f3 ff ff       	call   c0001c76 <ld_dword>
c0002880:	89 c6                	mov    esi,eax
c0002882:	8d 45 62             	lea    eax,[ebp+0x62]
c0002885:	e8 df f3 ff ff       	call   c0001c69 <ld_word>
c000288a:	66 85 c0             	test   ax,ax
c000288d:	0f 84 2e ff ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002893:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002898:	0f b7 c8             	movzx  ecx,ax
c000289b:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028a4:	89 fa                	mov    edx,edi
c00028a6:	66 c1 ea 04          	shr    dx,0x4
c00028aa:	0f b7 d2             	movzx  edx,dx
c00028ad:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b8:	39 c6                	cmp    esi,eax
c00028ba:	0f 82 01 ff ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028c0:	29 c6                	sub    esi,eax
c00028c2:	31 d2                	xor    edx,edx
c00028c4:	89 f0                	mov    eax,esi
c00028c6:	f7 f3                	div    ebx
c00028c8:	39 de                	cmp    esi,ebx
c00028ca:	0f 82 f1 fe ff ff    	jb     c00027c1 <mount_volume+0xc8>
c00028d0:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028d5:	0f 87 e6 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00028db:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028e0:	0f 86 63 03 00 00    	jbe    c0002c49 <mount_volume+0x550>
c00028e6:	bb 03 00 00 00       	mov    ebx,0x3
c00028eb:	8d 70 02             	lea    esi,[eax+0x2]
c00028ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f9:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028fc:	31 d2                	xor    edx,edx
c00028fe:	89 c8                	mov    eax,ecx
c0002900:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002903:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002907:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000290f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002913:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002916:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000291d:	31 d2                	xor    edx,edx
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000292a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000292d:	83 fb 03             	cmp    ebx,0x3
c0002930:	75 2b                	jne    c000295d <mount_volume+0x264>
c0002932:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002935:	e8 2f f3 ff ff       	call   c0001c69 <ld_word>
c000293a:	66 09 c7             	or     di,ax
c000293d:	0f 85 7e fe ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002943:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002949:	c1 e6 02             	shl    esi,0x2
c000294c:	e8 25 f3 ff ff       	call   c0001c76 <ld_dword>
c0002951:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002958:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295b:	eb 30                	jmp    c000298d <mount_volume+0x294>
c000295d:	66 85 ff             	test   di,di
c0002960:	0f 84 5b fe ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002966:	31 d2                	xor    edx,edx
c0002968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000296c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002970:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000297a:	83 fb 02             	cmp    ebx,0x2
c000297d:	75 04                	jne    c0002983 <mount_volume+0x28a>
c000297f:	01 f6                	add    esi,esi
c0002981:	eb 0a                	jmp    c000298d <mount_volume+0x294>
c0002983:	8d 04 76             	lea    eax,[esi+esi*2]
c0002986:	83 e6 01             	and    esi,0x1
c0002989:	d1 e8                	shr    eax,1
c000298b:	01 c6                	add    esi,eax
c000298d:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002993:	c1 ee 09             	shr    esi,0x9
c0002996:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000299a:	0f 87 21 fe ff ff    	ja     c00027c1 <mount_volume+0xc8>
c00029a0:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029a7:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ae:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029b2:	83 fb 03             	cmp    ebx,0x3
c00029b5:	75 7a                	jne    c0002a31 <mount_volume+0x338>
c00029b7:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029bd:	e8 a7 f2 ff ff       	call   c0001c69 <ld_word>
c00029c2:	66 48                	dec    ax
c00029c4:	75 6b                	jne    c0002a31 <mount_volume+0x338>
c00029c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ce:	83 c2 01             	add    edx,0x1
c00029d1:	89 e8                	mov    eax,ebp
c00029d3:	83 d1 00             	adc    ecx,0x0
c00029d6:	e8 6c fa ff ff       	call   c0002447 <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	75 52                	jne    c0002a31 <mount_volume+0x338>
c00029df:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029e3:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e9:	e8 7b f2 ff ff       	call   c0001c69 <ld_word>
c00029ee:	66 3d 55 aa          	cmp    ax,0xaa55
c00029f2:	75 3d                	jne    c0002a31 <mount_volume+0x338>
c00029f4:	8d 45 54             	lea    eax,[ebp+0x54]
c00029f7:	e8 7a f2 ff ff       	call   c0001c76 <ld_dword>
c00029fc:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a01:	75 2e                	jne    c0002a31 <mount_volume+0x338>
c0002a03:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a09:	e8 68 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a0e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a13:	75 1c                	jne    c0002a31 <mount_volume+0x338>
c0002a15:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a1b:	e8 56 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a20:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a23:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a29:	e8 48 f2 ff ff       	call   c0001c76 <ld_dword>
c0002a2e:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a31:	66 a1 80 e5 02 c0    	mov    ax,ds:0xc002e580
c0002a37:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a3a:	40                   	inc    eax
c0002a3b:	31 db                	xor    ebx,ebx
c0002a3d:	66 a3 80 e5 02 c0    	mov    ds:0xc002e580,ax
c0002a43:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a47:	e9 0c 02 00 00       	jmp    c0002c58 <mount_volume+0x55f>
c0002a4c:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a52:	e8 12 f2 ff ff       	call   c0001c69 <ld_word>
c0002a57:	66 3d 00 01          	cmp    ax,0x100
c0002a5b:	0f 85 60 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a61:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a68:	0f 85 53 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002a6e:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a74:	e8 15 f2 ff ff       	call   c0001c8e <ld_qword>
c0002a79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a81:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a87:	e8 ea f1 ff ff       	call   c0001c76 <ld_dword>
c0002a8c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a8f:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a95:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a98:	fe c8                	dec    al
c0002a9a:	0f 85 21 fd ff ff    	jne    c00027c1 <mount_volume+0xc8>
c0002aa0:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002aa7:	bb 01 00 00 00       	mov    ebx,0x1
c0002aac:	d3 e3                	shl    ebx,cl
c0002aae:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ab2:	66 85 db             	test   bx,bx
c0002ab5:	0f 84 06 fd ff ff    	je     c00027c1 <mount_volume+0xc8>
c0002abb:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ac1:	e8 b0 f1 ff ff       	call   c0001c76 <ld_dword>
c0002ac6:	89 c6                	mov    esi,eax
c0002ac8:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002acd:	0f 87 ee fc ff ff    	ja     c00027c1 <mount_volume+0xc8>
c0002ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ad7:	8d 40 02             	lea    eax,[eax+0x2]
c0002ada:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002add:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ae7:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aed:	e8 84 f1 ff ff       	call   c0001c76 <ld_dword>
c0002af2:	31 d2                	xor    edx,edx
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b04:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b07:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b0a:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b10:	e8 61 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b15:	31 d2                	xor    edx,edx
c0002b17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b1f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b23:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b26:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b29:	0f b7 c3             	movzx  eax,bx
c0002b2c:	31 d2                	xor    edx,edx
c0002b2e:	0f af f0             	imul   esi,eax
c0002b31:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b35:	89 f0                	mov    eax,esi
c0002b37:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b3b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b3f:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b43:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b47:	39 c1                	cmp    ecx,eax
c0002b49:	89 df                	mov    edi,ebx
c0002b4b:	19 d7                	sbb    edi,edx
c0002b4d:	0f 82 6e fc ff ff    	jb     c00027c1 <mount_volume+0xc8>
c0002b53:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b59:	31 db                	xor    ebx,ebx
c0002b5b:	e8 16 f1 ff ff       	call   c0001c76 <ld_dword>
c0002b60:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b67:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b72:	85 db                	test   ebx,ebx
c0002b74:	75 39                	jne    c0002baf <mount_volume+0x4b6>
c0002b76:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b7a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b7e:	0f 86 3d fc ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002b84:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b87:	31 ff                	xor    edi,edi
c0002b89:	89 e8                	mov    eax,ebp
c0002b8b:	e8 72 f3 ff ff       	call   c0001f02 <clst2sect>
c0002b90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b94:	01 c6                	add    esi,eax
c0002b96:	89 e8                	mov    eax,ebp
c0002b98:	11 d7                	adc    edi,edx
c0002b9a:	89 f2                	mov    edx,esi
c0002b9c:	89 f9                	mov    ecx,edi
c0002b9e:	e8 a4 f8 ff ff       	call   c0002447 <move_window>
c0002ba3:	85 c0                	test   eax,eax
c0002ba5:	0f 85 07 fc ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002bab:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002baf:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bb4:	74 0b                	je     c0002bc1 <mount_volume+0x4c8>
c0002bb6:	83 c3 20             	add    ebx,0x20
c0002bb9:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bbf:	eb b1                	jmp    c0002b72 <mount_volume+0x479>
c0002bc1:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bc4:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc8:	e8 a9 f0 ff ff       	call   c0001c76 <ld_dword>
c0002bcd:	89 c3                	mov    ebx,eax
c0002bcf:	83 f8 01             	cmp    eax,0x1
c0002bd2:	0f 86 e9 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002bd8:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bdb:	0f 86 e0 fb ff ff    	jbe    c00027c1 <mount_volume+0xc8>
c0002be1:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002be4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be8:	0f af c2             	imul   eax,edx
c0002beb:	31 d2                	xor    edx,edx
c0002bed:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bf0:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bf3:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bf6:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	89 da                	mov    edx,ebx
c0002bfd:	89 e8                	mov    eax,ebp
c0002bff:	c1 ea 07             	shr    edx,0x7
c0002c02:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c05:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c08:	e8 3a f8 ff ff       	call   c0002447 <move_window>
c0002c0d:	85 c0                	test   eax,eax
c0002c0f:	0f 85 9d fb ff ff    	jne    c00027b2 <mount_volume+0xb9>
c0002c15:	89 d8                	mov    eax,ebx
c0002c17:	83 e0 7f             	and    eax,0x7f
c0002c1a:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c1d:	e8 54 f0 ff ff       	call   c0001c76 <ld_dword>
c0002c22:	83 f8 ff             	cmp    eax,0xffffffff
c0002c25:	74 0a                	je     c0002c31 <mount_volume+0x538>
c0002c27:	43                   	inc    ebx
c0002c28:	39 d8                	cmp    eax,ebx
c0002c2a:	74 cd                	je     c0002bf9 <mount_volume+0x500>
c0002c2c:	e9 90 fb ff ff       	jmp    c00027c1 <mount_volume+0xc8>
c0002c31:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c38:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c3f:	bb 04 00 00 00       	mov    ebx,0x4
c0002c44:	e9 e8 fd ff ff       	jmp    c0002a31 <mount_volume+0x338>
c0002c49:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c4e:	19 db                	sbb    ebx,ebx
c0002c50:	83 c3 02             	add    ebx,0x2
c0002c53:	e9 93 fc ff ff       	jmp    c00028eb <mount_volume+0x1f2>
c0002c58:	83 c4 3c             	add    esp,0x3c
c0002c5b:	89 d8                	mov    eax,ebx
c0002c5d:	5b                   	pop    ebx
c0002c5e:	5e                   	pop    esi
c0002c5f:	5f                   	pop    edi
c0002c60:	5d                   	pop    ebp
c0002c61:	c3                   	ret    

c0002c62 <find_bitmap>:
c0002c62:	55                   	push   ebp
c0002c63:	57                   	push   edi
c0002c64:	89 c7                	mov    edi,eax
c0002c66:	56                   	push   esi
c0002c67:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c6a:	53                   	push   ebx
c0002c6b:	83 ec 1c             	sub    esp,0x1c
c0002c6e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c75:	83 e8 02             	sub    eax,0x2
c0002c78:	39 f0                	cmp    eax,esi
c0002c7a:	77 02                	ja     c0002c7e <find_bitmap+0x1c>
c0002c7c:	31 f6                	xor    esi,esi
c0002c7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c82:	89 f3                	mov    ebx,esi
c0002c84:	31 ed                	xor    ebp,ebp
c0002c86:	31 c9                	xor    ecx,ecx
c0002c88:	89 da                	mov    edx,ebx
c0002c8a:	89 f8                	mov    eax,edi
c0002c8c:	c1 ea 0c             	shr    edx,0xc
c0002c8f:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c92:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c95:	e8 ad f7 ff ff       	call   c0002447 <move_window>
c0002c9a:	85 c0                	test   eax,eax
c0002c9c:	75 68                	jne    c0002d06 <find_bitmap+0xa4>
c0002c9e:	89 da                	mov    edx,ebx
c0002ca0:	89 d9                	mov    ecx,ebx
c0002ca2:	c1 ea 03             	shr    edx,0x3
c0002ca5:	83 e1 07             	and    ecx,0x7
c0002ca8:	b8 01 00 00 00       	mov    eax,0x1
c0002cad:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cb3:	d3 e0                	shl    eax,cl
c0002cb5:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb8:	83 e9 02             	sub    ecx,0x2
c0002cbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cbf:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cc3:	43                   	inc    ebx
c0002cc4:	21 c1                	and    ecx,eax
c0002cc6:	d1 e0                	shl    eax,1
c0002cc8:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ccc:	77 09                	ja     c0002cd7 <find_bitmap+0x75>
c0002cce:	31 db                	xor    ebx,ebx
c0002cd0:	ba 00 02 00 00       	mov    edx,0x200
c0002cd5:	31 c0                	xor    eax,eax
c0002cd7:	84 c9                	test   cl,cl
c0002cd9:	75 10                	jne    c0002ceb <find_bitmap+0x89>
c0002cdb:	45                   	inc    ebp
c0002cdc:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ce0:	75 0f                	jne    c0002cf1 <find_bitmap+0x8f>
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	83 c0 02             	add    eax,0x2
c0002ce9:	eb 22                	jmp    c0002d0d <find_bitmap+0xab>
c0002ceb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cef:	31 ed                	xor    ebp,ebp
c0002cf1:	39 de                	cmp    esi,ebx
c0002cf3:	74 16                	je     c0002d0b <find_bitmap+0xa9>
c0002cf5:	84 c0                	test   al,al
c0002cf7:	75 c6                	jne    c0002cbf <find_bitmap+0x5d>
c0002cf9:	42                   	inc    edx
c0002cfa:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d00:	77 84                	ja     c0002c86 <find_bitmap+0x24>
c0002d02:	b0 01                	mov    al,0x1
c0002d04:	eb b9                	jmp    c0002cbf <find_bitmap+0x5d>
c0002d06:	83 c8 ff             	or     eax,0xffffffff
c0002d09:	eb 02                	jmp    c0002d0d <find_bitmap+0xab>
c0002d0b:	31 c0                	xor    eax,eax
c0002d0d:	83 c4 1c             	add    esp,0x1c
c0002d10:	5b                   	pop    ebx
c0002d11:	5e                   	pop    esi
c0002d12:	5f                   	pop    edi
c0002d13:	5d                   	pop    ebp
c0002d14:	c3                   	ret    

c0002d15 <change_bitmap>:
c0002d15:	55                   	push   ebp
c0002d16:	89 cd                	mov    ebp,ecx
c0002d18:	57                   	push   edi
c0002d19:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d1c:	56                   	push   esi
c0002d1d:	89 c7                	mov    edi,eax
c0002d1f:	53                   	push   ebx
c0002d20:	89 c8                	mov    eax,ecx
c0002d22:	83 ec 1c             	sub    esp,0x1c
c0002d25:	31 d2                	xor    edx,edx
c0002d27:	89 ce                	mov    esi,ecx
c0002d29:	c1 e8 0c             	shr    eax,0xc
c0002d2c:	bb 01 00 00 00       	mov    ebx,0x1
c0002d31:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d34:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d37:	c1 ee 03             	shr    esi,0x3
c0002d3a:	83 e1 07             	and    ecx,0x7
c0002d3d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d43:	d3 e3                	shl    ebx,cl
c0002d45:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d49:	89 c1                	mov    ecx,eax
c0002d4b:	89 d3                	mov    ebx,edx
c0002d4d:	83 c1 01             	add    ecx,0x1
c0002d50:	83 d3 00             	adc    ebx,0x0
c0002d53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d57:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d5b:	89 d1                	mov    ecx,edx
c0002d5d:	89 c2                	mov    edx,eax
c0002d5f:	89 f8                	mov    eax,edi
c0002d61:	e8 e1 f6 ff ff       	call   c0002447 <move_window>
c0002d66:	89 c1                	mov    ecx,eax
c0002d68:	85 c0                	test   eax,eax
c0002d6a:	75 48                	jne    c0002db4 <change_bitmap+0x9f>
c0002d6c:	31 d2                	xor    edx,edx
c0002d6e:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d72:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d76:	0f 95 c2             	setne  dl
c0002d79:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d7d:	74 3c                	je     c0002dbb <change_bitmap+0xa6>
c0002d7f:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d83:	4d                   	dec    ebp
c0002d84:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d88:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d8c:	74 32                	je     c0002dc0 <change_bitmap+0xab>
c0002d8e:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d92:	75 d8                	jne    c0002d6c <change_bitmap+0x57>
c0002d94:	8d 46 01             	lea    eax,[esi+0x1]
c0002d97:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d9c:	89 c3                	mov    ebx,eax
c0002d9e:	31 f6                	xor    esi,esi
c0002da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dae:	74 99                	je     c0002d49 <change_bitmap+0x34>
c0002db0:	89 de                	mov    esi,ebx
c0002db2:	eb b8                	jmp    c0002d6c <change_bitmap+0x57>
c0002db4:	b9 01 00 00 00       	mov    ecx,0x1
c0002db9:	eb 05                	jmp    c0002dc0 <change_bitmap+0xab>
c0002dbb:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc0:	83 c4 1c             	add    esp,0x1c
c0002dc3:	89 c8                	mov    eax,ecx
c0002dc5:	5b                   	pop    ebx
c0002dc6:	5e                   	pop    esi
c0002dc7:	5f                   	pop    edi
c0002dc8:	5d                   	pop    ebp
c0002dc9:	c3                   	ret    

c0002dca <put_fat>:
c0002dca:	83 fa 01             	cmp    edx,0x1
c0002dcd:	0f 86 7b 01 00 00    	jbe    c0002f4e <put_fat+0x184>
c0002dd3:	55                   	push   ebp
c0002dd4:	57                   	push   edi
c0002dd5:	89 cf                	mov    edi,ecx
c0002dd7:	56                   	push   esi
c0002dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddd:	53                   	push   ebx
c0002dde:	89 c6                	mov    esi,eax
c0002de0:	83 ec 1c             	sub    esp,0x1c
c0002de3:	89 d3                	mov    ebx,edx
c0002de5:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de8:	0f 86 68 01 00 00    	jbe    c0002f56 <put_fat+0x18c>
c0002dee:	8a 00                	mov    al,BYTE PTR [eax]
c0002df0:	3c 02                	cmp    al,0x2
c0002df2:	0f 84 c7 00 00 00    	je     c0002ebf <put_fat+0xf5>
c0002df8:	77 09                	ja     c0002e03 <put_fat+0x39>
c0002dfa:	fe c8                	dec    al
c0002dfc:	74 17                	je     c0002e15 <put_fat+0x4b>
c0002dfe:	e9 53 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e03:	b9 02 00 00 00       	mov    ecx,0x2
c0002e08:	3c 04                	cmp    al,0x4
c0002e0a:	0f 86 e1 00 00 00    	jbe    c0002ef1 <put_fat+0x127>
c0002e10:	e9 41 01 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002e15:	89 d5                	mov    ebp,edx
c0002e17:	31 c9                	xor    ecx,ecx
c0002e19:	d1 ed                	shr    ebp,1
c0002e1b:	89 f0                	mov    eax,esi
c0002e1d:	01 d5                	add    ebp,edx
c0002e1f:	89 ea                	mov    edx,ebp
c0002e21:	c1 ea 09             	shr    edx,0x9
c0002e24:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e27:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e2a:	e8 18 f6 ff ff       	call   c0002447 <move_window>
c0002e2f:	89 c1                	mov    ecx,eax
c0002e31:	85 c0                	test   eax,eax
c0002e33:	0f 85 1d 01 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e39:	8d 46 54             	lea    eax,[esi+0x54]
c0002e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e40:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e43:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e51:	89 f8                	mov    eax,edi
c0002e53:	83 e3 01             	and    ebx,0x1
c0002e56:	74 0d                	je     c0002e65 <put_fat+0x9b>
c0002e58:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e5b:	89 fa                	mov    edx,edi
c0002e5d:	83 e0 0f             	and    eax,0xf
c0002e60:	c1 e2 04             	shl    edx,0x4
c0002e63:	09 d0                	or     eax,edx
c0002e65:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e6c:	31 c9                	xor    ecx,ecx
c0002e6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e72:	c1 ea 09             	shr    edx,0x9
c0002e75:	89 f0                	mov    eax,esi
c0002e77:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e7a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e7d:	e8 c5 f5 ff ff       	call   c0002447 <move_window>
c0002e82:	89 c1                	mov    ecx,eax
c0002e84:	85 c0                	test   eax,eax
c0002e86:	0f 85 ca 00 00 00    	jne    c0002f56 <put_fat+0x18c>
c0002e8c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e96:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e9a:	85 db                	test   ebx,ebx
c0002e9c:	74 07                	je     c0002ea5 <put_fat+0xdb>
c0002e9e:	c1 ef 04             	shr    edi,0x4
c0002ea1:	89 fa                	mov    edx,edi
c0002ea3:	eb 0e                	jmp    c0002eb3 <put_fat+0xe9>
c0002ea5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea8:	c1 ef 08             	shr    edi,0x8
c0002eab:	83 e2 f0             	and    edx,0xfffffff0
c0002eae:	83 e7 0f             	and    edi,0xf
c0002eb1:	09 fa                	or     edx,edi
c0002eb3:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eb6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eba:	e9 97 00 00 00       	jmp    c0002f56 <put_fat+0x18c>
c0002ebf:	31 c9                	xor    ecx,ecx
c0002ec1:	c1 ea 08             	shr    edx,0x8
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ecc:	e8 76 f5 ff ff       	call   c0002447 <move_window>
c0002ed1:	89 c1                	mov    ecx,eax
c0002ed3:	85 c0                	test   eax,eax
c0002ed5:	75 7f                	jne    c0002f56 <put_fat+0x18c>
c0002ed7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edb:	01 db                	add    ebx,ebx
c0002edd:	0f b7 d7             	movzx  edx,di
c0002ee0:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ee6:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002eea:	e8 ec ed ff ff       	call   c0001cdb <st_word>
c0002eef:	eb 53                	jmp    c0002f44 <put_fat+0x17a>
c0002ef1:	31 c9                	xor    ecx,ecx
c0002ef3:	c1 ea 07             	shr    edx,0x7
c0002ef6:	89 f0                	mov    eax,esi
c0002ef8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002efb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002efe:	e8 44 f5 ff ff       	call   c0002447 <move_window>
c0002f03:	89 c1                	mov    ecx,eax
c0002f05:	85 c0                	test   eax,eax
c0002f07:	75 4d                	jne    c0002f56 <put_fat+0x18c>
c0002f09:	c1 e3 02             	shl    ebx,0x2
c0002f0c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f12:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f15:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f19:	74 1c                	je     c0002f37 <put_fat+0x16d>
c0002f1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1f:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f25:	89 d8                	mov    eax,ebx
c0002f27:	e8 4a ed ff ff       	call   c0001c76 <ld_dword>
c0002f2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f30:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f35:	09 c7                	or     edi,eax
c0002f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f3b:	89 fa                	mov    edx,edi
c0002f3d:	89 d8                	mov    eax,ebx
c0002f3f:	e8 9b ed ff ff       	call   c0001cdf <st_dword>
c0002f44:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	eb 08                	jmp    c0002f56 <put_fat+0x18c>
c0002f4e:	b9 02 00 00 00       	mov    ecx,0x2
c0002f53:	89 c8                	mov    eax,ecx
c0002f55:	c3                   	ret    
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	89 c8                	mov    eax,ecx
c0002f5b:	5b                   	pop    ebx
c0002f5c:	5e                   	pop    esi
c0002f5d:	5f                   	pop    edi
c0002f5e:	5d                   	pop    ebp
c0002f5f:	c3                   	ret    

c0002f60 <fill_last_frag>:
c0002f60:	57                   	push   edi
c0002f61:	89 cf                	mov    edi,ecx
c0002f63:	56                   	push   esi
c0002f64:	89 d6                	mov    esi,edx
c0002f66:	53                   	push   ebx
c0002f67:	89 c3                	mov    ebx,eax
c0002f69:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f6c:	85 c0                	test   eax,eax
c0002f6e:	74 21                	je     c0002f91 <fill_last_frag+0x31>
c0002f70:	89 f9                	mov    ecx,edi
c0002f72:	83 f8 01             	cmp    eax,0x1
c0002f75:	76 05                	jbe    c0002f7c <fill_last_frag+0x1c>
c0002f77:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f7a:	29 c1                	sub    ecx,eax
c0002f7c:	8d 56 01             	lea    edx,[esi+0x1]
c0002f7f:	29 c2                	sub    edx,eax
c0002f81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f83:	e8 42 fe ff ff       	call   c0002dca <put_fat>
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	75 05                	jne    c0002f91 <fill_last_frag+0x31>
c0002f8c:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f8f:	eb d8                	jmp    c0002f69 <fill_last_frag+0x9>
c0002f91:	5b                   	pop    ebx
c0002f92:	5e                   	pop    esi
c0002f93:	5f                   	pop    edi
c0002f94:	c3                   	ret    

c0002f95 <fill_first_frag>:
c0002f95:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f99:	75 2d                	jne    c0002fc8 <fill_first_frag+0x33>
c0002f9b:	57                   	push   edi
c0002f9c:	56                   	push   esi
c0002f9d:	53                   	push   ebx
c0002f9e:	89 c3                	mov    ebx,eax
c0002fa0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fa3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fa6:	01 d7                	add    edi,edx
c0002fa8:	39 fa                	cmp    edx,edi
c0002faa:	74 14                	je     c0002fc0 <fill_first_frag+0x2b>
c0002fac:	8d 72 01             	lea    esi,[edx+0x1]
c0002faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fb1:	89 f1                	mov    ecx,esi
c0002fb3:	e8 12 fe ff ff       	call   c0002dca <put_fat>
c0002fb8:	89 f2                	mov    edx,esi
c0002fba:	85 c0                	test   eax,eax
c0002fbc:	74 ea                	je     c0002fa8 <fill_first_frag+0x13>
c0002fbe:	eb 0b                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc0:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc4:	31 c0                	xor    eax,eax
c0002fc6:	eb 03                	jmp    c0002fcb <fill_first_frag+0x36>
c0002fc8:	31 c0                	xor    eax,eax
c0002fca:	c3                   	ret    
c0002fcb:	5b                   	pop    ebx
c0002fcc:	5e                   	pop    esi
c0002fcd:	5f                   	pop    edi
c0002fce:	c3                   	ret    

c0002fcf <get_fat>:
c0002fcf:	83 fa 01             	cmp    edx,0x1
c0002fd2:	0f 86 db 01 00 00    	jbe    c00031b3 <get_fat+0x1e4>
c0002fd8:	55                   	push   ebp
c0002fd9:	b9 01 00 00 00       	mov    ecx,0x1
c0002fde:	57                   	push   edi
c0002fdf:	56                   	push   esi
c0002fe0:	53                   	push   ebx
c0002fe1:	83 ec 1c             	sub    esp,0x1c
c0002fe4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fe6:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe9:	0f 86 cc 01 00 00    	jbe    c00031bb <get_fat+0x1ec>
c0002fef:	89 c3                	mov    ebx,eax
c0002ff1:	89 d6                	mov    esi,edx
c0002ff3:	8a 07                	mov    al,BYTE PTR [edi]
c0002ff5:	3c 02                	cmp    al,0x2
c0002ff7:	0f 84 99 00 00 00    	je     c0003096 <get_fat+0xc7>
c0002ffd:	77 09                	ja     c0003008 <get_fat+0x39>
c0002fff:	fe c8                	dec    al
c0003001:	74 1a                	je     c000301d <get_fat+0x4e>
c0003003:	e9 b3 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003008:	3c 03                	cmp    al,0x3
c000300a:	0f 84 b5 00 00 00    	je     c00030c5 <get_fat+0xf6>
c0003010:	3c 04                	cmp    al,0x4
c0003012:	0f 84 e3 00 00 00    	je     c00030fb <get_fat+0x12c>
c0003018:	e9 9e 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c000301d:	89 d3                	mov    ebx,edx
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	d1 eb                	shr    ebx,1
c0003023:	89 f8                	mov    eax,edi
c0003025:	01 d3                	add    ebx,edx
c0003027:	89 da                	mov    edx,ebx
c0003029:	c1 ea 09             	shr    edx,0x9
c000302c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000302f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003032:	e8 10 f4 ff ff       	call   c0002447 <move_window>
c0003037:	85 c0                	test   eax,eax
c0003039:	74 08                	je     c0003043 <get_fat+0x74>
c000303b:	83 c9 ff             	or     ecx,0xffffffff
c000303e:	e9 78 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003043:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003046:	31 c9                	xor    ecx,ecx
c0003048:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000304e:	89 ea                	mov    edx,ebp
c0003050:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003054:	c1 ea 09             	shr    edx,0x9
c0003057:	89 f8                	mov    eax,edi
c0003059:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000305f:	e8 e3 f3 ff ff       	call   c0002447 <move_window>
c0003064:	85 c0                	test   eax,eax
c0003066:	75 d3                	jne    c000303b <get_fat+0x6c>
c0003068:	0f b6 c3             	movzx  eax,bl
c000306b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003071:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003076:	c1 e3 08             	shl    ebx,0x8
c0003079:	09 c3                	or     ebx,eax
c000307b:	89 d9                	mov    ecx,ebx
c000307d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003083:	83 e6 01             	and    esi,0x1
c0003086:	0f 84 2f 01 00 00    	je     c00031bb <get_fat+0x1ec>
c000308c:	89 d9                	mov    ecx,ebx
c000308e:	c1 e9 04             	shr    ecx,0x4
c0003091:	e9 25 01 00 00       	jmp    c00031bb <get_fat+0x1ec>
c0003096:	31 c9                	xor    ecx,ecx
c0003098:	c1 ea 08             	shr    edx,0x8
c000309b:	89 f8                	mov    eax,edi
c000309d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a3:	e8 9f f3 ff ff       	call   c0002447 <move_window>
c00030a8:	85 c0                	test   eax,eax
c00030aa:	75 8f                	jne    c000303b <get_fat+0x6c>
c00030ac:	01 f6                	add    esi,esi
c00030ae:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030b4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b8:	e8 ac eb ff ff       	call   c0001c69 <ld_word>
c00030bd:	0f b7 c8             	movzx  ecx,ax
c00030c0:	e9 f6 00 00 00       	jmp    c00031bb <get_fat+0x1ec>
c00030c5:	31 c9                	xor    ecx,ecx
c00030c7:	c1 ea 07             	shr    edx,0x7
c00030ca:	89 f8                	mov    eax,edi
c00030cc:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030cf:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030d2:	e8 70 f3 ff ff       	call   c0002447 <move_window>
c00030d7:	85 c0                	test   eax,eax
c00030d9:	0f 85 5c ff ff ff    	jne    c000303b <get_fat+0x6c>
c00030df:	c1 e6 02             	shl    esi,0x2
c00030e2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ec:	e8 85 eb ff ff       	call   c0001c76 <ld_dword>
c00030f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030f6:	e9 b4 00 00 00       	jmp    c00031af <get_fat+0x1e0>
c00030fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003101:	89 d1                	mov    ecx,edx
c0003103:	09 c1                	or     ecx,eax
c0003105:	74 06                	je     c000310d <get_fat+0x13e>
c0003107:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000310b:	75 0f                	jne    c000311c <get_fat+0x14d>
c000310d:	b9 01 00 00 00       	mov    ecx,0x1
c0003112:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003116:	0f 85 9f 00 00 00    	jne    c00031bb <get_fat+0x1ec>
c000311c:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003120:	89 f5                	mov    ebp,esi
c0003122:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003127:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000312a:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000312d:	80 f9 02             	cmp    cl,0x2
c0003130:	75 35                	jne    c0003167 <get_fat+0x198>
c0003132:	83 c0 ff             	add    eax,0xffffffff
c0003135:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000313a:	83 d2 ff             	adc    edx,0xffffffff
c000313d:	31 db                	xor    ebx,ebx
c000313f:	0f ac d0 09          	shrd   eax,edx,0x9
c0003143:	53                   	push   ebx
c0003144:	c1 ea 09             	shr    edx,0x9
c0003147:	51                   	push   ecx
c0003148:	52                   	push   edx
c0003149:	50                   	push   eax
c000314a:	e8 e5 39 02 00       	call   c0026b34 <__udivdi3>
c000314f:	83 c4 10             	add    esp,0x10
c0003152:	b9 01 00 00 00       	mov    ecx,0x1
c0003157:	39 c5                	cmp    ebp,eax
c0003159:	77 60                	ja     c00031bb <get_fat+0x1ec>
c000315b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003160:	74 59                	je     c00031bb <get_fat+0x1ec>
c0003162:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003165:	eb 54                	jmp    c00031bb <get_fat+0x1ec>
c0003167:	80 f9 03             	cmp    cl,0x3
c000316a:	75 05                	jne    c0003171 <get_fat+0x1a2>
c000316c:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000316f:	77 f1                	ja     c0003162 <get_fat+0x193>
c0003171:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003176:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000317a:	75 3f                	jne    c00031bb <get_fat+0x1ec>
c000317c:	31 c9                	xor    ecx,ecx
c000317e:	89 f2                	mov    edx,esi
c0003180:	89 f8                	mov    eax,edi
c0003182:	c1 ea 07             	shr    edx,0x7
c0003185:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003188:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000318b:	e8 b7 f2 ff ff       	call   c0002447 <move_window>
c0003190:	85 c0                	test   eax,eax
c0003192:	0f 85 a3 fe ff ff    	jne    c000303b <get_fat+0x6c>
c0003198:	c1 e6 02             	shl    esi,0x2
c000319b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031a1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031a5:	e8 cc ea ff ff       	call   c0001c76 <ld_dword>
c00031aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031af:	89 c1                	mov    ecx,eax
c00031b1:	eb 08                	jmp    c00031bb <get_fat+0x1ec>
c00031b3:	b9 01 00 00 00       	mov    ecx,0x1
c00031b8:	89 c8                	mov    eax,ecx
c00031ba:	c3                   	ret    
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	89 c8                	mov    eax,ecx
c00031c0:	5b                   	pop    ebx
c00031c1:	5e                   	pop    esi
c00031c2:	5f                   	pop    edi
c00031c3:	5d                   	pop    ebp
c00031c4:	c3                   	ret    

c00031c5 <dir_sdi>:
c00031c5:	55                   	push   ebp
c00031c6:	57                   	push   edi
c00031c7:	56                   	push   esi
c00031c8:	53                   	push   ebx
c00031c9:	89 c3                	mov    ebx,eax
c00031cb:	83 ec 1c             	sub    esp,0x1c
c00031ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00031d0:	31 c0                	xor    eax,eax
c00031d2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031d5:	0f 94 c0             	sete   al
c00031d8:	48                   	dec    eax
c00031d9:	25 00 00 20 f0       	and    eax,0xf0200000
c00031de:	05 00 00 00 10       	add    eax,0x10000000
c00031e3:	39 d0                	cmp    eax,edx
c00031e5:	77 0a                	ja     c00031f1 <dir_sdi+0x2c>
c00031e7:	b8 02 00 00 00       	mov    eax,0x2
c00031ec:	e9 c4 00 00 00       	jmp    c00032b5 <dir_sdi+0xf0>
c00031f1:	89 d6                	mov    esi,edx
c00031f3:	f6 c2 1f             	test   dl,0x1f
c00031f6:	75 ef                	jne    c00031e7 <dir_sdi+0x22>
c00031f8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031fb:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031fe:	85 c9                	test   ecx,ecx
c0003200:	75 2d                	jne    c000322f <dir_sdi+0x6a>
c0003202:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003205:	77 1b                	ja     c0003222 <dir_sdi+0x5d>
c0003207:	89 f2                	mov    edx,esi
c0003209:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000320d:	c1 ea 05             	shr    edx,0x5
c0003210:	39 c2                	cmp    edx,eax
c0003212:	73 d3                	jae    c00031e7 <dir_sdi+0x22>
c0003214:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003217:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000321a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000321d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003220:	eb 4b                	jmp    c000326d <dir_sdi+0xa8>
c0003222:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003225:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003229:	85 c0                	test   eax,eax
c000322b:	74 da                	je     c0003207 <dir_sdi+0x42>
c000322d:	89 c1                	mov    ecx,eax
c000322f:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003233:	c1 e5 09             	shl    ebp,0x9
c0003236:	89 ca                	mov    edx,ecx
c0003238:	39 ee                	cmp    esi,ebp
c000323a:	72 1c                	jb     c0003258 <dir_sdi+0x93>
c000323c:	89 d8                	mov    eax,ebx
c000323e:	e8 8c fd ff ff       	call   c0002fcf <get_fat>
c0003243:	89 c1                	mov    ecx,eax
c0003245:	83 f8 ff             	cmp    eax,0xffffffff
c0003248:	74 66                	je     c00032b0 <dir_sdi+0xeb>
c000324a:	83 f8 01             	cmp    eax,0x1
c000324d:	76 98                	jbe    c00031e7 <dir_sdi+0x22>
c000324f:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003252:	76 93                	jbe    c00031e7 <dir_sdi+0x22>
c0003254:	29 ee                	sub    esi,ebp
c0003256:	eb de                	jmp    c0003236 <dir_sdi+0x71>
c0003258:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000325c:	89 f8                	mov    eax,edi
c000325e:	e8 9f ec ff ff       	call   c0001f02 <clst2sect>
c0003263:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003267:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000326a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000326d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003270:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003273:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003276:	89 d1                	mov    ecx,edx
c0003278:	09 c1                	or     ecx,eax
c000327a:	0f 84 67 ff ff ff    	je     c00031e7 <dir_sdi+0x22>
c0003280:	89 f1                	mov    ecx,esi
c0003282:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000328a:	c1 e9 09             	shr    ecx,0x9
c000328d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003291:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003295:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003299:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000329c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032a5:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a9:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ac:	31 c0                	xor    eax,eax
c00032ae:	eb 05                	jmp    c00032b5 <dir_sdi+0xf0>
c00032b0:	b8 01 00 00 00       	mov    eax,0x1
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	5b                   	pop    ebx
c00032b9:	5e                   	pop    esi
c00032ba:	5f                   	pop    edi
c00032bb:	5d                   	pop    ebp
c00032bc:	c3                   	ret    

c00032bd <create_chain>:
c00032bd:	55                   	push   ebp
c00032be:	89 c5                	mov    ebp,eax
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	85 d2                	test   edx,edx
c00032c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ce:	75 0e                	jne    c00032de <create_chain+0x21>
c00032d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032d3:	85 ff                	test   edi,edi
c00032d5:	74 39                	je     c0003310 <create_chain+0x53>
c00032d7:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032da:	77 39                	ja     c0003315 <create_chain+0x58>
c00032dc:	eb 32                	jmp    c0003310 <create_chain+0x53>
c00032de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032e2:	e8 e8 fc ff ff       	call   c0002fcf <get_fat>
c00032e7:	89 c3                	mov    ebx,eax
c00032e9:	83 f8 01             	cmp    eax,0x1
c00032ec:	77 0a                	ja     c00032f8 <create_chain+0x3b>
c00032ee:	bb 01 00 00 00       	mov    ebx,0x1
c00032f3:	e9 ba 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c00032f8:	83 f8 ff             	cmp    eax,0xffffffff
c00032fb:	0f 84 62 01 00 00    	je     c0003463 <create_chain+0x1a6>
c0003301:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003304:	0f 87 a8 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c000330a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000330e:	eb 05                	jmp    c0003315 <create_chain+0x58>
c0003310:	bf 01 00 00 00       	mov    edi,0x1
c0003315:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003319:	75 07                	jne    c0003322 <create_chain+0x65>
c000331b:	31 db                	xor    ebx,ebx
c000331d:	e9 90 01 00 00       	jmp    c00034b2 <create_chain+0x1f5>
c0003322:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003325:	75 74                	jne    c000339b <create_chain+0xde>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	89 fa                	mov    edx,edi
c000332e:	89 f0                	mov    eax,esi
c0003330:	e8 2d f9 ff ff       	call   c0002c62 <find_bitmap>
c0003335:	89 c3                	mov    ebx,eax
c0003337:	8d 40 ff             	lea    eax,[eax-0x1]
c000333a:	83 f8 fd             	cmp    eax,0xfffffffd
c000333d:	0f 87 6f 01 00 00    	ja     c00034b2 <create_chain+0x1f5>
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	b9 01 00 00 00       	mov    ecx,0x1
c000334b:	6a 01                	push   0x1
c000334d:	89 da                	mov    edx,ebx
c000334f:	89 f0                	mov    eax,esi
c0003351:	e8 bf f9 ff ff       	call   c0002d15 <change_bitmap>
c0003356:	83 c4 10             	add    esp,0x10
c0003359:	83 f8 02             	cmp    eax,0x2
c000335c:	74 90                	je     c00032ee <create_chain+0x31>
c000335e:	83 f8 01             	cmp    eax,0x1
c0003361:	0f 84 fc 00 00 00    	je     c0003463 <create_chain+0x1a6>
c0003367:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000336c:	75 09                	jne    c0003377 <create_chain+0xba>
c000336e:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003372:	e9 0c 01 00 00       	jmp    c0003483 <create_chain+0x1c6>
c0003377:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000337b:	0f 85 e7 00 00 00    	jne    c0003468 <create_chain+0x1ab>
c0003381:	8d 57 01             	lea    edx,[edi+0x1]
c0003384:	39 da                	cmp    edx,ebx
c0003386:	0f 84 f7 00 00 00    	je     c0003483 <create_chain+0x1c6>
c000338c:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000338f:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003393:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003396:	e9 cd 00 00 00       	jmp    c0003468 <create_chain+0x1ab>
c000339b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000339f:	75 41                	jne    c00033e2 <create_chain+0x125>
c00033a1:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033a4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a7:	77 05                	ja     c00033ae <create_chain+0xf1>
c00033a9:	bb 02 00 00 00       	mov    ebx,0x2
c00033ae:	89 da                	mov    edx,ebx
c00033b0:	89 e8                	mov    eax,ebp
c00033b2:	e8 18 fc ff ff       	call   c0002fcf <get_fat>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 2e ff ff ff    	je     c00032ee <create_chain+0x31>
c00033c0:	83 f8 ff             	cmp    eax,0xffffffff
c00033c3:	0f 84 9a 00 00 00    	je     c0003463 <create_chain+0x1a6>
c00033c9:	85 c0                	test   eax,eax
c00033cb:	74 11                	je     c00033de <create_chain+0x121>
c00033cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d0:	83 f8 01             	cmp    eax,0x1
c00033d3:	76 0d                	jbe    c00033e2 <create_chain+0x125>
c00033d5:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d8:	76 08                	jbe    c00033e2 <create_chain+0x125>
c00033da:	89 c7                	mov    edi,eax
c00033dc:	eb 04                	jmp    c00033e2 <create_chain+0x125>
c00033de:	85 db                	test   ebx,ebx
c00033e0:	75 38                	jne    c000341a <create_chain+0x15d>
c00033e2:	89 fb                	mov    ebx,edi
c00033e4:	43                   	inc    ebx
c00033e5:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e8:	77 0e                	ja     c00033f8 <create_chain+0x13b>
c00033ea:	83 ff 01             	cmp    edi,0x1
c00033ed:	0f 86 28 ff ff ff    	jbe    c000331b <create_chain+0x5e>
c00033f3:	bb 02 00 00 00       	mov    ebx,0x2
c00033f8:	89 da                	mov    edx,ebx
c00033fa:	89 e8                	mov    eax,ebp
c00033fc:	e8 ce fb ff ff       	call   c0002fcf <get_fat>
c0003401:	85 c0                	test   eax,eax
c0003403:	74 15                	je     c000341a <create_chain+0x15d>
c0003405:	83 f8 01             	cmp    eax,0x1
c0003408:	0f 84 e0 fe ff ff    	je     c00032ee <create_chain+0x31>
c000340e:	40                   	inc    eax
c000340f:	74 52                	je     c0003463 <create_chain+0x1a6>
c0003411:	39 fb                	cmp    ebx,edi
c0003413:	75 cf                	jne    c00033e4 <create_chain+0x127>
c0003415:	e9 01 ff ff ff       	jmp    c000331b <create_chain+0x5e>
c000341a:	83 c9 ff             	or     ecx,0xffffffff
c000341d:	89 da                	mov    edx,ebx
c000341f:	89 f0                	mov    eax,esi
c0003421:	e8 a4 f9 ff ff       	call   c0002dca <put_fat>
c0003426:	85 c0                	test   eax,eax
c0003428:	75 32                	jne    c000345c <create_chain+0x19f>
c000342a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000342f:	74 11                	je     c0003442 <create_chain+0x185>
c0003431:	89 d9                	mov    ecx,ebx
c0003433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003437:	89 f0                	mov    eax,esi
c0003439:	e8 8c f9 ff ff       	call   c0002dca <put_fat>
c000343e:	85 c0                	test   eax,eax
c0003440:	75 1a                	jne    c000345c <create_chain+0x19f>
c0003442:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003445:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003448:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000344b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000344e:	39 d0                	cmp    eax,edx
c0003450:	77 04                	ja     c0003456 <create_chain+0x199>
c0003452:	48                   	dec    eax
c0003453:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003456:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000345a:	eb 56                	jmp    c00034b2 <create_chain+0x1f5>
c000345c:	48                   	dec    eax
c000345d:	0f 85 8b fe ff ff    	jne    c00032ee <create_chain+0x31>
c0003463:	83 cb ff             	or     ebx,0xffffffff
c0003466:	eb 4a                	jmp    c00034b2 <create_chain+0x1f5>
c0003468:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000346c:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000346f:	41                   	inc    ecx
c0003470:	39 d9                	cmp    ecx,ebx
c0003472:	75 19                	jne    c000348d <create_chain+0x1d0>
c0003474:	b9 02 00 00 00       	mov    ecx,0x2
c0003479:	85 d2                	test   edx,edx
c000347b:	74 03                	je     c0003480 <create_chain+0x1c3>
c000347d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003480:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003483:	85 c0                	test   eax,eax
c0003485:	0f 85 63 fe ff ff    	jne    c00032ee <create_chain+0x31>
c000348b:	eb b5                	jmp    c0003442 <create_chain+0x185>
c000348d:	85 d2                	test   edx,edx
c000348f:	75 07                	jne    c0003498 <create_chain+0x1db>
c0003491:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000349e:	89 e8                	mov    eax,ebp
c00034a0:	e8 bb fa ff ff       	call   c0002f60 <fill_last_frag>
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 b3                	jne    c000345c <create_chain+0x19f>
c00034a9:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b0:	eb 90                	jmp    c0003442 <create_chain+0x185>
c00034b2:	83 c4 1c             	add    esp,0x1c
c00034b5:	89 d8                	mov    eax,ebx
c00034b7:	5b                   	pop    ebx
c00034b8:	5e                   	pop    esi
c00034b9:	5f                   	pop    edi
c00034ba:	5d                   	pop    ebp
c00034bb:	c3                   	ret    

c00034bc <remove_chain>:
c00034bc:	55                   	push   ebp
c00034bd:	57                   	push   edi
c00034be:	56                   	push   esi
c00034bf:	53                   	push   ebx
c00034c0:	83 ec 1c             	sub    esp,0x1c
c00034c3:	83 fa 01             	cmp    edx,0x1
c00034c6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034ca:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034cc:	77 0a                	ja     c00034d8 <remove_chain+0x1c>
c00034ce:	b8 02 00 00 00       	mov    eax,0x2
c00034d3:	e9 24 01 00 00       	jmp    c00035fc <remove_chain+0x140>
c00034d8:	89 d6                	mov    esi,edx
c00034da:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034dd:	76 ef                	jbe    c00034ce <remove_chain+0x12>
c00034df:	89 c7                	mov    edi,eax
c00034e1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034e6:	75 06                	jne    c00034ee <remove_chain+0x32>
c00034e8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034ec:	eb 54                	jmp    c0003542 <remove_chain+0x86>
c00034ee:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f1:	75 06                	jne    c00034f9 <remove_chain+0x3d>
c00034f3:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034f7:	74 ef                	je     c00034e8 <remove_chain+0x2c>
c00034f9:	83 c9 ff             	or     ecx,0xffffffff
c00034fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003500:	89 d8                	mov    eax,ebx
c0003502:	e8 c3 f8 ff ff       	call   c0002dca <put_fat>
c0003507:	85 c0                	test   eax,eax
c0003509:	74 dd                	je     c00034e8 <remove_chain+0x2c>
c000350b:	e9 ec 00 00 00       	jmp    c00035fc <remove_chain+0x140>
c0003510:	83 f8 01             	cmp    eax,0x1
c0003513:	74 b9                	je     c00034ce <remove_chain+0x12>
c0003515:	83 f8 ff             	cmp    eax,0xffffffff
c0003518:	74 6d                	je     c0003587 <remove_chain+0xcb>
c000351a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000351d:	75 6f                	jne    c000358e <remove_chain+0xd2>
c000351f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003522:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003525:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003528:	39 d0                	cmp    eax,edx
c000352a:	73 08                	jae    c0003534 <remove_chain+0x78>
c000352c:	40                   	inc    eax
c000352d:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003531:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003534:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003537:	39 e9                	cmp    ecx,ebp
c0003539:	75 64                	jne    c000359f <remove_chain+0xe3>
c000353b:	89 ee                	mov    esi,ebp
c000353d:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003540:	76 0f                	jbe    c0003551 <remove_chain+0x95>
c0003542:	89 f2                	mov    edx,esi
c0003544:	89 f8                	mov    eax,edi
c0003546:	e8 84 fa ff ff       	call   c0002fcf <get_fat>
c000354b:	89 c5                	mov    ebp,eax
c000354d:	85 c0                	test   eax,eax
c000354f:	75 bf                	jne    c0003510 <remove_chain+0x54>
c0003551:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003554:	0f 85 a0 00 00 00    	jne    c00035fa <remove_chain+0x13e>
c000355a:	eb 6c                	jmp    c00035c8 <remove_chain+0x10c>
c000355c:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000355f:	84 c0                	test   al,al
c0003561:	75 7d                	jne    c00035e0 <remove_chain+0x124>
c0003563:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003566:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000356a:	0f 84 86 00 00 00    	je     c00035f6 <remove_chain+0x13a>
c0003570:	89 da                	mov    edx,ebx
c0003572:	89 f8                	mov    eax,edi
c0003574:	e8 56 fa ff ff       	call   c0002fcf <get_fat>
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	0f 86 4c ff ff ff    	jbe    c00034ce <remove_chain+0x12>
c0003582:	83 f8 ff             	cmp    eax,0xffffffff
c0003585:	75 4e                	jne    c00035d5 <remove_chain+0x119>
c0003587:	b8 01 00 00 00       	mov    eax,0x1
c000358c:	eb 6e                	jmp    c00035fc <remove_chain+0x140>
c000358e:	31 c9                	xor    ecx,ecx
c0003590:	89 f2                	mov    edx,esi
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 31 f8 ff ff       	call   c0002dca <put_fat>
c0003599:	85 c0                	test   eax,eax
c000359b:	74 82                	je     c000351f <remove_chain+0x63>
c000359d:	eb 5d                	jmp    c00035fc <remove_chain+0x140>
c000359f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035a2:	75 1b                	jne    c00035bf <remove_chain+0x103>
c00035a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	83 ec 0c             	sub    esp,0xc
c00035ad:	6a 00                	push   0x0
c00035af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035b3:	e8 5d f7 ff ff       	call   c0002d15 <change_bitmap>
c00035b8:	83 c4 10             	add    esp,0x10
c00035bb:	85 c0                	test   eax,eax
c00035bd:	75 3d                	jne    c00035fc <remove_chain+0x140>
c00035bf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035c3:	e9 73 ff ff ff       	jmp    c000353b <remove_chain+0x7f>
c00035c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035cd:	75 8d                	jne    c000355c <remove_chain+0xa0>
c00035cf:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035d3:	eb 25                	jmp    c00035fa <remove_chain+0x13e>
c00035d5:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d8:	89 c3                	mov    ebx,eax
c00035da:	39 c2                	cmp    edx,eax
c00035dc:	74 88                	je     c0003566 <remove_chain+0xaa>
c00035de:	eb 1a                	jmp    c00035fa <remove_chain+0x13e>
c00035e0:	3c 03                	cmp    al,0x3
c00035e2:	75 16                	jne    c00035fa <remove_chain+0x13e>
c00035e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035e7:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035eb:	77 0d                	ja     c00035fa <remove_chain+0x13e>
c00035ed:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035f4:	72 04                	jb     c00035fa <remove_chain+0x13e>
c00035f6:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035fa:	31 c0                	xor    eax,eax
c00035fc:	83 c4 1c             	add    esp,0x1c
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_clear>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	56                   	push   esi
c0003607:	89 c6                	mov    esi,eax
c0003609:	53                   	push   ebx
c000360a:	83 ec 1c             	sub    esp,0x1c
c000360d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003611:	e8 9d ed ff ff       	call   c00023b3 <sync_window>
c0003616:	85 c0                	test   eax,eax
c0003618:	0f 85 de 00 00 00    	jne    c00036fc <dir_clear+0xf8>
c000361e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003622:	89 f0                	mov    eax,esi
c0003624:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003627:	e8 d6 e8 ff ff       	call   c0001f02 <clst2sect>
c000362c:	b9 00 02 00 00       	mov    ecx,0x200
c0003631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003639:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000363c:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000363f:	89 e8                	mov    eax,ebp
c0003641:	31 d2                	xor    edx,edx
c0003643:	e8 b5 e6 ff ff       	call   c0001cfd <mem_set>
c0003648:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000364c:	c1 e3 09             	shl    ebx,0x9
c000364f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003655:	76 1f                	jbe    c0003676 <dir_clear+0x72>
c0003657:	bb 00 80 00 00       	mov    ebx,0x8000
c000365c:	eb 18                	jmp    c0003676 <dir_clear+0x72>
c000365e:	83 ec 0c             	sub    esp,0xc
c0003661:	53                   	push   ebx
c0003662:	e8 35 4e 00 00       	call   c000849c <ff_memalloc>
c0003667:	83 c4 10             	add    esp,0x10
c000366a:	89 c7                	mov    edi,eax
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 8f 00 00 00    	jne    c0003703 <dir_clear+0xff>
c0003674:	d1 eb                	shr    ebx,1
c0003676:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000367c:	77 e0                	ja     c000365e <dir_clear+0x5a>
c000367e:	31 db                	xor    ebx,ebx
c0003680:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003684:	39 d8                	cmp    eax,ebx
c0003686:	76 66                	jbe    c00036ee <dir_clear+0xea>
c0003688:	83 ec 0c             	sub    esp,0xc
c000368b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000368f:	6a 01                	push   0x1
c0003691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003695:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003699:	55                   	push   ebp
c000369a:	50                   	push   eax
c000369b:	e8 94 e5 ff ff       	call   c0001c34 <disk_write>
c00036a0:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036a5:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 3d                	jne    c00036ee <dir_clear+0xea>
c00036b1:	43                   	inc    ebx
c00036b2:	eb cc                	jmp    c0003680 <dir_clear+0x7c>
c00036b4:	83 ec 0c             	sub    esp,0xc
c00036b7:	31 d2                	xor    edx,edx
c00036b9:	55                   	push   ebp
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036c0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036c4:	52                   	push   edx
c00036c5:	50                   	push   eax
c00036c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ca:	57                   	push   edi
c00036cb:	50                   	push   eax
c00036cc:	e8 63 e5 ff ff       	call   c0001c34 <disk_write>
c00036d1:	83 c4 20             	add    esp,0x20
c00036d4:	85 c0                	test   eax,eax
c00036d6:	75 0a                	jne    c00036e2 <dir_clear+0xde>
c00036d8:	01 eb                	add    ebx,ebp
c00036da:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036de:	39 d8                	cmp    eax,ebx
c00036e0:	77 d2                	ja     c00036b4 <dir_clear+0xb0>
c00036e2:	83 ec 0c             	sub    esp,0xc
c00036e5:	57                   	push   edi
c00036e6:	e8 c7 4d 00 00       	call   c00084b2 <ff_memfree>
c00036eb:	83 c4 10             	add    esp,0x10
c00036ee:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036f2:	39 d8                	cmp    eax,ebx
c00036f4:	0f 95 c0             	setne  al
c00036f7:	0f b6 c0             	movzx  eax,al
c00036fa:	eb 19                	jmp    c0003715 <dir_clear+0x111>
c00036fc:	b8 01 00 00 00       	mov    eax,0x1
c0003701:	eb 12                	jmp    c0003715 <dir_clear+0x111>
c0003703:	89 d9                	mov    ecx,ebx
c0003705:	31 d2                	xor    edx,edx
c0003707:	c1 eb 09             	shr    ebx,0x9
c000370a:	e8 ee e5 ff ff       	call   c0001cfd <mem_set>
c000370f:	89 dd                	mov    ebp,ebx
c0003711:	31 db                	xor    ebx,ebx
c0003713:	eb c5                	jmp    c00036da <dir_clear+0xd6>
c0003715:	83 c4 1c             	add    esp,0x1c
c0003718:	5b                   	pop    ebx
c0003719:	5e                   	pop    esi
c000371a:	5f                   	pop    edi
c000371b:	5d                   	pop    ebp
c000371c:	c3                   	ret    

c000371d <dir_next>:
c000371d:	55                   	push   ebp
c000371e:	57                   	push   edi
c000371f:	56                   	push   esi
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 1c             	sub    esp,0x1c
c0003726:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003728:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000372f:	8d 78 20             	lea    edi,[eax+0x20]
c0003732:	31 c0                	xor    eax,eax
c0003734:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003738:	0f 94 c0             	sete   al
c000373b:	48                   	dec    eax
c000373c:	25 00 00 20 f0       	and    eax,0xf0200000
c0003741:	05 00 00 00 10       	add    eax,0x10000000
c0003746:	39 f8                	cmp    eax,edi
c0003748:	77 0e                	ja     c0003758 <dir_next+0x3b>
c000374a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003751:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003758:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000375b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000375e:	b8 04 00 00 00       	mov    eax,0x4
c0003763:	89 ce                	mov    esi,ecx
c0003765:	09 d6                	or     esi,edx
c0003767:	0f 84 da 00 00 00    	je     c0003847 <dir_next+0x12a>
c000376d:	89 f8                	mov    eax,edi
c000376f:	25 ff 01 00 00       	and    eax,0x1ff
c0003774:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003778:	0f 85 b9 00 00 00    	jne    c0003837 <dir_next+0x11a>
c000377e:	83 c2 01             	add    edx,0x1
c0003781:	83 d1 00             	adc    ecx,0x0
c0003784:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003787:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000378a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000378d:	85 d2                	test   edx,edx
c000378f:	75 29                	jne    c00037ba <dir_next+0x9d>
c0003791:	89 fa                	mov    edx,edi
c0003793:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003797:	c1 ea 05             	shr    edx,0x5
c000379a:	39 c2                	cmp    edx,eax
c000379c:	0f 82 95 00 00 00    	jb     c0003837 <dir_next+0x11a>
c00037a2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037b0:	b8 04 00 00 00       	mov    eax,0x4
c00037b5:	e9 8d 00 00 00       	jmp    c0003847 <dir_next+0x12a>
c00037ba:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037be:	89 f9                	mov    ecx,edi
c00037c0:	48                   	dec    eax
c00037c1:	c1 e9 09             	shr    ecx,0x9
c00037c4:	85 c8                	test   eax,ecx
c00037c6:	75 6f                	jne    c0003837 <dir_next+0x11a>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	e8 00 f8 ff ff       	call   c0002fcf <get_fat>
c00037cf:	89 c6                	mov    esi,eax
c00037d1:	83 f8 01             	cmp    eax,0x1
c00037d4:	77 07                	ja     c00037dd <dir_next+0xc0>
c00037d6:	b8 02 00 00 00       	mov    eax,0x2
c00037db:	eb 6a                	jmp    c0003847 <dir_next+0x12a>
c00037dd:	83 f8 ff             	cmp    eax,0xffffffff
c00037e0:	75 07                	jne    c00037e9 <dir_next+0xcc>
c00037e2:	b8 01 00 00 00       	mov    eax,0x1
c00037e7:	eb 5e                	jmp    c0003847 <dir_next+0x12a>
c00037e9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037ec:	77 37                	ja     c0003825 <dir_next+0x108>
c00037ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037f3:	74 ad                	je     c00037a2 <dir_next+0x85>
c00037f5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f8:	89 d8                	mov    eax,ebx
c00037fa:	e8 be fa ff ff       	call   c00032bd <create_chain>
c00037ff:	89 c6                	mov    esi,eax
c0003801:	b8 07 00 00 00       	mov    eax,0x7
c0003806:	85 f6                	test   esi,esi
c0003808:	74 3d                	je     c0003847 <dir_next+0x12a>
c000380a:	83 fe 01             	cmp    esi,0x1
c000380d:	74 c7                	je     c00037d6 <dir_next+0xb9>
c000380f:	83 fe ff             	cmp    esi,0xffffffff
c0003812:	74 ce                	je     c00037e2 <dir_next+0xc5>
c0003814:	89 f2                	mov    edx,esi
c0003816:	89 e8                	mov    eax,ebp
c0003818:	e8 e7 fd ff ff       	call   c0003604 <dir_clear>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 c1                	jne    c00037e2 <dir_next+0xc5>
c0003821:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003825:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003828:	89 f2                	mov    edx,esi
c000382a:	89 e8                	mov    eax,ebp
c000382c:	e8 d1 e6 ff ff       	call   c0001f02 <clst2sect>
c0003831:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003834:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000383e:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003842:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003845:	31 c0                	xor    eax,eax
c0003847:	83 c4 1c             	add    esp,0x1c
c000384a:	5b                   	pop    ebx
c000384b:	5e                   	pop    esi
c000384c:	5f                   	pop    edi
c000384d:	5d                   	pop    ebp
c000384e:	c3                   	ret    

c000384f <load_xdir>:
c000384f:	55                   	push   ebp
c0003850:	57                   	push   edi
c0003851:	56                   	push   esi
c0003852:	89 c6                	mov    esi,eax
c0003854:	53                   	push   ebx
c0003855:	83 ec 1c             	sub    esp,0x1c
c0003858:	8b 00                	mov    eax,DWORD PTR [eax]
c000385a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000385d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003860:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003863:	e8 df eb ff ff       	call   c0002447 <move_window>
c0003868:	89 c3                	mov    ebx,eax
c000386a:	85 c0                	test   eax,eax
c000386c:	0f 85 0c 01 00 00    	jne    c000397e <load_xdir+0x12f>
c0003872:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003875:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003878:	0f 85 fb 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c000387e:	89 f8                	mov    eax,edi
c0003880:	b9 20 00 00 00       	mov    ecx,0x20
c0003885:	e8 5e e4 ff ff       	call   c0001ce8 <mem_cpy>
c000388a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000388e:	40                   	inc    eax
c000388f:	c1 e0 05             	shl    eax,0x5
c0003892:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003896:	83 e8 60             	sub    eax,0x60
c0003899:	3d 00 02 00 00       	cmp    eax,0x200
c000389e:	0f 87 d5 00 00 00    	ja     c0003979 <load_xdir+0x12a>
c00038a4:	31 d2                	xor    edx,edx
c00038a6:	89 f0                	mov    eax,esi
c00038a8:	e8 70 fe ff ff       	call   c000371d <dir_next>
c00038ad:	89 c3                	mov    ebx,eax
c00038af:	83 f8 04             	cmp    eax,0x4
c00038b2:	0f 84 c1 00 00 00    	je     c0003979 <load_xdir+0x12a>
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 85 be 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038c0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038c3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c8:	e8 7a eb ff ff       	call   c0002447 <move_window>
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	85 c0                	test   eax,eax
c00038d1:	0f 85 a7 00 00 00    	jne    c000397e <load_xdir+0x12f>
c00038d7:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038da:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038dd:	0f 85 96 00 00 00    	jne    c0003979 <load_xdir+0x12a>
c00038e3:	8d 47 20             	lea    eax,[edi+0x20]
c00038e6:	b9 20 00 00 00       	mov    ecx,0x20
c00038eb:	e8 f8 e3 ff ff       	call   c0001ce8 <mem_cpy>
c00038f0:	31 d2                	xor    edx,edx
c00038f2:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038f6:	b9 0f 00 00 00       	mov    ecx,0xf
c00038fb:	83 c0 2c             	add    eax,0x2c
c00038fe:	f7 f1                	div    ecx
c0003900:	c1 e0 05             	shl    eax,0x5
c0003903:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003907:	77 70                	ja     c0003979 <load_xdir+0x12a>
c0003909:	bd 40 00 00 00       	mov    ebp,0x40
c000390e:	31 d2                	xor    edx,edx
c0003910:	89 f0                	mov    eax,esi
c0003912:	e8 06 fe ff ff       	call   c000371d <dir_next>
c0003917:	89 c3                	mov    ebx,eax
c0003919:	83 f8 04             	cmp    eax,0x4
c000391c:	74 5b                	je     c0003979 <load_xdir+0x12a>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 5c                	jne    c000397e <load_xdir+0x12f>
c0003922:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003925:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003928:	8b 06                	mov    eax,DWORD PTR [esi]
c000392a:	e8 18 eb ff ff       	call   c0002447 <move_window>
c000392f:	89 c3                	mov    ebx,eax
c0003931:	85 c0                	test   eax,eax
c0003933:	75 49                	jne    c000397e <load_xdir+0x12f>
c0003935:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003938:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000393b:	75 3c                	jne    c0003979 <load_xdir+0x12a>
c000393d:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003943:	77 0d                	ja     c0003952 <load_xdir+0x103>
c0003945:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003948:	b9 20 00 00 00       	mov    ecx,0x20
c000394d:	e8 96 e3 ff ff       	call   c0001ce8 <mem_cpy>
c0003952:	83 c5 20             	add    ebp,0x20
c0003955:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003959:	77 b3                	ja     c000390e <load_xdir+0xbf>
c000395b:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003961:	77 1b                	ja     c000397e <load_xdir+0x12f>
c0003963:	89 f8                	mov    eax,edi
c0003965:	e8 cd e7 ff ff       	call   c0002137 <xdir_sum>
c000396a:	89 c1                	mov    ecx,eax
c000396c:	8d 47 02             	lea    eax,[edi+0x2]
c000396f:	e8 f5 e2 ff ff       	call   c0001c69 <ld_word>
c0003974:	66 39 c1             	cmp    cx,ax
c0003977:	74 05                	je     c000397e <load_xdir+0x12f>
c0003979:	bb 02 00 00 00       	mov    ebx,0x2
c000397e:	83 c4 1c             	add    esp,0x1c
c0003981:	89 d8                	mov    eax,ebx
c0003983:	5b                   	pop    ebx
c0003984:	5e                   	pop    esi
c0003985:	5f                   	pop    edi
c0003986:	5d                   	pop    ebp
c0003987:	c3                   	ret    

c0003988 <load_obj_xdir>:
c0003988:	53                   	push   ebx
c0003989:	89 c3                	mov    ebx,eax
c000398b:	83 ec 08             	sub    esp,0x8
c000398e:	8b 02                	mov    eax,DWORD PTR [edx]
c0003990:	89 03                	mov    DWORD PTR [ebx],eax
c0003992:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003995:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003998:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000399b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000399e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039a1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a8:	30 c0                	xor    al,al
c00039aa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039b1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039b4:	89 d8                	mov    eax,ebx
c00039b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b9:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039bc:	e8 04 f8 ff ff       	call   c00031c5 <dir_sdi>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	75 0b                	jne    c00039d0 <load_obj_xdir+0x48>
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	83 c4 08             	add    esp,0x8
c00039ca:	5b                   	pop    ebx
c00039cb:	e9 7f fe ff ff       	jmp    c000384f <load_xdir>
c00039d0:	83 c4 08             	add    esp,0x8
c00039d3:	5b                   	pop    ebx
c00039d4:	c3                   	ret    

c00039d5 <dir_read>:
c00039d5:	55                   	push   ebp
c00039d6:	bd 04 00 00 00       	mov    ebp,0x4
c00039db:	57                   	push   edi
c00039dc:	56                   	push   esi
c00039dd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039e2:	53                   	push   ebx
c00039e3:	89 c3                	mov    ebx,eax
c00039e5:	83 ec 1c             	sub    esp,0x1c
c00039e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039ec:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ee:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039f3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039f6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f9:	89 c8                	mov    eax,ecx
c00039fb:	09 d0                	or     eax,edx
c00039fd:	0f 84 25 01 00 00    	je     c0003b28 <dir_read+0x153>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	e8 3d ea ff ff       	call   c0002447 <move_window>
c0003a0a:	89 c5                	mov    ebp,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 23 01 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a14:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a17:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a19:	84 c9                	test   cl,cl
c0003a1b:	0f 84 11 01 00 00    	je     c0003b32 <dir_read+0x15d>
c0003a21:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a24:	75 48                	jne    c0003a6e <dir_read+0x99>
c0003a26:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a2b:	74 10                	je     c0003a3d <dir_read+0x68>
c0003a2d:	80 f9 83             	cmp    cl,0x83
c0003a30:	0f 85 dd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a36:	31 ed                	xor    ebp,ebp
c0003a38:	e9 08 01 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a3d:	80 f9 85             	cmp    cl,0x85
c0003a40:	0f 85 cd 00 00 00    	jne    c0003b13 <dir_read+0x13e>
c0003a46:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a49:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a4c:	89 d8                	mov    eax,ebx
c0003a4e:	e8 fc fd ff ff       	call   c000384f <load_xdir>
c0003a53:	89 c5                	mov    ebp,eax
c0003a55:	85 c0                	test   eax,eax
c0003a57:	0f 85 da 00 00 00    	jne    c0003b37 <dir_read+0x162>
c0003a5d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a60:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a63:	83 e0 3f             	and    eax,0x3f
c0003a66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a69:	e9 d7 00 00 00       	jmp    c0003b45 <dir_read+0x170>
c0003a6e:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a71:	83 e0 3f             	and    eax,0x3f
c0003a74:	80 f9 2e             	cmp    cl,0x2e
c0003a77:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a7b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a7e:	0f 84 8a 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a84:	80 f9 e5             	cmp    cl,0xe5
c0003a87:	0f 84 81 00 00 00    	je     c0003b0e <dir_read+0x139>
c0003a8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a91:	83 e0 1f             	and    eax,0x1f
c0003a94:	83 f8 08             	cmp    eax,0x8
c0003a97:	0f 94 c0             	sete   al
c0003a9a:	0f b6 c0             	movzx  eax,al
c0003a9d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003aa1:	75 6b                	jne    c0003b0e <dir_read+0x139>
c0003aa3:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa8:	75 44                	jne    c0003aee <dir_read+0x119>
c0003aaa:	f6 c1 40             	test   cl,0x40
c0003aad:	74 12                	je     c0003ac1 <dir_read+0xec>
c0003aaf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ab2:	83 e1 bf             	and    ecx,0xffffffbf
c0003ab5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003abc:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003abf:	eb 06                	jmp    c0003ac7 <dir_read+0xf2>
c0003ac1:	89 f0                	mov    eax,esi
c0003ac3:	38 c8                	cmp    al,cl
c0003ac5:	75 47                	jne    c0003b0e <dir_read+0x139>
c0003ac7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003acb:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad0:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ad3:	75 3e                	jne    c0003b13 <dir_read+0x13e>
c0003ad5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad9:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003adc:	e8 8a e4 ff ff       	call   c0001f6b <pick_lfn>
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 2e                	je     c0003b13 <dir_read+0x13e>
c0003ae5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae9:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aec:	eb 25                	jmp    c0003b13 <dir_read+0x13e>
c0003aee:	89 f0                	mov    eax,esi
c0003af0:	84 c0                	test   al,al
c0003af2:	75 11                	jne    c0003b05 <dir_read+0x130>
c0003af4:	89 d0                	mov    eax,edx
c0003af6:	e8 2a e6 ff ff       	call   c0002125 <sum_sfn>
c0003afb:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003aff:	0f 84 31 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b05:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b0c:	eb 37                	jmp    c0003b45 <dir_read+0x170>
c0003b0e:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b13:	31 d2                	xor    edx,edx
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 01 fc ff ff       	call   c000371d <dir_next>
c0003b1c:	89 c5                	mov    ebp,eax
c0003b1e:	85 c0                	test   eax,eax
c0003b20:	0f 84 cd fe ff ff    	je     c00039f3 <dir_read+0x1e>
c0003b26:	eb 0f                	jmp    c0003b37 <dir_read+0x162>
c0003b28:	85 ed                	test   ebp,ebp
c0003b2a:	0f 84 06 ff ff ff    	je     c0003a36 <dir_read+0x61>
c0003b30:	eb 05                	jmp    c0003b37 <dir_read+0x162>
c0003b32:	bd 04 00 00 00       	mov    ebp,0x4
c0003b37:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b3e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b45:	83 c4 1c             	add    esp,0x1c
c0003b48:	89 e8                	mov    eax,ebp
c0003b4a:	5b                   	pop    ebx
c0003b4b:	5e                   	pop    esi
c0003b4c:	5f                   	pop    edi
c0003b4d:	5d                   	pop    ebp
c0003b4e:	c3                   	ret    

c0003b4f <dir_alloc>:
c0003b4f:	55                   	push   ebp
c0003b50:	89 d5                	mov    ebp,edx
c0003b52:	57                   	push   edi
c0003b53:	31 d2                	xor    edx,edx
c0003b55:	56                   	push   esi
c0003b56:	53                   	push   ebx
c0003b57:	89 c3                	mov    ebx,eax
c0003b59:	83 ec 0c             	sub    esp,0xc
c0003b5c:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b5e:	e8 62 f6 ff ff       	call   c00031c5 <dir_sdi>
c0003b63:	85 c0                	test   eax,eax
c0003b65:	75 4e                	jne    c0003bb5 <dir_alloc+0x66>
c0003b67:	31 f6                	xor    esi,esi
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f8                	mov    eax,edi
c0003b71:	e8 d1 e8 ff ff       	call   c0002447 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 3b                	jne    c0003bb5 <dir_alloc+0x66>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b80:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b82:	75 07                	jne    c0003b8b <dir_alloc+0x3c>
c0003b84:	f7 d2                	not    edx
c0003b86:	c0 ea 07             	shr    dl,0x7
c0003b89:	eb 0d                	jmp    c0003b98 <dir_alloc+0x49>
c0003b8b:	84 d2                	test   dl,dl
c0003b8d:	0f 94 c1             	sete   cl
c0003b90:	80 fa e5             	cmp    dl,0xe5
c0003b93:	0f 94 c2             	sete   dl
c0003b96:	09 ca                	or     edx,ecx
c0003b98:	84 d2                	test   dl,dl
c0003b9a:	74 07                	je     c0003ba3 <dir_alloc+0x54>
c0003b9c:	46                   	inc    esi
c0003b9d:	39 ee                	cmp    esi,ebp
c0003b9f:	75 04                	jne    c0003ba5 <dir_alloc+0x56>
c0003ba1:	eb 1c                	jmp    c0003bbf <dir_alloc+0x70>
c0003ba3:	31 f6                	xor    esi,esi
c0003ba5:	ba 01 00 00 00       	mov    edx,0x1
c0003baa:	89 d8                	mov    eax,ebx
c0003bac:	e8 6c fb ff ff       	call   c000371d <dir_next>
c0003bb1:	85 c0                	test   eax,eax
c0003bb3:	74 b4                	je     c0003b69 <dir_alloc+0x1a>
c0003bb5:	83 f8 04             	cmp    eax,0x4
c0003bb8:	75 05                	jne    c0003bbf <dir_alloc+0x70>
c0003bba:	b8 07 00 00 00       	mov    eax,0x7
c0003bbf:	83 c4 0c             	add    esp,0xc
c0003bc2:	5b                   	pop    ebx
c0003bc3:	5e                   	pop    esi
c0003bc4:	5f                   	pop    edi
c0003bc5:	5d                   	pop    ebp
c0003bc6:	c3                   	ret    

c0003bc7 <store_xdir>:
c0003bc7:	55                   	push   ebp
c0003bc8:	57                   	push   edi
c0003bc9:	89 c7                	mov    edi,eax
c0003bcb:	56                   	push   esi
c0003bcc:	53                   	push   ebx
c0003bcd:	83 ec 0c             	sub    esp,0xc
c0003bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bd2:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bd5:	89 e8                	mov    eax,ebp
c0003bd7:	e8 5b e5 ff ff       	call   c0002137 <xdir_sum>
c0003bdc:	0f b7 d0             	movzx  edx,ax
c0003bdf:	8d 45 02             	lea    eax,[ebp+0x2]
c0003be2:	e8 f4 e0 ff ff       	call   c0001cdb <st_word>
c0003be7:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003beb:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bee:	89 f8                	mov    eax,edi
c0003bf0:	e8 d0 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003bf5:	89 c6                	mov    esi,eax
c0003bf7:	85 f6                	test   esi,esi
c0003bf9:	75 3d                	jne    c0003c38 <store_xdir+0x71>
c0003bfb:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bfe:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c03:	e8 3f e8 ff ff       	call   c0002447 <move_window>
c0003c08:	89 c6                	mov    esi,eax
c0003c0a:	85 c0                	test   eax,eax
c0003c0c:	75 2a                	jne    c0003c38 <store_xdir+0x71>
c0003c0e:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c11:	b9 20 00 00 00       	mov    ecx,0x20
c0003c16:	89 ea                	mov    edx,ebp
c0003c18:	e8 cb e0 ff ff       	call   c0001ce8 <mem_cpy>
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	85 db                	test   ebx,ebx
c0003c21:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c25:	74 11                	je     c0003c38 <store_xdir+0x71>
c0003c27:	31 d2                	xor    edx,edx
c0003c29:	89 f8                	mov    eax,edi
c0003c2b:	83 c5 20             	add    ebp,0x20
c0003c2e:	e8 ea fa ff ff       	call   c000371d <dir_next>
c0003c33:	4b                   	dec    ebx
c0003c34:	89 c6                	mov    esi,eax
c0003c36:	eb bf                	jmp    c0003bf7 <store_xdir+0x30>
c0003c38:	89 f0                	mov    eax,esi
c0003c3a:	83 fe 02             	cmp    esi,0x2
c0003c3d:	76 05                	jbe    c0003c44 <store_xdir+0x7d>
c0003c3f:	b8 02 00 00 00       	mov    eax,0x2
c0003c44:	83 c4 0c             	add    esp,0xc
c0003c47:	5b                   	pop    ebx
c0003c48:	5e                   	pop    esi
c0003c49:	5f                   	pop    edi
c0003c4a:	5d                   	pop    ebp
c0003c4b:	c3                   	ret    

c0003c4c <dir_remove>:
c0003c4c:	57                   	push   edi
c0003c4d:	56                   	push   esi
c0003c4e:	53                   	push   ebx
c0003c4f:	89 c3                	mov    ebx,eax
c0003c51:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c54:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c56:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c59:	83 fa ff             	cmp    edx,0xffffffff
c0003c5c:	74 09                	je     c0003c67 <dir_remove+0x1b>
c0003c5e:	e8 62 f5 ff ff       	call   c00031c5 <dir_sdi>
c0003c63:	85 c0                	test   eax,eax
c0003c65:	75 41                	jne    c0003ca8 <dir_remove+0x5c>
c0003c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c6a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c6d:	89 f0                	mov    eax,esi
c0003c6f:	e8 d3 e7 ff ff       	call   c0002447 <move_window>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	75 26                	jne    c0003c9e <dir_remove+0x52>
c0003c78:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c7b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c7e:	75 05                	jne    c0003c85 <dir_remove+0x39>
c0003c80:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c83:	eb 03                	jmp    c0003c88 <dir_remove+0x3c>
c0003c85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c8c:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c8f:	73 17                	jae    c0003ca8 <dir_remove+0x5c>
c0003c91:	31 d2                	xor    edx,edx
c0003c93:	89 d8                	mov    eax,ebx
c0003c95:	e8 83 fa ff ff       	call   c000371d <dir_next>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	74 c9                	je     c0003c67 <dir_remove+0x1b>
c0003c9e:	83 f8 04             	cmp    eax,0x4
c0003ca1:	75 05                	jne    c0003ca8 <dir_remove+0x5c>
c0003ca3:	b8 02 00 00 00       	mov    eax,0x2
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	c3                   	ret    

c0003cac <create_name>:
c0003cac:	55                   	push   ebp
c0003cad:	89 d5                	mov    ebp,edx
c0003caf:	57                   	push   edi
c0003cb0:	89 c7                	mov    edi,eax
c0003cb2:	56                   	push   esi
c0003cb3:	31 f6                	xor    esi,esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 3c             	sub    esp,0x3c
c0003cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ccc:	e8 72 e0 ff ff       	call   c0001d43 <tchar2uni>
c0003cd1:	89 c3                	mov    ebx,eax
c0003cd3:	83 f8 ff             	cmp    eax,0xffffffff
c0003cd6:	75 0a                	jne    c0003ce2 <create_name+0x36>
c0003cd8:	b8 06 00 00 00       	mov    eax,0x6
c0003cdd:	e9 9e 02 00 00       	jmp    c0003f80 <create_name+0x2d4>
c0003ce2:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ce7:	76 0c                	jbe    c0003cf5 <create_name+0x49>
c0003ce9:	c1 e8 10             	shr    eax,0x10
c0003cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cf0:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cf4:	46                   	inc    esi
c0003cf5:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf9:	76 4f                	jbe    c0003d4a <create_name+0x9e>
c0003cfb:	66 83 fb 5c          	cmp    bx,0x5c
c0003cff:	74 35                	je     c0003d36 <create_name+0x8a>
c0003d01:	66 83 fb 2f          	cmp    bx,0x2f
c0003d05:	74 2f                	je     c0003d36 <create_name+0x8a>
c0003d07:	66 83 fb 7f          	cmp    bx,0x7f
c0003d0b:	77 11                	ja     c0003d1e <create_name+0x72>
c0003d0d:	0f b7 d3             	movzx  edx,bx
c0003d10:	b8 12 96 02 c0       	mov    eax,0xc0029612
c0003d15:	e8 11 e0 ff ff       	call   c0001d2b <chk_chr>
c0003d1a:	85 c0                	test   eax,eax
c0003d1c:	75 ba                	jne    c0003cd8 <create_name+0x2c>
c0003d1e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d24:	77 b2                	ja     c0003cd8 <create_name+0x2c>
c0003d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d2a:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d2e:	46                   	inc    esi
c0003d2f:	eb 97                	jmp    c0003cc8 <create_name+0x1c>
c0003d31:	40                   	inc    eax
c0003d32:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d3c:	80 fa 2f             	cmp    dl,0x2f
c0003d3f:	74 f0                	je     c0003d31 <create_name+0x85>
c0003d41:	80 fa 5c             	cmp    dl,0x5c
c0003d44:	74 eb                	je     c0003d31 <create_name+0x85>
c0003d46:	31 db                	xor    ebx,ebx
c0003d48:	eb 02                	jmp    c0003d4c <create_name+0xa0>
c0003d4a:	b3 04                	mov    bl,0x4
c0003d4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d50:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d53:	85 f6                	test   esi,esi
c0003d55:	74 18                	je     c0003d6f <create_name+0xc3>
c0003d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d60:	66 83 f8 20          	cmp    ax,0x20
c0003d64:	74 06                	je     c0003d6c <create_name+0xc0>
c0003d66:	66 83 f8 2e          	cmp    ax,0x2e
c0003d6a:	75 03                	jne    c0003d6f <create_name+0xc3>
c0003d6c:	4e                   	dec    esi
c0003d6d:	eb e4                	jmp    c0003d53 <create_name+0xa7>
c0003d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d73:	31 ed                	xor    ebp,ebp
c0003d75:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d7b:	85 f6                	test   esi,esi
c0003d7d:	0f 84 55 ff ff ff    	je     c0003cd8 <create_name+0x2c>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d8a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d8e:	66 83 f8 20          	cmp    ax,0x20
c0003d92:	75 04                	jne    c0003d98 <create_name+0xec>
c0003d94:	89 d5                	mov    ebp,edx
c0003d96:	eb eb                	jmp    c0003d83 <create_name+0xd7>
c0003d98:	85 ed                	test   ebp,ebp
c0003d9a:	75 06                	jne    c0003da2 <create_name+0xf6>
c0003d9c:	66 83 f8 2e          	cmp    ax,0x2e
c0003da0:	75 08                	jne    c0003daa <create_name+0xfe>
c0003da2:	83 cb 03             	or     ebx,0x3
c0003da5:	eb 03                	jmp    c0003daa <create_name+0xfe>
c0003da7:	4e                   	dec    esi
c0003da8:	74 0c                	je     c0003db6 <create_name+0x10a>
c0003daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dae:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003db4:	75 f1                	jne    c0003da7 <create_name+0xfb>
c0003db6:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dbb:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dbe:	ba 20 00 00 00       	mov    edx,0x20
c0003dc3:	e8 35 df ff ff       	call   c0001cfd <mem_set>
c0003dc8:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dd0:	31 c9                	xor    ecx,ecx
c0003dd2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dd7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003de2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003de6:	66 85 ed             	test   bp,bp
c0003de9:	0f 84 30 01 00 00    	je     c0003f1f <create_name+0x273>
c0003def:	66 83 fd 20          	cmp    bp,0x20
c0003df3:	74 10                	je     c0003e05 <create_name+0x159>
c0003df5:	66 83 fd 2e          	cmp    bp,0x2e
c0003df9:	75 13                	jne    c0003e0e <create_name+0x162>
c0003dfb:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dff:	0f 84 6b 01 00 00    	je     c0003f70 <create_name+0x2c4>
c0003e05:	83 cb 03             	or     ebx,0x3
c0003e08:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e0c:	eb c9                	jmp    c0003dd7 <create_name+0x12b>
c0003e0e:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e12:	73 0b                	jae    c0003e1f <create_name+0x173>
c0003e14:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e18:	75 47                	jne    c0003e61 <create_name+0x1b5>
c0003e1a:	e9 51 01 00 00       	jmp    c0003f70 <create_name+0x2c4>
c0003e1f:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e24:	75 10                	jne    c0003e36 <create_name+0x18a>
c0003e26:	83 cb 03             	or     ebx,0x3
c0003e29:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e31:	e9 e9 00 00 00       	jmp    c0003f1f <create_name+0x273>
c0003e36:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3a:	74 0d                	je     c0003e49 <create_name+0x19d>
c0003e3c:	83 cb 03             	or     ebx,0x3
c0003e3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e43:	0f 87 d6 00 00 00    	ja     c0003f1f <create_name+0x273>
c0003e49:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e52:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e5a:	b9 08 00 00 00       	mov    ecx,0x8
c0003e5f:	eb a7                	jmp    c0003e08 <create_name+0x15c>
c0003e61:	66 83 fd 7f          	cmp    bp,0x7f
c0003e65:	76 68                	jbe    c0003ecf <create_name+0x223>
c0003e67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e6b:	88 da                	mov    dl,bl
c0003e6d:	83 ca 02             	or     edx,0x2
c0003e70:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e74:	50                   	push   eax
c0003e75:	50                   	push   eax
c0003e76:	68 b5 01 00 00       	push   0x1b5
c0003e7b:	55                   	push   ebp
c0003e7c:	e8 48 46 00 00       	call   c00084c9 <ff_uni2oem>
c0003e81:	83 c4 10             	add    esp,0x10
c0003e84:	89 c5                	mov    ebp,eax
c0003e86:	a8 80                	test   al,0x80
c0003e88:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	74 0c                	je     c0003e9e <create_name+0x1f2>
c0003e92:	83 e5 7f             	and    ebp,0x7f
c0003e95:	0f b6 ad 60 95 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6aa0]
c0003e9c:	eb 2a                	jmp    c0003ec8 <create_name+0x21c>
c0003e9e:	66 3d ff 00          	cmp    ax,0xff
c0003ea2:	76 24                	jbe    c0003ec8 <create_name+0x21c>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	48                   	dec    eax
c0003ea9:	39 c8                	cmp    eax,ecx
c0003eab:	77 0c                	ja     c0003eb9 <create_name+0x20d>
c0003ead:	83 cb 03             	or     ebx,0x3
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	e9 4f ff ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003eb9:	89 e8                	mov    eax,ebp
c0003ebb:	88 d3                	mov    bl,dl
c0003ebd:	66 c1 e8 08          	shr    ax,0x8
c0003ec1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ec5:	41                   	inc    ecx
c0003ec6:	eb 4b                	jmp    c0003f13 <create_name+0x267>
c0003ec8:	88 d3                	mov    bl,dl
c0003eca:	66 85 ed             	test   bp,bp
c0003ecd:	74 19                	je     c0003ee8 <create_name+0x23c>
c0003ecf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ed3:	0f b7 d5             	movzx  edx,bp
c0003ed6:	b8 1b 96 02 c0       	mov    eax,0xc002961b
c0003edb:	e8 4b de ff ff       	call   c0001d2b <chk_chr>
c0003ee0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ee4:	85 c0                	test   eax,eax
c0003ee6:	74 0a                	je     c0003ef2 <create_name+0x246>
c0003ee8:	83 cb 03             	or     ebx,0x3
c0003eeb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ef0:	eb 21                	jmp    c0003f13 <create_name+0x267>
c0003ef2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ef5:	66 83 f8 19          	cmp    ax,0x19
c0003ef9:	77 07                	ja     c0003f02 <create_name+0x256>
c0003efb:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f00:	eb 11                	jmp    c0003f13 <create_name+0x267>
c0003f02:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f05:	66 83 f8 19          	cmp    ax,0x19
c0003f09:	77 08                	ja     c0003f13 <create_name+0x267>
c0003f0b:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f10:	83 ed 20             	sub    ebp,0x20
c0003f13:	89 e8                	mov    eax,ebp
c0003f15:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f19:	41                   	inc    ecx
c0003f1a:	e9 e9 fe ff ff       	jmp    c0003e08 <create_name+0x15c>
c0003f1f:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f23:	75 04                	jne    c0003f29 <create_name+0x27d>
c0003f25:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f29:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f2e:	75 05                	jne    c0003f35 <create_name+0x289>
c0003f30:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f39:	83 e0 0c             	and    eax,0xc
c0003f3c:	3c 0c                	cmp    al,0xc
c0003f3e:	74 0b                	je     c0003f4b <create_name+0x29f>
c0003f40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f44:	83 e0 03             	and    eax,0x3
c0003f47:	3c 03                	cmp    al,0x3
c0003f49:	75 05                	jne    c0003f50 <create_name+0x2a4>
c0003f4b:	83 cb 02             	or     ebx,0x2
c0003f4e:	eb 19                	jmp    c0003f69 <create_name+0x2bd>
c0003f50:	f6 c3 02             	test   bl,0x2
c0003f53:	75 14                	jne    c0003f69 <create_name+0x2bd>
c0003f55:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f5a:	74 03                	je     c0003f5f <create_name+0x2b3>
c0003f5c:	83 cb 10             	or     ebx,0x10
c0003f5f:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f64:	74 03                	je     c0003f69 <create_name+0x2bd>
c0003f66:	83 cb 08             	or     ebx,0x8
c0003f69:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f6c:	31 c0                	xor    eax,eax
c0003f6e:	eb 10                	jmp    c0003f80 <create_name+0x2d4>
c0003f70:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f75:	0f 85 ce fe ff ff    	jne    c0003e49 <create_name+0x19d>
c0003f7b:	e9 a6 fe ff ff       	jmp    c0003e26 <create_name+0x17a>
c0003f80:	83 c4 3c             	add    esp,0x3c
c0003f83:	5b                   	pop    ebx
c0003f84:	5e                   	pop    esi
c0003f85:	5f                   	pop    edi
c0003f86:	5d                   	pop    ebp
c0003f87:	c3                   	ret    

c0003f88 <xname_sum>:
c0003f88:	56                   	push   esi
c0003f89:	53                   	push   ebx
c0003f8a:	89 c6                	mov    esi,eax
c0003f8c:	51                   	push   ecx
c0003f8d:	31 db                	xor    ebx,ebx
c0003f8f:	83 c6 02             	add    esi,0x2
c0003f92:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f96:	66 85 c0             	test   ax,ax
c0003f99:	74 1f                	je     c0003fba <xname_sum+0x32>
c0003f9b:	83 ec 0c             	sub    esp,0xc
c0003f9e:	66 d1 cb             	ror    bx,1
c0003fa1:	50                   	push   eax
c0003fa2:	e8 1e 46 00 00       	call   c00085c5 <ff_wtoupper>
c0003fa7:	83 c4 10             	add    esp,0x10
c0003faa:	0f b6 d0             	movzx  edx,al
c0003fad:	66 c1 e8 08          	shr    ax,0x8
c0003fb1:	01 d3                	add    ebx,edx
c0003fb3:	66 d1 cb             	ror    bx,1
c0003fb6:	01 c3                	add    ebx,eax
c0003fb8:	eb d5                	jmp    c0003f8f <xname_sum+0x7>
c0003fba:	89 d8                	mov    eax,ebx
c0003fbc:	5a                   	pop    edx
c0003fbd:	5b                   	pop    ebx
c0003fbe:	5e                   	pop    esi
c0003fbf:	c3                   	ret    

c0003fc0 <create_xdir>:
c0003fc0:	55                   	push   ebp
c0003fc1:	b9 40 00 00 00       	mov    ecx,0x40
c0003fc6:	57                   	push   edi
c0003fc7:	bd 01 00 00 00       	mov    ebp,0x1
c0003fcc:	56                   	push   esi
c0003fcd:	31 ff                	xor    edi,edi
c0003fcf:	53                   	push   ebx
c0003fd0:	be 40 00 00 00       	mov    esi,0x40
c0003fd5:	89 c3                	mov    ebx,eax
c0003fd7:	83 ec 1c             	sub    esp,0x1c
c0003fda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fde:	31 d2                	xor    edx,edx
c0003fe0:	e8 18 dd ff ff       	call   c0001cfd <mem_set>
c0003fe5:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe8:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fec:	31 c9                	xor    ecx,ecx
c0003fee:	8d 46 01             	lea    eax,[esi+0x1]
c0003ff1:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ff5:	83 c6 02             	add    esi,0x2
c0003ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ffc:	66 85 ed             	test   bp,bp
c0003fff:	74 12                	je     c0004013 <create_xdir+0x53>
c0004001:	0f b6 c1             	movzx  eax,cl
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000400c:	66 83 fd 01          	cmp    bp,0x1
c0004010:	80 d9 ff             	sbb    cl,0xff
c0004013:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004016:	0f b7 d5             	movzx  edx,bp
c0004019:	83 c6 02             	add    esi,0x2
c000401c:	e8 ba dc ff ff       	call   c0001cdb <st_word>
c0004021:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004027:	75 d3                	jne    c0003ffc <create_xdir+0x3c>
c0004029:	8d 47 01             	lea    eax,[edi+0x1]
c000402c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004030:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004034:	0f b6 c1             	movzx  eax,cl
c0004037:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000403c:	74 07                	je     c0004045 <create_xdir+0x85>
c000403e:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004043:	eb a9                	jmp    c0003fee <create_xdir+0x2e>
c0004045:	8d 47 02             	lea    eax,[edi+0x2]
c0004048:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000404b:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000404e:	89 d0                	mov    eax,edx
c0004050:	e8 33 ff ff ff       	call   c0003f88 <xname_sum>
c0004055:	83 c4 1c             	add    esp,0x1c
c0004058:	0f b7 d0             	movzx  edx,ax
c000405b:	8d 43 24             	lea    eax,[ebx+0x24]
c000405e:	5b                   	pop    ebx
c000405f:	5e                   	pop    esi
c0004060:	5f                   	pop    edi
c0004061:	5d                   	pop    ebp
c0004062:	e9 74 dc ff ff       	jmp    c0001cdb <st_word>

c0004067 <cmp_lfn>:
c0004067:	55                   	push   ebp
c0004068:	57                   	push   edi
c0004069:	89 d7                	mov    edi,edx
c000406b:	56                   	push   esi
c000406c:	53                   	push   ebx
c000406d:	83 ec 1c             	sub    esp,0x1c
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004077:	e8 ed db ff ff       	call   c0001c69 <ld_word>
c000407c:	66 85 c0             	test   ax,ax
c000407f:	74 07                	je     c0004088 <cmp_lfn+0x21>
c0004081:	31 c0                	xor    eax,eax
c0004083:	e9 9a 00 00 00       	jmp    c0004122 <cmp_lfn+0xbb>
c0004088:	8a 1f                	mov    bl,BYTE PTR [edi]
c000408a:	bd 01 00 00 00       	mov    ebp,0x1
c000408f:	83 e3 3f             	and    ebx,0x3f
c0004092:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000409a:	4b                   	dec    ebx
c000409b:	6b db 0d             	imul   ebx,ebx,0xd
c000409e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040a2:	0f b6 80 e0 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6a20]
c00040a9:	01 f8                	add    eax,edi
c00040ab:	e8 b9 db ff ff       	call   c0001c69 <ld_word>
c00040b0:	66 85 ed             	test   bp,bp
c00040b3:	89 c6                	mov    esi,eax
c00040b5:	74 3c                	je     c00040f3 <cmp_lfn+0x8c>
c00040b7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040bd:	77 c2                	ja     c0004081 <cmp_lfn+0x1a>
c00040bf:	83 ec 0c             	sub    esp,0xc
c00040c2:	0f b7 c0             	movzx  eax,ax
c00040c5:	50                   	push   eax
c00040c6:	e8 fa 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040cb:	89 c5                	mov    ebp,eax
c00040cd:	8d 43 01             	lea    eax,[ebx+0x1]
c00040d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040df:	e8 e1 44 00 00       	call   c00085c5 <ff_wtoupper>
c00040e4:	83 c4 10             	add    esp,0x10
c00040e7:	39 c5                	cmp    ebp,eax
c00040e9:	75 96                	jne    c0004081 <cmp_lfn+0x1a>
c00040eb:	89 f5                	mov    ebp,esi
c00040ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040f1:	eb 04                	jmp    c00040f7 <cmp_lfn+0x90>
c00040f3:	66 46                	inc    si
c00040f5:	75 8a                	jne    c0004081 <cmp_lfn+0x1a>
c00040f7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040fb:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004100:	75 9c                	jne    c000409e <cmp_lfn+0x37>
c0004102:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004105:	74 16                	je     c000411d <cmp_lfn+0xb6>
c0004107:	66 85 ed             	test   bp,bp
c000410a:	74 11                	je     c000411d <cmp_lfn+0xb6>
c000410c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004110:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004115:	0f 94 c0             	sete   al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	eb 05                	jmp    c0004122 <cmp_lfn+0xbb>
c000411d:	b8 01 00 00 00       	mov    eax,0x1
c0004122:	83 c4 1c             	add    esp,0x1c
c0004125:	5b                   	pop    ebx
c0004126:	5e                   	pop    esi
c0004127:	5f                   	pop    edi
c0004128:	5d                   	pop    ebp
c0004129:	c3                   	ret    

c000412a <dir_find>:
c000412a:	55                   	push   ebp
c000412b:	31 d2                	xor    edx,edx
c000412d:	57                   	push   edi
c000412e:	56                   	push   esi
c000412f:	53                   	push   ebx
c0004130:	89 c3                	mov    ebx,eax
c0004132:	83 ec 1c             	sub    esp,0x1c
c0004135:	8b 30                	mov    esi,DWORD PTR [eax]
c0004137:	e8 89 f0 ff ff       	call   c00031c5 <dir_sdi>
c000413c:	89 04 24             	mov    DWORD PTR [esp],eax
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 9e 01 00 00    	jne    c00042e5 <dir_find+0x1bb>
c0004147:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000414a:	0f 85 8d 00 00 00    	jne    c00041dd <dir_find+0xb3>
c0004150:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004153:	e8 30 fe ff ff       	call   c0003f88 <xname_sum>
c0004158:	89 c7                	mov    edi,eax
c000415a:	31 d2                	xor    edx,edx
c000415c:	89 d8                	mov    eax,ebx
c000415e:	e8 72 f8 ff ff       	call   c00039d5 <dir_read>
c0004163:	85 c0                	test   eax,eax
c0004165:	0f 85 5e 01 00 00    	jne    c00042c9 <dir_find+0x19f>
c000416b:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000416e:	8d 41 24             	lea    eax,[ecx+0x24]
c0004171:	e8 f3 da ff ff       	call   c0001c69 <ld_word>
c0004176:	66 39 f8             	cmp    ax,di
c0004179:	75 df                	jne    c000415a <dir_find+0x30>
c000417b:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000417e:	31 ed                	xor    ebp,ebp
c0004180:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004184:	ba 40 00 00 00       	mov    edx,0x40
c0004189:	89 e9                	mov    ecx,ebp
c000418b:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000418f:	0f 84 42 01 00 00    	je     c00042d7 <dir_find+0x1ad>
c0004195:	f6 c2 1f             	test   dl,0x1f
c0004198:	75 03                	jne    c000419d <dir_find+0x73>
c000419a:	83 c2 02             	add    edx,0x2
c000419d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041a1:	89 d0                	mov    eax,edx
c00041a3:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041a6:	e8 be da ff ff       	call   c0001c69 <ld_word>
c00041ab:	83 ec 0c             	sub    esp,0xc
c00041ae:	0f b7 c0             	movzx  eax,ax
c00041b1:	50                   	push   eax
c00041b2:	e8 0e 44 00 00       	call   c00085c5 <ff_wtoupper>
c00041b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041bb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041be:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00041c5:	e8 fb 43 00 00       	call   c00085c5 <ff_wtoupper>
c00041ca:	83 c4 10             	add    esp,0x10
c00041cd:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041d1:	75 87                	jne    c000415a <dir_find+0x30>
c00041d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041d7:	45                   	inc    ebp
c00041d8:	83 c2 02             	add    edx,0x2
c00041db:	eb ac                	jmp    c0004189 <dir_find+0x5f>
c00041dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041e4:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e9:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ee:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041f1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041f4:	89 f0                	mov    eax,esi
c00041f6:	e8 4c e2 ff ff       	call   c0002447 <move_window>
c00041fb:	85 c0                	test   eax,eax
c00041fd:	0f 85 c6 00 00 00    	jne    c00042c9 <dir_find+0x19f>
c0004203:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004206:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004209:	84 c9                	test   cl,cl
c000420b:	0f 84 bd 00 00 00    	je     c00042ce <dir_find+0x1a4>
c0004211:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004214:	88 d0                	mov    al,dl
c0004216:	83 e0 3f             	and    eax,0x3f
c0004219:	80 f9 e5             	cmp    cl,0xe5
c000421c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000421f:	0f 84 87 00 00 00    	je     c00042ac <dir_find+0x182>
c0004225:	80 e2 08             	and    dl,0x8
c0004228:	74 06                	je     c0004230 <dir_find+0x106>
c000422a:	3c 0f                	cmp    al,0xf
c000422c:	75 7e                	jne    c00042ac <dir_find+0x182>
c000422e:	eb 04                	jmp    c0004234 <dir_find+0x10a>
c0004230:	3c 0f                	cmp    al,0xf
c0004232:	75 4c                	jne    c0004280 <dir_find+0x156>
c0004234:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004238:	75 7e                	jne    c00042b8 <dir_find+0x18e>
c000423a:	f6 c1 40             	test   cl,0x40
c000423d:	74 12                	je     c0004251 <dir_find+0x127>
c000423f:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004242:	83 e1 bf             	and    ecx,0xffffffbf
c0004245:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004249:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000424c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424f:	eb 06                	jmp    c0004257 <dir_find+0x12d>
c0004251:	89 f8                	mov    eax,edi
c0004253:	38 c8                	cmp    al,cl
c0004255:	75 5c                	jne    c00042b3 <dir_find+0x189>
c0004257:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000425b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004260:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004263:	75 53                	jne    c00042b8 <dir_find+0x18e>
c0004265:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004269:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000426c:	89 ea                	mov    edx,ebp
c000426e:	e8 f4 fd ff ff       	call   c0004067 <cmp_lfn>
c0004273:	85 c0                	test   eax,eax
c0004275:	74 41                	je     c00042b8 <dir_find+0x18e>
c0004277:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000427b:	8d 79 ff             	lea    edi,[ecx-0x1]
c000427e:	eb 38                	jmp    c00042b8 <dir_find+0x18e>
c0004280:	89 f8                	mov    eax,edi
c0004282:	84 c0                	test   al,al
c0004284:	75 0d                	jne    c0004293 <dir_find+0x169>
c0004286:	89 e8                	mov    eax,ebp
c0004288:	e8 98 de ff ff       	call   c0002125 <sum_sfn>
c000428d:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004291:	74 52                	je     c00042e5 <dir_find+0x1bb>
c0004293:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004297:	75 13                	jne    c00042ac <dir_find+0x182>
c0004299:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000429c:	b9 0b 00 00 00       	mov    ecx,0xb
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 60 da ff ff       	call   c0001d08 <mem_cmp>
c00042a8:	85 c0                	test   eax,eax
c00042aa:	74 39                	je     c00042e5 <dir_find+0x1bb>
c00042ac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042b3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b8:	31 d2                	xor    edx,edx
c00042ba:	89 d8                	mov    eax,ebx
c00042bc:	e8 5c f4 ff ff       	call   c000371d <dir_next>
c00042c1:	85 c0                	test   eax,eax
c00042c3:	0f 84 25 ff ff ff    	je     c00041ee <dir_find+0xc4>
c00042c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00042cc:	eb 17                	jmp    c00042e5 <dir_find+0x1bb>
c00042ce:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042d5:	eb 0e                	jmp    c00042e5 <dir_find+0x1bb>
c00042d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042da:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042df:	0f 85 75 fe ff ff    	jne    c000415a <dir_find+0x30>
c00042e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e8:	83 c4 1c             	add    esp,0x1c
c00042eb:	5b                   	pop    ebx
c00042ec:	5e                   	pop    esi
c00042ed:	5f                   	pop    edi
c00042ee:	5d                   	pop    ebp
c00042ef:	c3                   	ret    

c00042f0 <dir_register>:
c00042f0:	55                   	push   ebp
c00042f1:	57                   	push   edi
c00042f2:	56                   	push   esi
c00042f3:	be 06 00 00 00       	mov    esi,0x6
c00042f8:	53                   	push   ebx
c00042f9:	83 ec 6c             	sub    esp,0x6c
c00042fc:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004300:	0f 85 62 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004306:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004308:	31 ff                	xor    edi,edi
c000430a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000430d:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004312:	74 03                	je     c0004317 <dir_register+0x27>
c0004314:	47                   	inc    edi
c0004315:	eb f6                	jmp    c000430d <dir_register+0x1d>
c0004317:	89 c3                	mov    ebx,eax
c0004319:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000431d:	0f 85 e1 00 00 00    	jne    c0004404 <dir_register+0x114>
c0004323:	83 c7 0e             	add    edi,0xe
c0004326:	b9 0f 00 00 00       	mov    ecx,0xf
c000432b:	89 f8                	mov    eax,edi
c000432d:	31 d2                	xor    edx,edx
c000432f:	f7 f1                	div    ecx
c0004331:	8d 50 02             	lea    edx,[eax+0x2]
c0004334:	89 c7                	mov    edi,eax
c0004336:	89 d8                	mov    eax,ebx
c0004338:	e8 12 f8 ff ff       	call   c0003b4f <dir_alloc>
c000433d:	89 c6                	mov    esi,eax
c000433f:	85 c0                	test   eax,eax
c0004341:	0f 85 21 02 00 00    	jne    c0004568 <dir_register+0x278>
c0004347:	81 c7 01 00 00 08    	add    edi,0x8000001
c000434d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004350:	c1 e7 05             	shl    edi,0x5
c0004353:	29 f8                	sub    eax,edi
c0004355:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004358:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000435b:	a8 04                	test   al,0x4
c000435d:	0f 84 91 00 00 00    	je     c00043f4 <dir_register+0x104>
c0004363:	83 e0 fb             	and    eax,0xfffffffb
c0004366:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004369:	89 d8                	mov    eax,ebx
c000436b:	e8 25 ec ff ff       	call   c0002f95 <fill_first_frag>
c0004370:	85 c0                	test   eax,eax
c0004372:	0f 85 ee 01 00 00    	jne    c0004566 <dir_register+0x276>
c0004378:	83 c9 ff             	or     ecx,0xffffffff
c000437b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000437e:	89 d8                	mov    eax,ebx
c0004380:	e8 db eb ff ff       	call   c0002f60 <fill_last_frag>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 d9 01 00 00    	jne    c0004566 <dir_register+0x276>
c000438d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004391:	74 61                	je     c00043f4 <dir_register+0x104>
c0004393:	89 da                	mov    edx,ebx
c0004395:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004399:	e8 ea f5 ff ff       	call   c0003988 <load_obj_xdir>
c000439e:	85 c0                	test   eax,eax
c00043a0:	0f 85 c0 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043a6:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043aa:	31 c9                	xor    ecx,ecx
c00043ac:	c1 e2 09             	shl    edx,0x9
c00043af:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043b2:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043b5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043be:	83 c0 38             	add    eax,0x38
c00043c1:	e8 1c d9 ff ff       	call   c0001ce2 <st_qword>
c00043c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043cc:	83 c0 28             	add    eax,0x28
c00043cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043d2:	e8 0b d9 ff ff       	call   c0001ce2 <st_qword>
c00043d7:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043dd:	83 c8 01             	or     eax,0x1
c00043e0:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043e7:	e8 db f7 ff ff       	call   c0003bc7 <store_xdir>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 85 72 01 00 00    	jne    c0004566 <dir_register+0x276>
c00043f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043fa:	e8 c1 fb ff ff       	call   c0003fc0 <create_xdir>
c00043ff:	e9 64 01 00 00       	jmp    c0004568 <dir_register+0x278>
c0004404:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004407:	b9 0c 00 00 00       	mov    ecx,0xc
c000440c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004410:	89 c2                	mov    edx,eax
c0004412:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004416:	e8 cd d8 ff ff       	call   c0001ce8 <mem_cpy>
c000441b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004420:	74 58                	je     c000447a <dir_register+0x18a>
c0004422:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004426:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000442e:	83 ec 0c             	sub    esp,0xc
c0004431:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004438:	8d 54 24 24          	lea    edx,[esp+0x24]
c000443c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004440:	e8 24 dc ff ff       	call   c0002069 <gen_numname>
c0004445:	89 d8                	mov    eax,ebx
c0004447:	e8 de fc ff ff       	call   c000412a <dir_find>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	89 c6                	mov    esi,eax
c0004451:	85 c0                	test   eax,eax
c0004453:	75 15                	jne    c000446a <dir_register+0x17a>
c0004455:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004459:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000445e:	75 ce                	jne    c000442e <dir_register+0x13e>
c0004460:	be 07 00 00 00       	mov    esi,0x7
c0004465:	e9 fe 00 00 00       	jmp    c0004568 <dir_register+0x278>
c000446a:	83 f8 04             	cmp    eax,0x4
c000446d:	0f 85 f5 00 00 00    	jne    c0004568 <dir_register+0x278>
c0004473:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004477:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000447a:	b9 01 00 00 00       	mov    ecx,0x1
c000447f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004484:	74 0f                	je     c0004495 <dir_register+0x1a5>
c0004486:	b9 0d 00 00 00       	mov    ecx,0xd
c000448b:	8d 47 0c             	lea    eax,[edi+0xc]
c000448e:	31 d2                	xor    edx,edx
c0004490:	f7 f1                	div    ecx
c0004492:	8d 48 01             	lea    ecx,[eax+0x1]
c0004495:	89 ca                	mov    edx,ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	89 d8                	mov    eax,ebx
c000449d:	e8 ad f6 ff ff       	call   c0003b4f <dir_alloc>
c00044a2:	89 c6                	mov    esi,eax
c00044a4:	85 c0                	test   eax,eax
c00044a6:	0f 85 bc 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044b0:	49                   	dec    ecx
c00044b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b5:	74 6a                	je     c0004521 <dir_register+0x231>
c00044b7:	89 c8                	mov    eax,ecx
c00044b9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044bc:	c1 e0 05             	shl    eax,0x5
c00044bf:	29 c2                	sub    edx,eax
c00044c1:	89 d8                	mov    eax,ebx
c00044c3:	e8 fd ec ff ff       	call   c00031c5 <dir_sdi>
c00044c8:	89 c6                	mov    esi,eax
c00044ca:	85 c0                	test   eax,eax
c00044cc:	0f 85 96 00 00 00    	jne    c0004568 <dir_register+0x278>
c00044d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044d6:	e8 4a dc ff ff       	call   c0002125 <sum_sfn>
c00044db:	0f b6 f8             	movzx  edi,al
c00044de:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e4:	89 e8                	mov    eax,ebp
c00044e6:	e8 5c df ff ff       	call   c0002447 <move_window>
c00044eb:	89 c6                	mov    esi,eax
c00044ed:	85 c0                	test   eax,eax
c00044ef:	75 77                	jne    c0004568 <dir_register+0x278>
c00044f1:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f9:	83 ec 0c             	sub    esp,0xc
c00044fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044ff:	57                   	push   edi
c0004500:	e8 e0 da ff ff       	call   c0001fe5 <put_lfn>
c0004505:	31 d2                	xor    edx,edx
c0004507:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000450b:	89 d8                	mov    eax,ebx
c000450d:	e8 0b f2 ff ff       	call   c000371d <dir_next>
c0004512:	83 c4 10             	add    esp,0x10
c0004515:	89 c6                	mov    esi,eax
c0004517:	85 c0                	test   eax,eax
c0004519:	75 4d                	jne    c0004568 <dir_register+0x278>
c000451b:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000451f:	75 bd                	jne    c00044de <dir_register+0x1ee>
c0004521:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004524:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004527:	89 e8                	mov    eax,ebp
c0004529:	e8 19 df ff ff       	call   c0002447 <move_window>
c000452e:	89 c6                	mov    esi,eax
c0004530:	85 c0                	test   eax,eax
c0004532:	75 34                	jne    c0004568 <dir_register+0x278>
c0004534:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004537:	b9 20 00 00 00       	mov    ecx,0x20
c000453c:	31 d2                	xor    edx,edx
c000453e:	e8 ba d7 ff ff       	call   c0001cfd <mem_set>
c0004543:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454a:	b9 0b 00 00 00       	mov    ecx,0xb
c000454f:	e8 94 d7 ff ff       	call   c0001ce8 <mem_cpy>
c0004554:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004557:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000455a:	83 e0 18             	and    eax,0x18
c000455d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004560:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004564:	eb 02                	jmp    c0004568 <dir_register+0x278>
c0004566:	89 c6                	mov    esi,eax
c0004568:	83 c4 6c             	add    esp,0x6c
c000456b:	89 f0                	mov    eax,esi
c000456d:	5b                   	pop    ebx
c000456e:	5e                   	pop    esi
c000456f:	5f                   	pop    edi
c0004570:	5d                   	pop    ebp
c0004571:	c3                   	ret    

c0004572 <sync_fs>:
c0004572:	56                   	push   esi
c0004573:	53                   	push   ebx
c0004574:	53                   	push   ebx
c0004575:	89 c3                	mov    ebx,eax
c0004577:	e8 37 de ff ff       	call   c00023b3 <sync_window>
c000457c:	85 c0                	test   eax,eax
c000457e:	0f 85 b1 00 00 00    	jne    c0004635 <sync_fs+0xc3>
c0004584:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004587:	0f 85 8e 00 00 00    	jne    c000461b <sync_fs+0xa9>
c000458d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004591:	0f 85 84 00 00 00    	jne    c000461b <sync_fs+0xa9>
c0004597:	b9 00 02 00 00       	mov    ecx,0x200
c000459c:	8d 73 54             	lea    esi,[ebx+0x54]
c000459f:	31 d2                	xor    edx,edx
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	e8 55 d7 ff ff       	call   c0001cfd <mem_set>
c00045a8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ae:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045b3:	e8 23 d7 ff ff       	call   c0001cdb <st_word>
c00045b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 1b d7 ff ff       	call   c0001cdf <st_dword>
c00045c4:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00045cf:	e8 0b d7 ff ff       	call   c0001cdf <st_dword>
c00045d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045d7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045dd:	e8 fd d6 ff ff       	call   c0001cdf <st_dword>
c00045e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045e5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045eb:	e8 ef d6 ff ff       	call   c0001cdf <st_dword>
c00045f0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045f3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045f6:	83 c0 01             	add    eax,0x1
c00045f9:	83 d2 00             	adc    edx,0x0
c00045fc:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045ff:	83 ec 0c             	sub    esp,0xc
c0004602:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004605:	6a 01                	push   0x1
c0004607:	52                   	push   edx
c0004608:	50                   	push   eax
c0004609:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000460d:	56                   	push   esi
c000460e:	50                   	push   eax
c000460f:	e8 20 d6 ff ff       	call   c0001c34 <disk_write>
c0004614:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004618:	83 c4 20             	add    esp,0x20
c000461b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000461f:	51                   	push   ecx
c0004620:	6a 00                	push   0x0
c0004622:	6a 00                	push   0x0
c0004624:	50                   	push   eax
c0004625:	e8 20 d6 ff ff       	call   c0001c4a <disk_ioctl>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	85 c0                	test   eax,eax
c000462f:	0f 95 c0             	setne  al
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	5a                   	pop    edx
c0004636:	5b                   	pop    ebx
c0004637:	5e                   	pop    esi
c0004638:	c3                   	ret    

c0004639 <create_partition>:
c0004639:	55                   	push   ebp
c000463a:	0f b6 c0             	movzx  eax,al
c000463d:	57                   	push   edi
c000463e:	56                   	push   esi
c000463f:	53                   	push   ebx
c0004640:	83 ec 60             	sub    esp,0x60
c0004643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004647:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000464b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000464f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004653:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004657:	50                   	push   eax
c0004658:	6a 01                	push   0x1
c000465a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000465e:	e8 e7 d5 ff ff       	call   c0001c4a <disk_ioctl>
c0004663:	83 c4 10             	add    esp,0x10
c0004666:	85 c0                	test   eax,eax
c0004668:	74 0a                	je     c0004674 <create_partition+0x3b>
c000466a:	b8 01 00 00 00       	mov    eax,0x1
c000466f:	e9 67 05 00 00       	jmp    c0004bdb <create_partition+0x5a2>
c0004674:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004678:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000467c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004680:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004684:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004689:	0f 86 ed 03 00 00    	jbe    c0004a7c <create_partition+0x443>
c000468f:	83 c0 df             	add    eax,0xffffffdf
c0004692:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000469a:	83 d2 ff             	adc    edx,0xffffffff
c000469d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ad:	83 c0 bd             	add    eax,0xffffffbd
c00046b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046b7:	83 d2 ff             	adc    edx,0xffffffff
c00046ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046ca:	be 22 00 00 00       	mov    esi,0x22
c00046cf:	31 ff                	xor    edi,edi
c00046d1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ed:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046f3:	75 0e                	jne    c0004703 <create_partition+0xca>
c00046f5:	b9 00 02 00 00       	mov    ecx,0x200
c00046fa:	31 d2                	xor    edx,edx
c00046fc:	89 d8                	mov    eax,ebx
c00046fe:	e8 fa d5 ff ff       	call   c0001cfd <mem_set>
c0004703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000470b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000470f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004712:	0f 84 23 01 00 00    	je     c000483b <create_partition+0x202>
c0004718:	89 f0                	mov    eax,esi
c000471a:	89 fa                	mov    edx,edi
c000471c:	05 ff 07 00 00       	add    eax,0x7ff
c0004721:	83 d2 00             	adc    edx,0x0
c0004724:	89 c1                	mov    ecx,eax
c0004726:	89 d7                	mov    edi,edx
c0004728:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000472e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004732:	89 ce                	mov    esi,ecx
c0004734:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004738:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000473c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004740:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004747:	89 04 24             	mov    DWORD PTR [esp],eax
c000474a:	b8 64 00 00 00       	mov    eax,0x64
c000474f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004752:	b8 00 00 00 00       	mov    eax,0x0
c0004757:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000475b:	72 41                	jb     c000479e <create_partition+0x165>
c000475d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004765:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000476e:	01 c1                	add    ecx,eax
c0004770:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004774:	f7 24 24             	mul    DWORD PTR [esp]
c0004777:	6a 00                	push   0x0
c0004779:	01 ca                	add    edx,ecx
c000477b:	6a 64                	push   0x64
c000477d:	52                   	push   edx
c000477e:	50                   	push   eax
c000477f:	e8 b0 23 02 00       	call   c0026b34 <__udivdi3>
c0004784:	83 c4 10             	add    esp,0x10
c0004787:	05 ff 07 00 00       	add    eax,0x7ff
c000478c:	83 d2 00             	adc    edx,0x0
c000478f:	89 c1                	mov    ecx,eax
c0004791:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004795:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000479b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000479e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047a5:	01 f0                	add    eax,esi
c00047a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ab:	11 fa                	adc    edx,edi
c00047ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047b1:	19 d1                	sbb    ecx,edx
c00047b3:	73 2e                	jae    c00047e3 <create_partition+0x1aa>
c00047b5:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b9:	89 f8                	mov    eax,edi
c00047bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047c2:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ce:	73 6b                	jae    c000483b <create_partition+0x202>
c00047d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d8:	29 f0                	sub    eax,esi
c00047da:	19 fa                	sbb    edx,edi
c00047dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00047df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047ea:	74 4f                	je     c000483b <create_partition+0x202>
c00047ec:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ef:	b9 10 00 00 00       	mov    ecx,0x10
c00047f4:	ba f0 95 02 c0       	mov    edx,0xc00295f0
c00047f9:	e8 ea d4 ff ff       	call   c0001ce8 <mem_cpy>
c00047fe:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000480b:	e8 2c db ff ff       	call   c000233c <make_rand>
c0004810:	89 f2                	mov    edx,esi
c0004812:	89 f9                	mov    ecx,edi
c0004814:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004818:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000481c:	e8 c1 d4 ff ff       	call   c0001ce2 <st_qword>
c0004821:	03 34 24             	add    esi,DWORD PTR [esp]
c0004824:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004828:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	83 c2 ff             	add    edx,0xffffffff
c0004833:	83 d1 ff             	adc    ecx,0xffffffff
c0004836:	e8 a7 d4 ff ff       	call   c0001ce2 <st_qword>
c000483b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000483f:	83 e8 80             	sub    eax,0xffffff80
c0004842:	89 c5                	mov    ebp,eax
c0004844:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004848:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000484e:	75 6b                	jne    c00048bb <create_partition+0x282>
c0004850:	45                   	inc    ebp
c0004851:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004855:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000485a:	e8 39 da ff ff       	call   c0002298 <crc32>
c000485f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004865:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004869:	75 e5                	jne    c0004850 <create_partition+0x217>
c000486b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000486f:	31 d2                	xor    edx,edx
c0004871:	83 ec 0c             	sub    esp,0xc
c0004874:	c1 ed 09             	shr    ebp,0x9
c0004877:	6a 01                	push   0x1
c0004879:	8d 45 02             	lea    eax,[ebp+0x2]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 ac d3 ff ff       	call   c0001c34 <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 d7 fd ff ff    	jne    c000466a <create_partition+0x31>
c0004893:	83 ec 0c             	sub    esp,0xc
c0004896:	31 d2                	xor    edx,edx
c0004898:	6a 01                	push   0x1
c000489a:	89 e8                	mov    eax,ebp
c000489c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048a0:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048a4:	52                   	push   edx
c00048a5:	50                   	push   eax
c00048a6:	53                   	push   ebx
c00048a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ab:	e8 84 d3 ff ff       	call   c0001c34 <disk_write>
c00048b0:	83 c4 20             	add    esp,0x20
c00048b3:	85 c0                	test   eax,eax
c00048b5:	0f 85 af fd ff ff    	jne    c000466a <create_partition+0x31>
c00048bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048c3:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c8:	74 0d                	je     c00048d7 <create_partition+0x29e>
c00048ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048d2:	e9 12 fe ff ff       	jmp    c00046e9 <create_partition+0xb0>
c00048d7:	31 d2                	xor    edx,edx
c00048d9:	b9 00 02 00 00       	mov    ecx,0x200
c00048de:	89 d8                	mov    eax,ebx
c00048e0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048e3:	e8 15 d4 ff ff       	call   c0001cfd <mem_set>
c00048e8:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048eb:	b9 10 00 00 00       	mov    ecx,0x10
c00048f0:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c00048f5:	89 d8                	mov    eax,ebx
c00048f7:	e8 ec d3 ff ff       	call   c0001ce8 <mem_cpy>
c00048fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004900:	8d 43 58             	lea    eax,[ebx+0x58]
c0004903:	f7 d2                	not    edx
c0004905:	e8 d5 d3 ff ff       	call   c0001cdf <st_dword>
c000490a:	8d 43 18             	lea    eax,[ebx+0x18]
c000490d:	31 c9                	xor    ecx,ecx
c000490f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004912:	ba 01 00 00 00       	mov    edx,0x1
c0004917:	e8 c6 d3 ff ff       	call   c0001ce2 <st_qword>
c000491c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004920:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004924:	83 c2 ff             	add    edx,0xffffffff
c0004927:	89 e8                	mov    eax,ebp
c0004929:	83 d1 ff             	adc    ecx,0xffffffff
c000492c:	e8 b1 d3 ff ff       	call   c0001ce2 <st_qword>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	8d 43 28             	lea    eax,[ebx+0x28]
c0004936:	ba 22 00 00 00       	mov    edx,0x22
c000493b:	e8 a2 d3 ff ff       	call   c0001ce2 <st_qword>
c0004940:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004944:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004948:	83 c2 de             	add    edx,0xffffffde
c000494b:	8d 43 30             	lea    eax,[ebx+0x30]
c000494e:	83 d1 ff             	adc    ecx,0xffffffff
c0004951:	31 f6                	xor    esi,esi
c0004953:	e8 8a d3 ff ff       	call   c0001ce2 <st_qword>
c0004958:	8d 43 54             	lea    eax,[ebx+0x54]
c000495b:	ba 80 00 00 00       	mov    edx,0x80
c0004960:	e8 7a d3 ff ff       	call   c0001cdf <st_dword>
c0004965:	8d 43 50             	lea    eax,[ebx+0x50]
c0004968:	ba 80 00 00 00       	mov    edx,0x80
c000496d:	e8 6d d3 ff ff       	call   c0001cdf <st_dword>
c0004972:	ba 02 00 00 00       	mov    edx,0x2
c0004977:	89 f8                	mov    eax,edi
c0004979:	e8 61 d3 ff ff       	call   c0001cdf <st_dword>
c000497e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004981:	b9 10 00 00 00       	mov    ecx,0x10
c0004986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000498a:	e8 ad d9 ff ff       	call   c000233c <make_rand>
c000498f:	83 c8 ff             	or     eax,0xffffffff
c0004992:	46                   	inc    esi
c0004993:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004998:	e8 fb d8 ff ff       	call   c0002298 <crc32>
c000499d:	83 fe 5c             	cmp    esi,0x5c
c00049a0:	75 f0                	jne    c0004992 <create_partition+0x359>
c00049a2:	f7 d0                	not    eax
c00049a4:	8d 73 10             	lea    esi,[ebx+0x10]
c00049a7:	89 c2                	mov    edx,eax
c00049a9:	89 f0                	mov    eax,esi
c00049ab:	e8 2f d3 ff ff       	call   c0001cdf <st_dword>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 01                	push   0x1
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 71 d2 ff ff       	call   c0001c34 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 9c fc ff ff    	jne    c000466a <create_partition+0x31>
c00049ce:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049d2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049d6:	83 c2 ff             	add    edx,0xffffffff
c00049d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049dc:	83 d1 ff             	adc    ecx,0xffffffff
c00049df:	e8 fe d2 ff ff       	call   c0001ce2 <st_qword>
c00049e4:	ba 01 00 00 00       	mov    edx,0x1
c00049e9:	31 c9                	xor    ecx,ecx
c00049eb:	89 e8                	mov    eax,ebp
c00049ed:	e8 f0 d2 ff ff       	call   c0001ce2 <st_qword>
c00049f2:	89 f8                	mov    eax,edi
c00049f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049fc:	31 ff                	xor    edi,edi
c00049fe:	e8 df d2 ff ff       	call   c0001ce2 <st_qword>
c0004a03:	89 f0                	mov    eax,esi
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	e8 d3 d2 ff ff       	call   c0001cdf <st_dword>
c0004a0c:	83 c8 ff             	or     eax,0xffffffff
c0004a0f:	47                   	inc    edi
c0004a10:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a15:	e8 7e d8 ff ff       	call   c0002298 <crc32>
c0004a1a:	83 ff 5c             	cmp    edi,0x5c
c0004a1d:	75 f0                	jne    c0004a0f <create_partition+0x3d6>
c0004a1f:	f7 d0                	not    eax
c0004a21:	89 c2                	mov    edx,eax
c0004a23:	89 f0                	mov    eax,esi
c0004a25:	e8 b5 d2 ff ff       	call   c0001cdf <st_dword>
c0004a2a:	83 ec 0c             	sub    esp,0xc
c0004a2d:	6a 01                	push   0x1
c0004a2f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a33:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a37:	83 c0 ff             	add    eax,0xffffffff
c0004a3a:	83 d2 ff             	adc    edx,0xffffffff
c0004a3d:	52                   	push   edx
c0004a3e:	50                   	push   eax
c0004a3f:	53                   	push   ebx
c0004a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a44:	e8 eb d1 ff ff       	call   c0001c34 <disk_write>
c0004a49:	83 c4 20             	add    esp,0x20
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	0f 85 16 fc ff ff    	jne    c000466a <create_partition+0x31>
c0004a54:	31 d2                	xor    edx,edx
c0004a56:	89 d8                	mov    eax,ebx
c0004a58:	b9 00 02 00 00       	mov    ecx,0x200
c0004a5d:	e8 9b d2 ff ff       	call   c0001cfd <mem_set>
c0004a62:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a68:	b9 10 00 00 00       	mov    ecx,0x10
c0004a6d:	ba f0 94 02 c0       	mov    edx,0xc00294f0
c0004a72:	e8 71 d2 ff ff       	call   c0001ce8 <mem_cpy>
c0004a77:	e9 21 01 00 00       	jmp    c0004b9d <create_partition+0x564>
c0004a7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a80:	b9 05 00 00 00       	mov    ecx,0x5
c0004a85:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a88:	bf 08 00 00 00       	mov    edi,0x8
c0004a8d:	89 f8                	mov    eax,edi
c0004a8f:	31 d2                	xor    edx,edx
c0004a91:	0f b6 f0             	movzx  esi,al
c0004a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a97:	f7 f6                	div    esi
c0004a99:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a9e:	76 0a                	jbe    c0004aaa <create_partition+0x471>
c0004aa0:	d1 e7                	shl    edi,1
c0004aa2:	49                   	dec    ecx
c0004aa3:	75 e8                	jne    c0004a8d <create_partition+0x454>
c0004aa5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aaa:	b9 00 02 00 00       	mov    ecx,0x200
c0004aaf:	31 d2                	xor    edx,edx
c0004ab1:	89 d8                	mov    eax,ebx
c0004ab3:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab9:	e8 3f d2 ff ff       	call   c0001cfd <mem_set>
c0004abe:	b9 64 00 00 00       	mov    ecx,0x64
c0004ac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ac6:	31 d2                	xor    edx,edx
c0004ac8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ad0:	f7 f1                	div    ecx
c0004ad2:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004adb:	89 f8                	mov    eax,edi
c0004add:	0f b6 c0             	movzx  eax,al
c0004ae0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004ae4:	e9 80 00 00 00       	jmp    c0004b69 <create_partition+0x530>
c0004ae9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aec:	29 cf                	sub    edi,ecx
c0004aee:	89 ca                	mov    edx,ecx
c0004af0:	89 f0                	mov    eax,esi
c0004af2:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004af7:	e8 e3 d1 ff ff       	call   c0001cdf <st_dword>
c0004afc:	8d 46 04             	lea    eax,[esi+0x4]
c0004aff:	89 fa                	mov    edx,edi
c0004b01:	83 c6 10             	add    esi,0x10
c0004b04:	e8 d6 d1 ff ff       	call   c0001cdf <st_dword>
c0004b09:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b0d:	31 d2                	xor    edx,edx
c0004b0f:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b12:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b16:	89 c8                	mov    eax,ecx
c0004b18:	01 f9                	add    ecx,edi
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d5                	mov    ebp,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	45                   	inc    ebp
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b28:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b2b:	89 c2                	mov    edx,eax
c0004b2d:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b30:	c1 ea 02             	shr    edx,0x2
c0004b33:	83 e2 c0             	and    edx,0xffffffc0
c0004b36:	09 ea                	or     edx,ebp
c0004b38:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b3d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	f7 f5                	div    ebp
c0004b44:	89 d7                	mov    edi,edx
c0004b46:	31 d2                	xor    edx,edx
c0004b48:	47                   	inc    edi
c0004b49:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b4d:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b50:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b53:	89 c5                	mov    ebp,eax
c0004b55:	c1 ed 02             	shr    ebp,0x2
c0004b58:	83 e5 c0             	and    ebp,0xffffffc0
c0004b5b:	09 ef                	or     edi,ebp
c0004b5d:	89 fa                	mov    edx,edi
c0004b5f:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b62:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b67:	74 34                	je     c0004b9d <create_partition+0x564>
c0004b69:	85 c9                	test   ecx,ecx
c0004b6b:	74 30                	je     c0004b9d <create_partition+0x564>
c0004b6d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b70:	76 2b                	jbe    c0004b9d <create_partition+0x564>
c0004b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b76:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b7a:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b7d:	83 ff 64             	cmp    edi,0x64
c0004b80:	76 4b                	jbe    c0004bcd <create_partition+0x594>
c0004b82:	89 f8                	mov    eax,edi
c0004b84:	01 c8                	add    eax,ecx
c0004b86:	0f 82 5d ff ff ff    	jb     c0004ae9 <create_partition+0x4b0>
c0004b8c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b8f:	0f 87 54 ff ff ff    	ja     c0004ae9 <create_partition+0x4b0>
c0004b95:	85 ff                	test   edi,edi
c0004b97:	0f 85 51 ff ff ff    	jne    c0004aee <create_partition+0x4b5>
c0004b9d:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004ba3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba8:	e8 2e d1 ff ff       	call   c0001cdb <st_word>
c0004bad:	83 ec 0c             	sub    esp,0xc
c0004bb0:	6a 01                	push   0x1
c0004bb2:	6a 00                	push   0x0
c0004bb4:	6a 00                	push   0x0
c0004bb6:	53                   	push   ebx
c0004bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bbb:	e8 74 d0 ff ff       	call   c0001c34 <disk_write>
c0004bc0:	83 c4 20             	add    esp,0x20
c0004bc3:	85 c0                	test   eax,eax
c0004bc5:	0f 95 c0             	setne  al
c0004bc8:	0f b6 c0             	movzx  eax,al
c0004bcb:	eb 0e                	jmp    c0004bdb <create_partition+0x5a2>
c0004bcd:	74 07                	je     c0004bd6 <create_partition+0x59d>
c0004bcf:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bd4:	eb ac                	jmp    c0004b82 <create_partition+0x549>
c0004bd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd9:	eb a7                	jmp    c0004b82 <create_partition+0x549>
c0004bdb:	83 c4 5c             	add    esp,0x5c
c0004bde:	5b                   	pop    ebx
c0004bdf:	5e                   	pop    esi
c0004be0:	5f                   	pop    edi
c0004be1:	5d                   	pop    ebp
c0004be2:	c3                   	ret    

c0004be3 <get_fileinfo>:
c0004be3:	55                   	push   ebp
c0004be4:	57                   	push   edi
c0004be5:	56                   	push   esi
c0004be6:	53                   	push   ebx
c0004be7:	83 ec 1c             	sub    esp,0x1c
c0004bea:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bec:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bf0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bf4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bf7:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bfa:	0f 84 dc 01 00 00    	je     c0004ddc <get_fileinfo+0x1f9>
c0004c00:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c03:	75 0f                	jne    c0004c14 <get_fileinfo+0x31>
c0004c05:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c08:	83 c4 1c             	add    esp,0x1c
c0004c0b:	5b                   	pop    ebx
c0004c0c:	5e                   	pop    esi
c0004c0d:	5f                   	pop    edi
c0004c0e:	5d                   	pop    ebp
c0004c0f:	e9 58 d5 ff ff       	jmp    c000216c <get_xfileinfo>
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	89 c6                	mov    esi,eax
c0004c18:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c1c:	74 6a                	je     c0004c88 <get_fileinfo+0xa5>
c0004c1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c26:	31 ed                	xor    ebp,ebp
c0004c28:	31 ff                	xor    edi,edi
c0004c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c35:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c39:	66 85 d2             	test   dx,dx
c0004c3c:	74 3e                	je     c0004c7c <get_fileinfo+0x99>
c0004c3e:	66 85 ed             	test   bp,bp
c0004c41:	75 0c                	jne    c0004c4f <get_fileinfo+0x6c>
c0004c43:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c49:	66 3d ff 07          	cmp    ax,0x7ff
c0004c4d:	76 22                	jbe    c0004c71 <get_fileinfo+0x8e>
c0004c4f:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c54:	89 e8                	mov    eax,ebp
c0004c56:	29 f9                	sub    ecx,edi
c0004c58:	c1 e0 10             	shl    eax,0x10
c0004c5b:	09 d0                	or     eax,edx
c0004c5d:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c61:	e8 a3 d1 ff ff       	call   c0001e09 <put_utf>
c0004c66:	84 c0                	test   al,al
c0004c68:	74 10                	je     c0004c7a <get_fileinfo+0x97>
c0004c6a:	0f b6 c0             	movzx  eax,al
c0004c6d:	31 d2                	xor    edx,edx
c0004c6f:	01 c7                	add    edi,eax
c0004c71:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c76:	89 d5                	mov    ebp,edx
c0004c78:	eb b0                	jmp    c0004c2a <get_fileinfo+0x47>
c0004c7a:	31 ff                	xor    edi,edi
c0004c7c:	66 85 ed             	test   bp,bp
c0004c7f:	74 02                	je     c0004c83 <get_fileinfo+0xa0>
c0004c81:	31 ff                	xor    edi,edi
c0004c83:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c88:	31 ff                	xor    edi,edi
c0004c8a:	31 c9                	xor    ecx,ecx
c0004c8c:	83 f9 0a             	cmp    ecx,0xa
c0004c8f:	0f 87 ad 00 00 00    	ja     c0004d42 <get_fileinfo+0x15f>
c0004c95:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c98:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c9b:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c9f:	66 83 fa 20          	cmp    dx,0x20
c0004ca3:	0f 84 92 00 00 00    	je     c0004d3b <get_fileinfo+0x158>
c0004ca9:	66 83 fa 05          	cmp    dx,0x5
c0004cad:	75 05                	jne    c0004cb4 <get_fileinfo+0xd1>
c0004caf:	ba e5 00 00 00       	mov    edx,0xe5
c0004cb4:	83 ff 0b             	cmp    edi,0xb
c0004cb7:	77 0b                	ja     c0004cc4 <get_fileinfo+0xe1>
c0004cb9:	83 fd 09             	cmp    ebp,0x9
c0004cbc:	75 06                	jne    c0004cc4 <get_fileinfo+0xe1>
c0004cbe:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cc3:	47                   	inc    edi
c0004cc4:	0f b7 c2             	movzx  eax,dx
c0004cc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ccb:	e8 6d d0 ff ff       	call   c0001d3d <dbc_1st>
c0004cd0:	85 c0                	test   eax,eax
c0004cd2:	74 2f                	je     c0004d03 <get_fileinfo+0x120>
c0004cd4:	83 fd 08             	cmp    ebp,0x8
c0004cd7:	74 2a                	je     c0004d03 <get_fileinfo+0x120>
c0004cd9:	83 fd 0b             	cmp    ebp,0xb
c0004cdc:	74 25                	je     c0004d03 <get_fileinfo+0x120>
c0004cde:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ce1:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ce5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce9:	e8 52 d0 ff ff       	call   c0001d40 <dbc_2nd>
c0004cee:	85 c0                	test   eax,eax
c0004cf0:	74 11                	je     c0004d03 <get_fileinfo+0x120>
c0004cf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cf6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cfb:	c1 e2 08             	shl    edx,0x8
c0004cfe:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d01:	09 c2                	or     edx,eax
c0004d03:	0f b7 d2             	movzx  edx,dx
c0004d06:	50                   	push   eax
c0004d07:	50                   	push   eax
c0004d08:	68 b5 01 00 00       	push   0x1b5
c0004d0d:	52                   	push   edx
c0004d0e:	e8 46 38 00 00       	call   c0008559 <ff_oem2uni>
c0004d13:	83 c4 10             	add    esp,0x10
c0004d16:	66 85 c0             	test   ax,ax
c0004d19:	75 04                	jne    c0004d1f <get_fileinfo+0x13c>
c0004d1b:	31 ff                	xor    edi,edi
c0004d1d:	eb 23                	jmp    c0004d42 <get_fileinfo+0x15f>
c0004d1f:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d24:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d28:	29 f9                	sub    ecx,edi
c0004d2a:	0f b7 c0             	movzx  eax,ax
c0004d2d:	e8 d7 d0 ff ff       	call   c0001e09 <put_utf>
c0004d32:	84 c0                	test   al,al
c0004d34:	74 e5                	je     c0004d1b <get_fileinfo+0x138>
c0004d36:	0f b6 c0             	movzx  eax,al
c0004d39:	01 c7                	add    edi,eax
c0004d3b:	89 e9                	mov    ecx,ebp
c0004d3d:	e9 4a ff ff ff       	jmp    c0004c8c <get_fileinfo+0xa9>
c0004d42:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d47:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d4b:	75 54                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d4d:	85 ff                	test   edi,edi
c0004d4f:	75 0b                	jne    c0004d5c <get_fileinfo+0x179>
c0004d51:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d55:	ba 01 00 00 00       	mov    edx,0x1
c0004d5a:	eb 33                	jmp    c0004d8f <get_fileinfo+0x1ac>
c0004d5c:	b1 08                	mov    cl,0x8
c0004d5e:	31 d2                	xor    edx,edx
c0004d60:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d66:	84 c0                	test   al,al
c0004d68:	74 25                	je     c0004d8f <get_fileinfo+0x1ac>
c0004d6a:	66 83 f8 2e          	cmp    ax,0x2e
c0004d6e:	74 16                	je     c0004d86 <get_fileinfo+0x1a3>
c0004d70:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d73:	66 83 ff 19          	cmp    di,0x19
c0004d77:	77 0f                	ja     c0004d88 <get_fileinfo+0x1a5>
c0004d79:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d7c:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d7f:	74 07                	je     c0004d88 <get_fileinfo+0x1a5>
c0004d81:	83 c0 20             	add    eax,0x20
c0004d84:	eb 02                	jmp    c0004d88 <get_fileinfo+0x1a5>
c0004d86:	b1 10                	mov    cl,0x10
c0004d88:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d8c:	42                   	inc    edx
c0004d8d:	eb d1                	jmp    c0004d60 <get_fileinfo+0x17d>
c0004d8f:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d97:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d9b:	75 04                	jne    c0004da1 <get_fileinfo+0x1be>
c0004d9d:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004da1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da4:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004da7:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004daa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dad:	83 c0 1c             	add    eax,0x1c
c0004db0:	e8 c1 ce ff ff       	call   c0001c76 <ld_dword>
c0004db5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dbc:	89 03                	mov    DWORD PTR [ebx],eax
c0004dbe:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc1:	83 c0 16             	add    eax,0x16
c0004dc4:	e8 a0 ce ff ff       	call   c0001c69 <ld_word>
c0004dc9:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dcd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd0:	83 c0 18             	add    eax,0x18
c0004dd3:	e8 91 ce ff ff       	call   c0001c69 <ld_word>
c0004dd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ddc:	83 c4 1c             	add    esp,0x1c
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	5d                   	pop    ebp
c0004de3:	c3                   	ret    

c0004de4 <ld_clust.isra.0>:
c0004de4:	56                   	push   esi
c0004de5:	89 c6                	mov    esi,eax
c0004de7:	53                   	push   ebx
c0004de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004deb:	89 d3                	mov    ebx,edx
c0004ded:	e8 77 ce ff ff       	call   c0001c69 <ld_word>
c0004df2:	0f b7 c8             	movzx  ecx,ax
c0004df5:	89 f0                	mov    eax,esi
c0004df7:	3c 03                	cmp    al,0x3
c0004df9:	75 0d                	jne    c0004e08 <ld_clust.isra.0+0x24>
c0004dfb:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dfe:	e8 66 ce ff ff       	call   c0001c69 <ld_word>
c0004e03:	c1 e0 10             	shl    eax,0x10
c0004e06:	09 c1                	or     ecx,eax
c0004e08:	89 c8                	mov    eax,ecx
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <st_clust.isra.1>:
c0004e0d:	56                   	push   esi
c0004e0e:	89 c6                	mov    esi,eax
c0004e10:	53                   	push   ebx
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	0f b7 d1             	movzx  edx,cx
c0004e16:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e19:	e8 bd ce ff ff       	call   c0001cdb <st_word>
c0004e1e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e21:	75 0f                	jne    c0004e32 <st_clust.isra.1+0x25>
c0004e23:	c1 e9 10             	shr    ecx,0x10
c0004e26:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e29:	89 ca                	mov    edx,ecx
c0004e2b:	5b                   	pop    ebx
c0004e2c:	5e                   	pop    esi
c0004e2d:	e9 a9 ce ff ff       	jmp    c0001cdb <st_word>
c0004e32:	5b                   	pop    ebx
c0004e33:	5e                   	pop    esi
c0004e34:	c3                   	ret    

c0004e35 <init_alloc_info.isra.2>:
c0004e35:	56                   	push   esi
c0004e36:	53                   	push   ebx
c0004e37:	89 c6                	mov    esi,eax
c0004e39:	89 d3                	mov    ebx,edx
c0004e3b:	51                   	push   ecx
c0004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e3e:	83 c0 34             	add    eax,0x34
c0004e41:	e8 30 ce ff ff       	call   c0001c76 <ld_dword>
c0004e46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e49:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e4b:	83 c0 38             	add    eax,0x38
c0004e4e:	e8 3b ce ff ff       	call   c0001c8e <ld_qword>
c0004e53:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e56:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e59:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e5b:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e65:	83 e0 02             	and    eax,0x2
c0004e68:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5b                   	pop    ebx
c0004e6d:	5e                   	pop    esi
c0004e6e:	c3                   	ret    

c0004e6f <follow_path>:
c0004e6f:	56                   	push   esi
c0004e70:	53                   	push   ebx
c0004e71:	89 c3                	mov    ebx,eax
c0004e73:	83 ec 14             	sub    esp,0x14
c0004e76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e80:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e82:	80 fa 5c             	cmp    dl,0x5c
c0004e85:	75 07                	jne    c0004e8e <follow_path+0x1f>
c0004e87:	40                   	inc    eax
c0004e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e8c:	eb ee                	jmp    c0004e7c <follow_path+0xd>
c0004e8e:	80 fa 2f             	cmp    dl,0x2f
c0004e91:	74 f4                	je     c0004e87 <follow_path+0x18>
c0004e93:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e9a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ea4:	77 52                	ja     c0004ef8 <follow_path+0x89>
c0004ea6:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eaa:	31 d2                	xor    edx,edx
c0004eac:	89 d8                	mov    eax,ebx
c0004eae:	e8 12 e3 ff ff       	call   c00031c5 <dir_sdi>
c0004eb3:	eb 7c                	jmp    c0004f31 <follow_path+0xc2>
c0004eb5:	89 d8                	mov    eax,ebx
c0004eb7:	e8 6e f2 ff ff       	call   c000412a <dir_find>
c0004ebc:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ebf:	85 c0                	test   eax,eax
c0004ec1:	75 46                	jne    c0004f09 <follow_path+0x9a>
c0004ec3:	80 e2 04             	and    dl,0x4
c0004ec6:	75 69                	jne    c0004f31 <follow_path+0xc2>
c0004ec8:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ecc:	74 5e                	je     c0004f2c <follow_path+0xbd>
c0004ece:	8a 06                	mov    al,BYTE PTR [esi]
c0004ed0:	3c 04                	cmp    al,0x4
c0004ed2:	75 41                	jne    c0004f15 <follow_path+0xa6>
c0004ed4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004edb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ede:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ee1:	30 c0                	xor    al,al
c0004ee3:	09 d0                	or     eax,edx
c0004ee5:	89 da                	mov    edx,ebx
c0004ee7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004eea:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ef0:	8d 46 10             	lea    eax,[esi+0x10]
c0004ef3:	e8 3d ff ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0004ef8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004efc:	89 d8                	mov    eax,ebx
c0004efe:	e8 a9 ed ff ff       	call   c0003cac <create_name>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	74 ae                	je     c0004eb5 <follow_path+0x46>
c0004f07:	eb 28                	jmp    c0004f31 <follow_path+0xc2>
c0004f09:	83 f8 04             	cmp    eax,0x4
c0004f0c:	75 23                	jne    c0004f31 <follow_path+0xc2>
c0004f0e:	80 e2 04             	and    dl,0x4
c0004f11:	74 19                	je     c0004f2c <follow_path+0xbd>
c0004f13:	eb 1c                	jmp    c0004f31 <follow_path+0xc2>
c0004f15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f18:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f1e:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f22:	e8 bd fe ff ff       	call   c0004de4 <ld_clust.isra.0>
c0004f27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f2a:	eb cc                	jmp    c0004ef8 <follow_path+0x89>
c0004f2c:	b8 05 00 00 00       	mov    eax,0x5
c0004f31:	83 c4 14             	add    esp,0x14
c0004f34:	5b                   	pop    ebx
c0004f35:	5e                   	pop    esi
c0004f36:	c3                   	ret    

c0004f37 <f_mount>:
c0004f37:	53                   	push   ebx
c0004f38:	83 ec 18             	sub    esp,0x18
c0004f3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f3f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f4b:	e8 fb d2 ff ff       	call   c000224b <get_ldnumber>
c0004f50:	89 c2                	mov    edx,eax
c0004f52:	b8 0b 00 00 00       	mov    eax,0xb
c0004f57:	85 d2                	test   edx,edx
c0004f59:	78 39                	js     c0004f94 <f_mount+0x5d>
c0004f5b:	8b 04 95 a0 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a60]
c0004f62:	85 c0                	test   eax,eax
c0004f64:	74 03                	je     c0004f69 <f_mount+0x32>
c0004f66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6d:	85 c0                	test   eax,eax
c0004f6f:	74 03                	je     c0004f74 <f_mount+0x3d>
c0004f71:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	89 04 95 a0 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a60],eax
c0004f7f:	31 c0                	xor    eax,eax
c0004f81:	84 db                	test   bl,bl
c0004f83:	74 0f                	je     c0004f94 <f_mount+0x5d>
c0004f85:	31 c9                	xor    ecx,ecx
c0004f87:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8f:	e8 65 d7 ff ff       	call   c00026f9 <mount_volume>
c0004f94:	83 c4 18             	add    esp,0x18
c0004f97:	5b                   	pop    ebx
c0004f98:	c3                   	ret    

c0004f99 <f_open>:
c0004f99:	55                   	push   ebp
c0004f9a:	bd 09 00 00 00       	mov    ebp,0x9
c0004f9f:	57                   	push   edi
c0004fa0:	56                   	push   esi
c0004fa1:	53                   	push   ebx
c0004fa2:	83 ec 7c             	sub    esp,0x7c
c0004fa5:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fac:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fb3:	85 db                	test   ebx,ebx
c0004fb5:	0f 84 10 04 00 00    	je     c00053cb <f_open+0x432>
c0004fbb:	89 fe                	mov    esi,edi
c0004fbd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fc1:	83 e6 3f             	and    esi,0x3f
c0004fc4:	89 f0                	mov    eax,esi
c0004fc6:	0f b6 c8             	movzx  ecx,al
c0004fc9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fd0:	e8 24 d7 ff ff       	call   c00026f9 <mount_volume>
c0004fd5:	89 c5                	mov    ebp,eax
c0004fd7:	85 c0                	test   eax,eax
c0004fd9:	0f 85 e6 03 00 00    	jne    c00053c5 <f_open+0x42c>
c0004fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe3:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fec:	83 ec 0c             	sub    esp,0xc
c0004fef:	68 60 04 00 00       	push   0x460
c0004ff4:	e8 a3 34 00 00       	call   c000849c <ff_memalloc>
c0004ff9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ffd:	83 c4 10             	add    esp,0x10
c0005000:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005005:	0f 84 c0 03 00 00    	je     c00053cb <f_open+0x432>
c000500b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005013:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005019:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000501c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000501f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005026:	8d 44 24 24          	lea    eax,[esp+0x24]
c000502a:	e8 40 fe ff ff       	call   c0004e6f <follow_path>
c000502f:	89 c5                	mov    ebp,eax
c0005031:	85 c0                	test   eax,eax
c0005033:	75 0c                	jne    c0005041 <f_open+0xa8>
c0005035:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000503a:	79 05                	jns    c0005041 <f_open+0xa8>
c000503c:	bd 06 00 00 00       	mov    ebp,0x6
c0005041:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005047:	0f 84 84 01 00 00    	je     c00051d1 <f_open+0x238>
c000504d:	85 ed                	test   ebp,ebp
c000504f:	74 20                	je     c0005071 <f_open+0xd8>
c0005051:	83 fd 04             	cmp    ebp,0x4
c0005054:	0f 85 58 03 00 00    	jne    c00053b2 <f_open+0x419>
c000505a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000505e:	83 ce 08             	or     esi,0x8
c0005061:	e8 8a f2 ff ff       	call   c00042f0 <dir_register>
c0005066:	89 c5                	mov    ebp,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	74 2f                	je     c000509b <f_open+0x102>
c000506c:	e9 41 03 00 00       	jmp    c00053b2 <f_open+0x419>
c0005071:	bd 07 00 00 00       	mov    ebp,0x7
c0005076:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c000507b:	0f 85 31 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005081:	bd 08 00 00 00       	mov    ebp,0x8
c0005086:	f7 c7 04 00 00 00    	test   edi,0x4
c000508c:	0f 85 20 03 00 00    	jne    c00053b2 <f_open+0x419>
c0005092:	83 e7 08             	and    edi,0x8
c0005095:	0f 84 65 01 00 00    	je     c0005200 <f_open+0x267>
c000509b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000509f:	8a 02                	mov    al,BYTE PTR [edx]
c00050a1:	3c 04                	cmp    al,0x4
c00050a3:	0f 85 97 00 00 00    	jne    c0005140 <f_open+0x1a7>
c00050a9:	8d 42 10             	lea    eax,[edx+0x10]
c00050ac:	89 13                	mov    DWORD PTR [ebx],edx
c00050ae:	89 da                	mov    edx,ebx
c00050b0:	e8 80 fd ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c00050b5:	31 d2                	xor    edx,edx
c00050b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c3:	83 c0 02             	add    eax,0x2
c00050c6:	e8 32 cc ff ff       	call   c0001cfd <mem_set>
c00050cb:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050d0:	31 d2                	xor    edx,edx
c00050d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d9:	83 c0 26             	add    eax,0x26
c00050dc:	e8 1c cc ff ff       	call   c0001cfd <mem_set>
c00050e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e8:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050ec:	ba 00 00 21 50       	mov    edx,0x50210000
c00050f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f4:	83 c0 08             	add    eax,0x8
c00050f7:	e8 e3 cb ff ff       	call   c0001cdf <st_dword>
c00050fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005100:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005103:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005107:	8d 44 24 24          	lea    eax,[esp+0x24]
c000510b:	e8 b7 ea ff ff       	call   c0003bc7 <store_xdir>
c0005110:	89 c5                	mov    ebp,eax
c0005112:	85 c0                	test   eax,eax
c0005114:	0f 85 98 02 00 00    	jne    c00053b2 <f_open+0x419>
c000511a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000511d:	85 d2                	test   edx,edx
c000511f:	0f 84 db 00 00 00    	je     c0005200 <f_open+0x267>
c0005125:	31 c9                	xor    ecx,ecx
c0005127:	89 d8                	mov    eax,ebx
c0005129:	e8 8e e3 ff ff       	call   c00034bc <remove_chain>
c000512e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005132:	89 c5                	mov    ebp,eax
c0005134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005137:	48                   	dec    eax
c0005138:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000513b:	e9 b8 00 00 00       	jmp    c00051f8 <f_open+0x25f>
c0005140:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005144:	89 ea                	mov    edx,ebp
c0005146:	e8 99 fc ff ff       	call   c0004de4 <ld_clust.isra.0>
c000514b:	ba 00 00 21 50       	mov    edx,0x50210000
c0005150:	89 c7                	mov    edi,eax
c0005152:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005155:	e8 85 cb ff ff       	call   c0001cdf <st_dword>
c000515a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515e:	31 c9                	xor    ecx,ecx
c0005160:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000516c:	e8 9c fc ff ff       	call   c0004e0d <st_clust.isra.1>
c0005171:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005175:	31 d2                	xor    edx,edx
c0005177:	83 c0 1c             	add    eax,0x1c
c000517a:	e8 60 cb ff ff       	call   c0001cdf <st_dword>
c000517f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005183:	85 ff                	test   edi,edi
c0005185:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005189:	74 75                	je     c0005200 <f_open+0x267>
c000518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518f:	31 c9                	xor    ecx,ecx
c0005191:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005194:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005197:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000519b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000519f:	89 fa                	mov    edx,edi
c00051a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051a5:	e8 12 e3 ff ff       	call   c00034bc <remove_chain>
c00051aa:	89 c5                	mov    ebp,eax
c00051ac:	85 c0                	test   eax,eax
c00051ae:	0f 85 fe 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c0:	4f                   	dec    edi
c00051c1:	e8 81 d2 ff ff       	call   c0002447 <move_window>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051cc:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051cf:	eb 27                	jmp    c00051f8 <f_open+0x25f>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 d9 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051d9:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051dd:	bd 04 00 00 00       	mov    ebp,0x4
c00051e2:	a8 10                	test   al,0x10
c00051e4:	0f 85 c8 01 00 00    	jne    c00053b2 <f_open+0x419>
c00051ea:	83 e7 02             	and    edi,0x2
c00051ed:	74 11                	je     c0005200 <f_open+0x267>
c00051ef:	bd 07 00 00 00       	mov    ebp,0x7
c00051f4:	a8 01                	test   al,0x1
c00051f6:	eb 02                	jmp    c00051fa <f_open+0x261>
c00051f8:	85 ed                	test   ebp,ebp
c00051fa:	0f 85 b2 01 00 00    	jne    c00053b2 <f_open+0x419>
c0005200:	f7 c6 08 00 00 00    	test   esi,0x8
c0005206:	74 03                	je     c000520b <f_open+0x272>
c0005208:	83 ce 40             	or     esi,0x40
c000520b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000520f:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005212:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005215:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005218:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000521b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000521f:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005222:	8a 02                	mov    al,BYTE PTR [edx]
c0005224:	3c 04                	cmp    al,0x4
c0005226:	75 2a                	jne    c0005252 <f_open+0x2b9>
c0005228:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000522c:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005231:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005238:	30 c0                	xor    al,al
c000523a:	09 c8                	or     eax,ecx
c000523c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000523f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005243:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005246:	8d 42 10             	lea    eax,[edx+0x10]
c0005249:	89 da                	mov    edx,ebx
c000524b:	e8 e5 fb ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0005250:	eb 1c                	jmp    c000526e <f_open+0x2d5>
c0005252:	89 fa                	mov    edx,edi
c0005254:	e8 8b fb ff ff       	call   c0004de4 <ld_clust.isra.0>
c0005259:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525c:	8d 47 1c             	lea    eax,[edi+0x1c]
c000525f:	e8 12 ca ff ff       	call   c0001c76 <ld_dword>
c0005264:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000526b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005272:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005279:	89 03                	mov    DWORD PTR [ebx],eax
c000527b:	31 d2                	xor    edx,edx
c000527d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005281:	b9 00 02 00 00       	mov    ecx,0x200
c0005286:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000528a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000528e:	89 f0                	mov    eax,esi
c0005290:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005297:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000529a:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00052a4:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052b6:	e8 42 ca ff ff       	call   c0001cfd <mem_set>
c00052bb:	83 e6 20             	and    esi,0x20
c00052be:	75 07                	jne    c00052c7 <f_open+0x32e>
c00052c0:	31 ed                	xor    ebp,ebp
c00052c2:	e9 eb 00 00 00       	jmp    c00053b2 <f_open+0x419>
c00052c7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052ca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d9:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052dd:	74 e1                	je     c00052c0 <f_open+0x327>
c00052df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052ea:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052f1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052f4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f8:	31 ff                	xor    edi,edi
c00052fa:	c1 e5 09             	shl    ebp,0x9
c00052fd:	89 ee                	mov    esi,ebp
c00052ff:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005303:	89 f8                	mov    eax,edi
c0005305:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005309:	73 22                	jae    c000532d <f_open+0x394>
c000530b:	89 d8                	mov    eax,ebx
c000530d:	e8 bd dc ff ff       	call   c0002fcf <get_fat>
c0005312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005316:	89 c2                	mov    edx,eax
c0005318:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000531c:	83 f8 01             	cmp    eax,0x1
c000531f:	76 10                	jbe    c0005331 <f_open+0x398>
c0005321:	83 f8 ff             	cmp    eax,0xffffffff
c0005324:	75 d9                	jne    c00052ff <f_open+0x366>
c0005326:	bd 01 00 00 00       	mov    ebp,0x1
c000532b:	eb 09                	jmp    c0005336 <f_open+0x39d>
c000532d:	31 ed                	xor    ebp,ebp
c000532f:	eb 05                	jmp    c0005336 <f_open+0x39d>
c0005331:	bd 02 00 00 00       	mov    ebp,0x2
c0005336:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005339:	85 ed                	test   ebp,ebp
c000533b:	75 75                	jne    c00053b2 <f_open+0x419>
c000533d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005341:	25 ff 01 00 00       	and    eax,0x1ff
c0005346:	0f 84 74 ff ff ff    	je     c00052c0 <f_open+0x327>
c000534c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005350:	bd 02 00 00 00       	mov    ebp,0x2
c0005355:	89 c8                	mov    eax,ecx
c0005357:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000535b:	e8 a2 cb ff ff       	call   c0001f02 <clst2sect>
c0005360:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005364:	89 d7                	mov    edi,edx
c0005366:	09 c7                	or     edi,eax
c0005368:	74 48                	je     c00053b2 <f_open+0x419>
c000536a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000536e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000537a:	0f ac fe 09          	shrd   esi,edi,0x9
c000537e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005382:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005386:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005389:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000538d:	83 ec 0c             	sub    esp,0xc
c0005390:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005393:	6a 01                	push   0x1
c0005395:	52                   	push   edx
c0005396:	50                   	push   eax
c0005397:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000539b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539f:	50                   	push   eax
c00053a0:	e8 79 c8 ff ff       	call   c0001c1e <disk_read>
c00053a5:	83 c4 20             	add    esp,0x20
c00053a8:	85 c0                	test   eax,eax
c00053aa:	0f 95 c0             	setne  al
c00053ad:	0f b6 c0             	movzx  eax,al
c00053b0:	89 c5                	mov    ebp,eax
c00053b2:	83 ec 0c             	sub    esp,0xc
c00053b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b9:	e8 f4 30 00 00       	call   c00084b2 <ff_memfree>
c00053be:	83 c4 10             	add    esp,0x10
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	74 06                	je     c00053cb <f_open+0x432>
c00053c5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053cb:	83 c4 7c             	add    esp,0x7c
c00053ce:	89 e8                	mov    eax,ebp
c00053d0:	5b                   	pop    ebx
c00053d1:	5e                   	pop    esi
c00053d2:	5f                   	pop    edi
c00053d3:	5d                   	pop    ebp
c00053d4:	c3                   	ret    

c00053d5 <f_read>:
c00053d5:	55                   	push   ebp
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	53                   	push   ebx
c00053d9:	83 ec 2c             	sub    esp,0x2c
c00053dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	89 d8                	mov    eax,ebx
c00053f0:	e8 77 cf ff ff       	call   c000236c <validate>
c00053f5:	89 c5                	mov    ebp,eax
c00053f7:	85 c0                	test   eax,eax
c00053f9:	0f 85 4c 02 00 00    	jne    c000564b <f_read+0x276>
c00053ff:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005403:	85 ed                	test   ebp,ebp
c0005405:	0f 85 40 02 00 00    	jne    c000564b <f_read+0x276>
c000540b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000540f:	0f 84 31 02 00 00    	je     c0005646 <f_read+0x271>
c0005415:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005418:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000541b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000541e:	bf 00 00 00 00       	mov    edi,0x0
c0005423:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005426:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000542a:	89 d1                	mov    ecx,edx
c000542c:	19 f9                	sbb    ecx,edi
c000542e:	0f 83 cf 00 00 00    	jae    c0005503 <f_read+0x12e>
c0005434:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005438:	e9 c6 00 00 00       	jmp    c0005503 <f_read+0x12e>
c000543d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005440:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005443:	89 d0                	mov    eax,edx
c0005445:	25 ff 01 00 00       	and    eax,0x1ff
c000544a:	0f 85 c9 01 00 00    	jne    c0005619 <f_read+0x244>
c0005450:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005454:	89 d6                	mov    esi,edx
c0005456:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000545a:	89 cf                	mov    edi,ecx
c000545c:	48                   	dec    eax
c000545d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005461:	21 f0                	and    eax,esi
c0005463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005467:	0f 84 a6 00 00 00    	je     c0005513 <f_read+0x13e>
c000546d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005471:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005474:	89 c8                	mov    eax,ecx
c0005476:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005479:	e8 84 ca ff ff       	call   c0001f02 <clst2sect>
c000547e:	89 d7                	mov    edi,edx
c0005480:	09 c7                	or     edi,eax
c0005482:	0f 84 b4 00 00 00    	je     c000553c <f_read+0x167>
c0005488:	31 ff                	xor    edi,edi
c000548a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000548e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005491:	01 c6                	add    esi,eax
c0005493:	11 d7                	adc    edi,edx
c0005495:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000549d:	0f 86 fd 00 00 00    	jbe    c00055a0 <f_read+0x1cb>
c00054a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ab:	c1 e8 09             	shr    eax,0x9
c00054ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00054b1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054b5:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b8:	39 c2                	cmp    edx,eax
c00054ba:	76 07                	jbe    c00054c3 <f_read+0xee>
c00054bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054c3:	83 ec 0c             	sub    esp,0xc
c00054c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054ca:	57                   	push   edi
c00054cb:	56                   	push   esi
c00054cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054d4:	50                   	push   eax
c00054d5:	e8 44 c7 ff ff       	call   c0001c1e <disk_read>
c00054da:	83 c4 20             	add    esp,0x20
c00054dd:	85 c0                	test   eax,eax
c00054df:	75 6e                	jne    c000554f <f_read+0x17a>
c00054e1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054e5:	78 7e                	js     c0005565 <f_read+0x190>
c00054e7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054ea:	c1 e6 09             	shl    esi,0x9
c00054ed:	31 ff                	xor    edi,edi
c00054ef:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054f7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054fb:	01 30                	add    DWORD PTR [eax],esi
c00054fd:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005500:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005503:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005508:	0f 85 2f ff ff ff    	jne    c000543d <f_read+0x68>
c000550e:	e9 38 01 00 00       	jmp    c000564b <f_read+0x276>
c0005513:	89 c8                	mov    eax,ecx
c0005515:	09 d0                	or     eax,edx
c0005517:	75 05                	jne    c000551e <f_read+0x149>
c0005519:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000551c:	eb 19                	jmp    c0005537 <f_read+0x162>
c000551e:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005522:	74 09                	je     c000552d <f_read+0x158>
c0005524:	89 d8                	mov    eax,ebx
c0005526:	e8 f8 c9 ff ff       	call   c0001f23 <clmt_clust>
c000552b:	eb 0a                	jmp    c0005537 <f_read+0x162>
c000552d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005530:	89 d8                	mov    eax,ebx
c0005532:	e8 98 da ff ff       	call   c0002fcf <get_fat>
c0005537:	83 f8 01             	cmp    eax,0x1
c000553a:	77 0e                	ja     c000554a <f_read+0x175>
c000553c:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005540:	bd 02 00 00 00       	mov    ebp,0x2
c0005545:	e9 01 01 00 00       	jmp    c000564b <f_read+0x276>
c000554a:	83 f8 ff             	cmp    eax,0xffffffff
c000554d:	75 0e                	jne    c000555d <f_read+0x188>
c000554f:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005553:	bd 01 00 00 00       	mov    ebp,0x1
c0005558:	e9 ee 00 00 00       	jmp    c000564b <f_read+0x276>
c000555d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005560:	e9 08 ff ff ff       	jmp    c000546d <f_read+0x98>
c0005565:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005568:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000556b:	29 f0                	sub    eax,esi
c000556d:	19 fa                	sbb    edx,edi
c000556f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005572:	89 d7                	mov    edi,edx
c0005574:	ba 00 00 00 00       	mov    edx,0x0
c0005579:	89 f9                	mov    ecx,edi
c000557b:	19 d1                	sbb    ecx,edx
c000557d:	0f 83 64 ff ff ff    	jae    c00054e7 <f_read+0x112>
c0005583:	89 c7                	mov    edi,eax
c0005585:	8d 53 50             	lea    edx,[ebx+0x50]
c0005588:	c1 e7 09             	shl    edi,0x9
c000558b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558f:	b9 00 02 00 00       	mov    ecx,0x200
c0005594:	01 f8                	add    eax,edi
c0005596:	e8 4d c7 ff ff       	call   c0001ce8 <mem_cpy>
c000559b:	e9 47 ff ff ff       	jmp    c00054e7 <f_read+0x112>
c00055a0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055a3:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ad:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055b1:	75 05                	jne    c00055b8 <f_read+0x1e3>
c00055b3:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055b6:	74 5b                	je     c0005613 <f_read+0x23e>
c00055b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00055bb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055c3:	79 2a                	jns    c00055ef <f_read+0x21a>
c00055c5:	83 ec 0c             	sub    esp,0xc
c00055c8:	6a 01                	push   0x1
c00055ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 54 c6 ff ff       	call   c0001c34 <disk_write>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 64 ff ff ff    	jne    c000554f <f_read+0x17a>
c00055eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ef:	83 ec 0c             	sub    esp,0xc
c00055f2:	6a 01                	push   0x1
c00055f4:	57                   	push   edi
c00055f5:	56                   	push   esi
c00055f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005602:	50                   	push   eax
c0005603:	e8 16 c6 ff ff       	call   c0001c1e <disk_read>
c0005608:	83 c4 20             	add    esp,0x20
c000560b:	85 c0                	test   eax,eax
c000560d:	0f 85 3c ff ff ff    	jne    c000554f <f_read+0x17a>
c0005613:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005616:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005619:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000561c:	ba 00 02 00 00       	mov    edx,0x200
c0005621:	25 ff 01 00 00       	and    eax,0x1ff
c0005626:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000562a:	29 c2                	sub    edx,eax
c000562c:	39 d6                	cmp    esi,edx
c000562e:	76 02                	jbe    c0005632 <f_read+0x25d>
c0005630:	89 d6                	mov    esi,edx
c0005632:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005636:	89 f1                	mov    ecx,esi
c0005638:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000563c:	e8 a7 c6 ff ff       	call   c0001ce8 <mem_cpy>
c0005641:	e9 a7 fe ff ff       	jmp    c00054ed <f_read+0x118>
c0005646:	bd 07 00 00 00       	mov    ebp,0x7
c000564b:	83 c4 2c             	add    esp,0x2c
c000564e:	89 e8                	mov    eax,ebp
c0005650:	5b                   	pop    ebx
c0005651:	5e                   	pop    esi
c0005652:	5f                   	pop    edi
c0005653:	5d                   	pop    ebp
c0005654:	c3                   	ret    

c0005655 <f_write>:
c0005655:	55                   	push   ebp
c0005656:	57                   	push   edi
c0005657:	56                   	push   esi
c0005658:	53                   	push   ebx
c0005659:	83 ec 2c             	sub    esp,0x2c
c000565c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005660:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005664:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000566a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000566e:	89 d8                	mov    eax,ebx
c0005670:	e8 f7 cc ff ff       	call   c000236c <validate>
c0005675:	89 c5                	mov    ebp,eax
c0005677:	85 c0                	test   eax,eax
c0005679:	0f 85 86 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000567f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005683:	85 ed                	test   ebp,ebp
c0005685:	0f 85 7a 02 00 00    	jne    c0005905 <f_write+0x2b0>
c000568b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000568f:	0f 84 6b 02 00 00    	je     c0005900 <f_write+0x2ab>
c0005695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005699:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569c:	0f 84 43 01 00 00    	je     c00057e5 <f_write+0x190>
c00056a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056a5:	89 c1                	mov    ecx,eax
c00056a7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ab:	0f 83 34 01 00 00    	jae    c00057e5 <f_write+0x190>
c00056b1:	f7 d0                	not    eax
c00056b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056b7:	e9 29 01 00 00       	jmp    c00057e5 <f_write+0x190>
c00056bc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056bf:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056c2:	89 d0                	mov    eax,edx
c00056c4:	25 ff 01 00 00       	and    eax,0x1ff
c00056c9:	0f 85 00 02 00 00    	jne    c00058cf <f_write+0x27a>
c00056cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056d3:	89 d6                	mov    esi,edx
c00056d5:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d9:	89 cf                	mov    edi,ecx
c00056db:	48                   	dec    eax
c00056dc:	0f ac fe 09          	shrd   esi,edi,0x9
c00056e0:	21 f0                	and    eax,esi
c00056e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056e6:	0f 84 06 01 00 00    	je     c00057f2 <f_write+0x19d>
c00056ec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056f0:	0f 88 6e 01 00 00    	js     c0005864 <f_write+0x20f>
c00056f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056fa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056fd:	89 c8                	mov    eax,ecx
c00056ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005703:	e8 fa c7 ff ff       	call   c0001f02 <clst2sect>
c0005708:	89 d1                	mov    ecx,edx
c000570a:	09 c1                	or     ecx,eax
c000570c:	0f 84 1c 01 00 00    	je     c000582e <f_write+0x1d9>
c0005712:	31 ff                	xor    edi,edi
c0005714:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005718:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000571c:	01 c6                	add    esi,eax
c000571e:	11 d7                	adc    edi,edx
c0005720:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005728:	0f 86 63 01 00 00    	jbe    c0005891 <f_write+0x23c>
c000572e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005736:	c1 e8 09             	shr    eax,0x9
c0005739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000573d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005741:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005745:	39 c2                	cmp    edx,eax
c0005747:	76 08                	jbe    c0005751 <f_write+0xfc>
c0005749:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000574d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005751:	83 ec 0c             	sub    esp,0xc
c0005754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005758:	57                   	push   edi
c0005759:	56                   	push   esi
c000575a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000575e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005762:	50                   	push   eax
c0005763:	e8 cc c4 ff ff       	call   c0001c34 <disk_write>
c0005768:	83 c4 20             	add    esp,0x20
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 ce 00 00 00    	jne    c0005841 <f_write+0x1ec>
c0005773:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005779:	29 f0                	sub    eax,esi
c000577b:	19 fa                	sbb    edx,edi
c000577d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005781:	89 d7                	mov    edi,edx
c0005783:	ba 00 00 00 00       	mov    edx,0x0
c0005788:	89 f9                	mov    ecx,edi
c000578a:	19 d1                	sbb    ecx,edx
c000578c:	73 1c                	jae    c00057aa <f_write+0x155>
c000578e:	89 c7                	mov    edi,eax
c0005790:	b9 00 02 00 00       	mov    ecx,0x200
c0005795:	c1 e7 09             	shl    edi,0x9
c0005798:	8d 43 50             	lea    eax,[ebx+0x50]
c000579b:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000579f:	89 fa                	mov    edx,edi
c00057a1:	e8 42 c5 ff ff       	call   c0001ce8 <mem_cpy>
c00057a6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ae:	c1 e6 09             	shl    esi,0x9
c00057b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057b5:	31 ff                	xor    edi,edi
c00057b7:	01 30                	add    DWORD PTR [eax],esi
c00057b9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c4:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057ca:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057cd:	89 c1                	mov    ecx,eax
c00057cf:	39 f2                	cmp    edx,esi
c00057d1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057d4:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057d7:	19 f9                	sbb    ecx,edi
c00057d9:	73 04                	jae    c00057df <f_write+0x18a>
c00057db:	89 f2                	mov    edx,esi
c00057dd:	89 f8                	mov    eax,edi
c00057df:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057ea:	0f 85 cc fe ff ff    	jne    c00056bc <f_write+0x67>
c00057f0:	eb 2e                	jmp    c0005820 <f_write+0x1cb>
c00057f2:	89 c8                	mov    eax,ecx
c00057f4:	09 d0                	or     eax,edx
c00057f6:	75 0b                	jne    c0005803 <f_write+0x1ae>
c00057f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057fb:	31 d2                	xor    edx,edx
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 28                	jne    c0005829 <f_write+0x1d4>
c0005801:	eb 12                	jmp    c0005815 <f_write+0x1c0>
c0005803:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005807:	74 09                	je     c0005812 <f_write+0x1bd>
c0005809:	89 d8                	mov    eax,ebx
c000580b:	e8 13 c7 ff ff       	call   c0001f23 <clmt_clust>
c0005810:	eb 0a                	jmp    c000581c <f_write+0x1c7>
c0005812:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005815:	89 d8                	mov    eax,ebx
c0005817:	e8 a1 da ff ff       	call   c00032bd <create_chain>
c000581c:	85 c0                	test   eax,eax
c000581e:	75 09                	jne    c0005829 <f_write+0x1d4>
c0005820:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005824:	e9 dc 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c0005829:	83 f8 01             	cmp    eax,0x1
c000582c:	75 0e                	jne    c000583c <f_write+0x1e7>
c000582e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005832:	bd 02 00 00 00       	mov    ebp,0x2
c0005837:	e9 c9 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000583c:	83 f8 ff             	cmp    eax,0xffffffff
c000583f:	75 0e                	jne    c000584f <f_write+0x1fa>
c0005841:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005845:	bd 01 00 00 00       	mov    ebp,0x1
c000584a:	e9 b6 00 00 00       	jmp    c0005905 <f_write+0x2b0>
c000584f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005852:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005856:	0f 85 90 fe ff ff    	jne    c00056ec <f_write+0x97>
c000585c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000585f:	e9 88 fe ff ff       	jmp    c00056ec <f_write+0x97>
c0005864:	83 ec 0c             	sub    esp,0xc
c0005867:	8d 43 50             	lea    eax,[ebx+0x50]
c000586a:	6a 01                	push   0x1
c000586c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000586f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005872:	50                   	push   eax
c0005873:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005877:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000587b:	50                   	push   eax
c000587c:	e8 b3 c3 ff ff       	call   c0001c34 <disk_write>
c0005881:	83 c4 20             	add    esp,0x20
c0005884:	85 c0                	test   eax,eax
c0005886:	75 b9                	jne    c0005841 <f_write+0x1ec>
c0005888:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000588c:	e9 65 fe ff ff       	jmp    c00056f6 <f_write+0xa1>
c0005891:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005894:	75 05                	jne    c000589b <f_write+0x246>
c0005896:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005899:	74 2e                	je     c00058c9 <f_write+0x274>
c000589b:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000589e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058a1:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058a4:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058a7:	73 20                	jae    c00058c9 <f_write+0x274>
c00058a9:	83 ec 0c             	sub    esp,0xc
c00058ac:	8d 43 50             	lea    eax,[ebx+0x50]
c00058af:	6a 01                	push   0x1
c00058b1:	57                   	push   edi
c00058b2:	56                   	push   esi
c00058b3:	50                   	push   eax
c00058b4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b8:	50                   	push   eax
c00058b9:	e8 60 c3 ff ff       	call   c0001c1e <disk_read>
c00058be:	83 c4 20             	add    esp,0x20
c00058c1:	85 c0                	test   eax,eax
c00058c3:	0f 85 78 ff ff ff    	jne    c0005841 <f_write+0x1ec>
c00058c9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058cc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058cf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058d2:	ba 00 02 00 00       	mov    edx,0x200
c00058d7:	25 ff 01 00 00       	and    eax,0x1ff
c00058dc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058e0:	29 c2                	sub    edx,eax
c00058e2:	39 d6                	cmp    esi,edx
c00058e4:	76 02                	jbe    c00058e8 <f_write+0x293>
c00058e6:	89 d6                	mov    esi,edx
c00058e8:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058ec:	89 f1                	mov    ecx,esi
c00058ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058f2:	e8 f1 c3 ff ff       	call   c0001ce8 <mem_cpy>
c00058f7:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058fb:	e9 b1 fe ff ff       	jmp    c00057b1 <f_write+0x15c>
c0005900:	bd 07 00 00 00       	mov    ebp,0x7
c0005905:	83 c4 2c             	add    esp,0x2c
c0005908:	89 e8                	mov    eax,ebp
c000590a:	5b                   	pop    ebx
c000590b:	5e                   	pop    esi
c000590c:	5f                   	pop    edi
c000590d:	5d                   	pop    ebp
c000590e:	c3                   	ret    

c000590f <f_sync>:
c000590f:	56                   	push   esi
c0005910:	53                   	push   ebx
c0005911:	83 ec 64             	sub    esp,0x64
c0005914:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005918:	8d 54 24 10          	lea    edx,[esp+0x10]
c000591c:	89 d8                	mov    eax,ebx
c000591e:	e8 49 ca ff ff       	call   c000236c <validate>
c0005923:	85 c0                	test   eax,eax
c0005925:	0f 85 ba 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000592b:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000592e:	f6 c2 40             	test   dl,0x40
c0005931:	0f 84 ae 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c0005937:	84 d2                	test   dl,dl
c0005939:	79 33                	jns    c000596e <f_sync+0x5f>
c000593b:	83 ec 0c             	sub    esp,0xc
c000593e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005941:	6a 01                	push   0x1
c0005943:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005946:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005949:	50                   	push   eax
c000594a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000594e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005952:	50                   	push   eax
c0005953:	e8 dc c2 ff ff       	call   c0001c34 <disk_write>
c0005958:	83 c4 20             	add    esp,0x20
c000595b:	89 c2                	mov    edx,eax
c000595d:	b8 01 00 00 00       	mov    eax,0x1
c0005962:	85 d2                	test   edx,edx
c0005964:	0f 85 7b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000596a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005972:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005975:	0f 85 11 01 00 00    	jne    c0005a8c <f_sync+0x17d>
c000597b:	89 d8                	mov    eax,ebx
c000597d:	e8 13 d6 ff ff       	call   c0002f95 <fill_first_frag>
c0005982:	85 c0                	test   eax,eax
c0005984:	0f 85 5b 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000598a:	83 c9 ff             	or     ecx,0xffffffff
c000598d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 c9 d5 ff ff       	call   c0002f60 <fill_last_frag>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 46 01 00 00    	jne    c0005ae5 <f_sync+0x1d6>
c000599f:	83 ec 0c             	sub    esp,0xc
c00059a2:	68 60 04 00 00       	push   0x460
c00059a7:	e8 f0 2a 00 00       	call   c000849c <ff_memalloc>
c00059ac:	83 c4 10             	add    esp,0x10
c00059af:	89 c6                	mov    esi,eax
c00059b1:	b8 11 00 00 00       	mov    eax,0x11
c00059b6:	85 f6                	test   esi,esi
c00059b8:	0f 84 27 01 00 00    	je     c0005ae5 <f_sync+0x1d6>
c00059be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ce:	89 da                	mov    edx,ebx
c00059d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059d4:	e8 af df ff ff       	call   c0003988 <load_obj_xdir>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 95 00 00 00    	jne    c0005a76 <f_sync+0x167>
c00059e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e8:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059ec:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ef:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059f2:	83 ca 01             	or     edx,0x1
c00059f5:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fe:	83 c0 34             	add    eax,0x34
c0005a01:	e8 d9 c2 ff ff       	call   c0001cdf <st_dword>
c0005a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a10:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a13:	83 c0 38             	add    eax,0x38
c0005a16:	e8 c7 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a22:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a28:	83 c0 28             	add    eax,0x28
c0005a2b:	e8 b2 c2 ff ff       	call   c0001ce2 <st_qword>
c0005a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a34:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3c:	83 c0 0c             	add    eax,0xc
c0005a3f:	e8 9b c2 ff ff       	call   c0001cdf <st_dword>
c0005a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a48:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a4b:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a4f:	31 d2                	xor    edx,edx
c0005a51:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a54:	83 c0 10             	add    eax,0x10
c0005a57:	e8 83 c2 ff ff       	call   c0001cdf <st_dword>
c0005a5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a60:	e8 62 e1 ff ff       	call   c0003bc7 <store_xdir>
c0005a65:	85 c0                	test   eax,eax
c0005a67:	75 0d                	jne    c0005a76 <f_sync+0x167>
c0005a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a6d:	e8 00 eb ff ff       	call   c0004572 <sync_fs>
c0005a72:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a7a:	83 ec 0c             	sub    esp,0xc
c0005a7d:	56                   	push   esi
c0005a7e:	e8 2f 2a 00 00       	call   c00084b2 <ff_memfree>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	eb 59                	jmp    c0005ae5 <f_sync+0x1d6>
c0005a8c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a8f:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a92:	e8 b0 c9 ff ff       	call   c0002447 <move_window>
c0005a97:	85 c0                	test   eax,eax
c0005a99:	75 4a                	jne    c0005ae5 <f_sync+0x1d6>
c0005a9b:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a9e:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005aa2:	89 f2                	mov    edx,esi
c0005aa4:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005aa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa9:	e8 5f f3 ff ff       	call   c0004e0d <st_clust.isra.1>
c0005aae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ab1:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ab4:	e8 26 c2 ff ff       	call   c0001cdf <st_dword>
c0005ab9:	8d 46 16             	lea    eax,[esi+0x16]
c0005abc:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ac1:	e8 19 c2 ff ff       	call   c0001cdf <st_dword>
c0005ac6:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac9:	31 d2                	xor    edx,edx
c0005acb:	e8 0b c2 ff ff       	call   c0001cdb <st_word>
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005adc:	e8 91 ea ff ff       	call   c0004572 <sync_fs>
c0005ae1:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ae5:	83 c4 64             	add    esp,0x64
c0005ae8:	5b                   	pop    ebx
c0005ae9:	5e                   	pop    esi
c0005aea:	c3                   	ret    

c0005aeb <f_close>:
c0005aeb:	53                   	push   ebx
c0005aec:	83 ec 24             	sub    esp,0x24
c0005aef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005af3:	53                   	push   ebx
c0005af4:	e8 16 fe ff ff       	call   c000590f <f_sync>
c0005af9:	83 c4 10             	add    esp,0x10
c0005afc:	85 c0                	test   eax,eax
c0005afe:	75 15                	jne    c0005b15 <f_close+0x2a>
c0005b00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b04:	89 d8                	mov    eax,ebx
c0005b06:	e8 61 c8 ff ff       	call   c000236c <validate>
c0005b0b:	85 c0                	test   eax,eax
c0005b0d:	75 06                	jne    c0005b15 <f_close+0x2a>
c0005b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b15:	83 c4 18             	add    esp,0x18
c0005b18:	5b                   	pop    ebx
c0005b19:	c3                   	ret    

c0005b1a <f_lseek>:
c0005b1a:	55                   	push   ebp
c0005b1b:	57                   	push   edi
c0005b1c:	56                   	push   esi
c0005b1d:	53                   	push   ebx
c0005b1e:	83 ec 3c             	sub    esp,0x3c
c0005b21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b25:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b29:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b30:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b3a:	e8 2d c8 ff ff       	call   c000236c <validate>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	85 c0                	test   eax,eax
c0005b45:	0f 85 7a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b4b:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b53:	85 c0                	test   eax,eax
c0005b55:	0f 85 6a 04 00 00    	jne    c0005fc5 <f_lseek+0x4ab>
c0005b5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b62:	74 0c                	je     c0005b70 <f_lseek+0x56>
c0005b64:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b67:	85 c0                	test   eax,eax
c0005b69:	75 1f                	jne    c0005b8a <f_lseek+0x70>
c0005b6b:	e9 b5 01 00 00       	jmp    c0005d25 <f_lseek+0x20b>
c0005b70:	83 c9 ff             	or     ecx,0xffffffff
c0005b73:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	e8 e3 d3 ff ff       	call   c0002f60 <fill_last_frag>
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	74 e3                	je     c0005b64 <f_lseek+0x4a>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	e9 3b 04 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005b8a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b8f:	0f 85 ac 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b95:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b99:	0f 85 a2 00 00 00    	jne    c0005c41 <f_lseek+0x127>
c0005b9f:	8d 78 04             	lea    edi,[eax+0x4]
c0005ba2:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ba7:	be 02 00 00 00       	mov    esi,0x2
c0005bac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bb0:	85 ed                	test   ebp,ebp
c0005bb2:	74 73                	je     c0005c27 <f_lseek+0x10d>
c0005bb4:	89 e9                	mov    ecx,ebp
c0005bb6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bbd:	ff 04 24             	inc    DWORD PTR [esp]
c0005bc0:	89 ca                	mov    edx,ecx
c0005bc2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bc6:	89 d8                	mov    eax,ebx
c0005bc8:	e8 02 d4 ff ff       	call   c0002fcf <get_fat>
c0005bcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd1:	83 f8 01             	cmp    eax,0x1
c0005bd4:	77 11                	ja     c0005be7 <f_lseek+0xcd>
c0005bd6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bda:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005be2:	e9 de 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005be7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bea:	75 11                	jne    c0005bfd <f_lseek+0xe3>
c0005bec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bf0:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf8:	e9 c8 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005bfd:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c00:	89 c1                	mov    ecx,eax
c0005c02:	39 c2                	cmp    edx,eax
c0005c04:	74 b7                	je     c0005bbd <f_lseek+0xa3>
c0005c06:	83 c6 02             	add    esi,0x2
c0005c09:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c0d:	72 0b                	jb     c0005c1a <f_lseek+0x100>
c0005c0f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c12:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c15:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c17:	83 c7 08             	add    edi,0x8
c0005c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c1e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c21:	76 04                	jbe    c0005c27 <f_lseek+0x10d>
c0005c23:	89 c5                	mov    ebp,eax
c0005c25:	eb 8d                	jmp    c0005bb4 <f_lseek+0x9a>
c0005c27:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c2a:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c2e:	89 30                	mov    DWORD PTR [eax],esi
c0005c30:	0f 87 87 03 00 00    	ja     c0005fbd <f_lseek+0x4a3>
c0005c36:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c3c:	e9 84 03 00 00       	jmp    c0005fc5 <f_lseek+0x4ab>
c0005c41:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c53:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c5e:	73 0f                	jae    c0005c6f <f_lseek+0x155>
c0005c60:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c63:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c77:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c7a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c85:	0f 84 3a 03 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005c8b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c93:	83 c6 ff             	add    esi,0xffffffff
c0005c96:	89 d8                	mov    eax,ebx
c0005c98:	83 d7 ff             	adc    edi,0xffffffff
c0005c9b:	89 f2                	mov    edx,esi
c0005c9d:	89 f9                	mov    ecx,edi
c0005c9f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ca3:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ca6:	e8 78 c2 ff ff       	call   c0001f23 <clmt_clust>
c0005cab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005caf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cb2:	89 c2                	mov    edx,eax
c0005cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb8:	89 c8                	mov    eax,ecx
c0005cba:	e8 43 c2 ff ff       	call   c0001f02 <clst2sect>
c0005cbf:	89 d7                	mov    edi,edx
c0005cc1:	09 c7                	or     edi,eax
c0005cc3:	0f 84 0d ff ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005cc9:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ccd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cd3:	0f 84 ec 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005cd9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ce1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ce4:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce8:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cec:	4d                   	dec    ebp
c0005ced:	31 ff                	xor    edi,edi
c0005cef:	21 ee                	and    esi,ebp
c0005cf1:	01 c6                	add    esi,eax
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	11 d7                	adc    edi,edx
c0005cf8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cfb:	39 fa                	cmp    edx,edi
c0005cfd:	75 08                	jne    c0005d07 <f_lseek+0x1ed>
c0005cff:	39 f0                	cmp    eax,esi
c0005d01:	0f 84 be 02 00 00    	je     c0005fc5 <f_lseek+0x4ab>
c0005d07:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d0a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d0e:	0f 89 80 02 00 00    	jns    c0005f94 <f_lseek+0x47a>
c0005d14:	83 ec 0c             	sub    esp,0xc
c0005d17:	6a 01                	push   0x1
c0005d19:	52                   	push   edx
c0005d1a:	50                   	push   eax
c0005d1b:	55                   	push   ebp
c0005d1c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d20:	e9 5a 02 00 00       	jmp    c0005f7f <f_lseek+0x465>
c0005d25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d29:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d2c:	74 16                	je     c0005d44 <f_lseek+0x22a>
c0005d2e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d33:	76 0f                	jbe    c0005d44 <f_lseek+0x22a>
c0005d35:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d44:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d4a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d4d:	89 c7                	mov    edi,eax
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	73 0d                	jae    c0005d62 <f_lseek+0x248>
c0005d55:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d59:	75 07                	jne    c0005d62 <f_lseek+0x248>
c0005d5b:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d65:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d6c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d73:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d7a:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d7d:	75 09                	jne    c0005d88 <f_lseek+0x26e>
c0005d7f:	31 f6                	xor    esi,esi
c0005d81:	31 ff                	xor    edi,edi
c0005d83:	e9 af 01 00 00       	jmp    c0005f37 <f_lseek+0x41d>
c0005d88:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d8c:	89 d7                	mov    edi,edx
c0005d8e:	c1 e1 09             	shl    ecx,0x9
c0005d91:	09 c7                	or     edi,eax
c0005d93:	89 cd                	mov    ebp,ecx
c0005d95:	74 6d                	je     c0005e04 <f_lseek+0x2ea>
c0005d97:	83 c0 ff             	add    eax,0xffffffff
c0005d9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d9e:	83 d2 ff             	adc    edx,0xffffffff
c0005da1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005da4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da8:	83 c0 ff             	add    eax,0xffffffff
c0005dab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005daf:	83 d2 ff             	adc    edx,0xffffffff
c0005db2:	31 ff                	xor    edi,edi
c0005db4:	57                   	push   edi
c0005db5:	51                   	push   ecx
c0005db6:	52                   	push   edx
c0005db7:	50                   	push   eax
c0005db8:	e8 77 0d 02 00       	call   c0026b34 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc8:	57                   	push   edi
c0005dc9:	55                   	push   ebp
c0005dca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dd2:	e8 5d 0d 02 00       	call   c0026b34 <__udivdi3>
c0005dd7:	83 c4 10             	add    esp,0x10
c0005dda:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dde:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de2:	19 d1                	sbb    ecx,edx
c0005de4:	72 1e                	jb     c0005e04 <f_lseek+0x2ea>
c0005de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dea:	89 e9                	mov    ecx,ebp
c0005dec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005def:	f7 d9                	neg    ecx
c0005df1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005df4:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df8:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dfb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dfe:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e02:	eb 28                	jmp    c0005e2c <f_lseek+0x312>
c0005e04:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e07:	85 c0                	test   eax,eax
c0005e09:	75 1e                	jne    c0005e29 <f_lseek+0x30f>
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	89 d8                	mov    eax,ebx
c0005e0f:	e8 a9 d4 ff ff       	call   c00032bd <create_chain>
c0005e14:	83 f8 01             	cmp    eax,0x1
c0005e17:	0f 84 b9 fd ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005e1d:	83 f8 ff             	cmp    eax,0xffffffff
c0005e20:	0f 84 c6 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005e26:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e29:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e2c:	85 c0                	test   eax,eax
c0005e2e:	0f 84 4b ff ff ff    	je     c0005d7f <f_lseek+0x265>
c0005e34:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e40:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e43:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e47:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e4a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e4d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e51:	0f 83 9d 00 00 00    	jae    c0005ef4 <f_lseek+0x3da>
c0005e57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e5b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e5f:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e62:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e66:	01 f2                	add    edx,esi
c0005e68:	11 f9                	adc    ecx,edi
c0005e6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e72:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e75:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e78:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e7b:	f6 c1 02             	test   cl,0x2
c0005e7e:	74 35                	je     c0005eb5 <f_lseek+0x39b>
c0005e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e84:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e87:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e8a:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e8e:	73 16                	jae    c0005ea6 <f_lseek+0x38c>
c0005e90:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e98:	88 ca                	mov    dl,cl
c0005e9a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e9d:	83 ca 40             	or     edx,0x40
c0005ea0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ea3:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ea6:	89 c2                	mov    edx,eax
c0005ea8:	89 d8                	mov    eax,ebx
c0005eaa:	e8 0e d4 ff ff       	call   c00032bd <create_chain>
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	75 0b                	jne    c0005ebe <f_lseek+0x3a4>
c0005eb3:	eb 30                	jmp    c0005ee5 <f_lseek+0x3cb>
c0005eb5:	89 c2                	mov    edx,eax
c0005eb7:	89 d8                	mov    eax,ebx
c0005eb9:	e8 11 d1 ff ff       	call   c0002fcf <get_fat>
c0005ebe:	83 f8 ff             	cmp    eax,0xffffffff
c0005ec1:	0f 84 25 fd ff ff    	je     c0005bec <f_lseek+0xd2>
c0005ec7:	83 f8 01             	cmp    eax,0x1
c0005eca:	0f 86 06 fd ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ed4:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ed7:	0f 86 f9 fc ff ff    	jbe    c0005bd6 <f_lseek+0xbc>
c0005edd:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ee0:	e9 5b ff ff ff       	jmp    c0005e40 <f_lseek+0x326>
c0005ee5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ef4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ef7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005efb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005efe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f01:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f04:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f0a:	0f 84 6f fe ff ff    	je     c0005d7f <f_lseek+0x265>
c0005f10:	89 c2                	mov    edx,eax
c0005f12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f16:	e8 e7 bf ff ff       	call   c0001f02 <clst2sect>
c0005f1b:	89 d7                	mov    edi,edx
c0005f1d:	09 c7                	or     edi,eax
c0005f1f:	0f 84 b1 fc ff ff    	je     c0005bd6 <f_lseek+0xbc>
c0005f25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f30:	c1 ef 09             	shr    edi,0x9
c0005f33:	01 c6                	add    esi,eax
c0005f35:	11 d7                	adc    edi,edx
c0005f37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f3a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f3d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f40:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f43:	19 d1                	sbb    ecx,edx
c0005f45:	73 0a                	jae    c0005f51 <f_lseek+0x437>
c0005f47:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f4a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f4d:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f51:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f56:	74 6d                	je     c0005fc5 <f_lseek+0x4ab>
c0005f58:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f5b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f5e:	39 fa                	cmp    edx,edi
c0005f60:	75 04                	jne    c0005f66 <f_lseek+0x44c>
c0005f62:	39 f0                	cmp    eax,esi
c0005f64:	74 5f                	je     c0005fc5 <f_lseek+0x4ab>
c0005f66:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f69:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f6d:	79 25                	jns    c0005f94 <f_lseek+0x47a>
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	6a 01                	push   0x1
c0005f74:	52                   	push   edx
c0005f75:	50                   	push   eax
c0005f76:	55                   	push   ebp
c0005f77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f7b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7f:	50                   	push   eax
c0005f80:	e8 af bc ff ff       	call   c0001c34 <disk_write>
c0005f85:	83 c4 20             	add    esp,0x20
c0005f88:	85 c0                	test   eax,eax
c0005f8a:	0f 85 5c fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005f90:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	6a 01                	push   0x1
c0005f99:	57                   	push   edi
c0005f9a:	56                   	push   esi
c0005f9b:	55                   	push   ebp
c0005f9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fa0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fa4:	50                   	push   eax
c0005fa5:	e8 74 bc ff ff       	call   c0001c1e <disk_read>
c0005faa:	83 c4 20             	add    esp,0x20
c0005fad:	85 c0                	test   eax,eax
c0005faf:	0f 85 37 fc ff ff    	jne    c0005bec <f_lseek+0xd2>
c0005fb5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fbb:	eb 08                	jmp    c0005fc5 <f_lseek+0x4ab>
c0005fbd:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc9:	83 c4 3c             	add    esp,0x3c
c0005fcc:	5b                   	pop    ebx
c0005fcd:	5e                   	pop    esi
c0005fce:	5f                   	pop    edi
c0005fcf:	5d                   	pop    ebp
c0005fd0:	c3                   	ret    

c0005fd1 <f_opendir>:
c0005fd1:	56                   	push   esi
c0005fd2:	b8 09 00 00 00       	mov    eax,0x9
c0005fd7:	53                   	push   ebx
c0005fd8:	83 ec 24             	sub    esp,0x24
c0005fdb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fdf:	85 db                	test   ebx,ebx
c0005fe1:	0f 84 e6 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0005fe7:	31 c9                	xor    ecx,ecx
c0005fe9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fed:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ff1:	e8 03 c7 ff ff       	call   c00026f9 <mount_volume>
c0005ff6:	85 c0                	test   eax,eax
c0005ff8:	0f 85 c9 00 00 00    	jne    c00060c7 <f_opendir+0xf6>
c0005ffe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006002:	83 ec 0c             	sub    esp,0xc
c0006005:	89 03                	mov    DWORD PTR [ebx],eax
c0006007:	68 60 04 00 00       	push   0x460
c000600c:	e8 8b 24 00 00       	call   c000849c <ff_memalloc>
c0006011:	83 c4 10             	add    esp,0x10
c0006014:	89 c6                	mov    esi,eax
c0006016:	b8 11 00 00 00       	mov    eax,0x11
c000601b:	85 f6                	test   esi,esi
c000601d:	0f 84 aa 00 00 00    	je     c00060cd <f_opendir+0xfc>
c0006023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006027:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000602d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006030:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006033:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006037:	89 d8                	mov    eax,ebx
c0006039:	e8 31 ee ff ff       	call   c0004e6f <follow_path>
c000603e:	85 c0                	test   eax,eax
c0006040:	75 61                	jne    c00060a3 <f_opendir+0xd2>
c0006042:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006046:	78 46                	js     c000608e <f_opendir+0xbd>
c0006048:	b8 05 00 00 00       	mov    eax,0x5
c000604d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006051:	74 50                	je     c00060a3 <f_opendir+0xd2>
c0006053:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006057:	8a 01                	mov    al,BYTE PTR [ecx]
c0006059:	3c 04                	cmp    al,0x4
c000605b:	75 26                	jne    c0006083 <f_opendir+0xb2>
c000605d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006060:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006063:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006066:	30 d2                	xor    dl,dl
c0006068:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000606c:	09 c2                	or     edx,eax
c000606e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006071:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006074:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006077:	89 da                	mov    edx,ebx
c0006079:	8d 41 10             	lea    eax,[ecx+0x10]
c000607c:	e8 b4 ed ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006081:	eb 0b                	jmp    c000608e <f_opendir+0xbd>
c0006083:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006086:	e8 59 ed ff ff       	call   c0004de4 <ld_clust.isra.0>
c000608b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000608e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006092:	31 d2                	xor    edx,edx
c0006094:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006098:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000609c:	89 d8                	mov    eax,ebx
c000609e:	e8 22 d1 ff ff       	call   c00031c5 <dir_sdi>
c00060a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	56                   	push   esi
c00060ab:	e8 02 24 00 00       	call   c00084b2 <ff_memfree>
c00060b0:	83 c4 10             	add    esp,0x10
c00060b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060b7:	83 f8 04             	cmp    eax,0x4
c00060ba:	74 06                	je     c00060c2 <f_opendir+0xf1>
c00060bc:	85 c0                	test   eax,eax
c00060be:	74 0d                	je     c00060cd <f_opendir+0xfc>
c00060c0:	eb 05                	jmp    c00060c7 <f_opendir+0xf6>
c00060c2:	b8 05 00 00 00       	mov    eax,0x5
c00060c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060cd:	83 c4 24             	add    esp,0x24
c00060d0:	5b                   	pop    ebx
c00060d1:	5e                   	pop    esi
c00060d2:	c3                   	ret    

c00060d3 <f_closedir>:
c00060d3:	53                   	push   ebx
c00060d4:	83 ec 18             	sub    esp,0x18
c00060d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060db:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 86 c2 ff ff       	call   c000236c <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 06                	jne    c00060f0 <f_closedir+0x1d>
c00060ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060f0:	83 c4 18             	add    esp,0x18
c00060f3:	5b                   	pop    ebx
c00060f4:	c3                   	ret    

c00060f5 <f_readdir>:
c00060f5:	57                   	push   edi
c00060f6:	56                   	push   esi
c00060f7:	53                   	push   ebx
c00060f8:	83 ec 20             	sub    esp,0x20
c00060fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006107:	89 d8                	mov    eax,ebx
c0006109:	e8 5e c2 ff ff       	call   c000236c <validate>
c000610e:	85 c0                	test   eax,eax
c0006110:	75 77                	jne    c0006189 <f_readdir+0x94>
c0006112:	85 ff                	test   edi,edi
c0006114:	75 0b                	jne    c0006121 <f_readdir+0x2c>
c0006116:	31 d2                	xor    edx,edx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 a6 d0 ff ff       	call   c00031c5 <dir_sdi>
c000611f:	eb 68                	jmp    c0006189 <f_readdir+0x94>
c0006121:	83 ec 0c             	sub    esp,0xc
c0006124:	68 60 04 00 00       	push   0x460
c0006129:	e8 6e 23 00 00       	call   c000849c <ff_memalloc>
c000612e:	83 c4 10             	add    esp,0x10
c0006131:	89 c6                	mov    esi,eax
c0006133:	b8 11 00 00 00       	mov    eax,0x11
c0006138:	85 f6                	test   esi,esi
c000613a:	74 4d                	je     c0006189 <f_readdir+0x94>
c000613c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006140:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006146:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006149:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000614c:	31 d2                	xor    edx,edx
c000614e:	89 d8                	mov    eax,ebx
c0006150:	e8 80 d8 ff ff       	call   c00039d5 <dir_read>
c0006155:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000615a:	75 19                	jne    c0006175 <f_readdir+0x80>
c000615c:	89 fa                	mov    edx,edi
c000615e:	89 d8                	mov    eax,ebx
c0006160:	e8 7e ea ff ff       	call   c0004be3 <get_fileinfo>
c0006165:	31 d2                	xor    edx,edx
c0006167:	89 d8                	mov    eax,ebx
c0006169:	e8 af d5 ff ff       	call   c000371d <dir_next>
c000616e:	83 f8 04             	cmp    eax,0x4
c0006171:	75 02                	jne    c0006175 <f_readdir+0x80>
c0006173:	31 c0                	xor    eax,eax
c0006175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006179:	83 ec 0c             	sub    esp,0xc
c000617c:	56                   	push   esi
c000617d:	e8 30 23 00 00       	call   c00084b2 <ff_memfree>
c0006182:	83 c4 10             	add    esp,0x10
c0006185:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006189:	83 c4 20             	add    esp,0x20
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	c3                   	ret    

c0006190 <f_stat>:
c0006190:	57                   	push   edi
c0006191:	31 c9                	xor    ecx,ecx
c0006193:	56                   	push   esi
c0006194:	53                   	push   ebx
c0006195:	83 ec 50             	sub    esp,0x50
c0006198:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000619c:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061a4:	e8 50 c5 ff ff       	call   c00026f9 <mount_volume>
c00061a9:	89 c3                	mov    ebx,eax
c00061ab:	85 c0                	test   eax,eax
c00061ad:	75 67                	jne    c0006216 <f_stat+0x86>
c00061af:	83 ec 0c             	sub    esp,0xc
c00061b2:	bb 11 00 00 00       	mov    ebx,0x11
c00061b7:	68 60 04 00 00       	push   0x460
c00061bc:	e8 db 22 00 00       	call   c000849c <ff_memalloc>
c00061c1:	83 c4 10             	add    esp,0x10
c00061c4:	89 c6                	mov    esi,eax
c00061c6:	85 c0                	test   eax,eax
c00061c8:	74 4c                	je     c0006216 <f_stat+0x86>
c00061ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ce:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061d4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061d7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061de:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e2:	e8 88 ec ff ff       	call   c0004e6f <follow_path>
c00061e7:	89 c3                	mov    ebx,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	75 1d                	jne    c000620a <f_stat+0x7a>
c00061ed:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061f2:	78 11                	js     c0006205 <f_stat+0x75>
c00061f4:	85 ff                	test   edi,edi
c00061f6:	74 12                	je     c000620a <f_stat+0x7a>
c00061f8:	89 fa                	mov    edx,edi
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 e0 e9 ff ff       	call   c0004be3 <get_fileinfo>
c0006203:	eb 05                	jmp    c000620a <f_stat+0x7a>
c0006205:	bb 06 00 00 00       	mov    ebx,0x6
c000620a:	83 ec 0c             	sub    esp,0xc
c000620d:	56                   	push   esi
c000620e:	e8 9f 22 00 00       	call   c00084b2 <ff_memfree>
c0006213:	83 c4 10             	add    esp,0x10
c0006216:	83 c4 50             	add    esp,0x50
c0006219:	89 d8                	mov    eax,ebx
c000621b:	5b                   	pop    ebx
c000621c:	5e                   	pop    esi
c000621d:	5f                   	pop    edi
c000621e:	c3                   	ret    

c000621f <f_getfree>:
c000621f:	55                   	push   ebp
c0006220:	31 c9                	xor    ecx,ecx
c0006222:	57                   	push   edi
c0006223:	56                   	push   esi
c0006224:	53                   	push   ebx
c0006225:	83 ec 5c             	sub    esp,0x5c
c0006228:	8d 54 24 24          	lea    edx,[esp+0x24]
c000622c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006230:	e8 c4 c4 ff ff       	call   c00026f9 <mount_volume>
c0006235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006239:	85 c0                	test   eax,eax
c000623b:	0f 85 9d 01 00 00    	jne    c00063de <f_getfree+0x1bf>
c0006241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006245:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006249:	89 02                	mov    DWORD PTR [edx],eax
c000624b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000624e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006251:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006254:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006258:	39 f2                	cmp    edx,esi
c000625a:	77 0b                	ja     c0006267 <f_getfree+0x48>
c000625c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006260:	89 10                	mov    DWORD PTR [eax],edx
c0006262:	e9 77 01 00 00       	jmp    c00063de <f_getfree+0x1bf>
c0006267:	8a 10                	mov    dl,BYTE PTR [eax]
c0006269:	80 fa 01             	cmp    dl,0x1
c000626c:	75 3a                	jne    c00062a8 <f_getfree+0x89>
c000626e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006272:	be 02 00 00 00       	mov    esi,0x2
c0006277:	31 db                	xor    ebx,ebx
c0006279:	89 f2                	mov    edx,esi
c000627b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000627f:	e8 4b cd ff ff       	call   c0002fcf <get_fat>
c0006284:	83 f8 ff             	cmp    eax,0xffffffff
c0006287:	0f 84 28 01 00 00    	je     c00063b5 <f_getfree+0x196>
c000628d:	83 f8 01             	cmp    eax,0x1
c0006290:	0f 84 29 01 00 00    	je     c00063bf <f_getfree+0x1a0>
c0006296:	83 d3 00             	adc    ebx,0x0
c0006299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000629d:	46                   	inc    esi
c000629e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062a1:	77 d6                	ja     c0006279 <f_getfree+0x5a>
c00062a3:	e9 25 01 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c00062a8:	80 fa 04             	cmp    dl,0x4
c00062ab:	0f 85 88 00 00 00    	jne    c0006339 <f_getfree+0x11a>
c00062b1:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062b4:	31 ed                	xor    ebp,ebp
c00062b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c1:	31 db                	xor    ebx,ebx
c00062c3:	85 ed                	test   ebp,ebp
c00062c5:	75 3f                	jne    c0006306 <f_getfree+0xe7>
c00062c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062cf:	83 c0 01             	add    eax,0x1
c00062d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062d6:	83 d2 00             	adc    edx,0x0
c00062d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e9:	e8 59 c1 ff ff       	call   c0002447 <move_window>
c00062ee:	85 c0                	test   eax,eax
c00062f0:	0f 85 d3 00 00 00    	jne    c00063c9 <f_getfree+0x1aa>
c00062f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006306:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000630a:	8d 4e f8             	lea    ecx,[esi-0x8]
c000630d:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006311:	89 cf                	mov    edi,ecx
c0006313:	85 f6                	test   esi,esi
c0006315:	74 12                	je     c0006329 <f_getfree+0x10a>
c0006317:	88 c1                	mov    cl,al
c0006319:	83 e1 01             	and    ecx,0x1
c000631c:	80 f9 01             	cmp    cl,0x1
c000631f:	83 d3 00             	adc    ebx,0x0
c0006322:	d0 e8                	shr    al,1
c0006324:	4e                   	dec    esi
c0006325:	39 fe                	cmp    esi,edi
c0006327:	75 ea                	jne    c0006313 <f_getfree+0xf4>
c0006329:	45                   	inc    ebp
c000632a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006330:	85 f6                	test   esi,esi
c0006332:	75 8f                	jne    c00062c3 <f_getfree+0xa4>
c0006334:	e9 94 00 00 00       	jmp    c00063cd <f_getfree+0x1ae>
c0006339:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000633c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000633f:	31 f6                	xor    esi,esi
c0006341:	31 db                	xor    ebx,ebx
c0006343:	85 f6                	test   esi,esi
c0006345:	75 1b                	jne    c0006362 <f_getfree+0x143>
c0006347:	89 d7                	mov    edi,edx
c0006349:	89 cd                	mov    ebp,ecx
c000634b:	83 c7 01             	add    edi,0x1
c000634e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006352:	83 d5 00             	adc    ebp,0x0
c0006355:	e8 ed c0 ff ff       	call   c0002447 <move_window>
c000635a:	85 c0                	test   eax,eax
c000635c:	75 6b                	jne    c00063c9 <f_getfree+0x1aa>
c000635e:	89 fa                	mov    edx,edi
c0006360:	89 e9                	mov    ecx,ebp
c0006362:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006366:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000636a:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000636e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006371:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006375:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006379:	75 11                	jne    c000638c <f_getfree+0x16d>
c000637b:	e8 e9 b8 ff ff       	call   c0001c69 <ld_word>
c0006380:	66 83 f8 01          	cmp    ax,0x1
c0006384:	83 d3 00             	adc    ebx,0x0
c0006387:	83 c6 02             	add    esi,0x2
c000638a:	eb 13                	jmp    c000639f <f_getfree+0x180>
c000638c:	e8 e5 b8 ff ff       	call   c0001c76 <ld_dword>
c0006391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006396:	83 f8 01             	cmp    eax,0x1
c0006399:	83 d3 00             	adc    ebx,0x0
c000639c:	83 c6 04             	add    esi,0x4
c000639f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ad:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063b1:	75 90                	jne    c0006343 <f_getfree+0x124>
c00063b3:	eb 18                	jmp    c00063cd <f_getfree+0x1ae>
c00063b5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063bd:	eb 0e                	jmp    c00063cd <f_getfree+0x1ae>
c00063bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063c7:	eb 04                	jmp    c00063cd <f_getfree+0x1ae>
c00063c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063d1:	89 18                	mov    DWORD PTR [eax],ebx
c00063d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063d7:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063da:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e2:	83 c4 5c             	add    esp,0x5c
c00063e5:	5b                   	pop    ebx
c00063e6:	5e                   	pop    esi
c00063e7:	5f                   	pop    edi
c00063e8:	5d                   	pop    ebp
c00063e9:	c3                   	ret    

c00063ea <f_truncate>:
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 14             	sub    esp,0x14
c00063ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063f3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063f7:	89 d8                	mov    eax,ebx
c00063f9:	e8 6e bf ff ff       	call   c000236c <validate>
c00063fe:	89 c6                	mov    esi,eax
c0006400:	85 c0                	test   eax,eax
c0006402:	0f 85 d2 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006408:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000640c:	85 f6                	test   esi,esi
c000640e:	0f 85 c6 00 00 00    	jne    c00064da <f_truncate+0xf0>
c0006414:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006418:	0f 84 b7 00 00 00    	je     c00064d5 <f_truncate+0xeb>
c000641e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006421:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006424:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006427:	89 d1                	mov    ecx,edx
c0006429:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000642c:	0f 83 a8 00 00 00    	jae    c00064da <f_truncate+0xf0>
c0006432:	09 c2                	or     edx,eax
c0006434:	75 15                	jne    c000644b <f_truncate+0x61>
c0006436:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006439:	31 c9                	xor    ecx,ecx
c000643b:	89 d8                	mov    eax,ebx
c000643d:	e8 7a d0 ff ff       	call   c00034bc <remove_chain>
c0006442:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006449:	eb 35                	jmp    c0006480 <f_truncate+0x96>
c000644b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000644e:	89 d8                	mov    eax,ebx
c0006450:	e8 7a cb ff ff       	call   c0002fcf <get_fat>
c0006455:	89 c2                	mov    edx,eax
c0006457:	b8 01 00 00 00       	mov    eax,0x1
c000645c:	83 fa ff             	cmp    edx,0xffffffff
c000645f:	74 1f                	je     c0006480 <f_truncate+0x96>
c0006461:	b8 02 00 00 00       	mov    eax,0x2
c0006466:	83 fa 01             	cmp    edx,0x1
c0006469:	74 15                	je     c0006480 <f_truncate+0x96>
c000646b:	31 c0                	xor    eax,eax
c000646d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006471:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006474:	76 0a                	jbe    c0006480 <f_truncate+0x96>
c0006476:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006479:	89 d8                	mov    eax,ebx
c000647b:	e8 3c d0 ff ff       	call   c00034bc <remove_chain>
c0006480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006486:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006489:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000648c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000648f:	83 ca 40             	or     edx,0x40
c0006492:	85 c0                	test   eax,eax
c0006494:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006497:	75 35                	jne    c00064ce <f_truncate+0xe4>
c0006499:	84 d2                	test   dl,dl
c000649b:	79 3d                	jns    c00064da <f_truncate+0xf0>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	8d 43 50             	lea    eax,[ebx+0x50]
c00064a3:	6a 01                	push   0x1
c00064a5:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ab:	50                   	push   eax
c00064ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064b0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064b4:	50                   	push   eax
c00064b5:	e8 7a b7 ff ff       	call   c0001c34 <disk_write>
c00064ba:	83 c4 20             	add    esp,0x20
c00064bd:	85 c0                	test   eax,eax
c00064bf:	75 08                	jne    c00064c9 <f_truncate+0xdf>
c00064c1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064c5:	31 f6                	xor    esi,esi
c00064c7:	eb 11                	jmp    c00064da <f_truncate+0xf0>
c00064c9:	b8 01 00 00 00       	mov    eax,0x1
c00064ce:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	eb 05                	jmp    c00064da <f_truncate+0xf0>
c00064d5:	be 07 00 00 00       	mov    esi,0x7
c00064da:	89 f0                	mov    eax,esi
c00064dc:	83 c4 14             	add    esp,0x14
c00064df:	5b                   	pop    ebx
c00064e0:	5e                   	pop    esi
c00064e1:	c3                   	ret    

c00064e2 <f_unlink>:
c00064e2:	56                   	push   esi
c00064e3:	b9 02 00 00 00       	mov    ecx,0x2
c00064e8:	53                   	push   ebx
c00064e9:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064f3:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064fa:	e8 fa c1 ff ff       	call   c00026f9 <mount_volume>
c00064ff:	85 c0                	test   eax,eax
c0006501:	0f 85 55 01 00 00    	jne    c000665c <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	83 ec 0c             	sub    esp,0xc
c000650e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006512:	68 60 04 00 00       	push   0x460
c0006517:	e8 80 1f 00 00       	call   c000849c <ff_memalloc>
c000651c:	83 c4 10             	add    esp,0x10
c000651f:	89 c3                	mov    ebx,eax
c0006521:	b8 11 00 00 00       	mov    eax,0x11
c0006526:	85 db                	test   ebx,ebx
c0006528:	0f 84 2e 01 00 00    	je     c000665c <f_unlink+0x17a>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006538:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000653b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000653e:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006545:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006549:	e8 21 e9 ff ff       	call   c0004e6f <follow_path>
c000654e:	85 c0                	test   eax,eax
c0006550:	0f 85 f2 00 00 00    	jne    c0006648 <f_unlink+0x166>
c0006556:	b8 06 00 00 00       	mov    eax,0x6
c000655b:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006563:	0f 88 df 00 00 00    	js     c0006648 <f_unlink+0x166>
c0006569:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000656e:	74 0a                	je     c000657a <f_unlink+0x98>
c0006570:	b8 07 00 00 00       	mov    eax,0x7
c0006575:	e9 ce 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c000657a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006582:	8a 02                	mov    al,BYTE PTR [edx]
c0006584:	3c 04                	cmp    al,0x4
c0006586:	75 12                	jne    c000659a <f_unlink+0xb8>
c0006588:	8d 42 10             	lea    eax,[edx+0x10]
c000658b:	8d 54 24 20          	lea    edx,[esp+0x20]
c000658f:	e8 a1 e8 ff ff       	call   c0004e35 <init_alloc_info.isra.2>
c0006594:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006598:	eb 0e                	jmp    c00065a8 <f_unlink+0xc6>
c000659a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065a1:	e8 3e e8 ff ff       	call   c0004de4 <ld_clust.isra.0>
c00065a6:	89 c6                	mov    esi,eax
c00065a8:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ad:	75 12                	jne    c00065c1 <f_unlink+0xdf>
c00065af:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065b3:	e8 94 d6 ff ff       	call   c0003c4c <dir_remove>
c00065b8:	85 c0                	test   eax,eax
c00065ba:	74 6c                	je     c0006628 <f_unlink+0x146>
c00065bc:	e9 87 00 00 00       	jmp    c0006648 <f_unlink+0x166>
c00065c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065c5:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065cc:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065d3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d6:	75 21                	jne    c00065f9 <f_unlink+0x117>
c00065d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065e0:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065e7:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ee:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065f2:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f9:	31 d2                	xor    edx,edx
c00065fb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006602:	e8 be cb ff ff       	call   c00031c5 <dir_sdi>
c0006607:	85 c0                	test   eax,eax
c0006609:	75 3d                	jne    c0006648 <f_unlink+0x166>
c000660b:	31 d2                	xor    edx,edx
c000660d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006614:	e8 bc d3 ff ff       	call   c00039d5 <dir_read>
c0006619:	85 c0                	test   eax,eax
c000661b:	0f 84 4f ff ff ff    	je     c0006570 <f_unlink+0x8e>
c0006621:	83 f8 04             	cmp    eax,0x4
c0006624:	75 22                	jne    c0006648 <f_unlink+0x166>
c0006626:	eb 87                	jmp    c00065af <f_unlink+0xcd>
c0006628:	85 f6                	test   esi,esi
c000662a:	75 0b                	jne    c0006637 <f_unlink+0x155>
c000662c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006630:	e8 3d df ff ff       	call   c0004572 <sync_fs>
c0006635:	eb 11                	jmp    c0006648 <f_unlink+0x166>
c0006637:	31 c9                	xor    ecx,ecx
c0006639:	89 f2                	mov    edx,esi
c000663b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000663f:	e8 78 ce ff ff       	call   c00034bc <remove_chain>
c0006644:	85 c0                	test   eax,eax
c0006646:	74 e4                	je     c000662c <f_unlink+0x14a>
c0006648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000664c:	83 ec 0c             	sub    esp,0xc
c000664f:	53                   	push   ebx
c0006650:	e8 5d 1e 00 00       	call   c00084b2 <ff_memfree>
c0006655:	83 c4 10             	add    esp,0x10
c0006658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000665c:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006662:	5b                   	pop    ebx
c0006663:	5e                   	pop    esi
c0006664:	c3                   	ret    

c0006665 <f_mkdir>:
c0006665:	57                   	push   edi
c0006666:	b9 02 00 00 00       	mov    ecx,0x2
c000666b:	56                   	push   esi
c000666c:	53                   	push   ebx
c000666d:	83 c4 80             	add    esp,0xffffff80
c0006670:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006674:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000667b:	e8 79 c0 ff ff       	call   c00026f9 <mount_volume>
c0006680:	89 c3                	mov    ebx,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 85 fe 01 00 00    	jne    c0006888 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	bb 11 00 00 00       	mov    ebx,0x11
c0006693:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006697:	83 ec 0c             	sub    esp,0xc
c000669a:	68 60 04 00 00       	push   0x460
c000669f:	e8 f8 1d 00 00       	call   c000849c <ff_memalloc>
c00066a4:	83 c4 10             	add    esp,0x10
c00066a7:	89 c7                	mov    edi,eax
c00066a9:	85 c0                	test   eax,eax
c00066ab:	0f 84 d7 01 00 00    	je     c0006888 <f_mkdir+0x223>
c00066b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b5:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066bb:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066be:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066c1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066cc:	e8 9e e7 ff ff       	call   c0004e6f <follow_path>
c00066d1:	89 c3                	mov    ebx,eax
c00066d3:	85 c0                	test   eax,eax
c00066d5:	74 3e                	je     c0006715 <f_mkdir+0xb0>
c00066d7:	83 f8 04             	cmp    eax,0x4
c00066da:	75 3e                	jne    c000671a <f_mkdir+0xb5>
c00066dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e0:	31 d2                	xor    edx,edx
c00066e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066ea:	e8 ce cb ff ff       	call   c00032bd <create_chain>
c00066ef:	89 c6                	mov    esi,eax
c00066f1:	85 c0                	test   eax,eax
c00066f3:	74 0c                	je     c0006701 <f_mkdir+0x9c>
c00066f5:	bb 02 00 00 00       	mov    ebx,0x2
c00066fa:	83 f8 01             	cmp    eax,0x1
c00066fd:	74 07                	je     c0006706 <f_mkdir+0xa1>
c00066ff:	eb 2a                	jmp    c000672b <f_mkdir+0xc6>
c0006701:	bb 07 00 00 00       	mov    ebx,0x7
c0006706:	31 c9                	xor    ecx,ecx
c0006708:	89 f2                	mov    edx,esi
c000670a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000670e:	e8 a9 cd ff ff       	call   c00034bc <remove_chain>
c0006713:	eb 05                	jmp    c000671a <f_mkdir+0xb5>
c0006715:	bb 08 00 00 00       	mov    ebx,0x8
c000671a:	83 ec 0c             	sub    esp,0xc
c000671d:	57                   	push   edi
c000671e:	e8 8f 1d 00 00       	call   c00084b2 <ff_memfree>
c0006723:	83 c4 10             	add    esp,0x10
c0006726:	e9 5d 01 00 00       	jmp    c0006888 <f_mkdir+0x223>
c000672b:	bb 01 00 00 00       	mov    ebx,0x1
c0006730:	83 f8 ff             	cmp    eax,0xffffffff
c0006733:	74 d1                	je     c0006706 <f_mkdir+0xa1>
c0006735:	89 f2                	mov    edx,esi
c0006737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673b:	e8 c4 ce ff ff       	call   c0003604 <dir_clear>
c0006740:	89 c3                	mov    ebx,eax
c0006742:	85 c0                	test   eax,eax
c0006744:	75 c0                	jne    c0006706 <f_mkdir+0xa1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000674d:	74 69                	je     c00067b8 <f_mkdir+0x153>
c000674f:	b9 0b 00 00 00       	mov    ecx,0xb
c0006754:	83 c0 54             	add    eax,0x54
c0006757:	ba 20 00 00 00       	mov    edx,0x20
c000675c:	e8 9c b5 ff ff       	call   c0001cfd <mem_set>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	ba 00 00 21 50       	mov    edx,0x50210000
c000676a:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000676e:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006772:	83 c0 6a             	add    eax,0x6a
c0006775:	e8 65 b5 ff ff       	call   c0001cdf <st_dword>
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	89 f1                	mov    ecx,esi
c0006780:	8d 50 54             	lea    edx,[eax+0x54]
c0006783:	e8 85 e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	b9 20 00 00 00       	mov    ecx,0x20
c0006791:	8d 50 54             	lea    edx,[eax+0x54]
c0006794:	83 c0 74             	add    eax,0x74
c0006797:	e8 4c b5 ff ff       	call   c0001ce8 <mem_cpy>
c000679c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067a4:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a8:	8d 50 74             	lea    edx,[eax+0x74]
c00067ab:	e8 5d e6 ff ff       	call   c0004e0d <st_clust.isra.1>
c00067b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067bc:	e8 2f db ff ff       	call   c00042f0 <dir_register>
c00067c1:	89 c3                	mov    ebx,eax
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 85 3b ff ff ff    	jne    c0006706 <f_mkdir+0xa1>
c00067cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067d2:	75 74                	jne    c0006848 <f_mkdir+0x1e3>
c00067d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067dc:	83 c0 0c             	add    eax,0xc
c00067df:	e8 fb b4 ff ff       	call   c0001cdf <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	89 f2                	mov    edx,esi
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	83 c0 34             	add    eax,0x34
c00067f0:	e8 ea b4 ff ff       	call   c0001cdf <st_dword>
c00067f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006800:	c1 e2 09             	shl    edx,0x9
c0006803:	83 c0 38             	add    eax,0x38
c0006806:	e8 d4 b4 ff ff       	call   c0001cdf <st_dword>
c000680b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680f:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006813:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006816:	c1 e2 09             	shl    edx,0x9
c0006819:	83 c0 28             	add    eax,0x28
c000681c:	e8 be b4 ff ff       	call   c0001cdf <st_dword>
c0006821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006837:	e8 8b d3 ff ff       	call   c0003bc7 <store_xdir>
c000683c:	89 c3                	mov    ebx,eax
c000683e:	85 c0                	test   eax,eax
c0006840:	0f 85 d4 fe ff ff    	jne    c000671a <f_mkdir+0xb5>
c0006846:	eb 30                	jmp    c0006878 <f_mkdir+0x213>
c0006848:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000684c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006851:	83 c0 16             	add    eax,0x16
c0006854:	e8 86 b4 ff ff       	call   c0001cdf <st_dword>
c0006859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685d:	89 f1                	mov    ecx,esi
c000685f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006863:	e8 a5 e5 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006868:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000686c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000687c:	e8 f1 dc ff ff       	call   c0004572 <sync_fs>
c0006881:	89 c3                	mov    ebx,eax
c0006883:	e9 92 fe ff ff       	jmp    c000671a <f_mkdir+0xb5>
c0006888:	83 ec 80             	sub    esp,0xffffff80
c000688b:	89 d8                	mov    eax,ebx
c000688d:	5b                   	pop    ebx
c000688e:	5e                   	pop    esi
c000688f:	5f                   	pop    edi
c0006890:	c3                   	ret    

c0006891 <f_rename>:
c0006891:	55                   	push   ebp
c0006892:	57                   	push   edi
c0006893:	56                   	push   esi
c0006894:	53                   	push   ebx
c0006895:	81 ec fc 00 00 00    	sub    esp,0xfc
c000689b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068a2:	e8 a4 b9 ff ff       	call   c000224b <get_ldnumber>
c00068a7:	b9 02 00 00 00       	mov    ecx,0x2
c00068ac:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068b0:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068b7:	e8 3d be ff ff       	call   c00026f9 <mount_volume>
c00068bc:	85 c0                	test   eax,eax
c00068be:	0f 85 b5 02 00 00    	jne    c0006b79 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	83 ec 0c             	sub    esp,0xc
c00068cb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068cf:	68 60 04 00 00       	push   0x460
c00068d4:	e8 c3 1b 00 00       	call   c000849c <ff_memalloc>
c00068d9:	83 c4 10             	add    esp,0x10
c00068dc:	89 c3                	mov    ebx,eax
c00068de:	b8 11 00 00 00       	mov    eax,0x11
c00068e3:	85 db                	test   ebx,ebx
c00068e5:	0f 84 8e 02 00 00    	je     c0006b79 <f_rename+0x2e8>
c00068eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ef:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068fb:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006902:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006906:	e8 64 e5 ff ff       	call   c0004e6f <follow_path>
c000690b:	85 c0                	test   eax,eax
c000690d:	0f 85 52 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006913:	b8 06 00 00 00       	mov    eax,0x6
c0006918:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006920:	0f 85 3f 02 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000692d:	0f 85 05 01 00 00    	jne    c0006a38 <f_rename+0x1a7>
c0006933:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006936:	b9 40 00 00 00       	mov    ecx,0x40
c000693b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693f:	e8 a4 b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006944:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006949:	8d 54 24 58          	lea    edx,[esp+0x58]
c000694d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006954:	e8 8f b3 ff ff       	call   c0001ce8 <mem_cpy>
c0006959:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 03 e5 ff ff       	call   c0004e6f <follow_path>
c000696c:	85 c0                	test   eax,eax
c000696e:	75 29                	jne    c0006999 <f_rename+0x108>
c0006970:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006974:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000697b:	74 0a                	je     c0006987 <f_rename+0xf6>
c000697d:	b8 08 00 00 00       	mov    eax,0x8
c0006982:	e9 de 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006987:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000698e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006995:	75 e6                	jne    c000697d <f_rename+0xec>
c0006997:	eb 09                	jmp    c00069a2 <f_rename+0x111>
c0006999:	83 f8 04             	cmp    eax,0x4
c000699c:	0f 85 c3 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 42 d9 ff ff       	call   c00042f0 <dir_register>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	0f 85 af 01 00 00    	jne    c0006b65 <f_rename+0x2d4>
c00069b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ba:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069bd:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069c0:	89 c5                	mov    ebp,eax
c00069c2:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069c5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c9:	8d 46 24             	lea    eax,[esi+0x24]
c00069cc:	e8 98 b2 ff ff       	call   c0001c69 <ld_word>
c00069d1:	b9 40 00 00 00       	mov    ecx,0x40
c00069d6:	89 c7                	mov    edi,eax
c00069d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069dc:	89 f0                	mov    eax,esi
c00069de:	e8 05 b3 ff ff       	call   c0001ce8 <mem_cpy>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	89 e9                	mov    ecx,ebp
c00069e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ec:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ef:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069fa:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069fd:	0f b7 d7             	movzx  edx,di
c0006a00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a03:	83 c0 24             	add    eax,0x24
c0006a06:	e8 d0 b2 ff ff       	call   c0001cdb <st_word>
c0006a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a12:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a15:	a8 10                	test   al,0x10
c0006a17:	75 06                	jne    c0006a1f <f_rename+0x18e>
c0006a19:	83 c8 20             	or     eax,0x20
c0006a1c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a1f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a26:	e8 9c d1 ff ff       	call   c0003bc7 <store_xdir>
c0006a2b:	85 c0                	test   eax,eax
c0006a2d:	0f 84 1c 01 00 00    	je     c0006b4f <f_rename+0x2be>
c0006a33:	e9 2d 01 00 00       	jmp    c0006b65 <f_rename+0x2d4>
c0006a38:	b9 20 00 00 00       	mov    ecx,0x20
c0006a3d:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a44:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a48:	e8 9b b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a4d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a52:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a56:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a5d:	e8 86 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006a62:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a69:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a70:	e8 fa e3 ff ff       	call   c0004e6f <follow_path>
c0006a75:	85 c0                	test   eax,eax
c0006a77:	75 27                	jne    c0006aa0 <f_rename+0x20f>
c0006a79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a7d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a84:	0f 85 f3 fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a8a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a91:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a98:	0f 85 df fe ff ff    	jne    c000697d <f_rename+0xec>
c0006a9e:	eb 09                	jmp    c0006aa9 <f_rename+0x218>
c0006aa0:	83 f8 04             	cmp    eax,0x4
c0006aa3:	0f 85 bc 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006aa9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab0:	e8 3b d8 ff ff       	call   c00042f0 <dir_register>
c0006ab5:	85 c0                	test   eax,eax
c0006ab7:	0f 85 a8 00 00 00    	jne    c0006b65 <f_rename+0x2d4>
c0006abd:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ac4:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac9:	8d 46 0d             	lea    eax,[esi+0xd]
c0006acc:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ad0:	e8 13 b2 ff ff       	call   c0001ce8 <mem_cpy>
c0006ad5:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad9:	a8 10                	test   al,0x10
c0006adb:	75 03                	jne    c0006ae0 <f_rename+0x24f>
c0006add:	83 c8 20             	or     eax,0x20
c0006ae0:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aeb:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aef:	74 5e                	je     c0006b4f <f_rename+0x2be>
c0006af1:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af8:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006afc:	74 51                	je     c0006b4f <f_rename+0x2be>
c0006afe:	89 f2                	mov    edx,esi
c0006b00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b04:	8a 07                	mov    al,BYTE PTR [edi]
c0006b06:	e8 d9 e2 ff ff       	call   c0004de4 <ld_clust.isra.0>
c0006b0b:	89 c2                	mov    edx,eax
c0006b0d:	89 f8                	mov    eax,edi
c0006b0f:	e8 ee b3 ff ff       	call   c0001f02 <clst2sect>
c0006b14:	89 c6                	mov    esi,eax
c0006b16:	89 d1                	mov    ecx,edx
c0006b18:	b8 02 00 00 00       	mov    eax,0x2
c0006b1d:	09 f2                	or     edx,esi
c0006b1f:	74 44                	je     c0006b65 <f_rename+0x2d4>
c0006b21:	89 f2                	mov    edx,esi
c0006b23:	89 f8                	mov    eax,edi
c0006b25:	e8 1d b9 ff ff       	call   c0002447 <move_window>
c0006b2a:	85 c0                	test   eax,eax
c0006b2c:	75 37                	jne    c0006b65 <f_rename+0x2d4>
c0006b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b32:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b36:	75 17                	jne    c0006b4f <f_rename+0x2be>
c0006b38:	8d 50 74             	lea    edx,[eax+0x74]
c0006b3b:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b42:	e8 c6 e2 ff ff       	call   c0004e0d <st_clust.isra.1>
c0006b47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b4f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b53:	e8 f4 d0 ff ff       	call   c0003c4c <dir_remove>
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	75 09                	jne    c0006b65 <f_rename+0x2d4>
c0006b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b60:	e8 0d da ff ff       	call   c0004572 <sync_fs>
c0006b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b69:	83 ec 0c             	sub    esp,0xc
c0006b6c:	53                   	push   ebx
c0006b6d:	e8 40 19 00 00       	call   c00084b2 <ff_memfree>
c0006b72:	83 c4 10             	add    esp,0x10
c0006b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b79:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b7f:	5b                   	pop    ebx
c0006b80:	5e                   	pop    esi
c0006b81:	5f                   	pop    edi
c0006b82:	5d                   	pop    ebp
c0006b83:	c3                   	ret    

c0006b84 <f_chmod>:
c0006b84:	57                   	push   edi
c0006b85:	b9 02 00 00 00       	mov    ecx,0x2
c0006b8a:	56                   	push   esi
c0006b8b:	53                   	push   ebx
c0006b8c:	83 ec 60             	sub    esp,0x60
c0006b8f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b93:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b97:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b9b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b9f:	e8 55 bb ff ff       	call   c00026f9 <mount_volume>
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	0f 85 af 00 00 00    	jne    c0006c5b <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	83 ec 0c             	sub    esp,0xc
c0006bb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bb7:	68 60 04 00 00       	push   0x460
c0006bbc:	e8 db 18 00 00       	call   c000849c <ff_memalloc>
c0006bc1:	83 c4 10             	add    esp,0x10
c0006bc4:	89 c6                	mov    esi,eax
c0006bc6:	b8 11 00 00 00       	mov    eax,0x11
c0006bcb:	85 f6                	test   esi,esi
c0006bcd:	0f 84 88 00 00 00    	je     c0006c5b <f_chmod+0xd7>
c0006bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006be0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006be3:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006be7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006beb:	e8 7f e2 ff ff       	call   c0004e6f <follow_path>
c0006bf0:	85 c0                	test   eax,eax
c0006bf2:	75 53                	jne    c0006c47 <f_chmod+0xc3>
c0006bf4:	b8 06 00 00 00       	mov    eax,0x6
c0006bf9:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bfe:	75 47                	jne    c0006c47 <f_chmod+0xc3>
c0006c00:	89 f9                	mov    ecx,edi
c0006c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c06:	83 e1 27             	and    ecx,0x27
c0006c09:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c0c:	75 1d                	jne    c0006c2b <f_chmod+0xa7>
c0006c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c11:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c14:	21 cb                	and    ebx,ecx
c0006c16:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c19:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c20:	e8 a2 cf ff ff       	call   c0003bc7 <store_xdir>
c0006c25:	85 c0                	test   eax,eax
c0006c27:	75 1e                	jne    c0006c47 <f_chmod+0xc3>
c0006c29:	eb 13                	jmp    c0006c3e <f_chmod+0xba>
c0006c2b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c2f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c32:	21 cb                	and    ebx,ecx
c0006c34:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c37:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	e8 2b d9 ff ff       	call   c0004572 <sync_fs>
c0006c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c4b:	83 ec 0c             	sub    esp,0xc
c0006c4e:	56                   	push   esi
c0006c4f:	e8 5e 18 00 00       	call   c00084b2 <ff_memfree>
c0006c54:	83 c4 10             	add    esp,0x10
c0006c57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c5b:	83 c4 60             	add    esp,0x60
c0006c5e:	5b                   	pop    ebx
c0006c5f:	5e                   	pop    esi
c0006c60:	5f                   	pop    edi
c0006c61:	c3                   	ret    

c0006c62 <f_utime>:
c0006c62:	56                   	push   esi
c0006c63:	b9 02 00 00 00       	mov    ecx,0x2
c0006c68:	53                   	push   ebx
c0006c69:	83 ec 64             	sub    esp,0x64
c0006c6c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c78:	e8 7c ba ff ff       	call   c00026f9 <mount_volume>
c0006c7d:	85 c0                	test   eax,eax
c0006c7f:	0f 85 b5 00 00 00    	jne    c0006d3a <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	83 ec 0c             	sub    esp,0xc
c0006c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c90:	68 60 04 00 00       	push   0x460
c0006c95:	e8 02 18 00 00       	call   c000849c <ff_memalloc>
c0006c9a:	83 c4 10             	add    esp,0x10
c0006c9d:	89 c3                	mov    ebx,eax
c0006c9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ca4:	85 db                	test   ebx,ebx
c0006ca6:	0f 84 8e 00 00 00    	je     c0006d3a <f_utime+0xd8>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cb6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cc4:	e8 a6 e1 ff ff       	call   c0004e6f <follow_path>
c0006cc9:	85 c0                	test   eax,eax
c0006ccb:	75 59                	jne    c0006d26 <f_utime+0xc4>
c0006ccd:	b8 06 00 00 00       	mov    eax,0x6
c0006cd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cd7:	75 4d                	jne    c0006d26 <f_utime+0xc4>
c0006cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdd:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ce1:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ce5:	c1 e2 10             	shl    edx,0x10
c0006ce8:	09 ca                	or     edx,ecx
c0006cea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ced:	75 1a                	jne    c0006d09 <f_utime+0xa7>
c0006cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cf2:	83 c0 0c             	add    eax,0xc
c0006cf5:	e8 e5 af ff ff       	call   c0001cdf <st_dword>
c0006cfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cfe:	e8 c4 ce ff ff       	call   c0003bc7 <store_xdir>
c0006d03:	85 c0                	test   eax,eax
c0006d05:	75 1f                	jne    c0006d26 <f_utime+0xc4>
c0006d07:	eb 14                	jmp    c0006d1d <f_utime+0xbb>
c0006d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d0d:	83 c0 16             	add    eax,0x16
c0006d10:	e8 ca af ff ff       	call   c0001cdf <st_dword>
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d21:	e8 4c d8 ff ff       	call   c0004572 <sync_fs>
c0006d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d2a:	83 ec 0c             	sub    esp,0xc
c0006d2d:	53                   	push   ebx
c0006d2e:	e8 7f 17 00 00       	call   c00084b2 <ff_memfree>
c0006d33:	83 c4 10             	add    esp,0x10
c0006d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d3a:	83 c4 64             	add    esp,0x64
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	c3                   	ret    

c0006d40 <f_getlabel>:
c0006d40:	55                   	push   ebp
c0006d41:	31 c9                	xor    ecx,ecx
c0006d43:	57                   	push   edi
c0006d44:	56                   	push   esi
c0006d45:	53                   	push   ebx
c0006d46:	83 ec 6c             	sub    esp,0x6c
c0006d49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d4d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d54:	e8 a0 b9 ff ff       	call   c00026f9 <mount_volume>
c0006d59:	89 c6                	mov    esi,eax
c0006d5b:	85 c0                	test   eax,eax
c0006d5d:	0f 85 c1 01 00 00    	jne    c0006f24 <f_getlabel+0x1e4>
c0006d63:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d6b:	0f 84 5f 01 00 00    	je     c0006ed0 <f_getlabel+0x190>
c0006d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d75:	31 d2                	xor    edx,edx
c0006d77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d87:	e8 39 c4 ff ff       	call   c00031c5 <dir_sdi>
c0006d8c:	85 c0                	test   eax,eax
c0006d8e:	0f 85 2d 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006d94:	ba 01 00 00 00       	mov    edx,0x1
c0006d99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d9d:	e8 33 cc ff ff       	call   c00039d5 <dir_read>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	0f 85 17 01 00 00    	jne    c0006ec1 <f_getlabel+0x181>
c0006daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006db1:	74 09                	je     c0006dbc <f_getlabel+0x7c>
c0006db3:	31 db                	xor    ebx,ebx
c0006db5:	31 c9                	xor    ecx,ecx
c0006db7:	e9 c8 00 00 00       	jmp    c0006e84 <f_getlabel+0x144>
c0006dbc:	31 ed                	xor    ebp,ebp
c0006dbe:	31 db                	xor    ebx,ebx
c0006dc0:	31 ff                	xor    edi,edi
c0006dc2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dc6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dca:	39 fa                	cmp    edx,edi
c0006dcc:	76 4b                	jbe    c0006e19 <f_getlabel+0xd9>
c0006dce:	47                   	inc    edi
c0006dcf:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dd2:	01 d0                	add    eax,edx
c0006dd4:	e8 90 ae ff ff       	call   c0001c69 <ld_word>
c0006dd9:	66 85 ed             	test   bp,bp
c0006ddc:	75 0d                	jne    c0006deb <f_getlabel+0xab>
c0006dde:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006de4:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de9:	76 28                	jbe    c0006e13 <f_getlabel+0xd3>
c0006deb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006df2:	89 e9                	mov    ecx,ebp
c0006df4:	01 da                	add    edx,ebx
c0006df6:	c1 e1 10             	shl    ecx,0x10
c0006df9:	0f b7 c0             	movzx  eax,ax
c0006dfc:	09 c8                	or     eax,ecx
c0006dfe:	b9 04 00 00 00       	mov    ecx,0x4
c0006e03:	e8 01 b0 ff ff       	call   c0001e09 <put_utf>
c0006e08:	84 c0                	test   al,al
c0006e0a:	74 0b                	je     c0006e17 <f_getlabel+0xd7>
c0006e0c:	0f b6 c0             	movzx  eax,al
c0006e0f:	01 c3                	add    ebx,eax
c0006e11:	31 c0                	xor    eax,eax
c0006e13:	89 c5                	mov    ebp,eax
c0006e15:	eb ab                	jmp    c0006dc2 <f_getlabel+0x82>
c0006e17:	31 db                	xor    ebx,ebx
c0006e19:	66 85 ed             	test   bp,bp
c0006e1c:	74 02                	je     c0006e20 <f_getlabel+0xe0>
c0006e1e:	31 db                	xor    ebx,ebx
c0006e20:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e27:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e2b:	e9 a0 00 00 00       	jmp    c0006ed0 <f_getlabel+0x190>
c0006e30:	83 ff 0b             	cmp    edi,0xb
c0006e33:	74 11                	je     c0006e46 <f_getlabel+0x106>
c0006e35:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e3e:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e41:	c1 e0 08             	shl    eax,0x8
c0006e44:	09 c2                	or     edx,eax
c0006e46:	0f b7 d2             	movzx  edx,dx
c0006e49:	50                   	push   eax
c0006e4a:	50                   	push   eax
c0006e4b:	68 b5 01 00 00       	push   0x1b5
c0006e50:	52                   	push   edx
c0006e51:	e8 03 17 00 00       	call   c0008559 <ff_oem2uni>
c0006e56:	83 c4 10             	add    esp,0x10
c0006e59:	66 85 c0             	test   ax,ax
c0006e5c:	74 46                	je     c0006ea4 <f_getlabel+0x164>
c0006e5e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e65:	0f b7 c0             	movzx  eax,ax
c0006e68:	01 da                	add    edx,ebx
c0006e6a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e6f:	e8 95 af ff ff       	call   c0001e09 <put_utf>
c0006e74:	84 c0                	test   al,al
c0006e76:	74 2c                	je     c0006ea4 <f_getlabel+0x164>
c0006e78:	0f b6 c0             	movzx  eax,al
c0006e7b:	01 c3                	add    ebx,eax
c0006e7d:	83 ff 0b             	cmp    edi,0xb
c0006e80:	74 24                	je     c0006ea6 <f_getlabel+0x166>
c0006e82:	89 f9                	mov    ecx,edi
c0006e84:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e88:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e8b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e90:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e99:	e8 9f ae ff ff       	call   c0001d3d <dbc_1st>
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	74 a4                	je     c0006e46 <f_getlabel+0x106>
c0006ea2:	eb 8c                	jmp    c0006e30 <f_getlabel+0xf0>
c0006ea4:	31 db                	xor    ebx,ebx
c0006ea6:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ead:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eb0:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eb7:	74 17                	je     c0006ed0 <f_getlabel+0x190>
c0006eb9:	4b                   	dec    ebx
c0006eba:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ebd:	74 ee                	je     c0006ead <f_getlabel+0x16d>
c0006ebf:	eb 0f                	jmp    c0006ed0 <f_getlabel+0x190>
c0006ec1:	83 f8 04             	cmp    eax,0x4
c0006ec4:	75 5c                	jne    c0006f22 <f_getlabel+0x1e2>
c0006ec6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ecd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ed0:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed8:	74 4a                	je     c0006f24 <f_getlabel+0x1e4>
c0006eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ede:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ee1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ee4:	e8 5e b5 ff ff       	call   c0002447 <move_window>
c0006ee9:	89 c6                	mov    esi,eax
c0006eeb:	85 c0                	test   eax,eax
c0006eed:	75 35                	jne    c0006f24 <f_getlabel+0x1e4>
c0006eef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ef3:	b8 43 00 00 00       	mov    eax,0x43
c0006ef8:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006efa:	80 f9 03             	cmp    cl,0x3
c0006efd:	74 0f                	je     c0006f0e <f_getlabel+0x1ce>
c0006eff:	31 c0                	xor    eax,eax
c0006f01:	80 f9 04             	cmp    cl,0x4
c0006f04:	0f 94 c0             	sete   al
c0006f07:	48                   	dec    eax
c0006f08:	83 e0 c3             	and    eax,0xffffffc3
c0006f0b:	83 c0 64             	add    eax,0x64
c0006f0e:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f12:	e8 5f ad ff ff       	call   c0001c76 <ld_dword>
c0006f17:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f1e:	89 07                	mov    DWORD PTR [edi],eax
c0006f20:	eb 02                	jmp    c0006f24 <f_getlabel+0x1e4>
c0006f22:	89 c6                	mov    esi,eax
c0006f24:	83 c4 6c             	add    esp,0x6c
c0006f27:	89 f0                	mov    eax,esi
c0006f29:	5b                   	pop    ebx
c0006f2a:	5e                   	pop    esi
c0006f2b:	5f                   	pop    edi
c0006f2c:	5d                   	pop    ebp
c0006f2d:	c3                   	ret    

c0006f2e <f_setlabel>:
c0006f2e:	56                   	push   esi
c0006f2f:	b9 02 00 00 00       	mov    ecx,0x2
c0006f34:	53                   	push   ebx
c0006f35:	83 ec 74             	sub    esp,0x74
c0006f38:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f3c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f43:	e8 b1 b7 ff ff       	call   c00026f9 <mount_volume>
c0006f48:	89 c6                	mov    esi,eax
c0006f4a:	85 c0                	test   eax,eax
c0006f4c:	0f 85 41 02 00 00    	jne    c0007193 <f_setlabel+0x265>
c0006f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f59:	0f 85 8e 00 00 00    	jne    c0006fed <f_setlabel+0xbf>
c0006f5f:	b9 16 00 00 00       	mov    ecx,0x16
c0006f64:	31 d2                	xor    edx,edx
c0006f66:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f6a:	31 db                	xor    ebx,ebx
c0006f6c:	e8 8c ad ff ff       	call   c0001cfd <mem_set>
c0006f71:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f78:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f7b:	0f 86 0a 01 00 00    	jbe    c000708b <f_setlabel+0x15d>
c0006f81:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f88:	e8 b6 ad ff ff       	call   c0001d43 <tchar2uni>
c0006f8d:	89 c6                	mov    esi,eax
c0006f8f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f94:	76 2a                	jbe    c0006fc0 <f_setlabel+0x92>
c0006f96:	83 f8 ff             	cmp    eax,0xffffffff
c0006f99:	74 05                	je     c0006fa0 <f_setlabel+0x72>
c0006f9b:	83 fb 09             	cmp    ebx,0x9
c0006f9e:	76 0a                	jbe    c0006faa <f_setlabel+0x7c>
c0006fa0:	be 06 00 00 00       	mov    esi,0x6
c0006fa5:	e9 e9 01 00 00       	jmp    c0007193 <f_setlabel+0x265>
c0006faa:	89 c2                	mov    edx,eax
c0006fac:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb3:	c1 ea 10             	shr    edx,0x10
c0006fb6:	01 c8                	add    eax,ecx
c0006fb8:	43                   	inc    ebx
c0006fb9:	e8 1d ad ff ff       	call   c0001cdb <st_word>
c0006fbe:	eb 04                	jmp    c0006fc4 <f_setlabel+0x96>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	74 dc                	je     c0006fa0 <f_setlabel+0x72>
c0006fc4:	89 f2                	mov    edx,esi
c0006fc6:	b8 37 95 02 c0       	mov    eax,0xc0029537
c0006fcb:	e8 5b ad ff ff       	call   c0001d2b <chk_chr>
c0006fd0:	85 c0                	test   eax,eax
c0006fd2:	75 cc                	jne    c0006fa0 <f_setlabel+0x72>
c0006fd4:	83 fb 0a             	cmp    ebx,0xa
c0006fd7:	77 c7                	ja     c0006fa0 <f_setlabel+0x72>
c0006fd9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fdc:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fe0:	0f b7 d6             	movzx  edx,si
c0006fe3:	01 c8                	add    eax,ecx
c0006fe5:	43                   	inc    ebx
c0006fe6:	e8 f0 ac ff ff       	call   c0001cdb <st_word>
c0006feb:	eb 84                	jmp    c0006f71 <f_setlabel+0x43>
c0006fed:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ff2:	ba 20 00 00 00       	mov    edx,0x20
c0006ff7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ffb:	31 db                	xor    ebx,ebx
c0006ffd:	e8 fb ac ff ff       	call   c0001cfd <mem_set>
c0007002:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007009:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000700c:	76 60                	jbe    c000706e <f_setlabel+0x140>
c000700e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007015:	e8 29 ad ff ff       	call   c0001d43 <tchar2uni>
c000701a:	3d ff ff 00 00       	cmp    eax,0xffff
c000701f:	0f 87 7b ff ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	50                   	push   eax
c0007029:	e8 97 15 00 00       	call   c00085c5 <ff_wtoupper>
c000702e:	5a                   	pop    edx
c000702f:	59                   	pop    ecx
c0007030:	68 b5 01 00 00       	push   0x1b5
c0007035:	50                   	push   eax
c0007036:	e8 8e 14 00 00       	call   c00084c9 <ff_uni2oem>
c000703b:	83 c4 10             	add    esp,0x10
c000703e:	89 c6                	mov    esi,eax
c0007040:	66 85 c0             	test   ax,ax
c0007043:	0f 84 57 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007049:	0f b7 d0             	movzx  edx,ax
c000704c:	b8 30 95 02 c0       	mov    eax,0xc0029530
c0007051:	e8 d5 ac ff ff       	call   c0001d2b <chk_chr>
c0007056:	85 c0                	test   eax,eax
c0007058:	0f 85 42 ff ff ff    	jne    c0006fa0 <f_setlabel+0x72>
c000705e:	66 81 fe ff 00       	cmp    si,0xff
c0007063:	0f 87 14 01 00 00    	ja     c000717d <f_setlabel+0x24f>
c0007069:	e9 fa 00 00 00       	jmp    c0007168 <f_setlabel+0x23a>
c000706e:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007073:	0f 84 27 ff ff ff    	je     c0006fa0 <f_setlabel+0x72>
c0007079:	85 db                	test   ebx,ebx
c000707b:	74 0e                	je     c000708b <f_setlabel+0x15d>
c000707d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007080:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007085:	75 04                	jne    c000708b <f_setlabel+0x15d>
c0007087:	89 c3                	mov    ebx,eax
c0007089:	eb ee                	jmp    c0007079 <f_setlabel+0x14b>
c000708b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000708f:	31 d2                	xor    edx,edx
c0007091:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007095:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000709d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070a1:	e8 1f c1 ff ff       	call   c00031c5 <dir_sdi>
c00070a6:	89 c6                	mov    esi,eax
c00070a8:	85 c0                	test   eax,eax
c00070aa:	0f 85 e3 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c00070b0:	ba 01 00 00 00       	mov    edx,0x1
c00070b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b9:	e8 17 c9 ff ff       	call   c00039d5 <dir_read>
c00070be:	85 c0                	test   eax,eax
c00070c0:	75 21                	jne    c00070e3 <f_setlabel+0x1b5>
c00070c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070c6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ca:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070cd:	74 5d                	je     c000712c <f_setlabel+0x1fe>
c00070cf:	85 db                	test   ebx,ebx
c00070d1:	74 0b                	je     c00070de <f_setlabel+0x1b0>
c00070d3:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d8:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070dc:	eb 70                	jmp    c000714e <f_setlabel+0x220>
c00070de:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070e1:	eb 70                	jmp    c0007153 <f_setlabel+0x225>
c00070e3:	83 f8 04             	cmp    eax,0x4
c00070e6:	75 7c                	jne    c0007164 <f_setlabel+0x236>
c00070e8:	85 db                	test   ebx,ebx
c00070ea:	0f 84 a3 00 00 00    	je     c0007193 <f_setlabel+0x265>
c00070f0:	ba 01 00 00 00       	mov    edx,0x1
c00070f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f9:	e8 51 ca ff ff       	call   c0003b4f <dir_alloc>
c00070fe:	89 c6                	mov    esi,eax
c0007100:	85 c0                	test   eax,eax
c0007102:	0f 85 8b 00 00 00    	jne    c0007193 <f_setlabel+0x265>
c0007108:	31 d2                	xor    edx,edx
c000710a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710e:	b9 20 00 00 00       	mov    ecx,0x20
c0007113:	e8 e5 ab ff ff       	call   c0001cfd <mem_set>
c0007118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000711f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007123:	75 18                	jne    c000713d <f_setlabel+0x20f>
c0007125:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000712f:	b9 16 00 00 00       	mov    ecx,0x16
c0007134:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007138:	83 c0 02             	add    eax,0x2
c000713b:	eb 9b                	jmp    c00070d8 <f_setlabel+0x1aa>
c000713d:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007141:	b9 0b 00 00 00       	mov    ecx,0xb
c0007146:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000714a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000714e:	e8 95 ab ff ff       	call   c0001ce8 <mem_cpy>
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000715b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715f:	e8 0e d4 ff ff       	call   c0004572 <sync_fs>
c0007164:	89 c6                	mov    esi,eax
c0007166:	eb 2b                	jmp    c0007193 <f_setlabel+0x265>
c0007168:	83 fb 0a             	cmp    ebx,0xa
c000716b:	0f 87 2f fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007171:	89 f0                	mov    eax,esi
c0007173:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007177:	43                   	inc    ebx
c0007178:	e9 85 fe ff ff       	jmp    c0007002 <f_setlabel+0xd4>
c000717d:	83 fb 09             	cmp    ebx,0x9
c0007180:	0f 87 1a fe ff ff    	ja     c0006fa0 <f_setlabel+0x72>
c0007186:	89 f0                	mov    eax,esi
c0007188:	66 c1 e8 08          	shr    ax,0x8
c000718c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007190:	43                   	inc    ebx
c0007191:	eb de                	jmp    c0007171 <f_setlabel+0x243>
c0007193:	89 f0                	mov    eax,esi
c0007195:	83 c4 74             	add    esp,0x74
c0007198:	5b                   	pop    ebx
c0007199:	5e                   	pop    esi
c000719a:	c3                   	ret    

c000719b <f_forward>:
c000719b:	55                   	push   ebp
c000719c:	57                   	push   edi
c000719d:	56                   	push   esi
c000719e:	53                   	push   ebx
c000719f:	83 ec 2c             	sub    esp,0x2c
c00071a2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071b0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071b4:	89 d8                	mov    eax,ebx
c00071b6:	e8 b1 b1 ff ff       	call   c000236c <validate>
c00071bb:	89 c5                	mov    ebp,eax
c00071bd:	85 c0                	test   eax,eax
c00071bf:	0f 85 aa 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c9:	85 ed                	test   ebp,ebp
c00071cb:	0f 85 9e 01 00 00    	jne    c000736f <f_forward+0x1d4>
c00071d1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071d5:	0f 84 8f 01 00 00    	je     c000736a <f_forward+0x1cf>
c00071db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071e1:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071e4:	bf 00 00 00 00       	mov    edi,0x0
c00071e9:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071ec:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071f0:	89 d1                	mov    ecx,edx
c00071f2:	19 f9                	sbb    ecx,edi
c00071f4:	0f 83 cf 00 00 00    	jae    c00072c9 <f_forward+0x12e>
c00071fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071fe:	e9 c6 00 00 00       	jmp    c00072c9 <f_forward+0x12e>
c0007203:	50                   	push   eax
c0007204:	50                   	push   eax
c0007205:	6a 00                	push   0x0
c0007207:	6a 00                	push   0x0
c0007209:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000720d:	83 c4 10             	add    esp,0x10
c0007210:	85 c0                	test   eax,eax
c0007212:	0f 84 57 01 00 00    	je     c000736f <f_forward+0x1d4>
c0007218:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000721b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007222:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007226:	89 d7                	mov    edi,edx
c0007228:	8d 4e ff             	lea    ecx,[esi-0x1]
c000722b:	89 c6                	mov    esi,eax
c000722d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007231:	21 ce                	and    esi,ecx
c0007233:	89 c1                	mov    ecx,eax
c0007235:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000723b:	0f 84 98 00 00 00    	je     c00072d9 <f_forward+0x13e>
c0007241:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007245:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007248:	89 c8                	mov    eax,ecx
c000724a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000724e:	e8 af ac ff ff       	call   c0001f02 <clst2sect>
c0007253:	89 d7                	mov    edi,edx
c0007255:	09 c7                	or     edi,eax
c0007257:	0f 84 9e 00 00 00    	je     c00072fb <f_forward+0x160>
c000725d:	31 ff                	xor    edi,edi
c000725f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007262:	01 c6                	add    esi,eax
c0007264:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007268:	11 d7                	adc    edi,edx
c000726a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000726d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007274:	39 fa                	cmp    edx,edi
c0007276:	0f 85 a2 00 00 00    	jne    c000731e <f_forward+0x183>
c000727c:	39 f0                	cmp    eax,esi
c000727e:	0f 85 9a 00 00 00    	jne    c000731e <f_forward+0x183>
c0007284:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007287:	ba 00 02 00 00       	mov    edx,0x200
c000728c:	25 ff 01 00 00       	and    eax,0x1ff
c0007291:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007295:	29 c2                	sub    edx,eax
c0007297:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000729a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000729d:	39 d1                	cmp    ecx,edx
c000729f:	76 02                	jbe    c00072a3 <f_forward+0x108>
c00072a1:	89 d1                	mov    ecx,edx
c00072a3:	8d 73 50             	lea    esi,[ebx+0x50]
c00072a6:	52                   	push   edx
c00072a7:	01 c6                	add    esi,eax
c00072a9:	52                   	push   edx
c00072aa:	51                   	push   ecx
c00072ab:	56                   	push   esi
c00072ac:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072b0:	83 c4 10             	add    esp,0x10
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 44                	je     c00072fb <f_forward+0x160>
c00072b7:	31 ff                	xor    edi,edi
c00072b9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072bc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072bf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072c3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072c7:	01 07                	add    DWORD PTR [edi],eax
c00072c9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ce:	0f 85 2f ff ff ff    	jne    c0007203 <f_forward+0x68>
c00072d4:	e9 96 00 00 00       	jmp    c000736f <f_forward+0x1d4>
c00072d9:	85 f6                	test   esi,esi
c00072db:	0f 85 60 ff ff ff    	jne    c0007241 <f_forward+0xa6>
c00072e1:	89 d7                	mov    edi,edx
c00072e3:	09 c7                	or     edi,eax
c00072e5:	75 05                	jne    c00072ec <f_forward+0x151>
c00072e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072ea:	eb 0a                	jmp    c00072f6 <f_forward+0x15b>
c00072ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ef:	89 d8                	mov    eax,ebx
c00072f1:	e8 d9 bc ff ff       	call   c0002fcf <get_fat>
c00072f6:	83 f8 01             	cmp    eax,0x1
c00072f9:	77 0b                	ja     c0007306 <f_forward+0x16b>
c00072fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072ff:	bd 02 00 00 00       	mov    ebp,0x2
c0007304:	eb 69                	jmp    c000736f <f_forward+0x1d4>
c0007306:	83 f8 ff             	cmp    eax,0xffffffff
c0007309:	75 0b                	jne    c0007316 <f_forward+0x17b>
c000730b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000730f:	bd 01 00 00 00       	mov    ebp,0x1
c0007314:	eb 59                	jmp    c000736f <f_forward+0x1d4>
c0007316:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007319:	e9 23 ff ff ff       	jmp    c0007241 <f_forward+0xa6>
c000731e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007322:	79 20                	jns    c0007344 <f_forward+0x1a9>
c0007324:	83 ec 0c             	sub    esp,0xc
c0007327:	6a 01                	push   0x1
c0007329:	52                   	push   edx
c000732a:	50                   	push   eax
c000732b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000732f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007333:	50                   	push   eax
c0007334:	e8 fb a8 ff ff       	call   c0001c34 <disk_write>
c0007339:	83 c4 20             	add    esp,0x20
c000733c:	85 c0                	test   eax,eax
c000733e:	75 cb                	jne    c000730b <f_forward+0x170>
c0007340:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	6a 01                	push   0x1
c0007349:	57                   	push   edi
c000734a:	56                   	push   esi
c000734b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007353:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007357:	50                   	push   eax
c0007358:	e8 c1 a8 ff ff       	call   c0001c1e <disk_read>
c000735d:	83 c4 20             	add    esp,0x20
c0007360:	85 c0                	test   eax,eax
c0007362:	0f 84 1c ff ff ff    	je     c0007284 <f_forward+0xe9>
c0007368:	eb a1                	jmp    c000730b <f_forward+0x170>
c000736a:	bd 07 00 00 00       	mov    ebp,0x7
c000736f:	83 c4 2c             	add    esp,0x2c
c0007372:	89 e8                	mov    eax,ebp
c0007374:	5b                   	pop    ebx
c0007375:	5e                   	pop    esi
c0007376:	5f                   	pop    edi
c0007377:	5d                   	pop    ebp
c0007378:	c3                   	ret    

c0007379 <f_mkfs>:
c0007379:	55                   	push   ebp
c000737a:	57                   	push   edi
c000737b:	56                   	push   esi
c000737c:	53                   	push   ebx
c000737d:	bb 0b 00 00 00       	mov    ebx,0xb
c0007382:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007388:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000738f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007396:	e8 b0 ae ff ff       	call   c000224b <get_ldnumber>
c000739b:	85 c0                	test   eax,eax
c000739d:	0f 88 ec 10 00 00    	js     c000848f <f_mkfs+0x1116>
c00073a3:	8b 14 85 a0 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a60]
c00073aa:	85 d2                	test   edx,edx
c00073ac:	74 03                	je     c00073b1 <f_mkfs+0x38>
c00073ae:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073b1:	85 f6                	test   esi,esi
c00073b3:	75 05                	jne    c00073ba <f_mkfs+0x41>
c00073b5:	be 20 95 02 c0       	mov    esi,0xc0029520
c00073ba:	83 ec 0c             	sub    esp,0xc
c00073bd:	0f b6 c0             	movzx  eax,al
c00073c0:	bb 03 00 00 00       	mov    ebx,0x3
c00073c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073cd:	e8 49 a8 ff ff       	call   c0001c1b <disk_initialize>
c00073d2:	83 c4 10             	add    esp,0x10
c00073d5:	a8 01                	test   al,0x1
c00073d7:	0f 85 b2 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073dd:	bb 0a 00 00 00       	mov    ebx,0xa
c00073e2:	a8 04                	test   al,0x4
c00073e4:	0f 85 a5 10 00 00    	jne    c000848f <f_mkfs+0x1116>
c00073ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ed:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073f1:	85 c0                	test   eax,eax
c00073f3:	75 20                	jne    c0007415 <f_mkfs+0x9c>
c00073f5:	51                   	push   ecx
c00073f6:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073fa:	50                   	push   eax
c00073fb:	6a 03                	push   0x3
c00073fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007401:	e8 44 a8 ff ff       	call   c0001c4a <disk_ioctl>
c0007406:	83 c4 10             	add    esp,0x10
c0007409:	85 c0                	test   eax,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0x9c>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007419:	8d 42 ff             	lea    eax,[edx-0x1]
c000741c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007421:	77 04                	ja     c0007427 <f_mkfs+0xae>
c0007423:	85 c2                	test   edx,eax
c0007425:	74 08                	je     c000742f <f_mkfs+0xb6>
c0007427:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000742f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007432:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007436:	48                   	dec    eax
c0007437:	3c 01                	cmp    al,0x1
c0007439:	76 05                	jbe    c0007440 <f_mkfs+0xc7>
c000743b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007440:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007447:	48                   	dec    eax
c0007448:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xdd>
c000744f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007454:	74 08                	je     c000745e <f_mkfs+0xe5>
c0007456:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000745e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007461:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007467:	77 07                	ja     c0007470 <f_mkfs+0xf7>
c0007469:	8d 43 ff             	lea    eax,[ebx-0x1]
c000746c:	85 d8                	test   eax,ebx
c000746e:	74 02                	je     c0007472 <f_mkfs+0xf9>
c0007470:	31 db                	xor    ebx,ebx
c0007472:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000747d:	77 0a                	ja     c0007489 <f_mkfs+0x110>
c000747f:	bb 11 00 00 00       	mov    ebx,0x11
c0007484:	e9 06 10 00 00       	jmp    c000848f <f_mkfs+0x1116>
c0007489:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007490:	8b 36                	mov    esi,DWORD PTR [esi]
c0007492:	85 ed                	test   ebp,ebp
c0007494:	75 1e                	jne    c00074b4 <f_mkfs+0x13b>
c0007496:	83 ec 0c             	sub    esp,0xc
c0007499:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074a0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074a5:	50                   	push   eax
c00074a6:	e8 f1 0f 00 00       	call   c000849c <ff_memalloc>
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	89 c5                	mov    ebp,eax
c00074b0:	85 c0                	test   eax,eax
c00074b2:	74 cb                	je     c000747f <f_mkfs+0x106>
c00074b4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074bc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074c4:	52                   	push   edx
c00074c5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c9:	50                   	push   eax
c00074ca:	6a 01                	push   0x1
c00074cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d0:	e8 75 a7 ff ff       	call   c0001c4a <disk_ioctl>
c00074d5:	83 c4 10             	add    esp,0x10
c00074d8:	85 c0                	test   eax,eax
c00074da:	0f 85 4a 0f 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074ea:	83 e1 0f             	and    ecx,0xf
c00074ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074f5:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f9:	83 e6 08             	and    esi,0x8
c00074fc:	75 56                	jne    c0007554 <f_mkfs+0x1db>
c00074fe:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007502:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007506:	83 ff 00             	cmp    edi,0x0
c0007509:	76 20                	jbe    c000752b <f_mkfs+0x1b2>
c000750b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007510:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007518:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000751e:	83 d7 ff             	adc    edi,0xffffffff
c0007521:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007525:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007529:	eb 21                	jmp    c000754c <f_mkfs+0x1d3>
c000752b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007530:	39 f2                	cmp    edx,esi
c0007532:	19 f8                	sbb    eax,edi
c0007534:	73 1e                	jae    c0007554 <f_mkfs+0x1db>
c0007536:	83 c6 c1             	add    esi,0xffffffc1
c0007539:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007541:	83 d7 ff             	adc    edi,0xffffffff
c0007544:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007548:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000754c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007554:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007558:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000755c:	89 04 24             	mov    DWORD PTR [esp],eax
c000755f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007563:	31 c0                	xor    eax,eax
c0007565:	ba 7f 00 00 00       	mov    edx,0x7f
c000756a:	89 c7                	mov    edi,eax
c000756c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000756f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007573:	0f 83 c5 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007579:	89 df                	mov    edi,ebx
c000757b:	c1 ef 09             	shr    edi,0x9
c000757e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007582:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007589:	c1 ef 09             	shr    edi,0x9
c000758c:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007591:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007595:	74 29                	je     c00075c0 <f_mkfs+0x247>
c0007597:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000759d:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075a2:	0f 97 c2             	seta   dl
c00075a5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ac:	0f 92 c0             	setb   al
c00075af:	08 c2                	or     dl,al
c00075b1:	75 5b                	jne    c000760e <f_mkfs+0x295>
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	83 e0 07             	and    eax,0x7
c00075ba:	3c 04                	cmp    al,0x4
c00075bc:	74 50                	je     c000760e <f_mkfs+0x295>
c00075be:	eb 1b                	jmp    c00075db <f_mkfs+0x262>
c00075c0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075c5:	0f 87 73 0a 00 00    	ja     c000803e <f_mkfs+0xcc5>
c00075cb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075d1:	76 08                	jbe    c00075db <f_mkfs+0x262>
c00075d3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075df:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075e3:	83 e0 01             	and    eax,0x1
c00075e6:	80 e1 02             	and    cl,0x2
c00075e9:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ed:	74 0d                	je     c00075fc <f_mkfs+0x283>
c00075ef:	84 c0                	test   al,al
c00075f1:	0f 84 53 09 00 00    	je     c0007f4a <f_mkfs+0xbd1>
c00075f7:	e9 12 08 00 00       	jmp    c0007e0e <f_mkfs+0xa95>
c00075fc:	bb 13 00 00 00       	mov    ebx,0x13
c0007601:	84 c0                	test   al,al
c0007603:	0f 85 05 08 00 00    	jne    c0007e0e <f_mkfs+0xa95>
c0007609:	e9 39 0e 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c000760e:	31 c0                	xor    eax,eax
c0007610:	ba ff 0f 00 00       	mov    edx,0xfff
c0007615:	89 c7                	mov    edi,eax
c0007617:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000761a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000761e:	0f 83 1a 0a 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007624:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000762a:	77 39                	ja     c0007665 <f_mkfs+0x2ec>
c000762c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007631:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007639:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000763c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007640:	73 08                	jae    c000764a <f_mkfs+0x2d1>
c0007642:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000764a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000764f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007652:	b8 00 00 00 00       	mov    eax,0x0
c0007657:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765b:	73 08                	jae    c0007665 <f_mkfs+0x2ec>
c000765d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000766d:	83 c0 20             	add    eax,0x20
c0007670:	83 d2 00             	adc    edx,0x0
c0007673:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007677:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000767b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000767f:	31 d2                	xor    edx,edx
c0007681:	31 ff                	xor    edi,edi
c0007683:	52                   	push   edx
c0007684:	89 fb                	mov    ebx,edi
c0007686:	50                   	push   eax
c0007687:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000768f:	e8 a0 f4 01 00       	call   c0026b34 <__udivdi3>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	c1 e0 02             	shl    eax,0x2
c000769a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000769e:	05 07 02 00 00       	add    eax,0x207
c00076a3:	89 f1                	mov    ecx,esi
c00076a5:	c1 e8 09             	shr    eax,0x9
c00076a8:	83 c1 ff             	add    ecx,0xffffffff
c00076ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076af:	83 d3 ff             	adc    ebx,0xffffffff
c00076b2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076b6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076ba:	31 d2                	xor    edx,edx
c00076bc:	01 c8                	add    eax,ecx
c00076be:	11 da                	adc    edx,ebx
c00076c0:	89 c1                	mov    ecx,eax
c00076c2:	f7 de                	neg    esi
c00076c4:	89 d0                	mov    eax,edx
c00076c6:	83 d7 00             	adc    edi,0x0
c00076c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076cd:	f7 df                	neg    edi
c00076cf:	21 f1                	and    ecx,esi
c00076d1:	21 f8                	and    eax,edi
c00076d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076e3:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ea:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ee:	0f ac d0 01          	shrd   eax,edx,0x1
c00076f2:	89 df                	mov    edi,ebx
c00076f4:	d1 ea                	shr    edx,1
c00076f6:	39 c1                	cmp    ecx,eax
c00076f8:	19 d7                	sbb    edi,edx
c00076fa:	0f 83 3e 09 00 00    	jae    c000803e <f_mkfs+0xcc5>
c0007700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007704:	31 d2                	xor    edx,edx
c0007706:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000770a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007712:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007715:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007719:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000771d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007725:	83 f8 0f             	cmp    eax,0xf
c0007728:	0f 86 10 09 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c000772e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007736:	0f 87 02 09 00 00    	ja     c000803e <f_mkfs+0xcc5>
c000773c:	31 d2                	xor    edx,edx
c000773e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007742:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000774a:	83 c0 07             	add    eax,0x7
c000774d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007755:	c1 e8 03             	shr    eax,0x3
c0007758:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000775f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	c1 e0 09             	shl    eax,0x9
c000776a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000776e:	48                   	dec    eax
c000776f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007773:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007777:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000777b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000777f:	31 d2                	xor    edx,edx
c0007781:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007785:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000778c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007790:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007795:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007799:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077a1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077a5:	31 ff                	xor    edi,edi
c00077a7:	31 f6                	xor    esi,esi
c00077a9:	31 db                	xor    ebx,ebx
c00077ab:	85 ff                	test   edi,edi
c00077ad:	74 05                	je     c00077b4 <f_mkfs+0x43b>
c00077af:	4f                   	dec    edi
c00077b0:	74 44                	je     c00077f6 <f_mkfs+0x47d>
c00077b2:	eb 4f                	jmp    c0007803 <f_mkfs+0x48a>
c00077b4:	83 ec 0c             	sub    esp,0xc
c00077b7:	0f b7 c3             	movzx  eax,bx
c00077ba:	50                   	push   eax
c00077bb:	e8 05 0e 00 00       	call   c00085c5 <ff_wtoupper>
c00077c0:	83 c4 10             	add    esp,0x10
c00077c3:	89 c1                	mov    ecx,eax
c00077c5:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c8:	66 39 c3             	cmp    bx,ax
c00077cb:	75 3e                	jne    c000780b <f_mkfs+0x492>
c00077cd:	be 01 00 00 00       	mov    esi,0x1
c00077d2:	89 df                	mov    edi,ebx
c00077d4:	66 01 f7             	add    di,si
c00077d7:	75 07                	jne    c00077e0 <f_mkfs+0x467>
c00077d9:	83 fe 7f             	cmp    esi,0x7f
c00077dc:	77 31                	ja     c000780f <f_mkfs+0x496>
c00077de:	eb 16                	jmp    c00077f6 <f_mkfs+0x47d>
c00077e0:	83 ec 0c             	sub    esp,0xc
c00077e3:	0f b7 ff             	movzx  edi,di
c00077e6:	57                   	push   edi
c00077e7:	e8 d9 0d 00 00       	call   c00085c5 <ff_wtoupper>
c00077ec:	83 c4 10             	add    esp,0x10
c00077ef:	39 c7                	cmp    edi,eax
c00077f1:	75 e6                	jne    c00077d9 <f_mkfs+0x460>
c00077f3:	46                   	inc    esi
c00077f4:	eb dc                	jmp    c00077d2 <f_mkfs+0x459>
c00077f6:	31 c0                	xor    eax,eax
c00077f8:	89 d9                	mov    ecx,ebx
c00077fa:	4e                   	dec    esi
c00077fb:	0f 95 c0             	setne  al
c00077fe:	43                   	inc    ebx
c00077ff:	89 c7                	mov    edi,eax
c0007801:	eb 14                	jmp    c0007817 <f_mkfs+0x49e>
c0007803:	89 f1                	mov    ecx,esi
c0007805:	01 f3                	add    ebx,esi
c0007807:	31 ff                	xor    edi,edi
c0007809:	eb 0c                	jmp    c0007817 <f_mkfs+0x49e>
c000780b:	89 d3                	mov    ebx,edx
c000780d:	eb 08                	jmp    c0007817 <f_mkfs+0x49e>
c000780f:	bf 02 00 00 00       	mov    edi,0x2
c0007814:	83 c9 ff             	or     ecx,0xffffffff
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000781e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007822:	0f b6 c1             	movzx  eax,cl
c0007825:	e8 3a a9 ff ff       	call   c0002164 <xsum32>
c000782a:	66 c1 e9 08          	shr    cx,0x8
c000782e:	89 c2                	mov    edx,eax
c0007830:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007833:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007837:	0f b7 c1             	movzx  eax,cx
c000783a:	e8 25 a9 ff ff       	call   c0002164 <xsum32>
c000783f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007844:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007848:	66 85 db             	test   bx,bx
c000784b:	74 1f                	je     c000786c <f_mkfs+0x4f3>
c000784d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007850:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007857:	83 c0 02             	add    eax,0x2
c000785a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007860:	39 c2                	cmp    edx,eax
c0007862:	74 08                	je     c000786c <f_mkfs+0x4f3>
c0007864:	89 04 24             	mov    DWORD PTR [esp],eax
c0007867:	e9 3f ff ff ff       	jmp    c00077ab <f_mkfs+0x432>
c000786c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	05 01 02 00 00       	add    eax,0x201
c0007877:	c1 e8 09             	shr    eax,0x9
c000787a:	50                   	push   eax
c000787b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000787f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007883:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007887:	55                   	push   ebp
c0007888:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000788c:	e8 a3 a3 ff ff       	call   c0001c34 <disk_write>
c0007891:	83 c4 20             	add    esp,0x20
c0007894:	85 c0                	test   eax,eax
c0007896:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007899:	0f 85 8b 0b 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000789f:	89 d0                	mov    eax,edx
c00078a1:	31 d2                	xor    edx,edx
c00078a3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078a7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ab:	66 85 db             	test   bx,bx
c00078ae:	74 04                	je     c00078b4 <f_mkfs+0x53b>
c00078b0:	31 c0                	xor    eax,eax
c00078b2:	eb b0                	jmp    c0007864 <f_mkfs+0x4eb>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078bc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078c0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078d3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078d7:	c1 eb 09             	shr    ebx,0x9
c00078da:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ed:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078f1:	8d 70 01             	lea    esi,[eax+0x1]
c00078f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078fc:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007903:	31 d2                	xor    edx,edx
c0007905:	25 00 fe ff ff       	and    eax,0xfffffe00
c000790a:	89 04 24             	mov    DWORD PTR [esp],eax
c000790d:	89 c1                	mov    ecx,eax
c000790f:	89 e8                	mov    eax,ebp
c0007911:	e8 e7 a3 ff ff       	call   c0001cfd <mem_set>
c0007916:	31 c0                	xor    eax,eax
c0007918:	39 04 24             	cmp    DWORD PTR [esp],eax
c000791b:	76 10                	jbe    c000792d <f_mkfs+0x5b4>
c000791d:	83 fe 07             	cmp    esi,0x7
c0007920:	76 0b                	jbe    c000792d <f_mkfs+0x5b4>
c0007922:	40                   	inc    eax
c0007923:	83 ee 08             	sub    esi,0x8
c0007926:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000792b:	eb eb                	jmp    c0007918 <f_mkfs+0x59f>
c000792d:	b2 01                	mov    dl,0x1
c000792f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007933:	85 f6                	test   esi,esi
c0007935:	74 0c                	je     c0007943 <f_mkfs+0x5ca>
c0007937:	39 04 24             	cmp    DWORD PTR [esp],eax
c000793a:	76 07                	jbe    c0007943 <f_mkfs+0x5ca>
c000793c:	08 11                	or     BYTE PTR [ecx],dl
c000793e:	4e                   	dec    esi
c000793f:	d1 e2                	shl    edx,1
c0007941:	eb f0                	jmp    c0007933 <f_mkfs+0x5ba>
c0007943:	89 df                	mov    edi,ebx
c0007945:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007949:	76 04                	jbe    c000794f <f_mkfs+0x5d6>
c000794b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000794f:	83 ec 0c             	sub    esp,0xc
c0007952:	57                   	push   edi
c0007953:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007957:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000795b:	55                   	push   ebp
c000795c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007960:	e8 cf a2 ff ff       	call   c0001c34 <disk_write>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	85 c0                	test   eax,eax
c000796a:	0f 85 ba 0a 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007970:	31 d2                	xor    edx,edx
c0007972:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007976:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000797a:	29 fb                	sub    ebx,edi
c000797c:	0f 85 7a ff ff ff    	jne    c00078fc <f_mkfs+0x583>
c0007982:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000798e:	31 f6                	xor    esi,esi
c0007990:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007994:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007997:	31 d2                	xor    edx,edx
c0007999:	89 e8                	mov    eax,ebp
c000799b:	e8 5d a3 ff ff       	call   c0001cfd <mem_set>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	85 db                	test   ebx,ebx
c00079a4:	75 40                	jne    c00079e6 <f_mkfs+0x66d>
c00079a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ab:	89 e8                	mov    eax,ebp
c00079ad:	bb 02 00 00 00       	mov    ebx,0x2
c00079b2:	e8 28 a3 ff ff       	call   c0001cdf <st_dword>
c00079b7:	8d 45 04             	lea    eax,[ebp+0x4]
c00079ba:	83 ca ff             	or     edx,0xffffffff
c00079bd:	e8 1d a3 ff ff       	call   c0001cdf <st_dword>
c00079c2:	b9 08 00 00 00       	mov    ecx,0x8
c00079c7:	eb 1d                	jmp    c00079e6 <f_mkfs+0x66d>
c00079c9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079cc:	76 3b                	jbe    c0007a09 <f_mkfs+0x690>
c00079ce:	43                   	inc    ebx
c00079cf:	83 fe 01             	cmp    esi,0x1
c00079d2:	89 da                	mov    edx,ebx
c00079d4:	77 03                	ja     c00079d9 <f_mkfs+0x660>
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079dd:	4e                   	dec    esi
c00079de:	e8 fc a2 ff ff       	call   c0001cdf <st_dword>
c00079e3:	83 c1 04             	add    ecx,0x4
c00079e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ea:	85 f6                	test   esi,esi
c00079ec:	75 db                	jne    c00079c9 <f_mkfs+0x650>
c00079ee:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079f3:	77 14                	ja     c0007a09 <f_mkfs+0x690>
c00079f5:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f9:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a00:	85 f6                	test   esi,esi
c0007a02:	74 05                	je     c0007a09 <f_mkfs+0x690>
c0007a04:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a07:	77 dd                	ja     c00079e6 <f_mkfs+0x66d>
c0007a09:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a11:	39 cf                	cmp    edi,ecx
c0007a13:	76 02                	jbe    c0007a17 <f_mkfs+0x69e>
c0007a15:	89 cf                	mov    edi,ecx
c0007a17:	83 ec 0c             	sub    esp,0xc
c0007a1a:	57                   	push   edi
c0007a1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a23:	55                   	push   ebp
c0007a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a28:	e8 07 a2 ff ff       	call   c0001c34 <disk_write>
c0007a2d:	83 c4 20             	add    esp,0x20
c0007a30:	85 c0                	test   eax,eax
c0007a32:	0f 85 f2 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007a38:	31 d2                	xor    edx,edx
c0007a3a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a3e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a42:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a46:	0f 85 48 ff ff ff    	jne    c0007994 <f_mkfs+0x61b>
c0007a4c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a4f:	31 d2                	xor    edx,edx
c0007a51:	89 e8                	mov    eax,ebp
c0007a53:	31 ff                	xor    edi,edi
c0007a55:	e8 a3 a2 ff ff       	call   c0001cfd <mem_set>
c0007a5a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a5d:	ba 02 00 00 00       	mov    edx,0x2
c0007a62:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a66:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a6a:	e8 70 a2 ff ff       	call   c0001cdf <st_dword>
c0007a6f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a72:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a76:	e8 64 a2 ff ff       	call   c0001cdf <st_dword>
c0007a7b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a7e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a82:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a86:	e8 54 a2 ff ff       	call   c0001cdf <st_dword>
c0007a8b:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a92:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a96:	83 c2 02             	add    edx,0x2
c0007a99:	e8 41 a2 ff ff       	call   c0001cdf <st_dword>
c0007a9e:	8d 45 58             	lea    eax,[ebp+0x58]
c0007aa1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa9:	e8 31 a2 ff ff       	call   c0001cdf <st_dword>
c0007aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ab7:	89 c6                	mov    esi,eax
c0007ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007abd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ac4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007acb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007acf:	39 cb                	cmp    ebx,ecx
c0007ad1:	76 02                	jbe    c0007ad5 <f_mkfs+0x75c>
c0007ad3:	89 cb                	mov    ebx,ecx
c0007ad5:	83 ec 0c             	sub    esp,0xc
c0007ad8:	53                   	push   ebx
c0007ad9:	57                   	push   edi
c0007ada:	56                   	push   esi
c0007adb:	55                   	push   ebp
c0007adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae0:	e8 4f a1 ff ff       	call   c0001c34 <disk_write>
c0007ae5:	83 c4 20             	add    esp,0x20
c0007ae8:	85 c0                	test   eax,eax
c0007aea:	0f 85 3a 09 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007af0:	31 d2                	xor    edx,edx
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	89 e8                	mov    eax,ebp
c0007af9:	e8 ff a1 ff ff       	call   c0001cfd <mem_set>
c0007afe:	31 d2                	xor    edx,edx
c0007b00:	01 de                	add    esi,ebx
c0007b02:	11 d7                	adc    edi,edx
c0007b04:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b07:	75 bf                	jne    c0007ac8 <f_mkfs+0x74f>
c0007b09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b11:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b19:	b9 00 02 00 00       	mov    ecx,0x200
c0007b1e:	31 d2                	xor    edx,edx
c0007b20:	89 e8                	mov    eax,ebp
c0007b22:	e8 d6 a1 ff ff       	call   c0001cfd <mem_set>
c0007b27:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b2c:	ba 00 96 02 c0       	mov    edx,0xc0029600
c0007b31:	89 e8                	mov    eax,ebp
c0007b33:	e8 b0 a1 ff ff       	call   c0001ce8 <mem_cpy>
c0007b38:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b3f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b43:	e8 9a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b48:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b4c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b4f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b53:	e8 8a a1 ff ff       	call   c0001ce2 <st_qword>
c0007b58:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b5b:	ba 20 00 00 00       	mov    edx,0x20
c0007b60:	e8 7a a1 ff ff       	call   c0001cdf <st_dword>
c0007b65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b6d:	e8 6d a1 ff ff       	call   c0001cdf <st_dword>
c0007b72:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b7a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b7e:	e8 5c a1 ff ff       	call   c0001cdf <st_dword>
c0007b83:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b8a:	e8 50 a1 ff ff       	call   c0001cdf <st_dword>
c0007b8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b93:	8d 50 02             	lea    edx,[eax+0x2]
c0007b96:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b99:	e8 41 a1 ff ff       	call   c0001cdf <st_dword>
c0007b9e:	8d 45 64             	lea    eax,[ebp+0x64]
c0007ba1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ba6:	e8 34 a1 ff ff       	call   c0001cdf <st_dword>
c0007bab:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bae:	ba 00 01 00 00       	mov    edx,0x100
c0007bb3:	e8 23 a1 ff ff       	call   c0001cdb <st_word>
c0007bb8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bbc:	b8 0a 00 00 00       	mov    eax,0xa
c0007bc1:	48                   	dec    eax
c0007bc2:	74 05                	je     c0007bc9 <f_mkfs+0x850>
c0007bc4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bc7:	eb f8                	jmp    c0007bc1 <f_mkfs+0x848>
c0007bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bcd:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bd5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd9:	74 05                	je     c0007be0 <f_mkfs+0x867>
c0007bdb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bde:	eb f5                	jmp    c0007bd5 <f_mkfs+0x85c>
c0007be0:	8d 45 78             	lea    eax,[ebp+0x78]
c0007be3:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be8:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bee:	31 db                	xor    ebx,ebx
c0007bf0:	e8 e6 a0 ff ff       	call   c0001cdb <st_word>
c0007bf5:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bfb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c00:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c03:	e8 d3 a0 ff ff       	call   c0001cdb <st_word>
c0007c08:	31 c9                	xor    ecx,ecx
c0007c0a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c0d:	83 f8 01             	cmp    eax,0x1
c0007c10:	76 13                	jbe    c0007c25 <f_mkfs+0x8ac>
c0007c12:	83 f9 70             	cmp    ecx,0x70
c0007c15:	74 0e                	je     c0007c25 <f_mkfs+0x8ac>
c0007c17:	89 da                	mov    edx,ebx
c0007c19:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c1e:	e8 41 a5 ff ff       	call   c0002164 <xsum32>
c0007c23:	89 c3                	mov    ebx,eax
c0007c25:	41                   	inc    ecx
c0007c26:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c2c:	75 dc                	jne    c0007c0a <f_mkfs+0x891>
c0007c2e:	89 f0                	mov    eax,esi
c0007c30:	89 fa                	mov    edx,edi
c0007c32:	83 c0 01             	add    eax,0x1
c0007c35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c39:	83 d2 00             	adc    edx,0x0
c0007c3c:	83 ec 0c             	sub    esp,0xc
c0007c3f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c43:	6a 01                	push   0x1
c0007c45:	57                   	push   edi
c0007c46:	56                   	push   esi
c0007c47:	55                   	push   ebp
c0007c48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c4c:	e8 e3 9f ff ff       	call   c0001c34 <disk_write>
c0007c51:	83 c4 20             	add    esp,0x20
c0007c54:	85 c0                	test   eax,eax
c0007c56:	0f 85 ce 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007c5c:	31 d2                	xor    edx,edx
c0007c5e:	b9 00 02 00 00       	mov    ecx,0x200
c0007c63:	89 e8                	mov    eax,ebp
c0007c65:	e8 93 a0 ff ff       	call   c0001cfd <mem_set>
c0007c6a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c72:	e8 64 a0 ff ff       	call   c0001cdb <st_word>
c0007c77:	89 f0                	mov    eax,esi
c0007c79:	89 fa                	mov    edx,edi
c0007c7b:	83 c0 09             	add    eax,0x9
c0007c7e:	83 d2 00             	adc    edx,0x0
c0007c81:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c88:	31 c9                	xor    ecx,ecx
c0007c8a:	41                   	inc    ecx
c0007c8b:	89 da                	mov    edx,ebx
c0007c8d:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c92:	e8 cd a4 ff ff       	call   c0002164 <xsum32>
c0007c97:	89 c3                	mov    ebx,eax
c0007c99:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c9f:	75 e9                	jne    c0007c8a <f_mkfs+0x911>
c0007ca1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ca5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca9:	83 c0 01             	add    eax,0x1
c0007cac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cb0:	83 d2 00             	adc    edx,0x0
c0007cb3:	83 ec 0c             	sub    esp,0xc
c0007cb6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cba:	6a 01                	push   0x1
c0007cbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cc4:	55                   	push   ebp
c0007cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc9:	e8 66 9f ff ff       	call   c0001c34 <disk_write>
c0007cce:	83 c4 20             	add    esp,0x20
c0007cd1:	85 c0                	test   eax,eax
c0007cd3:	0f 85 51 07 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ce1:	75 09                	jne    c0007cec <f_mkfs+0x973>
c0007ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ce6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cea:	74 12                	je     c0007cfe <f_mkfs+0x985>
c0007cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cf0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cfc:	eb 8a                	jmp    c0007c88 <f_mkfs+0x90f>
c0007cfe:	31 d2                	xor    edx,edx
c0007d00:	b9 00 02 00 00       	mov    ecx,0x200
c0007d05:	89 e8                	mov    eax,ebp
c0007d07:	e8 f1 9f ff ff       	call   c0001cfd <mem_set>
c0007d0c:	83 c6 0b             	add    esi,0xb
c0007d0f:	83 d7 00             	adc    edi,0x0
c0007d12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d16:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d1a:	31 c9                	xor    ecx,ecx
c0007d1c:	41                   	inc    ecx
c0007d1d:	89 da                	mov    edx,ebx
c0007d1f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d24:	e8 3b a4 ff ff       	call   c0002164 <xsum32>
c0007d29:	89 c3                	mov    ebx,eax
c0007d2b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d31:	75 e9                	jne    c0007d1c <f_mkfs+0x9a3>
c0007d33:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d36:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d3a:	83 c6 01             	add    esi,0x1
c0007d3d:	83 d7 00             	adc    edi,0x0
c0007d40:	83 ec 0c             	sub    esp,0xc
c0007d43:	6a 01                	push   0x1
c0007d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d4d:	55                   	push   ebp
c0007d4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d52:	e8 dd 9e ff ff       	call   c0001c34 <disk_write>
c0007d57:	83 c4 20             	add    esp,0x20
c0007d5a:	85 c0                	test   eax,eax
c0007d5c:	0f 85 c8 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007d62:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d66:	75 06                	jne    c0007d6e <f_mkfs+0x9f5>
c0007d68:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d6c:	74 09                	je     c0007d77 <f_mkfs+0x9fe>
c0007d6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d71:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d75:	eb a3                	jmp    c0007d1a <f_mkfs+0x9a1>
c0007d77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d7b:	89 da                	mov    edx,ebx
c0007d7d:	01 e8                	add    eax,ebp
c0007d7f:	e8 5b 9f ff ff       	call   c0001cdf <st_dword>
c0007d84:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d89:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d91:	75 e4                	jne    c0007d77 <f_mkfs+0x9fe>
c0007d93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d96:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d9a:	83 c6 02             	add    esi,0x2
c0007d9d:	83 d7 00             	adc    edi,0x0
c0007da0:	83 ec 0c             	sub    esp,0xc
c0007da3:	6a 01                	push   0x1
c0007da5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dad:	55                   	push   ebp
c0007dae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007db2:	e8 7d 9e ff ff       	call   c0001c34 <disk_write>
c0007db7:	83 c4 20             	add    esp,0x20
c0007dba:	85 c0                	test   eax,eax
c0007dbc:	0f 85 68 06 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0007dc2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dc7:	74 0d                	je     c0007dd6 <f_mkfs+0xa5d>
c0007dc9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dd1:	e9 43 fd ff ff       	jmp    c0007b19 <f_mkfs+0x7a0>
c0007dd6:	b1 07                	mov    cl,0x7
c0007dd8:	e9 e3 05 00 00       	jmp    c00083c0 <f_mkfs+0x1047>
c0007ddd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007de2:	0f 85 4f 02 00 00    	jne    c0008037 <f_mkfs+0xcbe>
c0007de8:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ded:	0f 86 22 02 00 00    	jbe    c0008015 <f_mkfs+0xc9c>
c0007df3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df8:	0f 85 81 06 00 00    	jne    c000847f <f_mkfs+0x1106>
c0007dfe:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e05:	83 f8 40             	cmp    eax,0x40
c0007e08:	0f 87 51 06 00 00    	ja     c000845f <f_mkfs+0x10e6>
c0007e0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e12:	85 ff                	test   edi,edi
c0007e14:	75 1c                	jne    c0007e32 <f_mkfs+0xab9>
c0007e16:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e19:	ba 00 95 02 c0       	mov    edx,0xc0029500
c0007e1e:	c1 e9 0c             	shr    ecx,0xc
c0007e21:	bf 01 00 00 00       	mov    edi,0x1
c0007e26:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e29:	66 85 c0             	test   ax,ax
c0007e2c:	0f 85 95 01 00 00    	jne    c0007fc7 <f_mkfs+0xc4e>
c0007e32:	31 d2                	xor    edx,edx
c0007e34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e37:	f7 f7                	div    edi
c0007e39:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3e:	0f 86 95 01 00 00    	jbe    c0007fd9 <f_mkfs+0xc60>
c0007e44:	83 c0 02             	add    eax,0x2
c0007e47:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e4c:	01 c0                	add    eax,eax
c0007e4e:	05 ff 01 00 00       	add    eax,0x1ff
c0007e53:	be 01 00 00 00       	mov    esi,0x1
c0007e58:	c1 e8 09             	shr    eax,0x9
c0007e5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e63:	c1 e0 05             	shl    eax,0x5
c0007e66:	c1 e8 09             	shr    eax,0x9
c0007e69:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e6d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e72:	31 d2                	xor    edx,edx
c0007e74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e78:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e7c:	89 f0                	mov    eax,esi
c0007e7e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e82:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e92:	31 d2                	xor    edx,edx
c0007e94:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e99:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e9d:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ea1:	31 db                	xor    ebx,ebx
c0007ea3:	01 c8                	add    eax,ecx
c0007ea5:	11 da                	adc    edx,ebx
c0007ea7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eab:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007eaf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eb3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eb7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ebb:	f7 da                	neg    edx
c0007ebd:	21 d1                	and    ecx,edx
c0007ebf:	29 d9                	sub    ecx,ebx
c0007ec1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ec6:	0f 85 20 01 00 00    	jne    c0007fec <f_mkfs+0xc73>
c0007ecc:	31 db                	xor    ebx,ebx
c0007ece:	01 ce                	add    esi,ecx
c0007ed0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ed4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed8:	31 d2                	xor    edx,edx
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ee0:	c1 e0 04             	shl    eax,0x4
c0007ee3:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ee7:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007eeb:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007eef:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ef3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ef6:	19 d3                	sbb    ebx,edx
c0007ef8:	0f 82 40 01 00 00    	jb     c000803e <f_mkfs+0xcc5>
c0007efe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f05:	89 c8                	mov    eax,ecx
c0007f07:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f0c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f10:	29 f0                	sub    eax,esi
c0007f12:	29 d0                	sub    eax,edx
c0007f14:	31 d2                	xor    edx,edx
c0007f16:	f7 f7                	div    edi
c0007f18:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f1d:	89 c3                	mov    ebx,eax
c0007f1f:	0f 85 b8 fe ff ff    	jne    c0007ddd <f_mkfs+0xa64>
c0007f25:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f2a:	0f 87 1d 01 00 00    	ja     c000804d <f_mkfs+0xcd4>
c0007f30:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f35:	0f 85 03 01 00 00    	jne    c000803e <f_mkfs+0xcc5>
c0007f3b:	83 ff 01             	cmp    edi,0x1
c0007f3e:	0f 86 fa 00 00 00    	jbe    c000803e <f_mkfs+0xcc5>
c0007f44:	d1 ef                	shr    edi,1
c0007f46:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f4a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	85 db                	test   ebx,ebx
c0007f53:	75 2d                	jne    c0007f82 <f_mkfs+0xc09>
c0007f55:	89 cb                	mov    ebx,ecx
c0007f57:	ba 10 95 02 c0       	mov    edx,0xc0029510
c0007f5c:	c1 eb 11             	shr    ebx,0x11
c0007f5f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f67:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f6a:	66 85 c0             	test   ax,ax
c0007f6d:	74 11                	je     c0007f80 <f_mkfs+0xc07>
c0007f6f:	83 c2 02             	add    edx,0x2
c0007f72:	39 d8                	cmp    eax,ebx
c0007f74:	77 0a                	ja     c0007f80 <f_mkfs+0xc07>
c0007f76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f7a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f7e:	eb e7                	jmp    c0007f67 <f_mkfs+0xbee>
c0007f80:	31 db                	xor    ebx,ebx
c0007f82:	31 d2                	xor    edx,edx
c0007f84:	89 c8                	mov    eax,ecx
c0007f86:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f8a:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f91:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f96:	c1 ea 09             	shr    edx,0x9
c0007f99:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f9e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fa2:	0f 87 96 00 00 00    	ja     c000803e <f_mkfs+0xcc5>
c0007fa8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fac:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb8:	be 20 00 00 00       	mov    esi,0x20
c0007fbd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fc2:	e9 a6 fe ff ff       	jmp    c0007e6d <f_mkfs+0xaf4>
c0007fc7:	83 c2 02             	add    edx,0x2
c0007fca:	39 c8                	cmp    eax,ecx
c0007fcc:	0f 87 60 fe ff ff    	ja     c0007e32 <f_mkfs+0xab9>
c0007fd2:	01 ff                	add    edi,edi
c0007fd4:	e9 4d fe ff ff       	jmp    c0007e26 <f_mkfs+0xaad>
c0007fd9:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fdc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fe1:	40                   	inc    eax
c0007fe2:	d1 e8                	shr    eax,1
c0007fe4:	83 c0 03             	add    eax,0x3
c0007fe7:	e9 62 fe ff ff       	jmp    c0007e4e <f_mkfs+0xad5>
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	89 c8                	mov    eax,ecx
c0007ff0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff4:	85 d2                	test   edx,edx
c0007ff6:	74 0c                	je     c0008004 <f_mkfs+0xc8b>
c0007ff8:	49                   	dec    ecx
c0007ff9:	46                   	inc    esi
c0007ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fff:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008004:	89 c8                	mov    eax,ecx
c0008006:	31 d2                	xor    edx,edx
c0008008:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000800c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008010:	e9 c3 fe ff ff       	jmp    c0007ed8 <f_mkfs+0xb5f>
c0008015:	3d f5 0f 00 00       	cmp    eax,0xff5
c000801a:	77 31                	ja     c000804d <f_mkfs+0xcd4>
c000801c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008021:	75 1b                	jne    c000803e <f_mkfs+0xcc5>
c0008023:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008026:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000802a:	3d 80 00 00 00       	cmp    eax,0x80
c000802f:	0f 86 d9 fd ff ff    	jbe    c0007e0e <f_mkfs+0xa95>
c0008035:	eb 07                	jmp    c000803e <f_mkfs+0xcc5>
c0008037:	3d f5 0f 00 00       	cmp    eax,0xff5
c000803c:	76 0a                	jbe    c0008048 <f_mkfs+0xccf>
c000803e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008043:	e9 ff 03 00 00       	jmp    c0008447 <f_mkfs+0x10ce>
c0008048:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000804d:	31 d2                	xor    edx,edx
c000804f:	b9 00 02 00 00       	mov    ecx,0x200
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 a2 9c ff ff       	call   c0001cfd <mem_set>
c000805b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008060:	ba 22 96 02 c0       	mov    edx,0xc0029622
c0008065:	89 e8                	mov    eax,ebp
c0008067:	e8 7c 9c ff ff       	call   c0001ce8 <mem_cpy>
c000806c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000806f:	ba 00 02 00 00       	mov    edx,0x200
c0008074:	e8 62 9c ff ff       	call   c0001cdb <st_word>
c0008079:	89 f8                	mov    eax,edi
c000807b:	0f b7 d6             	movzx  edx,si
c000807e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008081:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008084:	e8 52 9c ff ff       	call   c0001cdb <st_word>
c0008089:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000808d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008092:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008095:	75 08                	jne    c000809f <f_mkfs+0xd26>
c0008097:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000809f:	8d 45 11             	lea    eax,[ebp+0x11]
c00080a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080a6:	e8 30 9c ff ff       	call   c0001cdb <st_word>
c00080ab:	b8 ff ff 00 00       	mov    eax,0xffff
c00080b0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080b4:	39 d0                	cmp    eax,edx
c00080b6:	b8 00 00 00 00       	mov    eax,0x0
c00080bb:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080bf:	72 0a                	jb     c00080cb <f_mkfs+0xd52>
c00080c1:	8d 45 13             	lea    eax,[ebp+0x13]
c00080c4:	e8 12 9c ff ff       	call   c0001cdb <st_word>
c00080c9:	eb 08                	jmp    c00080d3 <f_mkfs+0xd5a>
c00080cb:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ce:	e8 0c 9c ff ff       	call   c0001cdf <st_dword>
c00080d3:	8d 45 18             	lea    eax,[ebp+0x18]
c00080d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00080db:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080df:	e8 f7 9b ff ff       	call   c0001cdb <st_word>
c00080e4:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080e7:	ba ff 00 00 00       	mov    edx,0xff
c00080ec:	e8 ea 9b ff ff       	call   c0001cdb <st_word>
c00080f1:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f8:	e8 e2 9b ff ff       	call   c0001cdf <st_dword>
c00080fd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008102:	75 57                	jne    c000815b <f_mkfs+0xde2>
c0008104:	8d 45 43             	lea    eax,[ebp+0x43]
c0008107:	ba 00 00 21 50       	mov    edx,0x50210000
c000810c:	e8 ce 9b ff ff       	call   c0001cdf <st_dword>
c0008111:	8d 45 24             	lea    eax,[ebp+0x24]
c0008114:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008118:	e8 c2 9b ff ff       	call   c0001cdf <st_dword>
c000811d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008120:	ba 02 00 00 00       	mov    edx,0x2
c0008125:	e8 b5 9b ff ff       	call   c0001cdf <st_dword>
c000812a:	8d 45 30             	lea    eax,[ebp+0x30]
c000812d:	ba 01 00 00 00       	mov    edx,0x1
c0008132:	e8 a4 9b ff ff       	call   c0001cdb <st_word>
c0008137:	8d 45 32             	lea    eax,[ebp+0x32]
c000813a:	ba 06 00 00 00       	mov    edx,0x6
c000813f:	e8 97 9b ff ff       	call   c0001cdb <st_word>
c0008144:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008148:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000814c:	8d 45 47             	lea    eax,[ebp+0x47]
c000814f:	b9 13 00 00 00       	mov    ecx,0x13
c0008154:	ba 2e 96 02 c0       	mov    edx,0xc002962e
c0008159:	eb 2f                	jmp    c000818a <f_mkfs+0xe11>
c000815b:	8d 45 27             	lea    eax,[ebp+0x27]
c000815e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008163:	e8 77 9b ff ff       	call   c0001cdf <st_dword>
c0008168:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000816d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008170:	e8 66 9b ff ff       	call   c0001cdb <st_word>
c0008175:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008179:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000817d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008180:	b9 13 00 00 00       	mov    ecx,0x13
c0008185:	ba 42 96 02 c0       	mov    edx,0xc0029642
c000818a:	e8 59 9b ff ff       	call   c0001ce8 <mem_cpy>
c000818f:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008195:	ba 55 aa 00 00       	mov    edx,0xaa55
c000819a:	89 f0                	mov    eax,esi
c000819c:	e8 3a 9b ff ff       	call   c0001cdb <st_word>
c00081a1:	83 ec 0c             	sub    esp,0xc
c00081a4:	6a 01                	push   0x1
c00081a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ae:	55                   	push   ebp
c00081af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081b3:	e8 7c 9a ff ff       	call   c0001c34 <disk_write>
c00081b8:	83 c4 20             	add    esp,0x20
c00081bb:	85 c0                	test   eax,eax
c00081bd:	0f 85 67 02 00 00    	jne    c000842a <f_mkfs+0x10b1>
c00081c3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c8:	0f 85 b7 00 00 00    	jne    c0008285 <f_mkfs+0xf0c>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	6a 01                	push   0x1
c00081d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081db:	83 c0 06             	add    eax,0x6
c00081de:	83 d2 00             	adc    edx,0x0
c00081e1:	52                   	push   edx
c00081e2:	50                   	push   eax
c00081e3:	55                   	push   ebp
c00081e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e8:	e8 47 9a ff ff       	call   c0001c34 <disk_write>
c00081ed:	83 c4 20             	add    esp,0x20
c00081f0:	b9 00 02 00 00       	mov    ecx,0x200
c00081f5:	31 d2                	xor    edx,edx
c00081f7:	89 e8                	mov    eax,ebp
c00081f9:	e8 ff 9a ff ff       	call   c0001cfd <mem_set>
c00081fe:	ba 52 52 61 41       	mov    edx,0x41615252
c0008203:	89 e8                	mov    eax,ebp
c0008205:	e8 d5 9a ff ff       	call   c0001cdf <st_dword>
c000820a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008210:	ba 72 72 41 61       	mov    edx,0x61417272
c0008215:	e8 c5 9a ff ff       	call   c0001cdf <st_dword>
c000821a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000821d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008223:	e8 b7 9a ff ff       	call   c0001cdf <st_dword>
c0008228:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000822e:	ba 02 00 00 00       	mov    edx,0x2
c0008233:	e8 a7 9a ff ff       	call   c0001cdf <st_dword>
c0008238:	ba 55 aa 00 00       	mov    edx,0xaa55
c000823d:	89 f0                	mov    eax,esi
c000823f:	e8 97 9a ff ff       	call   c0001cdb <st_word>
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	6a 01                	push   0x1
c0008249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000824d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008251:	83 c0 07             	add    eax,0x7
c0008254:	83 d2 00             	adc    edx,0x0
c0008257:	52                   	push   edx
c0008258:	50                   	push   eax
c0008259:	55                   	push   ebp
c000825a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000825e:	e8 d1 99 ff ff       	call   c0001c34 <disk_write>
c0008263:	83 c4 14             	add    esp,0x14
c0008266:	6a 01                	push   0x1
c0008268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000826c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008270:	83 c0 01             	add    eax,0x1
c0008273:	83 d2 00             	adc    edx,0x0
c0008276:	52                   	push   edx
c0008277:	50                   	push   eax
c0008278:	55                   	push   ebp
c0008279:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827d:	e8 b2 99 ff ff       	call   c0001c34 <disk_write>
c0008282:	83 c4 20             	add    esp,0x20
c0008285:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000828c:	31 d2                	xor    edx,edx
c000828e:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008294:	31 db                	xor    ebx,ebx
c0008296:	89 e8                	mov    eax,ebp
c0008298:	e8 60 9a ff ff       	call   c0001cfd <mem_set>
c000829d:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a9:	0f 94 c3             	sete   bl
c00082ac:	4b                   	dec    ebx
c00082ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082be:	75 21                	jne    c00082e1 <f_mkfs+0xf68>
c00082c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082c5:	89 e8                	mov    eax,ebp
c00082c7:	e8 13 9a ff ff       	call   c0001cdf <st_dword>
c00082cc:	8d 45 04             	lea    eax,[ebp+0x4]
c00082cf:	83 ca ff             	or     edx,0xffffffff
c00082d2:	e8 08 9a ff ff       	call   c0001cdf <st_dword>
c00082d7:	8d 45 08             	lea    eax,[ebp+0x8]
c00082da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082df:	eb 04                	jmp    c00082e5 <f_mkfs+0xf6c>
c00082e1:	89 da                	mov    edx,ebx
c00082e3:	89 e8                	mov    eax,ebp
c00082e5:	e8 f5 99 ff ff       	call   c0001cdf <st_dword>
c00082ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082f2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082fa:	39 ce                	cmp    esi,ecx
c00082fc:	76 02                	jbe    c0008300 <f_mkfs+0xf87>
c00082fe:	89 ce                	mov    esi,ecx
c0008300:	83 ec 0c             	sub    esp,0xc
c0008303:	56                   	push   esi
c0008304:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008308:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000830c:	55                   	push   ebp
c000830d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008311:	e8 1e 99 ff ff       	call   c0001c34 <disk_write>
c0008316:	83 c4 20             	add    esp,0x20
c0008319:	85 c0                	test   eax,eax
c000831b:	0f 85 09 01 00 00    	jne    c000842a <f_mkfs+0x10b1>
c0008321:	31 d2                	xor    edx,edx
c0008323:	b9 00 02 00 00       	mov    ecx,0x200
c0008328:	89 e8                	mov    eax,ebp
c000832a:	e8 ce 99 ff ff       	call   c0001cfd <mem_set>
c000832f:	31 d2                	xor    edx,edx
c0008331:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008335:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008339:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000833d:	75 b3                	jne    c00082f2 <f_mkfs+0xf79>
c000833f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008342:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008349:	40                   	inc    eax
c000834a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000834e:	0f 87 65 ff ff ff    	ja     c00082b9 <f_mkfs+0xf40>
c0008354:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008359:	74 04                	je     c000835f <f_mkfs+0xfe6>
c000835b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000835f:	89 fb                	mov    ebx,edi
c0008361:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008365:	76 04                	jbe    c000836b <f_mkfs+0xff2>
c0008367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000836b:	83 ec 0c             	sub    esp,0xc
c000836e:	53                   	push   ebx
c000836f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008373:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008377:	55                   	push   ebp
c0008378:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837c:	e8 b3 98 ff ff       	call   c0001c34 <disk_write>
c0008381:	83 c4 20             	add    esp,0x20
c0008384:	85 c0                	test   eax,eax
c0008386:	0f 85 9e 00 00 00    	jne    c000842a <f_mkfs+0x10b1>
c000838c:	31 d2                	xor    edx,edx
c000838e:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008392:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008396:	29 df                	sub    edi,ebx
c0008398:	75 c5                	jne    c000835f <f_mkfs+0xfe6>
c000839a:	b1 0c                	mov    cl,0xc
c000839c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083a1:	74 1d                	je     c00083c0 <f_mkfs+0x1047>
c00083a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a8:	b1 06                	mov    cl,0x6
c00083aa:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ae:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083b2:	72 0c                	jb     c00083c0 <f_mkfs+0x1047>
c00083b4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b9:	0f 94 c1             	sete   cl
c00083bc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083c0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083c5:	75 4c                	jne    c0008413 <f_mkfs+0x109a>
c00083c7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083cb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083cf:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083dd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e8:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083f3:	0f b6 c9             	movzx  ecx,cl
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	55                   	push   ebp
c00083fa:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008405:	e8 2f c2 ff ff       	call   c0004639 <create_partition>
c000840a:	83 c4 10             	add    esp,0x10
c000840d:	89 c3                	mov    ebx,eax
c000840f:	85 c0                	test   eax,eax
c0008411:	75 34                	jne    c0008447 <f_mkfs+0x10ce>
c0008413:	31 db                	xor    ebx,ebx
c0008415:	50                   	push   eax
c0008416:	6a 00                	push   0x0
c0008418:	6a 00                	push   0x0
c000841a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000841e:	e8 27 98 ff ff       	call   c0001c4a <disk_ioctl>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	85 c0                	test   eax,eax
c0008428:	74 1d                	je     c0008447 <f_mkfs+0x10ce>
c000842a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008432:	75 0c                	jne    c0008440 <f_mkfs+0x10c7>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	55                   	push   ebp
c0008438:	e8 75 00 00 00       	call   c00084b2 <ff_memfree>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	bb 01 00 00 00       	mov    ebx,0x1
c0008445:	eb 48                	jmp    c000848f <f_mkfs+0x1116>
c0008447:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844f:	75 3e                	jne    c000848f <f_mkfs+0x1116>
c0008451:	83 ec 0c             	sub    esp,0xc
c0008454:	55                   	push   ebp
c0008455:	e8 58 00 00 00       	call   c00084b2 <ff_memfree>
c000845a:	83 c4 10             	add    esp,0x10
c000845d:	eb 30                	jmp    c000848f <f_mkfs+0x1116>
c000845f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008464:	0f 85 eb fa ff ff    	jne    c0007f55 <f_mkfs+0xbdc>
c000846a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000846e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008474:	0f 86 b8 f9 ff ff    	jbe    c0007e32 <f_mkfs+0xab9>
c000847a:	e9 bf fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000847f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008484:	0f 85 c0 fa ff ff    	jne    c0007f4a <f_mkfs+0xbd1>
c000848a:	e9 af fb ff ff       	jmp    c000803e <f_mkfs+0xcc5>
c000848f:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008495:	89 d8                	mov    eax,ebx
c0008497:	5b                   	pop    ebx
c0008498:	5e                   	pop    esi
c0008499:	5f                   	pop    edi
c000849a:	5d                   	pop    ebp
c000849b:	c3                   	ret    

c000849c <ff_memalloc>:
c000849c:	83 ec 0c             	sub    esp,0xc
c000849f:	83 ec 0c             	sub    esp,0xc
c00084a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a6:	e8 a0 73 00 00       	call   c000f84b <malloc>
c00084ab:	83 c4 10             	add    esp,0x10
c00084ae:	83 c4 0c             	add    esp,0xc
c00084b1:	c3                   	ret    

c00084b2 <ff_memfree>:
c00084b2:	83 ec 0c             	sub    esp,0xc
c00084b5:	83 ec 0c             	sub    esp,0xc
c00084b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084bc:	e8 9a 73 00 00       	call   c000f85b <free>
c00084c1:	83 c4 10             	add    esp,0x10
c00084c4:	90                   	nop
c00084c5:	83 c4 0c             	add    esp,0xc
c00084c8:	c3                   	ret    

c00084c9 <ff_uni2oem>:
c00084c9:	83 ec 14             	sub    esp,0x14
c00084cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084d0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084d4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084db:	c7 44 24 0c 60 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029960
c00084e3:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e8:	77 0b                	ja     c00084f5 <ff_uni2oem+0x2c>
c00084ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	eb 5b                	jmp    c0008550 <ff_uni2oem+0x87>
c00084f5:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084fd:	77 51                	ja     c0008550 <ff_uni2oem+0x87>
c00084ff:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008505:	75 49                	jne    c0008550 <ff_uni2oem+0x87>
c0008507:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000850e:	eb 0b                	jmp    c000851b <ff_uni2oem+0x52>
c0008510:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008515:	40                   	inc    eax
c0008516:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000851b:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008521:	77 1b                	ja     c000853e <ff_uni2oem+0x75>
c0008523:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008528:	01 c0                	add    eax,eax
c000852a:	89 c2                	mov    edx,eax
c000852c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008530:	01 d0                	add    eax,edx
c0008532:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008535:	0f b7 c0             	movzx  eax,ax
c0008538:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000853c:	75 d2                	jne    c0008510 <ff_uni2oem+0x47>
c000853e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008543:	83 e8 80             	sub    eax,0xffffff80
c0008546:	25 ff 00 00 00       	and    eax,0xff
c000854b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008550:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008555:	83 c4 14             	add    esp,0x14
c0008558:	c3                   	ret    

c0008559 <ff_oem2uni>:
c0008559:	83 ec 18             	sub    esp,0x18
c000855c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008564:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008569:	66 89 04 24          	mov    WORD PTR [esp],ax
c000856d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008574:	c7 44 24 10 60 99 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029960
c000857c:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008582:	77 0b                	ja     c000858f <ff_oem2uni+0x36>
c0008584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008588:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000858d:	eb 2d                	jmp    c00085bc <ff_oem2uni+0x63>
c000858f:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008595:	75 25                	jne    c00085bc <ff_oem2uni+0x63>
c0008597:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000859e:	77 1c                	ja     c00085bc <ff_oem2uni+0x63>
c00085a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085a5:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085aa:	01 c0                	add    eax,eax
c00085ac:	89 c2                	mov    edx,eax
c00085ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b2:	01 d0                	add    eax,edx
c00085b4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085b7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085bc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085c1:	83 c4 18             	add    esp,0x18
c00085c4:	c3                   	ret    

c00085c5 <ff_wtoupper>:
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085d0:	0f 87 3e 01 00 00    	ja     c0008714 <ff_wtoupper+0x14f>
c00085d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085da:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085df:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085e6:	77 07                	ja     c00085ef <ff_wtoupper+0x2a>
c00085e8:	b8 60 97 02 c0       	mov    eax,0xc0029760
c00085ed:	eb 05                	jmp    c00085f4 <ff_wtoupper+0x2f>
c00085ef:	b8 a0 96 02 c0       	mov    eax,0xc00296a0
c00085f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085fc:	8d 50 02             	lea    edx,[eax+0x2]
c00085ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008603:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008606:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000860b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008611:	0f 84 f4 00 00 00    	je     c000870b <ff_wtoupper+0x146>
c0008617:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000861c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008621:	0f 82 e4 00 00 00    	jb     c000870b <ff_wtoupper+0x146>
c0008627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000862b:	8d 50 02             	lea    edx,[eax+0x2]
c000862e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008632:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008635:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000863a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000863f:	66 c1 e8 08          	shr    ax,0x8
c0008643:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008648:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000864f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008654:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008659:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000865e:	01 ca                	add    edx,ecx
c0008660:	39 d0                	cmp    eax,edx
c0008662:	0f 8d 86 00 00 00    	jge    c00086ee <ff_wtoupper+0x129>
c0008668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000866d:	83 f8 08             	cmp    eax,0x8
c0008670:	0f 87 94 00 00 00    	ja     c000870a <ff_wtoupper+0x145>
c0008676:	8b 04 85 60 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd69a0]
c000867d:	ff e0                	jmp    eax
c000867f:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008684:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008689:	29 c2                	sub    edx,eax
c000868b:	89 d0                	mov    eax,edx
c000868d:	01 c0                	add    eax,eax
c000868f:	89 c2                	mov    edx,eax
c0008691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008695:	01 d0                	add    eax,edx
c0008697:	66 8b 00             	mov    ax,WORD PTR [eax]
c000869a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000869f:	eb 4b                	jmp    c00086ec <ff_wtoupper+0x127>
c00086a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086aa:	83 e0 01             	and    eax,0x1
c00086ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086b2:	eb 38                	jmp    c00086ec <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086ba:	eb 30                	jmp    c00086ec <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086c2:	eb 28                	jmp    c00086ec <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086ca:	eb 20                	jmp    c00086ec <ff_wtoupper+0x127>
c00086cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086d2:	eb 18                	jmp    c00086ec <ff_wtoupper+0x127>
c00086d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086da:	eb 10                	jmp    c00086ec <ff_wtoupper+0x127>
c00086dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086e2:	eb 08                	jmp    c00086ec <ff_wtoupper+0x127>
c00086e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086eb:	90                   	nop
c00086ec:	eb 1c                	jmp    c000870a <ff_wtoupper+0x145>
c00086ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086f4:	0f 85 fe fe ff ff    	jne    c00085f8 <ff_wtoupper+0x33>
c00086fa:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086ff:	01 c0                	add    eax,eax
c0008701:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008705:	e9 ee fe ff ff       	jmp    c00085f8 <ff_wtoupper+0x33>
c000870a:	90                   	nop
c000870b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008718:	83 c4 10             	add    esp,0x10
c000871b:	c3                   	ret    

c000871c <psrc_set_converter>:
c000871c:	56                   	push   esi
c000871d:	89 d6                	mov    esi,edx
c000871f:	53                   	push   ebx
c0008720:	89 c3                	mov    ebx,eax
c0008722:	83 ec 0c             	sub    esp,0xc
c0008725:	52                   	push   edx
c0008726:	50                   	push   eax
c0008727:	e8 6f 55 00 00       	call   c000dc9b <sinc_set_converter>
c000872c:	83 c4 10             	add    esp,0x10
c000872f:	85 c0                	test   eax,eax
c0008731:	74 25                	je     c0008758 <psrc_set_converter+0x3c>
c0008733:	50                   	push   eax
c0008734:	50                   	push   eax
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	e8 17 5d 00 00       	call   c000e453 <zoh_set_converter>
c000873c:	83 c4 10             	add    esp,0x10
c000873f:	85 c0                	test   eax,eax
c0008741:	74 15                	je     c0008758 <psrc_set_converter+0x3c>
c0008743:	51                   	push   ecx
c0008744:	51                   	push   ecx
c0008745:	56                   	push   esi
c0008746:	53                   	push   ebx
c0008747:	e8 0f 11 00 00       	call   c000985b <linear_set_converter>
c000874c:	83 c4 10             	add    esp,0x10
c000874f:	ba 0a 00 00 00       	mov    edx,0xa
c0008754:	85 c0                	test   eax,eax
c0008756:	75 02                	jne    c000875a <psrc_set_converter+0x3e>
c0008758:	31 d2                	xor    edx,edx
c000875a:	89 d0                	mov    eax,edx
c000875c:	5a                   	pop    edx
c000875d:	5b                   	pop    ebx
c000875e:	5e                   	pop    esi
c000875f:	c3                   	ret    

c0008760 <src_delete>:
c0008760:	53                   	push   ebx
c0008761:	83 ec 08             	sub    esp,0x8
c0008764:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008768:	85 db                	test   ebx,ebx
c000876a:	74 29                	je     c0008795 <src_delete+0x35>
c000876c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000876f:	85 c0                	test   eax,eax
c0008771:	74 0c                	je     c000877f <src_delete+0x1f>
c0008773:	83 ec 0c             	sub    esp,0xc
c0008776:	50                   	push   eax
c0008777:	e8 df 70 00 00       	call   c000f85b <free>
c000877c:	83 c4 10             	add    esp,0x10
c000877f:	50                   	push   eax
c0008780:	6a 3c                	push   0x3c
c0008782:	6a 00                	push   0x0
c0008784:	53                   	push   ebx
c0008785:	e8 f6 7f ff ff       	call   c0000780 <memset>
c000878a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000878d:	e8 c9 70 00 00       	call   c000f85b <free>
c0008792:	83 c4 10             	add    esp,0x10
c0008795:	31 c0                	xor    eax,eax
c0008797:	83 c4 08             	add    esp,0x8
c000879a:	5b                   	pop    ebx
c000879b:	c3                   	ret    

c000879c <src_process>:
c000879c:	55                   	push   ebp
c000879d:	57                   	push   edi
c000879e:	56                   	push   esi
c000879f:	53                   	push   ebx
c00087a0:	83 ec 1c             	sub    esp,0x1c
c00087a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ab:	85 ed                	test   ebp,ebp
c00087ad:	0f 84 6f 01 00 00    	je     c0008922 <src_process+0x186>
c00087b3:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087b7:	0f 84 6c 01 00 00    	je     c0008929 <src_process+0x18d>
c00087bd:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087c1:	0f 84 62 01 00 00    	je     c0008929 <src_process+0x18d>
c00087c7:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ce:	0f 85 5c 01 00 00    	jne    c0008930 <src_process+0x194>
c00087d4:	85 db                	test   ebx,ebx
c00087d6:	0f 84 5b 01 00 00    	je     c0008937 <src_process+0x19b>
c00087dc:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087de:	85 f6                	test   esi,esi
c00087e0:	0f 84 58 01 00 00    	je     c000893e <src_process+0x1a2>
c00087e6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e9:	85 ff                	test   edi,edi
c00087eb:	0f 84 4d 01 00 00    	je     c000893e <src_process+0x1a2>
c00087f1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087ff:	68 00 00 70 3f       	push   0x3f700000
c0008804:	6a 00                	push   0x0
c0008806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880e:	e8 f4 fd 01 00       	call   c0028607 <__ltdf2>
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	0f 88 27 01 00 00    	js     c0008945 <src_process+0x1a9>
c000881e:	68 00 00 70 40       	push   0x40700000
c0008823:	6a 00                	push   0x0
c0008825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882d:	e8 b7 fd 01 00       	call   c00285e9 <__gtdf2>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	85 c0                	test   eax,eax
c0008837:	0f 8f 08 01 00 00    	jg     c0008945 <src_process+0x1a9>
c000883d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008841:	79 07                	jns    c000884a <src_process+0xae>
c0008843:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000884a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000884d:	85 c0                	test   eax,eax
c000884f:	79 50                	jns    c00088a1 <src_process+0x105>
c0008851:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008858:	39 fe                	cmp    esi,edi
c000885a:	72 37                	jb     c0008893 <src_process+0xf7>
c000885c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886a:	68 00 00 70 3f       	push   0x3f700000
c000886f:	6a 00                	push   0x0
c0008871:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008874:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008877:	e8 8b fd 01 00       	call   c0028607 <__ltdf2>
c000887c:	83 c4 10             	add    esp,0x10
c000887f:	85 c0                	test   eax,eax
c0008881:	79 37                	jns    c00088ba <src_process+0x11e>
c0008883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000888b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000888e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008891:	eb 27                	jmp    c00088ba <src_process+0x11e>
c0008893:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008896:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000889a:	8d 04 86             	lea    eax,[esi+eax*4]
c000889d:	39 c7                	cmp    edi,eax
c000889f:	eb 0d                	jmp    c00088ae <src_process+0x112>
c00088a1:	39 fe                	cmp    esi,edi
c00088a3:	72 ee                	jb     c0008893 <src_process+0xf7>
c00088a5:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a9:	8d 04 87             	lea    eax,[edi+eax*4]
c00088ac:	39 c6                	cmp    esi,eax
c00088ae:	73 ac                	jae    c000885c <src_process+0xc0>
c00088b0:	b8 10 00 00 00       	mov    eax,0x10
c00088b5:	e9 90 00 00 00       	jmp    c000894a <src_process+0x1ae>
c00088ba:	83 ec 10             	sub    esp,0x10
c00088bd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088c0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088c6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c9:	e8 3e f4 01 00       	call   c0027d0c <__subdf3>
c00088ce:	83 c4 18             	add    esp,0x18
c00088d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d9:	52                   	push   edx
c00088da:	50                   	push   eax
c00088db:	e8 c0 fe 01 00       	call   c00287a0 <fabs>
c00088e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	68 af 03 d2 3c       	push   0x3cd203af
c00088f0:	68 16 56 e7 9e       	push   0x9ee75616
c00088f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088fd:	e8 05 fd 01 00       	call   c0028607 <__ltdf2>
c0008902:	83 c4 10             	add    esp,0x10
c0008905:	85 c0                	test   eax,eax
c0008907:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000890b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000890f:	79 05                	jns    c0008916 <src_process+0x17a>
c0008911:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008914:	eb 03                	jmp    c0008919 <src_process+0x17d>
c0008916:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008919:	83 c4 1c             	add    esp,0x1c
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	5d                   	pop    ebp
c0008920:	ff e0                	jmp    eax
c0008922:	b8 02 00 00 00       	mov    eax,0x2
c0008927:	eb 21                	jmp    c000894a <src_process+0x1ae>
c0008929:	b8 07 00 00 00       	mov    eax,0x7
c000892e:	eb 1a                	jmp    c000894a <src_process+0x1ae>
c0008930:	b8 12 00 00 00       	mov    eax,0x12
c0008935:	eb 13                	jmp    c000894a <src_process+0x1ae>
c0008937:	b8 03 00 00 00       	mov    eax,0x3
c000893c:	eb 0c                	jmp    c000894a <src_process+0x1ae>
c000893e:	b8 04 00 00 00       	mov    eax,0x4
c0008943:	eb 05                	jmp    c000894a <src_process+0x1ae>
c0008945:	b8 06 00 00 00       	mov    eax,0x6
c000894a:	83 c4 1c             	add    esp,0x1c
c000894d:	5b                   	pop    ebx
c000894e:	5e                   	pop    esi
c000894f:	5f                   	pop    edi
c0008950:	5d                   	pop    ebp
c0008951:	c3                   	ret    

c0008952 <src_callback_read>:
c0008952:	55                   	push   ebp
c0008953:	57                   	push   edi
c0008954:	56                   	push   esi
c0008955:	53                   	push   ebx
c0008956:	83 ec 3c             	sub    esp,0x3c
c0008959:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000895d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008961:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008965:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008969:	85 ed                	test   ebp,ebp
c000896b:	0f 8e 52 01 00 00    	jle    c0008ac3 <src_callback_read+0x171>
c0008971:	85 db                	test   ebx,ebx
c0008973:	0f 84 4a 01 00 00    	je     c0008ac3 <src_callback_read+0x171>
c0008979:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008980:	74 0c                	je     c000898e <src_callback_read+0x3c>
c0008982:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008989:	e9 35 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c000898e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008992:	75 0c                	jne    c00089a0 <src_callback_read+0x4e>
c0008994:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000899b:	e9 23 01 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c00089a0:	51                   	push   ecx
c00089a1:	6a 24                	push   0x24
c00089a3:	6a 00                	push   0x0
c00089a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a9:	50                   	push   eax
c00089aa:	e8 d1 7d ff ff       	call   c0000780 <memset>
c00089af:	83 c4 10             	add    esp,0x10
c00089b2:	68 00 00 70 3f       	push   0x3f700000
c00089b7:	6a 00                	push   0x0
c00089b9:	57                   	push   edi
c00089ba:	56                   	push   esi
c00089bb:	e8 47 fc 01 00       	call   c0028607 <__ltdf2>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	85 c0                	test   eax,eax
c00089c5:	78 3e                	js     c0008a05 <src_callback_read+0xb3>
c00089c7:	68 00 00 70 40       	push   0x40700000
c00089cc:	6a 00                	push   0x0
c00089ce:	57                   	push   edi
c00089cf:	56                   	push   esi
c00089d0:	e8 14 fc 01 00       	call   c00285e9 <__gtdf2>
c00089d5:	83 c4 10             	add    esp,0x10
c00089d8:	85 c0                	test   eax,eax
c00089da:	7f 29                	jg     c0008a05 <src_callback_read+0xb3>
c00089dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089e0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e8:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ef:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089f7:	31 f6                	xor    esi,esi
c00089f9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a00:	e9 97 00 00 00       	jmp    c0008a9c <src_callback_read+0x14a>
c0008a05:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a0c:	e9 b2 00 00 00       	jmp    c0008ac3 <src_callback_read+0x171>
c0008a11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a19:	52                   	push   edx
c0008a1a:	52                   	push   edx
c0008a1b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a1f:	50                   	push   eax
c0008a20:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a23:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	85 c0                	test   eax,eax
c0008a37:	75 08                	jne    c0008a41 <src_callback_read+0xef>
c0008a39:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a41:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a48:	50                   	push   eax
c0008a49:	50                   	push   eax
c0008a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a4e:	50                   	push   eax
c0008a4f:	53                   	push   ebx
c0008a50:	e8 47 fd ff ff       	call   c000879c <src_process>
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a5f:	85 c0                	test   eax,eax
c0008a61:	75 49                	jne    c0008aac <src_callback_read+0x15a>
c0008a63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a67:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a6a:	89 f9                	mov    ecx,edi
c0008a6c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a70:	0f af ca             	imul   ecx,edx
c0008a73:	c1 e1 02             	shl    ecx,0x2
c0008a76:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a7e:	0f af d1             	imul   edx,ecx
c0008a81:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a85:	c1 e2 02             	shl    edx,0x2
c0008a88:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a8c:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a94:	74 12                	je     c0008aa8 <src_callback_read+0x156>
c0008a96:	39 d5                	cmp    ebp,edx
c0008a98:	7e 14                	jle    c0008aae <src_callback_read+0x15c>
c0008a9a:	89 d6                	mov    esi,edx
c0008a9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008aa1:	75 9e                	jne    c0008a41 <src_callback_read+0xef>
c0008aa3:	e9 69 ff ff ff       	jmp    c0008a11 <src_callback_read+0xbf>
c0008aa8:	85 c9                	test   ecx,ecx
c0008aaa:	75 ea                	jne    c0008a96 <src_callback_read+0x144>
c0008aac:	89 f2                	mov    edx,esi
c0008aae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ab7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008abb:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008abe:	74 05                	je     c0008ac5 <src_callback_read+0x173>
c0008ac0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008ac3:	31 d2                	xor    edx,edx
c0008ac5:	83 c4 3c             	add    esp,0x3c
c0008ac8:	89 d0                	mov    eax,edx
c0008aca:	5b                   	pop    ebx
c0008acb:	5e                   	pop    esi
c0008acc:	5f                   	pop    edi
c0008acd:	5d                   	pop    ebp
c0008ace:	c3                   	ret    

c0008acf <src_set_ratio>:
c0008acf:	57                   	push   edi
c0008ad0:	ba 02 00 00 00       	mov    edx,0x2
c0008ad5:	56                   	push   esi
c0008ad6:	53                   	push   ebx
c0008ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008adf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ae3:	85 db                	test   ebx,ebx
c0008ae5:	74 4c                	je     c0008b33 <src_set_ratio+0x64>
c0008ae7:	ba 07 00 00 00       	mov    edx,0x7
c0008aec:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008af0:	74 41                	je     c0008b33 <src_set_ratio+0x64>
c0008af2:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008af6:	74 3b                	je     c0008b33 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 3f       	push   0x3f700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 01 fb 01 00       	call   c0028607 <__ltdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	78 21                	js     c0008b33 <src_set_ratio+0x64>
c0008b12:	68 00 00 70 40       	push   0x40700000
c0008b17:	6a 00                	push   0x0
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	e8 c9 fa 01 00       	call   c00285e9 <__gtdf2>
c0008b20:	83 c4 10             	add    esp,0x10
c0008b23:	ba 06 00 00 00       	mov    edx,0x6
c0008b28:	85 c0                	test   eax,eax
c0008b2a:	7f 07                	jg     c0008b33 <src_set_ratio+0x64>
c0008b2c:	89 33                	mov    DWORD PTR [ebx],esi
c0008b2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b31:	31 d2                	xor    edx,edx
c0008b33:	5b                   	pop    ebx
c0008b34:	89 d0                	mov    eax,edx
c0008b36:	5e                   	pop    esi
c0008b37:	5f                   	pop    edi
c0008b38:	c3                   	ret    

c0008b39 <src_get_channels>:
c0008b39:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b3d:	b8 02 00 00 00       	mov    eax,0x2
c0008b42:	85 d2                	test   edx,edx
c0008b44:	74 14                	je     c0008b5a <src_get_channels+0x21>
c0008b46:	b8 07 00 00 00       	mov    eax,0x7
c0008b4b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b4f:	74 09                	je     c0008b5a <src_get_channels+0x21>
c0008b51:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b55:	74 03                	je     c0008b5a <src_get_channels+0x21>
c0008b57:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b5a:	c3                   	ret    

c0008b5b <src_reset>:
c0008b5b:	53                   	push   ebx
c0008b5c:	b8 02 00 00 00       	mov    eax,0x2
c0008b61:	83 ec 08             	sub    esp,0x8
c0008b64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b68:	85 db                	test   ebx,ebx
c0008b6a:	74 36                	je     c0008ba2 <src_reset+0x47>
c0008b6c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b6f:	85 c0                	test   eax,eax
c0008b71:	74 09                	je     c0008b7c <src_reset+0x21>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	53                   	push   ebx
c0008b77:	ff d0                	call   eax
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	31 c0                	xor    eax,eax
c0008b7e:	31 d2                	xor    edx,edx
c0008b80:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b83:	89 03                	mov    DWORD PTR [ebx],eax
c0008b85:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b88:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b8b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b92:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b99:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ba0:	31 c0                	xor    eax,eax
c0008ba2:	83 c4 08             	add    esp,0x8
c0008ba5:	5b                   	pop    ebx
c0008ba6:	c3                   	ret    

c0008ba7 <src_new>:
c0008ba7:	57                   	push   edi
c0008ba8:	56                   	push   esi
c0008ba9:	53                   	push   ebx
c0008baa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bb2:	85 f6                	test   esi,esi
c0008bb4:	74 73                	je     c0008c29 <src_new+0x82>
c0008bb6:	85 ff                	test   edi,edi
c0008bb8:	7f 08                	jg     c0008bc2 <src_new+0x1b>
c0008bba:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bc0:	eb 1e                	jmp    c0008be0 <src_new+0x39>
c0008bc2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc8:	50                   	push   eax
c0008bc9:	50                   	push   eax
c0008bca:	6a 3c                	push   0x3c
c0008bcc:	6a 01                	push   0x1
c0008bce:	e8 a8 6c 00 00       	call   c000f87b <calloc>
c0008bd3:	83 c4 10             	add    esp,0x10
c0008bd6:	89 c3                	mov    ebx,eax
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	75 10                	jne    c0008bec <src_new+0x45>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	75 04                	jne    c0008be4 <src_new+0x3d>
c0008be0:	31 db                	xor    ebx,ebx
c0008be2:	eb 4b                	jmp    c0008c2f <src_new+0x88>
c0008be4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bea:	eb 43                	jmp    c0008c2f <src_new+0x88>
c0008bec:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bef:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bfa:	e8 1d fb ff ff       	call   c000871c <psrc_set_converter>
c0008bff:	85 c0                	test   eax,eax
c0008c01:	74 18                	je     c0008c1b <src_new+0x74>
c0008c03:	85 f6                	test   esi,esi
c0008c05:	74 06                	je     c0008c0d <src_new+0x66>
c0008c07:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c0d:	83 ec 0c             	sub    esp,0xc
c0008c10:	53                   	push   ebx
c0008c11:	31 db                	xor    ebx,ebx
c0008c13:	e8 43 6c 00 00       	call   c000f85b <free>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	83 ec 0c             	sub    esp,0xc
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 37 ff ff ff       	call   c0008b5b <src_reset>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	eb 06                	jmp    c0008c2f <src_new+0x88>
c0008c29:	85 ff                	test   edi,edi
c0008c2b:	7f 9b                	jg     c0008bc8 <src_new+0x21>
c0008c2d:	eb b1                	jmp    c0008be0 <src_new+0x39>
c0008c2f:	89 d8                	mov    eax,ebx
c0008c31:	5b                   	pop    ebx
c0008c32:	5e                   	pop    esi
c0008c33:	5f                   	pop    edi
c0008c34:	c3                   	ret    

c0008c35 <src_callback_new>:
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	53                   	push   ebx
c0008c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c40:	85 f6                	test   esi,esi
c0008c42:	75 0e                	jne    c0008c52 <src_callback_new+0x1d>
c0008c44:	31 db                	xor    ebx,ebx
c0008c46:	85 c0                	test   eax,eax
c0008c48:	74 47                	je     c0008c91 <src_callback_new+0x5c>
c0008c4a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c50:	eb 3f                	jmp    c0008c91 <src_callback_new+0x5c>
c0008c52:	85 c0                	test   eax,eax
c0008c54:	74 06                	je     c0008c5c <src_callback_new+0x27>
c0008c56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c5c:	51                   	push   ecx
c0008c5d:	50                   	push   eax
c0008c5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c66:	e8 3c ff ff ff       	call   c0008ba7 <src_new>
c0008c6b:	83 c4 10             	add    esp,0x10
c0008c6e:	89 c3                	mov    ebx,eax
c0008c70:	85 c0                	test   eax,eax
c0008c72:	74 1d                	je     c0008c91 <src_callback_new+0x5c>
c0008c74:	83 ec 0c             	sub    esp,0xc
c0008c77:	50                   	push   eax
c0008c78:	e8 de fe ff ff       	call   c0008b5b <src_reset>
c0008c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c81:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c88:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c8b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	89 d8                	mov    eax,ebx
c0008c93:	5a                   	pop    edx
c0008c94:	5b                   	pop    ebx
c0008c95:	5e                   	pop    esi
c0008c96:	c3                   	ret    

c0008c97 <src_get_name>:
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 14             	sub    esp,0x14
c0008c9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c9f:	53                   	push   ebx
c0008ca0:	e8 d0 4f 00 00       	call   c000dc75 <sinc_get_name>
c0008ca5:	83 c4 10             	add    esp,0x10
c0008ca8:	85 c0                	test   eax,eax
c0008caa:	75 1d                	jne    c0008cc9 <src_get_name+0x32>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	53                   	push   ebx
c0008cb0:	e8 80 57 00 00       	call   c000e435 <zoh_get_name>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 0d                	jne    c0008cc9 <src_get_name+0x32>
c0008cbc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cc0:	83 c4 08             	add    esp,0x8
c0008cc3:	5b                   	pop    ebx
c0008cc4:	e9 74 0b 00 00       	jmp    c000983d <linear_get_name>
c0008cc9:	83 c4 08             	add    esp,0x8
c0008ccc:	5b                   	pop    ebx
c0008ccd:	c3                   	ret    

c0008cce <src_get_description>:
c0008cce:	53                   	push   ebx
c0008ccf:	83 ec 14             	sub    esp,0x14
c0008cd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cd6:	53                   	push   ebx
c0008cd7:	e8 ac 4f 00 00       	call   c000dc88 <sinc_get_description>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	85 c0                	test   eax,eax
c0008ce1:	75 1d                	jne    c0008d00 <src_get_description+0x32>
c0008ce3:	83 ec 0c             	sub    esp,0xc
c0008ce6:	53                   	push   ebx
c0008ce7:	e8 58 57 00 00       	call   c000e444 <zoh_get_description>
c0008cec:	83 c4 10             	add    esp,0x10
c0008cef:	85 c0                	test   eax,eax
c0008cf1:	75 0d                	jne    c0008d00 <src_get_description+0x32>
c0008cf3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cf7:	83 c4 08             	add    esp,0x8
c0008cfa:	5b                   	pop    ebx
c0008cfb:	e9 4c 0b 00 00       	jmp    c000984c <linear_get_description>
c0008d00:	83 c4 08             	add    esp,0x8
c0008d03:	5b                   	pop    ebx
c0008d04:	c3                   	ret    

c0008d05 <src_get_version>:
c0008d05:	b8 60 9a 02 c0       	mov    eax,0xc0029a60
c0008d0a:	c3                   	ret    

c0008d0b <src_is_valid_ratio>:
c0008d0b:	83 ec 1c             	sub    esp,0x1c
c0008d0e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	68 00 00 70 3f       	push   0x3f700000
c0008d23:	6a 00                	push   0x0
c0008d25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	e8 d5 f8 01 00       	call   c0028607 <__ltdf2>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	85 c0                	test   eax,eax
c0008d39:	78 1e                	js     c0008d59 <src_is_valid_ratio+0x4e>
c0008d3b:	68 00 00 70 40       	push   0x40700000
c0008d40:	6a 00                	push   0x0
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 9a f8 01 00       	call   c00285e9 <__gtdf2>
c0008d4f:	31 d2                	xor    edx,edx
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	85 c0                	test   eax,eax
c0008d56:	0f 9e c2             	setle  dl
c0008d59:	89 d0                	mov    eax,edx
c0008d5b:	83 c4 1c             	add    esp,0x1c
c0008d5e:	c3                   	ret    

c0008d5f <src_error>:
c0008d5f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d63:	31 c0                	xor    eax,eax
c0008d65:	85 d2                	test   edx,edx
c0008d67:	74 03                	je     c0008d6c <src_error+0xd>
c0008d69:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d6c:	c3                   	ret    

c0008d6d <src_strerror>:
c0008d6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d71:	31 c0                	xor    eax,eax
c0008d73:	83 fa 17             	cmp    edx,0x17
c0008d76:	77 07                	ja     c0008d7f <src_strerror+0x12>
c0008d78:	8b 04 95 c0 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6140]
c0008d7f:	c3                   	ret    

c0008d80 <src_simple>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	83 ec 18             	sub    esp,0x18
c0008d85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d8d:	50                   	push   eax
c0008d8e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d96:	e8 0c fe ff ff       	call   c0008ba7 <src_new>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	85 c0                	test   eax,eax
c0008da0:	75 06                	jne    c0008da8 <src_simple+0x28>
c0008da2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da6:	eb 25                	jmp    c0008dcd <src_simple+0x4d>
c0008da8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008daf:	89 c3                	mov    ebx,eax
c0008db1:	50                   	push   eax
c0008db2:	50                   	push   eax
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	e8 e2 f9 ff ff       	call   c000879c <src_process>
c0008dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dc1:	e8 9a f9 ff ff       	call   c0008760 <src_delete>
c0008dc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	83 c4 14             	add    esp,0x14
c0008dd0:	5b                   	pop    ebx
c0008dd1:	5e                   	pop    esi
c0008dd2:	c3                   	ret    

c0008dd3 <src_short_to_float_array>:
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 18             	sub    esp,0x18
c0008dd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ddb:	85 db                	test   ebx,ebx
c0008ddd:	74 54                	je     c0008e33 <src_short_to_float_array+0x60>
c0008ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008de3:	4b                   	dec    ebx
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008deb:	50                   	push   eax
c0008dec:	e8 aa f5 01 00       	call   c002839b <__floatsidf>
c0008df1:	83 c4 10             	add    esp,0x10
c0008df4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dfc:	68 00 00 00 3f       	push   0x3f000000
c0008e01:	6a 00                	push   0x0
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0b:	e8 28 ef 01 00       	call   c0027d38 <__muldf3>
c0008e10:	59                   	pop    ecx
c0008e11:	59                   	pop    ecx
c0008e12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e22:	e8 e4 f7 01 00       	call   c002860b <__truncdfsf2>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e2e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e31:	eb a8                	jmp    c0008ddb <src_short_to_float_array+0x8>
c0008e33:	83 c4 18             	add    esp,0x18
c0008e36:	5b                   	pop    ebx
c0008e37:	c3                   	ret    

c0008e38 <src_float_to_short_array>:
c0008e38:	56                   	push   esi
c0008e39:	53                   	push   ebx
c0008e3a:	83 ec 14             	sub    esp,0x14
c0008e3d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e45:	85 db                	test   ebx,ebx
c0008e47:	0f 84 a4 00 00 00    	je     c0008ef1 <src_float_to_short_array+0xb9>
c0008e4d:	83 ec 0c             	sub    esp,0xc
c0008e50:	4b                   	dec    ebx
c0008e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e55:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e58:	e8 d2 f8 01 00       	call   c002872f <__extendsfdf2>
c0008e5d:	83 c4 10             	add    esp,0x10
c0008e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e68:	68 00 00 e0 41       	push   0x41e00000
c0008e6d:	6a 00                	push   0x0
c0008e6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e77:	e8 bc ee 01 00       	call   c0027d38 <__muldf3>
c0008e7c:	83 c4 10             	add    esp,0x10
c0008e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e87:	68 ff ff df 41       	push   0x41dfffff
c0008e8c:	68 00 00 c0 ff       	push   0xffc00000
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e99:	e8 67 f7 01 00       	call   c0028605 <__gedf2>
c0008e9e:	83 c4 10             	add    esp,0x10
c0008ea1:	85 c0                	test   eax,eax
c0008ea3:	78 08                	js     c0008ead <src_float_to_short_array+0x75>
c0008ea5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008eab:	eb 98                	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ead:	68 00 00 e0 c1       	push   0xc1e00000
c0008eb2:	6a 00                	push   0x0
c0008eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebc:	e8 48 f7 01 00       	call   c0028609 <__ledf2>
c0008ec1:	83 c4 10             	add    esp,0x10
c0008ec4:	85 c0                	test   eax,eax
c0008ec6:	7f 0b                	jg     c0008ed3 <src_float_to_short_array+0x9b>
c0008ec8:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ece:	e9 72 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ed3:	50                   	push   eax
c0008ed4:	50                   	push   eax
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 de f8 01 00       	call   c00287c0 <lrint>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	c1 f8 10             	sar    eax,0x10
c0008ee8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eec:	e9 54 ff ff ff       	jmp    c0008e45 <src_float_to_short_array+0xd>
c0008ef1:	83 c4 14             	add    esp,0x14
c0008ef4:	5b                   	pop    ebx
c0008ef5:	5e                   	pop    esi
c0008ef6:	c3                   	ret    

c0008ef7 <src_int_to_float_array>:
c0008ef7:	53                   	push   ebx
c0008ef8:	83 ec 18             	sub    esp,0x18
c0008efb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008eff:	85 db                	test   ebx,ebx
c0008f01:	74 52                	je     c0008f55 <src_int_to_float_array+0x5e>
c0008f03:	83 ec 0c             	sub    esp,0xc
c0008f06:	4b                   	dec    ebx
c0008f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f0b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f0e:	e8 88 f4 01 00       	call   c002839b <__floatsidf>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f1e:	68 00 00 00 3e       	push   0x3e000000
c0008f23:	6a 00                	push   0x0
c0008f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2d:	e8 06 ee 01 00       	call   c0027d38 <__muldf3>
c0008f32:	59                   	pop    ecx
c0008f33:	59                   	pop    ecx
c0008f34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f44:	e8 c2 f6 01 00       	call   c002860b <__truncdfsf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f50:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f53:	eb aa                	jmp    c0008eff <src_int_to_float_array+0x8>
c0008f55:	83 c4 18             	add    esp,0x18
c0008f58:	5b                   	pop    ebx
c0008f59:	c3                   	ret    

c0008f5a <src_float_to_int_array>:
c0008f5a:	56                   	push   esi
c0008f5b:	53                   	push   ebx
c0008f5c:	83 ec 14             	sub    esp,0x14
c0008f5f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f63:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f67:	85 db                	test   ebx,ebx
c0008f69:	0f 84 a2 00 00 00    	je     c0009011 <src_float_to_int_array+0xb7>
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	4b                   	dec    ebx
c0008f73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f77:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f7a:	e8 b0 f7 01 00       	call   c002872f <__extendsfdf2>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8a:	68 00 00 e0 41       	push   0x41e00000
c0008f8f:	6a 00                	push   0x0
c0008f91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	e8 9a ed 01 00       	call   c0027d38 <__muldf3>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa9:	68 ff ff df 41       	push   0x41dfffff
c0008fae:	68 00 00 c0 ff       	push   0xffc00000
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	e8 45 f6 01 00       	call   c0028605 <__gedf2>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	85 c0                	test   eax,eax
c0008fc5:	78 09                	js     c0008fd0 <src_float_to_int_array+0x76>
c0008fc7:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fce:	eb 97                	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008fd0:	68 00 00 e0 c1       	push   0xc1e00000
c0008fd5:	6a 00                	push   0x0
c0008fd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fdf:	e8 25 f6 01 00       	call   c0028609 <__ledf2>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	85 c0                	test   eax,eax
c0008fe9:	7f 0c                	jg     c0008ff7 <src_float_to_int_array+0x9d>
c0008feb:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008ff2:	e9 70 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0008ff7:	50                   	push   eax
c0008ff8:	50                   	push   eax
c0008ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009001:	e8 ba f7 01 00       	call   c00287c0 <lrint>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c000900c:	e9 56 ff ff ff       	jmp    c0008f67 <src_float_to_int_array+0xd>
c0009011:	83 c4 14             	add    esp,0x14
c0009014:	5b                   	pop    ebx
c0009015:	5e                   	pop    esi
c0009016:	c3                   	ret    

c0009017 <linear_vari_process>:
c0009017:	55                   	push   ebp
c0009018:	31 d2                	xor    edx,edx
c000901a:	57                   	push   edi
c000901b:	56                   	push   esi
c000901c:	53                   	push   ebx
c000901d:	83 ec 3c             	sub    esp,0x3c
c0009020:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009024:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009028:	0f 8e d3 07 00 00    	jle    c0009801 <linear_vari_process+0x7ea>
c000902e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009032:	ba 05 00 00 00       	mov    edx,0x5
c0009037:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000903a:	85 db                	test   ebx,ebx
c000903c:	0f 84 bf 07 00 00    	je     c0009801 <linear_vari_process+0x7ea>
c0009042:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009045:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009049:	74 19                	je     c0009064 <linear_vari_process+0x4d>
c000904b:	31 d2                	xor    edx,edx
c000904d:	39 c2                	cmp    edx,eax
c000904f:	7d 0c                	jge    c000905d <linear_vari_process+0x46>
c0009051:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009053:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009056:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000905a:	42                   	inc    edx
c000905b:	eb f0                	jmp    c000904d <linear_vari_process+0x36>
c000905d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009064:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009067:	0f af d0             	imul   edx,eax
c000906a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000906d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009071:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009078:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000907b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009082:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009086:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009089:	8b 00                	mov    eax,DWORD PTR [eax]
c000908b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000908f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009093:	68 00 00 70 3f       	push   0x3f700000
c0009098:	6a 00                	push   0x0
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a2:	e8 60 f5 01 00       	call   c0028607 <__ltdf2>
c00090a7:	83 c4 10             	add    esp,0x10
c00090aa:	ba 16 00 00 00       	mov    edx,0x16
c00090af:	85 c0                	test   eax,eax
c00090b1:	0f 88 4a 07 00 00    	js     c0009801 <linear_vari_process+0x7ea>
c00090b7:	68 00 00 70 40       	push   0x40700000
c00090bc:	6a 00                	push   0x0
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 1e f5 01 00       	call   c00285e9 <__gtdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	ba 16 00 00 00       	mov    edx,0x16
c00090d3:	85 c0                	test   eax,eax
c00090d5:	0f 8f 26 07 00 00    	jg     c0009801 <linear_vari_process+0x7ea>
c00090db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ed:	68 00 00 f0 3f       	push   0x3ff00000
c00090f2:	6a 00                	push   0x0
c00090f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	e8 06 f5 01 00       	call   c0028607 <__ltdf2>
c0009101:	83 c4 10             	add    esp,0x10
c0009104:	85 c0                	test   eax,eax
c0009106:	0f 89 89 02 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c000910c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000910f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0009112:	0f 8d 7d 02 00 00    	jge    c0009395 <linear_vari_process+0x37e>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 78 f2 01 00       	call   c002839b <__floatsidf>
c0009123:	83 c4 10             	add    esp,0x10
c0009126:	89 04 24             	mov    DWORD PTR [esp],eax
c0009129:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000912d:	68 00 00 f0 3f       	push   0x3ff00000
c0009132:	6a 00                	push   0x0
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000913c:	e8 7a e5 01 00       	call   c00276bb <__adddf3>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914c:	52                   	push   edx
c000914d:	50                   	push   eax
c000914e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	e8 dd eb 01 00       	call   c0027d38 <__muldf3>
c000915b:	5d                   	pop    ebp
c000915c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009160:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009164:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009167:	e8 2f f2 01 00       	call   c002839b <__floatsidf>
c000916c:	83 c4 10             	add    esp,0x10
c000916f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009177:	52                   	push   edx
c0009178:	50                   	push   eax
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	e8 35 e5 01 00       	call   c00276bb <__adddf3>
c0009186:	59                   	pop    ecx
c0009187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000918b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000918f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009192:	e8 04 f2 01 00       	call   c002839b <__floatsidf>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091a2:	52                   	push   edx
c00091a3:	50                   	push   eax
c00091a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ac:	e8 54 f4 01 00       	call   c0028605 <__gedf2>
c00091b1:	83 c4 10             	add    esp,0x10
c00091b4:	85 c0                	test   eax,eax
c00091b6:	0f 89 d9 01 00 00    	jns    c0009395 <linear_vari_process+0x37e>
c00091bc:	85 ff                	test   edi,edi
c00091be:	0f 8e f4 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c00091c4:	83 ec 10             	sub    esp,0x10
c00091c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091d4:	ff 30                	push   DWORD PTR [eax]
c00091d6:	e8 31 eb 01 00       	call   c0027d0c <__subdf3>
c00091db:	83 c4 18             	add    esp,0x18
c00091de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091e6:	52                   	push   edx
c00091e7:	50                   	push   eax
c00091e8:	e8 b3 f5 01 00       	call   c00287a0 <fabs>
c00091ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091fd:	68 23 42 92 0c       	push   0xc924223
c0009202:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009206:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000920a:	e8 da f3 01 00       	call   c00285e9 <__gtdf2>
c000920f:	83 c4 10             	add    esp,0x10
c0009212:	85 c0                	test   eax,eax
c0009214:	0f 8e 9e 00 00 00    	jle    c00092b8 <linear_vari_process+0x2a1>
c000921a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000921e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009221:	8b 00                	mov    eax,DWORD PTR [eax]
c0009223:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009227:	89 04 24             	mov    DWORD PTR [esp],eax
c000922a:	52                   	push   edx
c000922b:	50                   	push   eax
c000922c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000922f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009232:	e8 d5 ea 01 00       	call   c0027d0c <__subdf3>
c0009237:	59                   	pop    ecx
c0009238:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009240:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009243:	e8 53 f1 01 00       	call   c002839b <__floatsidf>
c0009248:	83 c4 10             	add    esp,0x10
c000924b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000924f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 d6 ea 01 00       	call   c0027d38 <__muldf3>
c0009262:	5f                   	pop    edi
c0009263:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009267:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000926b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000926e:	e8 28 f1 01 00       	call   c002839b <__floatsidf>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927e:	52                   	push   edx
c000927f:	50                   	push   eax
c0009280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009288:	e8 8f ed 01 00       	call   c002801c <__divdf3>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a8:	e8 0e e4 01 00       	call   c00276bb <__adddf3>
c00092ad:	83 c4 10             	add    esp,0x10
c00092b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b8:	31 ff                	xor    edi,edi
c00092ba:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092bd:	0f 8e 9d 00 00 00    	jle    c0009360 <linear_vari_process+0x349>
c00092c3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092c6:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092cd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00092d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00092d6:	52                   	push   edx
c00092d7:	52                   	push   edx
c00092d8:	55                   	push   ebp
c00092d9:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092dc:	47                   	inc    edi
c00092dd:	e8 6e dd 01 00       	call   c0027050 <__subsf3>
c00092e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00092e5:	e8 45 f4 01 00       	call   c002872f <__extendsfdf2>
c00092ea:	83 c4 10             	add    esp,0x10
c00092ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009305:	e8 2e ea 01 00       	call   c0027d38 <__muldf3>
c000930a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000930d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009315:	e8 15 f4 01 00       	call   c002872f <__extendsfdf2>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009325:	52                   	push   edx
c0009326:	50                   	push   eax
c0009327:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932f:	e8 87 e3 01 00       	call   c00276bb <__adddf3>
c0009334:	59                   	pop    ecx
c0009335:	5d                   	pop    ebp
c0009336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000933e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009342:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009346:	e8 c0 f2 01 00       	call   c002860b <__truncdfsf2>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009351:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009355:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009358:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000935b:	e9 5a ff ff ff       	jmp    c00092ba <linear_vari_process+0x2a3>
c0009360:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009368:	68 00 00 f0 3f       	push   0x3ff00000
c000936d:	6a 00                	push   0x0
c000936f:	e8 a8 ec 01 00       	call   c002801c <__divdf3>
c0009374:	83 c4 10             	add    esp,0x10
c0009377:	89 04 24             	mov    DWORD PTR [esp],eax
c000937a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009388:	e8 2e e3 01 00       	call   c00276bb <__adddf3>
c000938d:	83 c4 10             	add    esp,0x10
c0009390:	e9 50 fd ff ff       	jmp    c00090e5 <linear_vari_process+0xce>
c0009395:	50                   	push   eax
c0009396:	50                   	push   eax
c0009397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000939f:	e8 1c f4 01 00       	call   c00287c0 <lrint>
c00093a4:	83 ec 0c             	sub    esp,0xc
c00093a7:	50                   	push   eax
c00093a8:	e8 ee ef 01 00       	call   c002839b <__floatsidf>
c00093ad:	83 c4 10             	add    esp,0x10
c00093b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b8:	52                   	push   edx
c00093b9:	50                   	push   eax
c00093ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093c2:	e8 45 e9 01 00       	call   c0027d0c <__subdf3>
c00093c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093cf:	83 c4 20             	add    esp,0x20
c00093d2:	6a 00                	push   0x0
c00093d4:	6a 00                	push   0x0
c00093d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093de:	e8 24 f2 01 00       	call   c0028607 <__ltdf2>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	85 c0                	test   eax,eax
c00093e8:	79 1e                	jns    c0009408 <linear_vari_process+0x3f1>
c00093ea:	68 00 00 f0 3f       	push   0x3ff00000
c00093ef:	6a 00                	push   0x0
c00093f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f9:	e8 bd e2 01 00       	call   c00276bb <__adddf3>
c00093fe:	83 c4 10             	add    esp,0x10
c0009401:	89 04 24             	mov    DWORD PTR [esp],eax
c0009404:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009408:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000940b:	83 ec 10             	sub    esp,0x10
c000940e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009412:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009416:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	e8 e9 e8 01 00       	call   c0027d0c <__subdf3>
c0009423:	83 c4 18             	add    esp,0x18
c0009426:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000942a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000942e:	52                   	push   edx
c000942f:	50                   	push   eax
c0009430:	e8 8b f3 01 00       	call   c00287c0 <lrint>
c0009435:	83 c4 10             	add    esp,0x10
c0009438:	0f af f8             	imul   edi,eax
c000943b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000943e:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009441:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009444:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009447:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000944a:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000944e:	0f 8d 13 03 00 00    	jge    c0009767 <linear_vari_process+0x750>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000945a:	e8 3c ef 01 00       	call   c002839b <__floatsidf>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009466:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000946a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947a:	e8 b9 e8 01 00       	call   c0027d38 <__muldf3>
c000947f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009486:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948a:	e8 0c ef 01 00       	call   c002839b <__floatsidf>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	52                   	push   edx
c000949b:	50                   	push   eax
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	e8 12 e2 01 00       	call   c00276bb <__adddf3>
c00094a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b4:	e8 e2 ee 01 00       	call   c002839b <__floatsidf>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094c4:	52                   	push   edx
c00094c5:	50                   	push   eax
c00094c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	e8 34 f1 01 00       	call   c0028607 <__ltdf2>
c00094d3:	83 c4 10             	add    esp,0x10
c00094d6:	85 c0                	test   eax,eax
c00094d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094dc:	0f 89 85 02 00 00    	jns    c0009767 <linear_vari_process+0x750>
c00094e2:	85 c9                	test   ecx,ecx
c00094e4:	0f 8e f5 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c00094ea:	83 ec 10             	sub    esp,0x10
c00094ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094f0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094f3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094f7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094fa:	ff 30                	push   DWORD PTR [eax]
c00094fc:	e8 0b e8 01 00       	call   c0027d0c <__subdf3>
c0009501:	83 c4 18             	add    esp,0x18
c0009504:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009508:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000950c:	52                   	push   edx
c000950d:	50                   	push   eax
c000950e:	e8 8d f2 01 00       	call   c00287a0 <fabs>
c0009513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009517:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009523:	68 23 42 92 0c       	push   0xc924223
c0009528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000952c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009530:	e8 b4 f0 01 00       	call   c00285e9 <__gtdf2>
c0009535:	83 c4 10             	add    esp,0x10
c0009538:	85 c0                	test   eax,eax
c000953a:	0f 8e 9f 00 00 00    	jle    c00095df <linear_vari_process+0x5c8>
c0009540:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009544:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009547:	8b 00                	mov    eax,DWORD PTR [eax]
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009551:	52                   	push   edx
c0009552:	50                   	push   eax
c0009553:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009556:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009559:	e8 ae e7 01 00       	call   c0027d0c <__subdf3>
c000955e:	5f                   	pop    edi
c000955f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009563:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009567:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000956a:	e8 2c ee 01 00       	call   c002839b <__floatsidf>
c000956f:	83 c4 10             	add    esp,0x10
c0009572:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009576:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957a:	52                   	push   edx
c000957b:	50                   	push   eax
c000957c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	e8 af e7 01 00       	call   c0027d38 <__muldf3>
c0009589:	5d                   	pop    ebp
c000958a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000958e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009592:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009595:	e8 01 ee 01 00       	call   c002839b <__floatsidf>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095a5:	52                   	push   edx
c00095a6:	50                   	push   eax
c00095a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095af:	e8 68 ea 01 00       	call   c002801c <__divdf3>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cf:	e8 e7 e0 01 00       	call   c00276bb <__adddf3>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095df:	31 ff                	xor    edi,edi
c00095e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095e4:	39 f8                	cmp    eax,edi
c00095e6:	0f 8e ac 00 00 00    	jle    c0009698 <linear_vari_process+0x681>
c00095ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095f1:	29 c1                	sub    ecx,eax
c00095f3:	89 c8                	mov    eax,ecx
c00095f5:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f8:	01 f8                	add    eax,edi
c00095fa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095fe:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009601:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009604:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009608:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000960b:	51                   	push   ecx
c000960c:	01 f8                	add    eax,edi
c000960e:	51                   	push   ecx
c000960f:	47                   	inc    edi
c0009610:	55                   	push   ebp
c0009611:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009614:	e8 37 da 01 00       	call   c0027050 <__subsf3>
c0009619:	89 04 24             	mov    DWORD PTR [esp],eax
c000961c:	e8 0e f1 01 00       	call   c002872f <__extendsfdf2>
c0009621:	83 c4 10             	add    esp,0x10
c0009624:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009628:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000962c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009630:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963c:	e8 f7 e6 01 00       	call   c0027d38 <__muldf3>
c0009641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000964c:	e8 de f0 01 00       	call   c002872f <__extendsfdf2>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009658:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965c:	52                   	push   edx
c000965d:	50                   	push   eax
c000965e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009666:	e8 50 e0 01 00       	call   c00276bb <__adddf3>
c000966b:	5d                   	pop    ebp
c000966c:	59                   	pop    ecx
c000966d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009671:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009675:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009679:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967d:	e8 89 ef 01 00       	call   c002860b <__truncdfsf2>
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009689:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000968d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009690:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009693:	e9 49 ff ff ff       	jmp    c00095e1 <linear_vari_process+0x5ca>
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	68 00 00 f0 3f       	push   0x3ff00000
c00096a5:	6a 00                	push   0x0
c00096a7:	e8 70 e9 01 00       	call   c002801c <__divdf3>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c7:	e8 ef df 01 00       	call   c00276bb <__adddf3>
c00096cc:	59                   	pop    ecx
c00096cd:	5f                   	pop    edi
c00096ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096de:	e8 dd f0 01 00       	call   c00287c0 <lrint>
c00096e3:	83 ec 0c             	sub    esp,0xc
c00096e6:	50                   	push   eax
c00096e7:	e8 af ec 01 00       	call   c002839b <__floatsidf>
c00096ec:	83 c4 10             	add    esp,0x10
c00096ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096f7:	52                   	push   edx
c00096f8:	50                   	push   eax
c00096f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009701:	e8 06 e6 01 00       	call   c0027d0c <__subdf3>
c0009706:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000970a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000970e:	83 c4 20             	add    esp,0x20
c0009711:	6a 00                	push   0x0
c0009713:	6a 00                	push   0x0
c0009715:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009719:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971d:	e8 e5 ee 01 00       	call   c0028607 <__ltdf2>
c0009722:	83 c4 10             	add    esp,0x10
c0009725:	85 c0                	test   eax,eax
c0009727:	79 1e                	jns    c0009747 <linear_vari_process+0x730>
c0009729:	68 00 00 f0 3f       	push   0x3ff00000
c000972e:	6a 00                	push   0x0
c0009730:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009734:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009738:	e8 7e df 01 00       	call   c00276bb <__adddf3>
c000973d:	83 c4 10             	add    esp,0x10
c0009740:	89 04 24             	mov    DWORD PTR [esp],eax
c0009743:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009747:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000974a:	83 ec 10             	sub    esp,0x10
c000974d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009755:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009759:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000975d:	e8 aa e5 01 00       	call   c0027d0c <__subdf3>
c0009762:	e9 bc fc ff ff       	jmp    c0009423 <linear_vari_process+0x40c>
c0009767:	39 fd                	cmp    ebp,edi
c0009769:	7d 38                	jge    c00097a3 <linear_vari_process+0x78c>
c000976b:	83 ec 0c             	sub    esp,0xc
c000976e:	89 f8                	mov    eax,edi
c0009770:	29 e8                	sub    eax,ebp
c0009772:	99                   	cdq    
c0009773:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009776:	50                   	push   eax
c0009777:	e8 1f ec 01 00       	call   c002839b <__floatsidf>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009787:	52                   	push   edx
c0009788:	50                   	push   eax
c0009789:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000978d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009791:	e8 25 df 01 00       	call   c00276bb <__adddf3>
c0009796:	83 c4 10             	add    esp,0x10
c0009799:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000979c:	89 04 24             	mov    DWORD PTR [esp],eax
c000979f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097a3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ae:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097b1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b7:	85 c0                	test   eax,eax
c00097b9:	7f 29                	jg     c00097e4 <linear_vari_process+0x7cd>
c00097bb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097c7:	89 01                	mov    DWORD PTR [ecx],eax
c00097c9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097cf:	99                   	cdq    
c00097d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d9:	99                   	cdq    
c00097da:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097dd:	31 d2                	xor    edx,edx
c00097df:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097e2:	eb 1d                	jmp    c0009801 <linear_vari_process+0x7ea>
c00097e4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097e7:	31 d2                	xor    edx,edx
c00097e9:	29 c8                	sub    eax,ecx
c00097eb:	c1 e0 02             	shl    eax,0x2
c00097ee:	39 d1                	cmp    ecx,edx
c00097f0:	7e c9                	jle    c00097bb <linear_vari_process+0x7a4>
c00097f2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097f4:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097f7:	83 c0 04             	add    eax,0x4
c00097fa:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097fe:	42                   	inc    edx
c00097ff:	eb ed                	jmp    c00097ee <linear_vari_process+0x7d7>
c0009801:	83 c4 3c             	add    esp,0x3c
c0009804:	89 d0                	mov    eax,edx
c0009806:	5b                   	pop    ebx
c0009807:	5e                   	pop    esi
c0009808:	5f                   	pop    edi
c0009809:	5d                   	pop    ebp
c000980a:	c3                   	ret    

c000980b <linear_reset>:
c000980b:	83 ec 0c             	sub    esp,0xc
c000980e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009812:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009815:	85 c0                	test   eax,eax
c0009817:	74 20                	je     c0009839 <linear_reset+0x2e>
c0009819:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000981c:	83 c0 1c             	add    eax,0x1c
c000981f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009822:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009829:	c1 e2 02             	shl    edx,0x2
c000982c:	51                   	push   ecx
c000982d:	52                   	push   edx
c000982e:	6a 00                	push   0x0
c0009830:	50                   	push   eax
c0009831:	e8 4a 6f ff ff       	call   c0000780 <memset>
c0009836:	83 c4 10             	add    esp,0x10
c0009839:	83 c4 0c             	add    esp,0xc
c000983c:	c3                   	ret    

c000983d <linear_get_name>:
c000983d:	31 c0                	xor    eax,eax
c000983f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009844:	75 05                	jne    c000984b <linear_get_name+0xe>
c0009846:	b8 20 9f 02 c0       	mov    eax,0xc0029f20
c000984b:	c3                   	ret    

c000984c <linear_get_description>:
c000984c:	31 c0                	xor    eax,eax
c000984e:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009853:	75 05                	jne    c000985a <linear_get_description+0xe>
c0009855:	b8 34 9f 02 c0       	mov    eax,0xc0029f34
c000985a:	c3                   	ret    

c000985b <linear_set_converter>:
c000985b:	53                   	push   ebx
c000985c:	b8 0a 00 00 00       	mov    eax,0xa
c0009861:	83 ec 08             	sub    esp,0x8
c0009864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009868:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000986d:	75 6e                	jne    c00098dd <linear_set_converter+0x82>
c000986f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009872:	85 c0                	test   eax,eax
c0009874:	74 13                	je     c0009889 <linear_set_converter+0x2e>
c0009876:	83 ec 0c             	sub    esp,0xc
c0009879:	50                   	push   eax
c000987a:	e8 dc 5f 00 00       	call   c000f85b <free>
c000987f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009886:	83 c4 10             	add    esp,0x10
c0009889:	50                   	push   eax
c000988a:	50                   	push   eax
c000988b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009895:	50                   	push   eax
c0009896:	6a 01                	push   0x1
c0009898:	e8 de 5f 00 00       	call   c000f87b <calloc>
c000989d:	83 c4 10             	add    esp,0x10
c00098a0:	89 c2                	mov    edx,eax
c00098a2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098a5:	85 d2                	test   edx,edx
c00098a7:	b8 01 00 00 00       	mov    eax,0x1
c00098ac:	74 2f                	je     c00098dd <linear_set_converter+0x82>
c00098ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098b1:	83 ec 0c             	sub    esp,0xc
c00098b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098b7:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098bd:	c7 43 24 17 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009017
c00098c4:	c7 43 20 17 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009017
c00098cb:	c7 43 28 0b 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000980b
c00098d2:	53                   	push   ebx
c00098d3:	e8 33 ff ff ff       	call   c000980b <linear_reset>
c00098d8:	83 c4 10             	add    esp,0x10
c00098db:	31 c0                	xor    eax,eax
c00098dd:	83 c4 08             	add    esp,0x8
c00098e0:	5b                   	pop    ebx
c00098e1:	c3                   	ret    

c00098e2 <int_to_fp>:
c00098e2:	c1 e0 0c             	shl    eax,0xc
c00098e5:	c3                   	ret    

c00098e6 <fp_to_int>:
c00098e6:	c1 f8 0c             	sar    eax,0xc
c00098e9:	c3                   	ret    

c00098ea <fp_fraction_part>:
c00098ea:	25 ff 0f 00 00       	and    eax,0xfff
c00098ef:	c3                   	ret    

c00098f0 <fp_to_double>:
c00098f0:	83 ec 1c             	sub    esp,0x1c
c00098f3:	e8 f2 ff ff ff       	call   c00098ea <fp_fraction_part>
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 9a ea 01 00       	call   c002839b <__floatsidf>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000990c:	68 00 00 30 3f       	push   0x3f300000
c0009911:	6a 00                	push   0x0
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 18 e4 01 00       	call   c0027d38 <__muldf3>
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <calc_output_single>:
c0009924:	55                   	push   ebp
c0009925:	57                   	push   edi
c0009926:	56                   	push   esi
c0009927:	89 c6                	mov    esi,eax
c0009929:	53                   	push   ebx
c000992a:	89 d3                	mov    ebx,edx
c000992c:	83 ec 4c             	sub    esp,0x4c
c000992f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009936:	e8 a7 ff ff ff       	call   c00098e2 <int_to_fp>
c000993b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000993e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009942:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009946:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000994a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000994d:	99                   	cdq    
c000994e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009956:	f7 fb                	idiv   ebx
c0009958:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009960:	89 da                	mov    edx,ebx
c0009962:	0f af d0             	imul   edx,eax
c0009965:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009969:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000996d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009971:	29 c2                	sub    edx,eax
c0009973:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000997a:	83 c5 04             	add    ebp,0x4
c000997d:	e8 6e ff ff ff       	call   c00098f0 <fp_to_double>
c0009982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009986:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000998a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000998e:	e8 53 ff ff ff       	call   c00098e6 <fp_to_int>
c0009993:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009996:	52                   	push   edx
c0009997:	52                   	push   edx
c0009998:	51                   	push   ecx
c0009999:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000999d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099a1:	e8 aa d6 01 00       	call   c0027050 <__subsf3>
c00099a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a9:	e8 81 ed 01 00       	call   c002872f <__extendsfdf2>
c00099ae:	83 c4 10             	add    esp,0x10
c00099b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c9:	e8 6a e3 01 00       	call   c0027d38 <__muldf3>
c00099ce:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099dd:	e8 4d ed 01 00       	call   c002872f <__extendsfdf2>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ed:	52                   	push   edx
c00099ee:	50                   	push   eax
c00099ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f7:	e8 bf dc 01 00       	call   c00276bb <__adddf3>
c00099fc:	59                   	pop    ecx
c00099fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a05:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a0b:	e8 1f ed 01 00       	call   c002872f <__extendsfdf2>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a25:	e8 0e e3 01 00       	call   c0027d38 <__muldf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a35:	52                   	push   edx
c0009a36:	50                   	push   eax
c0009a37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a3f:	e8 77 dc 01 00       	call   c00276bb <__adddf3>
c0009a44:	83 c4 10             	add    esp,0x10
c0009a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a4f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a53:	0f 89 1d ff ff ff    	jns    c0009976 <calc_output_single+0x52>
c0009a59:	89 d9                	mov    ecx,ebx
c0009a5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a5f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a63:	89 dd                	mov    ebp,ebx
c0009a65:	29 c8                	sub    eax,ecx
c0009a67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a6f:	99                   	cdq    
c0009a70:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a78:	f7 fb                	idiv   ebx
c0009a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a7e:	0f af e8             	imul   ebp,eax
c0009a81:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a85:	01 cd                	add    ebp,ecx
c0009a87:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a8a:	89 e8                	mov    eax,ebp
c0009a8c:	83 ee 04             	sub    esi,0x4
c0009a8f:	e8 5c fe ff ff       	call   c00098f0 <fp_to_double>
c0009a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a9c:	89 e8                	mov    eax,ebp
c0009a9e:	29 dd                	sub    ebp,ebx
c0009aa0:	e8 41 fe ff ff       	call   c00098e6 <fp_to_int>
c0009aa5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa8:	52                   	push   edx
c0009aa9:	52                   	push   edx
c0009aaa:	51                   	push   ecx
c0009aab:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aaf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009ab3:	e8 98 d5 01 00       	call   c0027050 <__subsf3>
c0009ab8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009abb:	e8 6f ec 01 00       	call   c002872f <__extendsfdf2>
c0009ac0:	83 c4 10             	add    esp,0x10
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009adb:	e8 58 e2 01 00       	call   c0027d38 <__muldf3>
c0009ae0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009ae4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aef:	e8 3b ec 01 00       	call   c002872f <__extendsfdf2>
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009afb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aff:	52                   	push   edx
c0009b00:	50                   	push   eax
c0009b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b09:	e8 ad db 01 00       	call   c00276bb <__adddf3>
c0009b0e:	59                   	pop    ecx
c0009b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b17:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b1d:	e8 0d ec 01 00       	call   c002872f <__extendsfdf2>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b29:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b37:	e8 fc e1 01 00       	call   c0027d38 <__muldf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b47:	52                   	push   edx
c0009b48:	50                   	push   eax
c0009b49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b51:	e8 65 db 01 00       	call   c00276bb <__adddf3>
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	85 ed                	test   ebp,ebp
c0009b5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b63:	0f 8f 21 ff ff ff    	jg     c0009a8a <calc_output_single+0x166>
c0009b69:	52                   	push   edx
c0009b6a:	50                   	push   eax
c0009b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b73:	e8 43 db 01 00       	call   c00276bb <__adddf3>
c0009b78:	83 c4 5c             	add    esp,0x5c
c0009b7b:	5b                   	pop    ebx
c0009b7c:	5e                   	pop    esi
c0009b7d:	5f                   	pop    edi
c0009b7e:	5d                   	pop    ebp
c0009b7f:	c3                   	ret    

c0009b80 <calc_output_stereo>:
c0009b80:	55                   	push   ebp
c0009b81:	89 cd                	mov    ebp,ecx
c0009b83:	57                   	push   edi
c0009b84:	56                   	push   esi
c0009b85:	53                   	push   ebx
c0009b86:	89 c3                	mov    ebx,eax
c0009b88:	83 ec 6c             	sub    esp,0x6c
c0009b8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b9d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009ba1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ba5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba8:	e8 35 fd ff ff       	call   c00098e2 <int_to_fp>
c0009bad:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bc1:	29 c8                	sub    eax,ecx
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bcc:	0f af d0             	imul   edx,eax
c0009bcf:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bd2:	31 d2                	xor    edx,edx
c0009bd4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bdc:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bdf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009be3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bee:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bf1:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bf6:	29 c1                	sub    ecx,eax
c0009bf8:	31 c0                	xor    eax,eax
c0009bfa:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c05:	83 c7 08             	add    edi,0x8
c0009c08:	e8 e3 fc ff ff       	call   c00098f0 <fp_to_double>
c0009c0d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c11:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c19:	e8 c8 fc ff ff       	call   c00098e6 <fp_to_int>
c0009c1e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c21:	52                   	push   edx
c0009c22:	52                   	push   edx
c0009c23:	51                   	push   ecx
c0009c24:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c28:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c2c:	e8 1f d4 01 00       	call   c0027050 <__subsf3>
c0009c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c34:	e8 f6 ea 01 00       	call   c002872f <__extendsfdf2>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c40:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c54:	e8 df e0 01 00       	call   c0027d38 <__muldf3>
c0009c59:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c5d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c64:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c68:	e8 c2 ea 01 00       	call   c002872f <__extendsfdf2>
c0009c6d:	83 c4 10             	add    esp,0x10
c0009c70:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c74:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c78:	52                   	push   edx
c0009c79:	50                   	push   eax
c0009c7a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c82:	e8 34 da 01 00       	call   c00276bb <__adddf3>
c0009c87:	59                   	pop    ecx
c0009c88:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c8c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c90:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c96:	e8 94 ea 01 00       	call   c002872f <__extendsfdf2>
c0009c9b:	83 c4 10             	add    esp,0x10
c0009c9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ca6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009caa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cb6:	e8 7d e0 01 00       	call   c0027d38 <__muldf3>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc6:	52                   	push   edx
c0009cc7:	50                   	push   eax
c0009cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cd0:	e8 e6 d9 01 00       	call   c00276bb <__adddf3>
c0009cd5:	59                   	pop    ecx
c0009cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cda:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cde:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ce4:	e8 46 ea 01 00       	call   c002872f <__extendsfdf2>
c0009ce9:	83 c4 10             	add    esp,0x10
c0009cec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cfc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d00:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d04:	e8 2f e0 01 00       	call   c0027d38 <__muldf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d10:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d14:	52                   	push   edx
c0009d15:	50                   	push   eax
c0009d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1e:	e8 98 d9 01 00       	call   c00276bb <__adddf3>
c0009d23:	83 c4 10             	add    esp,0x10
c0009d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d2e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d32:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d36:	0f 89 c5 fe ff ff    	jns    c0009c01 <calc_output_stereo+0x81>
c0009d3c:	29 e9                	sub    ecx,ebp
c0009d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d46:	29 c8                	sub    eax,ecx
c0009d48:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d50:	99                   	cdq    
c0009d51:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d55:	31 d2                	xor    edx,edx
c0009d57:	0f af f8             	imul   edi,eax
c0009d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d5e:	40                   	inc    eax
c0009d5f:	01 cf                	add    edi,ecx
c0009d61:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d66:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d72:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d7b:	89 f8                	mov    eax,edi
c0009d7d:	83 eb 08             	sub    ebx,0x8
c0009d80:	e8 6b fb ff ff       	call   c00098f0 <fp_to_double>
c0009d85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d8d:	89 f8                	mov    eax,edi
c0009d8f:	e8 52 fb ff ff       	call   c00098e6 <fp_to_int>
c0009d94:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d97:	52                   	push   edx
c0009d98:	52                   	push   edx
c0009d99:	55                   	push   ebp
c0009d9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d9e:	e8 ad d2 01 00       	call   c0027050 <__subsf3>
c0009da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009da6:	e8 84 e9 01 00       	call   c002872f <__extendsfdf2>
c0009dab:	83 c4 10             	add    esp,0x10
c0009dae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009db2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009db6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dc6:	e8 6d df 01 00       	call   c0027d38 <__muldf3>
c0009dcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dd2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dd6:	e8 54 e9 01 00       	call   c002872f <__extendsfdf2>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009de6:	52                   	push   edx
c0009de7:	50                   	push   eax
c0009de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009df0:	e8 c6 d8 01 00       	call   c00276bb <__adddf3>
c0009df5:	59                   	pop    ecx
c0009df6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dfa:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dfe:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e04:	e8 26 e9 01 00       	call   c002872f <__extendsfdf2>
c0009e09:	83 c4 10             	add    esp,0x10
c0009e0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e24:	e8 0f df 01 00       	call   c0027d38 <__muldf3>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e30:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e34:	52                   	push   edx
c0009e35:	50                   	push   eax
c0009e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e3e:	e8 78 d8 01 00       	call   c00276bb <__adddf3>
c0009e43:	5d                   	pop    ebp
c0009e44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e48:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e4c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e52:	e8 d8 e8 01 00       	call   c002872f <__extendsfdf2>
c0009e57:	83 c4 10             	add    esp,0x10
c0009e5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e72:	e8 c1 de 01 00       	call   c0027d38 <__muldf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e82:	52                   	push   edx
c0009e83:	50                   	push   eax
c0009e84:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e8c:	e8 2a d8 01 00       	call   c00276bb <__adddf3>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e9c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ea0:	85 ff                	test   edi,edi
c0009ea2:	0f 8f d3 fe ff ff    	jg     c0009d7b <calc_output_stereo+0x1fb>
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb8:	e8 fe d7 01 00       	call   c00276bb <__adddf3>
c0009ebd:	83 c4 10             	add    esp,0x10
c0009ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed8:	e8 5b de 01 00       	call   c0027d38 <__muldf3>
c0009edd:	59                   	pop    ecx
c0009ede:	5b                   	pop    ebx
c0009edf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ee3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eef:	e8 17 e7 01 00       	call   c002860b <__truncdfsf2>
c0009ef4:	83 c4 10             	add    esp,0x10
c0009ef7:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009efe:	89 03                	mov    DWORD PTR [ebx],eax
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f10:	e8 a6 d7 01 00       	call   c00276bb <__adddf3>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f30:	e8 03 de 01 00       	call   c0027d38 <__muldf3>
c0009f35:	5e                   	pop    esi
c0009f36:	5f                   	pop    edi
c0009f37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f47:	e8 bf e6 01 00       	call   c002860b <__truncdfsf2>
c0009f4c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f53:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f56:	83 c4 7c             	add    esp,0x7c
c0009f59:	5b                   	pop    ebx
c0009f5a:	5e                   	pop    esi
c0009f5b:	5f                   	pop    edi
c0009f5c:	5d                   	pop    ebp
c0009f5d:	c3                   	ret    

c0009f5e <calc_output_quad>:
c0009f5e:	55                   	push   ebp
c0009f5f:	57                   	push   edi
c0009f60:	56                   	push   esi
c0009f61:	89 c6                	mov    esi,eax
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 7c             	sub    esp,0x7c
c0009f67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f6b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f6f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f76:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f85:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f88:	e8 55 f9 ff ff       	call   c00098e2 <int_to_fp>
c0009f8d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f90:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f93:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f9f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fa3:	99                   	cdq    
c0009fa4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fac:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009faf:	31 d2                	xor    edx,edx
c0009fb1:	0f af d8             	imul   ebx,eax
c0009fb4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fbc:	0f af c7             	imul   eax,edi
c0009fbf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fc3:	29 c1                	sub    ecx,eax
c0009fc5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fcd:	31 c0                	xor    eax,eax
c0009fcf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fe2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fe6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fea:	89 d8                	mov    eax,ebx
c0009fec:	83 c7 10             	add    edi,0x10
c0009fef:	e8 fc f8 ff ff       	call   c00098f0 <fp_to_double>
c0009ff4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ffc:	89 d8                	mov    eax,ebx
c0009ffe:	e8 e3 f8 ff ff       	call   c00098e6 <fp_to_int>
c000a003:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a007:	52                   	push   edx
c000a008:	52                   	push   edx
c000a009:	51                   	push   ecx
c000a00a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a00e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a012:	e8 39 d0 01 00       	call   c0027050 <__subsf3>
c000a017:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01a:	e8 10 e7 01 00       	call   c002872f <__extendsfdf2>
c000a01f:	83 c4 10             	add    esp,0x10
c000a022:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a026:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a032:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a036:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03a:	e8 f9 dc 01 00       	call   c0027d38 <__muldf3>
c000a03f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a043:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a047:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04e:	e8 dc e6 01 00       	call   c002872f <__extendsfdf2>
c000a053:	83 c4 10             	add    esp,0x10
c000a056:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05e:	52                   	push   edx
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a068:	e8 4e d6 01 00       	call   c00276bb <__adddf3>
c000a06d:	59                   	pop    ecx
c000a06e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a072:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a076:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a07c:	e8 ae e6 01 00       	call   c002872f <__extendsfdf2>
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a088:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	e8 97 dc 01 00       	call   c0027d38 <__muldf3>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0b6:	e8 00 d6 01 00       	call   c00276bb <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0c4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0ca:	e8 60 e6 01 00       	call   c002872f <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 49 dc 01 00       	call   c0027d38 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a100:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a104:	e8 b2 d5 01 00       	call   c00276bb <__adddf3>
c000a109:	59                   	pop    ecx
c000a10a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a10e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a112:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a118:	e8 12 e6 01 00       	call   c002872f <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 fb db 01 00       	call   c0027d38 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a152:	e8 64 d5 01 00       	call   c00276bb <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a15c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a160:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a166:	e8 c4 e5 01 00       	call   c002872f <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 ad db 01 00       	call   c0027d38 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a19c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1a0:	e8 16 d5 01 00       	call   c00276bb <__adddf3>
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1ac:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1b0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1b4:	0f 89 30 fe ff ff    	jns    c0009fea <calc_output_quad+0x8c>
c000a1ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1c2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1c6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1d2:	29 c8                	sub    eax,ecx
c000a1d4:	99                   	cdq    
c000a1d5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d9:	31 d2                	xor    edx,edx
c000a1db:	0f af d8             	imul   ebx,eax
c000a1de:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1e2:	40                   	inc    eax
c000a1e3:	01 cb                	add    ebx,ecx
c000a1e5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1ea:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ee:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1f6:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a201:	31 c0                	xor    eax,eax
c000a203:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a207:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a20f:	89 d8                	mov    eax,ebx
c000a211:	83 ee 10             	sub    esi,0x10
c000a214:	e8 d7 f6 ff ff       	call   c00098f0 <fp_to_double>
c000a219:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a21d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a221:	89 d8                	mov    eax,ebx
c000a223:	e8 be f6 ff ff       	call   c00098e6 <fp_to_int>
c000a228:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a22c:	52                   	push   edx
c000a22d:	52                   	push   edx
c000a22e:	57                   	push   edi
c000a22f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a233:	e8 18 ce 01 00       	call   c0027050 <__subsf3>
c000a238:	89 04 24             	mov    DWORD PTR [esp],eax
c000a23b:	e8 ef e4 01 00       	call   c002872f <__extendsfdf2>
c000a240:	83 c4 10             	add    esp,0x10
c000a243:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a247:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a253:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a257:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a25b:	e8 d8 da 01 00       	call   c0027d38 <__muldf3>
c000a260:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a26b:	e8 bf e4 01 00       	call   c002872f <__extendsfdf2>
c000a270:	83 c4 10             	add    esp,0x10
c000a273:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a277:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a27b:	52                   	push   edx
c000a27c:	50                   	push   eax
c000a27d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a281:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a285:	e8 31 d4 01 00       	call   c00276bb <__adddf3>
c000a28a:	59                   	pop    ecx
c000a28b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a28f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a293:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a299:	e8 91 e4 01 00       	call   c002872f <__extendsfdf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b9:	e8 7a da 01 00       	call   c0027d38 <__muldf3>
c000a2be:	83 c4 10             	add    esp,0x10
c000a2c1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c9:	52                   	push   edx
c000a2ca:	50                   	push   eax
c000a2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2d3:	e8 e3 d3 01 00       	call   c00276bb <__adddf3>
c000a2d8:	5f                   	pop    edi
c000a2d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2e1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2e7:	e8 43 e4 01 00       	call   c002872f <__extendsfdf2>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a303:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a307:	e8 2c da 01 00       	call   c0027d38 <__muldf3>
c000a30c:	83 c4 10             	add    esp,0x10
c000a30f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a313:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a317:	52                   	push   edx
c000a318:	50                   	push   eax
c000a319:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a31d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a321:	e8 95 d3 01 00       	call   c00276bb <__adddf3>
c000a326:	59                   	pop    ecx
c000a327:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a32b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a32f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a335:	e8 f5 e3 01 00       	call   c002872f <__extendsfdf2>
c000a33a:	83 c4 10             	add    esp,0x10
c000a33d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a341:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a34d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a351:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a355:	e8 de d9 01 00       	call   c0027d38 <__muldf3>
c000a35a:	83 c4 10             	add    esp,0x10
c000a35d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a361:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a365:	52                   	push   edx
c000a366:	50                   	push   eax
c000a367:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a36f:	e8 47 d3 01 00       	call   c00276bb <__adddf3>
c000a374:	5f                   	pop    edi
c000a375:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a379:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a37d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a383:	e8 a7 e3 01 00       	call   c002872f <__extendsfdf2>
c000a388:	83 c4 10             	add    esp,0x10
c000a38b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a38f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a39b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3a3:	e8 90 d9 01 00       	call   c0027d38 <__muldf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3b3:	52                   	push   edx
c000a3b4:	50                   	push   eax
c000a3b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3bd:	e8 f9 d2 01 00       	call   c00276bb <__adddf3>
c000a3c2:	83 c4 10             	add    esp,0x10
c000a3c5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3cd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3d1:	85 db                	test   ebx,ebx
c000a3d3:	0f 8f 36 fe ff ff    	jg     c000a20f <calc_output_quad+0x2b1>
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e9:	e8 cd d2 01 00       	call   c00276bb <__adddf3>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a405:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a409:	e8 2a d9 01 00       	call   c0027d38 <__muldf3>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a418:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a420:	e8 e6 e1 01 00       	call   c002860b <__truncdfsf2>
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a42f:	89 06                	mov    DWORD PTR [esi],eax
c000a431:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a435:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a439:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a43d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a441:	e8 75 d2 01 00       	call   c00276bb <__adddf3>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a44d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a461:	e8 d2 d8 01 00       	call   c0027d38 <__muldf3>
c000a466:	5e                   	pop    esi
c000a467:	5f                   	pop    edi
c000a468:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a46c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 8e e1 01 00       	call   c002860b <__truncdfsf2>
c000a47d:	83 c4 10             	add    esp,0x10
c000a480:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a487:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a48a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a492:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a49a:	e8 1c d2 01 00       	call   c00276bb <__adddf3>
c000a49f:	83 c4 10             	add    esp,0x10
c000a4a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ba:	e8 79 d8 01 00       	call   c0027d38 <__muldf3>
c000a4bf:	5d                   	pop    ebp
c000a4c0:	59                   	pop    ecx
c000a4c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 35 e1 01 00       	call   c002860b <__truncdfsf2>
c000a4d6:	83 c4 10             	add    esp,0x10
c000a4d9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4e0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4f3:	e8 c3 d1 01 00       	call   c00276bb <__adddf3>
c000a4f8:	83 c4 10             	add    esp,0x10
c000a4fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a513:	e8 20 d8 01 00       	call   c0027d38 <__muldf3>
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a51e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a522:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a526:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52a:	e8 dc e0 01 00       	call   c002860b <__truncdfsf2>
c000a52f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a536:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a539:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a53f:	5b                   	pop    ebx
c000a540:	5e                   	pop    esi
c000a541:	5f                   	pop    edi
c000a542:	5d                   	pop    ebp
c000a543:	c3                   	ret    

c000a544 <calc_output_hex>:
c000a544:	55                   	push   ebp
c000a545:	89 cd                	mov    ebp,ecx
c000a547:	57                   	push   edi
c000a548:	56                   	push   esi
c000a549:	53                   	push   ebx
c000a54a:	89 c3                	mov    ebx,eax
c000a54c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a552:	89 14 24             	mov    DWORD PTR [esp],edx
c000a555:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a55c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a56e:	e8 6f f3 ff ff       	call   c00098e2 <int_to_fp>
c000a573:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a576:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a57a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a57d:	29 c8                	sub    eax,ecx
c000a57f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a583:	99                   	cdq    
c000a584:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a58c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a58f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a597:	0f af f8             	imul   edi,eax
c000a59a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a59d:	01 cf                	add    edi,ecx
c000a59f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5a3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5aa:	0f af c2             	imul   eax,edx
c000a5ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5b1:	29 c1                	sub    ecx,eax
c000a5b3:	31 d2                	xor    edx,edx
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5d6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5e2:	89 f8                	mov    eax,edi
c000a5e4:	e8 07 f3 ff ff       	call   c00098f0 <fp_to_double>
c000a5e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f1:	89 f8                	mov    eax,edi
c000a5f3:	e8 ee f2 ff ff       	call   c00098e6 <fp_to_int>
c000a5f8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5fc:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5ff:	52                   	push   edx
c000a600:	52                   	push   edx
c000a601:	51                   	push   ecx
c000a602:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a606:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a60d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a611:	e8 3a ca 01 00       	call   c0027050 <__subsf3>
c000a616:	89 04 24             	mov    DWORD PTR [esp],eax
c000a619:	e8 11 e1 01 00       	call   c002872f <__extendsfdf2>
c000a61e:	83 c4 10             	add    esp,0x10
c000a621:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a625:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a631:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a635:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a639:	e8 fa d6 01 00       	call   c0027d38 <__muldf3>
c000a63e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a642:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a646:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a64d:	e8 dd e0 01 00       	call   c002872f <__extendsfdf2>
c000a652:	83 c4 10             	add    esp,0x10
c000a655:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a659:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a65d:	52                   	push   edx
c000a65e:	50                   	push   eax
c000a65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a667:	e8 4f d0 01 00       	call   c00276bb <__adddf3>
c000a66c:	59                   	pop    ecx
c000a66d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a671:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a675:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a67b:	e8 af e0 01 00       	call   c002872f <__extendsfdf2>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a687:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a693:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a697:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a69b:	e8 98 d6 01 00       	call   c0027d38 <__muldf3>
c000a6a0:	83 c4 10             	add    esp,0x10
c000a6a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ab:	52                   	push   edx
c000a6ac:	50                   	push   eax
c000a6ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6b5:	e8 01 d0 01 00       	call   c00276bb <__adddf3>
c000a6ba:	59                   	pop    ecx
c000a6bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6c3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c9:	e8 61 e0 01 00       	call   c002872f <__extendsfdf2>
c000a6ce:	83 c4 10             	add    esp,0x10
c000a6d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e9:	e8 4a d6 01 00       	call   c0027d38 <__muldf3>
c000a6ee:	83 c4 10             	add    esp,0x10
c000a6f1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f9:	52                   	push   edx
c000a6fa:	50                   	push   eax
c000a6fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a703:	e8 b3 cf 01 00       	call   c00276bb <__adddf3>
c000a708:	59                   	pop    ecx
c000a709:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a70d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a711:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a717:	e8 13 e0 01 00       	call   c002872f <__extendsfdf2>
c000a71c:	83 c4 10             	add    esp,0x10
c000a71f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a723:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a733:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a737:	e8 fc d5 01 00       	call   c0027d38 <__muldf3>
c000a73c:	83 c4 10             	add    esp,0x10
c000a73f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a743:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a747:	52                   	push   edx
c000a748:	50                   	push   eax
c000a749:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a74d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a751:	e8 65 cf 01 00       	call   c00276bb <__adddf3>
c000a756:	59                   	pop    ecx
c000a757:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a75b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a75f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a765:	e8 c5 df 01 00       	call   c002872f <__extendsfdf2>
c000a76a:	83 c4 10             	add    esp,0x10
c000a76d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a771:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a77d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a781:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a785:	e8 ae d5 01 00       	call   c0027d38 <__muldf3>
c000a78a:	83 c4 10             	add    esp,0x10
c000a78d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a791:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a795:	52                   	push   edx
c000a796:	50                   	push   eax
c000a797:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a79f:	e8 17 cf 01 00       	call   c00276bb <__adddf3>
c000a7a4:	59                   	pop    ecx
c000a7a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7ad:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7b3:	e8 77 df 01 00       	call   c002872f <__extendsfdf2>
c000a7b8:	83 c4 10             	add    esp,0x10
c000a7bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7d3:	e8 60 d5 01 00       	call   c0027d38 <__muldf3>
c000a7d8:	83 c4 10             	add    esp,0x10
c000a7db:	83 c6 18             	add    esi,0x18
c000a7de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7e6:	52                   	push   edx
c000a7e7:	50                   	push   eax
c000a7e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7f0:	e8 c6 ce 01 00       	call   c00276bb <__adddf3>
c000a7f5:	59                   	pop    ecx
c000a7f6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7fa:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7fe:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a804:	e8 26 df 01 00       	call   c002872f <__extendsfdf2>
c000a809:	83 c4 10             	add    esp,0x10
c000a80c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a810:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a81c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a820:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a824:	e8 0f d5 01 00       	call   c0027d38 <__muldf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a830:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a834:	52                   	push   edx
c000a835:	50                   	push   eax
c000a836:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a83e:	e8 78 ce 01 00       	call   c00276bb <__adddf3>
c000a843:	83 c4 10             	add    esp,0x10
c000a846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a84e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a851:	0f 89 8b fd ff ff    	jns    c000a5e2 <calc_output_hex+0x9e>
c000a857:	31 f6                	xor    esi,esi
c000a859:	31 ff                	xor    edi,edi
c000a85b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a85f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a862:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a866:	29 e9                	sub    ecx,ebp
c000a868:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a86c:	29 c8                	sub    eax,ecx
c000a86e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a871:	99                   	cdq    
c000a872:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a876:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a879:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a87d:	0f af e8             	imul   ebp,eax
c000a880:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a884:	40                   	inc    eax
c000a885:	01 cd                	add    ebp,ecx
c000a887:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a88c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a890:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a894:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a898:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a89b:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a89f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8a3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8a7:	89 e8                	mov    eax,ebp
c000a8a9:	e8 42 f0 ff ff       	call   c00098f0 <fp_to_double>
c000a8ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8b6:	89 e8                	mov    eax,ebp
c000a8b8:	e8 29 f0 ff ff       	call   c00098e6 <fp_to_int>
c000a8bd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8c1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8c4:	52                   	push   edx
c000a8c5:	52                   	push   edx
c000a8c6:	51                   	push   ecx
c000a8c7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d9:	e8 72 c7 01 00       	call   c0027050 <__subsf3>
c000a8de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e1:	e8 49 de 01 00       	call   c002872f <__extendsfdf2>
c000a8e6:	83 c4 10             	add    esp,0x10
c000a8e9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ed:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a901:	e8 32 d4 01 00       	call   c0027d38 <__muldf3>
c000a906:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a90d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a911:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a914:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a918:	e8 12 de 01 00       	call   c002872f <__extendsfdf2>
c000a91d:	83 c4 10             	add    esp,0x10
c000a920:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a924:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a928:	52                   	push   edx
c000a929:	50                   	push   eax
c000a92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a932:	e8 84 cd 01 00       	call   c00276bb <__adddf3>
c000a937:	59                   	pop    ecx
c000a938:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a93c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a940:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a946:	e8 e4 dd 01 00       	call   c002872f <__extendsfdf2>
c000a94b:	83 c4 10             	add    esp,0x10
c000a94e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a952:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a956:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a95e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a962:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a966:	e8 cd d3 01 00       	call   c0027d38 <__muldf3>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a972:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a976:	52                   	push   edx
c000a977:	50                   	push   eax
c000a978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a97c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a980:	e8 36 cd 01 00       	call   c00276bb <__adddf3>
c000a985:	59                   	pop    ecx
c000a986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a98a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a98e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a994:	e8 96 dd 01 00       	call   c002872f <__extendsfdf2>
c000a999:	83 c4 10             	add    esp,0x10
c000a99c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ac:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9b4:	e8 7f d3 01 00       	call   c0027d38 <__muldf3>
c000a9b9:	83 c4 10             	add    esp,0x10
c000a9bc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c4:	52                   	push   edx
c000a9c5:	50                   	push   eax
c000a9c6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ca:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ce:	e8 e8 cc 01 00       	call   c00276bb <__adddf3>
c000a9d3:	59                   	pop    ecx
c000a9d4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9dc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9e2:	e8 48 dd 01 00       	call   c002872f <__extendsfdf2>
c000a9e7:	83 c4 10             	add    esp,0x10
c000a9ea:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ee:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa02:	e8 31 d3 01 00       	call   c0027d38 <__muldf3>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa12:	52                   	push   edx
c000aa13:	50                   	push   eax
c000aa14:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa1c:	e8 9a cc 01 00       	call   c00276bb <__adddf3>
c000aa21:	59                   	pop    ecx
c000aa22:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa26:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa2a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa30:	e8 fa dc 01 00       	call   c002872f <__extendsfdf2>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa3c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa48:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa4c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa50:	e8 e3 d2 01 00       	call   c0027d38 <__muldf3>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa5c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa60:	52                   	push   edx
c000aa61:	50                   	push   eax
c000aa62:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa66:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa6a:	e8 4c cc 01 00       	call   c00276bb <__adddf3>
c000aa6f:	59                   	pop    ecx
c000aa70:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa74:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa78:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa7e:	e8 ac dc 01 00       	call   c002872f <__extendsfdf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa8a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa96:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa9e:	e8 95 d2 01 00       	call   c0027d38 <__muldf3>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	83 eb 18             	sub    ebx,0x18
c000aaa9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaad:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab1:	52                   	push   edx
c000aab2:	50                   	push   eax
c000aab3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aabb:	e8 fb cb 01 00       	call   c00276bb <__adddf3>
c000aac0:	59                   	pop    ecx
c000aac1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aac5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aacf:	e8 5b dc 01 00       	call   c002872f <__extendsfdf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aadb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aadf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aae7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaeb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaef:	e8 44 d2 01 00       	call   c0027d38 <__muldf3>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaff:	52                   	push   edx
c000ab00:	50                   	push   eax
c000ab01:	57                   	push   edi
c000ab02:	56                   	push   esi
c000ab03:	e8 b3 cb 01 00       	call   c00276bb <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 c6                	mov    esi,eax
c000ab0d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab10:	89 d7                	mov    edi,edx
c000ab12:	85 ed                	test   ebp,ebp
c000ab14:	0f 8f 8d fd ff ff    	jg     c000a8a7 <calc_output_hex+0x363>
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab2a:	e8 8c cb 01 00       	call   c00276bb <__adddf3>
c000ab2f:	83 c4 10             	add    esp,0x10
c000ab32:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab49:	e8 ea d1 01 00       	call   c0027d38 <__muldf3>
c000ab4e:	59                   	pop    ecx
c000ab4f:	5b                   	pop    ebx
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab60:	e8 a6 da 01 00       	call   c002860b <__truncdfsf2>
c000ab65:	83 c4 10             	add    esp,0x10
c000ab68:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab6f:	89 03                	mov    DWORD PTR [ebx],eax
c000ab71:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab81:	e8 35 cb 01 00       	call   c00276bb <__adddf3>
c000ab86:	83 c4 10             	add    esp,0x10
c000ab89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba0:	e8 93 d1 01 00       	call   c0027d38 <__muldf3>
c000aba5:	5d                   	pop    ebp
c000aba6:	59                   	pop    ecx
c000aba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb7:	e8 4f da 01 00       	call   c002860b <__truncdfsf2>
c000abbc:	83 c4 10             	add    esp,0x10
c000abbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abc6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abcd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd9:	e8 dd ca 01 00       	call   c00276bb <__adddf3>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf8:	e8 3b d1 01 00       	call   c0027d38 <__muldf3>
c000abfd:	5b                   	pop    ebx
c000abfe:	5d                   	pop    ebp
c000abff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0f:	e8 f7 d9 01 00       	call   c002860b <__truncdfsf2>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac21:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac31:	e8 85 ca 01 00       	call   c00276bb <__adddf3>
c000ac36:	83 c4 10             	add    esp,0x10
c000ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac50:	e8 e3 d0 01 00       	call   c0027d38 <__muldf3>
c000ac55:	59                   	pop    ecx
c000ac56:	5b                   	pop    ebx
c000ac57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac67:	e8 9f d9 01 00       	call   c002860b <__truncdfsf2>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac76:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac89:	e8 2d ca 01 00       	call   c00276bb <__adddf3>
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca8:	e8 8b d0 01 00       	call   c0027d38 <__muldf3>
c000acad:	5d                   	pop    ebp
c000acae:	59                   	pop    ecx
c000acaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbf:	e8 47 d9 01 00       	call   c002860b <__truncdfsf2>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acce:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acd1:	57                   	push   edi
c000acd2:	56                   	push   esi
c000acd3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acdb:	e8 db c9 01 00       	call   c00276bb <__adddf3>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acfa:	e8 39 d0 01 00       	call   c0027d38 <__muldf3>
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad11:	e8 f5 d8 01 00       	call   c002860b <__truncdfsf2>
c000ad16:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad1d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad20:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad26:	5b                   	pop    ebx
c000ad27:	5e                   	pop    esi
c000ad28:	5f                   	pop    edi
c000ad29:	5d                   	pop    ebp
c000ad2a:	c3                   	ret    

c000ad2b <sinc_reset>:
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	51                   	push   ecx
c000ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad32:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad35:	85 db                	test   ebx,ebx
c000ad37:	74 59                	je     c000ad92 <sinc_reset+0x67>
c000ad39:	31 d2                	xor    edx,edx
c000ad3b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad42:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad45:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad48:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad4f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad56:	31 c0                	xor    eax,eax
c000ad58:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad5e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad64:	52                   	push   edx
c000ad65:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad68:	c1 e0 02             	shl    eax,0x2
c000ad6b:	50                   	push   eax
c000ad6c:	6a 00                	push   0x0
c000ad6e:	56                   	push   esi
c000ad6f:	e8 0c 5a ff ff       	call   c0000780 <memset>
c000ad74:	83 c4 0c             	add    esp,0xc
c000ad77:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad7a:	c1 e0 02             	shl    eax,0x2
c000ad7d:	50                   	push   eax
c000ad7e:	68 aa 00 00 00       	push   0xaa
c000ad83:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad86:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad89:	50                   	push   eax
c000ad8a:	e8 f1 59 ff ff       	call   c0000780 <memset>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	58                   	pop    eax
c000ad93:	5b                   	pop    ebx
c000ad94:	5e                   	pop    esi
c000ad95:	c3                   	ret    

c000ad96 <calc_output_multi>:
c000ad96:	55                   	push   ebp
c000ad97:	57                   	push   edi
c000ad98:	56                   	push   esi
c000ad99:	89 c6                	mov    esi,eax
c000ad9b:	53                   	push   ebx
c000ad9c:	83 ec 4c             	sub    esp,0x4c
c000ad9f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ada3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ada7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adab:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adaf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adb7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adbb:	8d 46 44             	lea    eax,[esi+0x44]
c000adbe:	89 04 24             	mov    DWORD PTR [esp],eax
c000adc1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adcb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adce:	e8 0f eb ff ff       	call   c00098e2 <int_to_fp>
c000add3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000add6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adda:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adde:	99                   	cdq    
c000addf:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ade3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ade7:	0f af d0             	imul   edx,eax
c000adea:	0f af c3             	imul   eax,ebx
c000aded:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adf1:	29 c1                	sub    ecx,eax
c000adf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adfb:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae06:	57                   	push   edi
c000ae07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae0b:	6a 00                	push   0x0
c000ae0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae11:	e8 6a 59 ff ff       	call   c0000780 <memset>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae1d:	89 df                	mov    edi,ebx
c000ae1f:	e8 cc ea ff ff       	call   c00098f0 <fp_to_double>
c000ae24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae30:	e8 b1 ea ff ff       	call   c00098e6 <fp_to_int>
c000ae35:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae38:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae3b:	51                   	push   ecx
c000ae3c:	51                   	push   ecx
c000ae3d:	55                   	push   ebp
c000ae3e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae42:	e8 09 c2 01 00       	call   c0027050 <__subsf3>
c000ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae4a:	e8 e0 d8 01 00       	call   c002872f <__extendsfdf2>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae6a:	e8 c9 ce 01 00       	call   c0027d38 <__muldf3>
c000ae6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae7a:	e8 b0 d8 01 00       	call   c002872f <__extendsfdf2>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae8a:	52                   	push   edx
c000ae8b:	50                   	push   eax
c000ae8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae94:	e8 22 c8 01 00       	call   c00276bb <__adddf3>
c000ae99:	83 c4 10             	add    esp,0x10
c000ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aea0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aea4:	89 f8                	mov    eax,edi
c000aea6:	b9 08 00 00 00       	mov    ecx,0x8
c000aeab:	99                   	cdq    
c000aeac:	f7 f9                	idiv   ecx
c000aeae:	4a                   	dec    edx
c000aeaf:	83 fa 06             	cmp    edx,0x6
c000aeb2:	77 07                	ja     c000aebb <calc_output_multi+0x125>
c000aeb4:	ff 24 95 64 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd609c]
c000aebb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aebe:	4f                   	dec    edi
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed4:	e8 56 d8 01 00       	call   c002872f <__extendsfdf2>
c000aed9:	83 c4 10             	add    esp,0x10
c000aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef4:	e8 3f ce 01 00       	call   c0027d38 <__muldf3>
c000aef9:	83 c4 10             	add    esp,0x10
c000aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af04:	52                   	push   edx
c000af05:	50                   	push   eax
c000af06:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af09:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0c:	e8 aa c7 01 00       	call   c00276bb <__adddf3>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af17:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1d:	4f                   	dec    edi
c000af1e:	83 ec 0c             	sub    esp,0xc
c000af21:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af28:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af2f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af33:	e8 f7 d7 01 00       	call   c002872f <__extendsfdf2>
c000af38:	83 c4 10             	add    esp,0x10
c000af3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af53:	e8 e0 cd 01 00       	call   c0027d38 <__muldf3>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af63:	52                   	push   edx
c000af64:	50                   	push   eax
c000af65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af68:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6b:	e8 4b c7 01 00       	call   c00276bb <__adddf3>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af76:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af7c:	4f                   	dec    edi
c000af7d:	83 ec 0c             	sub    esp,0xc
c000af80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af92:	e8 98 d7 01 00       	call   c002872f <__extendsfdf2>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afb2:	e8 81 cd 01 00       	call   c0027d38 <__muldf3>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afc2:	52                   	push   edx
c000afc3:	50                   	push   eax
c000afc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afca:	e8 ec c6 01 00       	call   c00276bb <__adddf3>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afd5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afdb:	4f                   	dec    edi
c000afdc:	83 ec 0c             	sub    esp,0xc
c000afdf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aff1:	e8 39 d7 01 00       	call   c002872f <__extendsfdf2>
c000aff6:	83 c4 10             	add    esp,0x10
c000aff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000affd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b009:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b00d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b011:	e8 22 cd 01 00       	call   c0027d38 <__muldf3>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b021:	52                   	push   edx
c000b022:	50                   	push   eax
c000b023:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b026:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b029:	e8 8d c6 01 00       	call   c00276bb <__adddf3>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b034:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b037:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b03a:	4f                   	dec    edi
c000b03b:	83 ec 0c             	sub    esp,0xc
c000b03e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b045:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b04c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b050:	e8 da d6 01 00       	call   c002872f <__extendsfdf2>
c000b055:	83 c4 10             	add    esp,0x10
c000b058:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b05c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b068:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b06c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b070:	e8 c3 cc 01 00       	call   c0027d38 <__muldf3>
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b07c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b080:	52                   	push   edx
c000b081:	50                   	push   eax
c000b082:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b085:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b088:	e8 2e c6 01 00       	call   c00276bb <__adddf3>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b093:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b096:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b099:	4f                   	dec    edi
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0a4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0ab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0af:	e8 7b d6 01 00       	call   c002872f <__extendsfdf2>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0bb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0c7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0cf:	e8 64 cc 01 00       	call   c0027d38 <__muldf3>
c000b0d4:	83 c4 10             	add    esp,0x10
c000b0d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0db:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0df:	52                   	push   edx
c000b0e0:	50                   	push   eax
c000b0e1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0e4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0e7:	e8 cf c5 01 00       	call   c00276bb <__adddf3>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0f2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f8:	4f                   	dec    edi
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b103:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b10a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b10e:	e8 1c d6 01 00       	call   c002872f <__extendsfdf2>
c000b113:	83 c4 10             	add    esp,0x10
c000b116:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b11a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b12e:	e8 05 cc 01 00       	call   c0027d38 <__muldf3>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b13a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13e:	52                   	push   edx
c000b13f:	50                   	push   eax
c000b140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b143:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b146:	e8 70 c5 01 00       	call   c00276bb <__adddf3>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b151:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b154:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b157:	4f                   	dec    edi
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b15e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b162:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b169:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b16d:	e8 bd d5 01 00       	call   c002872f <__extendsfdf2>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b179:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b185:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b18d:	e8 a6 cb 01 00       	call   c0027d38 <__muldf3>
c000b192:	83 c4 10             	add    esp,0x10
c000b195:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b199:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b19d:	52                   	push   edx
c000b19e:	50                   	push   eax
c000b19f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1a5:	e8 11 c5 01 00       	call   c00276bb <__adddf3>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1b3:	85 ff                	test   edi,edi
c000b1b5:	0f 8f e9 fc ff ff    	jg     c000aea4 <calc_output_multi+0x10e>
c000b1bb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1c3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1c7:	0f 89 4c fc ff ff    	jns    c000ae19 <calc_output_multi+0x83>
c000b1cd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1d5:	29 c8                	sub    eax,ecx
c000b1d7:	99                   	cdq    
c000b1d8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1e0:	0f af d0             	imul   edx,eax
c000b1e3:	40                   	inc    eax
c000b1e4:	01 d1                	add    ecx,edx
c000b1e6:	0f af c3             	imul   eax,ebx
c000b1e9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ed:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1f4:	55                   	push   ebp
c000b1f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f9:	6a 00                	push   0x0
c000b1fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1ff:	e8 7c 55 ff ff       	call   c0000780 <memset>
c000b204:	83 c4 10             	add    esp,0x10
c000b207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b20b:	e8 e0 e6 ff ff       	call   c00098f0 <fp_to_double>
c000b210:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b214:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b21c:	e8 c5 e6 ff ff       	call   c00098e6 <fp_to_int>
c000b221:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b224:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b227:	57                   	push   edi
c000b228:	57                   	push   edi
c000b229:	89 df                	mov    edi,ebx
c000b22b:	55                   	push   ebp
c000b22c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b230:	e8 1b be 01 00       	call   c0027050 <__subsf3>
c000b235:	89 04 24             	mov    DWORD PTR [esp],eax
c000b238:	e8 f2 d4 01 00       	call   c002872f <__extendsfdf2>
c000b23d:	83 c4 10             	add    esp,0x10
c000b240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b244:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	e8 db ca 01 00       	call   c0027d38 <__muldf3>
c000b25d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b260:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b264:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b268:	e8 c2 d4 01 00       	call   c002872f <__extendsfdf2>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b274:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b278:	52                   	push   edx
c000b279:	50                   	push   eax
c000b27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	e8 34 c4 01 00       	call   c00276bb <__adddf3>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b28e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b292:	89 f8                	mov    eax,edi
c000b294:	b9 08 00 00 00       	mov    ecx,0x8
c000b299:	99                   	cdq    
c000b29a:	f7 f9                	idiv   ecx
c000b29c:	4a                   	dec    edx
c000b29d:	83 fa 06             	cmp    edx,0x6
c000b2a0:	77 07                	ja     c000b2a9 <calc_output_multi+0x513>
c000b2a2:	ff 24 95 80 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6080]
c000b2a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ad:	4f                   	dec    edi
c000b2ae:	83 ec 0c             	sub    esp,0xc
c000b2b1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2bf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2c3:	e8 67 d4 01 00       	call   c002872f <__extendsfdf2>
c000b2c8:	83 c4 10             	add    esp,0x10
c000b2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e3:	e8 50 ca 01 00       	call   c0027d38 <__muldf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f3:	52                   	push   edx
c000b2f4:	50                   	push   eax
c000b2f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2fb:	e8 bb c3 01 00       	call   c00276bb <__adddf3>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b306:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b30d:	4f                   	dec    edi
c000b30e:	83 ec 0c             	sub    esp,0xc
c000b311:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b314:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b318:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b31f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b323:	e8 07 d4 01 00       	call   c002872f <__extendsfdf2>
c000b328:	83 c4 10             	add    esp,0x10
c000b32b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b32f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b343:	e8 f0 c9 01 00       	call   c0027d38 <__muldf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b353:	52                   	push   edx
c000b354:	50                   	push   eax
c000b355:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b358:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b35b:	e8 5b c3 01 00       	call   c00276bb <__adddf3>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b366:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36d:	4f                   	dec    edi
c000b36e:	83 ec 0c             	sub    esp,0xc
c000b371:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b374:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b378:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b37f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b383:	e8 a7 d3 01 00       	call   c002872f <__extendsfdf2>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b38f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b397:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3a3:	e8 90 c9 01 00       	call   c0027d38 <__muldf3>
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b3:	52                   	push   edx
c000b3b4:	50                   	push   eax
c000b3b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3bb:	e8 fb c2 01 00       	call   c00276bb <__adddf3>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3cd:	4f                   	dec    edi
c000b3ce:	83 ec 0c             	sub    esp,0xc
c000b3d1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3df:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3e3:	e8 47 d3 01 00       	call   c002872f <__extendsfdf2>
c000b3e8:	83 c4 10             	add    esp,0x10
c000b3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b403:	e8 30 c9 01 00       	call   c0027d38 <__muldf3>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b413:	52                   	push   edx
c000b414:	50                   	push   eax
c000b415:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b418:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b41b:	e8 9b c2 01 00       	call   c00276bb <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b426:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b429:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42d:	4f                   	dec    edi
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b438:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b43f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b443:	e8 e7 d2 01 00       	call   c002872f <__extendsfdf2>
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b44f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b463:	e8 d0 c8 01 00       	call   c0027d38 <__muldf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b473:	52                   	push   edx
c000b474:	50                   	push   eax
c000b475:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b478:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b47b:	e8 3b c2 01 00       	call   c00276bb <__adddf3>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b486:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	4f                   	dec    edi
c000b48e:	83 ec 0c             	sub    esp,0xc
c000b491:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b494:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b498:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b49f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4a3:	e8 87 d2 01 00       	call   c002872f <__extendsfdf2>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4c3:	e8 70 c8 01 00       	call   c0027d38 <__muldf3>
c000b4c8:	83 c4 10             	add    esp,0x10
c000b4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d3:	52                   	push   edx
c000b4d4:	50                   	push   eax
c000b4d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4db:	e8 db c1 01 00       	call   c00276bb <__adddf3>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4e6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ed:	4f                   	dec    edi
c000b4ee:	83 ec 0c             	sub    esp,0xc
c000b4f1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4ff:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b503:	e8 27 d2 01 00       	call   c002872f <__extendsfdf2>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b523:	e8 10 c8 01 00       	call   c0027d38 <__muldf3>
c000b528:	83 c4 10             	add    esp,0x10
c000b52b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b533:	52                   	push   edx
c000b534:	50                   	push   eax
c000b535:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b538:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b53b:	e8 7b c1 01 00       	call   c00276bb <__adddf3>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b546:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4f                   	dec    edi
c000b54e:	83 ec 0c             	sub    esp,0xc
c000b551:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b558:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b55f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b563:	e8 c7 d1 01 00       	call   c002872f <__extendsfdf2>
c000b568:	83 c4 10             	add    esp,0x10
c000b56b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b56f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b583:	e8 b0 c7 01 00       	call   c0027d38 <__muldf3>
c000b588:	83 c4 10             	add    esp,0x10
c000b58b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b593:	52                   	push   edx
c000b594:	50                   	push   eax
c000b595:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b598:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b59b:	e8 1b c1 01 00       	call   c00276bb <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a9:	85 ff                	test   edi,edi
c000b5ab:	0f 8f e1 fc ff ff    	jg     c000b292 <calc_output_multi+0x4fc>
c000b5b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5b5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5c2:	0f 8f 3f fc ff ff    	jg     c000b207 <calc_output_multi+0x471>
c000b5c8:	be 08 00 00 00       	mov    esi,0x8
c000b5cd:	89 d8                	mov    eax,ebx
c000b5cf:	99                   	cdq    
c000b5d0:	f7 fe                	idiv   esi
c000b5d2:	4a                   	dec    edx
c000b5d3:	83 fa 06             	cmp    edx,0x6
c000b5d6:	77 07                	ja     c000b5df <calc_output_multi+0x849>
c000b5d8:	ff 24 95 9c 9f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6064]
c000b5df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e3:	4b                   	dec    ebx
c000b5e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ef:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f6:	e8 c0 c0 01 00       	call   c00276bb <__adddf3>
c000b5fb:	83 c4 10             	add    esp,0x10
c000b5fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b616:	e8 1d c7 01 00       	call   c0027d38 <__muldf3>
c000b61b:	5d                   	pop    ebp
c000b61c:	59                   	pop    ecx
c000b61d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b621:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	e8 d9 cf 01 00       	call   c002860b <__truncdfsf2>
c000b632:	83 c4 10             	add    esp,0x10
c000b635:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b639:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b640:	4b                   	dec    ebx
c000b641:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b645:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b650:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b653:	e8 63 c0 01 00       	call   c00276bb <__adddf3>
c000b658:	83 c4 10             	add    esp,0x10
c000b65b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b65f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b673:	e8 c0 c6 01 00       	call   c0027d38 <__muldf3>
c000b678:	59                   	pop    ecx
c000b679:	5f                   	pop    edi
c000b67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b67e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	e8 7c cf 01 00       	call   c002860b <__truncdfsf2>
c000b68f:	83 c4 10             	add    esp,0x10
c000b692:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b696:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69d:	4b                   	dec    ebx
c000b69e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b0:	e8 06 c0 01 00       	call   c00276bb <__adddf3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6bc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d0:	e8 63 c6 01 00       	call   c0027d38 <__muldf3>
c000b6d5:	5f                   	pop    edi
c000b6d6:	5d                   	pop    ebp
c000b6d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	e8 1f cf 01 00       	call   c002860b <__truncdfsf2>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6f3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	4b                   	dec    ebx
c000b6fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b702:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b706:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b70a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b70d:	e8 a9 bf 01 00       	call   c00276bb <__adddf3>
c000b712:	83 c4 10             	add    esp,0x10
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b71d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b721:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72d:	e8 06 c6 01 00       	call   c0027d38 <__muldf3>
c000b732:	5d                   	pop    ebp
c000b733:	59                   	pop    ecx
c000b734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b738:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	e8 c2 ce 01 00       	call   c002860b <__truncdfsf2>
c000b749:	83 c4 10             	add    esp,0x10
c000b74c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b750:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b757:	4b                   	dec    ebx
c000b758:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b75f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b763:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b767:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b76a:	e8 4c bf 01 00       	call   c00276bb <__adddf3>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b776:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b78a:	e8 a9 c5 01 00       	call   c0027d38 <__muldf3>
c000b78f:	59                   	pop    ecx
c000b790:	5f                   	pop    edi
c000b791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b795:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	e8 65 ce 01 00       	call   c002860b <__truncdfsf2>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b4:	4b                   	dec    ebx
c000b7b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7c7:	e8 ef be 01 00       	call   c00276bb <__adddf3>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e7:	e8 4c c5 01 00       	call   c0027d38 <__muldf3>
c000b7ec:	5f                   	pop    edi
c000b7ed:	5d                   	pop    ebp
c000b7ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	e8 08 ce 01 00       	call   c002860b <__truncdfsf2>
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b80a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b80d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b811:	4b                   	dec    ebx
c000b812:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b816:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b81d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b821:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b824:	e8 92 be 01 00       	call   c00276bb <__adddf3>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b830:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b844:	e8 ef c4 01 00       	call   c0027d38 <__muldf3>
c000b849:	5d                   	pop    ebp
c000b84a:	59                   	pop    ecx
c000b84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b84f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	e8 ab cd 01 00       	call   c002860b <__truncdfsf2>
c000b860:	83 c4 10             	add    esp,0x10
c000b863:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b867:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	4b                   	dec    ebx
c000b86f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b873:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b87e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b881:	e8 35 be 01 00       	call   c00276bb <__adddf3>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	e8 92 c4 01 00       	call   c0027d38 <__muldf3>
c000b8a6:	59                   	pop    ecx
c000b8a7:	5f                   	pop    edi
c000b8a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b8:	e8 4e cd 01 00       	call   c002860b <__truncdfsf2>
c000b8bd:	83 c4 10             	add    esp,0x10
c000b8c0:	85 db                	test   ebx,ebx
c000b8c2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8c6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c9:	0f 8f fe fc ff ff    	jg     c000b5cd <calc_output_multi+0x837>
c000b8cf:	83 c4 4c             	add    esp,0x4c
c000b8d2:	5b                   	pop    ebx
c000b8d3:	5e                   	pop    esi
c000b8d4:	5f                   	pop    edi
c000b8d5:	5d                   	pop    ebp
c000b8d6:	c3                   	ret    

c000b8d7 <double_to_fp>:
c000b8d7:	83 ec 0c             	sub    esp,0xc
c000b8da:	68 00 00 b0 40       	push   0x40b00000
c000b8df:	6a 00                	push   0x0
c000b8e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e9:	e8 4a c4 01 00       	call   c0027d38 <__muldf3>
c000b8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8f6:	83 c4 1c             	add    esp,0x1c
c000b8f9:	e9 c2 ce 01 00       	jmp    c00287c0 <lrint>

c000b8fe <prepare_data>:
c000b8fe:	55                   	push   ebp
c000b8ff:	57                   	push   edi
c000b900:	56                   	push   esi
c000b901:	53                   	push   ebx
c000b902:	83 ec 1c             	sub    esp,0x1c
c000b905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b909:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90d:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b911:	0f 89 57 01 00 00    	jns    c000ba6e <prepare_data+0x170>
c000b917:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b91a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	75 0d                	jne    c000b92e <prepare_data+0x30>
c000b921:	8d 14 36             	lea    edx,[esi+esi*1]
c000b924:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b927:	29 d0                	sub    eax,edx
c000b929:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b92c:	eb 44                	jmp    c000b972 <prepare_data+0x74>
c000b92e:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b931:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b934:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b937:	39 c1                	cmp    ecx,eax
c000b939:	7d 04                	jge    c000b93f <prepare_data+0x41>
c000b93b:	29 d0                	sub    eax,edx
c000b93d:	eb 2d                	jmp    c000b96c <prepare_data+0x6e>
c000b93f:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b945:	29 d7                	sub    edi,edx
c000b947:	01 f7                	add    edi,esi
c000b949:	51                   	push   ecx
c000b94a:	29 f2                	sub    edx,esi
c000b94c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b953:	8d 14 90             	lea    edx,[eax+edx*4]
c000b956:	51                   	push   ecx
c000b957:	52                   	push   edx
c000b958:	50                   	push   eax
c000b959:	e8 26 4d ff ff       	call   c0000684 <memmove>
c000b95e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b961:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b964:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b967:	29 f0                	sub    eax,esi
c000b969:	83 c4 10             	add    esp,0x10
c000b96c:	29 f0                	sub    eax,esi
c000b96e:	79 02                	jns    c000b972 <prepare_data+0x74>
c000b970:	31 c0                	xor    eax,eax
c000b972:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b975:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b978:	29 ef                	sub    edi,ebp
c000b97a:	39 c7                	cmp    edi,eax
c000b97c:	7e 02                	jle    c000b980 <prepare_data+0x82>
c000b97e:	89 c7                	mov    edi,eax
c000b980:	89 f8                	mov    eax,edi
c000b982:	99                   	cdq    
c000b983:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b986:	b8 15 00 00 00       	mov    eax,0x15
c000b98b:	29 d7                	sub    edi,edx
c000b98d:	0f 88 dd 00 00 00    	js     c000ba70 <prepare_data+0x172>
c000b993:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b996:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b999:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b99c:	0f 8f ce 00 00 00    	jg     c000ba70 <prepare_data+0x172>
c000b9a2:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a8:	50                   	push   eax
c000b9a9:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9b0:	50                   	push   eax
c000b9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9b7:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9ba:	50                   	push   eax
c000b9bb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9c2:	50                   	push   eax
c000b9c3:	e8 84 4d ff ff       	call   c000074c <memcpy>
c000b9c8:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9cb:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ce:	01 fd                	add    ebp,edi
c000b9d0:	01 f9                	add    ecx,edi
c000b9d2:	83 c4 10             	add    esp,0x10
c000b9d5:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d8:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9db:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e2:	0f 85 86 00 00 00    	jne    c000ba6e <prepare_data+0x170>
c000b9e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9eb:	89 e8                	mov    eax,ebp
c000b9ed:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9f0:	29 c8                	sub    eax,ecx
c000b9f2:	39 f8                	cmp    eax,edi
c000b9f4:	7d 78                	jge    c000ba6e <prepare_data+0x170>
c000b9f6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9fa:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9fe:	74 6e                	je     c000ba6e <prepare_data+0x170>
c000ba00:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba03:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba07:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba0a:	29 ef                	sub    edi,ebp
c000ba0c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba10:	7c 29                	jl     c000ba3b <prepare_data+0x13d>
c000ba12:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba15:	29 f1                	sub    ecx,esi
c000ba17:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba1e:	55                   	push   ebp
c000ba1f:	50                   	push   eax
c000ba20:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba23:	50                   	push   eax
c000ba24:	52                   	push   edx
c000ba25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba29:	e8 56 4c ff ff       	call   c0000684 <memmove>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba34:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba3b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba41:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba44:	83 c6 05             	add    esi,0x5
c000ba47:	78 07                	js     c000ba50 <prepare_data+0x152>
c000ba49:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba4c:	39 cf                	cmp    edi,ecx
c000ba4e:	7e 04                	jle    c000ba54 <prepare_data+0x156>
c000ba50:	89 ce                	mov    esi,ecx
c000ba52:	29 c6                	sub    esi,eax
c000ba54:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba57:	51                   	push   ecx
c000ba58:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba5f:	51                   	push   ecx
c000ba60:	6a 00                	push   0x0
c000ba62:	50                   	push   eax
c000ba63:	e8 18 4d ff ff       	call   c0000780 <memset>
c000ba68:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	31 c0                	xor    eax,eax
c000ba70:	83 c4 1c             	add    esp,0x1c
c000ba73:	5b                   	pop    ebx
c000ba74:	5e                   	pop    esi
c000ba75:	5f                   	pop    edi
c000ba76:	5d                   	pop    ebp
c000ba77:	c3                   	ret    

c000ba78 <sinc_multichan_vari_process>:
c000ba78:	55                   	push   ebp
c000ba79:	ba 05 00 00 00       	mov    edx,0x5
c000ba7e:	57                   	push   edi
c000ba7f:	56                   	push   esi
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 4c             	sub    esp,0x4c
c000ba84:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba88:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba8c:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba8f:	85 db                	test   ebx,ebx
c000ba91:	0f 84 9b 06 00 00    	je     c000c132 <sinc_multichan_vari_process+0x6ba>
c000ba97:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba9a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba9d:	0f af c5             	imul   eax,ebp
c000baa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000baa3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000baa6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bab4:	0f af c5             	imul   eax,ebp
c000bab7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000babd:	8b 06                	mov    eax,DWORD PTR [esi]
c000babf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	68 00 00 70 3f       	push   0x3f700000
c000bacc:	6a 00                	push   0x0
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad6:	e8 2c cb 01 00       	call   c0028607 <__ltdf2>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	ba 16 00 00 00       	mov    edx,0x16
c000bae3:	85 c0                	test   eax,eax
c000bae5:	0f 88 47 06 00 00    	js     c000c132 <sinc_multichan_vari_process+0x6ba>
c000baeb:	68 00 00 70 40       	push   0x40700000
c000baf0:	6a 00                	push   0x0
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bafa:	e8 ea ca 01 00       	call   c00285e9 <__gtdf2>
c000baff:	83 c4 10             	add    esp,0x10
c000bb02:	ba 16 00 00 00       	mov    edx,0x16
c000bb07:	85 c0                	test   eax,eax
c000bb09:	0f 8f 23 06 00 00    	jg     c000c132 <sinc_multichan_vari_process+0x6ba>
c000bb0f:	83 ec 0c             	sub    esp,0xc
c000bb12:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb15:	e8 81 c8 01 00       	call   c002839b <__floatsidf>
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb25:	68 00 00 00 40       	push   0x40000000
c000bb2a:	6a 00                	push   0x0
c000bb2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	e8 82 bb 01 00       	call   c00276bb <__adddf3>
c000bb39:	59                   	pop    ecx
c000bb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb3e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb42:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb45:	e8 51 c8 01 00       	call   c002839b <__floatsidf>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	52                   	push   edx
c000bb56:	50                   	push   eax
c000bb57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5f:	e8 b8 c4 01 00       	call   c002801c <__divdf3>
c000bb64:	83 c4 10             	add    esp,0x10
c000bb67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb6f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb72:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8d:	e8 57 ca 01 00       	call   c00285e9 <__gtdf2>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	85 c0                	test   eax,eax
c000bb97:	7e 2d                	jle    c000bbc6 <sinc_multichan_vari_process+0x14e>
c000bb99:	68 00 00 f0 3f       	push   0x3ff00000
c000bb9e:	6a 00                	push   0x0
c000bba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba8:	e8 5a ca 01 00       	call   c0028607 <__ltdf2>
c000bbad:	83 c4 10             	add    esp,0x10
c000bbb0:	85 c0                	test   eax,eax
c000bbb2:	79 4d                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbc4:	eb 1b                	jmp    c000bbe1 <sinc_multichan_vari_process+0x169>
c000bbc6:	68 00 00 f0 3f       	push   0x3ff00000
c000bbcb:	6a 00                	push   0x0
c000bbcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbd5:	e8 2d ca 01 00       	call   c0028607 <__ltdf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	79 20                	jns    c000bc01 <sinc_multichan_vari_process+0x189>
c000bbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 26 c4 01 00       	call   c002801c <__divdf3>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbfd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc01:	50                   	push   eax
c000bc02:	50                   	push   eax
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 b0 cb 01 00       	call   c00287c0 <lrint>
c000bc10:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc13:	40                   	inc    eax
c000bc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc18:	0f af c5             	imul   eax,ebp
c000bc1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc26:	58                   	pop    eax
c000bc27:	5a                   	pop    edx
c000bc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc30:	e8 8b cb 01 00       	call   c00287c0 <lrint>
c000bc35:	83 ec 0c             	sub    esp,0xc
c000bc38:	50                   	push   eax
c000bc39:	e8 5d c7 01 00       	call   c002839b <__floatsidf>
c000bc3e:	83 c4 10             	add    esp,0x10
c000bc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc49:	52                   	push   edx
c000bc4a:	50                   	push   eax
c000bc4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc53:	e8 b4 c0 01 00       	call   c0027d0c <__subdf3>
c000bc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc60:	83 c4 20             	add    esp,0x20
c000bc63:	6a 00                	push   0x0
c000bc65:	6a 00                	push   0x0
c000bc67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6f:	e8 93 c9 01 00       	call   c0028607 <__ltdf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	79 1f                	jns    c000bc9a <sinc_multichan_vari_process+0x222>
c000bc7b:	68 00 00 f0 3f       	push   0x3ff00000
c000bc80:	6a 00                	push   0x0
c000bc82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8a:	e8 2c ba 01 00       	call   c00276bb <__adddf3>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc9a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc9d:	83 ec 10             	sub    esp,0x10
c000bca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bca4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcb7:	e8 50 c0 01 00       	call   c0027d0c <__subdf3>
c000bcbc:	83 c4 18             	add    esp,0x18
c000bcbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	e8 f2 ca 01 00       	call   c00287c0 <lrint>
c000bcce:	0f af e8             	imul   ebp,eax
c000bcd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcd5:	01 e8                	add    eax,ebp
c000bcd7:	99                   	cdq    
c000bcd8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcdb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bce6:	68 00 00 f0 3f       	push   0x3ff00000
c000bceb:	6a 00                	push   0x0
c000bced:	e8 2a c3 01 00       	call   c002801c <__divdf3>
c000bcf2:	83 c4 10             	add    esp,0x10
c000bcf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcfd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd02:	68 23 42 92 0c       	push   0xc924223
c000bd07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd0f:	e8 a7 b9 01 00       	call   c00276bb <__adddf3>
c000bd14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd1c:	83 c4 20             	add    esp,0x20
c000bd1f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd27:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd32:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd35:	7d 50                	jge    c000bd87 <sinc_multichan_vari_process+0x30f>
c000bd37:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd3a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd3d:	01 c8                	add    eax,ecx
c000bd3f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd42:	99                   	cdq    
c000bd43:	f7 f9                	idiv   ecx
c000bd45:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd49:	7d 0c                	jge    c000bd57 <sinc_multichan_vari_process+0x2df>
c000bd4b:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd4e:	85 ed                	test   ebp,ebp
c000bd50:	79 6b                	jns    c000bdbd <sinc_multichan_vari_process+0x345>
c000bd52:	e9 e6 00 00 00       	jmp    c000be3d <sinc_multichan_vari_process+0x3c5>
c000bd57:	50                   	push   eax
c000bd58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd5c:	57                   	push   edi
c000bd5d:	53                   	push   ebx
c000bd5e:	e8 9b fb ff ff       	call   c000b8fe <prepare_data>
c000bd63:	83 c4 10             	add    esp,0x10
c000bd66:	89 c2                	mov    edx,eax
c000bd68:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd6b:	85 c0                	test   eax,eax
c000bd6d:	0f 85 bf 03 00 00    	jne    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bd73:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd76:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd79:	01 c8                	add    eax,ecx
c000bd7b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 f9                	idiv   ecx
c000bd81:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd85:	7c c4                	jl     c000bd4b <sinc_multichan_vari_process+0x2d3>
c000bd87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd8f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd92:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd9d:	89 06                	mov    DWORD PTR [esi],eax
c000bd9f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bda2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bda5:	99                   	cdq    
c000bda6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda9:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdaf:	99                   	cdq    
c000bdb0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdb3:	31 d2                	xor    edx,edx
c000bdb5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb8:	e9 75 03 00 00       	jmp    c000c132 <sinc_multichan_vari_process+0x6ba>
c000bdbd:	83 ec 0c             	sub    esp,0xc
c000bdc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdc3:	e8 d3 c5 01 00       	call   c002839b <__floatsidf>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bddb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde3:	e8 d3 b8 01 00       	call   c00276bb <__adddf3>
c000bde8:	83 c4 10             	add    esp,0x10
c000bdeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	e8 b3 b8 01 00       	call   c00276bb <__adddf3>
c000be08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be13:	e8 83 c5 01 00       	call   c002839b <__floatsidf>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be2d:	e8 d3 c7 01 00       	call   c0028605 <__gedf2>
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	85 c0                	test   eax,eax
c000be37:	0f 89 4a ff ff ff    	jns    c000bd87 <sinc_multichan_vari_process+0x30f>
c000be3d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be41:	0f 8e ed 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be47:	83 ec 10             	sub    esp,0x10
c000be4a:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be4d:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be50:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be53:	ff 36                	push   DWORD PTR [esi]
c000be55:	e8 b2 be 01 00       	call   c0027d0c <__subdf3>
c000be5a:	83 c4 18             	add    esp,0x18
c000be5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be65:	52                   	push   edx
c000be66:	50                   	push   eax
c000be67:	e8 34 c9 01 00       	call   c00287a0 <fabs>
c000be6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be7c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be89:	e8 5b c7 01 00       	call   c00285e9 <__gtdf2>
c000be8e:	83 c4 10             	add    esp,0x10
c000be91:	85 c0                	test   eax,eax
c000be93:	0f 8e 9b 00 00 00    	jle    c000bf34 <sinc_multichan_vari_process+0x4bc>
c000be99:	8b 06                	mov    eax,DWORD PTR [esi]
c000be9b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bea6:	52                   	push   edx
c000bea7:	50                   	push   eax
c000bea8:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000beab:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beae:	e8 59 be 01 00       	call   c0027d0c <__subdf3>
c000beb3:	59                   	pop    ecx
c000beb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bebf:	e8 d7 c4 01 00       	call   c002839b <__floatsidf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000becf:	52                   	push   edx
c000bed0:	50                   	push   eax
c000bed1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	e8 5a be 01 00       	call   c0027d38 <__muldf3>
c000bede:	5d                   	pop    ebp
c000bedf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bee3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bee7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000beea:	e8 ac c4 01 00       	call   c002839b <__floatsidf>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf04:	e8 13 c1 01 00       	call   c002801c <__divdf3>
c000bf09:	83 c4 10             	add    esp,0x10
c000bf0c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf10:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf24:	e8 92 b7 01 00       	call   c00276bb <__adddf3>
c000bf29:	83 c4 10             	add    esp,0x10
c000bf2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf3a:	e8 5c c4 01 00       	call   c002839b <__floatsidf>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf5a:	e8 a8 c6 01 00       	call   c0028607 <__ltdf2>
c000bf5f:	83 c4 10             	add    esp,0x10
c000bf62:	85 c0                	test   eax,eax
c000bf64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf6c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf70:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf74:	78 10                	js     c000bf86 <sinc_multichan_vari_process+0x50e>
c000bf76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf96:	e8 9d bd 01 00       	call   c0027d38 <__muldf3>
c000bf9b:	59                   	pop    ecx
c000bf9c:	5d                   	pop    ebp
c000bf9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfa1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfad:	e8 25 f9 ff ff       	call   c000b8d7 <double_to_fp>
c000bfb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb6:	89 c5                	mov    ebp,eax
c000bfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfc4:	e8 6f bd 01 00       	call   c0027d38 <__muldf3>
c000bfc9:	83 c4 18             	add    esp,0x18
c000bfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfd4:	52                   	push   edx
c000bfd5:	50                   	push   eax
c000bfd6:	e8 fc f8 ff ff       	call   c000b8d7 <double_to_fp>
c000bfdb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfde:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfe2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfe5:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe8:	50                   	push   eax
c000bfe9:	50                   	push   eax
c000bfea:	50                   	push   eax
c000bfeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfee:	e8 a8 c3 01 00       	call   c002839b <__floatsidf>
c000bff3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c007:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c00b:	e8 0c c0 01 00       	call   c002801c <__divdf3>
c000c010:	83 c4 1c             	add    esp,0x1c
c000c013:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c017:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c01b:	52                   	push   edx
c000c01c:	89 ea                	mov    edx,ebp
c000c01e:	50                   	push   eax
c000c01f:	89 d8                	mov    eax,ebx
c000c021:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c024:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c028:	e8 69 ed ff ff       	call   c000ad96 <calc_output_multi>
c000c02d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c030:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c033:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c03b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c043:	e8 d4 bf 01 00       	call   c002801c <__divdf3>
c000c048:	83 c4 10             	add    esp,0x10
c000c04b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c04f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c053:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c057:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c063:	e8 53 b6 01 00       	call   c00276bb <__adddf3>
c000c068:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c06c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c070:	83 c4 28             	add    esp,0x28
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c07b:	e8 40 c7 01 00       	call   c00287c0 <lrint>
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	50                   	push   eax
c000c084:	e8 12 c3 01 00       	call   c002839b <__floatsidf>
c000c089:	83 c4 10             	add    esp,0x10
c000c08c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c090:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c094:	52                   	push   edx
c000c095:	50                   	push   eax
c000c096:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c09e:	e8 69 bc 01 00       	call   c0027d0c <__subdf3>
c000c0a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ab:	83 c4 20             	add    esp,0x20
c000c0ae:	6a 00                	push   0x0
c000c0b0:	6a 00                	push   0x0
c000c0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ba:	e8 48 c5 01 00       	call   c0028607 <__ltdf2>
c000c0bf:	83 c4 10             	add    esp,0x10
c000c0c2:	85 c0                	test   eax,eax
c000c0c4:	79 20                	jns    c000c0e6 <sinc_multichan_vari_process+0x66e>
c000c0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 e0 b5 01 00       	call   c00276bb <__adddf3>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c103:	e8 04 bc 01 00       	call   c0027d0c <__subdf3>
c000c108:	83 c4 18             	add    esp,0x18
c000c10b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c10f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c113:	52                   	push   edx
c000c114:	50                   	push   eax
c000c115:	e8 a6 c6 01 00       	call   c00287c0 <lrint>
c000c11a:	0f af e8             	imul   ebp,eax
c000c11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	01 e8                	add    eax,ebp
c000c126:	99                   	cdq    
c000c127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c12d:	e9 fd fb ff ff       	jmp    c000bd2f <sinc_multichan_vari_process+0x2b7>
c000c132:	83 c4 4c             	add    esp,0x4c
c000c135:	89 d0                	mov    eax,edx
c000c137:	5b                   	pop    ebx
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	5d                   	pop    ebp
c000c13b:	c3                   	ret    

c000c13c <sinc_hex_vari_process>:
c000c13c:	55                   	push   ebp
c000c13d:	ba 05 00 00 00       	mov    edx,0x5
c000c142:	57                   	push   edi
c000c143:	56                   	push   esi
c000c144:	53                   	push   ebx
c000c145:	83 ec 4c             	sub    esp,0x4c
c000c148:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c14c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c150:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c153:	85 db                	test   ebx,ebx
c000c155:	0f 84 9c 06 00 00    	je     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c15b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c15e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c161:	0f af c7             	imul   eax,edi
c000c164:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c167:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c16a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c171:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c178:	0f af c7             	imul   eax,edi
c000c17b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c17e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c181:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c184:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18c:	68 00 00 70 3f       	push   0x3f700000
c000c191:	6a 00                	push   0x0
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c19b:	e8 67 c4 01 00       	call   c0028607 <__ltdf2>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	ba 16 00 00 00       	mov    edx,0x16
c000c1a8:	85 c0                	test   eax,eax
c000c1aa:	0f 88 47 06 00 00    	js     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1b0:	68 00 00 70 40       	push   0x40700000
c000c1b5:	6a 00                	push   0x0
c000c1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1bf:	e8 25 c4 01 00       	call   c00285e9 <__gtdf2>
c000c1c4:	83 c4 10             	add    esp,0x10
c000c1c7:	ba 16 00 00 00       	mov    edx,0x16
c000c1cc:	85 c0                	test   eax,eax
c000c1ce:	0f 8f 23 06 00 00    	jg     c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1da:	e8 bc c1 01 00       	call   c002839b <__floatsidf>
c000c1df:	83 c4 10             	add    esp,0x10
c000c1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1ea:	68 00 00 00 40       	push   0x40000000
c000c1ef:	6a 00                	push   0x0
c000c1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	e8 bd b4 01 00       	call   c00276bb <__adddf3>
c000c1fe:	59                   	pop    ecx
c000c1ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c203:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c207:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c20a:	e8 8c c1 01 00       	call   c002839b <__floatsidf>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	52                   	push   edx
c000c21b:	50                   	push   eax
c000c21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c224:	e8 f3 bd 01 00       	call   c002801c <__divdf3>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c230:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c234:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c237:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c252:	e8 92 c3 01 00       	call   c00285e9 <__gtdf2>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	85 c0                	test   eax,eax
c000c25c:	7e 2d                	jle    c000c28b <sinc_hex_vari_process+0x14f>
c000c25e:	68 00 00 f0 3f       	push   0x3ff00000
c000c263:	6a 00                	push   0x0
c000c265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c26d:	e8 95 c3 01 00       	call   c0028607 <__ltdf2>
c000c272:	83 c4 10             	add    esp,0x10
c000c275:	85 c0                	test   eax,eax
c000c277:	79 4d                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c289:	eb 1b                	jmp    c000c2a6 <sinc_hex_vari_process+0x16a>
c000c28b:	68 00 00 f0 3f       	push   0x3ff00000
c000c290:	6a 00                	push   0x0
c000c292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c29a:	e8 68 c3 01 00       	call   c0028607 <__ltdf2>
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	85 c0                	test   eax,eax
c000c2a4:	79 20                	jns    c000c2c6 <sinc_hex_vari_process+0x18a>
c000c2a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 61 bd 01 00       	call   c002801c <__divdf3>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2c6:	50                   	push   eax
c000c2c7:	50                   	push   eax
c000c2c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d0:	e8 eb c4 01 00       	call   c00287c0 <lrint>
c000c2d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d8:	40                   	inc    eax
c000c2d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2dd:	0f af c7             	imul   eax,edi
c000c2e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2eb:	58                   	pop    eax
c000c2ec:	5a                   	pop    edx
c000c2ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f5:	e8 c6 c4 01 00       	call   c00287c0 <lrint>
c000c2fa:	83 ec 0c             	sub    esp,0xc
c000c2fd:	50                   	push   eax
c000c2fe:	e8 98 c0 01 00       	call   c002839b <__floatsidf>
c000c303:	83 c4 10             	add    esp,0x10
c000c306:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c30a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c30e:	52                   	push   edx
c000c30f:	50                   	push   eax
c000c310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c318:	e8 ef b9 01 00       	call   c0027d0c <__subdf3>
c000c31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c325:	83 c4 20             	add    esp,0x20
c000c328:	6a 00                	push   0x0
c000c32a:	6a 00                	push   0x0
c000c32c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c334:	e8 ce c2 01 00       	call   c0028607 <__ltdf2>
c000c339:	83 c4 10             	add    esp,0x10
c000c33c:	85 c0                	test   eax,eax
c000c33e:	79 1f                	jns    c000c35f <sinc_hex_vari_process+0x223>
c000c340:	68 00 00 f0 3f       	push   0x3ff00000
c000c345:	6a 00                	push   0x0
c000c347:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34f:	e8 67 b3 01 00       	call   c00276bb <__adddf3>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c35b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c362:	83 ec 10             	sub    esp,0x10
c000c365:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c369:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c37c:	e8 8b b9 01 00       	call   c0027d0c <__subdf3>
c000c381:	83 c4 18             	add    esp,0x18
c000c384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c38c:	52                   	push   edx
c000c38d:	50                   	push   eax
c000c38e:	e8 2d c4 01 00       	call   c00287c0 <lrint>
c000c393:	0f af f8             	imul   edi,eax
c000c396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39a:	01 f8                	add    eax,edi
c000c39c:	99                   	cdq    
c000c39d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	68 00 00 f0 3f       	push   0x3ff00000
c000c3b0:	6a 00                	push   0x0
c000c3b2:	e8 65 bc 01 00       	call   c002801c <__divdf3>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3c2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3c7:	68 23 42 92 0c       	push   0xc924223
c000c3cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3d4:	e8 e2 b2 01 00       	call   c00276bb <__adddf3>
c000c3d9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3dd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3e1:	83 c4 20             	add    esp,0x20
c000c3e4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3ec:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3f7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3fa:	7d 50                	jge    c000c44c <sinc_hex_vari_process+0x310>
c000c3fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c402:	01 c8                	add    eax,ecx
c000c404:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c407:	99                   	cdq    
c000c408:	f7 f9                	idiv   ecx
c000c40a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c40e:	7d 0c                	jge    c000c41c <sinc_hex_vari_process+0x2e0>
c000c410:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c413:	85 ff                	test   edi,edi
c000c415:	79 6c                	jns    c000c483 <sinc_hex_vari_process+0x347>
c000c417:	e9 e7 00 00 00       	jmp    c000c503 <sinc_hex_vari_process+0x3c7>
c000c41c:	50                   	push   eax
c000c41d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c421:	56                   	push   esi
c000c422:	53                   	push   ebx
c000c423:	e8 d6 f4 ff ff       	call   c000b8fe <prepare_data>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	89 c2                	mov    edx,eax
c000c42d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c430:	85 c0                	test   eax,eax
c000c432:	0f 85 bf 03 00 00    	jne    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c438:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c43b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c43e:	01 c8                	add    eax,ecx
c000c440:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c443:	99                   	cdq    
c000c444:	f7 f9                	idiv   ecx
c000c446:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c44a:	7c c4                	jl     c000c410 <sinc_hex_vari_process+0x2d4>
c000c44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c450:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c454:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c457:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c45e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c462:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c465:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c468:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c46b:	99                   	cdq    
c000c46c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c46f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c472:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c475:	99                   	cdq    
c000c476:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c479:	31 d2                	xor    edx,edx
c000c47b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c47e:	e9 74 03 00 00       	jmp    c000c7f7 <sinc_hex_vari_process+0x6bb>
c000c483:	83 ec 0c             	sub    esp,0xc
c000c486:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c489:	e8 0d bf 01 00       	call   c002839b <__floatsidf>
c000c48e:	83 c4 10             	add    esp,0x10
c000c491:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c495:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c499:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c49d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a9:	e8 0d b2 01 00       	call   c00276bb <__adddf3>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c9:	e8 ed b1 01 00       	call   c00276bb <__adddf3>
c000c4ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d9:	e8 bd be 01 00       	call   c002839b <__floatsidf>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e9:	52                   	push   edx
c000c4ea:	50                   	push   eax
c000c4eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4f3:	e8 0d c1 01 00       	call   c0028605 <__gedf2>
c000c4f8:	83 c4 10             	add    esp,0x10
c000c4fb:	85 c0                	test   eax,eax
c000c4fd:	0f 89 49 ff ff ff    	jns    c000c44c <sinc_hex_vari_process+0x310>
c000c503:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c507:	0f 8e ef 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c50d:	83 ec 10             	sub    esp,0x10
c000c510:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c513:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c516:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c519:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c51c:	e8 eb b7 01 00       	call   c0027d0c <__subdf3>
c000c521:	83 c4 18             	add    esp,0x18
c000c524:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c528:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	e8 6d c2 01 00       	call   c00287a0 <fabs>
c000c533:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c537:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c543:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c54c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c550:	e8 94 c0 01 00       	call   c00285e9 <__gtdf2>
c000c555:	83 c4 10             	add    esp,0x10
c000c558:	85 c0                	test   eax,eax
c000c55a:	0f 8e 9c 00 00 00    	jle    c000c5fc <sinc_hex_vari_process+0x4c0>
c000c560:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c563:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c56a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c56e:	52                   	push   edx
c000c56f:	50                   	push   eax
c000c570:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c573:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c576:	e8 91 b7 01 00       	call   c0027d0c <__subdf3>
c000c57b:	59                   	pop    ecx
c000c57c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c580:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c584:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c587:	e8 0f be 01 00       	call   c002839b <__floatsidf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c593:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c597:	52                   	push   edx
c000c598:	50                   	push   eax
c000c599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	e8 92 b7 01 00       	call   c0027d38 <__muldf3>
c000c5a6:	5f                   	pop    edi
c000c5a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5ab:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5af:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5b2:	e8 e4 bd 01 00       	call   c002839b <__floatsidf>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c2:	52                   	push   edx
c000c5c3:	50                   	push   eax
c000c5c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5cc:	e8 4b ba 01 00       	call   c002801c <__divdf3>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ec:	e8 ca b0 01 00       	call   c00276bb <__adddf3>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c602:	e8 94 bd 01 00       	call   c002839b <__floatsidf>
c000c607:	83 c4 10             	add    esp,0x10
c000c60a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c60e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c622:	e8 e0 bf 01 00       	call   c0028607 <__ltdf2>
c000c627:	83 c4 10             	add    esp,0x10
c000c62a:	85 c0                	test   eax,eax
c000c62c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c630:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c634:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c638:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c63c:	78 10                	js     c000c64e <sinc_hex_vari_process+0x512>
c000c63e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c642:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c64a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65e:	e8 d5 b6 01 00       	call   c0027d38 <__muldf3>
c000c663:	59                   	pop    ecx
c000c664:	5f                   	pop    edi
c000c665:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c675:	e8 5d f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c67a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67e:	89 c7                	mov    edi,eax
c000c680:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68c:	e8 a7 b6 01 00       	call   c0027d38 <__muldf3>
c000c691:	83 c4 18             	add    esp,0x18
c000c694:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c698:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c69c:	52                   	push   edx
c000c69d:	50                   	push   eax
c000c69e:	e8 34 f2 ff ff       	call   c000b8d7 <double_to_fp>
c000c6a3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6a6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6aa:	83 c4 0c             	add    esp,0xc
c000c6ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6b0:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6b3:	50                   	push   eax
c000c6b4:	50                   	push   eax
c000c6b5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b8:	e8 de bc 01 00       	call   c002839b <__floatsidf>
c000c6bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6d5:	e8 42 b9 01 00       	call   c002801c <__divdf3>
c000c6da:	83 c4 18             	add    esp,0x18
c000c6dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e5:	52                   	push   edx
c000c6e6:	89 fa                	mov    edx,edi
c000c6e8:	50                   	push   eax
c000c6e9:	89 d8                	mov    eax,ebx
c000c6eb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ef:	e8 50 de ff ff       	call   c000a544 <calc_output_hex>
c000c6f4:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c700:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c708:	e8 0f b9 01 00       	call   c002801c <__divdf3>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c728:	e8 8e af 01 00       	call   c00276bb <__adddf3>
c000c72d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c731:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c735:	83 c4 18             	add    esp,0x18
c000c738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c740:	e8 7b c0 01 00       	call   c00287c0 <lrint>
c000c745:	83 ec 0c             	sub    esp,0xc
c000c748:	50                   	push   eax
c000c749:	e8 4d bc 01 00       	call   c002839b <__floatsidf>
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c755:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c759:	52                   	push   edx
c000c75a:	50                   	push   eax
c000c75b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c763:	e8 a4 b5 01 00       	call   c0027d0c <__subdf3>
c000c768:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c76c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c770:	83 c4 20             	add    esp,0x20
c000c773:	6a 00                	push   0x0
c000c775:	6a 00                	push   0x0
c000c777:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77f:	e8 83 be 01 00       	call   c0028607 <__ltdf2>
c000c784:	83 c4 10             	add    esp,0x10
c000c787:	85 c0                	test   eax,eax
c000c789:	79 20                	jns    c000c7ab <sinc_hex_vari_process+0x66f>
c000c78b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 1b af 01 00       	call   c00276bb <__adddf3>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ae:	83 ec 10             	sub    esp,0x10
c000c7b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c8:	e8 3f b5 01 00       	call   c0027d0c <__subdf3>
c000c7cd:	83 c4 18             	add    esp,0x18
c000c7d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d8:	52                   	push   edx
c000c7d9:	50                   	push   eax
c000c7da:	e8 e1 bf 01 00       	call   c00287c0 <lrint>
c000c7df:	0f af f8             	imul   edi,eax
c000c7e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7e6:	83 c4 10             	add    esp,0x10
c000c7e9:	01 f8                	add    eax,edi
c000c7eb:	99                   	cdq    
c000c7ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7f2:	e9 fd fb ff ff       	jmp    c000c3f4 <sinc_hex_vari_process+0x2b8>
c000c7f7:	83 c4 4c             	add    esp,0x4c
c000c7fa:	89 d0                	mov    eax,edx
c000c7fc:	5b                   	pop    ebx
c000c7fd:	5e                   	pop    esi
c000c7fe:	5f                   	pop    edi
c000c7ff:	5d                   	pop    ebp
c000c800:	c3                   	ret    

c000c801 <sinc_quad_vari_process>:
c000c801:	55                   	push   ebp
c000c802:	ba 05 00 00 00       	mov    edx,0x5
c000c807:	57                   	push   edi
c000c808:	56                   	push   esi
c000c809:	53                   	push   ebx
c000c80a:	83 ec 4c             	sub    esp,0x4c
c000c80d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c811:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c815:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c818:	85 db                	test   ebx,ebx
c000c81a:	0f 84 9c 06 00 00    	je     c000cebc <sinc_quad_vari_process+0x6bb>
c000c820:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c823:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c826:	0f af c7             	imul   eax,edi
c000c829:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c82c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c82f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c836:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c83d:	0f af c7             	imul   eax,edi
c000c840:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c843:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c846:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c849:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c84d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c851:	68 00 00 70 3f       	push   0x3f700000
c000c856:	6a 00                	push   0x0
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 a2 bd 01 00       	call   c0028607 <__ltdf2>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	ba 16 00 00 00       	mov    edx,0x16
c000c86d:	85 c0                	test   eax,eax
c000c86f:	0f 88 47 06 00 00    	js     c000cebc <sinc_quad_vari_process+0x6bb>
c000c875:	68 00 00 70 40       	push   0x40700000
c000c87a:	6a 00                	push   0x0
c000c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c884:	e8 60 bd 01 00       	call   c00285e9 <__gtdf2>
c000c889:	83 c4 10             	add    esp,0x10
c000c88c:	ba 16 00 00 00       	mov    edx,0x16
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8f 23 06 00 00    	jg     c000cebc <sinc_quad_vari_process+0x6bb>
c000c899:	83 ec 0c             	sub    esp,0xc
c000c89c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c89f:	e8 f7 ba 01 00       	call   c002839b <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8af:	68 00 00 00 40       	push   0x40000000
c000c8b4:	6a 00                	push   0x0
c000c8b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	e8 f8 ad 01 00       	call   c00276bb <__adddf3>
c000c8c3:	59                   	pop    ecx
c000c8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8cc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8cf:	e8 c7 ba 01 00       	call   c002839b <__floatsidf>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	52                   	push   edx
c000c8e0:	50                   	push   eax
c000c8e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e9:	e8 2e b7 01 00       	call   c002801c <__divdf3>
c000c8ee:	83 c4 10             	add    esp,0x10
c000c8f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8fc:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c917:	e8 cd bc 01 00       	call   c00285e9 <__gtdf2>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	85 c0                	test   eax,eax
c000c921:	7e 2d                	jle    c000c950 <sinc_quad_vari_process+0x14f>
c000c923:	68 00 00 f0 3f       	push   0x3ff00000
c000c928:	6a 00                	push   0x0
c000c92a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	e8 d0 bc 01 00       	call   c0028607 <__ltdf2>
c000c937:	83 c4 10             	add    esp,0x10
c000c93a:	85 c0                	test   eax,eax
c000c93c:	79 4d                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c942:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c94a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c94e:	eb 1b                	jmp    c000c96b <sinc_quad_vari_process+0x16a>
c000c950:	68 00 00 f0 3f       	push   0x3ff00000
c000c955:	6a 00                	push   0x0
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95f:	e8 a3 bc 01 00       	call   c0028607 <__ltdf2>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	85 c0                	test   eax,eax
c000c969:	79 20                	jns    c000c98b <sinc_quad_vari_process+0x18a>
c000c96b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 9c b6 01 00       	call   c002801c <__divdf3>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c987:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98b:	50                   	push   eax
c000c98c:	50                   	push   eax
c000c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c995:	e8 26 be 01 00       	call   c00287c0 <lrint>
c000c99a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c99d:	40                   	inc    eax
c000c99e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a2:	0f af c7             	imul   eax,edi
c000c9a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9b0:	58                   	pop    eax
c000c9b1:	5a                   	pop    edx
c000c9b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ba:	e8 01 be 01 00       	call   c00287c0 <lrint>
c000c9bf:	83 ec 0c             	sub    esp,0xc
c000c9c2:	50                   	push   eax
c000c9c3:	e8 d3 b9 01 00       	call   c002839b <__floatsidf>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9d3:	52                   	push   edx
c000c9d4:	50                   	push   eax
c000c9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9dd:	e8 2a b3 01 00       	call   c0027d0c <__subdf3>
c000c9e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9ea:	83 c4 20             	add    esp,0x20
c000c9ed:	6a 00                	push   0x0
c000c9ef:	6a 00                	push   0x0
c000c9f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f9:	e8 09 bc 01 00       	call   c0028607 <__ltdf2>
c000c9fe:	83 c4 10             	add    esp,0x10
c000ca01:	85 c0                	test   eax,eax
c000ca03:	79 1f                	jns    c000ca24 <sinc_quad_vari_process+0x223>
c000ca05:	68 00 00 f0 3f       	push   0x3ff00000
c000ca0a:	6a 00                	push   0x0
c000ca0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca14:	e8 a2 ac 01 00       	call   c00276bb <__adddf3>
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca27:	83 ec 10             	sub    esp,0x10
c000ca2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca2e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca41:	e8 c6 b2 01 00       	call   c0027d0c <__subdf3>
c000ca46:	83 c4 18             	add    esp,0x18
c000ca49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca51:	52                   	push   edx
c000ca52:	50                   	push   eax
c000ca53:	e8 68 bd 01 00       	call   c00287c0 <lrint>
c000ca58:	0f af f8             	imul   edi,eax
c000ca5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca5f:	01 f8                	add    eax,edi
c000ca61:	99                   	cdq    
c000ca62:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca65:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca70:	68 00 00 f0 3f       	push   0x3ff00000
c000ca75:	6a 00                	push   0x0
c000ca77:	e8 a0 b5 01 00       	call   c002801c <__divdf3>
c000ca7c:	83 c4 10             	add    esp,0x10
c000ca7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca87:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca8c:	68 23 42 92 0c       	push   0xc924223
c000ca91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca99:	e8 1d ac 01 00       	call   c00276bb <__adddf3>
c000ca9e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000caa2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000caa6:	83 c4 20             	add    esp,0x20
c000caa9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cab1:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cabc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cabf:	7d 50                	jge    c000cb11 <sinc_quad_vari_process+0x310>
c000cac1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cac4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac7:	01 c8                	add    eax,ecx
c000cac9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cacc:	99                   	cdq    
c000cacd:	f7 f9                	idiv   ecx
c000cacf:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cad3:	7d 0c                	jge    c000cae1 <sinc_quad_vari_process+0x2e0>
c000cad5:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad8:	85 ff                	test   edi,edi
c000cada:	79 6c                	jns    c000cb48 <sinc_quad_vari_process+0x347>
c000cadc:	e9 e7 00 00 00       	jmp    c000cbc8 <sinc_quad_vari_process+0x3c7>
c000cae1:	50                   	push   eax
c000cae2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	e8 11 ee ff ff       	call   c000b8fe <prepare_data>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	89 c2                	mov    edx,eax
c000caf2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caf5:	85 c0                	test   eax,eax
c000caf7:	0f 85 bf 03 00 00    	jne    c000cebc <sinc_quad_vari_process+0x6bb>
c000cafd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb00:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb03:	01 c8                	add    eax,ecx
c000cb05:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb08:	99                   	cdq    
c000cb09:	f7 f9                	idiv   ecx
c000cb0b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb0f:	7c c4                	jl     c000cad5 <sinc_quad_vari_process+0x2d4>
c000cb11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb1c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb2a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb2d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb30:	99                   	cdq    
c000cb31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb37:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb3a:	99                   	cdq    
c000cb3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb3e:	31 d2                	xor    edx,edx
c000cb40:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb43:	e9 74 03 00 00       	jmp    c000cebc <sinc_quad_vari_process+0x6bb>
c000cb48:	83 ec 0c             	sub    esp,0xc
c000cb4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb4e:	e8 48 b8 01 00       	call   c002839b <__floatsidf>
c000cb53:	83 c4 10             	add    esp,0x10
c000cb56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6e:	e8 48 ab 01 00       	call   c00276bb <__adddf3>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8e:	e8 28 ab 01 00       	call   c00276bb <__adddf3>
c000cb93:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb9e:	e8 f8 b7 01 00       	call   c002839b <__floatsidf>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbae:	52                   	push   edx
c000cbaf:	50                   	push   eax
c000cbb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb8:	e8 48 ba 01 00       	call   c0028605 <__gedf2>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	85 c0                	test   eax,eax
c000cbc2:	0f 89 49 ff ff ff    	jns    c000cb11 <sinc_quad_vari_process+0x310>
c000cbc8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbcc:	0f 8e ef 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cbd2:	83 ec 10             	sub    esp,0x10
c000cbd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbdb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbe1:	e8 26 b1 01 00       	call   c0027d0c <__subdf3>
c000cbe6:	83 c4 18             	add    esp,0x18
c000cbe9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	e8 a8 bb 01 00       	call   c00287a0 <fabs>
c000cbf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbfc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc08:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	e8 cf b9 01 00       	call   c00285e9 <__gtdf2>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	0f 8e 9c 00 00 00    	jle    c000ccc1 <sinc_quad_vari_process+0x4c0>
c000cc25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc28:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc33:	52                   	push   edx
c000cc34:	50                   	push   eax
c000cc35:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc38:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc3b:	e8 cc b0 01 00       	call   c0027d0c <__subdf3>
c000cc40:	59                   	pop    ecx
c000cc41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc45:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc49:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc4c:	e8 4a b7 01 00       	call   c002839b <__floatsidf>
c000cc51:	83 c4 10             	add    esp,0x10
c000cc54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc58:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5c:	52                   	push   edx
c000cc5d:	50                   	push   eax
c000cc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	e8 cd b0 01 00       	call   c0027d38 <__muldf3>
c000cc6b:	5f                   	pop    edi
c000cc6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc70:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc74:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc77:	e8 1f b7 01 00       	call   c002839b <__floatsidf>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc87:	52                   	push   edx
c000cc88:	50                   	push   eax
c000cc89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc91:	e8 86 b3 01 00       	call   c002801c <__divdf3>
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc9d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccb1:	e8 05 aa 01 00       	call   c00276bb <__adddf3>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccc1:	83 ec 0c             	sub    esp,0xc
c000ccc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccc7:	e8 cf b6 01 00       	call   c002839b <__floatsidf>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce7:	e8 1b b9 01 00       	call   c0028607 <__ltdf2>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccf5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccfd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd01:	78 10                	js     c000cd13 <sinc_quad_vari_process+0x512>
c000cd03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd23:	e8 10 b0 01 00       	call   c0027d38 <__muldf3>
c000cd28:	59                   	pop    ecx
c000cd29:	5f                   	pop    edi
c000cd2a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd2e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd3a:	e8 98 eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd43:	89 c7                	mov    edi,eax
c000cd45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd51:	e8 e2 af 01 00       	call   c0027d38 <__muldf3>
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd61:	52                   	push   edx
c000cd62:	50                   	push   eax
c000cd63:	e8 6f eb ff ff       	call   c000b8d7 <double_to_fp>
c000cd68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd6b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd6f:	83 c4 0c             	add    esp,0xc
c000cd72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd75:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd78:	50                   	push   eax
c000cd79:	50                   	push   eax
c000cd7a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd7d:	e8 19 b6 01 00       	call   c002839b <__floatsidf>
c000cd82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd9a:	e8 7d b2 01 00       	call   c002801c <__divdf3>
c000cd9f:	83 c4 18             	add    esp,0x18
c000cda2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cda6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdaa:	52                   	push   edx
c000cdab:	89 fa                	mov    edx,edi
c000cdad:	50                   	push   eax
c000cdae:	89 d8                	mov    eax,ebx
c000cdb0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdb4:	e8 a5 d1 ff ff       	call   c0009f5e <calc_output_quad>
c000cdb9:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdcd:	e8 4a b2 01 00       	call   c002801c <__divdf3>
c000cdd2:	83 c4 10             	add    esp,0x10
c000cdd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cded:	e8 c9 a8 01 00       	call   c00276bb <__adddf3>
c000cdf2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdf6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdfa:	83 c4 18             	add    esp,0x18
c000cdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce05:	e8 b6 b9 01 00       	call   c00287c0 <lrint>
c000ce0a:	83 ec 0c             	sub    esp,0xc
c000ce0d:	50                   	push   eax
c000ce0e:	e8 88 b5 01 00       	call   c002839b <__floatsidf>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1e:	52                   	push   edx
c000ce1f:	50                   	push   eax
c000ce20:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce24:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce28:	e8 df ae 01 00       	call   c0027d0c <__subdf3>
c000ce2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce35:	83 c4 20             	add    esp,0x20
c000ce38:	6a 00                	push   0x0
c000ce3a:	6a 00                	push   0x0
c000ce3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce44:	e8 be b7 01 00       	call   c0028607 <__ltdf2>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	85 c0                	test   eax,eax
c000ce4e:	79 20                	jns    c000ce70 <sinc_quad_vari_process+0x66f>
c000ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 56 a8 01 00       	call   c00276bb <__adddf3>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce73:	83 ec 10             	sub    esp,0x10
c000ce76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce8d:	e8 7a ae 01 00       	call   c0027d0c <__subdf3>
c000ce92:	83 c4 18             	add    esp,0x18
c000ce95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce9d:	52                   	push   edx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 1c b9 01 00       	call   c00287c0 <lrint>
c000cea4:	0f af f8             	imul   edi,eax
c000cea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	01 f8                	add    eax,edi
c000ceb0:	99                   	cdq    
c000ceb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceb7:	e9 fd fb ff ff       	jmp    c000cab9 <sinc_quad_vari_process+0x2b8>
c000cebc:	83 c4 4c             	add    esp,0x4c
c000cebf:	89 d0                	mov    eax,edx
c000cec1:	5b                   	pop    ebx
c000cec2:	5e                   	pop    esi
c000cec3:	5f                   	pop    edi
c000cec4:	5d                   	pop    ebp
c000cec5:	c3                   	ret    

c000cec6 <sinc_stereo_vari_process>:
c000cec6:	55                   	push   ebp
c000cec7:	ba 05 00 00 00       	mov    edx,0x5
c000cecc:	57                   	push   edi
c000cecd:	56                   	push   esi
c000cece:	53                   	push   ebx
c000cecf:	83 ec 4c             	sub    esp,0x4c
c000ced2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ced6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceda:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cedd:	85 db                	test   ebx,ebx
c000cedf:	0f 84 9c 06 00 00    	je     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cee5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ceeb:	0f af c7             	imul   eax,edi
c000ceee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cef1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cef4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cefb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf02:	0f af c7             	imul   eax,edi
c000cf05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf16:	68 00 00 70 3f       	push   0x3f700000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf25:	e8 dd b6 01 00       	call   c0028607 <__ltdf2>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	ba 16 00 00 00       	mov    edx,0x16
c000cf32:	85 c0                	test   eax,eax
c000cf34:	0f 88 47 06 00 00    	js     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf3a:	68 00 00 70 40       	push   0x40700000
c000cf3f:	6a 00                	push   0x0
c000cf41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf49:	e8 9b b6 01 00       	call   c00285e9 <__gtdf2>
c000cf4e:	83 c4 10             	add    esp,0x10
c000cf51:	ba 16 00 00 00       	mov    edx,0x16
c000cf56:	85 c0                	test   eax,eax
c000cf58:	0f 8f 23 06 00 00    	jg     c000d581 <sinc_stereo_vari_process+0x6bb>
c000cf5e:	83 ec 0c             	sub    esp,0xc
c000cf61:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf64:	e8 32 b4 01 00       	call   c002839b <__floatsidf>
c000cf69:	83 c4 10             	add    esp,0x10
c000cf6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf74:	68 00 00 00 40       	push   0x40000000
c000cf79:	6a 00                	push   0x0
c000cf7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	e8 33 a7 01 00       	call   c00276bb <__adddf3>
c000cf88:	59                   	pop    ecx
c000cf89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf91:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf94:	e8 02 b4 01 00       	call   c002839b <__floatsidf>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	52                   	push   edx
c000cfa5:	50                   	push   eax
c000cfa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfae:	e8 69 b0 01 00       	call   c002801c <__divdf3>
c000cfb3:	83 c4 10             	add    esp,0x10
c000cfb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfbe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfc1:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfdc:	e8 08 b6 01 00       	call   c00285e9 <__gtdf2>
c000cfe1:	83 c4 10             	add    esp,0x10
c000cfe4:	85 c0                	test   eax,eax
c000cfe6:	7e 2d                	jle    c000d015 <sinc_stereo_vari_process+0x14f>
c000cfe8:	68 00 00 f0 3f       	push   0x3ff00000
c000cfed:	6a 00                	push   0x0
c000cfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff7:	e8 0b b6 01 00       	call   c0028607 <__ltdf2>
c000cffc:	83 c4 10             	add    esp,0x10
c000cfff:	85 c0                	test   eax,eax
c000d001:	79 4d                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d007:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d00b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d00f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d013:	eb 1b                	jmp    c000d030 <sinc_stereo_vari_process+0x16a>
c000d015:	68 00 00 f0 3f       	push   0x3ff00000
c000d01a:	6a 00                	push   0x0
c000d01c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d024:	e8 de b5 01 00       	call   c0028607 <__ltdf2>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	85 c0                	test   eax,eax
c000d02e:	79 20                	jns    c000d050 <sinc_stereo_vari_process+0x18a>
c000d030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d034:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 d7 af 01 00       	call   c002801c <__divdf3>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d04c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d050:	50                   	push   eax
c000d051:	50                   	push   eax
c000d052:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05a:	e8 61 b7 01 00       	call   c00287c0 <lrint>
c000d05f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d062:	40                   	inc    eax
c000d063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d067:	0f af c7             	imul   eax,edi
c000d06a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d06e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d075:	58                   	pop    eax
c000d076:	5a                   	pop    edx
c000d077:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d07f:	e8 3c b7 01 00       	call   c00287c0 <lrint>
c000d084:	83 ec 0c             	sub    esp,0xc
c000d087:	50                   	push   eax
c000d088:	e8 0e b3 01 00       	call   c002839b <__floatsidf>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d094:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d098:	52                   	push   edx
c000d099:	50                   	push   eax
c000d09a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0a2:	e8 65 ac 01 00       	call   c0027d0c <__subdf3>
c000d0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0af:	83 c4 20             	add    esp,0x20
c000d0b2:	6a 00                	push   0x0
c000d0b4:	6a 00                	push   0x0
c000d0b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0be:	e8 44 b5 01 00       	call   c0028607 <__ltdf2>
c000d0c3:	83 c4 10             	add    esp,0x10
c000d0c6:	85 c0                	test   eax,eax
c000d0c8:	79 1f                	jns    c000d0e9 <sinc_stereo_vari_process+0x223>
c000d0ca:	68 00 00 f0 3f       	push   0x3ff00000
c000d0cf:	6a 00                	push   0x0
c000d0d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d9:	e8 dd a5 01 00       	call   c00276bb <__adddf3>
c000d0de:	83 c4 10             	add    esp,0x10
c000d0e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0ec:	83 ec 10             	sub    esp,0x10
c000d0ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d106:	e8 01 ac 01 00       	call   c0027d0c <__subdf3>
c000d10b:	83 c4 18             	add    esp,0x18
c000d10e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d116:	52                   	push   edx
c000d117:	50                   	push   eax
c000d118:	e8 a3 b6 01 00       	call   c00287c0 <lrint>
c000d11d:	0f af f8             	imul   edi,eax
c000d120:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d124:	01 f8                	add    eax,edi
c000d126:	99                   	cdq    
c000d127:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d12a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d12d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d135:	68 00 00 f0 3f       	push   0x3ff00000
c000d13a:	6a 00                	push   0x0
c000d13c:	e8 db ae 01 00       	call   c002801c <__divdf3>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d14c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d151:	68 23 42 92 0c       	push   0xc924223
c000d156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d15e:	e8 58 a5 01 00       	call   c00276bb <__adddf3>
c000d163:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d167:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d16b:	83 c4 20             	add    esp,0x20
c000d16e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d176:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d17e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d181:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d184:	7d 50                	jge    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d186:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d189:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d18c:	01 c8                	add    eax,ecx
c000d18e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d191:	99                   	cdq    
c000d192:	f7 f9                	idiv   ecx
c000d194:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d198:	7d 0c                	jge    c000d1a6 <sinc_stereo_vari_process+0x2e0>
c000d19a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d19d:	85 ff                	test   edi,edi
c000d19f:	79 6c                	jns    c000d20d <sinc_stereo_vari_process+0x347>
c000d1a1:	e9 e7 00 00 00       	jmp    c000d28d <sinc_stereo_vari_process+0x3c7>
c000d1a6:	50                   	push   eax
c000d1a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ab:	56                   	push   esi
c000d1ac:	53                   	push   ebx
c000d1ad:	e8 4c e7 ff ff       	call   c000b8fe <prepare_data>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	89 c2                	mov    edx,eax
c000d1b7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1ba:	85 c0                	test   eax,eax
c000d1bc:	0f 85 bf 03 00 00    	jne    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d1c2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c8:	01 c8                	add    eax,ecx
c000d1ca:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 f9                	idiv   ecx
c000d1d0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1d4:	7c c4                	jl     c000d19a <sinc_stereo_vari_process+0x2d4>
c000d1d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1de:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1e1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1ec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1f5:	99                   	cdq    
c000d1f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1ff:	99                   	cdq    
c000d200:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d203:	31 d2                	xor    edx,edx
c000d205:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d208:	e9 74 03 00 00       	jmp    c000d581 <sinc_stereo_vari_process+0x6bb>
c000d20d:	83 ec 0c             	sub    esp,0xc
c000d210:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d213:	e8 83 b1 01 00       	call   c002839b <__floatsidf>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d223:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d227:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d233:	e8 83 a4 01 00       	call   c00276bb <__adddf3>
c000d238:	83 c4 10             	add    esp,0x10
c000d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d243:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d247:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d253:	e8 63 a4 01 00       	call   c00276bb <__adddf3>
c000d258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d25b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d263:	e8 33 b1 01 00       	call   c002839b <__floatsidf>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d26f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d273:	52                   	push   edx
c000d274:	50                   	push   eax
c000d275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d27d:	e8 83 b3 01 00       	call   c0028605 <__gedf2>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	85 c0                	test   eax,eax
c000d287:	0f 89 49 ff ff ff    	jns    c000d1d6 <sinc_stereo_vari_process+0x310>
c000d28d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d291:	0f 8e ef 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d297:	83 ec 10             	sub    esp,0x10
c000d29a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d29d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2a0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2a6:	e8 61 aa 01 00       	call   c0027d0c <__subdf3>
c000d2ab:	83 c4 18             	add    esp,0x18
c000d2ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	e8 e3 b4 01 00       	call   c00287a0 <fabs>
c000d2bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2cd:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2da:	e8 0a b3 01 00       	call   c00285e9 <__gtdf2>
c000d2df:	83 c4 10             	add    esp,0x10
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	0f 8e 9c 00 00 00    	jle    c000d386 <sinc_stereo_vari_process+0x4c0>
c000d2ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ed:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f8:	52                   	push   edx
c000d2f9:	50                   	push   eax
c000d2fa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2fd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d300:	e8 07 aa 01 00       	call   c0027d0c <__subdf3>
c000d305:	59                   	pop    ecx
c000d306:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d30e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d311:	e8 85 b0 01 00       	call   c002839b <__floatsidf>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d31d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d321:	52                   	push   edx
c000d322:	50                   	push   eax
c000d323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	e8 08 aa 01 00       	call   c0027d38 <__muldf3>
c000d330:	5f                   	pop    edi
c000d331:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d335:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d339:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d33c:	e8 5a b0 01 00       	call   c002839b <__floatsidf>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d34c:	52                   	push   edx
c000d34d:	50                   	push   eax
c000d34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d352:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d356:	e8 c1 ac 01 00       	call   c002801c <__divdf3>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d362:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d376:	e8 40 a3 01 00       	call   c00276bb <__adddf3>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d38c:	e8 0a b0 01 00       	call   c002839b <__floatsidf>
c000d391:	83 c4 10             	add    esp,0x10
c000d394:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d398:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ac:	e8 56 b2 01 00       	call   c0028607 <__ltdf2>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	85 c0                	test   eax,eax
c000d3b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3be:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3c6:	78 10                	js     c000d3d8 <sinc_stereo_vari_process+0x512>
c000d3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3d4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e8:	e8 4b a9 01 00       	call   c0027d38 <__muldf3>
c000d3ed:	59                   	pop    ecx
c000d3ee:	5f                   	pop    edi
c000d3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3ff:	e8 d3 e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d404:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d408:	89 c7                	mov    edi,eax
c000d40a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d40e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d416:	e8 1d a9 01 00       	call   c0027d38 <__muldf3>
c000d41b:	83 c4 18             	add    esp,0x18
c000d41e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d422:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d426:	52                   	push   edx
c000d427:	50                   	push   eax
c000d428:	e8 aa e4 ff ff       	call   c000b8d7 <double_to_fp>
c000d42d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d430:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d43a:	8d 04 90             	lea    eax,[eax+edx*4]
c000d43d:	50                   	push   eax
c000d43e:	50                   	push   eax
c000d43f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d442:	e8 54 af 01 00       	call   c002839b <__floatsidf>
c000d447:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d44b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d45f:	e8 b8 ab 01 00       	call   c002801c <__divdf3>
c000d464:	83 c4 18             	add    esp,0x18
c000d467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46f:	52                   	push   edx
c000d470:	89 fa                	mov    edx,edi
c000d472:	50                   	push   eax
c000d473:	89 d8                	mov    eax,ebx
c000d475:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d479:	e8 02 c7 ff ff       	call   c0009b80 <calc_output_stereo>
c000d47e:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d482:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d48a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d492:	e8 85 ab 01 00       	call   c002801c <__divdf3>
c000d497:	83 c4 10             	add    esp,0x10
c000d49a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d49e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4b2:	e8 04 a2 01 00       	call   c00276bb <__adddf3>
c000d4b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4bf:	83 c4 18             	add    esp,0x18
c000d4c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ca:	e8 f1 b2 01 00       	call   c00287c0 <lrint>
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 c3 ae 01 00       	call   c002839b <__floatsidf>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4e3:	52                   	push   edx
c000d4e4:	50                   	push   eax
c000d4e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ed:	e8 1a a8 01 00       	call   c0027d0c <__subdf3>
c000d4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4fa:	83 c4 20             	add    esp,0x20
c000d4fd:	6a 00                	push   0x0
c000d4ff:	6a 00                	push   0x0
c000d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d509:	e8 f9 b0 01 00       	call   c0028607 <__ltdf2>
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	85 c0                	test   eax,eax
c000d513:	79 20                	jns    c000d535 <sinc_stereo_vari_process+0x66f>
c000d515:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 91 a1 01 00       	call   c00276bb <__adddf3>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d535:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d538:	83 ec 10             	sub    esp,0x10
c000d53b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d53f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d552:	e8 b5 a7 01 00       	call   c0027d0c <__subdf3>
c000d557:	83 c4 18             	add    esp,0x18
c000d55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	e8 57 b2 01 00       	call   c00287c0 <lrint>
c000d569:	0f af f8             	imul   edi,eax
c000d56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	01 f8                	add    eax,edi
c000d575:	99                   	cdq    
c000d576:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d579:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d57c:	e9 fd fb ff ff       	jmp    c000d17e <sinc_stereo_vari_process+0x2b8>
c000d581:	83 c4 4c             	add    esp,0x4c
c000d584:	89 d0                	mov    eax,edx
c000d586:	5b                   	pop    ebx
c000d587:	5e                   	pop    esi
c000d588:	5f                   	pop    edi
c000d589:	5d                   	pop    ebp
c000d58a:	c3                   	ret    

c000d58b <sinc_mono_vari_process>:
c000d58b:	55                   	push   ebp
c000d58c:	ba 05 00 00 00       	mov    edx,0x5
c000d591:	57                   	push   edi
c000d592:	56                   	push   esi
c000d593:	53                   	push   ebx
c000d594:	83 ec 4c             	sub    esp,0x4c
c000d597:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d59b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d59f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5a2:	85 db                	test   ebx,ebx
c000d5a4:	0f 84 c1 06 00 00    	je     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d5aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5b0:	0f af c7             	imul   eax,edi
c000d5b3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5c0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5c7:	0f af c7             	imul   eax,edi
c000d5ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5de:	68 00 00 70 3f       	push   0x3f700000
c000d5e3:	6a 00                	push   0x0
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ed:	e8 15 b0 01 00       	call   c0028607 <__ltdf2>
c000d5f2:	83 c4 10             	add    esp,0x10
c000d5f5:	ba 16 00 00 00       	mov    edx,0x16
c000d5fa:	85 c0                	test   eax,eax
c000d5fc:	0f 88 69 06 00 00    	js     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d602:	68 00 00 70 40       	push   0x40700000
c000d607:	6a 00                	push   0x0
c000d609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d611:	e8 d3 af 01 00       	call   c00285e9 <__gtdf2>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	ba 16 00 00 00       	mov    edx,0x16
c000d61e:	85 c0                	test   eax,eax
c000d620:	0f 8f 45 06 00 00    	jg     c000dc6b <sinc_mono_vari_process+0x6e0>
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d62c:	e8 6a ad 01 00       	call   c002839b <__floatsidf>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d63c:	68 00 00 00 40       	push   0x40000000
c000d641:	6a 00                	push   0x0
c000d643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	e8 6b a0 01 00       	call   c00276bb <__adddf3>
c000d650:	59                   	pop    ecx
c000d651:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d655:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d65c:	e8 3a ad 01 00       	call   c002839b <__floatsidf>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	52                   	push   edx
c000d66d:	50                   	push   eax
c000d66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d676:	e8 a1 a9 01 00       	call   c002801c <__divdf3>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d682:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d686:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d689:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a4:	e8 40 af 01 00       	call   c00285e9 <__gtdf2>
c000d6a9:	83 c4 10             	add    esp,0x10
c000d6ac:	85 c0                	test   eax,eax
c000d6ae:	7e 2d                	jle    c000d6dd <sinc_mono_vari_process+0x152>
c000d6b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d6b5:	6a 00                	push   0x0
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bf:	e8 43 af 01 00       	call   c0028607 <__ltdf2>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	85 c0                	test   eax,eax
c000d6c9:	79 4d                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6db:	eb 1b                	jmp    c000d6f8 <sinc_mono_vari_process+0x16d>
c000d6dd:	68 00 00 f0 3f       	push   0x3ff00000
c000d6e2:	6a 00                	push   0x0
c000d6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ec:	e8 16 af 01 00       	call   c0028607 <__ltdf2>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	85 c0                	test   eax,eax
c000d6f6:	79 20                	jns    c000d718 <sinc_mono_vari_process+0x18d>
c000d6f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 0f a9 01 00       	call   c002801c <__divdf3>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d714:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d718:	50                   	push   eax
c000d719:	50                   	push   eax
c000d71a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d722:	e8 99 b0 01 00       	call   c00287c0 <lrint>
c000d727:	40                   	inc    eax
c000d728:	0f af c7             	imul   eax,edi
c000d72b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d72f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d733:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d736:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d73d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d741:	58                   	pop    eax
c000d742:	5a                   	pop    edx
c000d743:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d747:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d74b:	e8 70 b0 01 00       	call   c00287c0 <lrint>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	50                   	push   eax
c000d754:	e8 42 ac 01 00       	call   c002839b <__floatsidf>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d760:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d764:	52                   	push   edx
c000d765:	50                   	push   eax
c000d766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d76e:	e8 99 a5 01 00       	call   c0027d0c <__subdf3>
c000d773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d77b:	83 c4 20             	add    esp,0x20
c000d77e:	6a 00                	push   0x0
c000d780:	6a 00                	push   0x0
c000d782:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78a:	e8 78 ae 01 00       	call   c0028607 <__ltdf2>
c000d78f:	83 c4 10             	add    esp,0x10
c000d792:	85 c0                	test   eax,eax
c000d794:	79 1f                	jns    c000d7b5 <sinc_mono_vari_process+0x22a>
c000d796:	68 00 00 f0 3f       	push   0x3ff00000
c000d79b:	6a 00                	push   0x0
c000d79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a5:	e8 11 9f 01 00       	call   c00276bb <__adddf3>
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7b5:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7bb:	83 ec 10             	sub    esp,0x10
c000d7be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ce:	e8 39 a5 01 00       	call   c0027d0c <__subdf3>
c000d7d3:	83 c4 18             	add    esp,0x18
c000d7d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7de:	52                   	push   edx
c000d7df:	50                   	push   eax
c000d7e0:	e8 db af 01 00       	call   c00287c0 <lrint>
c000d7e5:	0f af f8             	imul   edi,eax
c000d7e8:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7eb:	31 ff                	xor    edi,edi
c000d7ed:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7f2:	99                   	cdq    
c000d7f3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d801:	55                   	push   ebp
c000d802:	57                   	push   edi
c000d803:	e8 14 a8 01 00       	call   c002801c <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d818:	68 23 42 92 0c       	push   0xc924223
c000d81d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d821:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d825:	e8 91 9e 01 00       	call   c00276bb <__adddf3>
c000d82a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d82e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d832:	83 c4 20             	add    esp,0x20
c000d835:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d839:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d83d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d840:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d843:	7d 54                	jge    c000d899 <sinc_mono_vari_process+0x30e>
c000d845:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d848:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d84b:	01 c8                	add    eax,ecx
c000d84d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d850:	99                   	cdq    
c000d851:	f7 f9                	idiv   ecx
c000d853:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d857:	7d 0c                	jge    c000d865 <sinc_mono_vari_process+0x2da>
c000d859:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d85c:	85 ff                	test   edi,edi
c000d85e:	79 73                	jns    c000d8d3 <sinc_mono_vari_process+0x348>
c000d860:	e9 ee 00 00 00       	jmp    c000d953 <sinc_mono_vari_process+0x3c8>
c000d865:	50                   	push   eax
c000d866:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d86a:	56                   	push   esi
c000d86b:	53                   	push   ebx
c000d86c:	e8 8d e0 ff ff       	call   c000b8fe <prepare_data>
c000d871:	89 c2                	mov    edx,eax
c000d873:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d87d:	85 d2                	test   edx,edx
c000d87f:	0f 85 e6 03 00 00    	jne    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d885:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d888:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d88b:	01 c8                	add    eax,ecx
c000d88d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d890:	99                   	cdq    
c000d891:	f7 f9                	idiv   ecx
c000d893:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d897:	7c c0                	jl     c000d859 <sinc_mono_vari_process+0x2ce>
c000d899:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d89d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8a5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8b3:	89 01                	mov    DWORD PTR [ecx],eax
c000d8b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8bb:	99                   	cdq    
c000d8bc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8c5:	99                   	cdq    
c000d8c6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ce:	e9 98 03 00 00       	jmp    c000dc6b <sinc_mono_vari_process+0x6e0>
c000d8d3:	83 ec 0c             	sub    esp,0xc
c000d8d6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d9:	e8 bd aa 01 00       	call   c002839b <__floatsidf>
c000d8de:	83 c4 10             	add    esp,0x10
c000d8e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f9:	e8 bd 9d 01 00       	call   c00276bb <__adddf3>
c000d8fe:	83 c4 10             	add    esp,0x10
c000d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d909:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d90d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d919:	e8 9d 9d 01 00       	call   c00276bb <__adddf3>
c000d91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d921:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d925:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d929:	e8 6d aa 01 00       	call   c002839b <__floatsidf>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d935:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d939:	52                   	push   edx
c000d93a:	50                   	push   eax
c000d93b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d943:	e8 a1 ac 01 00       	call   c00285e9 <__gtdf2>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	85 c0                	test   eax,eax
c000d94d:	0f 8f 46 ff ff ff    	jg     c000d899 <sinc_mono_vari_process+0x30e>
c000d953:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d957:	0f 8e f5 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d95d:	83 ec 10             	sub    esp,0x10
c000d960:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d963:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d966:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d96a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d96d:	ff 30                	push   DWORD PTR [eax]
c000d96f:	e8 98 a3 01 00       	call   c0027d0c <__subdf3>
c000d974:	83 c4 18             	add    esp,0x18
c000d977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d97f:	52                   	push   edx
c000d980:	50                   	push   eax
c000d981:	e8 1a ae 01 00       	call   c00287a0 <fabs>
c000d986:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d98a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d996:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d99b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9a3:	e8 41 ac 01 00       	call   c00285e9 <__gtdf2>
c000d9a8:	83 c4 10             	add    esp,0x10
c000d9ab:	85 c0                	test   eax,eax
c000d9ad:	0f 8e 9f 00 00 00    	jle    c000da52 <sinc_mono_vari_process+0x4c7>
c000d9b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9c4:	52                   	push   edx
c000d9c5:	50                   	push   eax
c000d9c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9cc:	e8 3b a3 01 00       	call   c0027d0c <__subdf3>
c000d9d1:	5f                   	pop    edi
c000d9d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9da:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9dd:	e8 b9 a9 01 00       	call   c002839b <__floatsidf>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ed:	52                   	push   edx
c000d9ee:	50                   	push   eax
c000d9ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	e8 3c a3 01 00       	call   c0027d38 <__muldf3>
c000d9fc:	5d                   	pop    ebp
c000d9fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da01:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da05:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da08:	e8 8e a9 01 00       	call   c002839b <__floatsidf>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da18:	52                   	push   edx
c000da19:	50                   	push   eax
c000da1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da22:	e8 f5 a5 01 00       	call   c002801c <__divdf3>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da42:	e8 74 9c 01 00       	call   c00276bb <__adddf3>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da58:	e8 3e a9 01 00       	call   c002839b <__floatsidf>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	e8 8a ab 01 00       	call   c0028607 <__ltdf2>
c000da7d:	83 c4 10             	add    esp,0x10
c000da80:	85 c0                	test   eax,eax
c000da82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da86:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da8a:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da8e:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da92:	78 10                	js     c000daa4 <sinc_mono_vari_process+0x519>
c000da94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000daa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000daa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab4:	e8 7f a2 01 00       	call   c0027d38 <__muldf3>
c000dab9:	59                   	pop    ecx
c000daba:	5f                   	pop    edi
c000dabb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dabf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dacb:	e8 07 de ff ff       	call   c000b8d7 <double_to_fp>
c000dad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad4:	89 c7                	mov    edi,eax
c000dad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dae2:	e8 51 a2 01 00       	call   c0027d38 <__muldf3>
c000dae7:	83 c4 18             	add    esp,0x18
c000daea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daf2:	52                   	push   edx
c000daf3:	50                   	push   eax
c000daf4:	e8 de dd ff ff       	call   c000b8d7 <double_to_fp>
c000daf9:	83 ec 0c             	sub    esp,0xc
c000dafc:	89 c5                	mov    ebp,eax
c000dafe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db01:	e8 95 a8 01 00       	call   c002839b <__floatsidf>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db11:	52                   	push   edx
c000db12:	50                   	push   eax
c000db13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1b:	e8 fc a4 01 00       	call   c002801c <__divdf3>
c000db20:	83 c4 10             	add    esp,0x10
c000db23:	89 e9                	mov    ecx,ebp
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	89 d8                	mov    eax,ebx
c000db2f:	89 fa                	mov    edx,edi
c000db31:	e8 ee bd ff ff       	call   c0009924 <calc_output_single>
c000db36:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db39:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db44:	52                   	push   edx
c000db45:	50                   	push   eax
c000db46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db4e:	e8 e5 a1 01 00       	call   c0027d38 <__muldf3>
c000db53:	59                   	pop    ecx
c000db54:	59                   	pop    ecx
c000db55:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db59:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db65:	e8 a1 aa 01 00       	call   c002860b <__truncdfsf2>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db70:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db83:	e8 94 a4 01 00       	call   c002801c <__divdf3>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dba3:	e8 13 9b 01 00       	call   c00276bb <__adddf3>
c000dba8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbb0:	83 c4 18             	add    esp,0x18
c000dbb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbbb:	e8 00 ac 01 00       	call   c00287c0 <lrint>
c000dbc0:	83 ec 0c             	sub    esp,0xc
c000dbc3:	50                   	push   eax
c000dbc4:	e8 d2 a7 01 00       	call   c002839b <__floatsidf>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd4:	52                   	push   edx
c000dbd5:	50                   	push   eax
c000dbd6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbde:	e8 29 a1 01 00       	call   c0027d0c <__subdf3>
c000dbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbe7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbeb:	83 c4 20             	add    esp,0x20
c000dbee:	6a 00                	push   0x0
c000dbf0:	6a 00                	push   0x0
c000dbf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfa:	e8 08 aa 01 00       	call   c0028607 <__ltdf2>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	85 c0                	test   eax,eax
c000dc04:	79 20                	jns    c000dc26 <sinc_mono_vari_process+0x69b>
c000dc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 a0 9a 01 00       	call   c00276bb <__adddf3>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc26:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc29:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc2c:	83 ec 10             	sub    esp,0x10
c000dc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc3f:	e8 c8 a0 01 00       	call   c0027d0c <__subdf3>
c000dc44:	83 c4 18             	add    esp,0x18
c000dc47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc4f:	52                   	push   edx
c000dc50:	50                   	push   eax
c000dc51:	e8 6a ab 01 00       	call   c00287c0 <lrint>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	0f af f8             	imul   edi,eax
c000dc5c:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc5f:	99                   	cdq    
c000dc60:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc63:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc66:	e9 d2 fb ff ff       	jmp    c000d83d <sinc_mono_vari_process+0x2b2>
c000dc6b:	83 c4 4c             	add    esp,0x4c
c000dc6e:	89 d0                	mov    eax,edx
c000dc70:	5b                   	pop    ebx
c000dc71:	5e                   	pop    esi
c000dc72:	5f                   	pop    edi
c000dc73:	5d                   	pop    ebp
c000dc74:	c3                   	ret    

c000dc75 <sinc_get_name>:
c000dc75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc79:	31 c0                	xor    eax,eax
c000dc7b:	83 fa 02             	cmp    edx,0x2
c000dc7e:	77 07                	ja     c000dc87 <sinc_get_name+0x12>
c000dc80:	8b 04 95 c4 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd603c]
c000dc87:	c3                   	ret    

c000dc88 <sinc_get_description>:
c000dc88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc8c:	31 c0                	xor    eax,eax
c000dc8e:	83 fa 02             	cmp    edx,0x2
c000dc91:	77 07                	ja     c000dc9a <sinc_get_description+0x12>
c000dc93:	8b 04 95 b8 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6048]
c000dc9a:	c3                   	ret    

c000dc9b <sinc_set_converter>:
c000dc9b:	53                   	push   ebx
c000dc9c:	81 ec 58 08 00 00    	sub    esp,0x858
c000dca2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcac:	85 c0                	test   eax,eax
c000dcae:	74 13                	je     c000dcc3 <sinc_set_converter+0x28>
c000dcb0:	83 ec 0c             	sub    esp,0xc
c000dcb3:	50                   	push   eax
c000dcb4:	e8 a2 1b 00 00       	call   c000f85b <free>
c000dcb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	50                   	push   eax
c000dcc4:	68 44 08 00 00       	push   0x844
c000dcc9:	6a 00                	push   0x0
c000dccb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dccf:	50                   	push   eax
c000dcd0:	e8 ab 2a ff ff       	call   c0000780 <memset>
c000dcd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd8:	83 c4 10             	add    esp,0x10
c000dcdb:	b8 0b 00 00 00       	mov    eax,0xb
c000dce0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dce6:	7f 6e                	jg     c000dd56 <sinc_set_converter+0xbb>
c000dce8:	83 fa 01             	cmp    edx,0x1
c000dceb:	75 10                	jne    c000dcfd <sinc_set_converter+0x62>
c000dced:	c7 43 24 8b d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d58b
c000dcf4:	c7 43 20 8b d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d58b
c000dcfb:	eb 4d                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dcfd:	83 fa 02             	cmp    edx,0x2
c000dd00:	75 10                	jne    c000dd12 <sinc_set_converter+0x77>
c000dd02:	c7 43 24 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cec6
c000dd09:	c7 43 20 c6 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cec6
c000dd10:	eb 38                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd12:	83 fa 04             	cmp    edx,0x4
c000dd15:	75 10                	jne    c000dd27 <sinc_set_converter+0x8c>
c000dd17:	c7 43 24 01 c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c801
c000dd1e:	c7 43 20 01 c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c801
c000dd25:	eb 23                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd27:	83 fa 06             	cmp    edx,0x6
c000dd2a:	75 10                	jne    c000dd3c <sinc_set_converter+0xa1>
c000dd2c:	c7 43 24 3c c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c13c
c000dd33:	c7 43 20 3c c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c13c
c000dd3a:	eb 0e                	jmp    c000dd4a <sinc_set_converter+0xaf>
c000dd3c:	c7 43 24 78 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba78
c000dd43:	c7 43 20 78 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba78
c000dd4a:	c7 43 28 2b ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad2b
c000dd51:	b8 0a 00 00 00       	mov    eax,0xa
c000dd56:	81 c4 58 08 00 00    	add    esp,0x858
c000dd5c:	5b                   	pop    ebx
c000dd5d:	c3                   	ret    

c000dd5e <zoh_vari_process>:
c000dd5e:	55                   	push   ebp
c000dd5f:	31 d2                	xor    edx,edx
c000dd61:	57                   	push   edi
c000dd62:	56                   	push   esi
c000dd63:	53                   	push   ebx
c000dd64:	83 ec 3c             	sub    esp,0x3c
c000dd67:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd6f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd73:	0f 8e 80 06 00 00    	jle    c000e3f9 <zoh_vari_process+0x69b>
c000dd79:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd7c:	ba 05 00 00 00       	mov    edx,0x5
c000dd81:	85 db                	test   ebx,ebx
c000dd83:	0f 84 70 06 00 00    	je     c000e3f9 <zoh_vari_process+0x69b>
c000dd89:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd8c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd90:	74 19                	je     c000ddab <zoh_vari_process+0x4d>
c000dd92:	31 d2                	xor    edx,edx
c000dd94:	39 c2                	cmp    edx,eax
c000dd96:	7d 0c                	jge    c000dda4 <zoh_vari_process+0x46>
c000dd98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd9a:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd9d:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dda1:	42                   	inc    edx
c000dda2:	eb f0                	jmp    c000dd94 <zoh_vari_process+0x36>
c000dda4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddab:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddae:	0f af d0             	imul   edx,eax
c000ddb1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddb4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddbf:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddc2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddd6:	68 00 00 70 3f       	push   0x3f700000
c000dddb:	6a 00                	push   0x0
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde5:	e8 1d a8 01 00       	call   c0028607 <__ltdf2>
c000ddea:	83 c4 10             	add    esp,0x10
c000dded:	ba 16 00 00 00       	mov    edx,0x16
c000ddf2:	85 c0                	test   eax,eax
c000ddf4:	0f 88 ff 05 00 00    	js     c000e3f9 <zoh_vari_process+0x69b>
c000ddfa:	68 00 00 70 40       	push   0x40700000
c000ddff:	6a 00                	push   0x0
c000de01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de09:	e8 db a7 01 00       	call   c00285e9 <__gtdf2>
c000de0e:	83 c4 10             	add    esp,0x10
c000de11:	ba 16 00 00 00       	mov    edx,0x16
c000de16:	85 c0                	test   eax,eax
c000de18:	0f 8f db 05 00 00    	jg     c000e3f9 <zoh_vari_process+0x69b>
c000de1e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de21:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de2c:	68 00 00 f0 3f       	push   0x3ff00000
c000de31:	6a 00                	push   0x0
c000de33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 c7 a7 01 00       	call   c0028607 <__ltdf2>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	85 c0                	test   eax,eax
c000de45:	0f 89 da 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000de4b:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de4e:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de51:	0f 8d ce 01 00 00    	jge    c000e025 <zoh_vari_process+0x2c7>
c000de57:	83 ec 0c             	sub    esp,0xc
c000de5a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de5d:	e8 39 a5 01 00       	call   c002839b <__floatsidf>
c000de62:	83 c4 10             	add    esp,0x10
c000de65:	89 04 24             	mov    DWORD PTR [esp],eax
c000de68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	e8 b7 9e 01 00       	call   c0027d38 <__muldf3>
c000de81:	59                   	pop    ecx
c000de82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de8d:	e8 09 a5 01 00       	call   c002839b <__floatsidf>
c000de92:	83 c4 10             	add    esp,0x10
c000de95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9d:	52                   	push   edx
c000de9e:	50                   	push   eax
c000de9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	e8 0f 98 01 00       	call   c00276bb <__adddf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb8:	e8 de a4 01 00       	call   c002839b <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dece:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ded2:	e8 2e a7 01 00       	call   c0028605 <__gedf2>
c000ded7:	83 c4 10             	add    esp,0x10
c000deda:	85 c0                	test   eax,eax
c000dedc:	0f 89 43 01 00 00    	jns    c000e025 <zoh_vari_process+0x2c7>
c000dee2:	85 ed                	test   ebp,ebp
c000dee4:	0f 8e ec 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000deea:	83 ec 10             	sub    esp,0x10
c000deed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000def0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000def3:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000def6:	ff 37                	push   DWORD PTR [edi]
c000def8:	e8 0f 9e 01 00       	call   c0027d0c <__subdf3>
c000defd:	83 c4 18             	add    esp,0x18
c000df00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df08:	52                   	push   edx
c000df09:	50                   	push   eax
c000df0a:	e8 91 a8 01 00       	call   c00287a0 <fabs>
c000df0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df1f:	68 23 42 92 0c       	push   0xc924223
c000df24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df2c:	e8 b8 a6 01 00       	call   c00285e9 <__gtdf2>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 8e 9a 00 00 00    	jle    c000dfd6 <zoh_vari_process+0x278>
c000df3c:	8b 07                	mov    eax,DWORD PTR [edi]
c000df3e:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df41:	89 04 24             	mov    DWORD PTR [esp],eax
c000df44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df48:	52                   	push   edx
c000df49:	50                   	push   eax
c000df4a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df4d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df50:	e8 b7 9d 01 00       	call   c0027d0c <__subdf3>
c000df55:	59                   	pop    ecx
c000df56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df5e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df61:	e8 35 a4 01 00       	call   c002839b <__floatsidf>
c000df66:	83 c4 10             	add    esp,0x10
c000df69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df71:	52                   	push   edx
c000df72:	50                   	push   eax
c000df73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	e8 b8 9d 01 00       	call   c0027d38 <__muldf3>
c000df80:	5d                   	pop    ebp
c000df81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df8c:	e8 0a a4 01 00       	call   c002839b <__floatsidf>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df9c:	52                   	push   edx
c000df9d:	50                   	push   eax
c000df9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa6:	e8 71 a0 01 00       	call   c002801c <__divdf3>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc6:	e8 f0 96 01 00       	call   c00276bb <__adddf3>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd6:	31 c0                	xor    eax,eax
c000dfd8:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfdb:	7e 13                	jle    c000dff0 <zoh_vari_process+0x292>
c000dfdd:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfe1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfe7:	40                   	inc    eax
c000dfe8:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfeb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfee:	eb e8                	jmp    c000dfd8 <zoh_vari_process+0x27a>
c000dff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff8:	68 00 00 f0 3f       	push   0x3ff00000
c000dffd:	6a 00                	push   0x0
c000dfff:	e8 18 a0 01 00       	call   c002801c <__divdf3>
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e00e:	52                   	push   edx
c000e00f:	50                   	push   eax
c000e010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e018:	e8 9e 96 01 00       	call   c00276bb <__adddf3>
c000e01d:	83 c4 10             	add    esp,0x10
c000e020:	e9 ff fd ff ff       	jmp    c000de24 <zoh_vari_process+0xc6>
c000e025:	55                   	push   ebp
c000e026:	55                   	push   ebp
c000e027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02f:	e8 8c a7 01 00       	call   c00287c0 <lrint>
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 5e a3 01 00       	call   c002839b <__floatsidf>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e044:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e048:	52                   	push   edx
c000e049:	50                   	push   eax
c000e04a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e052:	e8 b5 9c 01 00       	call   c0027d0c <__subdf3>
c000e057:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e05b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	6a 00                	push   0x0
c000e064:	6a 00                	push   0x0
c000e066:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06e:	e8 94 a5 01 00       	call   c0028607 <__ltdf2>
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	85 c0                	test   eax,eax
c000e078:	79 1e                	jns    c000e098 <zoh_vari_process+0x33a>
c000e07a:	68 00 00 f0 3f       	push   0x3ff00000
c000e07f:	6a 00                	push   0x0
c000e081:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e085:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e089:	e8 2d 96 01 00       	call   c00276bb <__adddf3>
c000e08e:	83 c4 10             	add    esp,0x10
c000e091:	89 04 24             	mov    DWORD PTR [esp],eax
c000e094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e098:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e09b:	83 ec 10             	sub    esp,0x10
c000e09e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ae:	e8 59 9c 01 00       	call   c0027d0c <__subdf3>
c000e0b3:	83 c4 18             	add    esp,0x18
c000e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0be:	52                   	push   edx
c000e0bf:	50                   	push   eax
c000e0c0:	e8 fb a6 01 00       	call   c00287c0 <lrint>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	0f af e8             	imul   ebp,eax
c000e0cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ce:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0d1:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0e2:	0f 8d 7a 02 00 00    	jge    c000e362 <zoh_vari_process+0x604>
c000e0e8:	83 ec 0c             	sub    esp,0xc
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 a8 a2 01 00       	call   c002839b <__floatsidf>
c000e0f3:	83 c4 10             	add    esp,0x10
c000e0f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	e8 25 9c 01 00       	call   c0027d38 <__muldf3>
c000e113:	59                   	pop    ecx
c000e114:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e118:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e120:	e8 76 a2 01 00       	call   c002839b <__floatsidf>
c000e125:	83 c4 10             	add    esp,0x10
c000e128:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e130:	52                   	push   edx
c000e131:	50                   	push   eax
c000e132:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13a:	e8 7c 95 01 00       	call   c00276bb <__adddf3>
c000e13f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e14a:	e8 4c a2 01 00       	call   c002839b <__floatsidf>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e156:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e15a:	52                   	push   edx
c000e15b:	50                   	push   eax
c000e15c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e164:	e8 a0 a4 01 00       	call   c0028609 <__ledf2>
c000e169:	83 c4 10             	add    esp,0x10
c000e16c:	85 c0                	test   eax,eax
c000e16e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e172:	0f 8f ea 01 00 00    	jg     c000e362 <zoh_vari_process+0x604>
c000e178:	85 c9                	test   ecx,ecx
c000e17a:	0f 8e ed 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e180:	83 ec 10             	sub    esp,0x10
c000e183:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e186:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e189:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e18c:	ff 37                	push   DWORD PTR [edi]
c000e18e:	e8 79 9b 01 00       	call   c0027d0c <__subdf3>
c000e193:	83 c4 18             	add    esp,0x18
c000e196:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e19a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e19e:	52                   	push   edx
c000e19f:	50                   	push   eax
c000e1a0:	e8 fb a5 01 00       	call   c00287a0 <fabs>
c000e1a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1b5:	68 23 42 92 0c       	push   0xc924223
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1c2:	e8 22 a4 01 00       	call   c00285e9 <__gtdf2>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	85 c0                	test   eax,eax
c000e1cc:	0f 8e 9b 00 00 00    	jle    c000e26d <zoh_vari_process+0x50f>
c000e1d2:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1d4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1e4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1e7:	e8 20 9b 01 00       	call   c0027d0c <__subdf3>
c000e1ec:	5d                   	pop    ebp
c000e1ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f8:	e8 9e a1 01 00       	call   c002839b <__floatsidf>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e204:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e208:	52                   	push   edx
c000e209:	50                   	push   eax
c000e20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	e8 21 9b 01 00       	call   c0027d38 <__muldf3>
c000e217:	59                   	pop    ecx
c000e218:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e21c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e220:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e223:	e8 73 a1 01 00       	call   c002839b <__floatsidf>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e22f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23d:	e8 da 9d 01 00       	call   c002801c <__divdf3>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e24d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e25d:	e8 59 94 01 00       	call   c00276bb <__adddf3>
c000e262:	83 c4 10             	add    esp,0x10
c000e265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e26d:	31 d2                	xor    edx,edx
c000e26f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e272:	39 d0                	cmp    eax,edx
c000e274:	7e 1d                	jle    c000e293 <zoh_vari_process+0x535>
c000e276:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e279:	29 c1                	sub    ecx,eax
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e27f:	01 d0                	add    eax,edx
c000e281:	42                   	inc    edx
c000e282:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e285:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e288:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e28b:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e28e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e291:	eb dc                	jmp    c000e26f <zoh_vari_process+0x511>
c000e293:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e297:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e29b:	68 00 00 f0 3f       	push   0x3ff00000
c000e2a0:	6a 00                	push   0x0
c000e2a2:	e8 75 9d 01 00       	call   c002801c <__divdf3>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	e8 f4 93 01 00       	call   c00276bb <__adddf3>
c000e2c7:	5d                   	pop    ebp
c000e2c8:	59                   	pop    ecx
c000e2c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d9:	e8 e2 a4 01 00       	call   c00287c0 <lrint>
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	50                   	push   eax
c000e2e2:	e8 b4 a0 01 00       	call   c002839b <__floatsidf>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2f2:	52                   	push   edx
c000e2f3:	50                   	push   eax
c000e2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2fc:	e8 0b 9a 01 00       	call   c0027d0c <__subdf3>
c000e301:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e305:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	6a 00                	push   0x0
c000e30e:	6a 00                	push   0x0
c000e310:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e314:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e318:	e8 ea a2 01 00       	call   c0028607 <__ltdf2>
c000e31d:	83 c4 10             	add    esp,0x10
c000e320:	85 c0                	test   eax,eax
c000e322:	79 1e                	jns    c000e342 <zoh_vari_process+0x5e4>
c000e324:	68 00 00 f0 3f       	push   0x3ff00000
c000e329:	6a 00                	push   0x0
c000e32b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e333:	e8 83 93 01 00       	call   c00276bb <__adddf3>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e33e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e342:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e345:	83 ec 10             	sub    esp,0x10
c000e348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e350:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	e8 af 99 01 00       	call   c0027d0c <__subdf3>
c000e35d:	e9 51 fd ff ff       	jmp    c000e0b3 <zoh_vari_process+0x355>
c000e362:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e366:	7d 3a                	jge    c000e3a2 <zoh_vari_process+0x644>
c000e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36c:	83 ec 0c             	sub    esp,0xc
c000e36f:	29 e8                	sub    eax,ebp
c000e371:	99                   	cdq    
c000e372:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e375:	50                   	push   eax
c000e376:	e8 20 a0 01 00       	call   c002839b <__floatsidf>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e386:	52                   	push   edx
c000e387:	50                   	push   eax
c000e388:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e38c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e390:	e8 26 93 01 00       	call   c00276bb <__adddf3>
c000e395:	83 c4 10             	add    esp,0x10
c000e398:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e39b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e39e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a9:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3ac:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	7f 25                	jg     c000e3db <zoh_vari_process+0x67d>
c000e3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3be:	89 07                	mov    DWORD PTR [edi],eax
c000e3c0:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3c6:	99                   	cdq    
c000e3c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3d0:	99                   	cdq    
c000e3d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3d4:	31 d2                	xor    edx,edx
c000e3d6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d9:	eb 1e                	jmp    c000e3f9 <zoh_vari_process+0x69b>
c000e3db:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3de:	31 d2                	xor    edx,edx
c000e3e0:	29 c8                	sub    eax,ecx
c000e3e2:	c1 e0 02             	shl    eax,0x2
c000e3e5:	39 d1                	cmp    ecx,edx
c000e3e7:	7e cd                	jle    c000e3b6 <zoh_vari_process+0x658>
c000e3e9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3eb:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ef:	83 c0 04             	add    eax,0x4
c000e3f2:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3f6:	42                   	inc    edx
c000e3f7:	eb ec                	jmp    c000e3e5 <zoh_vari_process+0x687>
c000e3f9:	83 c4 3c             	add    esp,0x3c
c000e3fc:	89 d0                	mov    eax,edx
c000e3fe:	5b                   	pop    ebx
c000e3ff:	5e                   	pop    esi
c000e400:	5f                   	pop    edi
c000e401:	5d                   	pop    ebp
c000e402:	c3                   	ret    

c000e403 <zoh_reset>:
c000e403:	83 ec 0c             	sub    esp,0xc
c000e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e40a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e40d:	85 c0                	test   eax,eax
c000e40f:	74 20                	je     c000e431 <zoh_reset+0x2e>
c000e411:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e414:	83 c0 1c             	add    eax,0x1c
c000e417:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e41a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e421:	c1 e2 02             	shl    edx,0x2
c000e424:	51                   	push   ecx
c000e425:	52                   	push   edx
c000e426:	6a 00                	push   0x0
c000e428:	50                   	push   eax
c000e429:	e8 52 23 ff ff       	call   c0000780 <memset>
c000e42e:	83 c4 10             	add    esp,0x10
c000e431:	83 c4 0c             	add    esp,0xc
c000e434:	c3                   	ret    

c000e435 <zoh_get_name>:
c000e435:	31 c0                	xor    eax,eax
c000e437:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e43c:	75 05                	jne    c000e443 <zoh_get_name+0xe>
c000e43e:	b8 de a0 02 c0       	mov    eax,0xc002a0de
c000e443:	c3                   	ret    

c000e444 <zoh_get_description>:
c000e444:	31 c0                	xor    eax,eax
c000e446:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e44b:	75 05                	jne    c000e452 <zoh_get_description+0xe>
c000e44d:	b8 ef a0 02 c0       	mov    eax,0xc002a0ef
c000e452:	c3                   	ret    

c000e453 <zoh_set_converter>:
c000e453:	53                   	push   ebx
c000e454:	b8 0a 00 00 00       	mov    eax,0xa
c000e459:	83 ec 08             	sub    esp,0x8
c000e45c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e460:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e465:	75 6e                	jne    c000e4d5 <zoh_set_converter+0x82>
c000e467:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e46a:	85 c0                	test   eax,eax
c000e46c:	74 13                	je     c000e481 <zoh_set_converter+0x2e>
c000e46e:	83 ec 0c             	sub    esp,0xc
c000e471:	50                   	push   eax
c000e472:	e8 e4 13 00 00       	call   c000f85b <free>
c000e477:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	50                   	push   eax
c000e482:	50                   	push   eax
c000e483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e486:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e48d:	50                   	push   eax
c000e48e:	6a 01                	push   0x1
c000e490:	e8 e6 13 00 00       	call   c000f87b <calloc>
c000e495:	83 c4 10             	add    esp,0x10
c000e498:	89 c2                	mov    edx,eax
c000e49a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e49d:	85 d2                	test   edx,edx
c000e49f:	b8 01 00 00 00       	mov    eax,0x1
c000e4a4:	74 2f                	je     c000e4d5 <zoh_set_converter+0x82>
c000e4a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4af:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4b5:	c7 43 24 5e dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd5e
c000e4bc:	c7 43 20 5e dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd5e
c000e4c3:	c7 43 28 03 e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e403
c000e4ca:	53                   	push   ebx
c000e4cb:	e8 33 ff ff ff       	call   c000e403 <zoh_reset>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	31 c0                	xor    eax,eax
c000e4d5:	83 c4 08             	add    esp,0x8
c000e4d8:	5b                   	pop    ebx
c000e4d9:	c3                   	ret    

c000e4da <CPU::current()>:
c000e4da:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000e4df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4e5:	90                   	nop
c000e4e6:	c3                   	ret    

c000e4e7 <operator new(unsigned long)>:
c000e4e7:	83 ec 0c             	sub    esp,0xc
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4f1:	e8 55 13 00 00       	call   c000f84b <malloc>
c000e4f6:	83 c4 10             	add    esp,0x10
c000e4f9:	83 c4 0c             	add    esp,0xc
c000e4fc:	c3                   	ret    

c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4fd:	83 ec 0c             	sub    esp,0xc
c000e500:	83 ec 08             	sub    esp,0x8
c000e503:	68 26 a1 02 c0       	push   0xc002a126
c000e508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50c:	e8 b7 23 ff ff       	call   c00008c8 <strcmp>
c000e511:	83 c4 10             	add    esp,0x10
c000e514:	85 c0                	test   eax,eax
c000e516:	0f 94 c0             	sete   al
c000e519:	84 c0                	test   al,al
c000e51b:	74 0a                	je     c000e527 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e51d:	b8 08 e6 02 c0       	mov    eax,0xc002e608
c000e522:	e9 e3 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e527:	83 ec 08             	sub    esp,0x8
c000e52a:	68 2f a1 02 c0       	push   0xc002a12f
c000e52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e533:	e8 90 23 ff ff       	call   c00008c8 <strcmp>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	85 c0                	test   eax,eax
c000e53d:	0f 94 c0             	sete   al
c000e540:	84 c0                	test   al,al
c000e542:	74 0a                	je     c000e54e <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e544:	b8 34 6b 02 c0       	mov    eax,0xc0026b34
c000e549:	e9 bc 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	68 39 a1 02 c0       	push   0xc002a139
c000e556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e55a:	e8 69 23 ff ff       	call   c00008c8 <strcmp>
c000e55f:	83 c4 10             	add    esp,0x10
c000e562:	85 c0                	test   eax,eax
c000e564:	0f 94 c0             	sete   al
c000e567:	84 c0                	test   al,al
c000e569:	74 0a                	je     c000e575 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e56b:	b8 68 68 02 c0       	mov    eax,0xc0026868
c000e570:	e9 95 00 00 00       	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e575:	83 ec 08             	sub    esp,0x8
c000e578:	68 42 a1 02 c0       	push   0xc002a142
c000e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e581:	e8 42 23 ff ff       	call   c00008c8 <strcmp>
c000e586:	83 c4 10             	add    esp,0x10
c000e589:	85 c0                	test   eax,eax
c000e58b:	0f 94 c0             	sete   al
c000e58e:	84 c0                	test   al,al
c000e590:	74 07                	je     c000e599 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e592:	b8 34 6c 02 c0       	mov    eax,0xc0026c34
c000e597:	eb 71                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e599:	83 ec 08             	sub    esp,0x8
c000e59c:	68 4c a1 02 c0       	push   0xc002a14c
c000e5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a5:	e8 1e 23 ff ff       	call   c00008c8 <strcmp>
c000e5aa:	83 c4 10             	add    esp,0x10
c000e5ad:	85 c0                	test   eax,eax
c000e5af:	0f 94 c0             	sete   al
c000e5b2:	84 c0                	test   al,al
c000e5b4:	74 07                	je     c000e5bd <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5b6:	b8 b4 69 02 c0       	mov    eax,0xc00269b4
c000e5bb:	eb 4d                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5bd:	83 ec 08             	sub    esp,0x8
c000e5c0:	68 55 a1 02 c0       	push   0xc002a155
c000e5c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c9:	e8 fa 22 ff ff       	call   c00008c8 <strcmp>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	85 c0                	test   eax,eax
c000e5d3:	0f 94 c0             	sete   al
c000e5d6:	84 c0                	test   al,al
c000e5d8:	74 07                	je     c000e5e1 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5da:	b8 0c e6 02 c0       	mov    eax,0xc002e60c
c000e5df:	eb 29                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5e1:	83 ec 08             	sub    esp,0x8
c000e5e4:	68 62 a1 02 c0       	push   0xc002a162
c000e5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ed:	e8 d6 22 ff ff       	call   c00008c8 <strcmp>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	85 c0                	test   eax,eax
c000e5f7:	0f 94 c0             	sete   al
c000e5fa:	84 c0                	test   al,al
c000e5fc:	74 07                	je     c000e605 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5fe:	b8 0d e6 02 c0       	mov    eax,0xc002e60d
c000e603:	eb 05                	jmp    c000e60a <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e605:	b8 00 00 00 00       	mov    eax,0x0
c000e60a:	83 c4 0c             	add    esp,0xc
c000e60d:	c3                   	ret    

c000e60e <Computer::close(int, int, void*)>:
c000e60e:	57                   	push   edi
c000e60f:	56                   	push   esi
c000e610:	53                   	push   ebx
c000e611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e619:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e61d:	83 ec 0c             	sub    esp,0xc
c000e620:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e626:	e8 81 5e 00 00       	call   c00144ac <Device::closeAll()>
c000e62b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e631:	83 c4 10             	add    esp,0x10
c000e634:	8b 10                	mov    edx,DWORD PTR [eax]
c000e636:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e63a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e642:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e646:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e64a:	5b                   	pop    ebx
c000e64b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e64e:	5e                   	pop    esi
c000e64f:	5f                   	pop    edi
c000e650:	ff e0                	jmp    eax

c000e652 <Krnl::firstTask()>:
c000e652:	53                   	push   ebx
c000e653:	83 ec 14             	sub    esp,0x14
c000e656:	fb                   	sti    
c000e657:	68 3f 07 00 00       	push   0x73f
c000e65c:	e8 ea 11 00 00       	call   c000f84b <malloc>
c000e661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e668:	89 c3                	mov    ebx,eax
c000e66a:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c000e670:	68 6f a1 02 c0       	push   0xc002a16f
c000e675:	6a 01                	push   0x1
c000e677:	50                   	push   eax
c000e678:	e8 d9 f5 00 00       	call   c001dc56 <Process::Process(bool, char const*, Process*, char**)>
c000e67d:	83 c4 20             	add    esp,0x20
c000e680:	68 ff 00 00 00       	push   0xff
c000e685:	6a 00                	push   0x0
c000e687:	68 dd f1 00 c0       	push   0xc000f1dd
c000e68c:	53                   	push   ebx
c000e68d:	e8 c2 f8 00 00       	call   c001df54 <Process::createThread(void (*)(void*), void*, int)>
c000e692:	6a 7a                	push   0x7a
c000e694:	6a 00                	push   0x0
c000e696:	68 ec e7 01 c0       	push   0xc001e7ec
c000e69b:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c000e6a1:	e8 ae f8 00 00       	call   c001df54 <Process::createThread(void (*)(void*), void*, int)>
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c000e6ae:	c6 05 0d e6 02 c0 01 	mov    BYTE PTR ds:0xc002e60d,0x1
c000e6b5:	e8 b3 04 01 00       	call   c001eb6d <Vm::initialise8086()>
c000e6ba:	e8 d5 4b 00 00       	call   c0013294 <Fs::initVFS()>
c000e6bf:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000e6c4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6cc:	6a 00                	push   0x0
c000e6ce:	6a 00                	push   0x0
c000e6d0:	6a 00                	push   0x0
c000e6d2:	50                   	push   eax
c000e6d3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6d6:	e8 0b df 00 00       	call   c001c5e6 <Sys::loadSyscalls()>
c000e6db:	e8 2e be 00 00       	call   c001a50e <Krnl::loadSystemEnv()>
c000e6e0:	83 c4 0c             	add    esp,0xc
c000e6e3:	6a 3a                	push   0x3a
c000e6e5:	68 7c a1 02 c0       	push   0xc002a17c
c000e6ea:	68 85 a1 02 c0       	push   0xc002a185
c000e6ef:	e8 40 cb 00 00       	call   c001b234 <Reg::readIntWithDefault(char*, char*, int)>
c000e6f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6f7:	e8 80 56 00 00       	call   c0013d7c <User::loadClockSettings(int)>
c000e6fc:	58                   	pop    eax
c000e6fd:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000e702:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e708:	e8 73 5d 00 00       	call   c0014480 <Device::loadDriversForAll()>
c000e70d:	e8 42 b9 00 00       	call   c001a054 <Krnl::startCPUs()>
c000e712:	5a                   	pop    edx
c000e713:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c000e719:	59                   	pop    ecx
c000e71a:	6a 01                	push   0x1
c000e71c:	68 8d a1 02 c0       	push   0xc002a18d
c000e721:	e8 54 f0 00 00       	call   c001d77a <Thr::loadDLL(char const*, bool)>
c000e726:	5a                   	pop    edx
c000e727:	59                   	pop    ecx
c000e728:	53                   	push   ebx
c000e729:	50                   	push   eax
c000e72a:	e8 7f f2 00 00       	call   c001d9ae <Thr::executeDLL(unsigned long, void*)>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	83 ec 0c             	sub    esp,0xc
c000e735:	6a 02                	push   0x2
c000e737:	e8 b6 fb 00 00       	call   c001e2f2 <blockTask(TaskState)>
c000e73c:	83 c4 10             	add    esp,0x10
c000e73f:	eb f1                	jmp    c000e732 <Krnl::firstTask()+0xe0>
c000e741:	90                   	nop

c000e742 <Computer::Computer()>:
c000e742:	83 ec 0c             	sub    esp,0xc
c000e745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	68 a9 a1 02 c0       	push   0xc002a1a9
c000e751:	50                   	push   eax
c000e752:	e8 cf 5d 00 00       	call   c0014526 <Device::Device(char const*)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	ba 48 a3 02 c0       	mov    edx,0xc002a348
c000e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e763:	89 10                	mov    DWORD PTR [eax],edx
c000e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e769:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e785:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e78b:	83 ca 04             	or     edx,0x4
c000e78e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79e:	0f b6 d0             	movzx  edx,al
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b6:	0f b6 d0             	movzx  edx,al
c000e7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7cc:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d9:	0f b6 d0             	movzx  edx,al
c000e7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e4:	83 e1 3f             	and    ecx,0x3f
c000e7e7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f5:	0f b6 d0             	movzx  edx,al
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e807:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80d:	0f b6 d0             	movzx  edx,al
c000e810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e814:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e823:	8d 50 01             	lea    edx,[eax+0x1]
c000e826:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e82a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e830:	0f b6 d0             	movzx  edx,al
c000e833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e837:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e83b:	83 e1 3f             	and    ecx,0x3f
c000e83e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e846:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84c:	0f b6 d0             	movzx  edx,al
c000e84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e853:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e864:	0f b6 d0             	movzx  edx,al
c000e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87a:	8d 50 01             	lea    edx,[eax+0x1]
c000e87d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e881:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e887:	0f b6 d0             	movzx  edx,al
c000e88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e892:	83 e1 3f             	and    ecx,0x3f
c000e895:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e899:	90                   	nop
c000e89a:	83 c4 0c             	add    esp,0xc
c000e89d:	c3                   	ret    

c000e89e <Computer::setBootMessage(char const*)>:
c000e89e:	c3                   	ret    
c000e89f:	90                   	nop

c000e8a0 <Computer::detectFeatures()>:
c000e8a0:	55                   	push   ebp
c000e8a1:	57                   	push   edi
c000e8a2:	56                   	push   esi
c000e8a3:	53                   	push   ebx
c000e8a4:	83 ec 1c             	sub    esp,0x1c
c000e8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ab:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b5:	e8 2a 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8ba:	85 c0                	test   eax,eax
c000e8bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c2:	0f 95 c2             	setne  dl
c000e8c5:	83 e0 fd             	and    eax,0xfffffffd
c000e8c8:	d1 e2                	shl    edx,1
c000e8ca:	09 d0                	or     eax,edx
c000e8cc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d2:	a8 02                	test   al,0x2
c000e8d4:	75 46                	jne    c000e91c <Computer::detectFeatures()+0x7c>
c000e8d6:	f6 05 21 e6 02 c0 04 	test   BYTE PTR ds:0xc002e621,0x4
c000e8dd:	74 07                	je     c000e8e6 <Computer::detectFeatures()+0x46>
c000e8df:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e6:	e8 0b 7f 01 00       	call   c00267f6 <x87Detect>
c000e8eb:	83 e0 01             	and    eax,0x1
c000e8ee:	c1 e0 04             	shl    eax,0x4
c000e8f1:	88 c2                	mov    dl,al
c000e8f3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f9:	83 e0 ef             	and    eax,0xffffffef
c000e8fc:	09 d0                	or     eax,edx
c000e8fe:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e904:	a8 10                	test   al,0x10
c000e906:	0f 85 2a 01 00 00    	jne    c000ea36 <Computer::detectFeatures()+0x196>
c000e90c:	84 c0                	test   al,al
c000e90e:	0f 88 45 01 00 00    	js     c000ea59 <Computer::detectFeatures()+0x1b9>
c000e914:	83 c4 1c             	add    esp,0x1c
c000e917:	5b                   	pop    ebx
c000e918:	5e                   	pop    esi
c000e919:	5f                   	pop    edi
c000e91a:	5d                   	pop    ebp
c000e91b:	c3                   	ret    
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	6a 20                	push   0x20
c000e921:	e8 40 a4 00 00       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c000e926:	83 e0 01             	and    eax,0x1
c000e929:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e930:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e936:	83 e0 f7             	and    eax,0xfffffff7
c000e939:	09 d0                	or     eax,edx
c000e93b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e941:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e948:	e8 19 a4 00 00       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c000e94d:	83 e0 01             	and    eax,0x1
c000e950:	88 c2                	mov    dl,al
c000e952:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e958:	83 e0 fe             	and    eax,0xfffffffe
c000e95b:	09 d0                	or     eax,edx
c000e95d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e963:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e96a:	e8 f7 a3 00 00       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c000e96f:	c1 e0 07             	shl    eax,0x7
c000e972:	88 c2                	mov    dl,al
c000e974:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e97a:	83 e0 7f             	and    eax,0x7f
c000e97d:	09 d0                	or     eax,edx
c000e97f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e985:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98c:	e8 d5 a3 00 00       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	83 e0 01             	and    eax,0x1
c000e997:	c1 e0 05             	shl    eax,0x5
c000e99a:	88 c2                	mov    dl,al
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	83 e0 df             	and    eax,0xffffffdf
c000e9a5:	09 d0                	or     eax,edx
c000e9a7:	f7 05 20 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e620,0x401
c000e9b1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b7:	0f 84 c2 00 00 00    	je     c000ea7f <Computer::detectFeatures()+0x1df>
c000e9bd:	83 e0 fe             	and    eax,0xfffffffe
c000e9c0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9cc:	88 c2                	mov    dl,al
c000e9ce:	83 e2 09             	and    edx,0x9
c000e9d1:	fe ca                	dec    dl
c000e9d3:	75 09                	jne    c000e9de <Computer::detectFeatures()+0x13e>
c000e9d5:	83 e0 fe             	and    eax,0xfffffffe
c000e9d8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9de:	83 ec 0c             	sub    esp,0xc
c000e9e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e5:	50                   	push   eax
c000e9e6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9ea:	55                   	push   ebp
c000e9eb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ef:	57                   	push   edi
c000e9f0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f4:	56                   	push   esi
c000e9f5:	68 00 00 00 80       	push   0x80000000
c000e9fa:	e8 e3 a2 00 00       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9ff:	83 c4 20             	add    esp,0x20
c000ea02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0d:	0f 86 c3 fe ff ff    	jbe    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea13:	83 ec 0c             	sub    esp,0xc
c000ea16:	50                   	push   eax
c000ea17:	55                   	push   ebp
c000ea18:	57                   	push   edi
c000ea19:	56                   	push   esi
c000ea1a:	68 01 00 00 80       	push   0x80000001
c000ea1f:	e8 be a2 00 00       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea24:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2e:	83 c4 20             	add    esp,0x20
c000ea31:	e9 a0 fe ff ff       	jmp    c000e8d6 <Computer::detectFeatures()+0x36>
c000ea36:	e8 75 7d 01 00       	call   c00267b0 <absolutelyNoChanceInHell>
c000ea3b:	88 c2                	mov    dl,al
c000ea3d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea43:	c1 e2 07             	shl    edx,0x7
c000ea46:	83 e0 7f             	and    eax,0x7f
c000ea49:	09 d0                	or     eax,edx
c000ea4b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea51:	84 c0                	test   al,al
c000ea53:	0f 89 bb fe ff ff    	jns    c000e914 <Computer::detectFeatures()+0x74>
c000ea59:	e8 32 7d 01 00       	call   c0026790 <avxDetect>
c000ea5e:	83 e0 01             	and    eax,0x1
c000ea61:	c1 e0 05             	shl    eax,0x5
c000ea64:	88 c2                	mov    dl,al
c000ea66:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6c:	83 e0 df             	and    eax,0xffffffdf
c000ea6f:	09 d0                	or     eax,edx
c000ea71:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea77:	83 c4 1c             	add    esp,0x1c
c000ea7a:	5b                   	pop    ebx
c000ea7b:	5e                   	pop    esi
c000ea7c:	5f                   	pop    edi
c000ea7d:	5d                   	pop    ebp
c000ea7e:	c3                   	ret    
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	68 00 02 00 00       	push   0x200
c000ea87:	e8 da a2 00 00       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	83 e0 01             	and    eax,0x1
c000ea92:	88 c2                	mov    dl,al
c000ea94:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9a:	83 e0 fe             	and    eax,0xfffffffe
c000ea9d:	09 d0                	or     eax,edx
c000ea9f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa5:	e9 1c ff ff ff       	jmp    c000e9c6 <Computer::detectFeatures()+0x126>

c000eaaa <Computer::displayFeatures()>:
c000eaaa:	53                   	push   ebx
c000eaab:	83 ec 14             	sub    esp,0x14
c000eaae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab2:	68 b9 a1 02 c0       	push   0xc002a1b9
c000eab7:	e8 4d 44 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac6:	0f 85 73 02 00 00    	jne    c000ed3f <Computer::displayFeatures()+0x295>
c000eacc:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	50                   	push   eax
c000ead5:	68 cc a1 02 c0       	push   0xc002a1cc
c000eada:	e8 2a 44 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae9:	0f 85 8c 02 00 00    	jne    c000ed7b <Computer::displayFeatures()+0x2d1>
c000eaef:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	50                   	push   eax
c000eaf8:	68 dd a1 02 c0       	push   0xc002a1dd
c000eafd:	e8 07 44 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000eb02:	83 c4 10             	add    esp,0x10
c000eb05:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0c:	0f 85 5f 02 00 00    	jne    c000ed71 <Computer::displayFeatures()+0x2c7>
c000eb12:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000eb17:	83 ec 08             	sub    esp,0x8
c000eb1a:	50                   	push   eax
c000eb1b:	68 ee a1 02 c0       	push   0xc002a1ee
c000eb20:	e8 e4 43 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000eb25:	83 c4 10             	add    esp,0x10
c000eb28:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2f:	0f 85 32 02 00 00    	jne    c000ed67 <Computer::displayFeatures()+0x2bd>
c000eb35:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000eb3a:	83 ec 08             	sub    esp,0x8
c000eb3d:	50                   	push   eax
c000eb3e:	68 ff a1 02 c0       	push   0xc002a1ff
c000eb43:	e8 c1 43 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb52:	0f 85 05 02 00 00    	jne    c000ed5d <Computer::displayFeatures()+0x2b3>
c000eb58:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000eb5d:	83 ec 08             	sub    esp,0x8
c000eb60:	50                   	push   eax
c000eb61:	68 10 a2 02 c0       	push   0xc002a210
c000eb66:	e8 9e 43 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000eb6b:	83 c4 10             	add    esp,0x10
c000eb6e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb75:	0f 85 d8 01 00 00    	jne    c000ed53 <Computer::displayFeatures()+0x2a9>
c000eb7b:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000eb80:	83 ec 08             	sub    esp,0x8
c000eb83:	50                   	push   eax
c000eb84:	68 21 a2 02 c0       	push   0xc002a221
c000eb89:	e8 7b 43 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000eb8e:	83 c4 10             	add    esp,0x10
c000eb91:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb98:	0f 85 ab 01 00 00    	jne    c000ed49 <Computer::displayFeatures()+0x29f>
c000eb9e:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000eba3:	83 ec 08             	sub    esp,0x8
c000eba6:	50                   	push   eax
c000eba7:	68 32 a2 02 c0       	push   0xc002a232
c000ebac:	e8 58 43 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ebb1:	83 c4 10             	add    esp,0x10
c000ebb4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebbb:	0f 88 1b 02 00 00    	js     c000eddc <Computer::displayFeatures()+0x332>
c000ebc1:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ebc6:	83 ec 08             	sub    esp,0x8
c000ebc9:	50                   	push   eax
c000ebca:	68 43 a2 02 c0       	push   0xc002a243
c000ebcf:	e8 35 43 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ebd4:	83 c4 10             	add    esp,0x10
c000ebd7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebde:	0f 85 a1 01 00 00    	jne    c000ed85 <Computer::displayFeatures()+0x2db>
c000ebe4:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ebe9:	83 ec 08             	sub    esp,0x8
c000ebec:	50                   	push   eax
c000ebed:	68 54 a2 02 c0       	push   0xc002a254
c000ebf2:	e8 12 43 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ebf7:	83 c4 10             	add    esp,0x10
c000ebfa:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec01:	0f 85 cb 01 00 00    	jne    c000edd2 <Computer::displayFeatures()+0x328>
c000ec07:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ec0c:	83 ec 08             	sub    esp,0x8
c000ec0f:	50                   	push   eax
c000ec10:	68 65 a2 02 c0       	push   0xc002a265
c000ec15:	e8 ef 42 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ec1a:	83 c4 10             	add    esp,0x10
c000ec1d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec24:	0f 85 9e 01 00 00    	jne    c000edc8 <Computer::displayFeatures()+0x31e>
c000ec2a:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ec2f:	83 ec 08             	sub    esp,0x8
c000ec32:	50                   	push   eax
c000ec33:	68 76 a2 02 c0       	push   0xc002a276
c000ec38:	e8 cc 42 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec47:	0f 85 71 01 00 00    	jne    c000edbe <Computer::displayFeatures()+0x314>
c000ec4d:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ec52:	83 ec 08             	sub    esp,0x8
c000ec55:	50                   	push   eax
c000ec56:	68 87 a2 02 c0       	push   0xc002a287
c000ec5b:	e8 a9 42 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec6a:	0f 85 44 01 00 00    	jne    c000edb4 <Computer::displayFeatures()+0x30a>
c000ec70:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ec75:	83 ec 08             	sub    esp,0x8
c000ec78:	50                   	push   eax
c000ec79:	68 98 a2 02 c0       	push   0xc002a298
c000ec7e:	e8 86 42 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8d:	0f 85 17 01 00 00    	jne    c000edaa <Computer::displayFeatures()+0x300>
c000ec93:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ec98:	83 ec 08             	sub    esp,0x8
c000ec9b:	50                   	push   eax
c000ec9c:	68 a9 a2 02 c0       	push   0xc002a2a9
c000eca1:	e8 63 42 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecb0:	0f 85 ea 00 00 00    	jne    c000eda0 <Computer::displayFeatures()+0x2f6>
c000ecb6:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	50                   	push   eax
c000ecbf:	68 ba a2 02 c0       	push   0xc002a2ba
c000ecc4:	e8 40 42 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd3:	0f 88 0d 01 00 00    	js     c000ede6 <Computer::displayFeatures()+0x33c>
c000ecd9:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ecde:	83 ec 08             	sub    esp,0x8
c000ece1:	50                   	push   eax
c000ece2:	68 cb a2 02 c0       	push   0xc002a2cb
c000ece7:	e8 1d 42 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ecec:	83 c4 10             	add    esp,0x10
c000ecef:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf6:	0f 85 9a 00 00 00    	jne    c000ed96 <Computer::displayFeatures()+0x2ec>
c000ecfc:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ed01:	83 ec 08             	sub    esp,0x8
c000ed04:	50                   	push   eax
c000ed05:	68 dc a2 02 c0       	push   0xc002a2dc
c000ed0a:	e8 fa 41 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed19:	75 74                	jne    c000ed8f <Computer::displayFeatures()+0x2e5>
c000ed1b:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 ed a2 02 c0       	push   0xc002a2ed
c000ed29:	e8 db 41 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ed2e:	c7 44 24 20 a0 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bca0
c000ed36:	83 c4 18             	add    esp,0x18
c000ed39:	5b                   	pop    ebx
c000ed3a:	e9 ca 41 00 00       	jmp    c0012f09 <Dbg::kprintf(char const*, ...)>
c000ed3f:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed44:	e9 88 fd ff ff       	jmp    c000ead1 <Computer::displayFeatures()+0x27>
c000ed49:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed4e:	e9 50 fe ff ff       	jmp    c000eba3 <Computer::displayFeatures()+0xf9>
c000ed53:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed58:	e9 23 fe ff ff       	jmp    c000eb80 <Computer::displayFeatures()+0xd6>
c000ed5d:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed62:	e9 f6 fd ff ff       	jmp    c000eb5d <Computer::displayFeatures()+0xb3>
c000ed67:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed6c:	e9 c9 fd ff ff       	jmp    c000eb3a <Computer::displayFeatures()+0x90>
c000ed71:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed76:	e9 9c fd ff ff       	jmp    c000eb17 <Computer::displayFeatures()+0x6d>
c000ed7b:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed80:	e9 6f fd ff ff       	jmp    c000eaf4 <Computer::displayFeatures()+0x4a>
c000ed85:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed8a:	e9 5a fe ff ff       	jmp    c000ebe9 <Computer::displayFeatures()+0x13f>
c000ed8f:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed94:	eb 8a                	jmp    c000ed20 <Computer::displayFeatures()+0x276>
c000ed96:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ed9b:	e9 61 ff ff ff       	jmp    c000ed01 <Computer::displayFeatures()+0x257>
c000eda0:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000eda5:	e9 11 ff ff ff       	jmp    c000ecbb <Computer::displayFeatures()+0x211>
c000edaa:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000edaf:	e9 e4 fe ff ff       	jmp    c000ec98 <Computer::displayFeatures()+0x1ee>
c000edb4:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000edb9:	e9 b7 fe ff ff       	jmp    c000ec75 <Computer::displayFeatures()+0x1cb>
c000edbe:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000edc3:	e9 8a fe ff ff       	jmp    c000ec52 <Computer::displayFeatures()+0x1a8>
c000edc8:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000edcd:	e9 5d fe ff ff       	jmp    c000ec2f <Computer::displayFeatures()+0x185>
c000edd2:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000edd7:	e9 30 fe ff ff       	jmp    c000ec0c <Computer::displayFeatures()+0x162>
c000eddc:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000ede1:	e9 e0 fd ff ff       	jmp    c000ebc6 <Computer::displayFeatures()+0x11c>
c000ede6:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c000edeb:	e9 ee fe ff ff       	jmp    c000ecde <Computer::displayFeatures()+0x234>

c000edf0 <Computer::rdmsr(unsigned int)>:
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfe:	74 0a                	je     c000ee0a <Computer::rdmsr(unsigned int)+0x1a>
c000ee00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee04:	0f 32                	rdmsr  
c000ee06:	83 c4 0c             	add    esp,0xc
c000ee09:	c3                   	ret    
c000ee0a:	83 ec 0c             	sub    esp,0xc
c000ee0d:	68 fe a2 02 c0       	push   0xc002a2fe
c000ee12:	e8 30 b8 00 00       	call   c001a647 <Krnl::panic(char const*)>
c000ee17:	83 c4 10             	add    esp,0x10
c000ee1a:	eb e4                	jmp    c000ee00 <Computer::rdmsr(unsigned int)+0x10>

c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1c:	57                   	push   edi
c000ee1d:	56                   	push   esi
c000ee1e:	52                   	push   edx
c000ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee27:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee32:	74 0e                	je     c000ee42 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee38:	89 f0                	mov    eax,esi
c000ee3a:	89 fa                	mov    edx,edi
c000ee3c:	0f 30                	wrmsr  
c000ee3e:	58                   	pop    eax
c000ee3f:	5e                   	pop    esi
c000ee40:	5f                   	pop    edi
c000ee41:	c3                   	ret    
c000ee42:	83 ec 0c             	sub    esp,0xc
c000ee45:	68 04 a3 02 c0       	push   0xc002a304
c000ee4a:	e8 f8 b7 00 00       	call   c001a647 <Krnl::panic(char const*)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	eb e0                	jmp    c000ee34 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee54 <Computer::nmiEnabled()>:
c000ee54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5e:	c3                   	ret    
c000ee5f:	90                   	nop

c000ee60 <Computer::readCMOS(unsigned char)>:
c000ee60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee6b:	19 c0                	sbb    eax,eax
c000ee6d:	83 e0 80             	and    eax,0xffffff80
c000ee70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee74:	e6 70                	out    0x70,al
c000ee76:	e4 71                	in     al,0x71
c000ee78:	c3                   	ret    
c000ee79:	90                   	nop

c000ee7a <Computer::enableNMI(bool)>:
c000ee7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee90:	eb ce                	jmp    c000ee60 <Computer::readCMOS(unsigned char)>

c000ee92 <Computer::open(int, int, void*)>:
c000ee92:	56                   	push   esi
c000ee93:	53                   	push   ebx
c000ee94:	83 ec 10             	sub    esp,0x10
c000ee97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee9b:	f6 05 20 e6 02 c0 04 	test   BYTE PTR ds:0xc002e620,0x4
c000eea2:	68 68 12 00 00       	push   0x1268
c000eea7:	0f 94 05 44 d5 02 c0 	sete   BYTE PTR ds:0xc002d544
c000eeae:	e8 98 09 00 00       	call   c000f84b <malloc>
c000eeb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb6:	89 c6                	mov    esi,eax
c000eeb8:	e8 6d 93 00 00       	call   c001822a <ACPI::ACPI()>
c000eebd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec3:	58                   	pop    eax
c000eec4:	5a                   	pop    edx
c000eec5:	56                   	push   esi
c000eec6:	53                   	push   ebx
c000eec7:	e8 6a 54 00 00       	call   c0014336 <Device::addChild(Device*)>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 cc f9 ff ff       	call   c000e8a0 <Computer::detectFeatures()>
c000eed4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed7:	e8 ce fb ff ff       	call   c000eaaa <Computer::displayFeatures()>
c000eedc:	59                   	pop    ecx
c000eedd:	5e                   	pop    esi
c000eede:	6a 01                	push   0x1
c000eee0:	53                   	push   ebx
c000eee1:	e8 94 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000eee6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeed:	e8 59 09 00 00       	call   c000f84b <malloc>
c000eef2:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef5:	89 c6                	mov    esi,eax
c000eef7:	e8 22 9f 00 00       	call   c0018e1e <CPU::CPU()>
c000eefc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef02:	58                   	pop    eax
c000ef03:	5a                   	pop    edx
c000ef04:	56                   	push   esi
c000ef05:	53                   	push   ebx
c000ef06:	e8 2b 54 00 00       	call   c0014336 <Device::addChild(Device*)>
c000ef0b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef11:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef17:	6a 00                	push   0x0
c000ef19:	6a 00                	push   0x0
c000ef1b:	50                   	push   eax
c000ef1c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1f:	83 c4 20             	add    esp,0x20
c000ef22:	e8 95 59 00 00       	call   c00148bc <setupFPU()>
c000ef27:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2d:	85 c0                	test   eax,eax
c000ef2f:	74 1f                	je     c000ef50 <Computer::open(int, int, void*)+0xbe>
c000ef31:	83 ec 08             	sub    esp,0x8
c000ef34:	50                   	push   eax
c000ef35:	53                   	push   ebx
c000ef36:	e8 fb 53 00 00       	call   c0014336 <Device::addChild(Device*)>
c000ef3b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef41:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	6a 00                	push   0x0
c000ef49:	50                   	push   eax
c000ef4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4d:	83 c4 20             	add    esp,0x20
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	68 52 e6 00 c0       	push   0xc000e652
c000ef58:	e8 19 f1 00 00       	call   c001e076 <setupMultitasking(void (*)())>
c000ef5d:	83 c4 14             	add    esp,0x14
c000ef60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    

c000ef68 <Computer::disableNMI()>:
c000ef68:	6a 00                	push   0x0
c000ef6a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6e:	e8 07 ff ff ff       	call   c000ee7a <Computer::enableNMI(bool)>
c000ef73:	58                   	pop    eax
c000ef74:	5a                   	pop    edx
c000ef75:	c3                   	ret    

c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef7a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef81:	19 c0                	sbb    eax,eax
c000ef83:	83 e0 80             	and    eax,0xffffff80
c000ef86:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef8a:	e6 70                	out    0x70,al
c000ef8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef90:	e6 71                	out    0x71,al
c000ef92:	c3                   	ret    
c000ef93:	90                   	nop

c000ef94 <Computer::handleNMI()>:
c000ef94:	56                   	push   esi
c000ef95:	53                   	push   ebx
c000ef96:	83 ec 10             	sub    esp,0x10
c000ef99:	e4 92                	in     al,0x92
c000ef9b:	89 c6                	mov    esi,eax
c000ef9d:	e4 61                	in     al,0x61
c000ef9f:	68 0a a3 02 c0       	push   0xc002a30a
c000efa4:	88 c3                	mov    bl,al
c000efa6:	e8 5e 3f 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000efab:	83 c4 10             	add    esp,0x10
c000efae:	83 e6 10             	and    esi,0x10
c000efb1:	75 0d                	jne    c000efc0 <Computer::handleNMI()+0x2c>
c000efb3:	f6 c3 40             	test   bl,0x40
c000efb6:	75 1d                	jne    c000efd5 <Computer::handleNMI()+0x41>
c000efb8:	84 db                	test   bl,bl
c000efba:	78 2d                	js     c000efe9 <Computer::handleNMI()+0x55>
c000efbc:	58                   	pop    eax
c000efbd:	5b                   	pop    ebx
c000efbe:	5e                   	pop    esi
c000efbf:	c3                   	ret    
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	68 1b a3 02 c0       	push   0xc002a31b
c000efc8:	e8 7a b6 00 00       	call   c001a647 <Krnl::panic(char const*)>
c000efcd:	83 c4 10             	add    esp,0x10
c000efd0:	f6 c3 40             	test   bl,0x40
c000efd3:	74 e3                	je     c000efb8 <Computer::handleNMI()+0x24>
c000efd5:	83 ec 0c             	sub    esp,0xc
c000efd8:	68 28 a3 02 c0       	push   0xc002a328
c000efdd:	e8 65 b6 00 00       	call   c001a647 <Krnl::panic(char const*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	84 db                	test   bl,bl
c000efe7:	79 d3                	jns    c000efbc <Computer::handleNMI()+0x28>
c000efe9:	c7 44 24 10 32 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a332
c000eff1:	5a                   	pop    edx
c000eff2:	5b                   	pop    ebx
c000eff3:	5e                   	pop    esi
c000eff4:	e9 4e b6 00 00       	jmp    c001a647 <Krnl::panic(char const*)>
c000eff9:	90                   	nop

c000effa <Computer::setDiskActivityLight(int, bool)>:
c000effa:	56                   	push   esi
c000effb:	53                   	push   ebx
c000effc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f000:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f005:	77 1b                	ja     c000f022 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f007:	e4 92                	in     al,0x92
c000f009:	bb 40 00 00 00       	mov    ebx,0x40
c000f00e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f012:	89 da                	mov    edx,ebx
c000f014:	d3 e2                	shl    edx,cl
c000f016:	89 f1                	mov    ecx,esi
c000f018:	f7 d2                	not    edx
c000f01a:	d3 e3                	shl    ebx,cl
c000f01c:	21 d0                	and    eax,edx
c000f01e:	09 d8                	or     eax,ebx
c000f020:	e6 92                	out    0x92,al
c000f022:	5b                   	pop    ebx
c000f023:	5e                   	pop    esi
c000f024:	c3                   	ret    
c000f025:	90                   	nop

c000f026 <GDTEntry::setBase(unsigned int)>:
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02e:	89 c1                	mov    ecx,eax
c000f030:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f034:	c1 e9 10             	shr    ecx,0x10
c000f037:	c1 e8 18             	shr    eax,0x18
c000f03a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <GDTEntry::setLimit(unsigned int)>:
c000f042:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f046:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f050:	83 e2 f0             	and    edx,0xfffffff0
c000f053:	c1 e8 10             	shr    eax,0x10
c000f056:	83 e0 0f             	and    eax,0xf
c000f059:	09 d0                	or     eax,edx
c000f05b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05e:	c3                   	ret    
c000f05f:	90                   	nop

c000f060 <GDT::GDT()>:
c000f060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f074:	90                   	nop
c000f075:	c3                   	ret    

c000f076 <GDT::addEntry(GDTEntry)>:
c000f076:	53                   	push   ebx
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f080:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f087:	52                   	push   edx
c000f088:	50                   	push   eax
c000f089:	68 6c a3 02 c0       	push   0xc002a36c
c000f08e:	e8 76 3e 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000f093:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f095:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f099:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0a1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a5:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a8:	c1 e0 03             	shl    eax,0x3
c000f0ab:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ad:	83 c4 18             	add    esp,0x18
c000f0b0:	5b                   	pop    ebx
c000f0b1:	c3                   	ret    

c000f0b2 <GDT::getNumberOfEntries()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b8:	c3                   	ret    
c000f0b9:	90                   	nop

c000f0ba <GDT::flush()>:
c000f0ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0be:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0c0:	83 c0 04             	add    eax,0x4
c000f0c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0ca:	a3 12 e6 02 c0       	mov    ds:0xc002e612,eax
c000f0cf:	66 89 15 10 e6 02 c0 	mov    WORD PTR ds:0xc002e610,dx
c000f0d6:	e9 75 13 ff ff       	jmp    c0000450 <loadGDT>
c000f0db:	90                   	nop

c000f0dc <GDT::setup()>:
c000f0dc:	55                   	push   ebp
c000f0dd:	57                   	push   edi
c000f0de:	56                   	push   esi
c000f0df:	53                   	push   ebx
c000f0e0:	83 ec 3c             	sub    esp,0x3c
c000f0e3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e7:	6a 00                	push   0x0
c000f0e9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 33 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f0f3:	6a 00                	push   0x0
c000f0f5:	53                   	push   ebx
c000f0f6:	e8 47 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f0fb:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f103:	6a 00                	push   0x0
c000f105:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f109:	53                   	push   ebx
c000f10a:	e8 17 ff ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f10f:	68 ff ff ff 00       	push   0xffffff
c000f114:	53                   	push   ebx
c000f115:	e8 28 ff ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f11a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f123:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f128:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12c:	83 c4 20             	add    esp,0x20
c000f12f:	6a 00                	push   0x0
c000f131:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f135:	53                   	push   ebx
c000f136:	e8 eb fe ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c000f13b:	68 ff ff ff 00       	push   0xffffff
c000f140:	53                   	push   ebx
c000f141:	e8 fc fe ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c000f146:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f14a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f156:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f15a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f164:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f168:	89 d8                	mov    eax,ebx
c000f16a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16e:	80 cc 60             	or     ah,0x60
c000f171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	89 f8                	mov    eax,edi
c000f17a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17e:	80 cc 60             	or     ah,0x60
c000f181:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f185:	89 c7                	mov    edi,eax
c000f187:	55                   	push   ebp
c000f188:	e8 e9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f18d:	83 c4 0c             	add    esp,0xc
c000f190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f198:	55                   	push   ebp
c000f199:	e8 d8 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f19e:	83 c4 0c             	add    esp,0xc
c000f1a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a9:	55                   	push   ebp
c000f1aa:	e8 c7 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1af:	83 c4 0c             	add    esp,0xc
c000f1b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1ba:	53                   	push   ebx
c000f1bb:	51                   	push   ecx
c000f1bc:	55                   	push   ebp
c000f1bd:	e8 b4 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	57                   	push   edi
c000f1c6:	56                   	push   esi
c000f1c7:	55                   	push   ebp
c000f1c8:	e8 a9 fe ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c000f1cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1d0:	e8 e5 fe ff ff       	call   c000f0ba <GDT::flush()>
c000f1d5:	83 c4 4c             	add    esp,0x4c
c000f1d8:	5b                   	pop    ebx
c000f1d9:	5e                   	pop    esi
c000f1da:	5f                   	pop    edi
c000f1db:	5d                   	pop    ebp
c000f1dc:	c3                   	ret    

c000f1dd <idleFunction(void*)>:
c000f1dd:	53                   	push   ebx
c000f1de:	83 ec 08             	sub    esp,0x8
c000f1e1:	e8 3e ec 00 00       	call   c001de24 <unlockScheduler()>
c000f1e6:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000f1eb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1f1:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f8:	74 3c                	je     c000f236 <idleFunction(void*)+0x59>
c000f1fa:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f201:	74 33                	je     c000f236 <idleFunction(void*)+0x59>
c000f203:	31 db                	xor    ebx,ebx
c000f205:	52                   	push   edx
c000f206:	52                   	push   edx
c000f207:	68 e1 00 00 00       	push   0xe1
c000f20c:	50                   	push   eax
c000f20d:	e8 de fb ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c000f212:	53                   	push   ebx
c000f213:	83 e0 02             	and    eax,0x2
c000f216:	50                   	push   eax
c000f217:	68 e1 00 00 00       	push   0xe1
c000f21c:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c000f222:	e8 f5 fb ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c000f227:	83 c4 20             	add    esp,0x20
c000f22a:	e8 50 10 ff ff       	call   c000027f <doTPAUSE>
c000f22f:	e8 0c 96 01 00       	call   c0028840 <idleCommon()>
c000f234:	eb f4                	jmp    c000f22a <idleFunction(void*)+0x4d>
c000f236:	fb                   	sti    
c000f237:	f4                   	hlt    
c000f238:	e8 03 96 01 00       	call   c0028840 <idleCommon()>
c000f23d:	eb f7                	jmp    c000f236 <idleFunction(void*)+0x59>
c000f23f:	90                   	nop

c000f240 <IDTEntry::IDTEntry(bool)>:
c000f240:	83 ec 04             	sub    esp,0x4
c000f243:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f247:	88 04 24             	mov    BYTE PTR [esp],al
c000f24a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f260:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f263:	83 e2 f0             	and    edx,0xfffffff0
c000f266:	83 ca 0e             	or     edx,0xe
c000f269:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f270:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f273:	83 e2 ef             	and    edx,0xffffffef
c000f276:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f279:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27d:	74 04                	je     c000f283 <IDTEntry::IDTEntry(bool)+0x43>
c000f27f:	b2 03                	mov    dl,0x3
c000f281:	eb 02                	jmp    c000f285 <IDTEntry::IDTEntry(bool)+0x45>
c000f283:	b2 00                	mov    dl,0x0
c000f285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f289:	83 e2 03             	and    edx,0x3
c000f28c:	88 d1                	mov    cl,dl
c000f28e:	c1 e1 05             	shl    ecx,0x5
c000f291:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f294:	83 e2 9f             	and    edx,0xffffff9f
c000f297:	09 ca                	or     edx,ecx
c000f299:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a3:	83 ca 80             	or     edx,0xffffff80
c000f2a6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a9:	90                   	nop
c000f2aa:	83 c4 04             	add    esp,0x4
c000f2ad:	c3                   	ret    

c000f2ae <IDTEntry::setOffset(unsigned int)>:
c000f2ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b6:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b9:	c1 e8 10             	shr    eax,0x10
c000f2bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2c0:	c3                   	ret    
c000f2c1:	90                   	nop

c000f2c2 <IDT::IDT()>:
c000f2c2:	90                   	nop
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c8:	83 c0 30             	add    eax,0x30
c000f2cb:	c3                   	ret    

c000f2cc <IDT::addEntry(IDTEntry, int)>:
c000f2cc:	53                   	push   ebx
c000f2cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2dd:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2e0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e4:	5b                   	pop    ebx
c000f2e5:	c3                   	ret    

c000f2e6 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e6:	53                   	push   ebx
c000f2e7:	83 ec 10             	sub    esp,0x10
c000f2ea:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ef:	50                   	push   eax
c000f2f0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f4:	53                   	push   ebx
c000f2f5:	e8 46 ff ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f2fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fe:	53                   	push   ebx
c000f2ff:	e8 aa ff ff ff       	call   c000f2ae <IDTEntry::setOffset(unsigned int)>
c000f304:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f308:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f310:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f314:	e8 b3 ff ff ff       	call   c000f2cc <IDT::addEntry(IDTEntry, int)>
c000f319:	83 c4 30             	add    esp,0x30
c000f31c:	5b                   	pop    ebx
c000f31d:	c3                   	ret    

c000f31e <IDT::flush()>:
c000f31e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f322:	66 c7 05 18 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e618,0x7ff
c000f32b:	a3 1a e6 02 c0       	mov    ds:0xc002e61a,eax
c000f330:	0f 01 1d 18 e6 02 c0 	lidtd  ds:0xc002e618
c000f337:	c3                   	ret    

c000f338 <IDT::setup()>:
c000f338:	57                   	push   edi
c000f339:	56                   	push   esi
c000f33a:	53                   	push   ebx
c000f33b:	83 ec 10             	sub    esp,0x10
c000f33e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f342:	6a 00                	push   0x0
c000f344:	68 70 04 00 c0       	push   0xc0000470
c000f349:	6a 00                	push   0x0
c000f34b:	53                   	push   ebx
c000f34c:	e8 95 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f351:	6a 00                	push   0x0
c000f353:	68 80 04 00 c0       	push   0xc0000480
c000f358:	6a 01                	push   0x1
c000f35a:	53                   	push   ebx
c000f35b:	e8 86 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	83 c4 20             	add    esp,0x20
c000f363:	6a 00                	push   0x0
c000f365:	68 8a 04 00 c0       	push   0xc000048a
c000f36a:	6a 02                	push   0x2
c000f36c:	53                   	push   ebx
c000f36d:	e8 74 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f372:	6a 00                	push   0x0
c000f374:	68 94 04 00 c0       	push   0xc0000494
c000f379:	6a 03                	push   0x3
c000f37b:	53                   	push   ebx
c000f37c:	e8 65 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f381:	83 c4 20             	add    esp,0x20
c000f384:	6a 00                	push   0x0
c000f386:	68 9e 04 00 c0       	push   0xc000049e
c000f38b:	6a 04                	push   0x4
c000f38d:	53                   	push   ebx
c000f38e:	e8 53 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f393:	6a 00                	push   0x0
c000f395:	68 a8 04 00 c0       	push   0xc00004a8
c000f39a:	6a 05                	push   0x5
c000f39c:	53                   	push   ebx
c000f39d:	e8 44 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3a2:	83 c4 20             	add    esp,0x20
c000f3a5:	6a 00                	push   0x0
c000f3a7:	68 b2 04 00 c0       	push   0xc00004b2
c000f3ac:	6a 06                	push   0x6
c000f3ae:	53                   	push   ebx
c000f3af:	e8 32 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 bc 04 00 c0       	push   0xc00004bc
c000f3bb:	6a 07                	push   0x7
c000f3bd:	53                   	push   ebx
c000f3be:	e8 23 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	83 c4 20             	add    esp,0x20
c000f3c6:	6a 00                	push   0x0
c000f3c8:	68 c6 04 00 c0       	push   0xc00004c6
c000f3cd:	6a 08                	push   0x8
c000f3cf:	53                   	push   ebx
c000f3d0:	e8 11 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 ce 04 00 c0       	push   0xc00004ce
c000f3dc:	6a 09                	push   0x9
c000f3de:	53                   	push   ebx
c000f3df:	e8 02 ff ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	83 c4 20             	add    esp,0x20
c000f3e7:	6a 00                	push   0x0
c000f3e9:	68 d8 04 00 c0       	push   0xc00004d8
c000f3ee:	6a 0a                	push   0xa
c000f3f0:	53                   	push   ebx
c000f3f1:	e8 f0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 e0 04 00 c0       	push   0xc00004e0
c000f3fd:	6a 0b                	push   0xb
c000f3ff:	53                   	push   ebx
c000f400:	e8 e1 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	83 c4 20             	add    esp,0x20
c000f408:	6a 00                	push   0x0
c000f40a:	68 e8 04 00 c0       	push   0xc00004e8
c000f40f:	6a 0c                	push   0xc
c000f411:	53                   	push   ebx
c000f412:	e8 cf fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f417:	6a 00                	push   0x0
c000f419:	68 f0 04 00 c0       	push   0xc00004f0
c000f41e:	6a 0d                	push   0xd
c000f420:	53                   	push   ebx
c000f421:	e8 c0 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	83 c4 20             	add    esp,0x20
c000f429:	6a 00                	push   0x0
c000f42b:	68 f8 04 00 c0       	push   0xc00004f8
c000f430:	6a 0e                	push   0xe
c000f432:	53                   	push   ebx
c000f433:	e8 ae fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f438:	6a 00                	push   0x0
c000f43a:	68 00 05 00 c0       	push   0xc0000500
c000f43f:	6a 0f                	push   0xf
c000f441:	53                   	push   ebx
c000f442:	e8 9f fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	83 c4 20             	add    esp,0x20
c000f44a:	6a 00                	push   0x0
c000f44c:	68 0a 05 00 c0       	push   0xc000050a
c000f451:	6a 10                	push   0x10
c000f453:	53                   	push   ebx
c000f454:	e8 8d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f459:	6a 00                	push   0x0
c000f45b:	68 14 05 00 c0       	push   0xc0000514
c000f460:	6a 11                	push   0x11
c000f462:	53                   	push   ebx
c000f463:	e8 7e fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	83 c4 20             	add    esp,0x20
c000f46b:	6a 00                	push   0x0
c000f46d:	68 1e 05 00 c0       	push   0xc000051e
c000f472:	6a 12                	push   0x12
c000f474:	53                   	push   ebx
c000f475:	e8 6c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f47a:	6a 01                	push   0x1
c000f47c:	68 b8 05 00 c0       	push   0xc00005b8
c000f481:	6a 60                	push   0x60
c000f483:	53                   	push   ebx
c000f484:	e8 5d fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	83 c4 20             	add    esp,0x20
c000f48c:	6a 00                	push   0x0
c000f48e:	68 bf 05 00 c0       	push   0xc00005bf
c000f493:	6a 20                	push   0x20
c000f495:	53                   	push   ebx
c000f496:	e8 4b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f49b:	6a 00                	push   0x0
c000f49d:	68 aa 05 00 c0       	push   0xc00005aa
c000f4a2:	6a 21                	push   0x21
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 3c fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	83 c4 20             	add    esp,0x20
c000f4ad:	6a 00                	push   0x0
c000f4af:	68 b1 05 00 c0       	push   0xc00005b1
c000f4b4:	6a 22                	push   0x22
c000f4b6:	53                   	push   ebx
c000f4b7:	e8 2a fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 28 05 00 c0       	push   0xc0000528
c000f4c3:	6a 23                	push   0x23
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 1b fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	83 c4 20             	add    esp,0x20
c000f4ce:	6a 00                	push   0x0
c000f4d0:	68 32 05 00 c0       	push   0xc0000532
c000f4d5:	6a 24                	push   0x24
c000f4d7:	53                   	push   ebx
c000f4d8:	e8 09 fe ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 3c 05 00 c0       	push   0xc000053c
c000f4e4:	6a 25                	push   0x25
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 fa fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	83 c4 20             	add    esp,0x20
c000f4ef:	6a 00                	push   0x0
c000f4f1:	68 46 05 00 c0       	push   0xc0000546
c000f4f6:	6a 26                	push   0x26
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 e8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f4fe:	6a 00                	push   0x0
c000f500:	68 50 05 00 c0       	push   0xc0000550
c000f505:	6a 27                	push   0x27
c000f507:	53                   	push   ebx
c000f508:	e8 d9 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	83 c4 20             	add    esp,0x20
c000f510:	6a 00                	push   0x0
c000f512:	68 5a 05 00 c0       	push   0xc000055a
c000f517:	6a 28                	push   0x28
c000f519:	53                   	push   ebx
c000f51a:	e8 c7 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f51f:	6a 00                	push   0x0
c000f521:	68 64 05 00 c0       	push   0xc0000564
c000f526:	6a 29                	push   0x29
c000f528:	53                   	push   ebx
c000f529:	e8 b8 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	83 c4 20             	add    esp,0x20
c000f531:	6a 00                	push   0x0
c000f533:	68 6e 05 00 c0       	push   0xc000056e
c000f538:	6a 2a                	push   0x2a
c000f53a:	53                   	push   ebx
c000f53b:	e8 a6 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f540:	6a 00                	push   0x0
c000f542:	68 78 05 00 c0       	push   0xc0000578
c000f547:	6a 2b                	push   0x2b
c000f549:	53                   	push   ebx
c000f54a:	e8 97 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	83 c4 20             	add    esp,0x20
c000f552:	6a 00                	push   0x0
c000f554:	68 82 05 00 c0       	push   0xc0000582
c000f559:	6a 2c                	push   0x2c
c000f55b:	53                   	push   ebx
c000f55c:	e8 85 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f561:	6a 00                	push   0x0
c000f563:	68 8c 05 00 c0       	push   0xc000058c
c000f568:	6a 2d                	push   0x2d
c000f56a:	53                   	push   ebx
c000f56b:	e8 76 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	83 c4 20             	add    esp,0x20
c000f573:	6a 00                	push   0x0
c000f575:	68 96 05 00 c0       	push   0xc0000596
c000f57a:	6a 2e                	push   0x2e
c000f57c:	53                   	push   ebx
c000f57d:	e8 64 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f582:	6a 00                	push   0x0
c000f584:	68 a0 05 00 c0       	push   0xc00005a0
c000f589:	6a 2f                	push   0x2f
c000f58b:	53                   	push   ebx
c000f58c:	e8 55 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	83 c4 20             	add    esp,0x20
c000f594:	6a 00                	push   0x0
c000f596:	68 f5 05 00 c0       	push   0xc00005f5
c000f59b:	6a 30                	push   0x30
c000f59d:	53                   	push   ebx
c000f59e:	e8 43 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 ff 05 00 c0       	push   0xc00005ff
c000f5aa:	6a 31                	push   0x31
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 34 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	83 c4 20             	add    esp,0x20
c000f5b5:	6a 00                	push   0x0
c000f5b7:	68 09 06 00 c0       	push   0xc0000609
c000f5bc:	6a 32                	push   0x32
c000f5be:	53                   	push   ebx
c000f5bf:	e8 22 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 13 06 00 c0       	push   0xc0000613
c000f5cb:	6a 33                	push   0x33
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 13 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	83 c4 20             	add    esp,0x20
c000f5d6:	6a 00                	push   0x0
c000f5d8:	68 1d 06 00 c0       	push   0xc000061d
c000f5dd:	6a 34                	push   0x34
c000f5df:	53                   	push   ebx
c000f5e0:	e8 01 fd ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 27 06 00 c0       	push   0xc0000627
c000f5ec:	6a 35                	push   0x35
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 f2 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	83 c4 20             	add    esp,0x20
c000f5f7:	6a 00                	push   0x0
c000f5f9:	68 31 06 00 c0       	push   0xc0000631
c000f5fe:	6a 36                	push   0x36
c000f600:	53                   	push   ebx
c000f601:	e8 e0 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f606:	6a 00                	push   0x0
c000f608:	68 3b 06 00 c0       	push   0xc000063b
c000f60d:	6a 37                	push   0x37
c000f60f:	53                   	push   ebx
c000f610:	e8 d1 fc ff ff       	call   c000f2e6 <IDT::addEntry(int, void (*)(), bool)>
c000f615:	83 c4 20             	add    esp,0x20
c000f618:	e8 c9 27 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f61d:	52                   	push   edx
c000f61e:	6a 03                	push   0x3
c000f620:	6a 02                	push   0x2
c000f622:	50                   	push   eax
c000f623:	e8 3a 2e 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f628:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62f:	89 c6                	mov    esi,eax
c000f631:	e8 15 02 00 00       	call   c000f84b <malloc>
c000f636:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63f:	89 c7                	mov    edi,eax
c000f641:	e8 36 1e 00 00       	call   c001147c <TSS::TSS()>
c000f646:	83 c4 0c             	add    esp,0xc
c000f649:	68 c6 04 00 c0       	push   0xc00004c6
c000f64e:	56                   	push   esi
c000f64f:	57                   	push   edi
c000f650:	e8 67 1e 00 00       	call   c00114bc <TSS::setup(unsigned long, unsigned long)>
c000f655:	59                   	pop    ecx
c000f656:	89 c6                	mov    esi,eax
c000f658:	5f                   	pop    edi
c000f659:	6a 00                	push   0x0
c000f65b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65f:	50                   	push   eax
c000f660:	e8 db fb ff ff       	call   c000f240 <IDTEntry::IDTEntry(bool)>
c000f665:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f669:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f675:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f67b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67f:	80 ce 05             	or     dh,0x5
c000f682:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f685:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f690:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f693:	e8 86 fc ff ff       	call   c000f31e <IDT::flush()>
c000f698:	83 c4 20             	add    esp,0x20
c000f69b:	5b                   	pop    ebx
c000f69c:	5e                   	pop    esi
c000f69d:	5f                   	pop    edi
c000f69e:	c3                   	ret    

c000f69f <sbrk>:
c000f69f:	55                   	push   ebp
c000f6a0:	57                   	push   edi
c000f6a1:	56                   	push   esi
c000f6a2:	53                   	push   ebx
c000f6a3:	83 ec 1c             	sub    esp,0x1c
c000f6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	74 3e                	je     c000f6ec <sbrk+0x4d>
c000f6ae:	78 43                	js     c000f6f3 <sbrk+0x54>
c000f6b0:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c000f6b6:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6bc:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c2:	83 e2 01             	and    edx,0x1
c000f6c5:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c9:	8b 0d 1c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d51c
c000f6cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d3:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d8:	89 c2                	mov    edx,eax
c000f6da:	78 2f                	js     c000f70b <sbrk+0x6c>
c000f6dc:	c1 fa 0c             	sar    edx,0xc
c000f6df:	89 d7                	mov    edi,edx
c000f6e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e5:	be 00 00 00 00       	mov    esi,0x0
c000f6ea:	eb 36                	jmp    c000f722 <sbrk+0x83>
c000f6ec:	a1 1c d5 02 c0       	mov    eax,ds:0xc002d51c
c000f6f1:	eb 74                	jmp    c000f767 <sbrk+0xc8>
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	50                   	push   eax
c000f6f7:	68 88 a3 02 c0       	push   0xc002a388
c000f6fc:	e8 08 38 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000f701:	83 c4 10             	add    esp,0x10
c000f704:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f709:	eb 5c                	jmp    c000f767 <sbrk+0xc8>
c000f70b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f711:	eb c9                	jmp    c000f6dc <sbrk+0x3d>
c000f713:	81 05 1c d5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d51c,0x1000
c000f71d:	46                   	inc    esi
c000f71e:	39 f7                	cmp    edi,esi
c000f720:	74 34                	je     c000f756 <sbrk+0xb7>
c000f722:	e8 bf 26 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f727:	89 c3                	mov    ebx,eax
c000f729:	8b 2d 1c d5 02 c0    	mov    ebp,DWORD PTR ds:0xc002d51c
c000f72f:	e8 b9 07 00 00       	call   c000feed <Phys::allocatePage()>
c000f734:	68 01 0c 00 00       	push   0xc01
c000f739:	55                   	push   ebp
c000f73a:	50                   	push   eax
c000f73b:	53                   	push   ebx
c000f73c:	e8 21 2c 00 00       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f749:	74 c8                	je     c000f713 <sbrk+0x74>
c000f74b:	8b 1d 1c d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d51c
c000f751:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f754:	eb bd                	jmp    c000f713 <sbrk+0x74>
c000f756:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f75b:	75 12                	jne    c000f76f <sbrk+0xd0>
c000f75d:	0f 20 d8             	mov    eax,cr3
c000f760:	0f 22 d8             	mov    cr3,eax
c000f763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f767:	83 c4 1c             	add    esp,0x1c
c000f76a:	5b                   	pop    ebx
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	5d                   	pop    ebp
c000f76e:	c3                   	ret    
c000f76f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f773:	89 cb                	mov    ebx,ecx
c000f775:	c1 eb 0a             	shr    ebx,0xa
c000f778:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f788:	c1 e0 0c             	shl    eax,0xc
c000f78b:	01 c8                	add    eax,ecx
c000f78d:	c1 e8 0a             	shr    eax,0xa
c000f790:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f795:	2d 00 00 40 00       	sub    eax,0x400000
c000f79a:	39 c3                	cmp    ebx,eax
c000f79c:	77 c5                	ja     c000f763 <sbrk+0xc4>
c000f79e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a7:	39 d8                	cmp    eax,ebx
c000f7a9:	73 f3                	jae    c000f79e <sbrk+0xff>
c000f7ab:	eb b6                	jmp    c000f763 <sbrk+0xc4>

c000f7ad <mmap>:
c000f7ad:	83 ec 18             	sub    esp,0x18
c000f7b0:	68 b8 a3 02 c0       	push   0xc002a3b8
c000f7b5:	e8 8d ae 00 00       	call   c001a647 <Krnl::panic(char const*)>
c000f7ba:	b8 00 00 00 00       	mov    eax,0x0
c000f7bf:	83 c4 1c             	add    esp,0x1c
c000f7c2:	c3                   	ret    

c000f7c3 <munmap>:
c000f7c3:	83 ec 18             	sub    esp,0x18
c000f7c6:	68 bd a3 02 c0       	push   0xc002a3bd
c000f7cb:	e8 77 ae 00 00       	call   c001a647 <Krnl::panic(char const*)>
c000f7d0:	b8 00 00 00 00       	mov    eax,0x0
c000f7d5:	83 c4 1c             	add    esp,0x1c
c000f7d8:	c3                   	ret    

c000f7d9 <liballoc_lock()>:
c000f7d9:	83 ec 0c             	sub    esp,0xc
c000f7dc:	e8 41 e6 00 00       	call   c001de22 <lockScheduler()>
c000f7e1:	b8 00 00 00 00       	mov    eax,0x0
c000f7e6:	83 c4 0c             	add    esp,0xc
c000f7e9:	c3                   	ret    

c000f7ea <liballoc_unlock()>:
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	e8 32 e6 00 00       	call   c001de24 <unlockScheduler()>
c000f7f2:	b8 00 00 00 00       	mov    eax,0x0
c000f7f7:	83 c4 0c             	add    esp,0xc
c000f7fa:	c3                   	ret    

c000f7fb <liballoc_alloc(int)>:
c000f7fb:	83 ec 0c             	sub    esp,0xc
c000f7fe:	e8 e3 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f803:	83 ec 04             	sub    esp,0x4
c000f806:	68 01 08 00 00       	push   0x801
c000f80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80f:	50                   	push   eax
c000f810:	e8 4d 2c 00 00       	call   c0012462 <VAS::allocatePages(int, int)>
c000f815:	83 c4 1c             	add    esp,0x1c
c000f818:	c3                   	ret    

c000f819 <liballoc_free(void*, int)>:
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	e8 c5 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f821:	83 ec 08             	sub    esp,0x8
c000f824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f828:	50                   	push   eax
c000f829:	e8 f0 28 00 00       	call   c001211e <VAS::freeAllocatedPages(unsigned long)>
c000f82e:	b8 00 00 00 00       	mov    eax,0x0
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    

c000f837 <realloc>:
c000f837:	83 ec 14             	sub    esp,0x14
c000f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f842:	e8 15 1e ff ff       	call   c000165c <dlrealloc>
c000f847:	83 c4 1c             	add    esp,0x1c
c000f84a:	c3                   	ret    

c000f84b <malloc>:
c000f84b:	83 ec 18             	sub    esp,0x18
c000f84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f852:	e8 c8 18 ff ff       	call   c000111f <dlmalloc>
c000f857:	83 c4 1c             	add    esp,0x1c
c000f85a:	c3                   	ret    

c000f85b <free>:
c000f85b:	83 ec 18             	sub    esp,0x18
c000f85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f862:	e8 5d 15 ff ff       	call   c0000dc4 <dlfree>
c000f867:	83 c4 1c             	add    esp,0x1c
c000f86a:	c3                   	ret    

c000f86b <rfree>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f872:	e8 4d 15 ff ff       	call   c0000dc4 <dlfree>
c000f877:	83 c4 1c             	add    esp,0x1c
c000f87a:	c3                   	ret    

c000f87b <calloc>:
c000f87b:	56                   	push   esi
c000f87c:	53                   	push   ebx
c000f87d:	83 ec 10             	sub    esp,0x10
c000f880:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f884:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f889:	53                   	push   ebx
c000f88a:	e8 bc ff ff ff       	call   c000f84b <malloc>
c000f88f:	89 c6                	mov    esi,eax
c000f891:	83 c4 0c             	add    esp,0xc
c000f894:	53                   	push   ebx
c000f895:	6a 00                	push   0x0
c000f897:	50                   	push   eax
c000f898:	e8 e3 0e ff ff       	call   c0000780 <memset>
c000f89d:	89 f0                	mov    eax,esi
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	5b                   	pop    ebx
c000f8a3:	5e                   	pop    esi
c000f8a4:	c3                   	ret    

c000f8a5 <hwTextMode_loadInData(VgaText*)>:
c000f8a5:	55                   	push   ebp
c000f8a6:	a1 40 d5 02 c0       	mov    eax,ds:0xc002d540
c000f8ab:	57                   	push   edi
c000f8ac:	56                   	push   esi
c000f8ad:	53                   	push   ebx
c000f8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8b2:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b8:	85 d2                	test   edx,edx
c000f8ba:	7e 2f                	jle    c000f8eb <hwTextMode_loadInData(VgaText*)+0x46>
c000f8bc:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8c2:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8c5:	31 f6                	xor    esi,esi
c000f8c7:	29 fd                	sub    ebp,edi
c000f8c9:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8cc:	31 c0                	xor    eax,eax
c000f8ce:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8d2:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d6:	40                   	inc    eax
c000f8d7:	83 f8 50             	cmp    eax,0x50
c000f8da:	75 f2                	jne    c000f8ce <hwTextMode_loadInData(VgaText*)+0x29>
c000f8dc:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8e2:	46                   	inc    esi
c000f8e3:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e9:	7f de                	jg     c000f8c9 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8eb:	5b                   	pop    ebx
c000f8ec:	5e                   	pop    esi
c000f8ed:	5f                   	pop    edi
c000f8ee:	5d                   	pop    ebp
c000f8ef:	c3                   	ret    

c000f8f0 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8f0:	55                   	push   ebp
c000f8f1:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000f8f8:	57                   	push   edi
c000f8f9:	56                   	push   esi
c000f8fa:	53                   	push   ebx
c000f8fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8ff:	75 50                	jne    c000f951 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f901:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f907:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f90d:	8b 15 40 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d540
c000f913:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f917:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f91d:	eb 0e                	jmp    c000f92d <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f91f:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f925:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f92b:	89 da                	mov    edx,ebx
c000f92d:	83 e5 0f             	and    ebp,0xf
c000f930:	c1 e0 04             	shl    eax,0x4
c000f933:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f936:	0f b6 c0             	movzx  eax,al
c000f939:	41                   	inc    ecx
c000f93a:	09 e8                	or     eax,ebp
c000f93c:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f940:	c1 e0 08             	shl    eax,0x8
c000f943:	09 e8                	or     eax,ebp
c000f945:	39 fb                	cmp    ebx,edi
c000f947:	66 89 02             	mov    WORD PTR [edx],ax
c000f94a:	75 d3                	jne    c000f91f <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f94c:	5b                   	pop    ebx
c000f94d:	5e                   	pop    esi
c000f94e:	5f                   	pop    edi
c000f94f:	5d                   	pop    ebp
c000f950:	c3                   	ret    
c000f951:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f95b:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f965:	31 c0                	xor    eax,eax
c000f967:	bd 02 00 00 00       	mov    ebp,0x2
c000f96c:	eb 9f                	jmp    c000f90d <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f96e <hwTextMode_showCursor(VgaText*, bool)>:
c000f96e:	56                   	push   esi
c000f96f:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000f976:	53                   	push   ebx
c000f977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f97b:	75 39                	jne    c000f9b6 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f97d:	84 c0                	test   al,al
c000f97f:	74 38                	je     c000f9b9 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f981:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f986:	b0 0a                	mov    al,0xa
c000f988:	89 da                	mov    edx,ebx
c000f98a:	ee                   	out    dx,al
c000f98b:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f990:	89 ca                	mov    edx,ecx
c000f992:	ec                   	in     al,dx
c000f993:	b2 0f                	mov    dl,0xf
c000f995:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f999:	83 e0 c0             	and    eax,0xffffffc0
c000f99c:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f9a2:	09 d0                	or     eax,edx
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ee                   	out    dx,al
c000f9a7:	b0 0b                	mov    al,0xb
c000f9a9:	89 da                	mov    edx,ebx
c000f9ab:	ee                   	out    dx,al
c000f9ac:	89 ca                	mov    edx,ecx
c000f9ae:	ec                   	in     al,dx
c000f9af:	83 e0 e0             	and    eax,0xffffffe0
c000f9b2:	83 c8 0f             	or     eax,0xf
c000f9b5:	ee                   	out    dx,al
c000f9b6:	5b                   	pop    ebx
c000f9b7:	5e                   	pop    esi
c000f9b8:	c3                   	ret    
c000f9b9:	b0 0a                	mov    al,0xa
c000f9bb:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9c0:	ee                   	out    dx,al
c000f9c1:	b0 20                	mov    al,0x20
c000f9c3:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c8:	ee                   	out    dx,al
c000f9c9:	5b                   	pop    ebx
c000f9ca:	5e                   	pop    esi
c000f9cb:	c3                   	ret    

c000f9cc <hwTextMode_update(VgaText*)>:
c000f9cc:	c3                   	ret    

c000f9cd <hwTextMode_updateCursor(VgaText*)>:
c000f9cd:	56                   	push   esi
c000f9ce:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000f9d5:	53                   	push   ebx
c000f9d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9da:	75 3f                	jne    c000fa1b <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9dc:	be d4 03 00 00       	mov    esi,0x3d4
c000f9e1:	b9 19 00 00 00       	mov    ecx,0x19
c000f9e6:	89 f2                	mov    edx,esi
c000f9e8:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9ee:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9f4:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9f7:	c1 e1 04             	shl    ecx,0x4
c000f9fa:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000fa00:	b0 0f                	mov    al,0xf
c000fa02:	ee                   	out    dx,al
c000fa03:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa08:	88 c8                	mov    al,cl
c000fa0a:	89 da                	mov    edx,ebx
c000fa0c:	ee                   	out    dx,al
c000fa0d:	b0 0e                	mov    al,0xe
c000fa0f:	89 f2                	mov    edx,esi
c000fa11:	ee                   	out    dx,al
c000fa12:	89 c8                	mov    eax,ecx
c000fa14:	89 da                	mov    edx,ebx
c000fa16:	66 c1 e8 08          	shr    ax,0x8
c000fa1a:	ee                   	out    dx,al
c000fa1b:	5b                   	pop    ebx
c000fa1c:	5e                   	pop    esi
c000fa1d:	c3                   	ret    

c000fa1e <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa22:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000fa29:	75 38                	jne    c000fa63 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa2b:	ba da 03 00 00       	mov    edx,0x3da
c000fa30:	84 c0                	test   al,al
c000fa32:	75 18                	jne    c000fa4c <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa34:	ec                   	in     al,dx
c000fa35:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa3a:	b0 30                	mov    al,0x30
c000fa3c:	89 ca                	mov    edx,ecx
c000fa3e:	ee                   	out    dx,al
c000fa3f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa44:	ec                   	in     al,dx
c000fa45:	83 c8 08             	or     eax,0x8
c000fa48:	89 ca                	mov    edx,ecx
c000fa4a:	ee                   	out    dx,al
c000fa4b:	c3                   	ret    
c000fa4c:	ec                   	in     al,dx
c000fa4d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa52:	b0 30                	mov    al,0x30
c000fa54:	89 ca                	mov    edx,ecx
c000fa56:	ee                   	out    dx,al
c000fa57:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa5c:	ec                   	in     al,dx
c000fa5d:	83 e0 f7             	and    eax,0xfffffff7
c000fa60:	89 ca                	mov    edx,ecx
c000fa62:	ee                   	out    dx,al
c000fa63:	c3                   	ret    

c000fa64 <hwTextMode_scrollScreen(VgaText*)>:
c000fa64:	55                   	push   ebp
c000fa65:	57                   	push   edi
c000fa66:	56                   	push   esi
c000fa67:	53                   	push   ebx
c000fa68:	83 ec 1c             	sub    esp,0x1c
c000fa6b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa6f:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000fa76:	74 14                	je     c000fa8c <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa78:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa82:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa8c:	a1 40 d5 02 c0       	mov    eax,ds:0xc002d540
c000fa91:	bd 02 00 00 00       	mov    ebp,0x2
c000fa96:	05 a0 00 00 00       	add    eax,0xa0
c000fa9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000faa3:	31 c0                	xor    eax,eax
c000faa5:	eb 0b                	jmp    c000fab2 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000faa7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faad:	74 57                	je     c000fb06 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faaf:	43                   	inc    ebx
c000fab0:	89 f0                	mov    eax,esi
c000fab2:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab8:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fabe:	88 13                	mov    BYTE PTR [ebx],dl
c000fac0:	8d 70 01             	lea    esi,[eax+0x1]
c000fac3:	83 fd 18             	cmp    ebp,0x18
c000fac6:	75 df                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac8:	a8 01                	test   al,0x1
c000faca:	75 13                	jne    c000fadf <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000facc:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000facf:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fad5:	75 d8                	jne    c000faaf <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fad7:	83 c4 1c             	add    esp,0x1c
c000fada:	5b                   	pop    ebx
c000fadb:	5e                   	pop    esi
c000fadc:	5f                   	pop    edi
c000fadd:	5d                   	pop    ebp
c000fade:	c3                   	ret    
c000fadf:	83 ec 08             	sub    esp,0x8
c000fae2:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae9:	50                   	push   eax
c000faea:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000faee:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faf5:	50                   	push   eax
c000faf6:	e8 53 0c 00 00       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c000fafb:	83 c4 10             	add    esp,0x10
c000fafe:	88 07                	mov    BYTE PTR [edi],al
c000fb00:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb04:	eb c9                	jmp    c000facf <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fb06:	45                   	inc    ebp
c000fb07:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb0f:	eb 8e                	jmp    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb11 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb11:	57                   	push   edi
c000fb12:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000fb19:	56                   	push   esi
c000fb1a:	53                   	push   ebx
c000fb1b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb1f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb23:	75 65                	jne    c000fb8a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb25:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb2a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb2f:	83 ec 08             	sub    esp,0x8
c000fb32:	52                   	push   edx
c000fb33:	50                   	push   eax
c000fb34:	e8 15 0c 00 00       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c000fb39:	5a                   	pop    edx
c000fb3a:	0f b6 c0             	movzx  eax,al
c000fb3d:	59                   	pop    ecx
c000fb3e:	50                   	push   eax
c000fb3f:	0f be c3             	movsx  eax,bl
c000fb42:	50                   	push   eax
c000fb43:	e8 ac 0c 00 00       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	8b 35 40 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d540
c000fb51:	80 3d a0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a0,0x0
c000fb58:	74 07                	je     c000fb61 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb5a:	66 0f be c3          	movsx  ax,bl
c000fb5e:	80 cc 02             	or     ah,0x2
c000fb61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb65:	ba 19 00 00 00       	mov    edx,0x19
c000fb6a:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb70:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb73:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb76:	c1 e1 04             	shl    ecx,0x4
c000fb79:	c1 e2 04             	shl    edx,0x4
c000fb7c:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb80:	01 ca                	add    edx,ecx
c000fb82:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb86:	5b                   	pop    ebx
c000fb87:	5e                   	pop    esi
c000fb88:	5f                   	pop    edi
c000fb89:	c3                   	ret    
c000fb8a:	b8 02 00 00 00       	mov    eax,0x2
c000fb8f:	31 d2                	xor    edx,edx
c000fb91:	eb 9c                	jmp    c000fb2f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb93 <setupTextMode()>:
c000fb93:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb98:	83 e0 30             	and    eax,0x30
c000fb9b:	66 83 f8 30          	cmp    ax,0x30
c000fb9f:	75 11                	jne    c000fbb2 <setupTextMode()+0x1f>
c000fba1:	81 2d 40 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d540,0x8000
c000fbab:	c6 05 a0 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6a0,0x1
c000fbb2:	c7 05 d8 e6 02 c0 1e fa 00 c0 	mov    DWORD PTR ds:0xc002e6d8,0xc000fa1e
c000fbbc:	c7 05 c4 e6 02 c0 a5 f8 00 c0 	mov    DWORD PTR ds:0xc002e6c4,0xc000f8a5
c000fbc6:	c7 05 c0 e6 02 c0 f0 f8 00 c0 	mov    DWORD PTR ds:0xc002e6c0,0xc000f8f0
c000fbd0:	c7 05 cc e6 02 c0 64 fa 00 c0 	mov    DWORD PTR ds:0xc002e6cc,0xc000fa64
c000fbda:	c7 05 d4 e6 02 c0 6e f9 00 c0 	mov    DWORD PTR ds:0xc002e6d4,0xc000f96e
c000fbe4:	c7 05 c8 e6 02 c0 cc f9 00 c0 	mov    DWORD PTR ds:0xc002e6c8,0xc000f9cc
c000fbee:	c7 05 d0 e6 02 c0 cd f9 00 c0 	mov    DWORD PTR ds:0xc002e6d0,0xc000f9cd
c000fbf8:	c7 05 dc e6 02 c0 11 fb 00 c0 	mov    DWORD PTR ds:0xc002e6dc,0xc000fb11
c000fc02:	c3                   	ret    

c000fc03 <kernel_main>:
c000fc03:	57                   	push   edi
c000fc04:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc09:	56                   	push   esi
c000fc0a:	31 f6                	xor    esi,esi
c000fc0c:	53                   	push   ebx
c000fc0d:	83 ec 20             	sub    esp,0x20
c000fc10:	e8 93 09 00 00       	call   c00105a8 <installVgaTextImplementation()>
c000fc15:	e8 79 ff ff ff       	call   c000fb93 <setupTextMode()>
c000fc1a:	89 f0                	mov    eax,esi
c000fc1c:	89 fa                	mov    edx,edi
c000fc1e:	ee                   	out    dx,al
c000fc1f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc24:	b0 80                	mov    al,0x80
c000fc26:	89 da                	mov    edx,ebx
c000fc28:	ee                   	out    dx,al
c000fc29:	b1 03                	mov    cl,0x3
c000fc2b:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc30:	88 c8                	mov    al,cl
c000fc32:	ee                   	out    dx,al
c000fc33:	89 f0                	mov    eax,esi
c000fc35:	89 fa                	mov    edx,edi
c000fc37:	ee                   	out    dx,al
c000fc38:	88 c8                	mov    al,cl
c000fc3a:	89 da                	mov    edx,ebx
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 c7                	mov    al,0xc7
c000fc3f:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc44:	ee                   	out    dx,al
c000fc45:	b0 0b                	mov    al,0xb
c000fc47:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc4c:	ee                   	out    dx,al
c000fc4d:	83 ec 0c             	sub    esp,0xc
c000fc50:	68 c4 a3 02 c0       	push   0xc002a3c4
c000fc55:	e8 af 32 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000fc5a:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc5f:	05 ff 0f 00 00       	add    eax,0xfff
c000fc64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc69:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc6c:	e8 f3 03 00 00       	call   c0010064 <Phys::physicalMemorySetup(unsigned int)>
c000fc71:	e8 94 20 00 00       	call   c0011d0a <Virt::virtualMemorySetup()>
c000fc76:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc7c:	83 c4 10             	add    esp,0x10
c000fc7f:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc85:	75 0e                	jne    c000fc95 <kernel_main+0x92>
c000fc87:	89 d8                	mov    eax,ebx
c000fc89:	25 48 03 00 00       	and    eax,0x348
c000fc8e:	3d 00 03 00 00       	cmp    eax,0x300
c000fc93:	74 10                	je     c000fca5 <kernel_main+0xa2>
c000fc95:	83 ec 0c             	sub    esp,0xc
c000fc98:	68 a1 bc 02 c0       	push   0xc002bca1
c000fc9d:	e8 a5 a9 00 00       	call   c001a647 <Krnl::panic(char const*)>
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	83 ec 0c             	sub    esp,0xc
c000fca8:	89 1d 20 e6 02 c0    	mov    DWORD PTR ds:0xc002e620,ebx
c000fcae:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcb2:	53                   	push   ebx
c000fcb3:	e8 8e 22 00 00       	call   c0011f46 <VAS::VAS()>
c000fcb8:	89 1d 90 e7 02 c0    	mov    DWORD PTR ds:0xc002e790,ebx
c000fcbe:	e8 5d 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcc3:	c7 04 24 db a3 02 c0 	mov    DWORD PTR [esp],0xc002a3db
c000fcca:	e8 3a 32 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000fccf:	e8 b5 20 00 00       	call   c0011d89 <Virt::swappingSetup()>
c000fcd4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcdb:	e8 6b fb ff ff       	call   c000f84b <malloc>
c000fce0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fce3:	89 c6                	mov    esi,eax
c000fce5:	e8 58 ea ff ff       	call   c000e742 <Computer::Computer()>
c000fcea:	58                   	pop    eax
c000fceb:	89 35 08 e6 02 c0    	mov    DWORD PTR ds:0xc002e608,esi
c000fcf1:	5a                   	pop    edx
c000fcf2:	56                   	push   esi
c000fcf3:	68 f8 a3 02 c0       	push   0xc002a3f8
c000fcf8:	e8 0c 32 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000fcfd:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c000fd02:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd04:	6a 00                	push   0x0
c000fd06:	6a 00                	push   0x0
c000fd08:	6a 00                	push   0x0
c000fd0a:	50                   	push   eax
c000fd0b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd0e:	83 c4 14             	add    esp,0x14
c000fd11:	53                   	push   ebx
c000fd12:	e8 df 24 00 00       	call   c00121f6 <VAS::~VAS()>
c000fd17:	c7 04 24 0b a4 02 c0 	mov    DWORD PTR [esp],0xc002a40b
c000fd1e:	e8 24 a9 00 00       	call   c001a647 <Krnl::panic(char const*)>
c000fd23:	83 c4 30             	add    esp,0x30
c000fd26:	5b                   	pop    ebx
c000fd27:	5e                   	pop    esi
c000fd28:	5f                   	pop    edi
c000fd29:	c3                   	ret    

c000fd2a <Phys::allocateDMA(unsigned long)>:
c000fd2a:	55                   	push   ebp
c000fd2b:	31 d2                	xor    edx,edx
c000fd2d:	57                   	push   edi
c000fd2e:	31 ed                	xor    ebp,ebp
c000fd30:	56                   	push   esi
c000fd31:	31 c9                	xor    ecx,ecx
c000fd33:	53                   	push   ebx
c000fd34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd38:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd3e:	31 c0                	xor    eax,eax
c000fd40:	c1 ee 0c             	shr    esi,0xc
c000fd43:	eb 17                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x32>
c000fd45:	85 c9                	test   ecx,ecx
c000fd47:	75 04                	jne    c000fd4d <Phys::allocateDMA(unsigned long)+0x23>
c000fd49:	89 d5                	mov    ebp,edx
c000fd4b:	89 d0                	mov    eax,edx
c000fd4d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd50:	39 de                	cmp    esi,ebx
c000fd52:	74 20                	je     c000fd74 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd54:	42                   	inc    edx
c000fd55:	89 d9                	mov    ecx,ebx
c000fd57:	83 fa 2f             	cmp    edx,0x2f
c000fd5a:	7f 11                	jg     c000fd6d <Phys::allocateDMA(unsigned long)+0x43>
c000fd5c:	80 ba 60 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd19a0],0x0
c000fd63:	74 e0                	je     c000fd45 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd65:	31 c9                	xor    ecx,ecx
c000fd67:	42                   	inc    edx
c000fd68:	83 fa 2f             	cmp    edx,0x2f
c000fd6b:	7e ef                	jle    c000fd5c <Phys::allocateDMA(unsigned long)+0x32>
c000fd6d:	5b                   	pop    ebx
c000fd6e:	31 c0                	xor    eax,eax
c000fd70:	5e                   	pop    esi
c000fd71:	5f                   	pop    edi
c000fd72:	5d                   	pop    ebp
c000fd73:	c3                   	ret    
c000fd74:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd77:	89 d7                	mov    edi,edx
c000fd79:	4f                   	dec    edi
c000fd7a:	79 03                	jns    c000fd7f <Phys::allocateDMA(unsigned long)+0x55>
c000fd7c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd7f:	c1 ff 04             	sar    edi,0x4
c000fd82:	89 c2                	mov    edx,eax
c000fd84:	c1 fa 04             	sar    edx,0x4
c000fd87:	39 fa                	cmp    edx,edi
c000fd89:	75 2f                	jne    c000fdba <Phys::allocateDMA(unsigned long)+0x90>
c000fd8b:	85 db                	test   ebx,ebx
c000fd8d:	74 1a                	je     c000fda9 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd8f:	be 60 e6 02 c0       	mov    esi,0xc002e660
c000fd94:	8d 90 60 e6 02 c0    	lea    edx,[eax-0x3ffd19a0]
c000fd9a:	f7 d6                	not    esi
c000fd9c:	29 c6                	sub    esi,eax
c000fd9e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fda1:	42                   	inc    edx
c000fda2:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fda5:	39 d9                	cmp    ecx,ebx
c000fda7:	7f f5                	jg     c000fd9e <Phys::allocateDMA(unsigned long)+0x74>
c000fda9:	85 ff                	test   edi,edi
c000fdab:	74 13                	je     c000fdc0 <Phys::allocateDMA(unsigned long)+0x96>
c000fdad:	5b                   	pop    ebx
c000fdae:	05 50 20 0c 00       	add    eax,0xc2050
c000fdb3:	5e                   	pop    esi
c000fdb4:	c1 e0 0c             	shl    eax,0xc
c000fdb7:	5f                   	pop    edi
c000fdb8:	5d                   	pop    ebp
c000fdb9:	c3                   	ret    
c000fdba:	89 ea                	mov    edx,ebp
c000fdbc:	31 c9                	xor    ecx,ecx
c000fdbe:	eb a7                	jmp    c000fd67 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdc0:	5b                   	pop    ebx
c000fdc1:	c1 e0 0c             	shl    eax,0xc
c000fdc4:	5e                   	pop    esi
c000fdc5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdca:	5f                   	pop    edi
c000fdcb:	5d                   	pop    ebp
c000fdcc:	c3                   	ret    

c000fdcd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdd5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fddb:	c1 e9 0c             	shr    ecx,0xc
c000fdde:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fde3:	76 25                	jbe    c000fe0a <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fde5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdea:	c1 e8 0c             	shr    eax,0xc
c000fded:	8d 50 10             	lea    edx,[eax+0x10]
c000fdf0:	85 c9                	test   ecx,ecx
c000fdf2:	74 15                	je     c000fe09 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdf4:	8d 82 60 e6 02 c0    	lea    eax,[edx-0x3ffd19a0]
c000fdfa:	8d 94 11 60 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd19a0]
c000fe01:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe04:	40                   	inc    eax
c000fe05:	39 d0                	cmp    eax,edx
c000fe07:	75 f8                	jne    c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe09:	c3                   	ret    
c000fe0a:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe10:	c1 ea 0c             	shr    edx,0xc
c000fe13:	eb db                	jmp    c000fdf0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe15 <Phys::setPageState(unsigned long, bool)>:
c000fe15:	56                   	push   esi
c000fe16:	ba 01 00 00 00       	mov    edx,0x1
c000fe1b:	53                   	push   ebx
c000fe1c:	8b 35 20 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d520
c000fe22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe2a:	89 c8                	mov    eax,ecx
c000fe2c:	83 e1 07             	and    ecx,0x7
c000fe2f:	c1 e8 03             	shr    eax,0x3
c000fe32:	d3 e3                	shl    ebx,cl
c000fe34:	01 c6                	add    esi,eax
c000fe36:	d3 e2                	shl    edx,cl
c000fe38:	f7 d2                	not    edx
c000fe3a:	20 16                	and    BYTE PTR [esi],dl
c000fe3c:	03 05 20 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d520
c000fe42:	08 18                	or     BYTE PTR [eax],bl
c000fe44:	5b                   	pop    ebx
c000fe45:	5e                   	pop    esi
c000fe46:	c3                   	ret    

c000fe47 <Phys::getPageState(unsigned long)>:
c000fe47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe4b:	8b 15 20 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d520
c000fe51:	89 c8                	mov    eax,ecx
c000fe53:	83 e1 07             	and    ecx,0x7
c000fe56:	c1 e8 03             	shr    eax,0x3
c000fe59:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe5d:	d3 f8                	sar    eax,cl
c000fe5f:	83 e0 01             	and    eax,0x1
c000fe62:	c3                   	ret    

c000fe63 <Phys::freePage(unsigned long)>:
c000fe63:	53                   	push   ebx
c000fe64:	83 ec 08             	sub    esp,0x8
c000fe67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe6b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe71:	76 57                	jbe    c000feca <Phys::freePage(unsigned long)+0x67>
c000fe73:	c1 eb 0c             	shr    ebx,0xc
c000fe76:	53                   	push   ebx
c000fe77:	e8 cb ff ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000fe7c:	5a                   	pop    edx
c000fe7d:	84 c0                	test   al,al
c000fe7f:	74 5b                	je     c000fedc <Phys::freePage(unsigned long)+0x79>
c000fe81:	a1 50 e6 02 c0       	mov    eax,ds:0xc002e650
c000fe86:	48                   	dec    eax
c000fe87:	a3 50 e6 02 c0       	mov    ds:0xc002e650,eax
c000fe8c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe92:	c1 e0 02             	shl    eax,0x2
c000fe95:	99                   	cdq    
c000fe96:	f7 3d 54 e6 02 c0    	idiv   DWORD PTR ds:0xc002e654
c000fe9c:	39 05 4c e6 02 c0    	cmp    DWORD PTR ds:0xc002e64c,eax
c000fea2:	75 13                	jne    c000feb7 <Phys::freePage(unsigned long)+0x54>
c000fea4:	83 ec 08             	sub    esp,0x8
c000fea7:	6a 00                	push   0x0
c000fea9:	53                   	push   ebx
c000feaa:	e8 66 ff ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	83 c4 08             	add    esp,0x8
c000feb5:	5b                   	pop    ebx
c000feb6:	c3                   	ret    
c000feb7:	83 ec 0c             	sub    esp,0xc
c000feba:	a3 4c e6 02 c0       	mov    ds:0xc002e64c,eax
c000febf:	50                   	push   eax
c000fec0:	e8 77 0a 00 00       	call   c001093c <VgaText::updateRAMUsageDisplay(int)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	eb da                	jmp    c000fea4 <Phys::freePage(unsigned long)+0x41>
c000feca:	68 00 10 00 00       	push   0x1000
c000fecf:	53                   	push   ebx
c000fed0:	e8 f8 fe ff ff       	call   c000fdcd <Phys::freeDMA(unsigned long, unsigned long)>
c000fed5:	59                   	pop    ecx
c000fed6:	5b                   	pop    ebx
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	c3                   	ret    
c000fedc:	c7 44 24 10 26 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a426
c000fee4:	83 c4 08             	add    esp,0x8
c000fee7:	5b                   	pop    ebx
c000fee8:	e9 5a a7 00 00       	jmp    c001a647 <Krnl::panic(char const*)>

c000feed <Phys::allocatePage()>:
c000feed:	56                   	push   esi
c000feee:	53                   	push   ebx
c000feef:	51                   	push   ecx
c000fef0:	8b 35 44 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e644
c000fef6:	89 f3                	mov    ebx,esi
c000fef8:	eb 0a                	jmp    c000ff04 <Phys::allocatePage()+0x17>
c000fefa:	89 1d 44 e6 02 c0    	mov    DWORD PTR ds:0xc002e644,ebx
c000ff00:	39 de                	cmp    esi,ebx
c000ff02:	74 24                	je     c000ff28 <Phys::allocatePage()+0x3b>
c000ff04:	53                   	push   ebx
c000ff05:	e8 3d ff ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000ff0a:	5a                   	pop    edx
c000ff0b:	84 c0                	test   al,al
c000ff0d:	74 77                	je     c000ff86 <Phys::allocatePage()+0x99>
c000ff0f:	43                   	inc    ebx
c000ff10:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff16:	75 e2                	jne    c000fefa <Phys::allocatePage()+0xd>
c000ff18:	31 db                	xor    ebx,ebx
c000ff1a:	c7 05 44 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e644,0x0
c000ff24:	39 de                	cmp    esi,ebx
c000ff26:	75 dc                	jne    c000ff04 <Phys::allocatePage()+0x17>
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff33:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff39:	e8 f8 2c 00 00       	call   c0012c36 <VAS::scanForEviction()>
c000ff3e:	83 c4 10             	add    esp,0x10
c000ff41:	85 c0                	test   eax,eax
c000ff43:	75 76                	jne    c000ffbb <Phys::allocatePage()+0xce>
c000ff45:	83 ec 0c             	sub    esp,0xc
c000ff48:	68 3c a4 02 c0       	push   0xc002a43c
c000ff4d:	e8 b7 2f 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c000ff52:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff59:	e8 cc fd ff ff       	call   c000fd2a <Phys::allocateDMA(unsigned long)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	85 c0                	test   eax,eax
c000ff63:	75 56                	jne    c000ffbb <Phys::allocatePage()+0xce>
c000ff65:	83 ec 0c             	sub    esp,0xc
c000ff68:	68 4d a4 02 c0       	push   0xc002a44d
c000ff6d:	e8 d5 a6 00 00       	call   c001a647 <Krnl::panic(char const*)>
c000ff72:	83 c4 10             	add    esp,0x10
c000ff75:	8b 1d 44 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e644
c000ff7b:	53                   	push   ebx
c000ff7c:	e8 c6 fe ff ff       	call   c000fe47 <Phys::getPageState(unsigned long)>
c000ff81:	5a                   	pop    edx
c000ff82:	84 c0                	test   al,al
c000ff84:	75 89                	jne    c000ff0f <Phys::allocatePage()+0x22>
c000ff86:	6a 01                	push   0x1
c000ff88:	53                   	push   ebx
c000ff89:	e8 87 fe ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c000ff8e:	a1 50 e6 02 c0       	mov    eax,ds:0xc002e650
c000ff93:	59                   	pop    ecx
c000ff94:	40                   	inc    eax
c000ff95:	5b                   	pop    ebx
c000ff96:	a3 50 e6 02 c0       	mov    ds:0xc002e650,eax
c000ff9b:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff9e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffa1:	c1 e0 02             	shl    eax,0x2
c000ffa4:	99                   	cdq    
c000ffa5:	f7 3d 54 e6 02 c0    	idiv   DWORD PTR ds:0xc002e654
c000ffab:	39 05 4c e6 02 c0    	cmp    DWORD PTR ds:0xc002e64c,eax
c000ffb1:	75 0c                	jne    c000ffbf <Phys::allocatePage()+0xd2>
c000ffb3:	a1 44 e6 02 c0       	mov    eax,ds:0xc002e644
c000ffb8:	c1 e0 0c             	shl    eax,0xc
c000ffbb:	5a                   	pop    edx
c000ffbc:	5b                   	pop    ebx
c000ffbd:	5e                   	pop    esi
c000ffbe:	c3                   	ret    
c000ffbf:	83 ec 0c             	sub    esp,0xc
c000ffc2:	a3 4c e6 02 c0       	mov    ds:0xc002e64c,eax
c000ffc7:	50                   	push   eax
c000ffc8:	e8 6f 09 00 00       	call   c001093c <VgaText::updateRAMUsageDisplay(int)>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	eb e1                	jmp    c000ffb3 <Phys::allocatePage()+0xc6>

c000ffd2 <Phys::allocateContiguousPages(int)>:
c000ffd2:	57                   	push   edi
c000ffd3:	56                   	push   esi
c000ffd4:	53                   	push   ebx
c000ffd5:	31 db                	xor    ebx,ebx
c000ffd7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffdb:	e8 42 de 00 00       	call   c001de22 <lockScheduler()>
c000ffe0:	85 db                	test   ebx,ebx
c000ffe2:	75 11                	jne    c000fff5 <Phys::allocateContiguousPages(int)+0x23>
c000ffe4:	e8 04 ff ff ff       	call   c000feed <Phys::allocatePage()>
c000ffe9:	83 ff 01             	cmp    edi,0x1
c000ffec:	89 c6                	mov    esi,eax
c000ffee:	74 21                	je     c0010011 <Phys::allocateContiguousPages(int)+0x3f>
c000fff0:	bb 01 00 00 00       	mov    ebx,0x1
c000fff5:	e8 f3 fe ff ff       	call   c000feed <Phys::allocatePage()>
c000fffa:	89 da                	mov    edx,ebx
c000fffc:	c1 e2 0c             	shl    edx,0xc
c000ffff:	01 f2                	add    edx,esi
c0010001:	39 c2                	cmp    edx,eax
c0010003:	74 17                	je     c001001c <Phys::allocateContiguousPages(int)+0x4a>
c0010005:	bb 01 00 00 00       	mov    ebx,0x1
c001000a:	89 c6                	mov    esi,eax
c001000c:	83 ff 01             	cmp    edi,0x1
c001000f:	75 e4                	jne    c000fff5 <Phys::allocateContiguousPages(int)+0x23>
c0010011:	e8 0e de 00 00       	call   c001de24 <unlockScheduler()>
c0010016:	89 f0                	mov    eax,esi
c0010018:	5b                   	pop    ebx
c0010019:	5e                   	pop    esi
c001001a:	5f                   	pop    edi
c001001b:	c3                   	ret    
c001001c:	43                   	inc    ebx
c001001d:	39 fb                	cmp    ebx,edi
c001001f:	75 bf                	jne    c000ffe0 <Phys::allocateContiguousPages(int)+0xe>
c0010021:	e8 fe dd 00 00       	call   c001de24 <unlockScheduler()>
c0010026:	89 f0                	mov    eax,esi
c0010028:	5b                   	pop    ebx
c0010029:	5e                   	pop    esi
c001002a:	5f                   	pop    edi
c001002b:	c3                   	ret    

c001002c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001002c:	56                   	push   esi
c001002d:	53                   	push   ebx
c001002e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010032:	39 1d 48 e6 02 c0    	cmp    DWORD PTR ds:0xc002e648,ebx
c0010038:	73 06                	jae    c0010040 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001003a:	89 1d 48 e6 02 c0    	mov    DWORD PTR ds:0xc002e648,ebx
c0010040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010044:	c1 eb 0c             	shr    ebx,0xc
c0010047:	c1 e8 0c             	shr    eax,0xc
c001004a:	39 d8                	cmp    eax,ebx
c001004c:	73 13                	jae    c0010061 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001004e:	6a 00                	push   0x0
c0010050:	8d 70 01             	lea    esi,[eax+0x1]
c0010053:	50                   	push   eax
c0010054:	e8 bc fd ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c0010059:	5a                   	pop    edx
c001005a:	89 f0                	mov    eax,esi
c001005c:	59                   	pop    ecx
c001005d:	39 f3                	cmp    ebx,esi
c001005f:	75 ed                	jne    c001004e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010061:	5b                   	pop    ebx
c0010062:	5e                   	pop    esi
c0010063:	c3                   	ret    

c0010064 <Phys::physicalMemorySetup(unsigned int)>:
c0010064:	55                   	push   ebp
c0010065:	57                   	push   edi
c0010066:	56                   	push   esi
c0010067:	53                   	push   ebx
c0010068:	31 db                	xor    ebx,ebx
c001006a:	83 ec 40             	sub    esp,0x40
c001006d:	6a 30                	push   0x30
c001006f:	6a 00                	push   0x0
c0010071:	68 60 e6 02 c0       	push   0xc002e660
c0010076:	e8 05 07 ff ff       	call   c0000780 <memset>
c001007b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001007f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010084:	05 00 10 00 00       	add    eax,0x1000
c0010089:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001008d:	83 c4 10             	add    esp,0x10
c0010090:	83 ec 08             	sub    esp,0x8
c0010093:	6a 01                	push   0x1
c0010095:	53                   	push   ebx
c0010096:	43                   	inc    ebx
c0010097:	e8 79 fd ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100a5:	75 e9                	jne    c0010090 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100a7:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100ae:	66 85 c0             	test   ax,ax
c00100b1:	0f 84 8e 01 00 00    	je     c0010245 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100c7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100d8:	eb 15                	jmp    c00100ef <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100da:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100de:	83 c3 18             	add    ebx,0x18
c00100e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e5:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100e9:	0f 84 66 01 00 00    	je     c0010255 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100f5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010100:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010102:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010105:	01 f0                	add    eax,esi
c0010107:	55                   	push   ebp
c0010108:	11 fa                	adc    edx,edi
c001010a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001010e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010112:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010116:	56                   	push   esi
c0010117:	68 88 a4 02 c0       	push   0xc002a488
c001011c:	e8 e8 2d 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0010121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010125:	83 c4 10             	add    esp,0x10
c0010128:	09 f8                	or     eax,edi
c001012a:	0f 85 25 01 00 00    	jne    c0010255 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010130:	4d                   	dec    ebp
c0010131:	75 a7                	jne    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010133:	ba 00 00 08 00       	mov    edx,0x80000
c0010138:	89 c1                	mov    ecx,eax
c001013a:	39 f2                	cmp    edx,esi
c001013c:	19 f9                	sbb    ecx,edi
c001013e:	0f 82 a7 00 00 00    	jb     c00101eb <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010144:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010148:	89 c1                	mov    ecx,eax
c001014a:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001014e:	0f 83 97 00 00 00    	jae    c00101eb <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010154:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010159:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001015d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010161:	39 fa                	cmp    edx,edi
c0010163:	19 e8                	sbb    eax,ebp
c0010165:	0f 82 14 01 00 00    	jb     c001027f <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001016b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001016f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010173:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010179:	ba ff 1f 00 00       	mov    edx,0x1fff
c001017e:	83 d5 ff             	adc    ebp,0xffffffff
c0010181:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010185:	31 c0                	xor    eax,eax
c0010187:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001018b:	39 fa                	cmp    edx,edi
c001018d:	89 c1                	mov    ecx,eax
c001018f:	19 e9                	sbb    ecx,ebp
c0010191:	0f 83 43 ff ff ff    	jae    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010197:	be 00 00 08 00       	mov    esi,0x80000
c001019c:	50                   	push   eax
c001019d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101a1:	57                   	push   edi
c00101a2:	56                   	push   esi
c00101a3:	68 ac a4 02 c0       	push   0xc002a4ac
c00101a8:	e8 5c 2d 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00101ad:	5a                   	pop    edx
c00101ae:	59                   	pop    ecx
c00101af:	57                   	push   edi
c00101b0:	56                   	push   esi
c00101b1:	e8 76 fe ff ff       	call   c001002c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101be:	83 c4 0c             	add    esp,0xc
c00101c1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101c5:	03 05 54 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e654
c00101cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101d2:	a3 54 e6 02 c0       	mov    ds:0xc002e654,eax
c00101d7:	52                   	push   edx
c00101d8:	50                   	push   eax
c00101d9:	68 69 a4 02 c0       	push   0xc002a469
c00101de:	e8 26 2d 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00101e3:	83 c4 10             	add    esp,0x10
c00101e6:	e9 ef fe ff ff       	jmp    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101eb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101f7:	39 ea                	cmp    edx,ebp
c00101f9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101fd:	0f 82 d7 fe ff ff    	jb     c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010203:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010208:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c001020c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010210:	0f 83 c4 fe ff ff    	jae    c00100da <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010216:	39 ee                	cmp    esi,ebp
c0010218:	89 f8                	mov    eax,edi
c001021a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001021e:	0f 83 78 ff ff ff    	jae    c001019c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010228:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001022c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010234:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010238:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001023c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010240:	e9 57 ff ff ff       	jmp    c001019c <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010245:	83 ec 0c             	sub    esp,0xc
c0010248:	68 5b a4 02 c0       	push   0xc002a45b
c001024d:	e8 f5 a3 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0010252:	83 c4 10             	add    esp,0x10
c0010255:	bb 40 01 00 00       	mov    ebx,0x140
c001025a:	83 ec 08             	sub    esp,0x8
c001025d:	6a 00                	push   0x0
c001025f:	53                   	push   ebx
c0010260:	43                   	inc    ebx
c0010261:	e8 af fb ff ff       	call   c000fe15 <Phys::setPageState(unsigned long, bool)>
c0010266:	ff 05 54 e6 02 c0    	inc    DWORD PTR ds:0xc002e654
c001026c:	83 c4 10             	add    esp,0x10
c001026f:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010275:	75 e3                	jne    c001025a <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010277:	83 c4 3c             	add    esp,0x3c
c001027a:	5b                   	pop    ebx
c001027b:	5e                   	pop    esi
c001027c:	5f                   	pop    edi
c001027d:	5d                   	pop    ebp
c001027e:	c3                   	ret    
c001027f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010287:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001028f:	e9 d7 fe ff ff       	jmp    c001016b <Phys::physicalMemorySetup(unsigned int)+0x107>

c0010294 <Pipe::isAtty()>:
c0010294:	31 c0                	xor    eax,eax
c0010296:	c3                   	ret    
c0010297:	90                   	nop

c0010298 <Pipe::~Pipe()>:
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	ba 18 a5 02 c0       	mov    edx,0xc002a518
c00102a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a4:	89 10                	mov    DWORD PTR [eax],edx
c00102a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	50                   	push   eax
c00102ae:	e8 37 16 00 00       	call   c00118ea <UnixFile::~UnixFile()>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	90                   	nop
c00102b7:	83 c4 0c             	add    esp,0xc
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <Pipe::~Pipe()>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c6:	e8 cd ff ff ff       	call   c0010298 <Pipe::~Pipe()>
c00102cb:	83 c4 10             	add    esp,0x10
c00102ce:	83 ec 08             	sub    esp,0x8
c00102d1:	6a 20                	push   0x20
c00102d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d7:	e8 4d 2b 00 00       	call   c0012e29 <operator delete(void*, unsigned long)>
c00102dc:	83 c4 10             	add    esp,0x10
c00102df:	83 c4 0c             	add    esp,0xc
c00102e2:	c3                   	ret    
c00102e3:	90                   	nop

c00102e4 <Pipe::read(unsigned long long, void*, int*)>:
c00102e4:	55                   	push   ebp
c00102e5:	57                   	push   edi
c00102e6:	56                   	push   esi
c00102e7:	53                   	push   ebx
c00102e8:	83 ec 1c             	sub    esp,0x1c
c00102eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102f7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102fa:	89 c8                	mov    eax,ecx
c00102fc:	99                   	cdq    
c00102fd:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010301:	74 19                	je     c001031c <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010303:	39 f9                	cmp    ecx,edi
c0010305:	89 d1                	mov    ecx,edx
c0010307:	19 f1                	sbb    ecx,esi
c0010309:	73 11                	jae    c001031c <Pipe::read(unsigned long long, void*, int*)+0x38>
c001030b:	e8 12 db 00 00       	call   c001de22 <lockScheduler()>
c0010310:	e8 83 de 00 00       	call   c001e198 <schedule()>
c0010315:	e8 0a db 00 00       	call   c001de24 <unlockScheduler()>
c001031a:	eb db                	jmp    c00102f7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001031c:	39 f8                	cmp    eax,edi
c001031e:	89 d1                	mov    ecx,edx
c0010320:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010324:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010328:	19 f1                	sbb    ecx,esi
c001032a:	73 08                	jae    c0010334 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001032c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010330:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010334:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010337:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001033a:	29 c6                	sub    esi,eax
c001033c:	89 f1                	mov    ecx,esi
c001033e:	c1 f9 1f             	sar    ecx,0x1f
c0010341:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010345:	89 ca                	mov    edx,ecx
c0010347:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001034b:	19 d1                	sbb    ecx,edx
c001034d:	73 04                	jae    c0010353 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001034f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010353:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010357:	89 fd                	mov    ebp,edi
c0010359:	29 f5                	sub    ebp,esi
c001035b:	85 f6                	test   esi,esi
c001035d:	74 12                	je     c0010371 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001035f:	52                   	push   edx
c0010360:	56                   	push   esi
c0010361:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010364:	50                   	push   eax
c0010365:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010369:	e8 de 03 ff ff       	call   c000074c <memcpy>
c001036e:	83 c4 10             	add    esp,0x10
c0010371:	85 ed                	test   ebp,ebp
c0010373:	74 12                	je     c0010387 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010375:	50                   	push   eax
c0010376:	55                   	push   ebp
c0010377:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001037a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001037e:	56                   	push   esi
c001037f:	e8 c8 03 ff ff       	call   c000074c <memcpy>
c0010384:	83 c4 10             	add    esp,0x10
c0010387:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001038a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010390:	99                   	cdq    
c0010391:	89 f7                	mov    edi,esi
c0010393:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010397:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001039b:	c1 ff 1f             	sar    edi,0x1f
c001039e:	57                   	push   edi
c001039f:	56                   	push   esi
c00103a0:	52                   	push   edx
c00103a1:	50                   	push   eax
c00103a2:	e8 8d 68 01 00       	call   c0026c34 <__umoddi3>
c00103a7:	83 c4 10             	add    esp,0x10
c00103aa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ad:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103b2:	75 10                	jne    c00103c4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103b4:	83 ec 0c             	sub    esp,0xc
c00103b7:	68 d5 a4 02 c0       	push   0xc002a4d5
c00103bc:	e8 86 a2 00 00       	call   c001a647 <Krnl::panic(char const*)>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103cc:	89 10                	mov    DWORD PTR [eax],edx
c00103ce:	83 c4 1c             	add    esp,0x1c
c00103d1:	31 c0                	xor    eax,eax
c00103d3:	5b                   	pop    ebx
c00103d4:	5e                   	pop    esi
c00103d5:	5f                   	pop    edi
c00103d6:	5d                   	pop    ebp
c00103d7:	c3                   	ret    

c00103d8 <Pipe::write(unsigned long long, void*, int*)>:
c00103d8:	55                   	push   ebp
c00103d9:	57                   	push   edi
c00103da:	56                   	push   esi
c00103db:	53                   	push   ebx
c00103dc:	83 ec 1c             	sub    esp,0x1c
c00103df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103e7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00103ee:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103f1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f8:	89 de                	mov    esi,ebx
c00103fa:	89 df                	mov    edi,ebx
c00103fc:	c1 ff 1f             	sar    edi,0x1f
c00103ff:	01 c6                	add    esi,eax
c0010401:	89 c8                	mov    eax,ecx
c0010403:	11 d7                	adc    edi,edx
c0010405:	99                   	cdq    
c0010406:	39 f1                	cmp    ecx,esi
c0010408:	89 d0                	mov    eax,edx
c001040a:	19 f8                	sbb    eax,edi
c001040c:	b8 01 00 00 00       	mov    eax,0x1
c0010411:	0f 82 80 00 00 00    	jb     c0010497 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010417:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001041a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001041d:	01 d8                	add    eax,ebx
c001041f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010423:	99                   	cdq    
c0010424:	f7 f9                	idiv   ecx
c0010426:	29 d1                	sub    ecx,edx
c0010428:	89 d7                	mov    edi,edx
c001042a:	89 c8                	mov    eax,ecx
c001042c:	99                   	cdq    
c001042d:	39 ce                	cmp    esi,ecx
c001042f:	19 d3                	sbb    ebx,edx
c0010431:	bb 00 00 00 00       	mov    ebx,0x0
c0010436:	72 04                	jb     c001043c <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010438:	89 f3                	mov    ebx,esi
c001043a:	29 cb                	sub    ebx,ecx
c001043c:	89 f1                	mov    ecx,esi
c001043e:	29 d9                	sub    ecx,ebx
c0010440:	74 1a                	je     c001045c <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010442:	52                   	push   edx
c0010443:	51                   	push   ecx
c0010444:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010448:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001044c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001044f:	57                   	push   edi
c0010450:	e8 f7 02 ff ff       	call   c000074c <memcpy>
c0010455:	83 c4 10             	add    esp,0x10
c0010458:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001045c:	85 db                	test   ebx,ebx
c001045e:	74 12                	je     c0010472 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010460:	50                   	push   eax
c0010461:	53                   	push   ebx
c0010462:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010466:	51                   	push   ecx
c0010467:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001046a:	e8 dd 02 ff ff       	call   c000074c <memcpy>
c001046f:	83 c4 10             	add    esp,0x10
c0010472:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010475:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001047a:	75 10                	jne    c001048c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001047c:	83 ec 0c             	sub    esp,0xc
c001047f:	68 f1 a4 02 c0       	push   0xc002a4f1
c0010484:	e8 be a1 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0010489:	83 c4 10             	add    esp,0x10
c001048c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010490:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010493:	89 38                	mov    DWORD PTR [eax],edi
c0010495:	31 c0                	xor    eax,eax
c0010497:	83 c4 1c             	add    esp,0x1c
c001049a:	5b                   	pop    ebx
c001049b:	5e                   	pop    esi
c001049c:	5f                   	pop    edi
c001049d:	5d                   	pop    ebp
c001049e:	c3                   	ret    
c001049f:	90                   	nop

c00104a0 <Pipe::Pipe(int)>:
c00104a0:	83 ec 0c             	sub    esp,0xc
c00104a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a7:	83 ec 08             	sub    esp,0x8
c00104aa:	6a 00                	push   0x0
c00104ac:	50                   	push   eax
c00104ad:	e8 56 12 00 00       	call   c0011708 <UnixFile::UnixFile(int)>
c00104b2:	83 c4 10             	add    esp,0x10
c00104b5:	ba 18 a5 02 c0       	mov    edx,0xc002a518
c00104ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104be:	89 10                	mov    DWORD PTR [eax],edx
c00104c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104da:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104e5:	83 ec 0c             	sub    esp,0xc
c00104e8:	50                   	push   eax
c00104e9:	e8 5d f3 ff ff       	call   c000f84b <malloc>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	89 c2                	mov    edx,eax
c00104f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fe:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010502:	90                   	nop
c0010503:	83 c4 0c             	add    esp,0xc
c0010506:	c3                   	ret    
c0010507:	90                   	nop

c0010508 <VgaText::isAtty()>:
c0010508:	b0 01                	mov    al,0x1
c001050a:	c3                   	ret    
c001050b:	90                   	nop

c001050c <VgaText::~VgaText()>:
c001050c:	83 ec 0c             	sub    esp,0xc
c001050f:	ba d4 a5 02 c0       	mov    edx,0xc002a5d4
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	89 10                	mov    DWORD PTR [eax],edx
c001051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051e:	83 ec 0c             	sub    esp,0xc
c0010521:	50                   	push   eax
c0010522:	e8 c3 13 00 00       	call   c00118ea <UnixFile::~UnixFile()>
c0010527:	83 c4 10             	add    esp,0x10
c001052a:	90                   	nop
c001052b:	83 c4 0c             	add    esp,0xc
c001052e:	c3                   	ret    
c001052f:	90                   	nop

c0010530 <VgaText::~VgaText()>:
c0010530:	83 ec 0c             	sub    esp,0xc
c0010533:	83 ec 0c             	sub    esp,0xc
c0010536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053a:	e8 cd ff ff ff       	call   c001050c <VgaText::~VgaText()>
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	83 ec 08             	sub    esp,0x8
c0010545:	68 60 12 00 00       	push   0x1260
c001054a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054e:	e8 d6 28 00 00       	call   c0012e29 <operator delete(void*, unsigned long)>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	83 c4 0c             	add    esp,0xc
c0010559:	c3                   	ret    

c001055a <VgaText::read(unsigned long long, void*, int*)>:
c001055a:	83 ec 10             	sub    esp,0x10
c001055d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010561:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010569:	e8 be 5d 00 00       	call   c001632c <readKeyboard(VgaText*, char*, unsigned long)>
c001056e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010572:	89 02                	mov    DWORD PTR [edx],eax
c0010574:	31 c0                	xor    eax,eax
c0010576:	83 c4 1c             	add    esp,0x1c
c0010579:	c3                   	ret    

c001057a <setTerminalScrollLock(bool)>:
c001057a:	c3                   	ret    

c001057b <addToTerminalCycle(VgaText*)>:
c001057b:	8b 15 e0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e0
c0010581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010585:	85 d2                	test   edx,edx
c0010587:	75 0c                	jne    c0010595 <addToTerminalCycle(VgaText*)+0x1a>
c0010589:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001058f:	a3 e0 e6 02 c0       	mov    ds:0xc002e6e0,eax
c0010594:	c3                   	ret    
c0010595:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001059b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105a1:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105a7:	c3                   	ret    

c00105a8 <installVgaTextImplementation()>:
c00105a8:	83 ec 10             	sub    esp,0x10
c00105ab:	6a 20                	push   0x20
c00105ad:	6a 00                	push   0x0
c00105af:	68 c0 e6 02 c0       	push   0xc002e6c0
c00105b4:	e8 c7 01 ff ff       	call   c0000780 <memset>
c00105b9:	83 c4 1c             	add    esp,0x1c
c00105bc:	c3                   	ret    

c00105bd <scrollTerminalScrollLock(int)>:
c00105bd:	c3                   	ret    

c00105be <VgaText::load()>:
c00105be:	53                   	push   ebx
c00105bf:	31 c0                	xor    eax,eax
c00105c1:	83 ec 58             	sub    esp,0x58
c00105c4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105c8:	89 e2                	mov    edx,esp
c00105ca:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105ce:	40                   	inc    eax
c00105cf:	83 f8 50             	cmp    eax,0x50
c00105d2:	75 f6                	jne    c00105ca <VgaText::load()+0xc>
c00105d4:	31 c0                	xor    eax,eax
c00105d6:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105dd:	84 c9                	test   cl,cl
c00105df:	74 06                	je     c00105e7 <VgaText::load()+0x29>
c00105e1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105e4:	40                   	inc    eax
c00105e5:	eb ef                	jmp    c00105d6 <VgaText::load()+0x18>
c00105e7:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105ed:	85 c0                	test   eax,eax
c00105ef:	74 09                	je     c00105fa <VgaText::load()+0x3c>
c00105f1:	51                   	push   ecx
c00105f2:	51                   	push   ecx
c00105f3:	52                   	push   edx
c00105f4:	53                   	push   ebx
c00105f5:	ff d0                	call   eax
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010600:	85 c0                	test   eax,eax
c0010602:	74 09                	je     c001060d <VgaText::load()+0x4f>
c0010604:	83 ec 0c             	sub    esp,0xc
c0010607:	53                   	push   ebx
c0010608:	ff d0                	call   eax
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	83 c4 58             	add    esp,0x58
c0010610:	5b                   	pop    ebx
c0010611:	c3                   	ret    

c0010612 <VgaText::updateCursor()>:
c0010612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010616:	39 05 e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,eax
c001061c:	75 0c                	jne    c001062a <VgaText::updateCursor()+0x18>
c001061e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010624:	85 c0                	test   eax,eax
c0010626:	74 02                	je     c001062a <VgaText::updateCursor()+0x18>
c0010628:	ff e0                	jmp    eax
c001062a:	c3                   	ret    
c001062b:	90                   	nop

c001062c <VgaText::showCursor(bool)>:
c001062c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010630:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010634:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001063a:	c3                   	ret    
c001063b:	90                   	nop

c001063c <VgaText::disableBlink(bool)>:
c001063c:	56                   	push   esi
c001063d:	53                   	push   ebx
c001063e:	51                   	push   ecx
c001063f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010647:	39 1d e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,ebx
c001064d:	75 18                	jne    c0010667 <VgaText::disableBlink(bool)+0x2b>
c001064f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010655:	85 c0                	test   eax,eax
c0010657:	74 0e                	je     c0010667 <VgaText::disableBlink(bool)+0x2b>
c0010659:	89 f1                	mov    ecx,esi
c001065b:	52                   	push   edx
c001065c:	52                   	push   edx
c001065d:	0f b6 d1             	movzx  edx,cl
c0010660:	52                   	push   edx
c0010661:	53                   	push   ebx
c0010662:	ff d0                	call   eax
c0010664:	83 c4 10             	add    esp,0x10
c0010667:	89 f0                	mov    eax,esi
c0010669:	83 f0 01             	xor    eax,0x1
c001066c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010672:	58                   	pop    eax
c0010673:	5b                   	pop    ebx
c0010674:	5e                   	pop    esi
c0010675:	c3                   	ret    

c0010676 <VgaText::doANSI_SGR(int)>:
c0010676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001067a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067e:	85 d2                	test   edx,edx
c0010680:	75 14                	jne    c0010696 <VgaText::doANSI_SGR(int)+0x20>
c0010682:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010688:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001068e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010694:	eb 65                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c0010696:	83 fa 07             	cmp    edx,0x7
c0010699:	75 14                	jne    c00106af <VgaText::doANSI_SGR(int)+0x39>
c001069b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106a1:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106a7:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106ad:	eb 4c                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c00106af:	83 fa 1b             	cmp    edx,0x1b
c00106b2:	74 ce                	je     c0010682 <VgaText::doANSI_SGR(int)+0xc>
c00106b4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106b7:	83 f9 07             	cmp    ecx,0x7
c00106ba:	77 09                	ja     c00106c5 <VgaText::doANSI_SGR(int)+0x4f>
c00106bc:	8b 14 8d 60 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2aa0]
c00106c3:	eb 20                	jmp    c00106e5 <VgaText::doANSI_SGR(int)+0x6f>
c00106c5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106c8:	83 f9 07             	cmp    ecx,0x7
c00106cb:	77 09                	ja     c00106d6 <VgaText::doANSI_SGR(int)+0x60>
c00106cd:	8b 14 8d 60 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2aa0]
c00106d4:	eb 25                	jmp    c00106fb <VgaText::doANSI_SGR(int)+0x85>
c00106d6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106d9:	83 f9 07             	cmp    ecx,0x7
c00106dc:	77 0e                	ja     c00106ec <VgaText::doANSI_SGR(int)+0x76>
c00106de:	8b 14 95 18 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2be8]
c00106e5:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106eb:	c3                   	ret    
c00106ec:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106ef:	83 f9 07             	cmp    ecx,0x7
c00106f2:	77 0d                	ja     c0010701 <VgaText::doANSI_SGR(int)+0x8b>
c00106f4:	8b 14 95 f0 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c10]
c00106fb:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010701:	c3                   	ret    

c0010702 <VgaText::setDefaultBgColour(VgaColour)>:
c0010702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001070a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010710:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010716:	c3                   	ret    
c0010717:	90                   	nop

c0010718 <VgaText::setDefaultFgColour(VgaColour)>:
c0010718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001071c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010720:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010726:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001072c:	c3                   	ret    
c001072d:	90                   	nop

c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001072e:	53                   	push   ebx
c001072f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010733:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010737:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001073b:	51                   	push   ecx
c001073c:	e8 c1 ff ff ff       	call   c0010702 <VgaText::setDefaultBgColour(VgaColour)>
c0010741:	58                   	pop    eax
c0010742:	5a                   	pop    edx
c0010743:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010747:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001074b:	5b                   	pop    ebx
c001074c:	eb ca                	jmp    c0010718 <VgaText::setDefaultFgColour(VgaColour)>

c001074e <VgaText::combineColours(unsigned char, unsigned char)>:
c001074e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010752:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010757:	83 e0 0f             	and    eax,0xf
c001075a:	c1 e2 04             	shl    edx,0x4
c001075d:	09 d0                	or     eax,edx
c001075f:	c3                   	ret    

c0010760 <VgaText::scrollScreen()>:
c0010760:	57                   	push   edi
c0010761:	56                   	push   esi
c0010762:	be 01 00 00 00       	mov    esi,0x1
c0010767:	53                   	push   ebx
c0010768:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001076c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010772:	31 ff                	xor    edi,edi
c0010774:	01 d9                	add    ecx,ebx
c0010776:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010779:	83 fe 17             	cmp    esi,0x17
c001077c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010782:	75 28                	jne    c00107ac <VgaText::scrollScreen()+0x4c>
c0010784:	f7 c7 01 00 00 00    	test   edi,0x1
c001078a:	74 1c                	je     c00107a8 <VgaText::scrollScreen()+0x48>
c001078c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010793:	50                   	push   eax
c0010794:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001079b:	50                   	push   eax
c001079c:	e8 ad ff ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c00107a1:	5a                   	pop    edx
c00107a2:	5a                   	pop    edx
c00107a3:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107a6:	eb 04                	jmp    c00107ac <VgaText::scrollScreen()+0x4c>
c00107a8:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107ac:	47                   	inc    edi
c00107ad:	41                   	inc    ecx
c00107ae:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107b4:	75 c0                	jne    c0010776 <VgaText::scrollScreen()+0x16>
c00107b6:	46                   	inc    esi
c00107b7:	83 fe 18             	cmp    esi,0x18
c00107ba:	75 b0                	jne    c001076c <VgaText::scrollScreen()+0xc>
c00107bc:	39 1d e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,ebx
c00107c2:	75 24                	jne    c00107e8 <VgaText::scrollScreen()+0x88>
c00107c4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107cb:	74 08                	je     c00107d5 <VgaText::scrollScreen()+0x75>
c00107cd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107d3:	eb 13                	jmp    c00107e8 <VgaText::scrollScreen()+0x88>
c00107d5:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107db:	85 c0                	test   eax,eax
c00107dd:	74 09                	je     c00107e8 <VgaText::scrollScreen()+0x88>
c00107df:	83 ec 0c             	sub    esp,0xc
c00107e2:	53                   	push   ebx
c00107e3:	ff d0                	call   eax
c00107e5:	83 c4 10             	add    esp,0x10
c00107e8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107ec:	5b                   	pop    ebx
c00107ed:	5e                   	pop    esi
c00107ee:	5f                   	pop    edi
c00107ef:	e9 1e fe ff ff       	jmp    c0010612 <VgaText::updateCursor()>

c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107f9:	c1 e0 08             	shl    eax,0x8
c00107fc:	89 c2                	mov    edx,eax
c00107fe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010803:	09 d0                	or     eax,edx
c0010805:	c3                   	ret    

c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010806:	53                   	push   ebx
c0010807:	83 ec 08             	sub    esp,0x8
c001080a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001080e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010813:	50                   	push   eax
c0010814:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010819:	50                   	push   eax
c001081a:	e8 2f ff ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c001081f:	5a                   	pop    edx
c0010820:	0f b6 c0             	movzx  eax,al
c0010823:	5b                   	pop    ebx
c0010824:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010829:	50                   	push   eax
c001082a:	53                   	push   ebx
c001082b:	e8 c4 ff ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010830:	5a                   	pop    edx
c0010831:	5a                   	pop    edx
c0010832:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010838:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001083c:	0f b7 d2             	movzx  edx,dx
c001083f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010844:	39 0d e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,ecx
c001084a:	75 14                	jne    c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001084c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010852:	85 c0                	test   eax,eax
c0010854:	74 0a                	je     c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010856:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001085a:	83 c4 08             	add    esp,0x8
c001085d:	5b                   	pop    ebx
c001085e:	ff e0                	jmp    eax
c0010860:	83 c4 08             	add    esp,0x8
c0010863:	5b                   	pop    ebx
c0010864:	c3                   	ret    
c0010865:	90                   	nop

c0010866 <VgaText::getCursorX()>:
c0010866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010870:	c3                   	ret    
c0010871:	90                   	nop

c0010872 <VgaText::getCursorY()>:
c0010872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010876:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001087c:	c3                   	ret    
c001087d:	90                   	nop

c001087e <VgaText::setCursor(int, int)>:
c001087e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010882:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010886:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001088c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010890:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010896:	e9 77 fd ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c001089b:	90                   	nop

c001089c <VgaText::setCursorX(int)>:
c001089c:	83 ec 10             	sub    esp,0x10
c001089f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108a3:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ad:	50                   	push   eax
c00108ae:	e8 cb ff ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00108b3:	83 c4 1c             	add    esp,0x1c
c00108b6:	c3                   	ret    
c00108b7:	90                   	nop

c00108b8 <VgaText::setCursorY(int)>:
c00108b8:	83 ec 10             	sub    esp,0x10
c00108bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108c3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108c9:	50                   	push   eax
c00108ca:	e8 af ff ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00108cf:	83 c4 1c             	add    esp,0x1c
c00108d2:	c3                   	ret    
c00108d3:	90                   	nop

c00108d4 <VgaText::incrementCursor(bool)>:
c00108d4:	56                   	push   esi
c00108d5:	53                   	push   ebx
c00108d6:	51                   	push   ecx
c00108d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108df:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108e5:	40                   	inc    eax
c00108e6:	83 f8 50             	cmp    eax,0x50
c00108e9:	74 08                	je     c00108f3 <VgaText::incrementCursor(bool)+0x1f>
c00108eb:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108f1:	eb 33                	jmp    c0010926 <VgaText::incrementCursor(bool)+0x52>
c00108f3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108f9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010903:	8d 50 01             	lea    edx,[eax+0x1]
c0010906:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001090c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010912:	75 12                	jne    c0010926 <VgaText::incrementCursor(bool)+0x52>
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001091d:	53                   	push   ebx
c001091e:	e8 3d fe ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010923:	83 c4 10             	add    esp,0x10
c0010926:	89 f0                	mov    eax,esi
c0010928:	84 c0                	test   al,al
c001092a:	74 0c                	je     c0010938 <VgaText::incrementCursor(bool)+0x64>
c001092c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010930:	5a                   	pop    edx
c0010931:	5b                   	pop    ebx
c0010932:	5e                   	pop    esi
c0010933:	e9 da fc ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010938:	58                   	pop    eax
c0010939:	5b                   	pop    ebx
c001093a:	5e                   	pop    esi
c001093b:	c3                   	ret    

c001093c <VgaText::updateRAMUsageDisplay(int)>:
c001093c:	56                   	push   esi
c001093d:	8b 35 40 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d540
c0010943:	53                   	push   ebx
c0010944:	bb 0a 00 00 00       	mov    ebx,0xa
c0010949:	6a 0f                	push   0xf
c001094b:	6a 00                	push   0x0
c001094d:	e8 fc fd ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c0010952:	5a                   	pop    edx
c0010953:	59                   	pop    ecx
c0010954:	0f b6 c8             	movzx  ecx,al
c0010957:	51                   	push   ecx
c0010958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095c:	99                   	cdq    
c001095d:	f7 fb                	idiv   ebx
c001095f:	89 d3                	mov    ebx,edx
c0010961:	83 c0 30             	add    eax,0x30
c0010964:	83 c3 30             	add    ebx,0x30
c0010967:	0f be c0             	movsx  eax,al
c001096a:	0f b6 db             	movzx  ebx,bl
c001096d:	50                   	push   eax
c001096e:	e8 81 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010973:	5a                   	pop    edx
c0010974:	5a                   	pop    edx
c0010975:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001097c:	51                   	push   ecx
c001097d:	53                   	push   ebx
c001097e:	e8 71 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010983:	5b                   	pop    ebx
c0010984:	5a                   	pop    edx
c0010985:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001098c:	51                   	push   ecx
c001098d:	6a 25                	push   0x25
c001098f:	e8 60 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010994:	59                   	pop    ecx
c0010995:	5b                   	pop    ebx
c0010996:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001099d:	5b                   	pop    ebx
c001099e:	5e                   	pop    esi
c001099f:	c3                   	ret    

c00109a0 <VgaText::updateDiskUsage()>:
c00109a0:	55                   	push   ebp
c00109a1:	bd 10 27 00 00       	mov    ebp,0x2710
c00109a6:	57                   	push   edi
c00109a7:	8b 3d 40 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d540
c00109ad:	56                   	push   esi
c00109ae:	53                   	push   ebx
c00109af:	6a 0f                	push   0xf
c00109b1:	6a 00                	push   0x0
c00109b3:	e8 96 fd ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c00109b8:	5a                   	pop    edx
c00109b9:	0f b6 d8             	movzx  ebx,al
c00109bc:	59                   	pop    ecx
c00109bd:	8b 35 68 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032968
c00109c3:	53                   	push   ebx
c00109c4:	b9 0a 00 00 00       	mov    ecx,0xa
c00109c9:	89 f0                	mov    eax,esi
c00109cb:	99                   	cdq    
c00109cc:	f7 fd                	idiv   ebp
c00109ce:	99                   	cdq    
c00109cf:	f7 f9                	idiv   ecx
c00109d1:	8d 42 30             	lea    eax,[edx+0x30]
c00109d4:	0f b6 c0             	movzx  eax,al
c00109d7:	50                   	push   eax
c00109d8:	e8 17 fe ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109dd:	5d                   	pop    ebp
c00109de:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109e3:	5a                   	pop    edx
c00109e4:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109e8:	53                   	push   ebx
c00109e9:	89 f0                	mov    eax,esi
c00109eb:	99                   	cdq    
c00109ec:	f7 fd                	idiv   ebp
c00109ee:	99                   	cdq    
c00109ef:	f7 f9                	idiv   ecx
c00109f1:	8d 42 30             	lea    eax,[edx+0x30]
c00109f4:	0f b6 c0             	movzx  eax,al
c00109f7:	50                   	push   eax
c00109f8:	e8 f7 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c00109fd:	5d                   	pop    ebp
c00109fe:	bd 64 00 00 00       	mov    ebp,0x64
c0010a03:	5a                   	pop    edx
c0010a04:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a0b:	53                   	push   ebx
c0010a0c:	89 f0                	mov    eax,esi
c0010a0e:	99                   	cdq    
c0010a0f:	f7 fd                	idiv   ebp
c0010a11:	99                   	cdq    
c0010a12:	f7 f9                	idiv   ecx
c0010a14:	8d 42 30             	lea    eax,[edx+0x30]
c0010a17:	0f b6 c0             	movzx  eax,al
c0010a1a:	50                   	push   eax
c0010a1b:	e8 d4 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a20:	5d                   	pop    ebp
c0010a21:	5a                   	pop    edx
c0010a22:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a29:	53                   	push   ebx
c0010a2a:	89 f0                	mov    eax,esi
c0010a2c:	99                   	cdq    
c0010a2d:	f7 f9                	idiv   ecx
c0010a2f:	89 d6                	mov    esi,edx
c0010a31:	99                   	cdq    
c0010a32:	f7 f9                	idiv   ecx
c0010a34:	8d 42 30             	lea    eax,[edx+0x30]
c0010a37:	0f b6 c0             	movzx  eax,al
c0010a3a:	50                   	push   eax
c0010a3b:	e8 b4 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a40:	5d                   	pop    ebp
c0010a41:	5a                   	pop    edx
c0010a42:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a49:	53                   	push   ebx
c0010a4a:	8d 46 30             	lea    eax,[esi+0x30]
c0010a4d:	0f b6 f0             	movzx  esi,al
c0010a50:	56                   	push   esi
c0010a51:	e8 9e fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a56:	5e                   	pop    esi
c0010a57:	8b 35 64 29 03 c0    	mov    esi,DWORD PTR ds:0xc0032964
c0010a5d:	5d                   	pop    ebp
c0010a5e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a65:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a6a:	53                   	push   ebx
c0010a6b:	89 f0                	mov    eax,esi
c0010a6d:	99                   	cdq    
c0010a6e:	f7 fd                	idiv   ebp
c0010a70:	99                   	cdq    
c0010a71:	f7 f9                	idiv   ecx
c0010a73:	8d 42 30             	lea    eax,[edx+0x30]
c0010a76:	0f b6 c0             	movzx  eax,al
c0010a79:	50                   	push   eax
c0010a7a:	e8 75 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7f:	5a                   	pop    edx
c0010a80:	5d                   	pop    ebp
c0010a81:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a88:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a8d:	53                   	push   ebx
c0010a8e:	89 f0                	mov    eax,esi
c0010a90:	99                   	cdq    
c0010a91:	f7 fd                	idiv   ebp
c0010a93:	99                   	cdq    
c0010a94:	f7 f9                	idiv   ecx
c0010a96:	8d 42 30             	lea    eax,[edx+0x30]
c0010a99:	0f b6 c0             	movzx  eax,al
c0010a9c:	50                   	push   eax
c0010a9d:	e8 52 fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa2:	5a                   	pop    edx
c0010aa3:	5d                   	pop    ebp
c0010aa4:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aab:	bd 64 00 00 00       	mov    ebp,0x64
c0010ab0:	53                   	push   ebx
c0010ab1:	89 f0                	mov    eax,esi
c0010ab3:	99                   	cdq    
c0010ab4:	f7 fd                	idiv   ebp
c0010ab6:	99                   	cdq    
c0010ab7:	f7 f9                	idiv   ecx
c0010ab9:	83 c2 30             	add    edx,0x30
c0010abc:	0f b6 d2             	movzx  edx,dl
c0010abf:	52                   	push   edx
c0010ac0:	e8 2f fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ac5:	5a                   	pop    edx
c0010ac6:	5d                   	pop    ebp
c0010ac7:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ace:	53                   	push   ebx
c0010acf:	89 f0                	mov    eax,esi
c0010ad1:	99                   	cdq    
c0010ad2:	f7 f9                	idiv   ecx
c0010ad4:	89 d6                	mov    esi,edx
c0010ad6:	99                   	cdq    
c0010ad7:	f7 f9                	idiv   ecx
c0010ad9:	8d 42 30             	lea    eax,[edx+0x30]
c0010adc:	0f b6 c0             	movzx  eax,al
c0010adf:	50                   	push   eax
c0010ae0:	e8 0f fd ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae5:	5a                   	pop    edx
c0010ae6:	59                   	pop    ecx
c0010ae7:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010aee:	53                   	push   ebx
c0010aef:	8d 46 30             	lea    eax,[esi+0x30]
c0010af2:	0f b6 f0             	movzx  esi,al
c0010af5:	56                   	push   esi
c0010af6:	e8 f9 fc ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010afb:	5b                   	pop    ebx
c0010afc:	5e                   	pop    esi
c0010afd:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b04:	5b                   	pop    ebx
c0010b05:	5e                   	pop    esi
c0010b06:	5f                   	pop    edi
c0010b07:	5d                   	pop    ebp
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <VgaText::updateTitle()>:
c0010b0a:	53                   	push   ebx
c0010b0b:	31 c0                	xor    eax,eax
c0010b0d:	83 ec 58             	sub    esp,0x58
c0010b10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b14:	89 e1                	mov    ecx,esp
c0010b16:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b1a:	40                   	inc    eax
c0010b1b:	83 f8 50             	cmp    eax,0x50
c0010b1e:	75 f6                	jne    c0010b16 <VgaText::updateTitle()+0xc>
c0010b20:	31 c0                	xor    eax,eax
c0010b22:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b29:	84 db                	test   bl,bl
c0010b2b:	74 06                	je     c0010b33 <VgaText::updateTitle()+0x29>
c0010b2d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b30:	40                   	inc    eax
c0010b31:	eb ef                	jmp    c0010b22 <VgaText::updateTitle()+0x18>
c0010b33:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b39:	85 c0                	test   eax,eax
c0010b3b:	74 09                	je     c0010b46 <VgaText::updateTitle()+0x3c>
c0010b3d:	53                   	push   ebx
c0010b3e:	53                   	push   ebx
c0010b3f:	51                   	push   ecx
c0010b40:	52                   	push   edx
c0010b41:	ff d0                	call   eax
c0010b43:	83 c4 10             	add    esp,0x10
c0010b46:	e8 55 fe ff ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0010b4b:	83 c4 58             	add    esp,0x58
c0010b4e:	5b                   	pop    ebx
c0010b4f:	c3                   	ret    

c0010b50 <VgaText::setTitleTextColour(VgaColour)>:
c0010b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b58:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b5e:	eb aa                	jmp    c0010b0a <VgaText::updateTitle()>

c0010b60 <VgaText::setTitleColour(VgaColour)>:
c0010b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b68:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b6e:	eb 9a                	jmp    c0010b0a <VgaText::updateTitle()>

c0010b70 <VgaText::setTitle(char*)>:
c0010b70:	53                   	push   ebx
c0010b71:	83 ec 10             	sub    esp,0x10
c0010b74:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b7c:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b82:	50                   	push   eax
c0010b83:	e8 b4 fc fe ff       	call   c000083c <strcpy>
c0010b88:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b8c:	83 c4 18             	add    esp,0x18
c0010b8f:	5b                   	pop    ebx
c0010b90:	e9 75 ff ff ff       	jmp    c0010b0a <VgaText::updateTitle()>
c0010b95:	90                   	nop

c0010b96 <VgaText::decrementCursor(bool)>:
c0010b96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b9e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010ba4:	85 c0                	test   eax,eax
c0010ba6:	74 07                	je     c0010baf <VgaText::decrementCursor(bool)+0x19>
c0010ba8:	48                   	dec    eax
c0010ba9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010baf:	84 c9                	test   cl,cl
c0010bb1:	74 09                	je     c0010bbc <VgaText::decrementCursor(bool)+0x26>
c0010bb3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bb7:	e9 56 fa ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010bbc:	c3                   	ret    
c0010bbd:	90                   	nop

c0010bbe <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bbe:	53                   	push   ebx
c0010bbf:	83 ec 08             	sub    esp,0x8
c0010bc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bd2:	3c 07                	cmp    al,0x7
c0010bd4:	75 2a                	jne    c0010c00 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bd6:	a1 98 e7 02 c0       	mov    eax,ds:0xc002e798
c0010bdb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010be3:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010beb:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bf7:	83 c4 08             	add    esp,0x8
c0010bfa:	5b                   	pop    ebx
c0010bfb:	e9 0e 31 00 00       	jmp    c0013d0e <Buzzer::beep(int, int, bool)>
c0010c00:	3c 0d                	cmp    al,0xd
c0010c02:	75 0c                	jne    c0010c10 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c04:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c0e:	eb 3b                	jmp    c0010c4b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c10:	3c 0a                	cmp    al,0xa
c0010c12:	75 40                	jne    c0010c54 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c14:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c1a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c24:	8d 50 01             	lea    edx,[eax+0x1]
c0010c27:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c2d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c33:	75 12                	jne    c0010c47 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c35:	83 ec 0c             	sub    esp,0xc
c0010c38:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c3e:	53                   	push   ebx
c0010c3f:	e8 1c fb ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c4b:	83 c4 08             	add    esp,0x8
c0010c4e:	5b                   	pop    ebx
c0010c4f:	e9 be f9 ff ff       	jmp    c0010612 <VgaText::updateCursor()>
c0010c54:	3c 08                	cmp    al,0x8
c0010c56:	75 31                	jne    c0010c89 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c58:	50                   	push   eax
c0010c59:	50                   	push   eax
c0010c5a:	6a 01                	push   0x1
c0010c5c:	53                   	push   ebx
c0010c5d:	e8 34 ff ff ff       	call   c0010b96 <VgaText::decrementCursor(bool)>
c0010c62:	5a                   	pop    edx
c0010c63:	59                   	pop    ecx
c0010c64:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c6a:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c70:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c76:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c7c:	6a 20                	push   0x20
c0010c7e:	53                   	push   ebx
c0010c7f:	e8 82 fb ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c84:	83 c4 28             	add    esp,0x28
c0010c87:	5b                   	pop    ebx
c0010c88:	c3                   	ret    
c0010c89:	83 ec 08             	sub    esp,0x8
c0010c8c:	0f be c0             	movsx  eax,al
c0010c8f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c95:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c9b:	51                   	push   ecx
c0010c9c:	52                   	push   edx
c0010c9d:	50                   	push   eax
c0010c9e:	53                   	push   ebx
c0010c9f:	e8 62 fb ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ca4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ca8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cb0:	83 c4 28             	add    esp,0x28
c0010cb3:	5b                   	pop    ebx
c0010cb4:	e9 1b fc ff ff       	jmp    c00108d4 <VgaText::incrementCursor(bool)>
c0010cb9:	90                   	nop

c0010cba <VgaText::isShowingCursor()>:
c0010cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cbe:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cc4:	c3                   	ret    
c0010cc5:	90                   	nop

c0010cc6 <VgaText::isBlinkDisabled()>:
c0010cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cca:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cd0:	83 f0 01             	xor    eax,0x1
c0010cd3:	c3                   	ret    

c0010cd4 <VgaText::setCursorHeight(int)>:
c0010cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cdc:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010ce2:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010ce9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ced:	e9 3a f9 ff ff       	jmp    c001062c <VgaText::showCursor(bool)>

c0010cf2 <VgaText::getCursorHeight()>:
c0010cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf6:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cfc:	c3                   	ret    

c0010cfd <setActiveTerminal(VgaText*)>:
c0010cfd:	53                   	push   ebx
c0010cfe:	83 ec 08             	sub    esp,0x8
c0010d01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d05:	85 db                	test   ebx,ebx
c0010d07:	75 11                	jne    c0010d1a <setActiveTerminal(VgaText*)+0x1d>
c0010d09:	c7 44 24 10 2c a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a52c
c0010d11:	83 c4 08             	add    esp,0x8
c0010d14:	5b                   	pop    ebx
c0010d15:	e9 2d 99 00 00       	jmp    c001a647 <Krnl::panic(char const*)>
c0010d1a:	50                   	push   eax
c0010d1b:	50                   	push   eax
c0010d1c:	53                   	push   ebx
c0010d1d:	68 3a a5 02 c0       	push   0xc002a53a
c0010d22:	e8 e2 21 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0010d27:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	85 c0                	test   eax,eax
c0010d31:	74 0c                	je     c0010d3f <setActiveTerminal(VgaText*)+0x42>
c0010d33:	83 ec 0c             	sub    esp,0xc
c0010d36:	50                   	push   eax
c0010d37:	e8 d6 f8 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010d3c:	83 c4 10             	add    esp,0x10
c0010d3f:	89 1d e4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6e4,ebx
c0010d45:	51                   	push   ecx
c0010d46:	51                   	push   ecx
c0010d47:	53                   	push   ebx
c0010d48:	68 52 a5 02 c0       	push   0xc002a552
c0010d4d:	e8 b7 21 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0010d52:	83 c4 0c             	add    esp,0xc
c0010d55:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d5b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d61:	53                   	push   ebx
c0010d62:	e8 17 fb ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c0010d67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6a:	e8 57 ff ff ff       	call   c0010cc6 <VgaText::isBlinkDisabled()>
c0010d6f:	5a                   	pop    edx
c0010d70:	0f b6 c0             	movzx  eax,al
c0010d73:	59                   	pop    ecx
c0010d74:	50                   	push   eax
c0010d75:	53                   	push   ebx
c0010d76:	e8 c1 f8 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c0010d7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7e:	e8 6f ff ff ff       	call   c0010cf2 <VgaText::getCursorHeight()>
c0010d83:	5a                   	pop    edx
c0010d84:	59                   	pop    ecx
c0010d85:	50                   	push   eax
c0010d86:	53                   	push   ebx
c0010d87:	e8 48 ff ff ff       	call   c0010cd4 <VgaText::setCursorHeight(int)>
c0010d8c:	83 c4 10             	add    esp,0x10
c0010d8f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d96:	75 0a                	jne    c0010da2 <setActiveTerminal(VgaText*)+0xa5>
c0010d98:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010da2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010da6:	83 c4 08             	add    esp,0x8
c0010da9:	5b                   	pop    ebx
c0010daa:	e9 0f f8 ff ff       	jmp    c00105be <VgaText::load()>

c0010daf <doTerminalCycle()>:
c0010daf:	83 ec 18             	sub    esp,0x18
c0010db2:	a1 e0 e6 02 c0       	mov    eax,ds:0xc002e6e0
c0010db7:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010dbd:	50                   	push   eax
c0010dbe:	a3 e0 e6 02 c0       	mov    ds:0xc002e6e0,eax
c0010dc3:	e8 35 ff ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c0010dc8:	83 c4 1c             	add    esp,0x1c
c0010dcb:	c3                   	ret    

c0010dcc <VgaText::doUpdate()>:
c0010dcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd0:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dd6:	85 c0                	test   eax,eax
c0010dd8:	74 02                	je     c0010ddc <VgaText::doUpdate()+0x10>
c0010dda:	ff e0                	jmp    eax
c0010ddc:	c3                   	ret    
c0010ddd:	90                   	nop

c0010dde <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dde:	55                   	push   ebp
c0010ddf:	57                   	push   edi
c0010de0:	56                   	push   esi
c0010de1:	53                   	push   ebx
c0010de2:	83 ec 1c             	sub    esp,0x1c
c0010de5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010de9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dee:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010df5:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010df8:	50                   	push   eax
c0010df9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dfe:	50                   	push   eax
c0010dff:	e8 4a f9 ff ff       	call   c001074e <VgaText::combineColours(unsigned char, unsigned char)>
c0010e04:	59                   	pop    ecx
c0010e05:	0f b6 c0             	movzx  eax,al
c0010e08:	5b                   	pop    ebx
c0010e09:	31 c9                	xor    ecx,ecx
c0010e0b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e13:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e17:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e21:	0f b7 db             	movzx  ebx,bx
c0010e24:	01 db                	add    ebx,ebx
c0010e26:	01 fb                	add    ebx,edi
c0010e28:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e2b:	84 c0                	test   al,al
c0010e2d:	0f 84 38 01 00 00    	je     c0010f6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e33:	3c 0d                	cmp    al,0xd
c0010e35:	75 0f                	jne    c0010e46 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e37:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e41:	e9 1f 01 00 00       	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e46:	3c 0a                	cmp    al,0xa
c0010e48:	75 5b                	jne    c0010ea5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e4a:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e50:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e5d:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e63:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e69:	75 12                	jne    c0010e7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e6b:	83 ec 0c             	sub    esp,0xc
c0010e6e:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e74:	55                   	push   ebp
c0010e75:	e8 e6 f8 ff ff       	call   c0010760 <VgaText::scrollScreen()>
c0010e7a:	83 c4 10             	add    esp,0x10
c0010e7d:	83 ec 0c             	sub    esp,0xc
c0010e80:	55                   	push   ebp
c0010e81:	e8 8c f7 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010e86:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e97:	31 c9                	xor    ecx,ecx
c0010e99:	0f b7 db             	movzx  ebx,bx
c0010e9c:	01 db                	add    ebx,ebx
c0010e9e:	01 fb                	add    ebx,edi
c0010ea0:	e9 c0 00 00 00       	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ea5:	3c 08                	cmp    al,0x8
c0010ea7:	75 4e                	jne    c0010ef7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ea9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ead:	53                   	push   ebx
c0010eae:	53                   	push   ebx
c0010eaf:	6a 01                	push   0x1
c0010eb1:	55                   	push   ebp
c0010eb2:	e8 df fc ff ff       	call   c0010b96 <VgaText::decrementCursor(bool)>
c0010eb7:	58                   	pop    eax
c0010eb8:	5a                   	pop    edx
c0010eb9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ebf:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ec5:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ecb:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ed1:	6a 20                	push   0x20
c0010ed3:	55                   	push   ebp
c0010ed4:	e8 2d f9 ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee1:	83 c4 20             	add    esp,0x20
c0010ee4:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010eee:	0f b7 db             	movzx  ebx,bx
c0010ef1:	01 db                	add    ebx,ebx
c0010ef3:	01 fb                	add    ebx,edi
c0010ef5:	eb 6e                	jmp    c0010f65 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ef7:	51                   	push   ecx
c0010ef8:	51                   	push   ecx
c0010ef9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010efd:	50                   	push   eax
c0010efe:	e8 f1 f8 ff ff       	call   c00107f4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f09:	39 2d e4 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6e4,ebp
c0010f0f:	75 2a                	jne    c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f11:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f17:	85 c0                	test   eax,eax
c0010f19:	74 20                	je     c0010f3b <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f1b:	52                   	push   edx
c0010f1c:	52                   	push   edx
c0010f1d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f23:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f2d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f31:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f34:	51                   	push   ecx
c0010f35:	55                   	push   ebp
c0010f36:	ff d0                	call   eax
c0010f38:	83 c4 20             	add    esp,0x20
c0010f3b:	83 c3 02             	add    ebx,0x2
c0010f3e:	50                   	push   eax
c0010f3f:	50                   	push   eax
c0010f40:	6a 00                	push   0x0
c0010f42:	55                   	push   ebp
c0010f43:	e8 8c f9 ff ff       	call   c00108d4 <VgaText::incrementCursor(bool)>
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f52:	75 0f                	jne    c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f54:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f5c:	0f b7 db             	movzx  ebx,bx
c0010f5f:	01 db                	add    ebx,ebx
c0010f61:	01 fb                	add    ebx,edi
c0010f63:	b1 01                	mov    cl,0x1
c0010f65:	46                   	inc    esi
c0010f66:	e9 bd fe ff ff       	jmp    c0010e28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f6b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f6f:	83 ec 0c             	sub    esp,0xc
c0010f72:	55                   	push   ebp
c0010f73:	e8 9a f6 ff ff       	call   c0010612 <VgaText::updateCursor()>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f7f:	84 c9                	test   cl,cl
c0010f81:	74 0c                	je     c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f83:	83 ec 0c             	sub    esp,0xc
c0010f86:	55                   	push   ebp
c0010f87:	e8 40 fe ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010f8c:	83 c4 10             	add    esp,0x10
c0010f8f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f96:	83 c4 1c             	add    esp,0x1c
c0010f99:	5b                   	pop    ebx
c0010f9a:	5e                   	pop    esi
c0010f9b:	5f                   	pop    edi
c0010f9c:	5d                   	pop    ebp
c0010f9d:	c3                   	ret    

c0010f9e <VgaText::clearScreen()>:
c0010f9e:	57                   	push   edi
c0010f9f:	56                   	push   esi
c0010fa0:	31 f6                	xor    esi,esi
c0010fa2:	53                   	push   ebx
c0010fa3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fa7:	52                   	push   edx
c0010fa8:	6a 00                	push   0x0
c0010faa:	6a 00                	push   0x0
c0010fac:	53                   	push   ebx
c0010fad:	e8 cc f8 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c0010fb2:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fc2:	7e 26                	jle    c0010fea <VgaText::clearScreen()+0x4c>
c0010fc4:	31 ff                	xor    edi,edi
c0010fc6:	50                   	push   eax
c0010fc7:	50                   	push   eax
c0010fc8:	56                   	push   esi
c0010fc9:	57                   	push   edi
c0010fca:	47                   	inc    edi
c0010fcb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fd1:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fd7:	6a 20                	push   0x20
c0010fd9:	53                   	push   ebx
c0010fda:	e8 27 f8 ff ff       	call   c0010806 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fdf:	83 c4 20             	add    esp,0x20
c0010fe2:	83 ff 50             	cmp    edi,0x50
c0010fe5:	75 df                	jne    c0010fc6 <VgaText::clearScreen()+0x28>
c0010fe7:	46                   	inc    esi
c0010fe8:	eb d2                	jmp    c0010fbc <VgaText::clearScreen()+0x1e>
c0010fea:	83 ec 0c             	sub    esp,0xc
c0010fed:	53                   	push   ebx
c0010fee:	e8 d9 fd ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0010ff3:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010ffa:	83 c4 10             	add    esp,0x10
c0010ffd:	5b                   	pop    ebx
c0010ffe:	5e                   	pop    esi
c0010fff:	5f                   	pop    edi
c0011000:	c3                   	ret    
c0011001:	90                   	nop

c0011002 <VgaText::putchar(char)>:
c0011002:	56                   	push   esi
c0011003:	53                   	push   ebx
c0011004:	83 ec 14             	sub    esp,0x14
c0011007:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001100b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001100f:	3c 5b                	cmp    al,0x5b
c0011011:	75 21                	jne    c0011034 <VgaText::putchar(char)+0x32>
c0011013:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001101a:	74 28                	je     c0011044 <VgaText::putchar(char)+0x42>
c001101c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011025:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001102f:	e9 e2 00 00 00       	jmp    c0011116 <VgaText::putchar(char)+0x114>
c0011034:	3c 1b                	cmp    al,0x1b
c0011036:	75 0c                	jne    c0011044 <VgaText::putchar(char)+0x42>
c0011038:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001103f:	e9 d2 00 00 00       	jmp    c0011116 <VgaText::putchar(char)+0x114>
c0011044:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001104a:	84 c9                	test   cl,cl
c001104c:	0f 84 ab 00 00 00    	je     c00110fd <VgaText::putchar(char)+0xfb>
c0011052:	8d 50 c0             	lea    edx,[eax-0x40]
c0011055:	80 fa 3e             	cmp    dl,0x3e
c0011058:	0f 87 82 00 00 00    	ja     c00110e0 <VgaText::putchar(char)+0xde>
c001105e:	3c 6d                	cmp    al,0x6d
c0011060:	75 4d                	jne    c00110af <VgaText::putchar(char)+0xad>
c0011062:	31 f6                	xor    esi,esi
c0011064:	31 d2                	xor    edx,edx
c0011066:	31 c0                	xor    eax,eax
c0011068:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001106e:	7e 30                	jle    c00110a0 <VgaText::putchar(char)+0x9e>
c0011070:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011078:	80 fa 3b             	cmp    dl,0x3b
c001107b:	75 17                	jne    c0011094 <VgaText::putchar(char)+0x92>
c001107d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011081:	50                   	push   eax
c0011082:	53                   	push   ebx
c0011083:	e8 ee f5 ff ff       	call   c0010676 <VgaText::doANSI_SGR(int)>
c0011088:	59                   	pop    ecx
c0011089:	31 d2                	xor    edx,edx
c001108b:	58                   	pop    eax
c001108c:	31 c0                	xor    eax,eax
c001108e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011092:	eb 09                	jmp    c001109d <VgaText::putchar(char)+0x9b>
c0011094:	6b c0 0a             	imul   eax,eax,0xa
c0011097:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001109b:	88 ca                	mov    dl,cl
c001109d:	46                   	inc    esi
c001109e:	eb c8                	jmp    c0011068 <VgaText::putchar(char)+0x66>
c00110a0:	84 d2                	test   dl,dl
c00110a2:	74 31                	je     c00110d5 <VgaText::putchar(char)+0xd3>
c00110a4:	50                   	push   eax
c00110a5:	53                   	push   ebx
c00110a6:	e8 cb f5 ff ff       	call   c0010676 <VgaText::doANSI_SGR(int)>
c00110ab:	58                   	pop    eax
c00110ac:	5a                   	pop    edx
c00110ad:	eb 26                	jmp    c00110d5 <VgaText::putchar(char)+0xd3>
c00110af:	3c 4a                	cmp    al,0x4a
c00110b1:	75 22                	jne    c00110d5 <VgaText::putchar(char)+0xd3>
c00110b3:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ba:	75 19                	jne    c00110d5 <VgaText::putchar(char)+0xd3>
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	53                   	push   ebx
c00110c0:	e8 d9 fe ff ff       	call   c0010f9e <VgaText::clearScreen()>
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	6a 00                	push   0x0
c00110ca:	6a 00                	push   0x0
c00110cc:	53                   	push   ebx
c00110cd:	e8 ac f7 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110de:	eb 36                	jmp    c0011116 <VgaText::putchar(char)+0x114>
c00110e0:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110e6:	83 fa 0e             	cmp    edx,0xe
c00110e9:	7f 2b                	jg     c0011116 <VgaText::putchar(char)+0x114>
c00110eb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110ee:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110f4:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110fb:	eb 19                	jmp    c0011116 <VgaText::putchar(char)+0x114>
c00110fd:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011103:	0f be c0             	movsx  eax,al
c0011106:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001110c:	50                   	push   eax
c001110d:	53                   	push   ebx
c001110e:	e8 ab fa ff ff       	call   c0010bbe <VgaText::putchar(char, VgaColour, VgaColour)>
c0011113:	83 c4 10             	add    esp,0x10
c0011116:	83 c4 14             	add    esp,0x14
c0011119:	5b                   	pop    ebx
c001111a:	5e                   	pop    esi
c001111b:	c3                   	ret    

c001111c <VgaText::puts(char const*)>:
c001111c:	53                   	push   ebx
c001111d:	83 ec 08             	sub    esp,0x8
c0011120:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011124:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011127:	84 c0                	test   al,al
c0011129:	74 12                	je     c001113d <VgaText::puts(char const*)+0x21>
c001112b:	43                   	inc    ebx
c001112c:	51                   	push   ecx
c001112d:	51                   	push   ecx
c001112e:	50                   	push   eax
c001112f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011133:	e8 ca fe ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	eb e7                	jmp    c0011124 <VgaText::puts(char const*)+0x8>
c001113d:	83 c4 08             	add    esp,0x8
c0011140:	5b                   	pop    ebx
c0011141:	c3                   	ret    

c0011142 <VgaText::putx(unsigned int)>:
c0011142:	57                   	push   edi
c0011143:	b9 11 00 00 00       	mov    ecx,0x11
c0011148:	56                   	push   esi
c0011149:	be 6e a5 02 c0       	mov    esi,0xc002a56e
c001114e:	53                   	push   ebx
c001114f:	83 ec 20             	sub    esp,0x20
c0011152:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011156:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001115a:	fc                   	cld    
c001115b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001115d:	be 08 00 00 00       	mov    esi,0x8
c0011162:	50                   	push   eax
c0011163:	50                   	push   eax
c0011164:	89 d8                	mov    eax,ebx
c0011166:	c1 e3 04             	shl    ebx,0x4
c0011169:	c1 e8 1c             	shr    eax,0x1c
c001116c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011171:	50                   	push   eax
c0011172:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011176:	e8 87 fe ff ff       	call   c0011002 <VgaText::putchar(char)>
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	4e                   	dec    esi
c001117f:	75 e1                	jne    c0011162 <VgaText::putx(unsigned int)+0x20>
c0011181:	83 c4 20             	add    esp,0x20
c0011184:	5b                   	pop    ebx
c0011185:	5e                   	pop    esi
c0011186:	5f                   	pop    edi
c0011187:	c3                   	ret    

c0011188 <VgaText::VgaText(char const*)>:
c0011188:	57                   	push   edi
c0011189:	56                   	push   esi
c001118a:	53                   	push   ebx
c001118b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118f:	83 ec 08             	sub    esp,0x8
c0011192:	6a 00                	push   0x0
c0011194:	50                   	push   eax
c0011195:	e8 6e 05 00 00       	call   c0011708 <UnixFile::UnixFile(int)>
c001119a:	83 c4 10             	add    esp,0x10
c001119d:	ba d4 a5 02 c0       	mov    edx,0xc002a5d4
c00111a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a6:	89 10                	mov    DWORD PTR [eax],edx
c00111a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ac:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ba:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c8:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d3:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111de:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ec:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fa:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011205:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001120c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011210:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011216:	bb c0 e6 02 c0       	mov    ebx,0xc002e6c0
c001121b:	b8 08 00 00 00       	mov    eax,0x8
c0011220:	fc                   	cld    
c0011221:	89 d7                	mov    edi,edx
c0011223:	89 de                	mov    esi,ebx
c0011225:	89 c1                	mov    ecx,eax
c0011227:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122d:	05 1e 10 00 00       	add    eax,0x101e
c0011232:	83 ec 08             	sub    esp,0x8
c0011235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011239:	50                   	push   eax
c001123a:	e8 fd f5 fe ff       	call   c000083c <strcpy>
c001123f:	83 c4 10             	add    esp,0x10
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011254:	83 c0 0c             	add    eax,0xc
c0011257:	83 ec 04             	sub    esp,0x4
c001125a:	68 00 0f 00 00       	push   0xf00
c001125f:	6a 00                	push   0x0
c0011261:	50                   	push   eax
c0011262:	e8 19 f5 fe ff       	call   c0000780 <memset>
c0011267:	83 c4 10             	add    esp,0x10
c001126a:	83 ec 04             	sub    esp,0x4
c001126d:	6a 00                	push   0x0
c001126f:	6a 07                	push   0x7
c0011271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011275:	e8 b4 f4 ff ff       	call   c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	83 ec 08             	sub    esp,0x8
c0011280:	6a 02                	push   0x2
c0011282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011286:	e8 49 fa ff ff       	call   c0010cd4 <VgaText::setCursorHeight(int)>
c001128b:	83 c4 10             	add    esp,0x10
c001128e:	83 ec 04             	sub    esp,0x4
c0011291:	6a 00                	push   0x0
c0011293:	6a 00                	push   0x0
c0011295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011299:	e8 e0 f5 ff ff       	call   c001087e <VgaText::setCursor(int, int)>
c001129e:	83 c4 10             	add    esp,0x10
c00112a1:	83 ec 08             	sub    esp,0x8
c00112a4:	6a 01                	push   0x1
c00112a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112aa:	e8 7d f3 ff ff       	call   c001062c <VgaText::showCursor(bool)>
c00112af:	83 c4 10             	add    esp,0x10
c00112b2:	83 ec 08             	sub    esp,0x8
c00112b5:	6a 01                	push   0x1
c00112b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112bb:	e8 7c f3 ff ff       	call   c001063c <VgaText::disableBlink(bool)>
c00112c0:	83 c4 10             	add    esp,0x10
c00112c3:	83 ec 0c             	sub    esp,0xc
c00112c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ca:	e8 cf fc ff ff       	call   c0010f9e <VgaText::clearScreen()>
c00112cf:	83 c4 10             	add    esp,0x10
c00112d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d6:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e1:	05 9e 10 00 00       	add    eax,0x109e
c00112e6:	83 ec 04             	sub    esp,0x4
c00112e9:	68 96 00 00 00       	push   0x96
c00112ee:	6a 00                	push   0x0
c00112f0:	50                   	push   eax
c00112f1:	e8 8a f4 fe ff       	call   c0000780 <memset>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112fd:	05 34 11 00 00       	add    eax,0x1134
c0011302:	83 ec 04             	sub    esp,0x4
c0011305:	68 2c 01 00 00       	push   0x12c
c001130a:	6a 00                	push   0x0
c001130c:	50                   	push   eax
c001130d:	e8 6e f4 fe ff       	call   c0000780 <memset>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	90                   	nop
c0011316:	5b                   	pop    ebx
c0011317:	5e                   	pop    esi
c0011318:	5f                   	pop    edi
c0011319:	c3                   	ret    

c001131a <VgaText::receiveKey(unsigned char)>:
c001131a:	55                   	push   ebp
c001131b:	57                   	push   edi
c001131c:	56                   	push   esi
c001131d:	53                   	push   ebx
c001131e:	83 ec 1c             	sub    esp,0x1c
c0011321:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011325:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011329:	84 db                	test   bl,bl
c001132b:	0f 84 c9 00 00 00    	je     c00113fa <VgaText::receiveKey(unsigned char)+0xe0>
c0011331:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011337:	80 fb 08             	cmp    bl,0x8
c001133a:	75 2c                	jne    c0011368 <VgaText::receiveKey(unsigned char)+0x4e>
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	57                   	push   edi
c0011340:	e8 57 f4 fe ff       	call   c000079c <strlen>
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	85 c0                	test   eax,eax
c001134a:	74 41                	je     c001138d <VgaText::receiveKey(unsigned char)+0x73>
c001134c:	50                   	push   eax
c001134d:	50                   	push   eax
c001134e:	6a 08                	push   0x8
c0011350:	56                   	push   esi
c0011351:	e8 ac fc ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011356:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011359:	e8 3e f4 fe ff       	call   c000079c <strlen>
c001135e:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011366:	eb 22                	jmp    c001138a <VgaText::receiveKey(unsigned char)+0x70>
c0011368:	0f be c3             	movsx  eax,bl
c001136b:	52                   	push   edx
c001136c:	52                   	push   edx
c001136d:	50                   	push   eax
c001136e:	56                   	push   esi
c001136f:	e8 8e fc ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011374:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011378:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001137d:	59                   	pop    ecx
c001137e:	5d                   	pop    ebp
c001137f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011383:	50                   	push   eax
c0011384:	57                   	push   edi
c0011385:	e8 f2 f5 fe ff       	call   c000097c <strcat>
c001138a:	83 c4 10             	add    esp,0x10
c001138d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011394:	75 05                	jne    c001139b <VgaText::receiveKey(unsigned char)+0x81>
c0011396:	80 fb 0a             	cmp    bl,0xa
c0011399:	75 53                	jne    c00113ee <VgaText::receiveKey(unsigned char)+0xd4>
c001139b:	83 ec 0c             	sub    esp,0xc
c001139e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113a4:	53                   	push   ebx
c00113a5:	e8 f2 f3 fe ff       	call   c000079c <strlen>
c00113aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113ad:	89 c5                	mov    ebp,eax
c00113af:	e8 e8 f3 fe ff       	call   c000079c <strlen>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113bb:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113c0:	76 10                	jbe    c00113d2 <VgaText::receiveKey(unsigned char)+0xb8>
c00113c2:	83 ec 0c             	sub    esp,0xc
c00113c5:	68 7f a5 02 c0       	push   0xc002a57f
c00113ca:	e8 78 92 00 00       	call   c001a647 <Krnl::panic(char const*)>
c00113cf:	83 c4 10             	add    esp,0x10
c00113d2:	50                   	push   eax
c00113d3:	50                   	push   eax
c00113d4:	57                   	push   edi
c00113d5:	53                   	push   ebx
c00113d6:	e8 a1 f5 fe ff       	call   c000097c <strcat>
c00113db:	83 c4 0c             	add    esp,0xc
c00113de:	68 96 00 00 00       	push   0x96
c00113e3:	6a 00                	push   0x0
c00113e5:	57                   	push   edi
c00113e6:	e8 95 f3 fe ff       	call   c0000780 <memset>
c00113eb:	83 c4 10             	add    esp,0x10
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	56                   	push   esi
c00113f2:	e8 d5 f9 ff ff       	call   c0010dcc <VgaText::doUpdate()>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	83 c4 1c             	add    esp,0x1c
c00113fd:	5b                   	pop    ebx
c00113fe:	5e                   	pop    esi
c00113ff:	5f                   	pop    edi
c0011400:	5d                   	pop    ebp
c0011401:	c3                   	ret    

c0011402 <VgaText::write(unsigned long long, void*, int*)>:
c0011402:	55                   	push   ebp
c0011403:	57                   	push   edi
c0011404:	56                   	push   esi
c0011405:	53                   	push   ebx
c0011406:	83 ec 0c             	sub    esp,0xc
c0011409:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001140d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011411:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011415:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001141c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001141f:	39 eb                	cmp    ebx,ebp
c0011421:	74 13                	je     c0011436 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011423:	43                   	inc    ebx
c0011424:	50                   	push   eax
c0011425:	50                   	push   eax
c0011426:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001142a:	50                   	push   eax
c001142b:	56                   	push   esi
c001142c:	e8 d1 fb ff ff       	call   c0011002 <VgaText::putchar(char)>
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	eb e9                	jmp    c001141f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011436:	83 ec 0c             	sub    esp,0xc
c0011439:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011440:	56                   	push   esi
c0011441:	e8 86 f9 ff ff       	call   c0010dcc <VgaText::doUpdate()>
c0011446:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001144a:	89 38                	mov    DWORD PTR [eax],edi
c001144c:	83 c4 1c             	add    esp,0x1c
c001144f:	31 c0                	xor    eax,eax
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	5f                   	pop    edi
c0011454:	5d                   	pop    ebp
c0011455:	c3                   	ret    

c0011456 <newTerminal(char*)>:
c0011456:	83 ec 28             	sub    esp,0x28
c0011459:	68 60 12 00 00       	push   0x1260
c001145e:	e8 e8 e3 ff ff       	call   c000f84b <malloc>
c0011463:	5a                   	pop    edx
c0011464:	59                   	pop    ecx
c0011465:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011469:	50                   	push   eax
c001146a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001146e:	e8 15 fd ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c0011473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011477:	83 c4 2c             	add    esp,0x2c
c001147a:	c3                   	ret    
c001147b:	90                   	nop

c001147c <TSS::TSS()>:
c001147c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011487:	90                   	nop
c0011488:	c3                   	ret    
c0011489:	90                   	nop

c001148a <TSS::setESP(unsigned long)>:
c001148a:	55                   	push   ebp
c001148b:	89 e5                	mov    ebp,esp
c001148d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011496:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011499:	90                   	nop
c001149a:	5d                   	pop    ebp
c001149b:	c3                   	ret    

c001149c <TSS::flush()>:
c001149c:	55                   	push   ebp
c001149d:	89 e5                	mov    ebp,esp
c001149f:	83 ec 10             	sub    esp,0x10
c00114a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00114a7:	83 c8 03             	or     eax,0x3
c00114aa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114ae:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114b2:	66 89 d0             	mov    ax,dx
c00114b5:	0f 00 d8             	ltr    ax
c00114b8:	90                   	nop
c00114b9:	c9                   	leave  
c00114ba:	c3                   	ret    
c00114bb:	90                   	nop

c00114bc <TSS::setup(unsigned long, unsigned long)>:
c00114bc:	55                   	push   ebp
c00114bd:	89 e5                	mov    ebp,esp
c00114bf:	83 ec 18             	sub    esp,0x18
c00114c2:	83 ec 0c             	sub    esp,0xc
c00114c5:	6a 68                	push   0x68
c00114c7:	e8 7f e3 ff ff       	call   c000f84b <malloc>
c00114cc:	83 c4 10             	add    esp,0x10
c00114cf:	89 c2                	mov    edx,eax
c00114d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114dd:	83 ec 04             	sub    esp,0x4
c00114e0:	6a 68                	push   0x68
c00114e2:	6a 00                	push   0x0
c00114e4:	50                   	push   eax
c00114e5:	e8 96 f2 fe ff       	call   c0000780 <memset>
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ff:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001150e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011517:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011523:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011562:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001156e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011577:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001157e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011581:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011584:	0f 20 da             	mov    edx,cr3
c0011587:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001158a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001158d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011593:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011596:	83 ec 08             	sub    esp,0x8
c0011599:	50                   	push   eax
c001159a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001159d:	50                   	push   eax
c001159e:	e8 83 da ff ff       	call   c000f026 <GDTEntry::setBase(unsigned int)>
c00115a3:	83 c4 10             	add    esp,0x10
c00115a6:	83 ec 08             	sub    esp,0x8
c00115a9:	6a 68                	push   0x68
c00115ab:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115ae:	50                   	push   eax
c00115af:	e8 8e da ff ff       	call   c000f042 <GDTEntry::setLimit(unsigned int)>
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115bb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115be:	83 e0 0f             	and    eax,0xf
c00115c1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115c4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115c7:	83 c8 40             	or     eax,0x40
c00115ca:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115cd:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00115d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d8:	05 78 01 00 00       	add    eax,0x178
c00115dd:	83 ec 04             	sub    esp,0x4
c00115e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115e3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115e6:	50                   	push   eax
c00115e7:	e8 8a da ff ff       	call   c000f076 <GDT::addEntry(GDTEntry)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	89 c2                	mov    edx,eax
c00115f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f4:	89 10                	mov    DWORD PTR [eax],edx
c00115f6:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00115fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011601:	05 78 01 00 00       	add    eax,0x178
c0011606:	83 ec 0c             	sub    esp,0xc
c0011609:	50                   	push   eax
c001160a:	e8 ab da ff ff       	call   c000f0ba <GDT::flush()>
c001160f:	83 c4 10             	add    esp,0x10
c0011612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011615:	8b 00                	mov    eax,DWORD PTR [eax]
c0011617:	83 ec 08             	sub    esp,0x8
c001161a:	50                   	push   eax
c001161b:	68 e8 a5 02 c0       	push   0xc002a5e8
c0011620:	e8 e4 18 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162b:	8b 00                	mov    eax,DWORD PTR [eax]
c001162d:	c9                   	leave  
c001162e:	c3                   	ret    
c001162f:	90                   	nop

c0011630 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011634:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001163b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011640:	75 08                	jne    c001164a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011642:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011648:	eb 38                	jmp    c0011682 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001164a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001164f:	75 17                	jne    c0011668 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011656:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011659:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001165f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011661:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011665:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011668:	89 c1                	mov    ecx,eax
c001166a:	83 e1 fd             	and    ecx,0xfffffffd
c001166d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011673:	74 cd                	je     c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011675:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001167a:	83 e0 ef             	and    eax,0xffffffef
c001167d:	83 f8 08             	cmp    eax,0x8
c0011680:	76 c0                	jbe    c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011682:	31 c0                	xor    eax,eax
c0011684:	c3                   	ret    
c0011685:	90                   	nop

c0011686 <ReservedFilename::isAtty()>:
c0011686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001168d:	31 c0                	xor    eax,eax
c001168f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011695:	74 09                	je     c00116a0 <ReservedFilename::isAtty()+0x1a>
c0011697:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001169d:	0f 94 c0             	sete   al
c00116a0:	c3                   	ret    
c00116a1:	90                   	nop

c00116a2 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116b1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116b6:	75 08                	jne    c00116c0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116b8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116be:	eb 3d                	jmp    c00116fd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116c0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116c5:	75 17                	jne    c00116de <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116cf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00116d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116db:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116de:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116e3:	75 04                	jne    c00116e9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116e5:	89 0a                	mov    DWORD PTR [edx],ecx
c00116e7:	eb 14                	jmp    c00116fd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116e9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116ee:	74 c8                	je     c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116f0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116f5:	83 e0 ef             	and    eax,0xffffffef
c00116f8:	83 f8 08             	cmp    eax,0x8
c00116fb:	76 bb                	jbe    c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116fd:	31 c0                	xor    eax,eax
c00116ff:	c3                   	ret    

c0011700 <UnixFile::getFileDescriptor()>:
c0011700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011707:	c3                   	ret    

c0011708 <UnixFile::UnixFile(int)>:
c0011708:	53                   	push   ebx
c0011709:	83 ec 28             	sub    esp,0x28
c001170c:	ba d4 a6 02 c0       	mov    edx,0xc002a6d4
c0011711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011715:	89 10                	mov    DWORD PTR [eax],edx
c0011717:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001171f:	0f 8f 8c 01 00 00    	jg     c00118b1 <UnixFile::UnixFile(int)+0x1a9>
c0011725:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c001172a:	8d 50 01             	lea    edx,[eax+0x1]
c001172d:	89 15 a0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a0,edx
c0011733:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011737:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001173a:	83 ec 08             	sub    esp,0x8
c001173d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011741:	68 78 e7 02 c0       	push   0xc002e778
c0011746:	e8 65 71 01 00       	call   c00288b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	a0 74 e7 02 c0       	mov    al,ds:0xc002e774
c0011753:	83 f0 01             	xor    eax,0x1
c0011756:	84 c0                	test   al,al
c0011758:	0f 84 54 01 00 00    	je     c00118b2 <UnixFile::UnixFile(int)+0x1aa>
c001175e:	c6 05 74 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e774,0x1
c0011765:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001176d:	83 ec 0c             	sub    esp,0xc
c0011770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011774:	e8 d2 e0 ff ff       	call   c000f84b <malloc>
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	89 c3                	mov    ebx,eax
c001177e:	83 ec 08             	sub    esp,0x8
c0011781:	68 03 ff ff 0f       	push   0xfffff03
c0011786:	53                   	push   ebx
c0011787:	e8 2c 01 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001178c:	83 c4 10             	add    esp,0x10
c001178f:	89 1d 6c e7 02 c0    	mov    DWORD PTR ds:0xc002e76c,ebx
c0011795:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001179d:	83 ec 0c             	sub    esp,0xc
c00117a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117a4:	e8 a2 e0 ff ff       	call   c000f84b <malloc>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	89 c3                	mov    ebx,eax
c00117ae:	83 ec 08             	sub    esp,0x8
c00117b1:	68 01 ff ff 0f       	push   0xfffff01
c00117b6:	53                   	push   ebx
c00117b7:	e8 fc 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	89 1d 70 e7 02 c0    	mov    DWORD PTR ds:0xc002e770,ebx
c00117c5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117cd:	83 ec 0c             	sub    esp,0xc
c00117d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117d4:	e8 72 e0 ff ff       	call   c000f84b <malloc>
c00117d9:	83 c4 10             	add    esp,0x10
c00117dc:	89 c3                	mov    ebx,eax
c00117de:	83 ec 08             	sub    esp,0x8
c00117e1:	68 00 ff ff 0f       	push   0xfffff00
c00117e6:	53                   	push   ebx
c00117e7:	e8 cc 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c00117ec:	83 c4 10             	add    esp,0x10
c00117ef:	89 1d 64 e7 02 c0    	mov    DWORD PTR ds:0xc002e764,ebx
c00117f5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117fd:	83 ec 0c             	sub    esp,0xc
c0011800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011804:	e8 42 e0 ff ff       	call   c000f84b <malloc>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	89 c3                	mov    ebx,eax
c001180e:	83 ec 08             	sub    esp,0x8
c0011811:	68 02 ff ff 0f       	push   0xfffff02
c0011816:	53                   	push   ebx
c0011817:	e8 9c 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	89 1d 68 e7 02 c0    	mov    DWORD PTR ds:0xc002e768,ebx
c0011825:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001182d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011832:	7f 7e                	jg     c00118b2 <UnixFile::UnixFile(int)+0x1aa>
c0011834:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001183c:	83 ec 0c             	sub    esp,0xc
c001183f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011843:	e8 03 e0 ff ff       	call   c000f84b <malloc>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	89 c3                	mov    ebx,eax
c001184d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011851:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011856:	83 ec 08             	sub    esp,0x8
c0011859:	50                   	push   eax
c001185a:	53                   	push   ebx
c001185b:	e8 58 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c0011860:	83 c4 10             	add    esp,0x10
c0011863:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011867:	89 1c 85 40 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18c0],ebx
c001186e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011876:	83 ec 0c             	sub    esp,0xc
c0011879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001187d:	e8 c9 df ff ff       	call   c000f84b <malloc>
c0011882:	83 c4 10             	add    esp,0x10
c0011885:	89 c3                	mov    ebx,eax
c0011887:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001188b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011890:	83 ec 08             	sub    esp,0x8
c0011893:	50                   	push   eax
c0011894:	53                   	push   ebx
c0011895:	e8 1e 00 00 00       	call   c00118b8 <ReservedFilename::ReservedFilename(int)>
c001189a:	83 c4 10             	add    esp,0x10
c001189d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a1:	89 1c 85 00 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1900],ebx
c00118a8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118ac:	e9 7c ff ff ff       	jmp    c001182d <UnixFile::UnixFile(int)+0x125>
c00118b1:	90                   	nop
c00118b2:	83 c4 28             	add    esp,0x28
c00118b5:	5b                   	pop    ebx
c00118b6:	c3                   	ret    
c00118b7:	90                   	nop

c00118b8 <ReservedFilename::ReservedFilename(int)>:
c00118b8:	83 ec 0c             	sub    esp,0xc
c00118bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118bf:	83 ec 08             	sub    esp,0x8
c00118c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c6:	50                   	push   eax
c00118c7:	e8 3c fe ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c00118cc:	83 c4 10             	add    esp,0x10
c00118cf:	ba f0 a6 02 c0       	mov    edx,0xc002a6f0
c00118d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d8:	89 10                	mov    DWORD PTR [eax],edx
c00118da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118e5:	90                   	nop
c00118e6:	83 c4 0c             	add    esp,0xc
c00118e9:	c3                   	ret    

c00118ea <UnixFile::~UnixFile()>:
c00118ea:	83 ec 1c             	sub    esp,0x1c
c00118ed:	ba d4 a6 02 c0       	mov    edx,0xc002a6d4
c00118f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118f6:	89 10                	mov    DWORD PTR [eax],edx
c00118f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ff:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011904:	7f 73                	jg     c0011979 <UnixFile::~UnixFile()+0x8f>
c0011906:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	68 78 e7 02 c0       	push   0xc002e778
c0011916:	e8 69 70 01 00       	call   c0028984 <LinkedList<UnixFile>::getFirstElement()>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011922:	83 ec 0c             	sub    esp,0xc
c0011925:	68 78 e7 02 c0       	push   0xc002e778
c001192a:	e8 5d 70 01 00       	call   c002898c <LinkedList<UnixFile>::removeFirst()>
c001192f:	83 c4 10             	add    esp,0x10
c0011932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011936:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001193a:	74 40                	je     c001197c <UnixFile::~UnixFile()+0x92>
c001193c:	83 ec 08             	sub    esp,0x8
c001193f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011943:	68 78 e7 02 c0       	push   0xc002e778
c0011948:	e8 63 6f 01 00       	call   c00288b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001194d:	83 c4 10             	add    esp,0x10
c0011950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011954:	8d 50 01             	lea    edx,[eax+0x1]
c0011957:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001195b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011960:	0f 94 c0             	sete   al
c0011963:	84 c0                	test   al,al
c0011965:	74 a7                	je     c001190e <UnixFile::~UnixFile()+0x24>
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	68 ac a6 02 c0       	push   0xc002a6ac
c001196f:	e8 d3 8c 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0011974:	83 c4 10             	add    esp,0x10
c0011977:	eb 95                	jmp    c001190e <UnixFile::~UnixFile()+0x24>
c0011979:	90                   	nop
c001197a:	eb 01                	jmp    c001197d <UnixFile::~UnixFile()+0x93>
c001197c:	90                   	nop
c001197d:	90                   	nop
c001197e:	83 c4 1c             	add    esp,0x1c
c0011981:	c3                   	ret    

c0011982 <UnixFile::~UnixFile()>:
c0011982:	83 ec 0c             	sub    esp,0xc
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198c:	e8 59 ff ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	83 ec 08             	sub    esp,0x8
c0011997:	6a 0c                	push   0xc
c0011999:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001199d:	e8 87 14 00 00       	call   c0012e29 <operator delete(void*, unsigned long)>
c00119a2:	83 c4 10             	add    esp,0x10
c00119a5:	83 c4 0c             	add    esp,0xc
c00119a8:	c3                   	ret    
c00119a9:	90                   	nop

c00119aa <ReservedFilename::~ReservedFilename()>:
c00119aa:	83 ec 0c             	sub    esp,0xc
c00119ad:	ba f0 a6 02 c0       	mov    edx,0xc002a6f0
c00119b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b6:	89 10                	mov    DWORD PTR [eax],edx
c00119b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119bc:	83 ec 0c             	sub    esp,0xc
c00119bf:	50                   	push   eax
c00119c0:	e8 25 ff ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	90                   	nop
c00119c9:	83 c4 0c             	add    esp,0xc
c00119cc:	c3                   	ret    
c00119cd:	90                   	nop

c00119ce <ReservedFilename::~ReservedFilename()>:
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	83 ec 0c             	sub    esp,0xc
c00119d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d8:	e8 cd ff ff ff       	call   c00119aa <ReservedFilename::~ReservedFilename()>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	83 ec 08             	sub    esp,0x8
c00119e3:	6a 0c                	push   0xc
c00119e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e9:	e8 3b 14 00 00       	call   c0012e29 <operator delete(void*, unsigned long)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	83 c4 0c             	add    esp,0xc
c00119f4:	c3                   	ret    

c00119f5 <getFromFileDescriptor(int)>:
c00119f5:	53                   	push   ebx
c00119f6:	83 ec 08             	sub    esp,0x8
c00119f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119fd:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a03:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a09:	7f 2c                	jg     c0011a37 <getFromFileDescriptor(int)+0x42>
c0011a0b:	83 ec 0c             	sub    esp,0xc
c0011a0e:	68 78 e7 02 c0       	push   0xc002e778
c0011a13:	e8 6c 6f 01 00       	call   c0028984 <LinkedList<UnixFile>::getFirstElement()>
c0011a18:	83 c4 10             	add    esp,0x10
c0011a1b:	85 c0                	test   eax,eax
c0011a1d:	75 04                	jne    c0011a23 <getFromFileDescriptor(int)+0x2e>
c0011a1f:	31 c0                	xor    eax,eax
c0011a21:	eb 6e                	jmp    c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a23:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a26:	74 69                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a28:	52                   	push   edx
c0011a29:	52                   	push   edx
c0011a2a:	50                   	push   eax
c0011a2b:	68 78 e7 02 c0       	push   0xc002e778
c0011a30:	e8 f9 6f 01 00       	call   c0028a2e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a35:	eb e1                	jmp    c0011a18 <getFromFileDescriptor(int)+0x23>
c0011a37:	a1 6c e7 02 c0       	mov    eax,ds:0xc002e76c
c0011a3c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a42:	74 4d                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a44:	a1 70 e7 02 c0       	mov    eax,ds:0xc002e770
c0011a49:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a4f:	74 40                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a51:	a1 68 e7 02 c0       	mov    eax,ds:0xc002e768
c0011a56:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a5c:	74 33                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a5e:	a1 64 e7 02 c0       	mov    eax,ds:0xc002e764
c0011a63:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a69:	74 26                	je     c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a6b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a71:	83 f8 08             	cmp    eax,0x8
c0011a74:	77 09                	ja     c0011a7f <getFromFileDescriptor(int)+0x8a>
c0011a76:	8b 04 85 40 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18c0]
c0011a7d:	eb 12                	jmp    c0011a91 <getFromFileDescriptor(int)+0x9c>
c0011a7f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a85:	83 fb 08             	cmp    ebx,0x8
c0011a88:	77 95                	ja     c0011a1f <getFromFileDescriptor(int)+0x2a>
c0011a8a:	8b 04 9d 00 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1900]
c0011a91:	83 c4 08             	add    esp,0x8
c0011a94:	5b                   	pop    ebx
c0011a95:	c3                   	ret    

c0011a96 <__static_initialization_and_destruction_0(int, int)>:
c0011a96:	83 ec 0c             	sub    esp,0xc
c0011a99:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a9e:	75 34                	jne    c0011ad4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aa0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011aa8:	75 2a                	jne    c0011ad4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aaa:	83 ec 0c             	sub    esp,0xc
c0011aad:	68 78 e7 02 c0       	push   0xc002e778
c0011ab2:	e8 a1 6d 01 00       	call   c0028858 <LinkedList<UnixFile>::LinkedList()>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	83 ec 04             	sub    esp,0x4
c0011abd:	68 18 d5 02 c0       	push   0xc002d518
c0011ac2:	68 78 e7 02 c0       	push   0xc002e778
c0011ac7:	68 56 88 02 c0       	push   0xc0028856
c0011acc:	e8 d2 12 00 00       	call   c0012da3 <__cxa_atexit>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	90                   	nop
c0011ad5:	83 c4 0c             	add    esp,0xc
c0011ad8:	c3                   	ret    

c0011ad9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ad9:	83 ec 0c             	sub    esp,0xc
c0011adc:	83 ec 08             	sub    esp,0x8
c0011adf:	68 ff ff 00 00       	push   0xffff
c0011ae4:	6a 01                	push   0x1
c0011ae6:	e8 ab ff ff ff       	call   c0011a96 <__static_initialization_and_destruction_0(int, int)>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	83 c4 0c             	add    esp,0xc
c0011af1:	c3                   	ret    

c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011af2:	53                   	push   ebx
c0011af3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011af7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011afb:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b01:	89 c8                	mov    eax,ecx
c0011b03:	d1 e8                	shr    eax,1
c0011b05:	03 05 a8 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5a8
c0011b0b:	83 e1 01             	and    ecx,0x1
c0011b0e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b10:	75 09                	jne    c0011b1b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b12:	83 e2 f0             	and    edx,0xfffffff0
c0011b15:	09 da                	or     edx,ebx
c0011b17:	88 10                	mov    BYTE PTR [eax],dl
c0011b19:	5b                   	pop    ebx
c0011b1a:	c3                   	ret    
c0011b1b:	c1 e3 04             	shl    ebx,0x4
c0011b1e:	83 e2 0f             	and    edx,0xf
c0011b21:	09 da                	or     edx,ebx
c0011b23:	88 10                	mov    BYTE PTR [eax],dl
c0011b25:	5b                   	pop    ebx
c0011b26:	c3                   	ret    

c0011b27 <Virt::getPageState(unsigned long)>:
c0011b27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b2b:	8b 0d a8 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5a8
c0011b31:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b37:	89 d0                	mov    eax,edx
c0011b39:	d1 e8                	shr    eax,1
c0011b3b:	83 e2 01             	and    edx,0x1
c0011b3e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b41:	75 04                	jne    c0011b47 <Virt::getPageState(unsigned long)+0x20>
c0011b43:	83 e0 0f             	and    eax,0xf
c0011b46:	c3                   	ret    
c0011b47:	c0 e8 04             	shr    al,0x4
c0011b4a:	c3                   	ret    

c0011b4b <Virt::allocateKernelVirtualPages(int)>:
c0011b4b:	55                   	push   ebp
c0011b4c:	31 ed                	xor    ebp,ebp
c0011b4e:	57                   	push   edi
c0011b4f:	56                   	push   esi
c0011b50:	53                   	push   ebx
c0011b51:	31 db                	xor    ebx,ebx
c0011b53:	83 ec 1c             	sub    esp,0x1c
c0011b56:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b5a:	8b 3d a4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a4
c0011b60:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b65:	57                   	push   edi
c0011b66:	e8 bc ff ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0011b6b:	5a                   	pop    edx
c0011b6c:	84 c0                	test   al,al
c0011b6e:	75 3a                	jne    c0011baa <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b70:	85 db                	test   ebx,ebx
c0011b72:	75 02                	jne    c0011b76 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b74:	89 fd                	mov    ebp,edi
c0011b76:	43                   	inc    ebx
c0011b77:	39 f3                	cmp    ebx,esi
c0011b79:	74 5a                	je     c0011bd5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b7b:	47                   	inc    edi
c0011b7c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b82:	76 31                	jbe    c0011bb5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b84:	c7 05 a4 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d5a4,0xc8000
c0011b8e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b93:	75 28                	jne    c0011bbd <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b95:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b9a:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b9f:	57                   	push   edi
c0011ba0:	e8 82 ff ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0011ba5:	5a                   	pop    edx
c0011ba6:	84 c0                	test   al,al
c0011ba8:	74 c6                	je     c0011b70 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011baa:	31 db                	xor    ebx,ebx
c0011bac:	47                   	inc    edi
c0011bad:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bb3:	77 cf                	ja     c0011b84 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bb5:	89 3d a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,edi
c0011bbb:	eb a8                	jmp    c0011b65 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bbd:	83 ec 0c             	sub    esp,0xc
c0011bc0:	68 04 a7 02 c0       	push   0xc002a704
c0011bc5:	e8 7d 8a 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0011bca:	8b 3d a4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5a4
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	eb 90                	jmp    c0011b65 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bd5:	89 2d a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,ebp
c0011bdb:	4b                   	dec    ebx
c0011bdc:	74 5f                	je     c0011c3d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bde:	85 f6                	test   esi,esi
c0011be0:	74 3d                	je     c0011c1f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011be2:	89 e8                	mov    eax,ebp
c0011be4:	31 db                	xor    ebx,ebx
c0011be6:	8d 7e ff             	lea    edi,[esi-0x1]
c0011be9:	eb 14                	jmp    c0011bff <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011beb:	6a 01                	push   0x1
c0011bed:	43                   	inc    ebx
c0011bee:	50                   	push   eax
c0011bef:	e8 fe fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf4:	58                   	pop    eax
c0011bf5:	39 f3                	cmp    ebx,esi
c0011bf7:	5a                   	pop    edx
c0011bf8:	74 25                	je     c0011c1f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bfa:	a1 a4 d5 02 c0       	mov    eax,ds:0xc002d5a4
c0011bff:	8d 50 01             	lea    edx,[eax+0x1]
c0011c02:	85 db                	test   ebx,ebx
c0011c04:	89 15 a4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a4,edx
c0011c0a:	74 20                	je     c0011c2c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c0c:	39 df                	cmp    edi,ebx
c0011c0e:	75 db                	jne    c0011beb <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c10:	6a 03                	push   0x3
c0011c12:	43                   	inc    ebx
c0011c13:	50                   	push   eax
c0011c14:	e8 d9 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c19:	59                   	pop    ecx
c0011c1a:	39 f3                	cmp    ebx,esi
c0011c1c:	58                   	pop    eax
c0011c1d:	75 db                	jne    c0011bfa <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c1f:	83 c4 1c             	add    esp,0x1c
c0011c22:	89 e8                	mov    eax,ebp
c0011c24:	5b                   	pop    ebx
c0011c25:	c1 e0 0c             	shl    eax,0xc
c0011c28:	5e                   	pop    esi
c0011c29:	5f                   	pop    edi
c0011c2a:	5d                   	pop    ebp
c0011c2b:	c3                   	ret    
c0011c2c:	6a 02                	push   0x2
c0011c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0011c33:	50                   	push   eax
c0011c34:	e8 b9 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c39:	58                   	pop    eax
c0011c3a:	5a                   	pop    edx
c0011c3b:	eb bd                	jmp    c0011bfa <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c3d:	6a 04                	push   0x4
c0011c3f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c42:	55                   	push   ebp
c0011c43:	a3 a4 d5 02 c0       	mov    ds:0xc002d5a4,eax
c0011c48:	e8 a5 fe ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4d:	59                   	pop    ecx
c0011c4e:	89 e8                	mov    eax,ebp
c0011c50:	5b                   	pop    ebx
c0011c51:	c1 e0 0c             	shl    eax,0xc
c0011c54:	83 c4 1c             	add    esp,0x1c
c0011c57:	5b                   	pop    ebx
c0011c58:	5e                   	pop    esi
c0011c59:	5f                   	pop    edi
c0011c5a:	5d                   	pop    ebp
c0011c5b:	c3                   	ret    

c0011c5c <Virt::freeSwapfilePage(unsigned long)>:
c0011c5c:	53                   	push   ebx
c0011c5d:	8b 15 8c e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e78c
c0011c63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c67:	b8 01 00 00 00       	mov    eax,0x1
c0011c6c:	89 cb                	mov    ebx,ecx
c0011c6e:	d3 e0                	shl    eax,cl
c0011c70:	c1 eb 05             	shr    ebx,0x5
c0011c73:	f7 d0                	not    eax
c0011c75:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c78:	5b                   	pop    ebx
c0011c79:	c3                   	ret    

c0011c7a <Virt::swapIDToSector(unsigned long)>:
c0011c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c7e:	0f af 05 ac d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d5ac
c0011c85:	03 05 b4 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5b4
c0011c8b:	c3                   	ret    

c0011c8c <Virt::allocateSwapfilePage()>:
c0011c8c:	55                   	push   ebp
c0011c8d:	31 d2                	xor    edx,edx
c0011c8f:	57                   	push   edi
c0011c90:	56                   	push   esi
c0011c91:	53                   	push   ebx
c0011c92:	83 ec 0c             	sub    esp,0xc
c0011c95:	8b 0d ac d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5ac
c0011c9b:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011ca0:	f7 f1                	div    ecx
c0011ca2:	39 0d b0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5b0,ecx
c0011ca8:	72 2d                	jb     c0011cd7 <Virt::allocateSwapfilePage()+0x4b>
c0011caa:	8b 35 8c e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e78c
c0011cb0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cb2:	f6 c2 01             	test   dl,0x1
c0011cb5:	74 3c                	je     c0011cf3 <Virt::allocateSwapfilePage()+0x67>
c0011cb7:	31 c9                	xor    ecx,ecx
c0011cb9:	bf 01 00 00 00       	mov    edi,0x1
c0011cbe:	eb 12                	jmp    c0011cd2 <Virt::allocateSwapfilePage()+0x46>
c0011cc0:	89 fd                	mov    ebp,edi
c0011cc2:	89 ca                	mov    edx,ecx
c0011cc4:	d3 e5                	shl    ebp,cl
c0011cc6:	c1 ea 05             	shr    edx,0x5
c0011cc9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011ccc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cce:	85 ea                	test   edx,ebp
c0011cd0:	74 2a                	je     c0011cfc <Virt::allocateSwapfilePage()+0x70>
c0011cd2:	41                   	inc    ecx
c0011cd3:	39 c8                	cmp    eax,ecx
c0011cd5:	77 e9                	ja     c0011cc0 <Virt::allocateSwapfilePage()+0x34>
c0011cd7:	83 ec 0c             	sub    esp,0xc
c0011cda:	68 8b a8 02 c0       	push   0xc002a88b
c0011cdf:	e8 63 89 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0011ce4:	83 c4 10             	add    esp,0x10
c0011ce7:	31 c9                	xor    ecx,ecx
c0011ce9:	83 c4 0c             	add    esp,0xc
c0011cec:	89 c8                	mov    eax,ecx
c0011cee:	5b                   	pop    ebx
c0011cef:	5e                   	pop    esi
c0011cf0:	5f                   	pop    edi
c0011cf1:	5d                   	pop    ebp
c0011cf2:	c3                   	ret    
c0011cf3:	89 f3                	mov    ebx,esi
c0011cf5:	bd 01 00 00 00       	mov    ebp,0x1
c0011cfa:	31 c9                	xor    ecx,ecx
c0011cfc:	09 ea                	or     edx,ebp
c0011cfe:	89 c8                	mov    eax,ecx
c0011d00:	89 13                	mov    DWORD PTR [ebx],edx
c0011d02:	83 c4 0c             	add    esp,0xc
c0011d05:	5b                   	pop    ebx
c0011d06:	5e                   	pop    esi
c0011d07:	5f                   	pop    edi
c0011d08:	5d                   	pop    ebp
c0011d09:	c3                   	ret    

c0011d0a <Virt::virtualMemorySetup()>:
c0011d0a:	53                   	push   ebx
c0011d0b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d10:	83 ec 08             	sub    esp,0x8
c0011d13:	6a 0f                	push   0xf
c0011d15:	53                   	push   ebx
c0011d16:	43                   	inc    ebx
c0011d17:	e8 d6 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d1c:	59                   	pop    ecx
c0011d1d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d23:	58                   	pop    eax
c0011d24:	75 ed                	jne    c0011d13 <Virt::virtualMemorySetup()+0x9>
c0011d26:	83 ec 08             	sub    esp,0x8
c0011d29:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d2e:	68 00 00 00 c8       	push   0xc8000000
c0011d33:	68 a2 a8 02 c0       	push   0xc002a8a2
c0011d38:	e8 cc 11 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0011d3d:	58                   	pop    eax
c0011d3e:	5a                   	pop    edx
c0011d3f:	68 00 f0 ff ef       	push   0xeffff000
c0011d44:	68 b6 a8 02 c0       	push   0xc002a8b6
c0011d49:	e8 bb 11 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0011d4e:	83 c4 10             	add    esp,0x10
c0011d51:	83 ec 08             	sub    esp,0x8
c0011d54:	6a 00                	push   0x0
c0011d56:	53                   	push   ebx
c0011d57:	43                   	inc    ebx
c0011d58:	e8 95 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d66:	75 e9                	jne    c0011d51 <Virt::virtualMemorySetup()+0x47>
c0011d68:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d6d:	83 ec 08             	sub    esp,0x8
c0011d70:	6a 0f                	push   0xf
c0011d72:	53                   	push   ebx
c0011d73:	43                   	inc    ebx
c0011d74:	e8 79 fd ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d79:	83 c4 10             	add    esp,0x10
c0011d7c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d82:	75 e9                	jne    c0011d6d <Virt::virtualMemorySetup()+0x63>
c0011d84:	83 c4 08             	add    esp,0x8
c0011d87:	5b                   	pop    ebx
c0011d88:	c3                   	ret    

c0011d89 <Virt::swappingSetup()>:
c0011d89:	83 ec 14             	sub    esp,0x14
c0011d8c:	31 d2                	xor    edx,edx
c0011d8e:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011d93:	f7 35 ac d5 02 c0    	div    DWORD PTR ds:0xc002d5ac
c0011d99:	c1 e8 05             	shr    eax,0x5
c0011d9c:	50                   	push   eax
c0011d9d:	68 ca a8 02 c0       	push   0xc002a8ca
c0011da2:	e8 62 11 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0011da7:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	f7 35 ac d5 02 c0    	div    DWORD PTR ds:0xc002d5ac
c0011db4:	c1 e8 05             	shr    eax,0x5
c0011db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dba:	e8 8c da ff ff       	call   c000f84b <malloc>
c0011dbf:	83 c4 0c             	add    esp,0xc
c0011dc2:	89 c1                	mov    ecx,eax
c0011dc4:	a3 8c e7 02 c0       	mov    ds:0xc002e78c,eax
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	a1 b0 d5 02 c0       	mov    eax,ds:0xc002d5b0
c0011dd0:	f7 35 ac d5 02 c0    	div    DWORD PTR ds:0xc002d5ac
c0011dd6:	c1 e8 05             	shr    eax,0x5
c0011dd9:	50                   	push   eax
c0011dda:	6a 00                	push   0x0
c0011ddc:	51                   	push   ecx
c0011ddd:	e8 9e e9 fe ff       	call   c0000780 <memset>
c0011de2:	83 c4 1c             	add    esp,0x1c
c0011de5:	c3                   	ret    

c0011de6 <Virt::getAKernelVAS()>:
c0011de6:	a1 90 e7 02 c0       	mov    eax,ds:0xc002e790
c0011deb:	c3                   	ret    

c0011dec <Virt::setupPageSwapping(int)>:
c0011dec:	57                   	push   edi
c0011ded:	56                   	push   esi
c0011dee:	53                   	push   ebx
c0011def:	83 ec 1c             	sub    esp,0x1c
c0011df2:	68 e5 a8 02 c0       	push   0xc002a8e5
c0011df7:	e8 0d 11 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0011dfc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011e03:	e8 43 da ff ff       	call   c000f84b <malloc>
c0011e08:	83 c4 0c             	add    esp,0xc
c0011e0b:	89 c6                	mov    esi,eax
c0011e0d:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c0011e13:	68 f9 a8 02 c0       	push   0xc002a8f9
c0011e18:	50                   	push   eax
c0011e19:	e8 4a 16 00 00       	call   c0013468 <File::File(char const*, Process*)>
c0011e1e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e21:	e8 1e 18 00 00       	call   c0013644 <File::unlink()>
c0011e26:	58                   	pop    eax
c0011e27:	5a                   	pop    edx
c0011e28:	6a 12                	push   0x12
c0011e2a:	56                   	push   esi
c0011e2b:	e8 9c 16 00 00       	call   c00134cc <File::open(FileOpenMode)>
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	85 c0                	test   eax,eax
c0011e35:	0f 85 e9 00 00 00    	jne    c0011f24 <Virt::setupPageSwapping(int)+0x138>
c0011e3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e47:	c1 e3 08             	shl    ebx,0x8
c0011e4a:	83 ec 0c             	sub    esp,0xc
c0011e4d:	68 00 00 01 00       	push   0x10000
c0011e52:	e8 f4 d9 ff ff       	call   c000f84b <malloc>
c0011e57:	83 c4 0c             	add    esp,0xc
c0011e5a:	89 c7                	mov    edi,eax
c0011e5c:	68 00 00 01 00       	push   0x10000
c0011e61:	68 ee 00 00 00       	push   0xee
c0011e66:	50                   	push   eax
c0011e67:	e8 14 e9 fe ff       	call   c0000780 <memset>
c0011e6c:	83 c4 10             	add    esp,0x10
c0011e6f:	85 db                	test   ebx,ebx
c0011e71:	79 03                	jns    c0011e76 <Virt::setupPageSwapping(int)+0x8a>
c0011e73:	83 c3 0f             	add    ebx,0xf
c0011e76:	c1 fb 04             	sar    ebx,0x4
c0011e79:	4b                   	dec    ebx
c0011e7a:	83 fb ff             	cmp    ebx,0xffffffff
c0011e7d:	74 4b                	je     c0011eca <Virt::setupPageSwapping(int)+0xde>
c0011e7f:	83 ec 0c             	sub    esp,0xc
c0011e82:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e84:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e88:	52                   	push   edx
c0011e89:	57                   	push   edi
c0011e8a:	6a 00                	push   0x0
c0011e8c:	68 00 00 01 00       	push   0x10000
c0011e91:	56                   	push   esi
c0011e92:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e95:	83 c4 20             	add    esp,0x20
c0011e98:	85 c0                	test   eax,eax
c0011e9a:	75 72                	jne    c0011f0e <Virt::setupPageSwapping(int)+0x122>
c0011e9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ea0:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ea5:	74 d2                	je     c0011e79 <Virt::setupPageSwapping(int)+0x8d>
c0011ea7:	83 ec 08             	sub    esp,0x8
c0011eaa:	4b                   	dec    ebx
c0011eab:	50                   	push   eax
c0011eac:	68 4c a9 02 c0       	push   0xc002a94c
c0011eb1:	e8 53 10 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0011eb6:	c7 04 24 55 a9 02 c0 	mov    DWORD PTR [esp],0xc002a955
c0011ebd:	e8 85 87 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0011ec2:	83 c4 10             	add    esp,0x10
c0011ec5:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec8:	75 b5                	jne    c0011e7f <Virt::setupPageSwapping(int)+0x93>
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	56                   	push   esi
c0011ece:	e8 57 16 00 00       	call   c001352a <File::close()>
c0011ed3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ed6:	e8 90 d9 ff ff       	call   c000f86b <rfree>
c0011edb:	83 c4 10             	add    esp,0x10
c0011ede:	85 f6                	test   esi,esi
c0011ee0:	74 0c                	je     c0011eee <Virt::setupPageSwapping(int)+0x102>
c0011ee2:	83 ec 0c             	sub    esp,0xc
c0011ee5:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ee7:	56                   	push   esi
c0011ee8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	83 ec 08             	sub    esp,0x8
c0011ef1:	a1 28 ec 02 c0       	mov    eax,ds:0xc002ec28
c0011ef6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011efc:	8b 10                	mov    edx,DWORD PTR [eax]
c0011efe:	68 f9 a8 02 c0       	push   0xc002a8f9
c0011f03:	50                   	push   eax
c0011f04:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011f07:	83 c4 20             	add    esp,0x20
c0011f0a:	5b                   	pop    ebx
c0011f0b:	5e                   	pop    esi
c0011f0c:	5f                   	pop    edi
c0011f0d:	c3                   	ret    
c0011f0e:	83 ec 08             	sub    esp,0x8
c0011f11:	50                   	push   eax
c0011f12:	68 34 a9 02 c0       	push   0xc002a934
c0011f17:	e8 ed 0f 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0011f1c:	83 c4 10             	add    esp,0x10
c0011f1f:	e9 78 ff ff ff       	jmp    c0011e9c <Virt::setupPageSwapping(int)+0xb0>
c0011f24:	83 ec 08             	sub    esp,0x8
c0011f27:	50                   	push   eax
c0011f28:	68 10 a9 02 c0       	push   0xc002a910
c0011f2d:	e8 d7 0f 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0011f32:	c7 04 24 19 a9 02 c0 	mov    DWORD PTR [esp],0xc002a919
c0011f39:	e8 09 87 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0011f3e:	83 c4 10             	add    esp,0x10
c0011f41:	e9 f5 fe ff ff       	jmp    c0011e3b <Virt::setupPageSwapping(int)+0x4f>

c0011f46 <VAS::VAS()>:
c0011f46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f55:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f60:	a3 90 e7 02 c0       	mov    ds:0xc002e790,eax
c0011f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f69:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f71:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f78:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f7f:	90                   	nop
c0011f80:	c3                   	ret    
c0011f81:	90                   	nop

c0011f82 <VAS::VAS(VAS*)>:
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f9b:	83 ec 0c             	sub    esp,0xc
c0011f9e:	68 24 a7 02 c0       	push   0xc002a724
c0011fa3:	e8 9f 86 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0011fa8:	83 c4 10             	add    esp,0x10
c0011fab:	90                   	nop
c0011fac:	83 c4 0c             	add    esp,0xc
c0011faf:	c3                   	ret    

c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb4:	89 c2                	mov    edx,eax
c0011fb6:	c1 e8 0a             	shr    eax,0xa
c0011fb9:	c1 ea 16             	shr    edx,0x16
c0011fbc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fc1:	19 c9                	sbb    ecx,ecx
c0011fc3:	c1 e2 0c             	shl    edx,0xc
c0011fc6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fcc:	25 fc 0f 00 00       	and    eax,0xffc
c0011fd1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fd8:	01 d0                	add    eax,edx
c0011fda:	c3                   	ret    
c0011fdb:	90                   	nop

c0011fdc <VAS::getPageTableEntry(unsigned long)>:
c0011fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fe0:	89 ca                	mov    edx,ecx
c0011fe2:	c1 e9 0a             	shr    ecx,0xa
c0011fe5:	c1 ea 16             	shr    edx,0x16
c0011fe8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ff4:	c1 e0 0c             	shl    eax,0xc
c0011ff7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ffa:	c3                   	ret    

c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ffb:	57                   	push   edi
c0011ffc:	56                   	push   esi
c0011ffd:	be 01 00 00 00       	mov    esi,0x1
c0012002:	53                   	push   ebx
c0012003:	83 ec 10             	sub    esp,0x10
c0012006:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001200a:	c1 eb 0c             	shr    ebx,0xc
c001200d:	eb 3f                	jmp    c001204e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001200f:	e8 d2 fd ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012014:	83 ec 08             	sub    esp,0x8
c0012017:	57                   	push   edi
c0012018:	50                   	push   eax
c0012019:	e8 be ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	8b 00                	mov    eax,DWORD PTR [eax]
c0012023:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012027:	f6 c4 04             	test   ah,0x4
c001202a:	75 5f                	jne    c001208b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001202c:	80 fa 04             	cmp    dl,0x4
c001202f:	74 78                	je     c00120a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012031:	80 fa 02             	cmp    dl,0x2
c0012034:	0f 84 88 00 00 00    	je     c00120c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001203a:	80 fa 03             	cmp    dl,0x3
c001203d:	0f 84 ad 00 00 00    	je     c00120f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012043:	fe ca                	dec    dl
c0012045:	0f 84 92 00 00 00    	je     c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001204b:	43                   	inc    ebx
c001204c:	31 f6                	xor    esi,esi
c001204e:	53                   	push   ebx
c001204f:	e8 d3 fa ff ff       	call   c0011b27 <Virt::getPageState(unsigned long)>
c0012054:	5f                   	pop    edi
c0012055:	89 df                	mov    edi,ebx
c0012057:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001205b:	c1 e7 0c             	shl    edi,0xc
c001205e:	84 c0                	test   al,al
c0012060:	75 ad                	jne    c001200f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	68 5b a9 02 c0       	push   0xc002a95b
c001206a:	e8 d8 85 00 00       	call   c001a647 <Krnl::panic(char const*)>
c001206f:	e8 72 fd ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012074:	5a                   	pop    edx
c0012075:	59                   	pop    ecx
c0012076:	57                   	push   edi
c0012077:	50                   	push   eax
c0012078:	e8 5f ff ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001207d:	83 c4 10             	add    esp,0x10
c0012080:	8b 00                	mov    eax,DWORD PTR [eax]
c0012082:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012086:	f6 c4 04             	test   ah,0x4
c0012089:	74 c0                	je     c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001208b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001208f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012094:	83 ec 0c             	sub    esp,0xc
c0012097:	50                   	push   eax
c0012098:	e8 c6 dd ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a4:	80 fa 04             	cmp    dl,0x4
c00120a7:	75 88                	jne    c0012031 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120a9:	89 f0                	mov    eax,esi
c00120ab:	84 c0                	test   al,al
c00120ad:	75 47                	jne    c00120f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120af:	c7 44 24 20 48 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a748
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	5b                   	pop    ebx
c00120bb:	5e                   	pop    esi
c00120bc:	5f                   	pop    edi
c00120bd:	e9 85 85 00 00       	jmp    c001a647 <Krnl::panic(char const*)>
c00120c2:	89 f0                	mov    eax,esi
c00120c4:	84 c0                	test   al,al
c00120c6:	75 15                	jne    c00120dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120c8:	83 ec 0c             	sub    esp,0xc
c00120cb:	68 77 a9 02 c0       	push   0xc002a977
c00120d0:	e8 72 85 00 00       	call   c001a647 <Krnl::panic(char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	e9 6e ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120dd:	83 ec 08             	sub    esp,0x8
c00120e0:	6a 00                	push   0x0
c00120e2:	53                   	push   ebx
c00120e3:	e8 0a fa ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	e9 5b ff ff ff       	jmp    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f0:	89 f0                	mov    eax,esi
c00120f2:	84 c0                	test   al,al
c00120f4:	75 15                	jne    c001210b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120f6:	83 ec 08             	sub    esp,0x8
c00120f9:	6a 00                	push   0x0
c00120fb:	53                   	push   ebx
c00120fc:	e8 f1 f9 ff ff       	call   c0011af2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	83 c4 10             	add    esp,0x10
c0012107:	5b                   	pop    ebx
c0012108:	5e                   	pop    esi
c0012109:	5f                   	pop    edi
c001210a:	c3                   	ret    
c001210b:	c7 44 24 20 93 a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a993
c0012113:	83 c4 10             	add    esp,0x10
c0012116:	5b                   	pop    ebx
c0012117:	5e                   	pop    esi
c0012118:	5f                   	pop    edi
c0012119:	e9 29 85 00 00       	jmp    c001a647 <Krnl::panic(char const*)>

c001211e <VAS::freeAllocatedPages(unsigned long)>:
c001211e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012126:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001212a:	74 09                	je     c0012135 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001212c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012130:	e9 c6 fe ff ff       	jmp    c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012135:	c7 44 24 04 6c a7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a76c
c001213d:	e9 c7 0d 00 00       	jmp    c0012f09 <Dbg::kprintf(char const*, ...)>

c0012142 <VAS::virtualToPhysical(unsigned long)>:
c0012142:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012146:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001214a:	e8 8d fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001214f:	5a                   	pop    edx
c0012150:	8b 00                	mov    eax,DWORD PTR [eax]
c0012152:	59                   	pop    ecx
c0012153:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012158:	c3                   	ret    
c0012159:	90                   	nop

c001215a <VAS::reflagRange(unsigned long, int, int, int)>:
c001215a:	55                   	push   ebp
c001215b:	57                   	push   edi
c001215c:	56                   	push   esi
c001215d:	53                   	push   ebx
c001215e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012162:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012166:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001216a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001216e:	85 db                	test   ebx,ebx
c0012170:	7e 22                	jle    c0012194 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012172:	c1 e3 0c             	shl    ebx,0xc
c0012175:	01 f3                	add    ebx,esi
c0012177:	56                   	push   esi
c0012178:	81 c6 00 10 00 00    	add    esi,0x1000
c001217e:	55                   	push   ebp
c001217f:	e8 58 fe ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012184:	5a                   	pop    edx
c0012185:	59                   	pop    ecx
c0012186:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012188:	21 f9                	and    ecx,edi
c001218a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001218e:	39 f3                	cmp    ebx,esi
c0012190:	89 08                	mov    DWORD PTR [eax],ecx
c0012192:	75 e3                	jne    c0012177 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012194:	5b                   	pop    ebx
c0012195:	5e                   	pop    esi
c0012196:	5f                   	pop    edi
c0012197:	5d                   	pop    ebp
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::setToWriteCombining(unsigned long, int)>:
c001219a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001219f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121ac:	75 01                	jne    c00121af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121ae:	c3                   	ret    
c00121af:	68 80 00 00 00       	push   0x80
c00121b4:	6a ff                	push   0xffffffff
c00121b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c2:	e8 93 ff ff ff       	call   c001215a <VAS::reflagRange(unsigned long, int, int, int)>
c00121c7:	83 c4 14             	add    esp,0x14
c00121ca:	c3                   	ret    
c00121cb:	90                   	nop

c00121cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00121cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00121d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121dc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00121df:	19 c0                	sbb    eax,eax
c00121e1:	83 ca 03             	or     edx,0x3
c00121e4:	83 e0 fc             	and    eax,0xfffffffc
c00121e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121ee:	0f 20 d8             	mov    eax,cr3
c00121f1:	0f 22 d8             	mov    cr3,eax
c00121f4:	c3                   	ret    
c00121f5:	90                   	nop

c00121f6 <VAS::~VAS()>:
c00121f6:	83 ec 2c             	sub    esp,0x2c
c00121f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012201:	e8 1c bc 00 00       	call   c001de22 <lockScheduler()>
c0012206:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001220b:	8b 00                	mov    eax,DWORD PTR [eax]
c001220d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012210:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012216:	83 ec 04             	sub    esp,0x4
c0012219:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001221d:	6a 01                	push   0x1
c001221f:	50                   	push   eax
c0012220:	e8 a7 ff ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012230:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012238:	0f 8f d7 00 00 00    	jg     c0012315 <VAS::~VAS()+0x11f>
c001223e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012242:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012245:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012249:	c1 e2 02             	shl    edx,0x2
c001224c:	01 d0                	add    eax,edx
c001224e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012250:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012258:	83 e0 01             	and    eax,0x1
c001225b:	0f 84 ab 00 00 00    	je     c001230c <VAS::~VAS()+0x116>
c0012261:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012269:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012271:	7f 75                	jg     c00122e8 <VAS::~VAS()+0xf2>
c0012273:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012277:	c1 e0 0a             	shl    eax,0xa
c001227a:	89 c2                	mov    edx,eax
c001227c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012280:	01 d0                	add    eax,edx
c0012282:	c1 e0 0c             	shl    eax,0xc
c0012285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012289:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001228e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012293:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012299:	83 ec 04             	sub    esp,0x4
c001229c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122a0:	6a 01                	push   0x1
c00122a2:	50                   	push   eax
c00122a3:	e8 08 fd ff ff       	call   c0011fb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00122b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122bd:	25 01 04 00 00       	and    eax,0x401
c00122c2:	3d 01 04 00 00       	cmp    eax,0x401
c00122c7:	75 19                	jne    c00122e2 <VAS::~VAS()+0xec>
c00122c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122d2:	83 ec 0c             	sub    esp,0xc
c00122d5:	50                   	push   eax
c00122d6:	e8 88 db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122e6:	eb 81                	jmp    c0012269 <VAS::~VAS()+0x73>
c00122e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ec:	25 00 04 00 00       	and    eax,0x400
c00122f1:	74 19                	je     c001230c <VAS::~VAS()+0x116>
c00122f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122fc:	83 ec 0c             	sub    esp,0xc
c00122ff:	50                   	push   eax
c0012300:	e8 5e db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c0012305:	83 c4 10             	add    esp,0x10
c0012308:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012310:	e9 1b ff ff ff       	jmp    c0012230 <VAS::~VAS()+0x3a>
c0012315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012319:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	50                   	push   eax
c0012320:	e8 d6 fc ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012325:	83 c4 10             	add    esp,0x10
c0012328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001232f:	83 ec 0c             	sub    esp,0xc
c0012332:	50                   	push   eax
c0012333:	e8 2b db ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001233f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012343:	c1 e0 02             	shl    eax,0x2
c0012346:	83 ec 08             	sub    esp,0x8
c0012349:	50                   	push   eax
c001234a:	68 90 a7 02 c0       	push   0xc002a790
c001234f:	e8 b5 0b 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	e8 c8 ba 00 00       	call   c001de24 <unlockScheduler()>
c001235c:	90                   	nop
c001235d:	83 c4 2c             	add    esp,0x2c
c0012360:	c3                   	ret    
c0012361:	90                   	nop

c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012362:	55                   	push   ebp
c0012363:	57                   	push   edi
c0012364:	56                   	push   esi
c0012365:	53                   	push   ebx
c0012366:	83 ec 1c             	sub    esp,0x1c
c0012369:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001236d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012371:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012377:	77 08                	ja     c0012381 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012379:	0f 20 d8             	mov    eax,cr3
c001237c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001237f:	75 47                	jne    c00123c8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012381:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012385:	09 d8                	or     eax,ebx
c0012387:	a9 ff 0f 00 00       	test   eax,0xfff
c001238c:	75 57                	jne    c00123e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001238e:	89 de                	mov    esi,ebx
c0012390:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012393:	c1 ee 16             	shr    esi,0x16
c0012396:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001239d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123a1:	74 54                	je     c00123f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123a7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123b1:	c1 e6 0c             	shl    esi,0xc
c00123b4:	c1 eb 0a             	shr    ebx,0xa
c00123b7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123bd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123c0:	83 c4 1c             	add    esp,0x1c
c00123c3:	5b                   	pop    ebx
c00123c4:	5e                   	pop    esi
c00123c5:	5f                   	pop    edi
c00123c6:	5d                   	pop    ebp
c00123c7:	c3                   	ret    
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	68 b0 a7 02 c0       	push   0xc002a7b0
c00123d0:	e8 34 0b 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123dc:	09 d8                	or     eax,ebx
c00123de:	a9 ff 0f 00 00       	test   eax,0xfff
c00123e3:	74 a9                	je     c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	68 18 a8 02 c0       	push   0xc002a818
c00123ed:	e8 55 82 00 00       	call   c001a647 <Krnl::panic(char const*)>
c00123f2:	83 c4 10             	add    esp,0x10
c00123f5:	eb 97                	jmp    c001238e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123fb:	e8 ed da ff ff       	call   c000feed <Phys::allocatePage()>
c0012400:	89 c5                	mov    ebp,eax
c0012402:	e8 df f9 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012407:	83 ec 0c             	sub    esp,0xc
c001240a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001240e:	6a 01                	push   0x1
c0012410:	e8 36 f7 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0012415:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001241c:	6a 01                	push   0x1
c001241e:	50                   	push   eax
c001241f:	55                   	push   ebp
c0012420:	81 cd 07 04 00 00    	or     ebp,0x407
c0012426:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001242a:	51                   	push   ecx
c001242b:	e8 26 02 00 00       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012430:	83 c4 1c             	add    esp,0x1c
c0012433:	68 00 10 00 00       	push   0x1000
c0012438:	6a 00                	push   0x0
c001243a:	50                   	push   eax
c001243b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243f:	e8 3c e3 fe ff       	call   c0000780 <memset>
c0012444:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012448:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001244b:	e8 ab fb ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0012450:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012454:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012457:	83 c4 10             	add    esp,0x10
c001245a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001245d:	e9 41 ff ff ff       	jmp    c00123a3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012462 <VAS::allocatePages(int, int)>:
c0012462:	55                   	push   ebp
c0012463:	57                   	push   edi
c0012464:	56                   	push   esi
c0012465:	53                   	push   ebx
c0012466:	83 ec 1c             	sub    esp,0x1c
c0012469:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001246d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012478:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001247e:	83 e0 01             	and    eax,0x1
c0012481:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012485:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012489:	0f 85 cc 00 00 00    	jne    c001255b <VAS::allocatePages(int, int)+0xf9>
c001248f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012492:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012496:	85 c0                	test   eax,eax
c0012498:	0f 84 a1 00 00 00    	je     c001253f <VAS::allocatePages(int, int)+0xdd>
c001249e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124a6:	c1 e6 0c             	shl    esi,0xc
c00124a9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124ad:	85 c0                	test   eax,eax
c00124af:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124b2:	7e 33                	jle    c00124e7 <VAS::allocatePages(int, int)+0x85>
c00124b4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124bc:	81 cd 00 04 00 00    	or     ebp,0x400
c00124c2:	e8 26 da ff ff       	call   c000feed <Phys::allocatePage()>
c00124c7:	55                   	push   ebp
c00124c8:	53                   	push   ebx
c00124c9:	50                   	push   eax
c00124ca:	57                   	push   edi
c00124cb:	e8 92 fe ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d0:	83 c4 10             	add    esp,0x10
c00124d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d8:	74 03                	je     c00124dd <VAS::allocatePages(int, int)+0x7b>
c00124da:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124dd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e3:	39 de                	cmp    esi,ebx
c00124e5:	75 db                	jne    c00124c2 <VAS::allocatePages(int, int)+0x60>
c00124e7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ec:	75 12                	jne    c0012500 <VAS::allocatePages(int, int)+0x9e>
c00124ee:	0f 20 d8             	mov    eax,cr3
c00124f1:	0f 22 d8             	mov    cr3,eax
c00124f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f8:	83 c4 1c             	add    esp,0x1c
c00124fb:	5b                   	pop    ebx
c00124fc:	5e                   	pop    esi
c00124fd:	5f                   	pop    edi
c00124fe:	5d                   	pop    ebp
c00124ff:	c3                   	ret    
c0012500:	c1 ee 0a             	shr    esi,0xa
c0012503:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012507:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001250d:	c1 eb 0a             	shr    ebx,0xa
c0012510:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012516:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001251c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012522:	39 c3                	cmp    ebx,eax
c0012524:	77 ce                	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c0012526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012529:	81 c3 00 10 00 00    	add    ebx,0x1000
c001252f:	39 d8                	cmp    eax,ebx
c0012531:	73 f3                	jae    c0012526 <VAS::allocatePages(int, int)+0xc4>
c0012533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012537:	83 c4 1c             	add    esp,0x1c
c001253a:	5b                   	pop    ebx
c001253b:	5e                   	pop    esi
c001253c:	5f                   	pop    edi
c001253d:	5d                   	pop    ebp
c001253e:	c3                   	ret    
c001253f:	83 ec 0c             	sub    esp,0xc
c0012542:	68 3c a8 02 c0       	push   0xc002a83c
c0012547:	e8 fb 80 00 00       	call   c001a647 <Krnl::panic(char const*)>
c001254c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001254f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012553:	83 c4 10             	add    esp,0x10
c0012556:	e9 43 ff ff ff       	jmp    c001249e <VAS::allocatePages(int, int)+0x3c>
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012562:	e8 e4 f5 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0012567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012573:	0f 87 9b 00 00 00    	ja     c0012614 <VAS::allocatePages(int, int)+0x1b2>
c0012579:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001257d:	85 d2                	test   edx,edx
c001257f:	7e 3c                	jle    c00125bd <VAS::allocatePages(int, int)+0x15b>
c0012581:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012585:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012589:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001258d:	c1 e5 0c             	shl    ebp,0xc
c0012590:	81 ce 00 04 00 00    	or     esi,0x400
c0012596:	01 dd                	add    ebp,ebx
c0012598:	e8 50 d9 ff ff       	call   c000feed <Phys::allocatePage()>
c001259d:	56                   	push   esi
c001259e:	53                   	push   ebx
c001259f:	50                   	push   eax
c00125a0:	57                   	push   edi
c00125a1:	e8 bc fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125ae:	74 03                	je     c00125b3 <VAS::allocatePages(int, int)+0x151>
c00125b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b9:	39 dd                	cmp    ebp,ebx
c00125bb:	75 db                	jne    c0012598 <VAS::allocatePages(int, int)+0x136>
c00125bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c2:	0f 84 26 ff ff ff    	je     c00124ee <VAS::allocatePages(int, int)+0x8c>
c00125c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125d0:	89 d3                	mov    ebx,edx
c00125d2:	c1 e0 0c             	shl    eax,0xc
c00125d5:	c1 eb 0a             	shr    ebx,0xa
c00125d8:	01 d0                	add    eax,edx
c00125da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125e0:	c1 e8 0a             	shr    eax,0xa
c00125e3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125ee:	2d 00 00 40 00       	sub    eax,0x400000
c00125f3:	39 c3                	cmp    ebx,eax
c00125f5:	0f 87 f9 fe ff ff    	ja     c00124f4 <VAS::allocatePages(int, int)+0x92>
c00125fb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012604:	39 d8                	cmp    eax,ebx
c0012606:	73 f3                	jae    c00125fb <VAS::allocatePages(int, int)+0x199>
c0012608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001260c:	83 c4 1c             	add    esp,0x1c
c001260f:	5b                   	pop    ebx
c0012610:	5e                   	pop    esi
c0012611:	5f                   	pop    edi
c0012612:	5d                   	pop    ebp
c0012613:	c3                   	ret    
c0012614:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012619:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001261f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012626:	0f 84 4d ff ff ff    	je     c0012579 <VAS::allocatePages(int, int)+0x117>
c001262c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012634:	e9 40 ff ff ff       	jmp    c0012579 <VAS::allocatePages(int, int)+0x117>
c0012639:	90                   	nop

c001263a <VAS::setCPUSpecific(unsigned long)>:
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	6a 05                	push   0x5
c001263f:	68 00 00 40 c2       	push   0xc2400000
c0012644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001264c:	e8 11 fd ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012651:	83 c4 1c             	add    esp,0x1c
c0012654:	c3                   	ret    
c0012655:	90                   	nop

c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012656:	55                   	push   ebp
c0012657:	57                   	push   edi
c0012658:	56                   	push   esi
c0012659:	53                   	push   ebx
c001265a:	83 ec 1c             	sub    esp,0x1c
c001265d:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012662:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012666:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012670:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012676:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001267a:	83 e0 01             	and    eax,0x1
c001267d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012681:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012685:	85 c0                	test   eax,eax
c0012687:	7e 39                	jle    c00126c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012689:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268d:	89 f3                	mov    ebx,esi
c001268f:	c1 e0 0c             	shl    eax,0xc
c0012692:	01 f0                	add    eax,esi
c0012694:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012698:	55                   	push   ebp
c0012699:	53                   	push   ebx
c001269a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269e:	29 f0                	sub    eax,esi
c00126a0:	01 d8                	add    eax,ebx
c00126a2:	50                   	push   eax
c00126a3:	57                   	push   edi
c00126a4:	e8 b9 fc ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126b1:	74 03                	je     c00126b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126b3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126bc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126c0:	75 d6                	jne    c0012698 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126c2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c7:	75 10                	jne    c00126d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126c9:	0f 20 d8             	mov    eax,cr3
c00126cc:	0f 22 d8             	mov    cr3,eax
c00126cf:	83 c4 1c             	add    esp,0x1c
c00126d2:	89 f0                	mov    eax,esi
c00126d4:	5b                   	pop    ebx
c00126d5:	5e                   	pop    esi
c00126d6:	5f                   	pop    edi
c00126d7:	5d                   	pop    ebp
c00126d8:	c3                   	ret    
c00126d9:	89 f3                	mov    ebx,esi
c00126db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126df:	c1 eb 0a             	shr    ebx,0xa
c00126e2:	c1 e0 0c             	shl    eax,0xc
c00126e5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126eb:	01 f0                	add    eax,esi
c00126ed:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126f3:	c1 e8 0a             	shr    eax,0xa
c00126f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126fb:	2d 00 00 40 00       	sub    eax,0x400000
c0012700:	39 c3                	cmp    ebx,eax
c0012702:	77 cb                	ja     c00126cf <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012704:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012707:	81 c3 00 10 00 00    	add    ebx,0x1000
c001270d:	39 d8                	cmp    eax,ebx
c001270f:	73 f3                	jae    c0012704 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012711:	83 c4 1c             	add    esp,0x1c
c0012714:	89 f0                	mov    eax,esi
c0012716:	5b                   	pop    ebx
c0012717:	5e                   	pop    esi
c0012718:	5f                   	pop    edi
c0012719:	5d                   	pop    ebp
c001271a:	c3                   	ret    
c001271b:	90                   	nop

c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001271c:	55                   	push   ebp
c001271d:	57                   	push   edi
c001271e:	56                   	push   esi
c001271f:	53                   	push   ebx
c0012720:	83 ec 1c             	sub    esp,0x1c
c0012723:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012727:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001272b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001272f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012733:	a9 ff 0f 00 00       	test   eax,0xfff
c0012738:	75 4a                	jne    c0012784 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001273a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001273e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012741:	c1 eb 16             	shr    ebx,0x16
c0012744:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001274b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001274f:	74 4d                	je     c001279e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012751:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012755:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012759:	c1 e8 0a             	shr    eax,0xa
c001275c:	80 fa 01             	cmp    dl,0x1
c001275f:	19 d2                	sbb    edx,edx
c0012761:	c1 e3 0c             	shl    ebx,0xc
c0012764:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012768:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001276e:	25 fc 0f 00 00       	and    eax,0xffc
c0012773:	01 d8                	add    eax,ebx
c0012775:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001277c:	83 c4 1c             	add    esp,0x1c
c001277f:	5b                   	pop    ebx
c0012780:	5e                   	pop    esi
c0012781:	5f                   	pop    edi
c0012782:	5d                   	pop    ebp
c0012783:	c3                   	ret    
c0012784:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012788:	83 ec 0c             	sub    esp,0xc
c001278b:	68 68 a8 02 c0       	push   0xc002a868
c0012790:	e8 b2 7e 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001279c:	eb 9c                	jmp    c001273a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001279e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127a2:	e8 46 d7 ff ff       	call   c000feed <Phys::allocatePage()>
c00127a7:	89 c5                	mov    ebp,eax
c00127a9:	e8 38 f6 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00127ae:	83 ec 0c             	sub    esp,0xc
c00127b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127b5:	6a 01                	push   0x1
c00127b7:	e8 8f f3 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c00127bc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127c3:	6a 01                	push   0x1
c00127c5:	50                   	push   eax
c00127c6:	55                   	push   ebp
c00127c7:	81 cd 07 04 00 00    	or     ebp,0x407
c00127cd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127d1:	51                   	push   ecx
c00127d2:	e8 7f fe ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127d7:	83 c4 1c             	add    esp,0x1c
c00127da:	68 00 10 00 00       	push   0x1000
c00127df:	6a 00                	push   0x0
c00127e1:	50                   	push   eax
c00127e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127e6:	e8 95 df fe ff       	call   c0000780 <memset>
c00127eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127f2:	e8 04 f8 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c00127f7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012804:	e9 48 ff ff ff       	jmp    c0012751 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012809:	90                   	nop

c001280a <VAS::VAS(bool)>:
c001280a:	53                   	push   ebx
c001280b:	83 ec 28             	sub    esp,0x28
c001280e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012812:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001281a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012821:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012825:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001282c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012830:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012834:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012837:	e8 b1 d6 ff ff       	call   c000feed <Phys::allocatePage()>
c001283c:	89 c2                	mov    edx,eax
c001283e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012842:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012845:	e8 9c f5 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001284a:	89 c3                	mov    ebx,eax
c001284c:	83 ec 0c             	sub    esp,0xc
c001284f:	6a 01                	push   0x1
c0012851:	e8 f5 f2 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0012856:	83 c4 10             	add    esp,0x10
c0012859:	89 c2                	mov    edx,eax
c001285b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001285f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012862:	83 ec 0c             	sub    esp,0xc
c0012865:	6a 03                	push   0x3
c0012867:	6a 01                	push   0x1
c0012869:	52                   	push   edx
c001286a:	50                   	push   eax
c001286b:	53                   	push   ebx
c001286c:	e8 e5 fd ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012871:	83 c4 20             	add    esp,0x20
c0012874:	89 c2                	mov    edx,eax
c0012876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001287a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001287d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012885:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001288d:	7f 1c                	jg     c00128ab <VAS::VAS(bool)+0xa1>
c001288f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012893:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012896:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001289a:	c1 e2 02             	shl    edx,0x2
c001289d:	01 d0                	add    eax,edx
c001289f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128a5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128a9:	eb da                	jmp    c0012885 <VAS::VAS(bool)+0x7b>
c00128ab:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128b3:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128bb:	7f 7a                	jg     c0012937 <VAS::VAS(bool)+0x12d>
c00128bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128c1:	2d 00 02 00 00       	sub    eax,0x200
c00128c6:	c1 e0 0c             	shl    eax,0xc
c00128c9:	83 c8 03             	or     eax,0x3
c00128cc:	89 c2                	mov    edx,eax
c00128ce:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00128d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128d9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128df:	83 e0 10             	and    eax,0x10
c00128e2:	84 c0                	test   al,al
c00128e4:	74 07                	je     c00128ed <VAS::VAS(bool)+0xe3>
c00128e6:	b8 00 01 00 00       	mov    eax,0x100
c00128eb:	eb 05                	jmp    c00128f2 <VAS::VAS(bool)+0xe8>
c00128ed:	b8 00 00 00 00       	mov    eax,0x0
c00128f2:	09 d0                	or     eax,edx
c00128f4:	89 c1                	mov    ecx,eax
c00128f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012901:	c1 e2 02             	shl    edx,0x2
c0012904:	01 d0                	add    eax,edx
c0012906:	89 ca                	mov    edx,ecx
c0012908:	89 10                	mov    DWORD PTR [eax],edx
c001290a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290e:	2d 40 03 00 00       	sub    eax,0x340
c0012913:	83 f8 7f             	cmp    eax,0x7f
c0012916:	77 16                	ja     c001292e <VAS::VAS(bool)+0x124>
c0012918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001291c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001291f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012923:	c1 e2 02             	shl    edx,0x2
c0012926:	01 d0                	add    eax,edx
c0012928:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001292e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012932:	e9 7c ff ff ff       	jmp    c00128b3 <VAS::VAS(bool)+0xa9>
c0012937:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001293c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012942:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012948:	83 e0 10             	and    eax,0x10
c001294b:	84 c0                	test   al,al
c001294d:	74 07                	je     c0012956 <VAS::VAS(bool)+0x14c>
c001294f:	b8 03 41 00 00       	mov    eax,0x4103
c0012954:	eb 05                	jmp    c001295b <VAS::VAS(bool)+0x151>
c0012956:	b8 03 40 00 00       	mov    eax,0x4003
c001295b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001295f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012962:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012968:	89 02                	mov    DWORD PTR [edx],eax
c001296a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001296f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012975:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001297b:	83 ec 08             	sub    esp,0x8
c001297e:	50                   	push   eax
c001297f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012983:	e8 b2 fc ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c0012988:	83 c4 10             	add    esp,0x10
c001298b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001298f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012992:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012997:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001299d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129a3:	83 e0 10             	and    eax,0x10
c00129a6:	84 c0                	test   al,al
c00129a8:	74 07                	je     c00129b1 <VAS::VAS(bool)+0x1a7>
c00129aa:	b8 00 01 00 00       	mov    eax,0x100
c00129af:	eb 05                	jmp    c00129b6 <VAS::VAS(bool)+0x1ac>
c00129b1:	b8 00 00 00 00       	mov    eax,0x0
c00129b6:	09 c2                	or     edx,eax
c00129b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129bf:	05 fc 0f 00 00       	add    eax,0xffc
c00129c4:	83 ca 03             	or     edx,0x3
c00129c7:	89 10                	mov    DWORD PTR [eax],edx
c00129c9:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00129ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d4:	83 ec 0c             	sub    esp,0xc
c00129d7:	50                   	push   eax
c00129d8:	e8 45 1c 00 00       	call   c0014622 <Device::getName()>
c00129dd:	83 c4 10             	add    esp,0x10
c00129e0:	83 ec 08             	sub    esp,0x8
c00129e3:	68 ad a9 02 c0       	push   0xc002a9ad
c00129e8:	50                   	push   eax
c00129e9:	e8 da de fe ff       	call   c00008c8 <strcmp>
c00129ee:	83 c4 10             	add    esp,0x10
c00129f1:	85 c0                	test   eax,eax
c00129f3:	0f 94 c0             	sete   al
c00129f6:	84 c0                	test   al,al
c00129f8:	74 70                	je     c0012a6a <VAS::VAS(bool)+0x260>
c00129fa:	e8 06 b4 00 00       	call   c001de05 <disableIRQs()>
c00129ff:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012a04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a0a:	05 7c 09 00 00       	add    eax,0x97c
c0012a0f:	83 ec 0c             	sub    esp,0xc
c0012a12:	50                   	push   eax
c0012a13:	e8 ac c8 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a18:	83 c4 10             	add    esp,0x10
c0012a1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a20:	89 c3                	mov    ebx,eax
c0012a22:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0012a27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a2d:	05 7c 09 00 00       	add    eax,0x97c
c0012a32:	83 ec 0c             	sub    esp,0xc
c0012a35:	50                   	push   eax
c0012a36:	e8 89 c8 ff ff       	call   c000f2c4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a3b:	83 c4 10             	add    esp,0x10
c0012a3e:	83 ec 08             	sub    esp,0x8
c0012a41:	50                   	push   eax
c0012a42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a46:	e8 91 f5 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a50:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a55:	6a 11                	push   0x11
c0012a57:	53                   	push   ebx
c0012a58:	50                   	push   eax
c0012a59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a5d:	e8 00 f9 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a62:	83 c4 10             	add    esp,0x10
c0012a65:	e8 a9 b3 00 00       	call   c001de13 <enableIRQs()>
c0012a6a:	90                   	nop
c0012a6b:	83 c4 28             	add    esp,0x28
c0012a6e:	5b                   	pop    ebx
c0012a6f:	c3                   	ret    

c0012a70 <VAS::evict(unsigned long)>:
c0012a70:	55                   	push   ebp
c0012a71:	57                   	push   edi
c0012a72:	56                   	push   esi
c0012a73:	53                   	push   ebx
c0012a74:	83 ec 1c             	sub    esp,0x1c
c0012a77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a7b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a83:	e8 04 f2 ff ff       	call   c0011c8c <Virt::allocateSwapfilePage()>
c0012a88:	89 c7                	mov    edi,eax
c0012a8a:	a1 ac d5 02 c0       	mov    eax,ds:0xc002d5ac
c0012a8f:	85 c0                	test   eax,eax
c0012a91:	7e 3d                	jle    c0012ad0 <VAS::evict(unsigned long)+0x60>
c0012a93:	89 ee                	mov    esi,ebp
c0012a95:	31 db                	xor    ebx,ebx
c0012a97:	83 ec 0c             	sub    esp,0xc
c0012a9a:	57                   	push   edi
c0012a9b:	e8 da f1 ff ff       	call   c0011c7a <Virt::swapIDToSector(unsigned long)>
c0012aa0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa3:	01 d8                	add    eax,ebx
c0012aa5:	6a 01                	push   0x1
c0012aa7:	31 d2                	xor    edx,edx
c0012aa9:	43                   	inc    ebx
c0012aaa:	52                   	push   edx
c0012aab:	81 c6 00 02 00 00    	add    esi,0x200
c0012ab1:	50                   	push   eax
c0012ab2:	0f be 05 b8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5b8
c0012ab9:	ff 34 85 1c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14e4]
c0012ac0:	e8 41 3d 00 00       	call   c0016806 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac5:	83 c4 20             	add    esp,0x20
c0012ac8:	39 1d ac d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ac,ebx
c0012ace:	7f c7                	jg     c0012a97 <VAS::evict(unsigned long)+0x27>
c0012ad0:	83 ec 08             	sub    esp,0x8
c0012ad3:	c1 e7 0b             	shl    edi,0xb
c0012ad6:	55                   	push   ebp
c0012ad7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012adb:	e8 fc f4 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012ae0:	83 c4 0c             	add    esp,0xc
c0012ae3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ae5:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012aeb:	09 d7                	or     edi,edx
c0012aed:	89 38                	mov    DWORD PTR [eax],edi
c0012aef:	a1 88 e7 02 c0       	mov    eax,ds:0xc002e788
c0012af4:	40                   	inc    eax
c0012af5:	a3 88 e7 02 c0       	mov    ds:0xc002e788,eax
c0012afa:	0f 20 da             	mov    edx,cr3
c0012afd:	0f 22 da             	mov    cr3,edx
c0012b00:	50                   	push   eax
c0012b01:	55                   	push   ebp
c0012b02:	68 bb a9 02 c0       	push   0xc002a9bb
c0012b07:	e8 fd 03 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012b0c:	a1 84 e7 02 c0       	mov    eax,ds:0xc002e784
c0012b11:	c7 44 24 40 d0 a9 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a9d0
c0012b19:	8d 50 01             	lea    edx,[eax+0x1]
c0012b1c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012b20:	89 15 84 e7 02 c0    	mov    DWORD PTR ds:0xc002e784,edx
c0012b26:	83 c4 2c             	add    esp,0x2c
c0012b29:	5b                   	pop    ebx
c0012b2a:	5e                   	pop    esi
c0012b2b:	5f                   	pop    edi
c0012b2c:	5d                   	pop    ebp
c0012b2d:	e9 d7 03 00 00       	jmp    c0012f09 <Dbg::kprintf(char const*, ...)>

c0012b32 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b32:	55                   	push   ebp
c0012b33:	57                   	push   edi
c0012b34:	56                   	push   esi
c0012b35:	53                   	push   ebx
c0012b36:	83 ec 0c             	sub    esp,0xc
c0012b39:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b3d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b43:	0f 84 d1 00 00 00    	je     c0012c1a <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012b49:	56                   	push   esi
c0012b4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b4e:	e8 89 f4 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012b53:	5b                   	pop    ebx
c0012b54:	85 c0                	test   eax,eax
c0012b56:	5f                   	pop    edi
c0012b57:	89 c3                	mov    ebx,eax
c0012b59:	0f 84 bb 00 00 00    	je     c0012c1a <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012b5f:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b61:	31 c0                	xor    eax,eax
c0012b63:	89 fa                	mov    edx,edi
c0012b65:	81 e2 01 04 00 00    	and    edx,0x401
c0012b6b:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b71:	0f 85 a5 00 00 00    	jne    c0012c1c <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012b77:	e8 71 d3 ff ff       	call   c000feed <Phys::allocatePage()>
c0012b7c:	c1 ef 0b             	shr    edi,0xb
c0012b7f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b81:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b87:	09 c2                	or     edx,eax
c0012b89:	81 ca 01 08 00 00    	or     edx,0x801
c0012b8f:	89 13                	mov    DWORD PTR [ebx],edx
c0012b91:	8b 0d ac d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5ac
c0012b97:	85 c9                	test   ecx,ecx
c0012b99:	7e 3d                	jle    c0012bd8 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b9b:	89 f5                	mov    ebp,esi
c0012b9d:	31 db                	xor    ebx,ebx
c0012b9f:	83 ec 0c             	sub    esp,0xc
c0012ba2:	57                   	push   edi
c0012ba3:	e8 d2 f0 ff ff       	call   c0011c7a <Virt::swapIDToSector(unsigned long)>
c0012ba8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012bab:	01 d8                	add    eax,ebx
c0012bad:	6a 01                	push   0x1
c0012baf:	31 d2                	xor    edx,edx
c0012bb1:	43                   	inc    ebx
c0012bb2:	52                   	push   edx
c0012bb3:	81 c5 00 02 00 00    	add    ebp,0x200
c0012bb9:	50                   	push   eax
c0012bba:	0f be 05 b8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5b8
c0012bc1:	ff 34 85 1c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14e4]
c0012bc8:	e8 cd 3b 00 00       	call   c001679a <LogicalDisk::read(unsigned long long, int, void*)>
c0012bcd:	83 c4 20             	add    esp,0x20
c0012bd0:	39 1d ac d5 02 c0    	cmp    DWORD PTR ds:0xc002d5ac,ebx
c0012bd6:	7f c7                	jg     c0012b9f <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012bd8:	a1 88 e7 02 c0       	mov    eax,ds:0xc002e788
c0012bdd:	48                   	dec    eax
c0012bde:	52                   	push   edx
c0012bdf:	a3 88 e7 02 c0       	mov    ds:0xc002e788,eax
c0012be4:	50                   	push   eax
c0012be5:	56                   	push   esi
c0012be6:	68 e1 a9 02 c0       	push   0xc002a9e1
c0012beb:	e8 19 03 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012bf0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bf3:	e8 64 f0 ff ff       	call   c0011c5c <Virt::freeSwapfilePage(unsigned long)>
c0012bf8:	e8 27 b2 00 00       	call   c001de24 <unlockScheduler()>
c0012bfd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c01:	83 c4 10             	add    esp,0x10
c0012c04:	25 ff 0f 00 00       	and    eax,0xfff
c0012c09:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012c0e:	77 14                	ja     c0012c24 <VAS::tryLoadBackOffDisk(unsigned long)+0xf2>
c0012c10:	0f 20 d8             	mov    eax,cr3
c0012c13:	0f 22 d8             	mov    cr3,eax
c0012c16:	b0 01                	mov    al,0x1
c0012c18:	eb 02                	jmp    c0012c1c <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012c1a:	31 c0                	xor    eax,eax
c0012c1c:	83 c4 0c             	add    esp,0xc
c0012c1f:	5b                   	pop    ebx
c0012c20:	5e                   	pop    esi
c0012c21:	5f                   	pop    edi
c0012c22:	5d                   	pop    ebp
c0012c23:	c3                   	ret    
c0012c24:	83 ec 0c             	sub    esp,0xc
c0012c27:	68 f6 a9 02 c0       	push   0xc002a9f6
c0012c2c:	e8 d8 02 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	eb da                	jmp    c0012c10 <VAS::tryLoadBackOffDisk(unsigned long)+0xde>

c0012c36 <VAS::scanForEviction()>:
c0012c36:	57                   	push   edi
c0012c37:	56                   	push   esi
c0012c38:	53                   	push   ebx
c0012c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c3d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c40:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c46:	75 0e                	jne    c0012c56 <VAS::scanForEviction()+0x20>
c0012c48:	89 da                	mov    edx,ebx
c0012c4a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c4d:	c1 ea 16             	shr    edx,0x16
c0012c50:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c54:	74 48                	je     c0012c9e <VAS::scanForEviction()+0x68>
c0012c56:	53                   	push   ebx
c0012c57:	56                   	push   esi
c0012c58:	e8 7f f3 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c0012c5d:	5a                   	pop    edx
c0012c5e:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c60:	59                   	pop    ecx
c0012c61:	89 fa                	mov    edx,edi
c0012c63:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c69:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c6f:	74 3d                	je     c0012cae <VAS::scanForEviction()+0x78>
c0012c71:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c77:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c7d:	76 2a                	jbe    c0012ca9 <VAS::scanForEviction()+0x73>
c0012c7f:	31 db                	xor    ebx,ebx
c0012c81:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c88:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c8e:	75 c6                	jne    c0012c56 <VAS::scanForEviction()+0x20>
c0012c90:	89 da                	mov    edx,ebx
c0012c92:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c95:	c1 ea 16             	shr    edx,0x16
c0012c98:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c9c:	75 b8                	jne    c0012c56 <VAS::scanForEviction()+0x20>
c0012c9e:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012ca4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012ca7:	eb 97                	jmp    c0012c40 <VAS::scanForEviction()+0xa>
c0012ca9:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012cac:	eb 92                	jmp    c0012c40 <VAS::scanForEviction()+0xa>
c0012cae:	f7 c7 01 00 00 00    	test   edi,0x1
c0012cb4:	74 bb                	je     c0012c71 <VAS::scanForEviction()+0x3b>
c0012cb6:	f7 c7 20 00 00 00    	test   edi,0x20
c0012cbc:	74 0a                	je     c0012cc8 <VAS::scanForEviction()+0x92>
c0012cbe:	83 e7 df             	and    edi,0xffffffdf
c0012cc1:	89 38                	mov    DWORD PTR [eax],edi
c0012cc3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012cc6:	eb a9                	jmp    c0012c71 <VAS::scanForEviction()+0x3b>
c0012cc8:	83 ec 08             	sub    esp,0x8
c0012ccb:	53                   	push   ebx
c0012ccc:	56                   	push   esi
c0012ccd:	e8 9e fd ff ff       	call   c0012a70 <VAS::evict(unsigned long)>
c0012cd2:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	89 f8                	mov    eax,edi
c0012cde:	5b                   	pop    ebx
c0012cdf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ce4:	5e                   	pop    esi
c0012ce5:	5f                   	pop    edi
c0012ce6:	c3                   	ret    

c0012ce7 <mapVASFirstTime>:
c0012ce7:	55                   	push   ebp
c0012ce8:	57                   	push   edi
c0012ce9:	56                   	push   esi
c0012cea:	53                   	push   ebx
c0012ceb:	83 ec 0c             	sub    esp,0xc
c0012cee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cf3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cf6:	4a                   	dec    edx
c0012cf7:	0f 84 8e 00 00 00    	je     c0012d8b <mapVASFirstTime+0xa4>
c0012cfd:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d00:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d03:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d08:	c1 e5 15             	shl    ebp,0x15
c0012d0b:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d10:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d16:	29 eb                	sub    ebx,ebp
c0012d18:	29 ee                	sub    esi,ebp
c0012d1a:	e8 ce d1 ff ff       	call   c000feed <Phys::allocatePage()>
c0012d1f:	83 ec 0c             	sub    esp,0xc
c0012d22:	68 03 04 00 00       	push   0x403
c0012d27:	6a 01                	push   0x1
c0012d29:	53                   	push   ebx
c0012d2a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d30:	50                   	push   eax
c0012d31:	57                   	push   edi
c0012d32:	e8 1f f9 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d37:	83 c4 20             	add    esp,0x20
c0012d3a:	39 f3                	cmp    ebx,esi
c0012d3c:	75 dc                	jne    c0012d1a <mapVASFirstTime+0x33>
c0012d3e:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d43:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d48:	29 ee                	sub    esi,ebp
c0012d4a:	29 e8                	sub    eax,ebp
c0012d4c:	89 c5                	mov    ebp,eax
c0012d4e:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d52:	19 db                	sbb    ebx,ebx
c0012d54:	e8 94 d1 ff ff       	call   c000feed <Phys::allocatePage()>
c0012d59:	83 e3 04             	and    ebx,0x4
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d65:	53                   	push   ebx
c0012d66:	6a 01                	push   0x1
c0012d68:	56                   	push   esi
c0012d69:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d6f:	50                   	push   eax
c0012d70:	57                   	push   edi
c0012d71:	e8 e0 f8 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d76:	83 c4 20             	add    esp,0x20
c0012d79:	39 f5                	cmp    ebp,esi
c0012d7b:	75 d1                	jne    c0012d4e <mapVASFirstTime+0x67>
c0012d7d:	0f 20 d8             	mov    eax,cr3
c0012d80:	0f 22 d8             	mov    cr3,eax
c0012d83:	83 c4 0c             	add    esp,0xc
c0012d86:	5b                   	pop    ebx
c0012d87:	5e                   	pop    esi
c0012d88:	5f                   	pop    edi
c0012d89:	5d                   	pop    ebp
c0012d8a:	c3                   	ret    
c0012d8b:	83 ec 0c             	sub    esp,0xc
c0012d8e:	68 06 aa 02 c0       	push   0xc002aa06
c0012d93:	e8 71 01 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012d98:	83 c4 10             	add    esp,0x10
c0012d9b:	83 c4 0c             	add    esp,0xc
c0012d9e:	5b                   	pop    ebx
c0012d9f:	5e                   	pop    esi
c0012da0:	5f                   	pop    edi
c0012da1:	5d                   	pop    ebp
c0012da2:	c3                   	ret    

c0012da3 <__cxa_atexit>:
c0012da3:	31 c0                	xor    eax,eax
c0012da5:	c3                   	ret    

c0012da6 <__cxa_finalize>:
c0012da6:	c3                   	ret    

c0012da7 <__stack_chk_fail>:
c0012da7:	55                   	push   ebp
c0012da8:	89 e5                	mov    ebp,esp
c0012daa:	83 ec 14             	sub    esp,0x14
c0012dad:	68 1f aa 02 c0       	push   0xc002aa1f
c0012db2:	e8 52 01 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012db7:	58                   	pop    eax
c0012db8:	5a                   	pop    edx
c0012db9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012dbc:	68 6f aa 02 c0       	push   0xc002aa6f
c0012dc1:	e8 43 01 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012dc6:	59                   	pop    ecx
c0012dc7:	58                   	pop    eax
c0012dc8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dcb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dce:	68 6f aa 02 c0       	push   0xc002aa6f
c0012dd3:	e8 31 01 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012dd8:	5a                   	pop    edx
c0012dd9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ddc:	59                   	pop    ecx
c0012ddd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ddf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012de2:	68 6f aa 02 c0       	push   0xc002aa6f
c0012de7:	e8 1d 01 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012dec:	5a                   	pop    edx
c0012ded:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012df0:	59                   	pop    ecx
c0012df1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012df3:	8b 00                	mov    eax,DWORD PTR [eax]
c0012df5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012df8:	68 6f aa 02 c0       	push   0xc002aa6f
c0012dfd:	e8 07 01 00 00       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0012e02:	c7 04 24 77 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa77
c0012e09:	e8 39 78 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	c9                   	leave  
c0012e12:	c3                   	ret    

c0012e13 <__cxa_pure_virtual>:
c0012e13:	83 ec 18             	sub    esp,0x18
c0012e16:	68 8f aa 02 c0       	push   0xc002aa8f
c0012e1b:	e8 27 78 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0012e20:	83 c4 1c             	add    esp,0x1c
c0012e23:	c3                   	ret    

c0012e24 <operator new[](unsigned long)>:
c0012e24:	e9 22 ca ff ff       	jmp    c000f84b <malloc>

c0012e29 <operator delete(void*, unsigned long)>:
c0012e29:	e9 3d ca ff ff       	jmp    c000f86b <rfree>

c0012e2e <operator delete[](void*)>:
c0012e2e:	e9 38 ca ff ff       	jmp    c000f86b <rfree>

c0012e33 <operator delete[](void*, unsigned long)>:
c0012e33:	e9 33 ca ff ff       	jmp    c000f86b <rfree>

c0012e38 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e38:	57                   	push   edi
c0012e39:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e3e:	56                   	push   esi
c0012e3f:	be a4 aa 02 c0       	mov    esi,0xc002aaa4
c0012e44:	53                   	push   ebx
c0012e45:	83 ec 40             	sub    esp,0x40
c0012e48:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e4c:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e50:	fc                   	cld    
c0012e51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e53:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e57:	83 f9 3e             	cmp    ecx,0x3e
c0012e5a:	7e 05                	jle    c0012e61 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e5c:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e61:	89 df                	mov    edi,ebx
c0012e63:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e67:	eb 02                	jmp    c0012e6b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e69:	89 c7                	mov    edi,eax
c0012e6b:	31 d2                	xor    edx,edx
c0012e6d:	46                   	inc    esi
c0012e6e:	89 f8                	mov    eax,edi
c0012e70:	f7 f1                	div    ecx
c0012e72:	39 cf                	cmp    edi,ecx
c0012e74:	73 f3                	jae    c0012e69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e76:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e79:	eb 02                	jmp    c0012e7d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e7b:	89 c3                	mov    ebx,eax
c0012e7d:	31 d2                	xor    edx,edx
c0012e7f:	4e                   	dec    esi
c0012e80:	89 d8                	mov    eax,ebx
c0012e82:	f7 f1                	div    ecx
c0012e84:	39 cb                	cmp    ebx,ecx
c0012e86:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e8a:	88 16                	mov    BYTE PTR [esi],dl
c0012e8c:	73 ed                	jae    c0012e7b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e8e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e92:	83 c4 40             	add    esp,0x40
c0012e95:	5b                   	pop    ebx
c0012e96:	5e                   	pop    esi
c0012e97:	5f                   	pop    edi
c0012e98:	c3                   	ret    

c0012e99 <Dbg::logc(char)>:
c0012e99:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e9d:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ea2:	ec                   	in     al,dx
c0012ea3:	a8 20                	test   al,0x20
c0012ea5:	74 fb                	je     c0012ea2 <Dbg::logc(char)+0x9>
c0012ea7:	ba f8 03 00 00       	mov    edx,0x3f8
c0012eac:	88 c8                	mov    al,cl
c0012eae:	ee                   	out    dx,al
c0012eaf:	c3                   	ret    

c0012eb0 <Dbg::logs(char*)>:
c0012eb0:	53                   	push   ebx
c0012eb1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012eb5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012eb8:	84 c0                	test   al,al
c0012eba:	74 0f                	je     c0012ecb <Dbg::logs(char*)+0x1b>
c0012ebc:	50                   	push   eax
c0012ebd:	43                   	inc    ebx
c0012ebe:	e8 d6 ff ff ff       	call   c0012e99 <Dbg::logc(char)>
c0012ec3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ec6:	5a                   	pop    edx
c0012ec7:	84 c0                	test   al,al
c0012ec9:	75 f1                	jne    c0012ebc <Dbg::logs(char*)+0xc>
c0012ecb:	5b                   	pop    ebx
c0012ecc:	c3                   	ret    

c0012ecd <Dbg::logWriteInt(unsigned int)>:
c0012ecd:	83 ec 10             	sub    esp,0x10
c0012ed0:	6a 0a                	push   0xa
c0012ed2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ed6:	50                   	push   eax
c0012ed7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012edb:	e8 58 ff ff ff       	call   c0012e38 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ee0:	50                   	push   eax
c0012ee1:	e8 ca ff ff ff       	call   c0012eb0 <Dbg::logs(char*)>
c0012ee6:	83 c4 20             	add    esp,0x20
c0012ee9:	c3                   	ret    

c0012eea <Dbg::logWriteIntBase(unsigned int, int)>:
c0012eea:	83 ec 10             	sub    esp,0x10
c0012eed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ef1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ef5:	50                   	push   eax
c0012ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012efa:	e8 39 ff ff ff       	call   c0012e38 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012eff:	50                   	push   eax
c0012f00:	e8 ab ff ff ff       	call   c0012eb0 <Dbg::logs(char*)>
c0012f05:	83 c4 20             	add    esp,0x20
c0012f08:	c3                   	ret    

c0012f09 <Dbg::kprintf(char const*, ...)>:
c0012f09:	55                   	push   ebp
c0012f0a:	57                   	push   edi
c0012f0b:	56                   	push   esi
c0012f0c:	53                   	push   ebx
c0012f0d:	83 ec 0c             	sub    esp,0xc
c0012f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f14:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f1c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f1f:	84 c0                	test   al,al
c0012f21:	74 4a                	je     c0012f6d <Dbg::kprintf(char const*, ...)+0x64>
c0012f23:	31 db                	xor    ebx,ebx
c0012f25:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f28:	3c 25                	cmp    al,0x25
c0012f2a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f2d:	0f 85 e4 00 00 00    	jne    c0013017 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f33:	83 c3 02             	add    ebx,0x2
c0012f36:	8a 07                	mov    al,BYTE PTR [edi]
c0012f38:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f3b:	83 e8 25             	sub    eax,0x25
c0012f3e:	3c 53                	cmp    al,0x53
c0012f40:	0f 87 ba 00 00 00    	ja     c0013000 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f46:	0f b6 c0             	movzx  eax,al
c0012f49:	ff 24 85 e4 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd551c]
c0012f50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f54:	89 c8                	mov    eax,ecx
c0012f56:	83 c1 04             	add    ecx,0x4
c0012f59:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f5d:	ff 30                	push   DWORD PTR [eax]
c0012f5f:	e8 4c ff ff ff       	call   c0012eb0 <Dbg::logs(char*)>
c0012f64:	58                   	pop    eax
c0012f65:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f69:	84 c0                	test   al,al
c0012f6b:	75 b8                	jne    c0012f25 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f6d:	83 c4 0c             	add    esp,0xc
c0012f70:	5b                   	pop    ebx
c0012f71:	5e                   	pop    esi
c0012f72:	5f                   	pop    edi
c0012f73:	5d                   	pop    ebp
c0012f74:	c3                   	ret    
c0012f75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f79:	89 d0                	mov    eax,edx
c0012f7b:	83 c2 04             	add    edx,0x4
c0012f7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f82:	ff 30                	push   DWORD PTR [eax]
c0012f84:	e8 44 ff ff ff       	call   c0012ecd <Dbg::logWriteInt(unsigned int)>
c0012f89:	58                   	pop    eax
c0012f8a:	eb d9                	jmp    c0012f65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f90:	89 d0                	mov    eax,edx
c0012f92:	83 c2 04             	add    edx,0x4
c0012f95:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f98:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f9c:	50                   	push   eax
c0012f9d:	e8 f7 fe ff ff       	call   c0012e99 <Dbg::logc(char)>
c0012fa2:	58                   	pop    eax
c0012fa3:	eb c0                	jmp    c0012f65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fa9:	89 c8                	mov    eax,ecx
c0012fab:	83 c1 04             	add    ecx,0x4
c0012fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fb2:	ff 30                	push   DWORD PTR [eax]
c0012fb4:	e8 14 ff ff ff       	call   c0012ecd <Dbg::logWriteInt(unsigned int)>
c0012fb9:	5f                   	pop    edi
c0012fba:	eb a9                	jmp    c0012f65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fbc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fc0:	89 c8                	mov    eax,ecx
c0012fc2:	83 c1 04             	add    ecx,0x4
c0012fc5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fc9:	6a 10                	push   0x10
c0012fcb:	ff 30                	push   DWORD PTR [eax]
c0012fcd:	e8 18 ff ff ff       	call   c0012eea <Dbg::logWriteIntBase(unsigned int, int)>
c0012fd2:	59                   	pop    ecx
c0012fd3:	5f                   	pop    edi
c0012fd4:	eb 8f                	jmp    c0012f65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fda:	89 d0                	mov    eax,edx
c0012fdc:	83 c2 08             	add    edx,0x8
c0012fdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fe3:	6a 10                	push   0x10
c0012fe5:	ff 30                	push   DWORD PTR [eax]
c0012fe7:	e8 fe fe ff ff       	call   c0012eea <Dbg::logWriteIntBase(unsigned int, int)>
c0012fec:	58                   	pop    eax
c0012fed:	5a                   	pop    edx
c0012fee:	e9 72 ff ff ff       	jmp    c0012f65 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff3:	6a 25                	push   0x25
c0012ff5:	e8 9f fe ff ff       	call   c0012e99 <Dbg::logc(char)>
c0012ffa:	58                   	pop    eax
c0012ffb:	e9 65 ff ff ff       	jmp    c0012f65 <Dbg::kprintf(char const*, ...)+0x5c>
c0013000:	6a 25                	push   0x25
c0013002:	e8 92 fe ff ff       	call   c0012e99 <Dbg::logc(char)>
c0013007:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001300a:	50                   	push   eax
c001300b:	e8 89 fe ff ff       	call   c0012e99 <Dbg::logc(char)>
c0013010:	5a                   	pop    edx
c0013011:	59                   	pop    ecx
c0013012:	e9 4e ff ff ff       	jmp    c0012f65 <Dbg::kprintf(char const*, ...)+0x5c>
c0013017:	50                   	push   eax
c0013018:	89 eb                	mov    ebx,ebp
c001301a:	e8 7a fe ff ff       	call   c0012e99 <Dbg::logc(char)>
c001301f:	89 fd                	mov    ebp,edi
c0013021:	58                   	pop    eax
c0013022:	e9 3e ff ff ff       	jmp    c0012f65 <Dbg::kprintf(char const*, ...)+0x5c>
c0013027:	90                   	nop

c0013028 <File::read(unsigned long long, void*, int*)>:
c0013028:	53                   	push   ebx
c0013029:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001302d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013031:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013038:	3c 19                	cmp    al,0x19
c001303a:	77 35                	ja     c0013071 <File::read(unsigned long long, void*, int*)+0x49>
c001303c:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0013043:	85 c0                	test   eax,eax
c0013045:	74 2a                	je     c0013071 <File::read(unsigned long long, void*, int*)+0x49>
c0013047:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001304d:	85 c0                	test   eax,eax
c001304f:	74 20                	je     c0013071 <File::read(unsigned long long, void*, int*)+0x49>
c0013051:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013055:	74 21                	je     c0013078 <File::read(unsigned long long, void*, int*)+0x50>
c0013057:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013059:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001305d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013063:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013067:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001306b:	5b                   	pop    ebx
c001306c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001306f:	ff e0                	jmp    eax
c0013071:	b8 0b 00 00 00       	mov    eax,0xb
c0013076:	eb 05                	jmp    c001307d <File::read(unsigned long long, void*, int*)+0x55>
c0013078:	b8 05 00 00 00       	mov    eax,0x5
c001307d:	5b                   	pop    ebx
c001307e:	c3                   	ret    
c001307f:	90                   	nop

c0013080 <File::write(unsigned long long, void*, int*)>:
c0013080:	53                   	push   ebx
c0013081:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013085:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013089:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013090:	3c 19                	cmp    al,0x19
c0013092:	77 35                	ja     c00130c9 <File::write(unsigned long long, void*, int*)+0x49>
c0013094:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c001309b:	85 c0                	test   eax,eax
c001309d:	74 2a                	je     c00130c9 <File::write(unsigned long long, void*, int*)+0x49>
c001309f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130a5:	85 c0                	test   eax,eax
c00130a7:	74 20                	je     c00130c9 <File::write(unsigned long long, void*, int*)+0x49>
c00130a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130ad:	74 21                	je     c00130d0 <File::write(unsigned long long, void*, int*)+0x50>
c00130af:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130b5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130c3:	5b                   	pop    ebx
c00130c4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00130c7:	ff e0                	jmp    eax
c00130c9:	b8 0b 00 00 00       	mov    eax,0xb
c00130ce:	eb 05                	jmp    c00130d5 <File::write(unsigned long long, void*, int*)+0x55>
c00130d0:	b8 05 00 00 00       	mov    eax,0x5
c00130d5:	5b                   	pop    ebx
c00130d6:	c3                   	ret    
c00130d7:	90                   	nop

c00130d8 <Directory::read(unsigned long long, void*, int*)>:
c00130d8:	53                   	push   ebx
c00130d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130e1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130e8:	3c 19                	cmp    al,0x19
c00130ea:	77 35                	ja     c0013121 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130ec:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c00130f3:	85 c0                	test   eax,eax
c00130f5:	74 2a                	je     c0013121 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130f7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130fd:	85 c0                	test   eax,eax
c00130ff:	74 20                	je     c0013121 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013101:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013105:	74 21                	je     c0013128 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013107:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013109:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001310d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013113:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013117:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001311b:	5b                   	pop    ebx
c001311c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001311f:	ff e0                	jmp    eax
c0013121:	b8 0b 00 00 00       	mov    eax,0xb
c0013126:	eb 05                	jmp    c001312d <Directory::read(unsigned long long, void*, int*)+0x55>
c0013128:	b8 05 00 00 00       	mov    eax,0x5
c001312d:	5b                   	pop    ebx
c001312e:	c3                   	ret    
c001312f:	90                   	nop

c0013130 <Directory::write(unsigned long long, void*, int*)>:
c0013130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013134:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001313b:	b8 0b 00 00 00       	mov    eax,0xb
c0013140:	80 fa 19             	cmp    dl,0x19
c0013143:	77 18                	ja     c001315d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013145:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c001314c:	85 d2                	test   edx,edx
c001314e:	74 0d                	je     c001315d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013150:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013157:	19 c0                	sbb    eax,eax
c0013159:	83 e0 0a             	and    eax,0xa
c001315c:	40                   	inc    eax
c001315d:	c3                   	ret    

c001315e <File::isAtty()>:
c001315e:	31 c0                	xor    eax,eax
c0013160:	c3                   	ret    
c0013161:	90                   	nop

c0013162 <Directory::isAtty()>:
c0013162:	31 c0                	xor    eax,eax
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013166:	b8 0a 00 00 00       	mov    eax,0xa
c001316b:	c3                   	ret    

c001316c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001316c:	b8 0a 00 00 00       	mov    eax,0xa
c0013171:	c3                   	ret    

c0013172 <Filesystem::getFileFirstSector(char const*)>:
c0013172:	31 c0                	xor    eax,eax
c0013174:	31 d2                	xor    edx,edx
c0013176:	c3                   	ret    
c0013177:	90                   	nop

c0013178 <File::~File()>:
c0013178:	83 ec 0c             	sub    esp,0xc
c001317b:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c0013180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013184:	89 10                	mov    DWORD PTR [eax],edx
c0013186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001318a:	83 ec 0c             	sub    esp,0xc
c001318d:	50                   	push   eax
c001318e:	e8 57 e7 ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c0013193:	83 c4 10             	add    esp,0x10
c0013196:	90                   	nop
c0013197:	83 c4 0c             	add    esp,0xc
c001319a:	c3                   	ret    
c001319b:	90                   	nop

c001319c <File::~File()>:
c001319c:	83 ec 0c             	sub    esp,0xc
c001319f:	83 ec 0c             	sub    esp,0xc
c00131a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131a6:	e8 cd ff ff ff       	call   c0013178 <File::~File()>
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	83 ec 08             	sub    esp,0x8
c00131b1:	68 14 01 00 00       	push   0x114
c00131b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ba:	e8 6a fc ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00131bf:	83 c4 10             	add    esp,0x10
c00131c2:	83 c4 0c             	add    esp,0xc
c00131c5:	c3                   	ret    

c00131c6 <Directory::~Directory()>:
c00131c6:	83 ec 0c             	sub    esp,0xc
c00131c9:	ba c0 ac 02 c0       	mov    edx,0xc002acc0
c00131ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d2:	89 10                	mov    DWORD PTR [eax],edx
c00131d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d8:	83 ec 0c             	sub    esp,0xc
c00131db:	50                   	push   eax
c00131dc:	e8 09 e7 ff ff       	call   c00118ea <UnixFile::~UnixFile()>
c00131e1:	83 c4 10             	add    esp,0x10
c00131e4:	90                   	nop
c00131e5:	83 c4 0c             	add    esp,0xc
c00131e8:	c3                   	ret    
c00131e9:	90                   	nop

c00131ea <Directory::~Directory()>:
c00131ea:	83 ec 0c             	sub    esp,0xc
c00131ed:	83 ec 0c             	sub    esp,0xc
c00131f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131f4:	e8 cd ff ff ff       	call   c00131c6 <Directory::~Directory()>
c00131f9:	83 c4 10             	add    esp,0x10
c00131fc:	83 ec 08             	sub    esp,0x8
c00131ff:	68 14 01 00 00       	push   0x114
c0013204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013208:	e8 1c fc ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	83 c4 0c             	add    esp,0xc
c0013213:	c3                   	ret    

c0013214 <Filesystem::Filesystem()>:
c0013214:	ba 3c ac 02 c0       	mov    edx,0xc002ac3c
c0013219:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001321d:	89 10                	mov    DWORD PTR [eax],edx
c001321f:	8b 15 94 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e794
c0013225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013229:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001322c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013230:	a3 94 e7 02 c0       	mov    ds:0xc002e794,eax
c0013235:	90                   	nop
c0013236:	c3                   	ret    
c0013237:	90                   	nop

c0013238 <Filesystem::~Filesystem()>:
c0013238:	ba 3c ac 02 c0       	mov    edx,0xc002ac3c
c001323d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013241:	89 10                	mov    DWORD PTR [eax],edx
c0013243:	90                   	nop
c0013244:	c3                   	ret    
c0013245:	90                   	nop

c0013246 <Filesystem::~Filesystem()>:
c0013246:	83 ec 0c             	sub    esp,0xc
c0013249:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001324d:	e8 e6 ff ff ff       	call   c0013238 <Filesystem::~Filesystem()>
c0013252:	83 c4 04             	add    esp,0x4
c0013255:	83 ec 08             	sub    esp,0x8
c0013258:	6a 08                	push   0x8
c001325a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001325e:	e8 c6 fb ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0013263:	83 c4 10             	add    esp,0x10
c0013266:	83 c4 0c             	add    esp,0xc
c0013269:	c3                   	ret    

c001326a <Fs::getcwd(Process*, char*, int)>:
c001326a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001326e:	31 c0                	xor    eax,eax
c0013270:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013273:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013277:	7d 15                	jge    c001328e <Fs::getcwd(Process*, char*, int)+0x24>
c0013279:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001327d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013284:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013287:	84 c9                	test   cl,cl
c0013289:	74 06                	je     c0013291 <Fs::getcwd(Process*, char*, int)+0x27>
c001328b:	40                   	inc    eax
c001328c:	eb e2                	jmp    c0013270 <Fs::getcwd(Process*, char*, int)+0x6>
c001328e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013291:	31 c0                	xor    eax,eax
c0013293:	c3                   	ret    

c0013294 <Fs::initVFS()>:
c0013294:	83 ec 18             	sub    esp,0x18
c0013297:	6a 08                	push   0x8
c0013299:	e8 ad c5 ff ff       	call   c000f84b <malloc>
c001329e:	89 04 24             	mov    DWORD PTR [esp],eax
c00132a1:	e8 1a de 00 00       	call   c00210c0 <FAT::FAT()>
c00132a6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132ad:	e8 99 c5 ff ff       	call   c000f84b <malloc>
c00132b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00132b5:	e8 5e f0 00 00       	call   c0022318 <ISO9660::ISO9660()>
c00132ba:	83 c4 1c             	add    esp,0x1c
c00132bd:	c3                   	ret    

c00132be <Fs::standardiseFiles(char*, char const*, char const*)>:
c00132be:	55                   	push   ebp
c00132bf:	57                   	push   edi
c00132c0:	56                   	push   esi
c00132c1:	53                   	push   ebx
c00132c2:	81 ec 10 04 00 00    	sub    esp,0x410
c00132c8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132cf:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132d6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132dd:	68 00 04 00 00       	push   0x400
c00132e2:	6a 00                	push   0x0
c00132e4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132e8:	56                   	push   esi
c00132e9:	e8 92 d4 fe ff       	call   c0000780 <memset>
c00132ee:	83 c4 10             	add    esp,0x10
c00132f1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132f5:	75 0b                	jne    c0013302 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132f7:	50                   	push   eax
c00132f8:	50                   	push   eax
c00132f9:	57                   	push   edi
c00132fa:	56                   	push   esi
c00132fb:	e8 3c d5 fe ff       	call   c000083c <strcpy>
c0013300:	eb 41                	jmp    c0013343 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013302:	8a 07                	mov    al,BYTE PTR [edi]
c0013304:	3c 5c                	cmp    al,0x5c
c0013306:	74 04                	je     c001330c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013308:	3c 2f                	cmp    al,0x2f
c001330a:	75 18                	jne    c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001330c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001330f:	3c 60                	cmp    al,0x60
c0013311:	7e 03                	jle    c0013316 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013313:	83 e8 20             	sub    eax,0x20
c0013316:	88 04 24             	mov    BYTE PTR [esp],al
c0013319:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013320:	50                   	push   eax
c0013321:	50                   	push   eax
c0013322:	eb 18                	jmp    c001333c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013324:	50                   	push   eax
c0013325:	50                   	push   eax
c0013326:	55                   	push   ebp
c0013327:	56                   	push   esi
c0013328:	e8 0f d5 fe ff       	call   c000083c <strcpy>
c001332d:	5a                   	pop    edx
c001332e:	59                   	pop    ecx
c001332f:	68 91 c3 02 c0       	push   0xc002c391
c0013334:	56                   	push   esi
c0013335:	e8 42 d6 fe ff       	call   c000097c <strcat>
c001333a:	5d                   	pop    ebp
c001333b:	58                   	pop    eax
c001333c:	57                   	push   edi
c001333d:	56                   	push   esi
c001333e:	e8 39 d6 fe ff       	call   c000097c <strcat>
c0013343:	83 c4 10             	add    esp,0x10
c0013346:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013349:	3c 60                	cmp    al,0x60
c001334b:	7e 03                	jle    c0013350 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001334d:	83 e8 20             	sub    eax,0x20
c0013350:	88 04 24             	mov    BYTE PTR [esp],al
c0013353:	88 03                	mov    BYTE PTR [ebx],al
c0013355:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001335c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013362:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013366:	bf 03 00 00 00       	mov    edi,0x3
c001336b:	b8 03 00 00 00       	mov    eax,0x3
c0013370:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013373:	84 d2                	test   dl,dl
c0013375:	0f 84 91 00 00 00    	je     c001340c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001337b:	8d 4f 01             	lea    ecx,[edi+0x1]
c001337e:	80 fa 5c             	cmp    dl,0x5c
c0013381:	74 05                	je     c0013388 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013383:	80 fa 2f             	cmp    dl,0x2f
c0013386:	75 12                	jne    c001339a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013388:	89 c5                	mov    ebp,eax
c001338a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001338f:	74 09                	je     c001339a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013391:	40                   	inc    eax
c0013392:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013396:	89 cf                	mov    edi,ecx
c0013398:	eb d6                	jmp    c0013370 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001339a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001339f:	75 5b                	jne    c00133fc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133a1:	80 fa 2e             	cmp    dl,0x2e
c00133a4:	75 56                	jne    c00133fc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00133a6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00133aa:	74 19                	je     c00133c5 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00133ac:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133b1:	74 53                	je     c0013406 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133b3:	89 f9                	mov    ecx,edi
c00133b5:	41                   	inc    ecx
c00133b6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133b9:	80 fa 2f             	cmp    dl,0x2f
c00133bc:	74 f7                	je     c00133b5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133be:	80 fa 5c             	cmp    dl,0x5c
c00133c1:	74 f2                	je     c00133b5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00133c3:	eb d1                	jmp    c0013396 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133c5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133ca:	74 3a                	je     c0013406 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133cc:	83 f8 03             	cmp    eax,0x3
c00133cf:	74 c5                	je     c0013396 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d1:	41                   	inc    ecx
c00133d2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133d5:	80 fa 2f             	cmp    dl,0x2f
c00133d8:	74 f7                	je     c00133d1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133da:	80 fa 5c             	cmp    dl,0x5c
c00133dd:	74 f2                	je     c00133d1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133df:	48                   	dec    eax
c00133e0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133e4:	75 06                	jne    c00133ec <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133e6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ea:	eb f3                	jmp    c00133df <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133ec:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133f0:	74 07                	je     c00133f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133f6:	48                   	dec    eax
c00133f7:	eb f3                	jmp    c00133ec <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133f9:	40                   	inc    eax
c00133fa:	eb 9a                	jmp    c0013396 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133fc:	80 fa 2f             	cmp    dl,0x2f
c00133ff:	74 95                	je     c0013396 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013401:	80 fa 5c             	cmp    dl,0x5c
c0013404:	74 90                	je     c0013396 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013406:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013409:	40                   	inc    eax
c001340a:	eb 8a                	jmp    c0013396 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001340c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013410:	83 ec 0c             	sub    esp,0xc
c0013413:	53                   	push   ebx
c0013414:	e8 83 d3 fe ff       	call   c000079c <strlen>
c0013419:	83 c4 10             	add    esp,0x10
c001341c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013421:	75 26                	jne    c0013449 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013423:	83 ec 0c             	sub    esp,0xc
c0013426:	53                   	push   ebx
c0013427:	e8 70 d3 fe ff       	call   c000079c <strlen>
c001342c:	83 c4 10             	add    esp,0x10
c001342f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013434:	74 26                	je     c001345c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013436:	83 ec 0c             	sub    esp,0xc
c0013439:	53                   	push   ebx
c001343a:	e8 5d d3 fe ff       	call   c000079c <strlen>
c001343f:	83 c4 10             	add    esp,0x10
c0013442:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013447:	eb c7                	jmp    c0013410 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013449:	83 ec 0c             	sub    esp,0xc
c001344c:	53                   	push   ebx
c001344d:	e8 4a d3 fe ff       	call   c000079c <strlen>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001345a:	74 c7                	je     c0013423 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001345c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013462:	5b                   	pop    ebx
c0013463:	5e                   	pop    esi
c0013464:	5f                   	pop    edi
c0013465:	5d                   	pop    ebp
c0013466:	c3                   	ret    
c0013467:	90                   	nop

c0013468 <File::File(char const*, Process*)>:
c0013468:	83 ec 0c             	sub    esp,0xc
c001346b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346f:	83 ec 08             	sub    esp,0x8
c0013472:	6a 00                	push   0x0
c0013474:	50                   	push   eax
c0013475:	e8 8e e2 ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c001347a:	83 c4 10             	add    esp,0x10
c001347d:	ba a4 ac 02 c0       	mov    edx,0xc002aca4
c0013482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013486:	89 10                	mov    DWORD PTR [eax],edx
c0013488:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013496:	83 c0 0d             	add    eax,0xd
c0013499:	83 ec 04             	sub    esp,0x4
c001349c:	52                   	push   edx
c001349d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a1:	50                   	push   eax
c00134a2:	e8 17 fe ff ff       	call   c00132be <Fs::standardiseFiles(char*, char const*, char const*)>
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ae:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00134b1:	8d 50 bf             	lea    edx,[eax-0x41]
c00134b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00134be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00134c6:	90                   	nop
c00134c7:	83 c4 0c             	add    esp,0xc
c00134ca:	c3                   	ret    
c00134cb:	90                   	nop

c00134cc <File::open(FileOpenMode)>:
c00134cc:	53                   	push   ebx
c00134cd:	b8 0b 00 00 00       	mov    eax,0xb
c00134d2:	83 ec 08             	sub    esp,0x8
c00134d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134d9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134e0:	80 fa 19             	cmp    dl,0x19
c00134e3:	77 40                	ja     c0013525 <File::open(FileOpenMode)+0x59>
c00134e5:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c00134ec:	85 d2                	test   edx,edx
c00134ee:	74 35                	je     c0013525 <File::open(FileOpenMode)+0x59>
c00134f0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134f6:	85 d2                	test   edx,edx
c00134f8:	74 2b                	je     c0013525 <File::open(FileOpenMode)+0x59>
c00134fa:	b8 06 00 00 00       	mov    eax,0x6
c00134ff:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013503:	75 20                	jne    c0013525 <File::open(FileOpenMode)+0x59>
c0013505:	8b 02                	mov    eax,DWORD PTR [edx]
c0013507:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001350d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013511:	51                   	push   ecx
c0013512:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013515:	51                   	push   ecx
c0013516:	52                   	push   edx
c0013517:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001351a:	83 c4 10             	add    esp,0x10
c001351d:	85 c0                	test   eax,eax
c001351f:	75 04                	jne    c0013525 <File::open(FileOpenMode)+0x59>
c0013521:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013525:	83 c4 08             	add    esp,0x8
c0013528:	5b                   	pop    ebx
c0013529:	c3                   	ret    

c001352a <File::close()>:
c001352a:	53                   	push   ebx
c001352b:	b8 0b 00 00 00       	mov    eax,0xb
c0013530:	83 ec 08             	sub    esp,0x8
c0013533:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013537:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001353e:	80 fa 19             	cmp    dl,0x19
c0013541:	77 41                	ja     c0013584 <File::close()+0x5a>
c0013543:	8b 1c 95 20 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13e0]
c001354a:	85 db                	test   ebx,ebx
c001354c:	74 36                	je     c0013584 <File::close()+0x5a>
c001354e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013555:	74 2d                	je     c0013584 <File::close()+0x5a>
c0013557:	b8 05 00 00 00       	mov    eax,0x5
c001355c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013560:	74 22                	je     c0013584 <File::close()+0x5a>
c0013562:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013566:	8b 04 95 20 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13e0]
c001356d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013573:	53                   	push   ebx
c0013574:	53                   	push   ebx
c0013575:	8b 10                	mov    edx,DWORD PTR [eax]
c0013577:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001357d:	50                   	push   eax
c001357e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013581:	83 c4 10             	add    esp,0x10
c0013584:	83 c4 08             	add    esp,0x8
c0013587:	5b                   	pop    ebx
c0013588:	c3                   	ret    
c0013589:	90                   	nop

c001358a <File::seek(unsigned long long)>:
c001358a:	56                   	push   esi
c001358b:	53                   	push   ebx
c001358c:	b8 0b 00 00 00       	mov    eax,0xb
c0013591:	51                   	push   ecx
c0013592:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013596:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001359a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00135a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135a5:	80 fa 19             	cmp    dl,0x19
c00135a8:	77 31                	ja     c00135db <File::seek(unsigned long long)+0x51>
c00135aa:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c00135b1:	85 d2                	test   edx,edx
c00135b3:	74 26                	je     c00135db <File::seek(unsigned long long)+0x51>
c00135b5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135bb:	85 d2                	test   edx,edx
c00135bd:	74 1c                	je     c00135db <File::seek(unsigned long long)+0x51>
c00135bf:	b8 05 00 00 00       	mov    eax,0x5
c00135c4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135c8:	74 11                	je     c00135db <File::seek(unsigned long long)+0x51>
c00135ca:	8b 02                	mov    eax,DWORD PTR [edx]
c00135cc:	53                   	push   ebx
c00135cd:	51                   	push   ecx
c00135ce:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135d4:	52                   	push   edx
c00135d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	5a                   	pop    edx
c00135dc:	5b                   	pop    ebx
c00135dd:	5e                   	pop    esi
c00135de:	c3                   	ret    
c00135df:	90                   	nop

c00135e0 <File::tell(unsigned long long*)>:
c00135e0:	83 ec 0c             	sub    esp,0xc
c00135e3:	b8 0b 00 00 00       	mov    eax,0xb
c00135e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135ec:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135f3:	80 fa 19             	cmp    dl,0x19
c00135f6:	77 34                	ja     c001362c <File::tell(unsigned long long*)+0x4c>
c00135f8:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c00135ff:	85 d2                	test   edx,edx
c0013601:	74 29                	je     c001362c <File::tell(unsigned long long*)+0x4c>
c0013603:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013609:	85 d2                	test   edx,edx
c001360b:	74 1f                	je     c001362c <File::tell(unsigned long long*)+0x4c>
c001360d:	b8 05 00 00 00       	mov    eax,0x5
c0013612:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013616:	74 14                	je     c001362c <File::tell(unsigned long long*)+0x4c>
c0013618:	50                   	push   eax
c0013619:	8b 02                	mov    eax,DWORD PTR [edx]
c001361b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001361f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013625:	52                   	push   edx
c0013626:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	83 c4 0c             	add    esp,0xc
c001362f:	c3                   	ret    

c0013630 <File::rewind()>:
c0013630:	83 ec 10             	sub    esp,0x10
c0013633:	6a 00                	push   0x0
c0013635:	6a 00                	push   0x0
c0013637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001363b:	e8 4a ff ff ff       	call   c001358a <File::seek(unsigned long long)>
c0013640:	83 c4 1c             	add    esp,0x1c
c0013643:	c3                   	ret    

c0013644 <File::unlink()>:
c0013644:	83 ec 0c             	sub    esp,0xc
c0013647:	b8 0b 00 00 00       	mov    eax,0xb
c001364c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013650:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013657:	80 f9 19             	cmp    cl,0x19
c001365a:	77 2f                	ja     c001368b <File::unlink()+0x47>
c001365c:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013663:	85 c9                	test   ecx,ecx
c0013665:	74 24                	je     c001368b <File::unlink()+0x47>
c0013667:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001366d:	85 c9                	test   ecx,ecx
c001366f:	74 1a                	je     c001368b <File::unlink()+0x47>
c0013671:	b8 06 00 00 00       	mov    eax,0x6
c0013676:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001367a:	75 0f                	jne    c001368b <File::unlink()+0x47>
c001367c:	83 c2 0d             	add    edx,0xd
c001367f:	50                   	push   eax
c0013680:	50                   	push   eax
c0013681:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013683:	52                   	push   edx
c0013684:	51                   	push   ecx
c0013685:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013688:	83 c4 10             	add    esp,0x10
c001368b:	83 c4 0c             	add    esp,0xc
c001368e:	c3                   	ret    
c001368f:	90                   	nop

c0013690 <File::rename(char const*)>:
c0013690:	83 ec 0c             	sub    esp,0xc
c0013693:	b8 0b 00 00 00       	mov    eax,0xb
c0013698:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001369c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136a3:	80 f9 19             	cmp    cl,0x19
c00136a6:	77 32                	ja     c00136da <File::rename(char const*)+0x4a>
c00136a8:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c00136af:	85 c9                	test   ecx,ecx
c00136b1:	74 27                	je     c00136da <File::rename(char const*)+0x4a>
c00136b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136b9:	85 c9                	test   ecx,ecx
c00136bb:	74 1d                	je     c00136da <File::rename(char const*)+0x4a>
c00136bd:	b8 06 00 00 00       	mov    eax,0x6
c00136c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136c6:	75 12                	jne    c00136da <File::rename(char const*)+0x4a>
c00136c8:	83 c2 0d             	add    edx,0xd
c00136cb:	50                   	push   eax
c00136cc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136d2:	52                   	push   edx
c00136d3:	51                   	push   ecx
c00136d4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136d7:	83 c4 10             	add    esp,0x10
c00136da:	83 c4 0c             	add    esp,0xc
c00136dd:	c3                   	ret    

c00136de <File::chfatattr(unsigned char, unsigned char)>:
c00136de:	57                   	push   edi
c00136df:	b8 0b 00 00 00       	mov    eax,0xb
c00136e4:	56                   	push   esi
c00136e5:	53                   	push   ebx
c00136e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136f9:	80 f9 19             	cmp    cl,0x19
c00136fc:	77 37                	ja     c0013735 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136fe:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013705:	85 c9                	test   ecx,ecx
c0013707:	74 2c                	je     c0013735 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013709:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001370f:	85 c9                	test   ecx,ecx
c0013711:	74 22                	je     c0013735 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013713:	b8 06 00 00 00       	mov    eax,0x6
c0013718:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001371c:	75 17                	jne    c0013735 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001371e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013720:	89 f0                	mov    eax,esi
c0013722:	83 c2 0d             	add    edx,0xd
c0013725:	0f b6 f0             	movzx  esi,al
c0013728:	0f b6 db             	movzx  ebx,bl
c001372b:	56                   	push   esi
c001372c:	53                   	push   ebx
c001372d:	52                   	push   edx
c001372e:	51                   	push   ecx
c001372f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013732:	83 c4 10             	add    esp,0x10
c0013735:	5b                   	pop    ebx
c0013736:	5e                   	pop    esi
c0013737:	5f                   	pop    edi
c0013738:	c3                   	ret    
c0013739:	90                   	nop

c001373a <File::exists()>:
c001373a:	83 ec 0c             	sub    esp,0xc
c001373d:	31 c0                	xor    eax,eax
c001373f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001374a:	80 f9 19             	cmp    cl,0x19
c001374d:	77 24                	ja     c0013773 <File::exists()+0x39>
c001374f:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013756:	85 c9                	test   ecx,ecx
c0013758:	74 19                	je     c0013773 <File::exists()+0x39>
c001375a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013760:	85 c9                	test   ecx,ecx
c0013762:	74 0f                	je     c0013773 <File::exists()+0x39>
c0013764:	83 c2 0d             	add    edx,0xd
c0013767:	50                   	push   eax
c0013768:	50                   	push   eax
c0013769:	8b 01                	mov    eax,DWORD PTR [ecx]
c001376b:	52                   	push   edx
c001376c:	51                   	push   ecx
c001376d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013770:	83 c4 10             	add    esp,0x10
c0013773:	83 c4 0c             	add    esp,0xc
c0013776:	c3                   	ret    
c0013777:	90                   	nop

c0013778 <File::stat(unsigned long long*, bool*)>:
c0013778:	56                   	push   esi
c0013779:	53                   	push   ebx
c001377a:	50                   	push   eax
c001377b:	b8 0b 00 00 00       	mov    eax,0xb
c0013780:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013784:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013788:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001378f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013793:	80 f9 19             	cmp    cl,0x19
c0013796:	77 3d                	ja     c00137d5 <File::stat(unsigned long long*, bool*)+0x5d>
c0013798:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c001379f:	85 c9                	test   ecx,ecx
c00137a1:	74 32                	je     c00137d5 <File::stat(unsigned long long*, bool*)+0x5d>
c00137a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137a9:	85 c9                	test   ecx,ecx
c00137ab:	74 28                	je     c00137d5 <File::stat(unsigned long long*, bool*)+0x5d>
c00137ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137af:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137b3:	74 13                	je     c00137c8 <File::stat(unsigned long long*, bool*)+0x50>
c00137b5:	83 ec 04             	sub    esp,0x4
c00137b8:	56                   	push   esi
c00137b9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00137bf:	51                   	push   ecx
c00137c0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00137c3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00137c6:	eb 0a                	jmp    c00137d2 <File::stat(unsigned long long*, bool*)+0x5a>
c00137c8:	53                   	push   ebx
c00137c9:	83 c2 0d             	add    edx,0xd
c00137cc:	56                   	push   esi
c00137cd:	52                   	push   edx
c00137ce:	51                   	push   ecx
c00137cf:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137d2:	83 c4 10             	add    esp,0x10
c00137d5:	5a                   	pop    edx
c00137d6:	5b                   	pop    ebx
c00137d7:	5e                   	pop    esi
c00137d8:	c3                   	ret    

c00137d9 <Fs::setcwd(Process*, char*)>:
c00137d9:	55                   	push   ebp
c00137da:	57                   	push   edi
c00137db:	56                   	push   esi
c00137dc:	53                   	push   ebx
c00137dd:	81 ec 20 02 00 00    	sub    esp,0x220
c00137e3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137ea:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137f0:	57                   	push   edi
c00137f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137f8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137fc:	56                   	push   esi
c00137fd:	e8 bc fa ff ff       	call   c00132be <Fs::standardiseFiles(char*, char const*, char const*)>
c0013802:	89 34 24             	mov    DWORD PTR [esp],esi
c0013805:	e8 92 cf fe ff       	call   c000079c <strlen>
c001380a:	83 c4 10             	add    esp,0x10
c001380d:	83 f8 02             	cmp    eax,0x2
c0013810:	77 17                	ja     c0013829 <Fs::setcwd(Process*, char*)+0x50>
c0013812:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013817:	83 e8 41             	sub    eax,0x41
c001381a:	83 f8 19             	cmp    eax,0x19
c001381d:	76 24                	jbe    c0013843 <Fs::setcwd(Process*, char*)+0x6a>
c001381f:	b8 03 00 00 00       	mov    eax,0x3
c0013824:	e9 e0 00 00 00       	jmp    c0013909 <Fs::setcwd(Process*, char*)+0x130>
c0013829:	83 ec 0c             	sub    esp,0xc
c001382c:	56                   	push   esi
c001382d:	e8 6a cf fe ff       	call   c000079c <strlen>
c0013832:	83 c4 10             	add    esp,0x10
c0013835:	83 f8 03             	cmp    eax,0x3
c0013838:	75 34                	jne    c001386e <Fs::setcwd(Process*, char*)+0x95>
c001383a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001383f:	75 2d                	jne    c001386e <Fs::setcwd(Process*, char*)+0x95>
c0013841:	eb cf                	jmp    c0013812 <Fs::setcwd(Process*, char*)+0x39>
c0013843:	8b 14 85 20 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13e0]
c001384a:	b8 05 00 00 00       	mov    eax,0x5
c001384f:	85 d2                	test   edx,edx
c0013851:	0f 84 b2 00 00 00    	je     c0013909 <Fs::setcwd(Process*, char*)+0x130>
c0013857:	b8 06 00 00 00       	mov    eax,0x6
c001385c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013863:	0f 85 92 00 00 00    	jne    c00138fb <Fs::setcwd(Process*, char*)+0x122>
c0013869:	e9 9b 00 00 00       	jmp    c0013909 <Fs::setcwd(Process*, char*)+0x130>
c001386e:	83 ec 0c             	sub    esp,0xc
c0013871:	68 14 01 00 00       	push   0x114
c0013876:	e8 d0 bf ff ff       	call   c000f84b <malloc>
c001387b:	83 c4 0c             	add    esp,0xc
c001387e:	89 c3                	mov    ebx,eax
c0013880:	55                   	push   ebp
c0013881:	56                   	push   esi
c0013882:	50                   	push   eax
c0013883:	e8 e0 fb ff ff       	call   c0013468 <File::File(char const*, Process*)>
c0013888:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001388d:	83 c4 0c             	add    esp,0xc
c0013890:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013894:	50                   	push   eax
c0013895:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013899:	50                   	push   eax
c001389a:	53                   	push   ebx
c001389b:	e8 d8 fe ff ff       	call   c0013778 <File::stat(unsigned long long*, bool*)>
c00138a0:	83 c4 10             	add    esp,0x10
c00138a3:	83 f8 02             	cmp    eax,0x2
c00138a6:	74 04                	je     c00138ac <Fs::setcwd(Process*, char*)+0xd3>
c00138a8:	85 c0                	test   eax,eax
c00138aa:	74 1c                	je     c00138c8 <Fs::setcwd(Process*, char*)+0xef>
c00138ac:	b8 01 00 00 00       	mov    eax,0x1
c00138b1:	85 db                	test   ebx,ebx
c00138b3:	74 54                	je     c0013909 <Fs::setcwd(Process*, char*)+0x130>
c00138b5:	83 ec 0c             	sub    esp,0xc
c00138b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138ba:	53                   	push   ebx
c00138bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138be:	83 c4 10             	add    esp,0x10
c00138c1:	b8 01 00 00 00       	mov    eax,0x1
c00138c6:	eb 41                	jmp    c0013909 <Fs::setcwd(Process*, char*)+0x130>
c00138c8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138cd:	75 1c                	jne    c00138eb <Fs::setcwd(Process*, char*)+0x112>
c00138cf:	b8 02 00 00 00       	mov    eax,0x2
c00138d4:	85 db                	test   ebx,ebx
c00138d6:	74 31                	je     c0013909 <Fs::setcwd(Process*, char*)+0x130>
c00138d8:	83 ec 0c             	sub    esp,0xc
c00138db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138dd:	53                   	push   ebx
c00138de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138e1:	83 c4 10             	add    esp,0x10
c00138e4:	b8 02 00 00 00       	mov    eax,0x2
c00138e9:	eb 1e                	jmp    c0013909 <Fs::setcwd(Process*, char*)+0x130>
c00138eb:	85 db                	test   ebx,ebx
c00138ed:	74 0c                	je     c00138fb <Fs::setcwd(Process*, char*)+0x122>
c00138ef:	83 ec 0c             	sub    esp,0xc
c00138f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138f4:	53                   	push   ebx
c00138f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138f8:	83 c4 10             	add    esp,0x10
c00138fb:	50                   	push   eax
c00138fc:	50                   	push   eax
c00138fd:	56                   	push   esi
c00138fe:	57                   	push   edi
c00138ff:	e8 38 cf fe ff       	call   c000083c <strcpy>
c0013904:	83 c4 10             	add    esp,0x10
c0013907:	31 c0                	xor    eax,eax
c0013909:	81 c4 1c 02 00 00    	add    esp,0x21c
c001390f:	5b                   	pop    ebx
c0013910:	5e                   	pop    esi
c0013911:	5f                   	pop    edi
c0013912:	5d                   	pop    ebp
c0013913:	c3                   	ret    

c0013914 <Directory::Directory(char const*, Process*)>:
c0013914:	83 ec 0c             	sub    esp,0xc
c0013917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391b:	83 ec 08             	sub    esp,0x8
c001391e:	6a 00                	push   0x0
c0013920:	50                   	push   eax
c0013921:	e8 e2 dd ff ff       	call   c0011708 <UnixFile::UnixFile(int)>
c0013926:	83 c4 10             	add    esp,0x10
c0013929:	ba c0 ac 02 c0       	mov    edx,0xc002acc0
c001392e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013932:	89 10                	mov    DWORD PTR [eax],edx
c0013934:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013938:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001393e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013942:	83 c0 0d             	add    eax,0xd
c0013945:	83 ec 04             	sub    esp,0x4
c0013948:	52                   	push   edx
c0013949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001394d:	50                   	push   eax
c001394e:	e8 6b f9 ff ff       	call   c00132be <Fs::standardiseFiles(char*, char const*, char const*)>
c0013953:	83 c4 10             	add    esp,0x10
c0013956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001395a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001395d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013964:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001396a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001396e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013972:	90                   	nop
c0013973:	83 c4 0c             	add    esp,0xc
c0013976:	c3                   	ret    
c0013977:	90                   	nop

c0013978 <Directory::open()>:
c0013978:	53                   	push   ebx
c0013979:	b8 0b 00 00 00       	mov    eax,0xb
c001397e:	83 ec 08             	sub    esp,0x8
c0013981:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013985:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001398c:	80 fa 19             	cmp    dl,0x19
c001398f:	77 3d                	ja     c00139ce <Directory::open()+0x56>
c0013991:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c0013998:	85 d2                	test   edx,edx
c001399a:	74 32                	je     c00139ce <Directory::open()+0x56>
c001399c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00139a2:	85 d2                	test   edx,edx
c00139a4:	74 28                	je     c00139ce <Directory::open()+0x56>
c00139a6:	b8 06 00 00 00       	mov    eax,0x6
c00139ab:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00139af:	75 1d                	jne    c00139ce <Directory::open()+0x56>
c00139b1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00139b7:	50                   	push   eax
c00139b8:	8b 02                	mov    eax,DWORD PTR [edx]
c00139ba:	51                   	push   ecx
c00139bb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00139be:	51                   	push   ecx
c00139bf:	52                   	push   edx
c00139c0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00139c3:	83 c4 10             	add    esp,0x10
c00139c6:	85 c0                	test   eax,eax
c00139c8:	75 04                	jne    c00139ce <Directory::open()+0x56>
c00139ca:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139ce:	83 c4 08             	add    esp,0x8
c00139d1:	5b                   	pop    ebx
c00139d2:	c3                   	ret    
c00139d3:	90                   	nop

c00139d4 <Directory::close()>:
c00139d4:	53                   	push   ebx
c00139d5:	b8 0b 00 00 00       	mov    eax,0xb
c00139da:	83 ec 08             	sub    esp,0x8
c00139dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139e1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139e8:	80 fa 19             	cmp    dl,0x19
c00139eb:	77 41                	ja     c0013a2e <Directory::close()+0x5a>
c00139ed:	8b 1c 95 20 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13e0]
c00139f4:	85 db                	test   ebx,ebx
c00139f6:	74 36                	je     c0013a2e <Directory::close()+0x5a>
c00139f8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139ff:	74 2d                	je     c0013a2e <Directory::close()+0x5a>
c0013a01:	b8 05 00 00 00       	mov    eax,0x5
c0013a06:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a0a:	74 22                	je     c0013a2e <Directory::close()+0x5a>
c0013a0c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a10:	8b 04 95 20 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13e0]
c0013a17:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a1d:	53                   	push   ebx
c0013a1e:	53                   	push   ebx
c0013a1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a21:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a27:	50                   	push   eax
c0013a28:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a2b:	83 c4 10             	add    esp,0x10
c0013a2e:	83 c4 08             	add    esp,0x8
c0013a31:	5b                   	pop    ebx
c0013a32:	c3                   	ret    
c0013a33:	90                   	nop

c0013a34 <Directory::unlink()>:
c0013a34:	83 ec 0c             	sub    esp,0xc
c0013a37:	b8 0b 00 00 00       	mov    eax,0xb
c0013a3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a47:	80 f9 19             	cmp    cl,0x19
c0013a4a:	77 2f                	ja     c0013a7b <Directory::unlink()+0x47>
c0013a4c:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013a53:	85 c9                	test   ecx,ecx
c0013a55:	74 24                	je     c0013a7b <Directory::unlink()+0x47>
c0013a57:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a5d:	85 c9                	test   ecx,ecx
c0013a5f:	74 1a                	je     c0013a7b <Directory::unlink()+0x47>
c0013a61:	b8 06 00 00 00       	mov    eax,0x6
c0013a66:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a6a:	75 0f                	jne    c0013a7b <Directory::unlink()+0x47>
c0013a6c:	83 c2 0d             	add    edx,0xd
c0013a6f:	50                   	push   eax
c0013a70:	50                   	push   eax
c0013a71:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a73:	52                   	push   edx
c0013a74:	51                   	push   ecx
c0013a75:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a78:	83 c4 10             	add    esp,0x10
c0013a7b:	83 c4 0c             	add    esp,0xc
c0013a7e:	c3                   	ret    
c0013a7f:	90                   	nop

c0013a80 <Directory::rename(char const*)>:
c0013a80:	83 ec 0c             	sub    esp,0xc
c0013a83:	b8 0b 00 00 00       	mov    eax,0xb
c0013a88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a93:	80 f9 19             	cmp    cl,0x19
c0013a96:	77 32                	ja     c0013aca <Directory::rename(char const*)+0x4a>
c0013a98:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013a9f:	85 c9                	test   ecx,ecx
c0013aa1:	74 27                	je     c0013aca <Directory::rename(char const*)+0x4a>
c0013aa3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013aa9:	85 c9                	test   ecx,ecx
c0013aab:	74 1d                	je     c0013aca <Directory::rename(char const*)+0x4a>
c0013aad:	b8 06 00 00 00       	mov    eax,0x6
c0013ab2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ab6:	75 12                	jne    c0013aca <Directory::rename(char const*)+0x4a>
c0013ab8:	83 c2 0d             	add    edx,0xd
c0013abb:	50                   	push   eax
c0013abc:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013abe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ac2:	52                   	push   edx
c0013ac3:	51                   	push   ecx
c0013ac4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ac7:	83 c4 10             	add    esp,0x10
c0013aca:	83 c4 0c             	add    esp,0xc
c0013acd:	c3                   	ret    

c0013ace <Directory::exists()>:
c0013ace:	83 ec 0c             	sub    esp,0xc
c0013ad1:	31 c0                	xor    eax,eax
c0013ad3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ad7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ade:	80 f9 19             	cmp    cl,0x19
c0013ae1:	77 24                	ja     c0013b07 <Directory::exists()+0x39>
c0013ae3:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013aea:	85 c9                	test   ecx,ecx
c0013aec:	74 19                	je     c0013b07 <Directory::exists()+0x39>
c0013aee:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013af4:	85 c9                	test   ecx,ecx
c0013af6:	74 0f                	je     c0013b07 <Directory::exists()+0x39>
c0013af8:	83 c2 0d             	add    edx,0xd
c0013afb:	50                   	push   eax
c0013afc:	50                   	push   eax
c0013afd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aff:	52                   	push   edx
c0013b00:	51                   	push   ecx
c0013b01:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b04:	83 c4 10             	add    esp,0x10
c0013b07:	83 c4 0c             	add    esp,0xc
c0013b0a:	c3                   	ret    
c0013b0b:	90                   	nop

c0013b0c <Directory::read(dirent*)>:
c0013b0c:	83 ec 1c             	sub    esp,0x1c
c0013b0f:	b8 0b 00 00 00       	mov    eax,0xb
c0013b14:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b18:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b1f:	80 fa 19             	cmp    dl,0x19
c0013b22:	77 30                	ja     c0013b54 <Directory::read(dirent*)+0x48>
c0013b24:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c0013b2b:	85 d2                	test   edx,edx
c0013b2d:	74 25                	je     c0013b54 <Directory::read(dirent*)+0x48>
c0013b2f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b36:	74 1c                	je     c0013b54 <Directory::read(dirent*)+0x48>
c0013b38:	83 ec 0c             	sub    esp,0xc
c0013b3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b3d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b41:	52                   	push   edx
c0013b42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b46:	6a 00                	push   0x0
c0013b48:	68 10 01 00 00       	push   0x110
c0013b4d:	51                   	push   ecx
c0013b4e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b51:	83 c4 20             	add    esp,0x20
c0013b54:	83 c4 1c             	add    esp,0x1c
c0013b57:	c3                   	ret    

c0013b58 <Directory::create()>:
c0013b58:	83 ec 0c             	sub    esp,0xc
c0013b5b:	b8 0b 00 00 00       	mov    eax,0xb
c0013b60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b6b:	80 f9 19             	cmp    cl,0x19
c0013b6e:	77 2f                	ja     c0013b9f <Directory::create()+0x47>
c0013b70:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c0013b77:	85 c9                	test   ecx,ecx
c0013b79:	74 24                	je     c0013b9f <Directory::create()+0x47>
c0013b7b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b81:	85 c9                	test   ecx,ecx
c0013b83:	74 1a                	je     c0013b9f <Directory::create()+0x47>
c0013b85:	b8 06 00 00 00       	mov    eax,0x6
c0013b8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b8e:	75 0f                	jne    c0013b9f <Directory::create()+0x47>
c0013b90:	83 c2 0d             	add    edx,0xd
c0013b93:	50                   	push   eax
c0013b94:	50                   	push   eax
c0013b95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b97:	52                   	push   edx
c0013b98:	51                   	push   ecx
c0013b99:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b9c:	83 c4 10             	add    esp,0x10
c0013b9f:	83 c4 0c             	add    esp,0xc
c0013ba2:	c3                   	ret    
c0013ba3:	90                   	nop

c0013ba4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013ba4:	b8 0a 00 00 00       	mov    eax,0xa
c0013ba9:	c3                   	ret    

c0013baa <Bus::Bus(char const*)>:
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb1:	83 ec 08             	sub    esp,0x8
c0013bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb8:	50                   	push   eax
c0013bb9:	e8 68 09 00 00       	call   c0014526 <Device::Device(char const*)>
c0013bbe:	83 c4 10             	add    esp,0x10
c0013bc1:	ba dc ac 02 c0       	mov    edx,0xc002acdc
c0013bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bca:	89 10                	mov    DWORD PTR [eax],edx
c0013bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013bda:	90                   	nop
c0013bdb:	83 c4 0c             	add    esp,0xc
c0013bde:	c3                   	ret    
c0013bdf:	90                   	nop

c0013be0 <Bus::~Bus()>:
c0013be0:	83 ec 0c             	sub    esp,0xc
c0013be3:	ba dc ac 02 c0       	mov    edx,0xc002acdc
c0013be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bec:	89 10                	mov    DWORD PTR [eax],edx
c0013bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf2:	83 ec 0c             	sub    esp,0xc
c0013bf5:	50                   	push   eax
c0013bf6:	e8 0d 06 00 00       	call   c0014208 <Device::~Device()>
c0013bfb:	83 c4 10             	add    esp,0x10
c0013bfe:	90                   	nop
c0013bff:	83 c4 0c             	add    esp,0xc
c0013c02:	c3                   	ret    
c0013c03:	90                   	nop

c0013c04 <Bus::~Bus()>:
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	83 ec 0c             	sub    esp,0xc
c0013c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0e:	e8 cd ff ff ff       	call   c0013be0 <Bus::~Bus()>
c0013c13:	83 c4 10             	add    esp,0x10
c0013c16:	83 ec 08             	sub    esp,0x8
c0013c19:	68 58 01 00 00       	push   0x158
c0013c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c22:	e8 02 f2 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0013c27:	83 c4 10             	add    esp,0x10
c0013c2a:	83 c4 0c             	add    esp,0xc
c0013c2d:	c3                   	ret    

c0013c2e <Buzzer::Buzzer(char const*)>:
c0013c2e:	83 ec 0c             	sub    esp,0xc
c0013c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c35:	83 ec 08             	sub    esp,0x8
c0013c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c3c:	50                   	push   eax
c0013c3d:	e8 e4 08 00 00       	call   c0014526 <Device::Device(char const*)>
c0013c42:	83 c4 10             	add    esp,0x10
c0013c45:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c0013c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4e:	89 10                	mov    DWORD PTR [eax],edx
c0013c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c54:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c62:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c6c:	90                   	nop
c0013c6d:	83 c4 0c             	add    esp,0xc
c0013c70:	c3                   	ret    
c0013c71:	90                   	nop

c0013c72 <Buzzer::~Buzzer()>:
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c0013c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7e:	89 10                	mov    DWORD PTR [eax],edx
c0013c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c84:	83 ec 0c             	sub    esp,0xc
c0013c87:	50                   	push   eax
c0013c88:	e8 7b 05 00 00       	call   c0014208 <Device::~Device()>
c0013c8d:	83 c4 10             	add    esp,0x10
c0013c90:	90                   	nop
c0013c91:	83 c4 0c             	add    esp,0xc
c0013c94:	c3                   	ret    
c0013c95:	90                   	nop

c0013c96 <Buzzer::~Buzzer()>:
c0013c96:	83 ec 0c             	sub    esp,0xc
c0013c99:	83 ec 0c             	sub    esp,0xc
c0013c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ca0:	e8 cd ff ff ff       	call   c0013c72 <Buzzer::~Buzzer()>
c0013ca5:	83 c4 10             	add    esp,0x10
c0013ca8:	83 ec 08             	sub    esp,0x8
c0013cab:	68 5c 01 00 00       	push   0x15c
c0013cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb4:	e8 70 f1 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	83 c4 0c             	add    esp,0xc
c0013cbf:	c3                   	ret    

c0013cc0 <Buzzer::stop()>:
c0013cc0:	83 ec 14             	sub    esp,0x14
c0013cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc7:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cc9:	6a 00                	push   0x0
c0013ccb:	50                   	push   eax
c0013ccc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ccf:	83 c4 1c             	add    esp,0x1c
c0013cd2:	c3                   	ret    

c0013cd3 <beepThread(void*)>:
c0013cd3:	53                   	push   ebx
c0013cd4:	83 ec 08             	sub    esp,0x8
c0013cd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cdb:	e8 44 a1 00 00       	call   c001de24 <unlockScheduler()>
c0013ce0:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013ce5:	52                   	push   edx
c0013ce6:	52                   	push   edx
c0013ce7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013ced:	52                   	push   edx
c0013cee:	50                   	push   eax
c0013cef:	e8 b8 a6 00 00       	call   c001e3ac <nanoSleep(unsigned long long)>
c0013cf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cf7:	e8 c4 ff ff ff       	call   c0013cc0 <Buzzer::stop()>
c0013cfc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d04:	83 c4 18             	add    esp,0x18
c0013d07:	5b                   	pop    ebx
c0013d08:	e9 e5 a5 00 00       	jmp    c001e2f2 <blockTask(TaskState)>
c0013d0d:	90                   	nop

c0013d0e <Buzzer::beep(int, int, bool)>:
c0013d0e:	57                   	push   edi
c0013d0f:	56                   	push   esi
c0013d10:	53                   	push   ebx
c0013d11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d1d:	52                   	push   edx
c0013d1e:	52                   	push   edx
c0013d1f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d25:	56                   	push   esi
c0013d26:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d29:	83 c4 10             	add    esp,0x10
c0013d2c:	89 f8                	mov    eax,edi
c0013d2e:	84 c0                	test   al,al
c0013d30:	74 1f                	je     c0013d51 <Buzzer::beep(int, int, bool)+0x43>
c0013d32:	50                   	push   eax
c0013d33:	50                   	push   eax
c0013d34:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d3a:	99                   	cdq    
c0013d3b:	52                   	push   edx
c0013d3c:	50                   	push   eax
c0013d3d:	e8 6a a6 00 00       	call   c001e3ac <nanoSleep(unsigned long long)>
c0013d42:	83 c4 10             	add    esp,0x10
c0013d45:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d49:	5b                   	pop    ebx
c0013d4a:	5e                   	pop    esi
c0013d4b:	5f                   	pop    edi
c0013d4c:	e9 6f ff ff ff       	jmp    c0013cc0 <Buzzer::stop()>
c0013d51:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d57:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0013d5c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d64:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d68:	c7 44 24 14 d3 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cd3
c0013d70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d74:	5b                   	pop    ebx
c0013d75:	5e                   	pop    esi
c0013d76:	5f                   	pop    edi
c0013d77:	e9 d8 a1 00 00       	jmp    c001df54 <Process::createThread(void (*)(void*), void*, int)>

c0013d7c <User::loadClockSettings(int)>:
c0013d7c:	53                   	push   ebx
c0013d7d:	83 ec 14             	sub    esp,0x14
c0013d80:	68 14 01 00 00       	push   0x114
c0013d85:	e8 c1 ba ff ff       	call   c000f84b <malloc>
c0013d8a:	83 c4 0c             	add    esp,0xc
c0013d8d:	89 c3                	mov    ebx,eax
c0013d8f:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c0013d95:	68 30 ad 02 c0       	push   0xc002ad30
c0013d9a:	50                   	push   eax
c0013d9b:	e8 c8 f6 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c0013da0:	58                   	pop    eax
c0013da1:	5a                   	pop    edx
c0013da2:	6a 01                	push   0x1
c0013da4:	53                   	push   ebx
c0013da5:	e8 22 f7 ff ff       	call   c00134cc <File::open(FileOpenMode)>
c0013daa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dad:	e8 78 f7 ff ff       	call   c001352a <File::close()>
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	85 db                	test   ebx,ebx
c0013db7:	74 0f                	je     c0013dc8 <User::loadClockSettings(int)+0x4c>
c0013db9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dbb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013dbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dc2:	83 c4 08             	add    esp,0x8
c0013dc5:	5b                   	pop    ebx
c0013dc6:	ff e0                	jmp    eax
c0013dc8:	83 c4 08             	add    esp,0x8
c0013dcb:	5b                   	pop    ebx
c0013dcc:	c3                   	ret    
c0013dcd:	90                   	nop

c0013dce <Clock::Clock(char const*)>:
c0013dce:	83 ec 0c             	sub    esp,0xc
c0013dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd5:	83 ec 08             	sub    esp,0x8
c0013dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ddc:	50                   	push   eax
c0013ddd:	e8 44 07 00 00       	call   c0014526 <Device::Device(char const*)>
c0013de2:	83 c4 10             	add    esp,0x10
c0013de5:	ba 58 ad 02 c0       	mov    edx,0xc002ad58
c0013dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dee:	89 10                	mov    DWORD PTR [eax],edx
c0013df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dfe:	90                   	nop
c0013dff:	83 c4 0c             	add    esp,0xc
c0013e02:	c3                   	ret    
c0013e03:	90                   	nop

c0013e04 <Clock::~Clock()>:
c0013e04:	83 ec 0c             	sub    esp,0xc
c0013e07:	ba 58 ad 02 c0       	mov    edx,0xc002ad58
c0013e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e10:	89 10                	mov    DWORD PTR [eax],edx
c0013e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e16:	83 ec 0c             	sub    esp,0xc
c0013e19:	50                   	push   eax
c0013e1a:	e8 e9 03 00 00       	call   c0014208 <Device::~Device()>
c0013e1f:	83 c4 10             	add    esp,0x10
c0013e22:	90                   	nop
c0013e23:	83 c4 0c             	add    esp,0xc
c0013e26:	c3                   	ret    
c0013e27:	90                   	nop

c0013e28 <Clock::~Clock()>:
c0013e28:	83 ec 0c             	sub    esp,0xc
c0013e2b:	83 ec 0c             	sub    esp,0xc
c0013e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e32:	e8 cd ff ff ff       	call   c0013e04 <Clock::~Clock()>
c0013e37:	83 c4 10             	add    esp,0x10
c0013e3a:	83 ec 08             	sub    esp,0x8
c0013e3d:	68 58 01 00 00       	push   0x158
c0013e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e46:	e8 de ef ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0013e4b:	83 c4 10             	add    esp,0x10
c0013e4e:	83 c4 0c             	add    esp,0xc
c0013e51:	c3                   	ret    

c0013e52 <Clock::timeInSecondsLocal()>:
c0013e52:	53                   	push   ebx
c0013e53:	83 ec 14             	sub    esp,0x14
c0013e56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e5c:	50                   	push   eax
c0013e5d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e60:	0f b6 0d 9c e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e79c
c0013e67:	03 0d a0 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7a0
c0013e6d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e73:	89 cb                	mov    ebx,ecx
c0013e75:	c1 fb 1f             	sar    ebx,0x1f
c0013e78:	01 c8                	add    eax,ecx
c0013e7a:	11 da                	adc    edx,ebx
c0013e7c:	83 c4 10             	add    esp,0x10
c0013e7f:	31 c9                	xor    ecx,ecx
c0013e81:	80 3d 9d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e79d,0x0
c0013e88:	74 05                	je     c0013e8f <Clock::timeInSecondsLocal()+0x3d>
c0013e8a:	b9 08 07 00 00       	mov    ecx,0x708
c0013e8f:	31 db                	xor    ebx,ebx
c0013e91:	01 c8                	add    eax,ecx
c0013e93:	11 da                	adc    edx,ebx
c0013e95:	83 c4 08             	add    esp,0x8
c0013e98:	5b                   	pop    ebx
c0013e99:	c3                   	ret    

c0013e9a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e9a:	57                   	push   edi
c0013e9b:	56                   	push   esi
c0013e9c:	53                   	push   ebx
c0013e9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ea1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ea5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ea7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013eab:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013eae:	0f b6 05 9c e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e79c
c0013eb5:	03 05 a0 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e7a0
c0013ebb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ec1:	99                   	cdq    
c0013ec2:	29 c6                	sub    esi,eax
c0013ec4:	19 d7                	sbb    edi,edx
c0013ec6:	89 f0                	mov    eax,esi
c0013ec8:	89 fa                	mov    edx,edi
c0013eca:	31 f6                	xor    esi,esi
c0013ecc:	80 3d 9d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e79d,0x0
c0013ed3:	74 05                	je     c0013eda <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ed5:	be 08 07 00 00       	mov    esi,0x708
c0013eda:	31 ff                	xor    edi,edi
c0013edc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ee0:	29 f0                	sub    eax,esi
c0013ee2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ee6:	19 fa                	sbb    edx,edi
c0013ee8:	89 d8                	mov    eax,ebx
c0013eea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013eee:	5b                   	pop    ebx
c0013eef:	5e                   	pop    esi
c0013ef0:	5f                   	pop    edi
c0013ef1:	ff e0                	jmp    eax

c0013ef3 <datetimeToSeconds(datetime_t)>:
c0013ef3:	55                   	push   ebp
c0013ef4:	57                   	push   edi
c0013ef5:	56                   	push   esi
c0013ef6:	53                   	push   ebx
c0013ef7:	83 ec 14             	sub    esp,0x14
c0013efa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013efe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f02:	89 d3                	mov    ebx,edx
c0013f04:	0f b6 c6             	movzx  eax,dh
c0013f07:	c1 eb 10             	shr    ebx,0x10
c0013f0a:	48                   	dec    eax
c0013f0b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f10:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f14:	0f b6 f5             	movzx  esi,ch
c0013f17:	89 cf                	mov    edi,ecx
c0013f19:	6b f6 3c             	imul   esi,esi,0x3c
c0013f1c:	c1 ef 10             	shr    edi,0x10
c0013f1f:	0f b6 c9             	movzx  ecx,cl
c0013f22:	89 f8                	mov    eax,edi
c0013f24:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f2a:	0f b6 f8             	movzx  edi,al
c0013f2d:	0f b6 d2             	movzx  edx,dl
c0013f30:	01 fe                	add    esi,edi
c0013f32:	01 f1                	add    ecx,esi
c0013f34:	0f b7 f3             	movzx  esi,bx
c0013f37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f3b:	c1 f9 1f             	sar    ecx,0x1f
c0013f3e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f47:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f4c:	8b 0c 8d a0 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5260]
c0013f53:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f57:	76 29                	jbe    c0013f82 <datetimeToSeconds(datetime_t)+0x8f>
c0013f59:	f6 c3 03             	test   bl,0x3
c0013f5c:	75 24                	jne    c0013f82 <datetimeToSeconds(datetime_t)+0x8f>
c0013f5e:	31 d2                	xor    edx,edx
c0013f60:	bf 64 00 00 00       	mov    edi,0x64
c0013f65:	89 d8                	mov    eax,ebx
c0013f67:	66 f7 f7             	div    di
c0013f6a:	66 85 d2             	test   dx,dx
c0013f6d:	75 12                	jne    c0013f81 <datetimeToSeconds(datetime_t)+0x8e>
c0013f6f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f75:	bf 90 01 00 00       	mov    edi,0x190
c0013f7a:	99                   	cdq    
c0013f7b:	f7 ff                	idiv   edi
c0013f7d:	85 d2                	test   edx,edx
c0013f7f:	75 01                	jne    c0013f82 <datetimeToSeconds(datetime_t)+0x8f>
c0013f81:	41                   	inc    ecx
c0013f82:	66 83 fb 46          	cmp    bx,0x46
c0013f86:	76 45                	jbe    c0013fcd <datetimeToSeconds(datetime_t)+0xda>
c0013f88:	bb 46 00 00 00       	mov    ebx,0x46
c0013f8d:	bf 64 00 00 00       	mov    edi,0x64
c0013f92:	bd 90 01 00 00       	mov    ebp,0x190
c0013f97:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f9c:	f6 c3 03             	test   bl,0x3
c0013f9f:	75 23                	jne    c0013fc4 <datetimeToSeconds(datetime_t)+0xd1>
c0013fa1:	89 d8                	mov    eax,ebx
c0013fa3:	99                   	cdq    
c0013fa4:	f7 ff                	idiv   edi
c0013fa6:	b8 6e 01 00 00       	mov    eax,0x16e
c0013fab:	85 d2                	test   edx,edx
c0013fad:	75 15                	jne    c0013fc4 <datetimeToSeconds(datetime_t)+0xd1>
c0013faf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013fb5:	99                   	cdq    
c0013fb6:	f7 fd                	idiv   ebp
c0013fb8:	83 fa 01             	cmp    edx,0x1
c0013fbb:	19 c0                	sbb    eax,eax
c0013fbd:	f7 d0                	not    eax
c0013fbf:	05 6e 01 00 00       	add    eax,0x16e
c0013fc4:	01 c1                	add    ecx,eax
c0013fc6:	43                   	inc    ebx
c0013fc7:	39 f3                	cmp    ebx,esi
c0013fc9:	7c cc                	jl     c0013f97 <datetimeToSeconds(datetime_t)+0xa4>
c0013fcb:	eb 35                	jmp    c0014002 <datetimeToSeconds(datetime_t)+0x10f>
c0013fcd:	74 33                	je     c0014002 <datetimeToSeconds(datetime_t)+0x10f>
c0013fcf:	b8 45 00 00 00       	mov    eax,0x45
c0013fd4:	89 c2                	mov    edx,eax
c0013fd6:	83 e2 03             	and    edx,0x3
c0013fd9:	39 f0                	cmp    eax,esi
c0013fdb:	7e 0f                	jle    c0013fec <datetimeToSeconds(datetime_t)+0xf9>
c0013fdd:	83 fa 01             	cmp    edx,0x1
c0013fe0:	19 d2                	sbb    edx,edx
c0013fe2:	48                   	dec    eax
c0013fe3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fea:	eb e8                	jmp    c0013fd4 <datetimeToSeconds(datetime_t)+0xe1>
c0013fec:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ff1:	85 d2                	test   edx,edx
c0013ff3:	75 0b                	jne    c0014000 <datetimeToSeconds(datetime_t)+0x10d>
c0013ff5:	66 83 fb 01          	cmp    bx,0x1
c0013ff9:	19 c0                	sbb    eax,eax
c0013ffb:	05 6e 01 00 00       	add    eax,0x16e
c0014000:	29 c1                	sub    ecx,eax
c0014002:	b8 80 51 01 00       	mov    eax,0x15180
c0014007:	f7 e9                	imul   ecx
c0014009:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001400d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014011:	83 c4 14             	add    esp,0x14
c0014014:	5b                   	pop    ebx
c0014015:	5e                   	pop    esi
c0014016:	5f                   	pop    edi
c0014017:	5d                   	pop    ebp
c0014018:	c3                   	ret    
c0014019:	90                   	nop

c001401a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001401a:	57                   	push   edi
c001401b:	56                   	push   esi
c001401c:	53                   	push   ebx
c001401d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014021:	8b 06                	mov    eax,DWORD PTR [esi]
c0014023:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014026:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001402a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001402e:	e8 c0 fe ff ff       	call   c0013ef3 <datetimeToSeconds(datetime_t)>
c0014033:	59                   	pop    ecx
c0014034:	0f b6 0d 9c e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e79c
c001403b:	5b                   	pop    ebx
c001403c:	03 0d a0 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7a0
c0014042:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014048:	89 cb                	mov    ebx,ecx
c001404a:	c1 fb 1f             	sar    ebx,0x1f
c001404d:	29 c8                	sub    eax,ecx
c001404f:	19 da                	sbb    edx,ebx
c0014051:	31 c9                	xor    ecx,ecx
c0014053:	80 3d 9d e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e79d,0x0
c001405a:	74 05                	je     c0014061 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001405c:	b9 08 07 00 00       	mov    ecx,0x708
c0014061:	31 db                	xor    ebx,ebx
c0014063:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014067:	29 c8                	sub    eax,ecx
c0014069:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001406d:	19 da                	sbb    edx,ebx
c001406f:	89 f8                	mov    eax,edi
c0014071:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014075:	5b                   	pop    ebx
c0014076:	5e                   	pop    esi
c0014077:	5f                   	pop    edi
c0014078:	ff e0                	jmp    eax

c001407a <secondsToDatetime(unsigned long long)>:
c001407a:	55                   	push   ebp
c001407b:	57                   	push   edi
c001407c:	56                   	push   esi
c001407d:	53                   	push   ebx
c001407e:	83 ec 1c             	sub    esp,0x1c
c0014081:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014085:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014089:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001408d:	6a 00                	push   0x0
c001408f:	68 80 51 01 00       	push   0x15180
c0014094:	55                   	push   ebp
c0014095:	57                   	push   edi
c0014096:	e8 99 2a 01 00       	call   c0026b34 <__udivdi3>
c001409b:	83 c4 10             	add    esp,0x10
c001409e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00140a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140a8:	6a 00                	push   0x0
c00140aa:	68 80 51 01 00       	push   0x15180
c00140af:	55                   	push   ebp
c00140b0:	57                   	push   edi
c00140b1:	bf 10 0e 00 00       	mov    edi,0xe10
c00140b6:	e8 79 2b 01 00       	call   c0026c34 <__umoddi3>
c00140bb:	83 c4 10             	add    esp,0x10
c00140be:	99                   	cdq    
c00140bf:	f7 ff                	idiv   edi
c00140c1:	bf 3c 00 00 00       	mov    edi,0x3c
c00140c6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140c9:	89 d0                	mov    eax,edx
c00140cb:	99                   	cdq    
c00140cc:	f7 ff                	idiv   edi
c00140ce:	85 db                	test   ebx,ebx
c00140d0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140d3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140d6:	79 11                	jns    c00140e9 <secondsToDatetime(unsigned long long)+0x6f>
c00140d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140dc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140e2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140e7:	eb 07                	jmp    c00140f0 <secondsToDatetime(unsigned long long)+0x76>
c00140e9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140ee:	89 d8                	mov    eax,ebx
c00140f0:	bf b4 05 00 00       	mov    edi,0x5b4
c00140f5:	99                   	cdq    
c00140f6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140fb:	f7 f9                	idiv   ecx
c00140fd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014102:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014106:	31 d2                	xor    edx,edx
c0014108:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014110:	01 c3                	add    ebx,eax
c0014112:	89 d8                	mov    eax,ebx
c0014114:	f7 f1                	div    ecx
c0014116:	31 d2                	xor    edx,edx
c0014118:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001411b:	89 d8                	mov    eax,ebx
c001411d:	f7 f7                	div    edi
c001411f:	31 d2                	xor    edx,edx
c0014121:	29 c1                	sub    ecx,eax
c0014123:	89 d8                	mov    eax,ebx
c0014125:	f7 f5                	div    ebp
c0014127:	bd 6d 01 00 00       	mov    ebp,0x16d
c001412c:	29 c1                	sub    ecx,eax
c001412e:	31 d2                	xor    edx,edx
c0014130:	89 c8                	mov    eax,ecx
c0014132:	f7 f5                	div    ebp
c0014134:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014139:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001413d:	31 d2                	xor    edx,edx
c001413f:	89 c8                	mov    eax,ecx
c0014141:	f7 f5                	div    ebp
c0014143:	31 d2                	xor    edx,edx
c0014145:	01 c3                	add    ebx,eax
c0014147:	89 c8                	mov    eax,ecx
c0014149:	f7 f7                	div    edi
c001414b:	bf 99 00 00 00       	mov    edi,0x99
c0014150:	29 c3                	sub    ebx,eax
c0014152:	31 d2                	xor    edx,edx
c0014154:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001415c:	29 c3                	sub    ebx,eax
c001415e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014161:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014164:	bb 05 00 00 00       	mov    ebx,0x5
c0014169:	83 c1 02             	add    ecx,0x2
c001416c:	89 c8                	mov    eax,ecx
c001416e:	f7 f7                	div    edi
c0014170:	31 d2                	xor    edx,edx
c0014172:	89 c7                	mov    edi,eax
c0014174:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001417a:	83 c0 02             	add    eax,0x2
c001417d:	f7 f3                	div    ebx
c001417f:	89 eb                	mov    ebx,ebp
c0014181:	29 c3                	sub    ebx,eax
c0014183:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014189:	88 1e                	mov    BYTE PTR [esi],bl
c001418b:	19 c0                	sbb    eax,eax
c001418d:	31 d2                	xor    edx,edx
c001418f:	83 e0 0c             	and    eax,0xc
c0014192:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014196:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001419e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00141a2:	83 f9 01             	cmp    ecx,0x1
c00141a5:	0f 96 c2             	setbe  dl
c00141a8:	41                   	inc    ecx
c00141a9:	01 d0                	add    eax,edx
c00141ab:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00141ae:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00141b2:	83 c4 1c             	add    esp,0x1c
c00141b5:	89 f0                	mov    eax,esi
c00141b7:	5b                   	pop    ebx
c00141b8:	5e                   	pop    esi
c00141b9:	5f                   	pop    edi
c00141ba:	5d                   	pop    ebp
c00141bb:	c2 04 00             	ret    0x4

c00141be <Clock::timeInDatetimeLocal()>:
c00141be:	53                   	push   ebx
c00141bf:	83 ec 14             	sub    esp,0x14
c00141c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141ca:	e8 83 fc ff ff       	call   c0013e52 <Clock::timeInSecondsLocal()>
c00141cf:	83 c4 0c             	add    esp,0xc
c00141d2:	52                   	push   edx
c00141d3:	50                   	push   eax
c00141d4:	53                   	push   ebx
c00141d5:	e8 a0 fe ff ff       	call   c001407a <secondsToDatetime(unsigned long long)>
c00141da:	89 d8                	mov    eax,ebx
c00141dc:	83 c4 14             	add    esp,0x14
c00141df:	5b                   	pop    ebx
c00141e0:	c2 04 00             	ret    0x4
c00141e3:	90                   	nop

c00141e4 <Device::hibernate()>:
c00141e4:	c3                   	ret    
c00141e5:	90                   	nop

c00141e6 <Device::wake()>:
c00141e6:	c3                   	ret    
c00141e7:	90                   	nop

c00141e8 <Device::detect()>:
c00141e8:	c3                   	ret    
c00141e9:	90                   	nop

c00141ea <Device::disableLegacy()>:
c00141ea:	c3                   	ret    
c00141eb:	90                   	nop

c00141ec <Device::powerSaving(PowerSavingLevel)>:
c00141ec:	c3                   	ret    
c00141ed:	90                   	nop

c00141ee <DriverlessDevice::close(int, int, void*)>:
c00141ee:	31 c0                	xor    eax,eax
c00141f0:	c3                   	ret    
c00141f1:	90                   	nop

c00141f2 <DriverlessDevice::detect()>:
c00141f2:	c3                   	ret    
c00141f3:	90                   	nop

c00141f4 <DriverlessDevice::open(int, int, void*)>:
c00141f4:	83 ec 18             	sub    esp,0x18
c00141f7:	68 d0 ad 02 c0       	push   0xc002add0
c00141fc:	e8 46 64 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0014201:	83 c8 ff             	or     eax,0xffffffff
c0014204:	83 c4 1c             	add    esp,0x1c
c0014207:	c3                   	ret    

c0014208 <Device::~Device()>:
c0014208:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c001420d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014211:	89 10                	mov    DWORD PTR [eax],edx
c0014213:	90                   	nop
c0014214:	c3                   	ret    
c0014215:	90                   	nop

c0014216 <Device::~Device()>:
c0014216:	83 ec 0c             	sub    esp,0xc
c0014219:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001421d:	e8 e6 ff ff ff       	call   c0014208 <Device::~Device()>
c0014222:	83 c4 04             	add    esp,0x4
c0014225:	83 ec 08             	sub    esp,0x8
c0014228:	68 58 01 00 00       	push   0x158
c001422d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014231:	e8 f3 eb ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	83 c4 0c             	add    esp,0xc
c001423c:	c3                   	ret    
c001423d:	90                   	nop

c001423e <Device::findAndLoadDriver()>:
c001423e:	c3                   	ret    
c001423f:	90                   	nop

c0014240 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014240:	57                   	push   edi
c0014241:	b9 09 00 00 00       	mov    ecx,0x9
c0014246:	56                   	push   esi
c0014247:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001424b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001424f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014259:	81 c7 18 01 00 00    	add    edi,0x118
c001425f:	fc                   	cld    
c0014260:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014262:	5e                   	pop    esi
c0014263:	5f                   	pop    edi
c0014264:	c3                   	ret    
c0014265:	90                   	nop

c0014266 <Device::preOpenACPI(void*, char*, char*)>:
c0014266:	56                   	push   esi
c0014267:	53                   	push   ebx
c0014268:	83 ec 08             	sub    esp,0x8
c001426b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001426f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014273:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001427d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014281:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014287:	6a 1e                	push   0x1e
c0014289:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001428f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014293:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014299:	50                   	push   eax
c001429a:	e8 ad c4 fe ff       	call   c000074c <memcpy>
c001429f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00142a3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00142a7:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00142af:	83 c4 14             	add    esp,0x14
c00142b2:	5b                   	pop    ebx
c00142b3:	5e                   	pop    esi
c00142b4:	e9 93 c4 fe ff       	jmp    c000074c <memcpy>
c00142b9:	90                   	nop

c00142ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142be:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142c3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142ca:	75 0b                	jne    c00142d7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00142ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142d2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142d5:	eb 1e                	jmp    c00142f5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142d7:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00142dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142e2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142ea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142f2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142f5:	ff e0                	jmp    eax
c00142f7:	90                   	nop

c00142f8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142fc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014301:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014308:	75 0b                	jne    c0014315 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001430a:	8b 00                	mov    eax,DWORD PTR [eax]
c001430c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014310:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014313:	eb 1e                	jmp    c0014333 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014315:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001431a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014320:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014326:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014328:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001432c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014330:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014333:	ff e0                	jmp    eax
c0014335:	90                   	nop

c0014336 <Device::addChild(Device*)>:
c0014336:	53                   	push   ebx
c0014337:	83 ec 08             	sub    esp,0x8
c001433a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001433e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014342:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014348:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001434e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014350:	85 d2                	test   edx,edx
c0014352:	74 04                	je     c0014358 <Device::addChild(Device*)+0x22>
c0014354:	89 d3                	mov    ebx,edx
c0014356:	eb f6                	jmp    c001434e <Device::addChild(Device*)+0x18>
c0014358:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001435b:	83 ec 0c             	sub    esp,0xc
c001435e:	6a 08                	push   0x8
c0014360:	e8 e6 b4 ff ff       	call   c000f84b <malloc>
c0014365:	89 03                	mov    DWORD PTR [ebx],eax
c0014367:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001436d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014374:	83 c4 18             	add    esp,0x18
c0014377:	5b                   	pop    ebx
c0014378:	c3                   	ret    
c0014379:	90                   	nop

c001437a <Device::removeAllChildren()>:
c001437a:	56                   	push   esi
c001437b:	53                   	push   ebx
c001437c:	52                   	push   edx
c001437d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014381:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014387:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001438a:	74 17                	je     c00143a3 <Device::removeAllChildren()+0x29>
c001438c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001438f:	85 c0                	test   eax,eax
c0014391:	74 0c                	je     c001439f <Device::removeAllChildren()+0x25>
c0014393:	83 ec 0c             	sub    esp,0xc
c0014396:	8b 10                	mov    edx,DWORD PTR [eax]
c0014398:	50                   	push   eax
c0014399:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001439c:	83 c4 10             	add    esp,0x10
c001439f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143a1:	eb e4                	jmp    c0014387 <Device::removeAllChildren()+0xd>
c00143a3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00143b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143bc:	58                   	pop    eax
c00143bd:	5b                   	pop    ebx
c00143be:	5e                   	pop    esi
c00143bf:	c3                   	ret    

c00143c0 <Device::hibernateAll()>:
c00143c0:	53                   	push   ebx
c00143c1:	83 ec 14             	sub    esp,0x14
c00143c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ca:	53                   	push   ebx
c00143cb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143ce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143da:	74 0f                	je     c00143eb <Device::hibernateAll()+0x2b>
c00143dc:	83 ec 0c             	sub    esp,0xc
c00143df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143e2:	e8 d9 ff ff ff       	call   c00143c0 <Device::hibernateAll()>
c00143e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143e9:	eb e9                	jmp    c00143d4 <Device::hibernateAll()+0x14>
c00143eb:	83 c4 08             	add    esp,0x8
c00143ee:	5b                   	pop    ebx
c00143ef:	c3                   	ret    

c00143f0 <Device::wakeAll()>:
c00143f0:	53                   	push   ebx
c00143f1:	83 ec 14             	sub    esp,0x14
c00143f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143fa:	53                   	push   ebx
c00143fb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143fe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001440a:	74 0f                	je     c001441b <Device::wakeAll()+0x2b>
c001440c:	83 ec 0c             	sub    esp,0xc
c001440f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014412:	e8 d9 ff ff ff       	call   c00143f0 <Device::wakeAll()>
c0014417:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014419:	eb e9                	jmp    c0014404 <Device::wakeAll()+0x14>
c001441b:	83 c4 08             	add    esp,0x8
c001441e:	5b                   	pop    ebx
c001441f:	c3                   	ret    

c0014420 <Device::detectAll()>:
c0014420:	53                   	push   ebx
c0014421:	83 ec 14             	sub    esp,0x14
c0014424:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014428:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442a:	53                   	push   ebx
c001442b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001442e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014434:	83 c4 10             	add    esp,0x10
c0014437:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001443a:	74 0f                	je     c001444b <Device::detectAll()+0x2b>
c001443c:	83 ec 0c             	sub    esp,0xc
c001443f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014442:	e8 d9 ff ff ff       	call   c0014420 <Device::detectAll()>
c0014447:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014449:	eb e9                	jmp    c0014434 <Device::detectAll()+0x14>
c001444b:	83 c4 08             	add    esp,0x8
c001444e:	5b                   	pop    ebx
c001444f:	c3                   	ret    

c0014450 <Device::disableLegacyAll()>:
c0014450:	53                   	push   ebx
c0014451:	83 ec 14             	sub    esp,0x14
c0014454:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014458:	8b 03                	mov    eax,DWORD PTR [ebx]
c001445a:	53                   	push   ebx
c001445b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001445e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014464:	83 c4 10             	add    esp,0x10
c0014467:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001446a:	74 0f                	je     c001447b <Device::disableLegacyAll()+0x2b>
c001446c:	83 ec 0c             	sub    esp,0xc
c001446f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014472:	e8 d9 ff ff ff       	call   c0014450 <Device::disableLegacyAll()>
c0014477:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014479:	eb e9                	jmp    c0014464 <Device::disableLegacyAll()+0x14>
c001447b:	83 c4 08             	add    esp,0x8
c001447e:	5b                   	pop    ebx
c001447f:	c3                   	ret    

c0014480 <Device::loadDriversForAll()>:
c0014480:	53                   	push   ebx
c0014481:	83 ec 08             	sub    esp,0x8
c0014484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014488:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001448e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014490:	85 db                	test   ebx,ebx
c0014492:	74 12                	je     c00144a6 <Device::loadDriversForAll()+0x26>
c0014494:	83 ec 0c             	sub    esp,0xc
c0014497:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001449a:	e8 e1 ff ff ff       	call   c0014480 <Device::loadDriversForAll()>
c001449f:	83 c4 10             	add    esp,0x10
c00144a2:	89 d8                	mov    eax,ebx
c00144a4:	eb e8                	jmp    c001448e <Device::loadDriversForAll()+0xe>
c00144a6:	83 c4 08             	add    esp,0x8
c00144a9:	5b                   	pop    ebx
c00144aa:	c3                   	ret    
c00144ab:	90                   	nop

c00144ac <Device::closeAll()>:
c00144ac:	53                   	push   ebx
c00144ad:	83 ec 08             	sub    esp,0x8
c00144b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b6:	6a 00                	push   0x0
c00144b8:	6a 00                	push   0x0
c00144ba:	6a 00                	push   0x0
c00144bc:	53                   	push   ebx
c00144bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c6:	83 c4 10             	add    esp,0x10
c00144c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144cc:	74 0f                	je     c00144dd <Device::closeAll()+0x31>
c00144ce:	83 ec 0c             	sub    esp,0xc
c00144d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144d4:	e8 d3 ff ff ff       	call   c00144ac <Device::closeAll()>
c00144d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144db:	eb e9                	jmp    c00144c6 <Device::closeAll()+0x1a>
c00144dd:	83 c4 08             	add    esp,0x8
c00144e0:	5b                   	pop    ebx
c00144e1:	c3                   	ret    

c00144e2 <Device::powerSavingAll(PowerSavingLevel)>:
c00144e2:	56                   	push   esi
c00144e3:	53                   	push   ebx
c00144e4:	83 ec 0c             	sub    esp,0xc
c00144e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144eb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144f1:	56                   	push   esi
c00144f2:	53                   	push   ebx
c00144f3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014502:	74 0f                	je     c0014513 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014504:	52                   	push   edx
c0014505:	52                   	push   edx
c0014506:	56                   	push   esi
c0014507:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001450a:	e8 d3 ff ff ff       	call   c00144e2 <Device::powerSavingAll(PowerSavingLevel)>
c001450f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014511:	eb e9                	jmp    c00144fc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014513:	58                   	pop    eax
c0014514:	5b                   	pop    ebx
c0014515:	5e                   	pop    esi
c0014516:	c3                   	ret    
c0014517:	90                   	nop

c0014518 <Device::setName(char const*)>:
c0014518:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014520:	e9 17 c3 fe ff       	jmp    c000083c <strcpy>
c0014525:	90                   	nop

c0014526 <Device::Device(char const*)>:
c0014526:	83 ec 1c             	sub    esp,0x1c
c0014529:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c001452e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014532:	89 10                	mov    DWORD PTR [eax],edx
c0014534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014538:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014546:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014554:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001455e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014562:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001456c:	83 ec 08             	sub    esp,0x8
c001456f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014573:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014577:	e8 9c ff ff ff       	call   c0014518 <Device::setName(char const*)>
c001457c:	83 c4 10             	add    esp,0x10
c001457f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014587:	83 ec 0c             	sub    esp,0xc
c001458a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001458e:	e8 b8 b2 ff ff       	call   c000f84b <malloc>
c0014593:	83 c4 10             	add    esp,0x10
c0014596:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001459c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00145a7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00145ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145dd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014604:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001460e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014612:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001461c:	90                   	nop
c001461d:	83 c4 1c             	add    esp,0x1c
c0014620:	c3                   	ret    
c0014621:	90                   	nop

c0014622 <Device::getName()>:
c0014622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014626:	05 d0 00 00 00       	add    eax,0xd0
c001462b:	c3                   	ret    

c001462c <DriverlessDevice::DriverlessDevice(char const*)>:
c001462c:	83 ec 0c             	sub    esp,0xc
c001462f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014633:	83 ec 08             	sub    esp,0x8
c0014636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001463a:	50                   	push   eax
c001463b:	e8 e6 fe ff ff       	call   c0014526 <Device::Device(char const*)>
c0014640:	83 c4 10             	add    esp,0x10
c0014643:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c0014648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464c:	89 10                	mov    DWORD PTR [eax],edx
c001464e:	90                   	nop
c001464f:	83 c4 0c             	add    esp,0xc
c0014652:	c3                   	ret    
c0014653:	90                   	nop

c0014654 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014654:	57                   	push   edi
c0014655:	56                   	push   esi
c0014656:	53                   	push   ebx
c0014657:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001465b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001465f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014663:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014669:	75 0c                	jne    c0014677 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001466b:	52                   	push   edx
c001466c:	52                   	push   edx
c001466d:	53                   	push   ebx
c001466e:	56                   	push   esi
c001466f:	e8 06 44 01 00       	call   c0028a7a <LinkedList<Device>::addElement(Device*)>
c0014674:	83 c4 10             	add    esp,0x10
c0014677:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001467d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014680:	74 12                	je     c0014694 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014682:	50                   	push   eax
c0014683:	57                   	push   edi
c0014684:	56                   	push   esi
c0014685:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014688:	e8 c7 ff ff ff       	call   c0014654 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001468d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001468f:	83 c4 10             	add    esp,0x10
c0014692:	eb e9                	jmp    c001467d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014694:	5b                   	pop    ebx
c0014695:	5e                   	pop    esi
c0014696:	5f                   	pop    edi
c0014697:	c3                   	ret    

c0014698 <getDevicesOfType(DeviceType)>:
c0014698:	53                   	push   ebx
c0014699:	83 ec 14             	sub    esp,0x14
c001469c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00146a0:	53                   	push   ebx
c00146a1:	e8 b0 44 01 00       	call   c0028b56 <LinkedList<Device>::LinkedList()>
c00146a6:	83 c4 0c             	add    esp,0xc
c00146a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146ad:	53                   	push   ebx
c00146ae:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c00146b4:	e8 9b ff ff ff       	call   c0014654 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146b9:	89 d8                	mov    eax,ebx
c00146bb:	83 c4 18             	add    esp,0x18
c00146be:	5b                   	pop    ebx
c00146bf:	c2 04 00             	ret    0x4

c00146c2 <HardDiskController::HardDiskController(char const*)>:
c00146c2:	83 ec 0c             	sub    esp,0xc
c00146c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c9:	83 ec 08             	sub    esp,0x8
c00146cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146d0:	50                   	push   eax
c00146d1:	e8 50 fe ff ff       	call   c0014526 <Device::Device(char const*)>
c00146d6:	83 c4 10             	add    esp,0x10
c00146d9:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c00146de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e2:	89 10                	mov    DWORD PTR [eax],edx
c00146e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146f2:	90                   	nop
c00146f3:	83 c4 0c             	add    esp,0xc
c00146f6:	c3                   	ret    
c00146f7:	90                   	nop

c00146f8 <HardDiskController::~HardDiskController()>:
c00146f8:	83 ec 0c             	sub    esp,0xc
c00146fb:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c0014700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014704:	89 10                	mov    DWORD PTR [eax],edx
c0014706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470a:	83 ec 0c             	sub    esp,0xc
c001470d:	50                   	push   eax
c001470e:	e8 f5 fa ff ff       	call   c0014208 <Device::~Device()>
c0014713:	83 c4 10             	add    esp,0x10
c0014716:	90                   	nop
c0014717:	83 c4 0c             	add    esp,0xc
c001471a:	c3                   	ret    
c001471b:	90                   	nop

c001471c <HardDiskController::~HardDiskController()>:
c001471c:	83 ec 0c             	sub    esp,0xc
c001471f:	83 ec 0c             	sub    esp,0xc
c0014722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014726:	e8 cd ff ff ff       	call   c00146f8 <HardDiskController::~HardDiskController()>
c001472b:	83 c4 10             	add    esp,0x10
c001472e:	83 ec 08             	sub    esp,0x8
c0014731:	68 58 01 00 00       	push   0x158
c0014736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001473a:	e8 ea e6 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c001473f:	83 c4 10             	add    esp,0x10
c0014742:	83 c4 0c             	add    esp,0xc
c0014745:	c3                   	ret    

c0014746 <PhysicalDisk::eject()>:
c0014746:	83 ec 18             	sub    esp,0x18
c0014749:	68 74 ae 02 c0       	push   0xc002ae74
c001474e:	e8 b6 e7 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014753:	83 c8 ff             	or     eax,0xffffffff
c0014756:	83 c4 1c             	add    esp,0x1c
c0014759:	c3                   	ret    

c001475a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014761:	83 ec 08             	sub    esp,0x8
c0014764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014768:	50                   	push   eax
c0014769:	e8 b8 fd ff ff       	call   c0014526 <Device::Device(char const*)>
c001476e:	83 c4 10             	add    esp,0x10
c0014771:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c0014776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477a:	89 10                	mov    DWORD PTR [eax],edx
c001477c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014780:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014796:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00147a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147a8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00147ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147bc:	90                   	nop
c00147bd:	83 c4 0c             	add    esp,0xc
c00147c0:	c3                   	ret    
c00147c1:	90                   	nop

c00147c2 <PhysicalDisk::startCache()>:
c00147c2:	56                   	push   esi
c00147c3:	53                   	push   ebx
c00147c4:	83 ec 10             	sub    esp,0x10
c00147c7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147cb:	6a 44                	push   0x44
c00147cd:	e8 79 b0 ff ff       	call   c000f84b <malloc>
c00147d2:	89 c6                	mov    esi,eax
c00147d4:	58                   	pop    eax
c00147d5:	5a                   	pop    edx
c00147d6:	53                   	push   ebx
c00147d7:	56                   	push   esi
c00147d8:	e8 a3 27 00 00       	call   c0016f80 <VCache::VCache(PhysicalDisk*)>
c00147dd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147e3:	83 c4 14             	add    esp,0x14
c00147e6:	5b                   	pop    ebx
c00147e7:	5e                   	pop    esi
c00147e8:	c3                   	ret    
c00147e9:	90                   	nop

c00147ea <PhysicalDisk::~PhysicalDisk()>:
c00147ea:	83 ec 0c             	sub    esp,0xc
c00147ed:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c00147f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f6:	89 10                	mov    DWORD PTR [eax],edx
c00147f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fc:	83 ec 0c             	sub    esp,0xc
c00147ff:	50                   	push   eax
c0014800:	e8 03 fa ff ff       	call   c0014208 <Device::~Device()>
c0014805:	83 c4 10             	add    esp,0x10
c0014808:	90                   	nop
c0014809:	83 c4 0c             	add    esp,0xc
c001480c:	c3                   	ret    
c001480d:	90                   	nop

c001480e <PhysicalDisk::~PhysicalDisk()>:
c001480e:	83 ec 0c             	sub    esp,0xc
c0014811:	83 ec 0c             	sub    esp,0xc
c0014814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014818:	e8 cd ff ff ff       	call   c00147ea <PhysicalDisk::~PhysicalDisk()>
c001481d:	83 c4 10             	add    esp,0x10
c0014820:	83 ec 08             	sub    esp,0x8
c0014823:	68 6c 01 00 00       	push   0x16c
c0014828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001482c:	e8 f8 e5 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0014831:	83 c4 10             	add    esp,0x10
c0014834:	83 c4 0c             	add    esp,0xc
c0014837:	c3                   	ret    

c0014838 <FPU::FPU(char const*)>:
c0014838:	83 ec 0c             	sub    esp,0xc
c001483b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001483f:	83 ec 08             	sub    esp,0x8
c0014842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014846:	50                   	push   eax
c0014847:	e8 da fc ff ff       	call   c0014526 <Device::Device(char const*)>
c001484c:	83 c4 10             	add    esp,0x10
c001484f:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c0014854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014858:	89 10                	mov    DWORD PTR [eax],edx
c001485a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014868:	90                   	nop
c0014869:	83 c4 0c             	add    esp,0xc
c001486c:	c3                   	ret    
c001486d:	90                   	nop

c001486e <FPU::~FPU()>:
c001486e:	83 ec 0c             	sub    esp,0xc
c0014871:	ba e8 ae 02 c0       	mov    edx,0xc002aee8
c0014876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487a:	89 10                	mov    DWORD PTR [eax],edx
c001487c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014880:	83 ec 0c             	sub    esp,0xc
c0014883:	50                   	push   eax
c0014884:	e8 7f f9 ff ff       	call   c0014208 <Device::~Device()>
c0014889:	83 c4 10             	add    esp,0x10
c001488c:	90                   	nop
c001488d:	83 c4 0c             	add    esp,0xc
c0014890:	c3                   	ret    
c0014891:	90                   	nop

c0014892 <FPU::~FPU()>:
c0014892:	83 ec 0c             	sub    esp,0xc
c0014895:	83 ec 0c             	sub    esp,0xc
c0014898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001489c:	e8 cd ff ff ff       	call   c001486e <FPU::~FPU()>
c00148a1:	83 c4 10             	add    esp,0x10
c00148a4:	83 ec 08             	sub    esp,0x8
c00148a7:	68 58 01 00 00       	push   0x158
c00148ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148b0:	e8 74 e5 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00148b5:	83 c4 10             	add    esp,0x10
c00148b8:	83 c4 0c             	add    esp,0xc
c00148bb:	c3                   	ret    

c00148bc <setupFPU()>:
c00148bc:	53                   	push   ebx
c00148bd:	83 ec 08             	sub    esp,0x8
c00148c0:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c00148c6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148cd:	74 19                	je     c00148e8 <setupFPU()+0x2c>
c00148cf:	83 ec 0c             	sub    esp,0xc
c00148d2:	68 58 01 00 00       	push   0x158
c00148d7:	e8 6f af ff ff       	call   c000f84b <malloc>
c00148dc:	89 c3                	mov    ebx,eax
c00148de:	89 04 24             	mov    DWORD PTR [esp],eax
c00148e1:	e8 cc 0d 01 00       	call   c00256b2 <AVX::AVX()>
c00148e6:	eb 5b                	jmp    c0014943 <setupFPU()+0x87>
c00148e8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148ee:	84 c0                	test   al,al
c00148f0:	79 19                	jns    c001490b <setupFPU()+0x4f>
c00148f2:	83 ec 0c             	sub    esp,0xc
c00148f5:	68 58 01 00 00       	push   0x158
c00148fa:	e8 4c af ff ff       	call   c000f84b <malloc>
c00148ff:	89 c3                	mov    ebx,eax
c0014901:	89 04 24             	mov    DWORD PTR [esp],eax
c0014904:	e8 cf 0e 01 00       	call   c00257d8 <SSE::SSE()>
c0014909:	eb 38                	jmp    c0014943 <setupFPU()+0x87>
c001490b:	a8 20                	test   al,0x20
c001490d:	74 19                	je     c0014928 <setupFPU()+0x6c>
c001490f:	83 ec 0c             	sub    esp,0xc
c0014912:	68 58 01 00 00       	push   0x158
c0014917:	e8 2f af ff ff       	call   c000f84b <malloc>
c001491c:	89 c3                	mov    ebx,eax
c001491e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014921:	e8 1c 0e 01 00       	call   c0025742 <MMX::MMX()>
c0014926:	eb 1b                	jmp    c0014943 <setupFPU()+0x87>
c0014928:	a8 10                	test   al,0x10
c001492a:	74 1c                	je     c0014948 <setupFPU()+0x8c>
c001492c:	83 ec 0c             	sub    esp,0xc
c001492f:	68 58 01 00 00       	push   0x158
c0014934:	e8 12 af ff ff       	call   c000f84b <malloc>
c0014939:	89 c3                	mov    ebx,eax
c001493b:	89 04 24             	mov    DWORD PTR [esp],eax
c001493e:	e8 23 0f 01 00       	call   c0025866 <x87::x87()>
c0014943:	83 c4 10             	add    esp,0x10
c0014946:	eb 24                	jmp    c001496c <setupFPU()+0xb0>
c0014948:	83 e0 ef             	and    eax,0xffffffef
c001494b:	83 ec 0c             	sub    esp,0xc
c001494e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014954:	68 d4 ae 02 c0       	push   0xc002aed4
c0014959:	e8 ab e5 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001495e:	0f 20 c0             	mov    eax,cr0
c0014961:	83 c8 04             	or     eax,0x4
c0014964:	0f 22 c0             	mov    cr0,eax
c0014967:	31 db                	xor    ebx,ebx
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	89 d8                	mov    eax,ebx
c001496e:	83 c4 08             	add    esp,0x8
c0014971:	5b                   	pop    ebx
c0014972:	c3                   	ret    
c0014973:	90                   	nop

c0014974 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014978:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001497c:	c1 e0 04             	shl    eax,0x4
c001497f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014983:	8d 50 10             	lea    edx,[eax+0x10]
c0014986:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001498c:	74 08                	je     c0014996 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001498e:	83 c0 04             	add    eax,0x4
c0014991:	39 d0                	cmp    eax,edx
c0014993:	75 f1                	jne    c0014986 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014995:	c3                   	ret    
c0014996:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00149a0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00149aa:	eb e2                	jmp    c001498e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00149ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00149ac:	57                   	push   edi
c00149ad:	31 c0                	xor    eax,eax
c00149af:	56                   	push   esi
c00149b0:	53                   	push   ebx
c00149b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149bd:	89 da                	mov    edx,ebx
c00149bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149c3:	c1 e2 04             	shl    edx,0x4
c00149c6:	01 ca                	add    edx,ecx
c00149c8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149d0:	74 16                	je     c00149e8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149d2:	40                   	inc    eax
c00149d3:	83 f8 04             	cmp    eax,0x4
c00149d6:	75 f0                	jne    c00149c8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149d8:	c7 44 24 10 18 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af18
c00149e0:	5b                   	pop    ebx
c00149e1:	5e                   	pop    esi
c00149e2:	5f                   	pop    edi
c00149e3:	e9 5f 5c 00 00       	jmp    c001a647 <Krnl::panic(char const*)>
c00149e8:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149eb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149ee:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149f4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149fa:	5b                   	pop    ebx
c00149fb:	5e                   	pop    esi
c00149fc:	5f                   	pop    edi
c00149fd:	c3                   	ret    

c00149fe <doubleFault(regs*, void*)>:
c00149fe:	55                   	push   ebp
c00149ff:	89 e5                	mov    ebp,esp
c0014a01:	83 ec 08             	sub    esp,0x8
c0014a04:	83 ec 0c             	sub    esp,0xc
c0014a07:	68 53 af 02 c0       	push   0xc002af53
c0014a0c:	e8 36 5c 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0014a11:	83 c4 10             	add    esp,0x10
c0014a14:	90                   	nop
c0014a15:	c9                   	leave  
c0014a16:	c3                   	ret    
c0014a17:	90                   	nop

c0014a18 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a18:	56                   	push   esi
c0014a19:	53                   	push   ebx
c0014a1a:	50                   	push   eax
c0014a1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a1f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a23:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a28:	75 35                	jne    c0014a5f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a2a:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a2d:	31 d2                	xor    edx,edx
c0014a2f:	89 c1                	mov    ecx,eax
c0014a31:	c1 e1 04             	shl    ecx,0x4
c0014a34:	01 f1                	add    ecx,esi
c0014a36:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a3e:	74 3e                	je     c0014a7e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a40:	42                   	inc    edx
c0014a41:	83 fa 04             	cmp    edx,0x4
c0014a44:	75 f0                	jne    c0014a36 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a46:	83 ec 0c             	sub    esp,0xc
c0014a49:	68 98 af 02 c0       	push   0xc002af98
c0014a4e:	e8 f4 5b 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0014a53:	83 c4 10             	add    esp,0x10
c0014a56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a5b:	5a                   	pop    edx
c0014a5c:	5b                   	pop    ebx
c0014a5d:	5e                   	pop    esi
c0014a5e:	c3                   	ret    
c0014a5f:	83 ec 0c             	sub    esp,0xc
c0014a62:	56                   	push   esi
c0014a63:	e8 ba fb ff ff       	call   c0014622 <Device::getName()>
c0014a68:	83 c4 10             	add    esp,0x10
c0014a6b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a6e:	75 ba                	jne    c0014a2a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a70:	83 fb 0f             	cmp    ebx,0xf
c0014a73:	7f 29                	jg     c0014a9e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a75:	0f b6 9b 60 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd27a0]
c0014a7c:	eb ac                	jmp    c0014a2a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a7e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a85:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a88:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a8e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a92:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a98:	89 d8                	mov    eax,ebx
c0014a9a:	5a                   	pop    edx
c0014a9b:	5b                   	pop    ebx
c0014a9c:	5e                   	pop    esi
c0014a9d:	c3                   	ret    
c0014a9e:	83 ec 0c             	sub    esp,0xc
c0014aa1:	68 60 af 02 c0       	push   0xc002af60
c0014aa6:	e8 9c 5b 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0014aab:	83 c4 10             	add    esp,0x10
c0014aae:	e9 77 ff ff ff       	jmp    c0014a2a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ab3:	90                   	nop

c0014ab4 <InterruptController::clearAllHandlers(int, bool)>:
c0014ab4:	56                   	push   esi
c0014ab5:	53                   	push   ebx
c0014ab6:	52                   	push   edx
c0014ab7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014abb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014abf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ac4:	75 61                	jne    c0014b27 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ac6:	8d 46 20             	lea    eax,[esi+0x20]
c0014ac9:	c1 e6 04             	shl    esi,0x4
c0014acc:	c1 e0 04             	shl    eax,0x4
c0014acf:	01 de                	add    esi,ebx
c0014ad1:	01 d8                	add    eax,ebx
c0014ad3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014add:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ae7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014af1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014afb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b05:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b0f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b19:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b23:	58                   	pop    eax
c0014b24:	5b                   	pop    ebx
c0014b25:	5e                   	pop    esi
c0014b26:	c3                   	ret    
c0014b27:	83 ec 0c             	sub    esp,0xc
c0014b2a:	53                   	push   ebx
c0014b2b:	e8 f2 fa ff ff       	call   c0014622 <Device::getName()>
c0014b30:	83 c4 10             	add    esp,0x10
c0014b33:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b36:	75 8e                	jne    c0014ac6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b38:	83 fe 0f             	cmp    esi,0xf
c0014b3b:	7f 09                	jg     c0014b46 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b3d:	0f b6 b6 60 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd27a0]
c0014b44:	eb 80                	jmp    c0014ac6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b46:	83 ec 0c             	sub    esp,0xc
c0014b49:	68 d4 af 02 c0       	push   0xc002afd4
c0014b4e:	e8 f4 5a 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0014b53:	83 c4 10             	add    esp,0x10
c0014b56:	e9 6b ff ff ff       	jmp    c0014ac6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b5b:	90                   	nop

c0014b5c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b5c:	56                   	push   esi
c0014b5d:	53                   	push   ebx
c0014b5e:	52                   	push   edx
c0014b5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b67:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b6c:	75 3a                	jne    c0014ba8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b72:	8d 50 20             	lea    edx,[eax+0x20]
c0014b75:	c1 e2 04             	shl    edx,0x4
c0014b78:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b7b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b7f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b85:	74 0b                	je     c0014b92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b87:	83 c0 04             	add    eax,0x4
c0014b8a:	39 d0                	cmp    eax,edx
c0014b8c:	75 f1                	jne    c0014b7f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b8e:	58                   	pop    eax
c0014b8f:	5b                   	pop    ebx
c0014b90:	5e                   	pop    esi
c0014b91:	c3                   	ret    
c0014b92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b9c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ba6:	eb df                	jmp    c0014b87 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014ba8:	83 ec 0c             	sub    esp,0xc
c0014bab:	56                   	push   esi
c0014bac:	e8 71 fa ff ff       	call   c0014622 <Device::getName()>
c0014bb1:	83 c4 10             	add    esp,0x10
c0014bb4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014bb7:	75 b5                	jne    c0014b6e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bb9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bbe:	7f 11                	jg     c0014bd1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014bc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bc4:	0f b6 80 60 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd27a0]
c0014bcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bcf:	eb 9d                	jmp    c0014b6e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bd1:	83 ec 0c             	sub    esp,0xc
c0014bd4:	68 d4 af 02 c0       	push   0xc002afd4
c0014bd9:	e8 69 5a 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	eb 8b                	jmp    c0014b6e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014be3 <nmiHandler(regs*, void*)>:
c0014be3:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0014be8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bec:	e9 a3 a3 ff ff       	jmp    c000ef94 <Computer::handleNMI()>

c0014bf1 <int_handler>:
c0014bf1:	55                   	push   ebp
c0014bf2:	57                   	push   edi
c0014bf3:	56                   	push   esi
c0014bf4:	53                   	push   ebx
c0014bf5:	83 ec 0c             	sub    esp,0xc
c0014bf8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bfc:	80 3d 64 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031164,0x0
c0014c03:	74 0b                	je     c0014c10 <int_handler+0x1f>
c0014c05:	fa                   	cli    
c0014c06:	f4                   	hlt    
c0014c07:	80 3d 64 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031164,0x0
c0014c0e:	75 f5                	jne    c0014c05 <int_handler+0x14>
c0014c10:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0014c15:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c1e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c24:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c27:	83 f8 17             	cmp    eax,0x17
c0014c2a:	77 13                	ja     c0014c3f <int_handler+0x4e>
c0014c2c:	83 ec 08             	sub    esp,0x8
c0014c2f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c31:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c34:	0f b6 c0             	movzx  eax,al
c0014c37:	50                   	push   eax
c0014c38:	57                   	push   edi
c0014c39:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c3c:	83 c4 10             	add    esp,0x10
c0014c3f:	83 c3 15             	add    ebx,0x15
c0014c42:	c1 e3 04             	shl    ebx,0x4
c0014c45:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c49:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c50:	31 db                	xor    ebx,ebx
c0014c52:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c56:	85 c0                	test   eax,eax
c0014c58:	74 13                	je     c0014c6d <int_handler+0x7c>
c0014c5a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c5d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c61:	74 1c                	je     c0014c7f <int_handler+0x8e>
c0014c63:	83 ec 08             	sub    esp,0x8
c0014c66:	52                   	push   edx
c0014c67:	56                   	push   esi
c0014c68:	ff d0                	call   eax
c0014c6a:	83 c4 10             	add    esp,0x10
c0014c6d:	43                   	inc    ebx
c0014c6e:	83 fb 04             	cmp    ebx,0x4
c0014c71:	75 df                	jne    c0014c52 <int_handler+0x61>
c0014c73:	83 c4 0c             	add    esp,0xc
c0014c76:	31 c0                	xor    eax,eax
c0014c78:	5b                   	pop    ebx
c0014c79:	31 d2                	xor    edx,edx
c0014c7b:	5e                   	pop    esi
c0014c7c:	5f                   	pop    edi
c0014c7d:	5d                   	pop    ebp
c0014c7e:	c3                   	ret    
c0014c7f:	83 ec 08             	sub    esp,0x8
c0014c82:	52                   	push   edx
c0014c83:	56                   	push   esi
c0014c84:	ff d0                	call   eax
c0014c86:	83 c4 10             	add    esp,0x10
c0014c89:	83 c4 0c             	add    esp,0xc
c0014c8c:	5b                   	pop    ebx
c0014c8d:	5e                   	pop    esi
c0014c8e:	5f                   	pop    edi
c0014c8f:	5d                   	pop    ebp
c0014c90:	c3                   	ret    
c0014c91:	90                   	nop

c0014c92 <InterruptController::InterruptController(char const*)>:
c0014c92:	83 ec 1c             	sub    esp,0x1c
c0014c95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c99:	83 ec 08             	sub    esp,0x8
c0014c9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ca0:	50                   	push   eax
c0014ca1:	e8 80 f8 ff ff       	call   c0014526 <Device::Device(char const*)>
c0014ca6:	83 c4 10             	add    esp,0x10
c0014ca9:	ba 94 b2 02 c0       	mov    edx,0xc002b294
c0014cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb2:	89 10                	mov    DWORD PTR [eax],edx
c0014cb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cca:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cd2:	7f 5e                	jg     c0014d32 <InterruptController::InterruptController(char const*)+0xa0>
c0014cd4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cdc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ce1:	7f 49                	jg     c0014d2c <InterruptController::InterruptController(char const*)+0x9a>
c0014ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ce7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014ceb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014cf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014cf6:	01 ca                	add    edx,ecx
c0014cf8:	83 c2 54             	add    edx,0x54
c0014cfb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d0b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d16:	01 ca                	add    edx,ecx
c0014d18:	81 c2 54 04 00 00    	add    edx,0x454
c0014d1e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d26:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d2a:	eb b0                	jmp    c0014cdc <InterruptController::InterruptController(char const*)+0x4a>
c0014d2c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d30:	eb 98                	jmp    c0014cca <InterruptController::InterruptController(char const*)+0x38>
c0014d32:	90                   	nop
c0014d33:	83 c4 1c             	add    esp,0x1c
c0014d36:	c3                   	ret    
c0014d37:	90                   	nop

c0014d38 <InterruptController::~InterruptController()>:
c0014d38:	83 ec 0c             	sub    esp,0xc
c0014d3b:	ba 94 b2 02 c0       	mov    edx,0xc002b294
c0014d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d44:	89 10                	mov    DWORD PTR [eax],edx
c0014d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d4a:	83 ec 0c             	sub    esp,0xc
c0014d4d:	50                   	push   eax
c0014d4e:	e8 b5 f4 ff ff       	call   c0014208 <Device::~Device()>
c0014d53:	83 c4 10             	add    esp,0x10
c0014d56:	90                   	nop
c0014d57:	83 c4 0c             	add    esp,0xc
c0014d5a:	c3                   	ret    
c0014d5b:	90                   	nop

c0014d5c <InterruptController::~InterruptController()>:
c0014d5c:	83 ec 0c             	sub    esp,0xc
c0014d5f:	83 ec 0c             	sub    esp,0xc
c0014d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d66:	e8 cd ff ff ff       	call   c0014d38 <InterruptController::~InterruptController()>
c0014d6b:	83 c4 10             	add    esp,0x10
c0014d6e:	83 ec 08             	sub    esp,0x8
c0014d71:	68 58 21 00 00       	push   0x2158
c0014d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d7a:	e8 aa e0 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0014d7f:	83 c4 10             	add    esp,0x10
c0014d82:	83 c4 0c             	add    esp,0xc
c0014d85:	c3                   	ret    

c0014d86 <displayDebugInfo(regs*)>:
c0014d86:	55                   	push   ebp
c0014d87:	57                   	push   edi
c0014d88:	56                   	push   esi
c0014d89:	53                   	push   ebx
c0014d8a:	83 ec 24             	sub    esp,0x24
c0014d8d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d91:	0f 20 c2             	mov    edx,cr0
c0014d94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d98:	0f 20 d7             	mov    edi,cr2
c0014d9b:	0f 20 de             	mov    esi,cr3
c0014d9e:	0f 20 e5             	mov    ebp,cr4
c0014da1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014da4:	68 0e b0 02 c0       	push   0xc002b00e
c0014da9:	e8 5b e1 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014dae:	59                   	pop    ecx
c0014daf:	58                   	pop    eax
c0014db0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014db3:	68 19 b0 02 c0       	push   0xc002b019
c0014db8:	e8 4c e1 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014dbd:	58                   	pop    eax
c0014dbe:	5a                   	pop    edx
c0014dbf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014dc2:	68 24 b0 02 c0       	push   0xc002b024
c0014dc7:	e8 3d e1 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014dcc:	59                   	pop    ecx
c0014dcd:	58                   	pop    eax
c0014dce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014dd1:	68 2f b0 02 c0       	push   0xc002b02f
c0014dd6:	e8 2e e1 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014ddb:	58                   	pop    eax
c0014ddc:	5a                   	pop    edx
c0014ddd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014de0:	68 3a b0 02 c0       	push   0xc002b03a
c0014de5:	e8 1f e1 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014dea:	59                   	pop    ecx
c0014deb:	58                   	pop    eax
c0014dec:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014def:	68 45 b0 02 c0       	push   0xc002b045
c0014df4:	e8 10 e1 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014df9:	58                   	pop    eax
c0014dfa:	5a                   	pop    edx
c0014dfb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dfe:	68 50 b0 02 c0       	push   0xc002b050
c0014e03:	e8 01 e1 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014e08:	59                   	pop    ecx
c0014e09:	58                   	pop    eax
c0014e0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e0d:	68 5b b0 02 c0       	push   0xc002b05b
c0014e12:	e8 f2 e0 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014e17:	58                   	pop    eax
c0014e18:	5a                   	pop    edx
c0014e19:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e1c:	68 66 b0 02 c0       	push   0xc002b066
c0014e21:	e8 e3 e0 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014e26:	59                   	pop    ecx
c0014e27:	58                   	pop    eax
c0014e28:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e2b:	68 75 b0 02 c0       	push   0xc002b075
c0014e30:	e8 d4 e0 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014e35:	58                   	pop    eax
c0014e36:	5a                   	pop    edx
c0014e37:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e3a:	68 80 b0 02 c0       	push   0xc002b080
c0014e3f:	e8 c5 e0 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014e44:	59                   	pop    ecx
c0014e45:	58                   	pop    eax
c0014e46:	57                   	push   edi
c0014e47:	68 8b b0 02 c0       	push   0xc002b08b
c0014e4c:	e8 b8 e0 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014e51:	58                   	pop    eax
c0014e52:	5a                   	pop    edx
c0014e53:	56                   	push   esi
c0014e54:	68 96 b0 02 c0       	push   0xc002b096
c0014e59:	e8 ab e0 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0014e5e:	59                   	pop    ecx
c0014e5f:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014e64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6a:	e8 8e be ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c0014e6f:	58                   	pop    eax
c0014e70:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e73:	5a                   	pop    edx
c0014e74:	c1 e0 05             	shl    eax,0x5
c0014e77:	05 c0 d5 02 c0       	add    eax,0xc002d5c0
c0014e7c:	50                   	push   eax
c0014e7d:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014e82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e88:	e8 8f c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014e8d:	59                   	pop    ecx
c0014e8e:	58                   	pop    eax
c0014e8f:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014e94:	68 a1 b0 02 c0       	push   0xc002b0a1
c0014e99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9f:	e8 78 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ea4:	58                   	pop    eax
c0014ea5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014eaa:	5a                   	pop    edx
c0014eab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eae:	83 c0 0c             	add    eax,0xc
c0014eb1:	50                   	push   eax
c0014eb2:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014eb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebd:	e8 5a c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ec2:	59                   	pop    ecx
c0014ec3:	58                   	pop    eax
c0014ec4:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014ec9:	68 aa b0 02 c0       	push   0xc002b0aa
c0014ece:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed4:	e8 43 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014ed9:	58                   	pop    eax
c0014eda:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014edf:	5a                   	pop    edx
c0014ee0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ee3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee9:	e8 54 c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014eee:	59                   	pop    ecx
c0014eef:	58                   	pop    eax
c0014ef0:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014ef5:	68 b2 b0 02 c0       	push   0xc002b0b2
c0014efa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f00:	e8 17 c2 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f05:	58                   	pop    eax
c0014f06:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f0b:	5a                   	pop    edx
c0014f0c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f15:	e8 28 c2 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f1a:	59                   	pop    ecx
c0014f1b:	58                   	pop    eax
c0014f1c:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f21:	68 ba b0 02 c0       	push   0xc002b0ba
c0014f26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2c:	e8 eb c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f31:	58                   	pop    eax
c0014f32:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f37:	5a                   	pop    edx
c0014f38:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f41:	e8 fc c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f46:	59                   	pop    ecx
c0014f47:	58                   	pop    eax
c0014f48:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f4d:	68 c2 b0 02 c0       	push   0xc002b0c2
c0014f52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f58:	e8 bf c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f5d:	58                   	pop    eax
c0014f5e:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f63:	5a                   	pop    edx
c0014f64:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6d:	e8 d0 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f72:	59                   	pop    ecx
c0014f73:	58                   	pop    eax
c0014f74:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f79:	68 ca b0 02 c0       	push   0xc002b0ca
c0014f7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f84:	e8 93 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014f89:	58                   	pop    eax
c0014f8a:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014f8f:	5a                   	pop    edx
c0014f90:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f99:	e8 a4 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014f9e:	59                   	pop    ecx
c0014f9f:	58                   	pop    eax
c0014fa0:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014fa5:	68 d2 b0 02 c0       	push   0xc002b0d2
c0014faa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb0:	e8 67 c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014fb5:	58                   	pop    eax
c0014fb6:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014fbb:	5a                   	pop    edx
c0014fbc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc5:	e8 78 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014fca:	59                   	pop    ecx
c0014fcb:	58                   	pop    eax
c0014fcc:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014fd1:	68 da b0 02 c0       	push   0xc002b0da
c0014fd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fdc:	e8 3b c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0014fe1:	58                   	pop    eax
c0014fe2:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014fe7:	5a                   	pop    edx
c0014fe8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fec:	52                   	push   edx
c0014fed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff3:	e8 4a c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0014ff8:	59                   	pop    ecx
c0014ff9:	58                   	pop    eax
c0014ffa:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0014fff:	68 e3 b0 02 c0       	push   0xc002b0e3
c0015004:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500a:	e8 0d c1 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001500f:	58                   	pop    eax
c0015010:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015015:	5a                   	pop    edx
c0015016:	57                   	push   edi
c0015017:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501d:	e8 20 c1 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015022:	59                   	pop    ecx
c0015023:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015028:	5f                   	pop    edi
c0015029:	68 eb b0 02 c0       	push   0xc002b0eb
c001502e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015034:	e8 e3 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015039:	58                   	pop    eax
c001503a:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001503f:	5a                   	pop    edx
c0015040:	56                   	push   esi
c0015041:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015047:	e8 f6 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001504c:	59                   	pop    ecx
c001504d:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015052:	5e                   	pop    esi
c0015053:	68 f3 b0 02 c0       	push   0xc002b0f3
c0015058:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505e:	e8 b9 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015063:	5f                   	pop    edi
c0015064:	58                   	pop    eax
c0015065:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001506a:	55                   	push   ebp
c001506b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015071:	e8 cc c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015076:	58                   	pop    eax
c0015077:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001507c:	5a                   	pop    edx
c001507d:	68 fb b0 02 c0       	push   0xc002b0fb
c0015082:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015088:	e8 8f c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001508d:	0f 21 c0             	mov    eax,db0
c0015090:	59                   	pop    ecx
c0015091:	5e                   	pop    esi
c0015092:	50                   	push   eax
c0015093:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015098:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509e:	e8 9f c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150a3:	5f                   	pop    edi
c00150a4:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00150a9:	5d                   	pop    ebp
c00150aa:	68 04 b1 02 c0       	push   0xc002b104
c00150af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b5:	e8 62 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c00150ba:	0f 21 c8             	mov    eax,db1
c00150bd:	5a                   	pop    edx
c00150be:	59                   	pop    ecx
c00150bf:	50                   	push   eax
c00150c0:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00150c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150cb:	e8 72 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150d0:	5e                   	pop    esi
c00150d1:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00150d6:	5f                   	pop    edi
c00150d7:	68 0c b1 02 c0       	push   0xc002b10c
c00150dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e2:	e8 35 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c00150e7:	0f 21 d0             	mov    eax,db2
c00150ea:	5d                   	pop    ebp
c00150eb:	5a                   	pop    edx
c00150ec:	50                   	push   eax
c00150ed:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00150f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f8:	e8 45 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c00150fd:	59                   	pop    ecx
c00150fe:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015103:	5e                   	pop    esi
c0015104:	68 14 b1 02 c0       	push   0xc002b114
c0015109:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510f:	e8 08 c0 ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015114:	0f 21 d8             	mov    eax,db3
c0015117:	5f                   	pop    edi
c0015118:	5d                   	pop    ebp
c0015119:	50                   	push   eax
c001511a:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001511f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015125:	e8 18 c0 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001512a:	58                   	pop    eax
c001512b:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015130:	5a                   	pop    edx
c0015131:	68 1c b1 02 c0       	push   0xc002b11c
c0015136:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513c:	e8 db bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c0015141:	0f 21 f0             	mov    eax,db6
c0015144:	59                   	pop    ecx
c0015145:	5e                   	pop    esi
c0015146:	50                   	push   eax
c0015147:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001514c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015152:	e8 eb bf ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015157:	5f                   	pop    edi
c0015158:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001515d:	5d                   	pop    ebp
c001515e:	68 24 b1 02 c0       	push   0xc002b124
c0015163:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015169:	e8 ae bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c001516e:	0f 21 f8             	mov    eax,db7
c0015171:	5a                   	pop    edx
c0015172:	59                   	pop    ecx
c0015173:	50                   	push   eax
c0015174:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0015179:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001517f:	e8 be bf ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015184:	5e                   	pop    esi
c0015185:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015188:	e8 9c 85 00 00       	call   c001d729 <Thr::getDriverNameFromAddress(unsigned long)>
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	85 c0                	test   eax,eax
c0015192:	74 7d                	je     c0015211 <displayDebugInfo(regs*)+0x48b>
c0015194:	89 c6                	mov    esi,eax
c0015196:	50                   	push   eax
c0015197:	50                   	push   eax
c0015198:	56                   	push   esi
c0015199:	68 2c b1 02 c0       	push   0xc002b12c
c001519e:	e8 66 dd ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00151a3:	5a                   	pop    edx
c00151a4:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00151a9:	59                   	pop    ecx
c00151aa:	68 3a b1 02 c0       	push   0xc002b13a
c00151af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b5:	e8 62 bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c00151ba:	5f                   	pop    edi
c00151bb:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00151c0:	5d                   	pop    ebp
c00151c1:	56                   	push   esi
c00151c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c8:	e8 4f bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c00151cd:	58                   	pop    eax
c00151ce:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00151d3:	5a                   	pop    edx
c00151d4:	68 46 b1 02 c0       	push   0xc002b146
c00151d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151df:	e8 38 bf ff ff       	call   c001111c <VgaText::puts(char const*)>
c00151e4:	59                   	pop    ecx
c00151e5:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00151ea:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151f0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151f3:	e8 68 85 00 00       	call   c001d760 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151f8:	5b                   	pop    ebx
c00151f9:	5d                   	pop    ebp
c00151fa:	50                   	push   eax
c00151fb:	57                   	push   edi
c00151fc:	e8 41 bf ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c0015201:	58                   	pop    eax
c0015202:	5a                   	pop    edx
c0015203:	56                   	push   esi
c0015204:	68 52 b1 02 c0       	push   0xc002b152
c0015209:	e8 fb dc ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	fa                   	cli    
c0015212:	f4                   	hlt    
c0015213:	eb fe                	jmp    c0015213 <displayDebugInfo(regs*)+0x48d>

c0015215 <x87EmulHandler(regs*, void*)>:
c0015215:	83 ec 0c             	sub    esp,0xc
c0015218:	0f 20 c2             	mov    edx,cr0
c001521b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015220:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015224:	75 4b                	jne    c0015271 <x87EmulHandler(regs*, void*)+0x5c>
c0015226:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001522b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0015231:	85 c0                	test   eax,eax
c0015233:	74 05                	je     c001523a <x87EmulHandler(regs*, void*)+0x25>
c0015235:	83 e2 08             	and    edx,0x8
c0015238:	75 17                	jne    c0015251 <x87EmulHandler(regs*, void*)+0x3c>
c001523a:	83 ec 0c             	sub    esp,0xc
c001523d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015241:	e8 aa a8 00 00       	call   c001faf0 <Vm::x87Handler(regs*)>
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	84 c0                	test   al,al
c001524b:	74 24                	je     c0015271 <x87EmulHandler(regs*, void*)+0x5c>
c001524d:	83 c4 0c             	add    esp,0xc
c0015250:	c3                   	ret    
c0015251:	83 ec 0c             	sub    esp,0xc
c0015254:	68 78 b1 02 c0       	push   0xc002b178
c0015259:	e8 ab dc ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001525e:	0f 06                	clts   
c0015260:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	a3 a8 e7 02 c0       	mov    ds:0xc002e7a8,eax
c001526d:	83 c4 0c             	add    esp,0xc
c0015270:	c3                   	ret    
c0015271:	83 ec 0c             	sub    esp,0xc
c0015274:	68 62 b1 02 c0       	push   0xc002b162
c0015279:	e8 8b dc ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001527e:	5a                   	pop    edx
c001527f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015283:	e8 fe fa ff ff       	call   c0014d86 <displayDebugInfo(regs*)>

c0015288 <gpFault(regs*, void*)>:
c0015288:	53                   	push   ebx
c0015289:	83 ec 14             	sub    esp,0x14
c001528c:	c7 05 a4 e7 02 c0 6d ee 01 c0 	mov    DWORD PTR ds:0xc002e7a4,0xc001ee6d
c0015296:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001529a:	53                   	push   ebx
c001529b:	e8 cd 9b 00 00       	call   c001ee6d <Vm::faultHandler(regs*)>
c00152a0:	83 c4 10             	add    esp,0x10
c00152a3:	84 c0                	test   al,al
c00152a5:	74 05                	je     c00152ac <gpFault(regs*, void*)+0x24>
c00152a7:	83 c4 08             	add    esp,0x8
c00152aa:	5b                   	pop    ebx
c00152ab:	c3                   	ret    
c00152ac:	83 ec 0c             	sub    esp,0xc
c00152af:	68 85 b1 02 c0       	push   0xc002b185
c00152b4:	e8 50 dc ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00152b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152bc:	e8 c5 fa ff ff       	call   c0014d86 <displayDebugInfo(regs*)>

c00152c1 <pgFault(regs*, void*)>:
c00152c1:	83 ec 14             	sub    esp,0x14
c00152c4:	0f 20 d0             	mov    eax,cr2
c00152c7:	50                   	push   eax
c00152c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152d0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152d6:	e8 57 d8 ff ff       	call   c0012b32 <VAS::tryLoadBackOffDisk(unsigned long)>
c00152db:	83 c4 10             	add    esp,0x10
c00152de:	84 c0                	test   al,al
c00152e0:	74 04                	je     c00152e6 <pgFault(regs*, void*)+0x25>
c00152e2:	83 c4 0c             	add    esp,0xc
c00152e5:	c3                   	ret    
c00152e6:	83 ec 0c             	sub    esp,0xc
c00152e9:	68 a0 b1 02 c0       	push   0xc002b1a0
c00152ee:	e8 16 dc ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00152f3:	58                   	pop    eax
c00152f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152f8:	e8 89 fa ff ff       	call   c0014d86 <displayDebugInfo(regs*)>

c00152fd <otherISRHandler(regs*, void*)>:
c00152fd:	53                   	push   ebx
c00152fe:	83 ec 0c             	sub    esp,0xc
c0015301:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015308:	50                   	push   eax
c0015309:	50                   	push   eax
c001530a:	68 ad b1 02 c0       	push   0xc002b1ad
c001530f:	e8 f5 db ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0015314:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015317:	e8 6a fa ff ff       	call   c0014d86 <displayDebugInfo(regs*)>

c001531c <opcodeFault(regs*, void*)>:
c001531c:	55                   	push   ebp
c001531d:	89 e5                	mov    ebp,esp
c001531f:	56                   	push   esi
c0015320:	53                   	push   ebx
c0015321:	83 ec 40             	sub    esp,0x40
c0015324:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0015329:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001532f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015335:	84 c0                	test   al,al
c0015337:	74 24                	je     c001535d <opcodeFault(regs*, void*)+0x41>
c0015339:	83 ec 0c             	sub    esp,0xc
c001533c:	68 cc b1 02 c0       	push   0xc002b1cc
c0015341:	e8 c3 db ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0015346:	83 c4 10             	add    esp,0x10
c0015349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534f:	8d 50 19             	lea    edx,[eax+0x19]
c0015352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015355:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015358:	e9 be 05 00 00       	jmp    c001591b <opcodeFault(regs*, void*)+0x5ff>
c001535d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015360:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015363:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015366:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001536a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001536e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015371:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015374:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015377:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537a:	8a 00                	mov    al,BYTE PTR [eax]
c001537c:	3c f0                	cmp    al,0xf0
c001537e:	75 17                	jne    c0015397 <opcodeFault(regs*, void*)+0x7b>
c0015380:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015386:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015389:	8d 50 01             	lea    edx,[eax+0x1]
c001538c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015392:	e9 da 00 00 00       	jmp    c0015471 <opcodeFault(regs*, void*)+0x155>
c0015397:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539a:	8a 00                	mov    al,BYTE PTR [eax]
c001539c:	3c f2                	cmp    al,0xf2
c001539e:	74 09                	je     c00153a9 <opcodeFault(regs*, void*)+0x8d>
c00153a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a3:	8a 00                	mov    al,BYTE PTR [eax]
c00153a5:	3c f3                	cmp    al,0xf3
c00153a7:	75 1b                	jne    c00153c4 <opcodeFault(regs*, void*)+0xa8>
c00153a9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b6:	8d 50 01             	lea    edx,[eax+0x1]
c00153b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153bf:	e9 ad 00 00 00       	jmp    c0015471 <opcodeFault(regs*, void*)+0x155>
c00153c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c7:	8a 00                	mov    al,BYTE PTR [eax]
c00153c9:	3c 66                	cmp    al,0x66
c00153cb:	75 1f                	jne    c00153ec <opcodeFault(regs*, void*)+0xd0>
c00153cd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153d1:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153d5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153de:	8d 50 01             	lea    edx,[eax+0x1]
c00153e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153e7:	e9 85 00 00 00       	jmp    c0015471 <opcodeFault(regs*, void*)+0x155>
c00153ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ef:	8a 00                	mov    al,BYTE PTR [eax]
c00153f1:	3c 67                	cmp    al,0x67
c00153f3:	75 18                	jne    c001540d <opcodeFault(regs*, void*)+0xf1>
c00153f5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153f9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015402:	8d 50 01             	lea    edx,[eax+0x1]
c0015405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015408:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001540b:	eb 64                	jmp    c0015471 <opcodeFault(regs*, void*)+0x155>
c001540d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015410:	8a 00                	mov    al,BYTE PTR [eax]
c0015412:	3c 2e                	cmp    al,0x2e
c0015414:	74 09                	je     c001541f <opcodeFault(regs*, void*)+0x103>
c0015416:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015419:	8a 00                	mov    al,BYTE PTR [eax]
c001541b:	3c 3e                	cmp    al,0x3e
c001541d:	75 18                	jne    c0015437 <opcodeFault(regs*, void*)+0x11b>
c001541f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015423:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015429:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542c:	8d 50 01             	lea    edx,[eax+0x1]
c001542f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015432:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015435:	eb 3a                	jmp    c0015471 <opcodeFault(regs*, void*)+0x155>
c0015437:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543a:	8a 00                	mov    al,BYTE PTR [eax]
c001543c:	3c 36                	cmp    al,0x36
c001543e:	74 1b                	je     c001545b <opcodeFault(regs*, void*)+0x13f>
c0015440:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015443:	8a 00                	mov    al,BYTE PTR [eax]
c0015445:	3c 26                	cmp    al,0x26
c0015447:	74 12                	je     c001545b <opcodeFault(regs*, void*)+0x13f>
c0015449:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544c:	8a 00                	mov    al,BYTE PTR [eax]
c001544e:	3c 64                	cmp    al,0x64
c0015450:	74 09                	je     c001545b <opcodeFault(regs*, void*)+0x13f>
c0015452:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015455:	8a 00                	mov    al,BYTE PTR [eax]
c0015457:	3c 65                	cmp    al,0x65
c0015459:	75 16                	jne    c0015471 <opcodeFault(regs*, void*)+0x155>
c001545b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001545f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015465:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015468:	8d 50 01             	lea    edx,[eax+0x1]
c001546b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015471:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015474:	8a 00                	mov    al,BYTE PTR [eax]
c0015476:	3c 0f                	cmp    al,0xf
c0015478:	0f 85 ad 00 00 00    	jne    c001552b <opcodeFault(regs*, void*)+0x20f>
c001547e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015481:	40                   	inc    eax
c0015482:	8a 00                	mov    al,BYTE PTR [eax]
c0015484:	3c c2                	cmp    al,0xc2
c0015486:	74 0e                	je     c0015496 <opcodeFault(regs*, void*)+0x17a>
c0015488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548b:	40                   	inc    eax
c001548c:	8a 00                	mov    al,BYTE PTR [eax]
c001548e:	3c c3                	cmp    al,0xc3
c0015490:	0f 85 95 00 00 00    	jne    c001552b <opcodeFault(regs*, void*)+0x20f>
c0015496:	83 ec 0c             	sub    esp,0xc
c0015499:	68 ef b1 02 c0       	push   0xc002b1ef
c001549e:	e8 66 da ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00154a3:	83 c4 10             	add    esp,0x10
c00154a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ac:	8d 50 01             	lea    edx,[eax+0x1]
c00154af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bb:	8a 00                	mov    al,BYTE PTR [eax]
c00154bd:	8d 50 fe             	lea    edx,[eax-0x2]
c00154c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c3:	88 10                	mov    BYTE PTR [eax],dl
c00154c5:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154c8:	50                   	push   eax
c00154c9:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154cc:	50                   	push   eax
c00154cd:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154d0:	50                   	push   eax
c00154d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154d4:	e8 35 48 00 00       	call   c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154d9:	83 c4 10             	add    esp,0x10
c00154dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154e5:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154e8:	01 d0                	add    eax,edx
c00154ea:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154f6:	48                   	dec    eax
c00154f7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fd:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015500:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015506:	83 ec 04             	sub    esp,0x4
c0015509:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001550c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001550f:	50                   	push   eax
c0015510:	e8 9f ac fe ff       	call   c00001b4 <voodooXADD>
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001551b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001551e:	01 c2                	add    edx,eax
c0015520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015523:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015526:	e9 f0 03 00 00       	jmp    c001591b <opcodeFault(regs*, void*)+0x5ff>
c001552b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552e:	8a 00                	mov    al,BYTE PTR [eax]
c0015530:	3c 0f                	cmp    al,0xf
c0015532:	0f 85 8b 01 00 00    	jne    c00156c3 <opcodeFault(regs*, void*)+0x3a7>
c0015538:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553b:	40                   	inc    eax
c001553c:	8a 00                	mov    al,BYTE PTR [eax]
c001553e:	3c c7                	cmp    al,0xc7
c0015540:	0f 86 7d 01 00 00    	jbe    c00156c3 <opcodeFault(regs*, void*)+0x3a7>
c0015546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015549:	40                   	inc    eax
c001554a:	8a 00                	mov    al,BYTE PTR [eax]
c001554c:	3c cf                	cmp    al,0xcf
c001554e:	0f 87 6f 01 00 00    	ja     c00156c3 <opcodeFault(regs*, void*)+0x3a7>
c0015554:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015557:	40                   	inc    eax
c0015558:	8a 00                	mov    al,BYTE PTR [eax]
c001555a:	83 c0 38             	add    eax,0x38
c001555d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015560:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015564:	75 0b                	jne    c0015571 <opcodeFault(regs*, void*)+0x255>
c0015566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015569:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001556c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556f:	eb 75                	jmp    c00155e6 <opcodeFault(regs*, void*)+0x2ca>
c0015571:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015575:	75 0b                	jne    c0015582 <opcodeFault(regs*, void*)+0x266>
c0015577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001557d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015580:	eb 64                	jmp    c00155e6 <opcodeFault(regs*, void*)+0x2ca>
c0015582:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015586:	75 0b                	jne    c0015593 <opcodeFault(regs*, void*)+0x277>
c0015588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001558e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015591:	eb 53                	jmp    c00155e6 <opcodeFault(regs*, void*)+0x2ca>
c0015593:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015597:	75 0b                	jne    c00155a4 <opcodeFault(regs*, void*)+0x288>
c0015599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001559f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a2:	eb 42                	jmp    c00155e6 <opcodeFault(regs*, void*)+0x2ca>
c00155a4:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155a8:	75 0b                	jne    c00155b5 <opcodeFault(regs*, void*)+0x299>
c00155aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ad:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155b0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b3:	eb 31                	jmp    c00155e6 <opcodeFault(regs*, void*)+0x2ca>
c00155b5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155b9:	75 0b                	jne    c00155c6 <opcodeFault(regs*, void*)+0x2aa>
c00155bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155be:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c4:	eb 20                	jmp    c00155e6 <opcodeFault(regs*, void*)+0x2ca>
c00155c6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155ca:	75 0b                	jne    c00155d7 <opcodeFault(regs*, void*)+0x2bb>
c00155cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d5:	eb 0f                	jmp    c00155e6 <opcodeFault(regs*, void*)+0x2ca>
c00155d7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155db:	75 09                	jne    c00155e6 <opcodeFault(regs*, void*)+0x2ca>
c00155dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155e6:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155ea:	74 10                	je     c00155fc <opcodeFault(regs*, void*)+0x2e0>
c00155ec:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155f3:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155fa:	eb 2d                	jmp    c0015629 <opcodeFault(regs*, void*)+0x30d>
c00155fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155ff:	c1 e0 18             	shl    eax,0x18
c0015602:	89 c2                	mov    edx,eax
c0015604:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015607:	c1 e0 08             	shl    eax,0x8
c001560a:	25 00 00 ff 00       	and    eax,0xff0000
c001560f:	09 c2                	or     edx,eax
c0015611:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015614:	c1 e8 08             	shr    eax,0x8
c0015617:	25 00 ff 00 00       	and    eax,0xff00
c001561c:	09 c2                	or     edx,eax
c001561e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015621:	c1 e8 18             	shr    eax,0x18
c0015624:	09 d0                	or     eax,edx
c0015626:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015629:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001562d:	75 0b                	jne    c001563a <opcodeFault(regs*, void*)+0x31e>
c001562f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015632:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015635:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015638:	eb 75                	jmp    c00156af <opcodeFault(regs*, void*)+0x393>
c001563a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001563e:	75 0b                	jne    c001564b <opcodeFault(regs*, void*)+0x32f>
c0015640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015643:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015646:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015649:	eb 64                	jmp    c00156af <opcodeFault(regs*, void*)+0x393>
c001564b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001564f:	75 0b                	jne    c001565c <opcodeFault(regs*, void*)+0x340>
c0015651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015654:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015657:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001565a:	eb 53                	jmp    c00156af <opcodeFault(regs*, void*)+0x393>
c001565c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015660:	75 0b                	jne    c001566d <opcodeFault(regs*, void*)+0x351>
c0015662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015665:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015668:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001566b:	eb 42                	jmp    c00156af <opcodeFault(regs*, void*)+0x393>
c001566d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015671:	75 0b                	jne    c001567e <opcodeFault(regs*, void*)+0x362>
c0015673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015676:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015679:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001567c:	eb 31                	jmp    c00156af <opcodeFault(regs*, void*)+0x393>
c001567e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015682:	75 0b                	jne    c001568f <opcodeFault(regs*, void*)+0x373>
c0015684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015687:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001568a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001568d:	eb 20                	jmp    c00156af <opcodeFault(regs*, void*)+0x393>
c001568f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015693:	75 0b                	jne    c00156a0 <opcodeFault(regs*, void*)+0x384>
c0015695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015698:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001569b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001569e:	eb 0f                	jmp    c00156af <opcodeFault(regs*, void*)+0x393>
c00156a0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156a4:	75 09                	jne    c00156af <opcodeFault(regs*, void*)+0x393>
c00156a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156b5:	8d 50 02             	lea    edx,[eax+0x2]
c00156b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156be:	e9 58 02 00 00       	jmp    c001591b <opcodeFault(regs*, void*)+0x5ff>
c00156c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c6:	8a 00                	mov    al,BYTE PTR [eax]
c00156c8:	3c 0f                	cmp    al,0xf
c00156ca:	0f 85 76 01 00 00    	jne    c0015846 <opcodeFault(regs*, void*)+0x52a>
c00156d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d3:	40                   	inc    eax
c00156d4:	8a 00                	mov    al,BYTE PTR [eax]
c00156d6:	3c c7                	cmp    al,0xc7
c00156d8:	0f 85 68 01 00 00    	jne    c0015846 <opcodeFault(regs*, void*)+0x52a>
c00156de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156e7:	8d 50 01             	lea    edx,[eax+0x1]
c00156ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156f0:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156f3:	50                   	push   eax
c00156f4:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156f7:	50                   	push   eax
c00156f8:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156fb:	50                   	push   eax
c00156fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156ff:	e8 0a 46 00 00       	call   c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015704:	83 c4 10             	add    esp,0x10
c0015707:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001570a:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001570d:	83 f0 01             	xor    eax,0x1
c0015710:	84 c0                	test   al,al
c0015712:	0f 84 2e 01 00 00    	je     c0015846 <opcodeFault(regs*, void*)+0x52a>
c0015718:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001571b:	3c 01                	cmp    al,0x1
c001571d:	0f 85 23 01 00 00    	jne    c0015846 <opcodeFault(regs*, void*)+0x52a>
c0015723:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015726:	83 f0 01             	xor    eax,0x1
c0015729:	84 c0                	test   al,al
c001572b:	0f 84 15 01 00 00    	je     c0015846 <opcodeFault(regs*, void*)+0x52a>
c0015731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015734:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015737:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001573a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015741:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015744:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015747:	89 c2                	mov    edx,eax
c0015749:	b8 00 00 00 00       	mov    eax,0x0
c001574e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015751:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015757:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001575a:	ba 00 00 00 00       	mov    edx,0x0
c001575f:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015762:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015768:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001576b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001576e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015775:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015778:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001577b:	89 c2                	mov    edx,eax
c001577d:	b8 00 00 00 00       	mov    eax,0x0
c0015782:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015785:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001578e:	ba 00 00 00 00       	mov    edx,0x0
c0015793:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015796:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015799:	e8 84 86 00 00       	call   c001de22 <lockScheduler()>
c001579e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157a1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a6:	89 c1                	mov    ecx,eax
c00157a8:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157ab:	89 cb                	mov    ebx,ecx
c00157ad:	89 d0                	mov    eax,edx
c00157af:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157b2:	89 c6                	mov    esi,eax
c00157b4:	89 f0                	mov    eax,esi
c00157b6:	09 d8                	or     eax,ebx
c00157b8:	85 c0                	test   eax,eax
c00157ba:	75 21                	jne    c00157dd <opcodeFault(regs*, void*)+0x4c1>
c00157bc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157bf:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157c2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157c5:	89 01                	mov    DWORD PTR [ecx],eax
c00157c7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157d0:	83 c8 40             	or     eax,0x40
c00157d3:	89 c2                	mov    edx,eax
c00157d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157db:	eb 3e                	jmp    c001581b <opcodeFault(regs*, void*)+0x4ff>
c00157dd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157e8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157eb:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157f4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157f7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157fa:	89 d0                	mov    eax,edx
c00157fc:	31 d2                	xor    edx,edx
c00157fe:	89 c3                	mov    ebx,eax
c0015800:	89 d6                	mov    esi,edx
c0015802:	89 da                	mov    edx,ebx
c0015804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015807:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001580a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015810:	83 e0 bf             	and    eax,0xffffffbf
c0015813:	89 c2                	mov    edx,eax
c0015815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015818:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001581b:	e8 04 86 00 00       	call   c001de24 <unlockScheduler()>
c0015820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015823:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015826:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015829:	01 c2                	add    edx,eax
c001582b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015831:	83 ec 0c             	sub    esp,0xc
c0015834:	68 fe b1 02 c0       	push   0xc002b1fe
c0015839:	e8 cb d6 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001583e:	83 c4 10             	add    esp,0x10
c0015841:	e9 d5 00 00 00       	jmp    c001591b <opcodeFault(regs*, void*)+0x5ff>
c0015846:	83 ec 0c             	sub    esp,0xc
c0015849:	68 11 b2 02 c0       	push   0xc002b211
c001584e:	e8 b6 d6 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0015853:	83 c4 10             	add    esp,0x10
c0015856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015859:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001585c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015862:	c1 e0 04             	shl    eax,0x4
c0015865:	01 d0                	add    eax,edx
c0015867:	83 c0 03             	add    eax,0x3
c001586a:	8a 00                	mov    al,BYTE PTR [eax]
c001586c:	0f b6 d8             	movzx  ebx,al
c001586f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015872:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015878:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001587b:	c1 e0 04             	shl    eax,0x4
c001587e:	01 d0                	add    eax,edx
c0015880:	83 c0 02             	add    eax,0x2
c0015883:	8a 00                	mov    al,BYTE PTR [eax]
c0015885:	0f b6 c8             	movzx  ecx,al
c0015888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015894:	c1 e0 04             	shl    eax,0x4
c0015897:	01 d0                	add    eax,edx
c0015899:	40                   	inc    eax
c001589a:	8a 00                	mov    al,BYTE PTR [eax]
c001589c:	0f b6 d0             	movzx  edx,al
c001589f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a2:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158ab:	c1 e0 04             	shl    eax,0x4
c00158ae:	01 f0                	add    eax,esi
c00158b0:	8a 00                	mov    al,BYTE PTR [eax]
c00158b2:	0f b6 c0             	movzx  eax,al
c00158b5:	83 ec 0c             	sub    esp,0xc
c00158b8:	53                   	push   ebx
c00158b9:	51                   	push   ecx
c00158ba:	52                   	push   edx
c00158bb:	50                   	push   eax
c00158bc:	68 24 b2 02 c0       	push   0xc002b224
c00158c1:	e8 43 d6 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00158c6:	83 c4 20             	add    esp,0x20
c00158c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158cf:	83 c0 03             	add    eax,0x3
c00158d2:	8a 00                	mov    al,BYTE PTR [eax]
c00158d4:	0f b6 d8             	movzx  ebx,al
c00158d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158dd:	83 c0 02             	add    eax,0x2
c00158e0:	8a 00                	mov    al,BYTE PTR [eax]
c00158e2:	0f b6 c8             	movzx  ecx,al
c00158e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158eb:	40                   	inc    eax
c00158ec:	8a 00                	mov    al,BYTE PTR [eax]
c00158ee:	0f b6 d0             	movzx  edx,al
c00158f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158f7:	8a 00                	mov    al,BYTE PTR [eax]
c00158f9:	0f b6 c0             	movzx  eax,al
c00158fc:	83 ec 0c             	sub    esp,0xc
c00158ff:	53                   	push   ebx
c0015900:	51                   	push   ecx
c0015901:	52                   	push   edx
c0015902:	50                   	push   eax
c0015903:	68 4c b2 02 c0       	push   0xc002b24c
c0015908:	e8 fc d5 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001590d:	83 c4 20             	add    esp,0x20
c0015910:	83 ec 0c             	sub    esp,0xc
c0015913:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015916:	e8 6b f4 ff ff       	call   c0014d86 <displayDebugInfo(regs*)>
c001591b:	8d 65 f8             	lea    esp,[ebp-0x8]
c001591e:	5b                   	pop    ebx
c001591f:	5e                   	pop    esi
c0015920:	5d                   	pop    ebp
c0015921:	c3                   	ret    

c0015922 <displayProgramFault(char const*)>:
c0015922:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015927:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001592a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015930:	85 c0                	test   eax,eax
c0015932:	74 15                	je     c0015949 <displayProgramFault(char const*)+0x27>
c0015934:	83 ec 0c             	sub    esp,0xc
c0015937:	6a 04                	push   0x4
c0015939:	6a 0f                	push   0xf
c001593b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001593f:	50                   	push   eax
c0015940:	e8 99 b4 ff ff       	call   c0010dde <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015945:	83 c4 1c             	add    esp,0x1c
c0015948:	c3                   	ret    
c0015949:	c3                   	ret    

c001594a <setupInterruptController()>:
c001594a:	55                   	push   ebp
c001594b:	89 e5                	mov    ebp,esp
c001594d:	53                   	push   ebx
c001594e:	83 ec 24             	sub    esp,0x24
c0015951:	b8 00 00 00 00       	mov    eax,0x0
c0015956:	85 c0                	test   eax,eax
c0015958:	0f 95 c0             	setne  al
c001595b:	84 c0                	test   al,al
c001595d:	74 5b                	je     c00159ba <setupInterruptController()+0x70>
c001595f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015966:	83 ec 0c             	sub    esp,0xc
c0015969:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001596c:	e8 da 9e ff ff       	call   c000f84b <malloc>
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	89 c3                	mov    ebx,eax
c0015976:	83 ec 0c             	sub    esp,0xc
c0015979:	53                   	push   ebx
c001597a:	e8 25 01 01 00       	call   c0025aa4 <APIC::APIC()>
c001597f:	83 c4 10             	add    esp,0x10
c0015982:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015985:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015988:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001598b:	8b 00                	mov    eax,DWORD PTR [eax]
c001598d:	83 c0 08             	add    eax,0x8
c0015990:	8b 00                	mov    eax,DWORD PTR [eax]
c0015992:	6a 00                	push   0x0
c0015994:	6a 00                	push   0x0
c0015996:	6a 00                	push   0x0
c0015998:	52                   	push   edx
c0015999:	ff d0                	call   eax
c001599b:	83 c4 10             	add    esp,0x10
c001599e:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00159a3:	83 ec 08             	sub    esp,0x8
c00159a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159a9:	50                   	push   eax
c00159aa:	e8 87 e9 ff ff       	call   c0014336 <Device::addChild(Device*)>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159b5:	e9 89 03 00 00       	jmp    c0015d43 <setupInterruptController()+0x3f9>
c00159ba:	a0 a0 0f 03 c0       	mov    al,ds:0xc0030fa0
c00159bf:	84 c0                	test   al,al
c00159c1:	75 24                	jne    c00159e7 <setupInterruptController()+0x9d>
c00159c3:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00159c8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00159ce:	83 e2 fe             	and    edx,0xfffffffe
c00159d1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00159d7:	83 ec 0c             	sub    esp,0xc
c00159da:	68 71 b2 02 c0       	push   0xc002b271
c00159df:	e8 25 d5 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00159e4:	83 c4 10             	add    esp,0x10
c00159e7:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00159ec:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159f2:	83 e0 01             	and    eax,0x1
c00159f5:	84 c0                	test   al,al
c00159f7:	0f 95 c0             	setne  al
c00159fa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159fd:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a04:	83 ec 0c             	sub    esp,0xc
c0015a07:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a0a:	e8 3c 9e ff ff       	call   c000f84b <malloc>
c0015a0f:	83 c4 10             	add    esp,0x10
c0015a12:	89 c3                	mov    ebx,eax
c0015a14:	83 ec 0c             	sub    esp,0xc
c0015a17:	53                   	push   ebx
c0015a18:	e8 df 05 01 00       	call   c0025ffc <PIC::PIC()>
c0015a1d:	83 c4 10             	add    esp,0x10
c0015a20:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a23:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2b:	83 c0 08             	add    eax,0x8
c0015a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a30:	6a 00                	push   0x0
c0015a32:	6a 00                	push   0x0
c0015a34:	6a 00                	push   0x0
c0015a36:	52                   	push   edx
c0015a37:	ff d0                	call   eax
c0015a39:	83 c4 10             	add    esp,0x10
c0015a3c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a40:	74 73                	je     c0015ab5 <setupInterruptController()+0x16b>
c0015a42:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4a:	83 c0 0c             	add    eax,0xc
c0015a4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4f:	6a 00                	push   0x0
c0015a51:	6a 00                	push   0x0
c0015a53:	6a 00                	push   0x0
c0015a55:	52                   	push   edx
c0015a56:	ff d0                	call   eax
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a5f:	74 15                	je     c0015a76 <setupInterruptController()+0x12c>
c0015a61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a66:	83 c0 04             	add    eax,0x4
c0015a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6b:	83 ec 0c             	sub    esp,0xc
c0015a6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a71:	ff d0                	call   eax
c0015a73:	83 c4 10             	add    esp,0x10
c0015a76:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a7d:	83 ec 0c             	sub    esp,0xc
c0015a80:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a83:	e8 c3 9d ff ff       	call   c000f84b <malloc>
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	89 c3                	mov    ebx,eax
c0015a8d:	83 ec 0c             	sub    esp,0xc
c0015a90:	53                   	push   ebx
c0015a91:	e8 0e 00 01 00       	call   c0025aa4 <APIC::APIC()>
c0015a96:	83 c4 10             	add    esp,0x10
c0015a99:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a9c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa4:	83 c0 08             	add    eax,0x8
c0015aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa9:	6a 00                	push   0x0
c0015aab:	6a 00                	push   0x0
c0015aad:	6a 00                	push   0x0
c0015aaf:	52                   	push   edx
c0015ab0:	ff d0                	call   eax
c0015ab2:	83 c4 10             	add    esp,0x10
c0015ab5:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0015aba:	83 ec 08             	sub    esp,0x8
c0015abd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac0:	50                   	push   eax
c0015ac1:	e8 70 e8 ff ff       	call   c0014336 <Device::addChild(Device*)>
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	c7 05 a8 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7a8,0x0
c0015ad3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad8:	83 c0 24             	add    eax,0x24
c0015adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015add:	6a 00                	push   0x0
c0015adf:	68 fd 52 01 c0       	push   0xc00152fd
c0015ae4:	6a 00                	push   0x0
c0015ae6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae9:	ff d0                	call   eax
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af3:	83 c0 24             	add    eax,0x24
c0015af6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af8:	6a 00                	push   0x0
c0015afa:	68 fd 52 01 c0       	push   0xc00152fd
c0015aff:	6a 01                	push   0x1
c0015b01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b04:	ff d0                	call   eax
c0015b06:	83 c4 10             	add    esp,0x10
c0015b09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0e:	83 c0 24             	add    eax,0x24
c0015b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b13:	6a 00                	push   0x0
c0015b15:	68 e3 4b 01 c0       	push   0xc0014be3
c0015b1a:	6a 02                	push   0x2
c0015b1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1f:	ff d0                	call   eax
c0015b21:	83 c4 10             	add    esp,0x10
c0015b24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b29:	83 c0 24             	add    eax,0x24
c0015b2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2e:	6a 00                	push   0x0
c0015b30:	68 fd 52 01 c0       	push   0xc00152fd
c0015b35:	6a 03                	push   0x3
c0015b37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3a:	ff d0                	call   eax
c0015b3c:	83 c4 10             	add    esp,0x10
c0015b3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b44:	83 c0 24             	add    eax,0x24
c0015b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b49:	6a 00                	push   0x0
c0015b4b:	68 fd 52 01 c0       	push   0xc00152fd
c0015b50:	6a 04                	push   0x4
c0015b52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b55:	ff d0                	call   eax
c0015b57:	83 c4 10             	add    esp,0x10
c0015b5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5f:	83 c0 24             	add    eax,0x24
c0015b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b64:	6a 00                	push   0x0
c0015b66:	68 fd 52 01 c0       	push   0xc00152fd
c0015b6b:	6a 05                	push   0x5
c0015b6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b70:	ff d0                	call   eax
c0015b72:	83 c4 10             	add    esp,0x10
c0015b75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7a:	83 c0 24             	add    eax,0x24
c0015b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7f:	6a 00                	push   0x0
c0015b81:	68 1c 53 01 c0       	push   0xc001531c
c0015b86:	6a 06                	push   0x6
c0015b88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8b:	ff d0                	call   eax
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b95:	83 c0 24             	add    eax,0x24
c0015b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9a:	6a 00                	push   0x0
c0015b9c:	68 15 52 01 c0       	push   0xc0015215
c0015ba1:	6a 07                	push   0x7
c0015ba3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba6:	ff d0                	call   eax
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb0:	83 c0 24             	add    eax,0x24
c0015bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb5:	6a 00                	push   0x0
c0015bb7:	68 fe 49 01 c0       	push   0xc00149fe
c0015bbc:	6a 08                	push   0x8
c0015bbe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc1:	ff d0                	call   eax
c0015bc3:	83 c4 10             	add    esp,0x10
c0015bc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcb:	83 c0 24             	add    eax,0x24
c0015bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd0:	6a 00                	push   0x0
c0015bd2:	68 fd 52 01 c0       	push   0xc00152fd
c0015bd7:	6a 09                	push   0x9
c0015bd9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bdc:	ff d0                	call   eax
c0015bde:	83 c4 10             	add    esp,0x10
c0015be1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be6:	83 c0 24             	add    eax,0x24
c0015be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015beb:	6a 00                	push   0x0
c0015bed:	68 fd 52 01 c0       	push   0xc00152fd
c0015bf2:	6a 0a                	push   0xa
c0015bf4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf7:	ff d0                	call   eax
c0015bf9:	83 c4 10             	add    esp,0x10
c0015bfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c01:	83 c0 24             	add    eax,0x24
c0015c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c06:	6a 00                	push   0x0
c0015c08:	68 fd 52 01 c0       	push   0xc00152fd
c0015c0d:	6a 0b                	push   0xb
c0015c0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c12:	ff d0                	call   eax
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1c:	83 c0 24             	add    eax,0x24
c0015c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c21:	6a 00                	push   0x0
c0015c23:	68 fd 52 01 c0       	push   0xc00152fd
c0015c28:	6a 0c                	push   0xc
c0015c2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2d:	ff d0                	call   eax
c0015c2f:	83 c4 10             	add    esp,0x10
c0015c32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c37:	83 c0 24             	add    eax,0x24
c0015c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3c:	6a 00                	push   0x0
c0015c3e:	68 88 52 01 c0       	push   0xc0015288
c0015c43:	6a 0d                	push   0xd
c0015c45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c48:	ff d0                	call   eax
c0015c4a:	83 c4 10             	add    esp,0x10
c0015c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c52:	83 c0 24             	add    eax,0x24
c0015c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c57:	6a 00                	push   0x0
c0015c59:	68 c1 52 01 c0       	push   0xc00152c1
c0015c5e:	6a 0e                	push   0xe
c0015c60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c63:	ff d0                	call   eax
c0015c65:	83 c4 10             	add    esp,0x10
c0015c68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6d:	83 c0 24             	add    eax,0x24
c0015c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c72:	6a 00                	push   0x0
c0015c74:	68 fd 52 01 c0       	push   0xc00152fd
c0015c79:	6a 0f                	push   0xf
c0015c7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7e:	ff d0                	call   eax
c0015c80:	83 c4 10             	add    esp,0x10
c0015c83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c88:	83 c0 24             	add    eax,0x24
c0015c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8d:	6a 00                	push   0x0
c0015c8f:	68 fd 52 01 c0       	push   0xc00152fd
c0015c94:	6a 10                	push   0x10
c0015c96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c99:	ff d0                	call   eax
c0015c9b:	83 c4 10             	add    esp,0x10
c0015c9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca3:	83 c0 24             	add    eax,0x24
c0015ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca8:	6a 00                	push   0x0
c0015caa:	68 fd 52 01 c0       	push   0xc00152fd
c0015caf:	6a 11                	push   0x11
c0015cb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb4:	ff d0                	call   eax
c0015cb6:	83 c4 10             	add    esp,0x10
c0015cb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbe:	83 c0 24             	add    eax,0x24
c0015cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc3:	6a 00                	push   0x0
c0015cc5:	68 fd 52 01 c0       	push   0xc00152fd
c0015cca:	6a 12                	push   0x12
c0015ccc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ccf:	ff d0                	call   eax
c0015cd1:	83 c4 10             	add    esp,0x10
c0015cd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd9:	83 c0 24             	add    eax,0x24
c0015cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cde:	6a 00                	push   0x0
c0015ce0:	68 fd 52 01 c0       	push   0xc00152fd
c0015ce5:	6a 13                	push   0x13
c0015ce7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cea:	ff d0                	call   eax
c0015cec:	83 c4 10             	add    esp,0x10
c0015cef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf4:	83 c0 24             	add    eax,0x24
c0015cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf9:	6a 00                	push   0x0
c0015cfb:	68 fd 52 01 c0       	push   0xc00152fd
c0015d00:	6a 14                	push   0x14
c0015d02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d05:	ff d0                	call   eax
c0015d07:	83 c4 10             	add    esp,0x10
c0015d0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0f:	83 c0 24             	add    eax,0x24
c0015d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d14:	6a 00                	push   0x0
c0015d16:	68 fd 52 01 c0       	push   0xc00152fd
c0015d1b:	6a 1e                	push   0x1e
c0015d1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d20:	ff d0                	call   eax
c0015d22:	83 c4 10             	add    esp,0x10
c0015d25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2a:	83 c0 24             	add    eax,0x24
c0015d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2f:	6a 00                	push   0x0
c0015d31:	68 d1 c7 01 c0       	push   0xc001c7d1
c0015d36:	6a 60                	push   0x60
c0015d38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d3b:	ff d0                	call   eax
c0015d3d:	83 c4 10             	add    esp,0x10
c0015d40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d43:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d46:	c9                   	leave  
c0015d47:	c3                   	ret    

c0015d48 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d48:	55                   	push   ebp
c0015d49:	89 e5                	mov    ebp,esp
c0015d4b:	83 ec 08             	sub    esp,0x8
c0015d4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d51:	83 ec 0c             	sub    esp,0xc
c0015d54:	50                   	push   eax
c0015d55:	e8 c8 e8 ff ff       	call   c0014622 <Device::getName()>
c0015d5a:	83 c4 10             	add    esp,0x10
c0015d5d:	8a 00                	mov    al,BYTE PTR [eax]
c0015d5f:	3c 41                	cmp    al,0x41
c0015d61:	0f 94 c0             	sete   al
c0015d64:	84 c0                	test   al,al
c0015d66:	74 28                	je     c0015d90 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d68:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d6c:	7f 12                	jg     c0015d80 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d71:	05 60 d8 02 c0       	add    eax,0xc002d860
c0015d76:	8a 00                	mov    al,BYTE PTR [eax]
c0015d78:	0f b6 c0             	movzx  eax,al
c0015d7b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d7e:	eb 10                	jmp    c0015d90 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d80:	83 ec 0c             	sub    esp,0xc
c0015d83:	68 60 af 02 c0       	push   0xc002af60
c0015d88:	e8 ba 48 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d93:	c9                   	leave  
c0015d94:	c3                   	ret    
c0015d95:	90                   	nop

c0015d96 <startGUI(void*)>:
c0015d96:	55                   	push   ebp
c0015d97:	89 e5                	mov    ebp,esp
c0015d99:	53                   	push   ebx
c0015d9a:	83 ec 04             	sub    esp,0x4
c0015d9d:	e8 82 80 00 00       	call   c001de24 <unlockScheduler()>
c0015da2:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015da8:	83 ec 08             	sub    esp,0x8
c0015dab:	6a 01                	push   0x1
c0015dad:	68 d4 b2 02 c0       	push   0xc002b2d4
c0015db2:	e8 c3 79 00 00       	call   c001d77a <Thr::loadDLL(char const*, bool)>
c0015db7:	83 c4 10             	add    esp,0x10
c0015dba:	83 ec 08             	sub    esp,0x8
c0015dbd:	53                   	push   ebx
c0015dbe:	50                   	push   eax
c0015dbf:	e8 ea 7b 00 00       	call   c001d9ae <Thr::executeDLL(unsigned long, void*)>
c0015dc4:	83 c4 10             	add    esp,0x10
c0015dc7:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015dcd:	83 ec 08             	sub    esp,0x8
c0015dd0:	6a 01                	push   0x1
c0015dd2:	68 ee b2 02 c0       	push   0xc002b2ee
c0015dd7:	e8 9e 79 00 00       	call   c001d77a <Thr::loadDLL(char const*, bool)>
c0015ddc:	83 c4 10             	add    esp,0x10
c0015ddf:	83 ec 08             	sub    esp,0x8
c0015de2:	53                   	push   ebx
c0015de3:	50                   	push   eax
c0015de4:	e8 c5 7b 00 00       	call   c001d9ae <Thr::executeDLL(unsigned long, void*)>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	90                   	nop
c0015ded:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015df0:	c9                   	leave  
c0015df1:	c3                   	ret    

c0015df2 <startGUIVESA(void*)>:
c0015df2:	55                   	push   ebp
c0015df3:	89 e5                	mov    ebp,esp
c0015df5:	53                   	push   ebx
c0015df6:	83 ec 04             	sub    esp,0x4
c0015df9:	e8 26 80 00 00       	call   c001de24 <unlockScheduler()>
c0015dfe:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015e04:	83 ec 08             	sub    esp,0x8
c0015e07:	6a 01                	push   0x1
c0015e09:	68 08 b3 02 c0       	push   0xc002b308
c0015e0e:	e8 67 79 00 00       	call   c001d77a <Thr::loadDLL(char const*, bool)>
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	83 ec 08             	sub    esp,0x8
c0015e19:	53                   	push   ebx
c0015e1a:	50                   	push   eax
c0015e1b:	e8 8e 7b 00 00       	call   c001d9ae <Thr::executeDLL(unsigned long, void*)>
c0015e20:	83 c4 10             	add    esp,0x10
c0015e23:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c0015e29:	83 ec 08             	sub    esp,0x8
c0015e2c:	6a 01                	push   0x1
c0015e2e:	68 ee b2 02 c0       	push   0xc002b2ee
c0015e33:	e8 42 79 00 00       	call   c001d77a <Thr::loadDLL(char const*, bool)>
c0015e38:	83 c4 10             	add    esp,0x10
c0015e3b:	83 ec 08             	sub    esp,0x8
c0015e3e:	53                   	push   ebx
c0015e3f:	50                   	push   eax
c0015e40:	e8 69 7b 00 00       	call   c001d9ae <Thr::executeDLL(unsigned long, void*)>
c0015e45:	83 c4 10             	add    esp,0x10
c0015e48:	90                   	nop
c0015e49:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e4c:	c9                   	leave  
c0015e4d:	c3                   	ret    

c0015e4e <sendKeyToTerminal(unsigned char)>:
c0015e4e:	55                   	push   ebp
c0015e4f:	89 e5                	mov    ebp,esp
c0015e51:	83 ec 28             	sub    esp,0x28
c0015e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e57:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e5a:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0015e5f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e63:	83 ec 08             	sub    esp,0x8
c0015e66:	52                   	push   edx
c0015e67:	50                   	push   eax
c0015e68:	e8 ad b4 ff ff       	call   c001131a <VgaText::receiveKey(unsigned char)>
c0015e6d:	83 c4 10             	add    esp,0x10
c0015e70:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e74:	75 41                	jne    c0015eb7 <sendKeyToTerminal(unsigned char)+0x69>
c0015e76:	e8 ce 7f 00 00       	call   c001de49 <lockStuff()>
c0015e7b:	a1 c0 e7 02 c0       	mov    eax,ds:0xc002e7c0
c0015e80:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e83:	c7 05 c0 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7c0,0x0
c0015e8d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e91:	74 1f                	je     c0015eb2 <sendKeyToTerminal(unsigned char)+0x64>
c0015e93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e96:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e9c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e9f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ea2:	83 ec 0c             	sub    esp,0xc
c0015ea5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ea8:	e8 c7 85 00 00       	call   c001e474 <unblockTask(ThreadControlBlock*)>
c0015ead:	83 c4 10             	add    esp,0x10
c0015eb0:	eb db                	jmp    c0015e8d <sendKeyToTerminal(unsigned char)+0x3f>
c0015eb2:	e8 66 83 00 00       	call   c001e21d <unlockStuff()>
c0015eb7:	90                   	nop
c0015eb8:	c9                   	leave  
c0015eb9:	c3                   	ret    

c0015eba <sendKeyboardToken(KeyboardToken)>:
c0015eba:	55                   	push   ebp
c0015ebb:	89 e5                	mov    ebp,esp
c0015ebd:	83 ec 18             	sub    esp,0x18
c0015ec0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec6:	0f b7 c0             	movzx  eax,ax
c0015ec9:	83 f2 01             	xor    edx,0x1
c0015ecc:	88 90 e0 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1820],dl
c0015ed2:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c0015ed7:	85 c0                	test   eax,eax
c0015ed9:	74 24                	je     c0015eff <sendKeyboardToken(KeyboardToken)+0x45>
c0015edb:	8b 0d c8 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e7c8
c0015ee1:	83 ec 04             	sub    esp,0x4
c0015ee4:	68 e0 e7 02 c0       	push   0xc002e7e0
c0015ee9:	83 ec 08             	sub    esp,0x8
c0015eec:	89 e2                	mov    edx,esp
c0015eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef1:	89 02                	mov    DWORD PTR [edx],eax
c0015ef3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ef6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015efa:	ff d1                	call   ecx
c0015efc:	83 c4 10             	add    esp,0x10
c0015eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f02:	66 3d 03 02          	cmp    ax,0x203
c0015f06:	75 07                	jne    c0015f0f <sendKeyboardToken(KeyboardToken)+0x55>
c0015f08:	a0 e0 e8 02 c0       	mov    al,ds:0xc002e8e0
c0015f0d:	84 c0                	test   al,al
c0015f0f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f13:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f16:	a0 e8 eb 02 c0       	mov    al,ds:0xc002ebe8
c0015f1b:	38 c2                	cmp    dl,al
c0015f1d:	74 1c                	je     c0015f3b <sendKeyboardToken(KeyboardToken)+0x81>
c0015f1f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f22:	a2 e8 eb 02 c0       	mov    ds:0xc002ebe8,al
c0015f27:	a0 e8 eb 02 c0       	mov    al,ds:0xc002ebe8
c0015f2c:	0f b6 c0             	movzx  eax,al
c0015f2f:	83 ec 0c             	sub    esp,0xc
c0015f32:	50                   	push   eax
c0015f33:	e8 42 a6 ff ff       	call   c001057a <setTerminalScrollLock(bool)>
c0015f38:	83 c4 10             	add    esp,0x10
c0015f3b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f3e:	84 c0                	test   al,al
c0015f40:	0f 84 ae 00 00 00    	je     c0015ff4 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f49:	66 3d 10 03          	cmp    ax,0x310
c0015f4d:	75 06                	jne    c0015f55 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f4f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f58:	66 3d 11 03          	cmp    ax,0x311
c0015f5c:	75 06                	jne    c0015f64 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f5e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f67:	66 3d 12 03          	cmp    ax,0x312
c0015f6b:	75 06                	jne    c0015f73 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f6d:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f76:	66 3d 13 03          	cmp    ax,0x313
c0015f7a:	75 06                	jne    c0015f82 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f7c:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f85:	66 3d 14 03          	cmp    ax,0x314
c0015f89:	75 06                	jne    c0015f91 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f8b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f94:	66 3d 15 03          	cmp    ax,0x315
c0015f98:	75 06                	jne    c0015fa0 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f9a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa3:	66 3d 16 03          	cmp    ax,0x316
c0015fa7:	75 06                	jne    c0015faf <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fa9:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb2:	66 3d 17 03          	cmp    ax,0x317
c0015fb6:	75 06                	jne    c0015fbe <sendKeyboardToken(KeyboardToken)+0x104>
c0015fb8:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc1:	66 3d 18 03          	cmp    ax,0x318
c0015fc5:	75 06                	jne    c0015fcd <sendKeyboardToken(KeyboardToken)+0x113>
c0015fc7:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd0:	66 3d 19 03          	cmp    ax,0x319
c0015fd4:	75 06                	jne    c0015fdc <sendKeyboardToken(KeyboardToken)+0x122>
c0015fd6:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdf:	66 3d 1a 03          	cmp    ax,0x31a
c0015fe3:	0f 85 c9 00 00 00    	jne    c00160b2 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fe9:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fef:	e9 be 00 00 00       	jmp    c00160b2 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff7:	66 3d 10 03          	cmp    ax,0x310
c0015ffb:	75 0a                	jne    c0016007 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015ffd:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016003:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600a:	66 3d 11 03          	cmp    ax,0x311
c001600e:	75 0a                	jne    c001601a <sendKeyboardToken(KeyboardToken)+0x160>
c0016010:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016016:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601d:	66 3d 12 03          	cmp    ax,0x312
c0016021:	75 0a                	jne    c001602d <sendKeyboardToken(KeyboardToken)+0x173>
c0016023:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016029:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001602d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016030:	66 3d 13 03          	cmp    ax,0x313
c0016034:	75 0a                	jne    c0016040 <sendKeyboardToken(KeyboardToken)+0x186>
c0016036:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001603c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016043:	66 3d 14 03          	cmp    ax,0x314
c0016047:	75 0a                	jne    c0016053 <sendKeyboardToken(KeyboardToken)+0x199>
c0016049:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001604f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016056:	66 3d 15 03          	cmp    ax,0x315
c001605a:	75 0a                	jne    c0016066 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001605c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016062:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016069:	66 3d 16 03          	cmp    ax,0x316
c001606d:	75 0a                	jne    c0016079 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001606f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016075:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607c:	66 3d 17 03          	cmp    ax,0x317
c0016080:	75 0a                	jne    c001608c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016082:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016088:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608f:	66 3d 18 03          	cmp    ax,0x318
c0016093:	75 0a                	jne    c001609f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016095:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001609b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001609f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a2:	66 3d 19 03          	cmp    ax,0x319
c00160a6:	75 0a                	jne    c00160b2 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160a8:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b5:	66 3d 00 02          	cmp    ax,0x200
c00160b9:	75 2c                	jne    c00160e7 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160bb:	a0 e0 eb 02 c0       	mov    al,ds:0xc002ebe0
c00160c0:	83 f0 01             	xor    eax,0x1
c00160c3:	84 c0                	test   al,al
c00160c5:	74 20                	je     c00160e7 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160c7:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c00160cc:	6a 01                	push   0x1
c00160ce:	6a 00                	push   0x0
c00160d0:	68 96 5d 01 c0       	push   0xc0015d96
c00160d5:	50                   	push   eax
c00160d6:	e8 79 7e 00 00       	call   c001df54 <Process::createThread(void (*)(void*), void*, int)>
c00160db:	83 c4 10             	add    esp,0x10
c00160de:	c6 05 e0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebe0,0x1
c00160e5:	eb 33                	jmp    c001611a <sendKeyboardToken(KeyboardToken)+0x260>
c00160e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ea:	66 3d 01 02          	cmp    ax,0x201
c00160ee:	75 2a                	jne    c001611a <sendKeyboardToken(KeyboardToken)+0x260>
c00160f0:	a0 e0 eb 02 c0       	mov    al,ds:0xc002ebe0
c00160f5:	83 f0 01             	xor    eax,0x1
c00160f8:	84 c0                	test   al,al
c00160fa:	74 1e                	je     c001611a <sendKeyboardToken(KeyboardToken)+0x260>
c00160fc:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0016101:	6a 01                	push   0x1
c0016103:	6a 00                	push   0x0
c0016105:	68 f2 5d 01 c0       	push   0xc0015df2
c001610a:	50                   	push   eax
c001610b:	e8 44 7e 00 00       	call   c001df54 <Process::createThread(void (*)(void*), void*, int)>
c0016110:	83 c4 10             	add    esp,0x10
c0016113:	c6 05 e0 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebe0,0x1
c001611a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611d:	66 3d 1d 03          	cmp    ax,0x31d
c0016121:	75 06                	jne    c0016129 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016123:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612c:	66 3d 1c 03          	cmp    ax,0x31c
c0016130:	75 06                	jne    c0016138 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016132:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613b:	66 3d 1b 03          	cmp    ax,0x31b
c001613f:	75 06                	jne    c0016147 <sendKeyboardToken(KeyboardToken)+0x28d>
c0016141:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614a:	66 3d 1e 03          	cmp    ax,0x31e
c001614e:	75 06                	jne    c0016156 <sendKeyboardToken(KeyboardToken)+0x29c>
c0016150:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016159:	66 3d 1f 03          	cmp    ax,0x31f
c001615d:	75 06                	jne    c0016165 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001615f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016168:	66 3d 1a 03          	cmp    ax,0x31a
c001616c:	75 06                	jne    c0016174 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001616e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016174:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016178:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001617b:	83 f0 01             	xor    eax,0x1
c001617e:	84 c0                	test   al,al
c0016180:	74 77                	je     c00161f9 <sendKeyboardToken(KeyboardToken)+0x33f>
c0016182:	a0 e1 e8 02 c0       	mov    al,ds:0xc002e8e1
c0016187:	84 c0                	test   al,al
c0016189:	74 41                	je     c00161cc <sendKeyboardToken(KeyboardToken)+0x312>
c001618b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001618f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016193:	74 2b                	je     c00161c0 <sendKeyboardToken(KeyboardToken)+0x306>
c0016195:	8b 15 e4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebe4
c001619b:	89 d0                	mov    eax,edx
c001619d:	c1 e0 02             	shl    eax,0x2
c00161a0:	01 d0                	add    eax,edx
c00161a2:	01 c0                	add    eax,eax
c00161a4:	a3 e4 eb 02 c0       	mov    ds:0xc002ebe4,eax
c00161a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ac:	0f b7 c0             	movzx  eax,ax
c00161af:	8d 50 d0             	lea    edx,[eax-0x30]
c00161b2:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c00161b7:	01 d0                	add    eax,edx
c00161b9:	a3 e4 eb 02 c0       	mov    ds:0xc002ebe4,eax
c00161be:	eb 6d                	jmp    c001622d <sendKeyboardToken(KeyboardToken)+0x373>
c00161c0:	c7 05 e4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebe4,0x0
c00161ca:	eb 61                	jmp    c001622d <sendKeyboardToken(KeyboardToken)+0x373>
c00161cc:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c00161d1:	85 c0                	test   eax,eax
c00161d3:	74 18                	je     c00161ed <sendKeyboardToken(KeyboardToken)+0x333>
c00161d5:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c00161da:	0f b6 c0             	movzx  eax,al
c00161dd:	83 ec 0c             	sub    esp,0xc
c00161e0:	50                   	push   eax
c00161e1:	e8 68 fc ff ff       	call   c0015e4e <sendKeyToTerminal(unsigned char)>
c00161e6:	83 c4 10             	add    esp,0x10
c00161e9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161ed:	c7 05 e4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebe4,0x0
c00161f7:	eb 34                	jmp    c001622d <sendKeyboardToken(KeyboardToken)+0x373>
c00161f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fc:	66 3d 01 01          	cmp    ax,0x101
c0016200:	75 2b                	jne    c001622d <sendKeyboardToken(KeyboardToken)+0x373>
c0016202:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c0016207:	85 c0                	test   eax,eax
c0016209:	74 18                	je     c0016223 <sendKeyboardToken(KeyboardToken)+0x369>
c001620b:	a1 e4 eb 02 c0       	mov    eax,ds:0xc002ebe4
c0016210:	0f b6 c0             	movzx  eax,al
c0016213:	83 ec 0c             	sub    esp,0xc
c0016216:	50                   	push   eax
c0016217:	e8 32 fc ff ff       	call   c0015e4e <sendKeyToTerminal(unsigned char)>
c001621c:	83 c4 10             	add    esp,0x10
c001621f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016223:	c7 05 e4 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebe4,0x0
c001622d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016230:	83 f0 01             	xor    eax,0x1
c0016233:	84 c0                	test   al,al
c0016235:	74 4c                	je     c0016283 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016237:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001623a:	83 f0 01             	xor    eax,0x1
c001623d:	84 c0                	test   al,al
c001623f:	74 42                	je     c0016283 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016241:	a0 e0 e8 02 c0       	mov    al,ds:0xc002e8e0
c0016246:	83 f0 01             	xor    eax,0x1
c0016249:	84 c0                	test   al,al
c001624b:	74 36                	je     c0016283 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001624d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016250:	66 83 f8 1f          	cmp    ax,0x1f
c0016254:	76 09                	jbe    c001625f <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016259:	66 83 f8 7e          	cmp    ax,0x7e
c001625d:	76 12                	jbe    c0016271 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001625f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016262:	66 83 f8 0a          	cmp    ax,0xa
c0016266:	74 09                	je     c0016271 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626b:	66 83 f8 08          	cmp    ax,0x8
c001626f:	75 12                	jne    c0016283 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016274:	0f b6 c0             	movzx  eax,al
c0016277:	83 ec 0c             	sub    esp,0xc
c001627a:	50                   	push   eax
c001627b:	e8 ce fb ff ff       	call   c0015e4e <sendKeyToTerminal(unsigned char)>
c0016280:	83 c4 10             	add    esp,0x10
c0016283:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016286:	83 f0 01             	xor    eax,0x1
c0016289:	84 c0                	test   al,al
c001628b:	74 4f                	je     c00162dc <sendKeyboardToken(KeyboardToken)+0x422>
c001628d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016290:	83 f0 01             	xor    eax,0x1
c0016293:	84 c0                	test   al,al
c0016295:	74 45                	je     c00162dc <sendKeyboardToken(KeyboardToken)+0x422>
c0016297:	a0 e0 e8 02 c0       	mov    al,ds:0xc002e8e0
c001629c:	84 c0                	test   al,al
c001629e:	74 3c                	je     c00162dc <sendKeyboardToken(KeyboardToken)+0x422>
c00162a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a3:	66 83 f8 3f          	cmp    ax,0x3f
c00162a7:	76 33                	jbe    c00162dc <sendKeyboardToken(KeyboardToken)+0x422>
c00162a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ac:	66 83 f8 7f          	cmp    ax,0x7f
c00162b0:	77 2a                	ja     c00162dc <sendKeyboardToken(KeyboardToken)+0x422>
c00162b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b5:	88 c2                	mov    dl,al
c00162b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ba:	66 83 f8 5f          	cmp    ax,0x5f
c00162be:	76 04                	jbe    c00162c4 <sendKeyboardToken(KeyboardToken)+0x40a>
c00162c0:	b0 20                	mov    al,0x20
c00162c2:	eb 02                	jmp    c00162c6 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162c4:	b0 00                	mov    al,0x0
c00162c6:	29 c2                	sub    edx,eax
c00162c8:	88 d0                	mov    al,dl
c00162ca:	83 e8 40             	sub    eax,0x40
c00162cd:	0f b6 c0             	movzx  eax,al
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	50                   	push   eax
c00162d4:	e8 75 fb ff ff       	call   c0015e4e <sendKeyToTerminal(unsigned char)>
c00162d9:	83 c4 10             	add    esp,0x10
c00162dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162df:	66 3d 00 03          	cmp    ax,0x300
c00162e3:	75 0f                	jne    c00162f4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162e5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162e8:	83 f0 01             	xor    eax,0x1
c00162eb:	84 c0                	test   al,al
c00162ed:	74 05                	je     c00162f4 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162ef:	e8 bb aa ff ff       	call   c0010daf <doTerminalCycle()>
c00162f4:	90                   	nop
c00162f5:	c9                   	leave  
c00162f6:	c3                   	ret    

c00162f7 <clearInternalKeybuffer(VgaText*)>:
c00162f7:	55                   	push   ebp
c00162f8:	89 e5                	mov    ebp,esp
c00162fa:	83 ec 08             	sub    esp,0x8
c00162fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016300:	05 34 11 00 00       	add    eax,0x1134
c0016305:	83 ec 0c             	sub    esp,0xc
c0016308:	50                   	push   eax
c0016309:	e8 8e a4 fe ff       	call   c000079c <strlen>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016314:	81 c2 34 11 00 00    	add    edx,0x1134
c001631a:	83 ec 04             	sub    esp,0x4
c001631d:	50                   	push   eax
c001631e:	6a 00                	push   0x0
c0016320:	52                   	push   edx
c0016321:	e8 5a a4 fe ff       	call   c0000780 <memset>
c0016326:	83 c4 10             	add    esp,0x10
c0016329:	90                   	nop
c001632a:	c9                   	leave  
c001632b:	c3                   	ret    

c001632c <readKeyboard(VgaText*, char*, unsigned long)>:
c001632c:	55                   	push   ebp
c001632d:	89 e5                	mov    ebp,esp
c001632f:	83 ec 18             	sub    esp,0x18
c0016332:	fb                   	sti    
c0016333:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001633a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001633e:	0f 84 8a 00 00 00    	je     c00163ce <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016347:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001634d:	84 c0                	test   al,al
c001634f:	75 11                	jne    c0016362 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016351:	e8 cc 7a 00 00       	call   c001de22 <lockScheduler()>
c0016356:	e8 3d 7e 00 00       	call   c001e198 <schedule()>
c001635b:	e8 c4 7a 00 00       	call   c001de24 <unlockScheduler()>
c0016360:	eb e2                	jmp    c0016344 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016362:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016365:	8d 50 01             	lea    edx,[eax+0x1]
c0016368:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001636b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001636e:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016374:	88 10                	mov    BYTE PTR [eax],dl
c0016376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016379:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001637f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016385:	05 34 11 00 00       	add    eax,0x1134
c001638a:	83 ec 0c             	sub    esp,0xc
c001638d:	50                   	push   eax
c001638e:	e8 09 a4 fe ff       	call   c000079c <strlen>
c0016393:	83 c4 10             	add    esp,0x10
c0016396:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016399:	81 c2 34 11 00 00    	add    edx,0x1134
c001639f:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163a2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163a5:	81 c2 34 11 00 00    	add    edx,0x1134
c00163ab:	83 ec 04             	sub    esp,0x4
c00163ae:	50                   	push   eax
c00163af:	51                   	push   ecx
c00163b0:	52                   	push   edx
c00163b1:	e8 ce a2 fe ff       	call   c0000684 <memmove>
c00163b6:	83 c4 10             	add    esp,0x10
c00163b9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163bc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163bf:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163c3:	0f 85 71 ff ff ff    	jne    c001633a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00163c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163cc:	eb 03                	jmp    c00163d1 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00163ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163d1:	c9                   	leave  
c00163d2:	c3                   	ret    
c00163d3:	90                   	nop

c00163d4 <Keyboard::Keyboard(char const*)>:
c00163d4:	83 ec 0c             	sub    esp,0xc
c00163d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163db:	83 ec 08             	sub    esp,0x8
c00163de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e2:	50                   	push   eax
c00163e3:	e8 3e e1 ff ff       	call   c0014526 <Device::Device(char const*)>
c00163e8:	83 c4 10             	add    esp,0x10
c00163eb:	ba 2c b3 02 c0       	mov    edx,0xc002b32c
c00163f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f4:	89 10                	mov    DWORD PTR [eax],edx
c00163f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fa:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016404:	c6 05 c4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7c4,0x1
c001640b:	90                   	nop
c001640c:	83 c4 0c             	add    esp,0xc
c001640f:	c3                   	ret    

c0016410 <Keyboard::~Keyboard()>:
c0016410:	83 ec 0c             	sub    esp,0xc
c0016413:	ba 2c b3 02 c0       	mov    edx,0xc002b32c
c0016418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641c:	89 10                	mov    DWORD PTR [eax],edx
c001641e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016422:	83 ec 0c             	sub    esp,0xc
c0016425:	50                   	push   eax
c0016426:	e8 dd dd ff ff       	call   c0014208 <Device::~Device()>
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	90                   	nop
c001642f:	83 c4 0c             	add    esp,0xc
c0016432:	c3                   	ret    
c0016433:	90                   	nop

c0016434 <Keyboard::~Keyboard()>:
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	83 ec 0c             	sub    esp,0xc
c001643a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001643e:	e8 cd ff ff ff       	call   c0016410 <Keyboard::~Keyboard()>
c0016443:	83 c4 10             	add    esp,0x10
c0016446:	83 ec 08             	sub    esp,0x8
c0016449:	68 5c 01 00 00       	push   0x15c
c001644e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016452:	e8 d2 c9 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	83 c4 0c             	add    esp,0xc
c001645d:	c3                   	ret    

c001645e <LogicalDisk::close(int, int, void*)>:
c001645e:	83 c8 ff             	or     eax,0xffffffff
c0016461:	c3                   	ret    

c0016462 <LogicalDisk::~LogicalDisk()>:
c0016462:	83 ec 0c             	sub    esp,0xc
c0016465:	ba dc b3 02 c0       	mov    edx,0xc002b3dc
c001646a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646e:	89 10                	mov    DWORD PTR [eax],edx
c0016470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	50                   	push   eax
c0016478:	e8 8b dd ff ff       	call   c0014208 <Device::~Device()>
c001647d:	83 c4 10             	add    esp,0x10
c0016480:	90                   	nop
c0016481:	83 c4 0c             	add    esp,0xc
c0016484:	c3                   	ret    
c0016485:	90                   	nop

c0016486 <LogicalDisk::~LogicalDisk()>:
c0016486:	83 ec 0c             	sub    esp,0xc
c0016489:	83 ec 0c             	sub    esp,0xc
c001648c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016490:	e8 cd ff ff ff       	call   c0016462 <LogicalDisk::~LogicalDisk()>
c0016495:	83 c4 10             	add    esp,0x10
c0016498:	83 ec 08             	sub    esp,0x8
c001649b:	68 74 01 00 00       	push   0x174
c00164a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a4:	e8 80 c9 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00164a9:	83 c4 10             	add    esp,0x10
c00164ac:	83 c4 0c             	add    esp,0xc
c00164af:	c3                   	ret    

c00164b0 <LogicalDisk::open(int, int, void*)>:
c00164b0:	83 ec 18             	sub    esp,0x18
c00164b3:	68 58 b3 02 c0       	push   0xc002b358
c00164b8:	e8 8a 41 00 00       	call   c001a647 <Krnl::panic(char const*)>
c00164bd:	83 c8 ff             	or     eax,0xffffffff
c00164c0:	83 c4 1c             	add    esp,0x1c
c00164c3:	c3                   	ret    

c00164c4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164c4:	53                   	push   ebx
c00164c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164d1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164d7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164dd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164e3:	77 10                	ja     c00164f5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164e5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164eb:	89 d3                	mov    ebx,edx
c00164ed:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164f3:	72 05                	jb     c00164fa <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164f5:	83 c8 ff             	or     eax,0xffffffff
c00164f8:	89 c2                	mov    edx,eax
c00164fa:	5b                   	pop    ebx
c00164fb:	c3                   	ret    

c00164fc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164fc:	56                   	push   esi
c00164fd:	83 c8 ff             	or     eax,0xffffffff
c0016500:	53                   	push   ebx
c0016501:	89 c2                	mov    edx,eax
c0016503:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016507:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001650b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001650f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016515:	77 27                	ja     c001653e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016517:	89 d8                	mov    eax,ebx
c0016519:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001651f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016525:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001652a:	89 c2                	mov    edx,eax
c001652c:	73 10                	jae    c001653e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001652e:	89 c8                	mov    eax,ecx
c0016530:	89 da                	mov    edx,ebx
c0016532:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016538:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001653e:	5b                   	pop    ebx
c001653f:	5e                   	pop    esi
c0016540:	c3                   	ret    
c0016541:	90                   	nop

c0016542 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016542:	83 ec 1c             	sub    esp,0x1c
c0016545:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016549:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001654d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016551:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016555:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016559:	89 04 24             	mov    DWORD PTR [esp],eax
c001655c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016560:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016568:	83 ec 08             	sub    esp,0x8
c001656b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001656f:	50                   	push   eax
c0016570:	e8 b1 df ff ff       	call   c0014526 <Device::Device(char const*)>
c0016575:	83 c4 10             	add    esp,0x10
c0016578:	ba dc b3 02 c0       	mov    edx,0xc002b3dc
c001657d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016581:	89 10                	mov    DWORD PTR [eax],edx
c0016583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016587:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001658e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016592:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001659d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165b3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165b9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165ca:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165d0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165de:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165f2:	90                   	nop
c00165f3:	83 c4 1c             	add    esp,0x1c
c00165f6:	c3                   	ret    
c00165f7:	90                   	nop

c00165f8 <LogicalDisk::assignDriveLetter()>:
c00165f8:	55                   	push   ebp
c00165f9:	57                   	push   edi
c00165fa:	56                   	push   esi
c00165fb:	53                   	push   ebx
c00165fc:	83 ec 14             	sub    esp,0x14
c00165ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016603:	8b 3d 00 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec00
c0016609:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001660f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016613:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016619:	8b 3d 04 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec04
c001661f:	3c 01                	cmp    al,0x1
c0016621:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016625:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016629:	19 c0                	sbb    eax,eax
c001662b:	83 e0 02             	and    eax,0x2
c001662e:	83 c0 41             	add    eax,0x41
c0016631:	0f be e8             	movsx  ebp,al
c0016634:	3c 43                	cmp    al,0x43
c0016636:	75 10                	jne    c0016648 <LogicalDisk::assignDriveLetter()+0x50>
c0016638:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001663f:	75 5d                	jne    c001669e <LogicalDisk::assignDriveLetter()+0xa6>
c0016641:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016646:	75 56                	jne    c001669e <LogicalDisk::assignDriveLetter()+0xa6>
c0016648:	8d 75 bf             	lea    esi,[ebp-0x41]
c001664b:	ba 01 00 00 00       	mov    edx,0x1
c0016650:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016654:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016658:	d3 e2                	shl    edx,cl
c001665a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001665e:	89 d7                	mov    edi,edx
c0016660:	89 d6                	mov    esi,edx
c0016662:	c1 ff 1f             	sar    edi,0x1f
c0016665:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016669:	21 f9                	and    ecx,edi
c001666b:	09 d1                	or     ecx,edx
c001666d:	75 2f                	jne    c001669e <LogicalDisk::assignDriveLetter()+0xa6>
c001666f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016673:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016677:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001667d:	09 f2                	or     edx,esi
c001667f:	89 15 00 ec 02 c0    	mov    DWORD PTR ds:0xc002ec00,edx
c0016685:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016689:	09 fa                	or     edx,edi
c001668b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001668f:	89 15 04 ec 02 c0    	mov    DWORD PTR ds:0xc002ec04,edx
c0016695:	89 1c bd 20 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd13e0],ebx
c001669c:	eb 08                	jmp    c00166a6 <LogicalDisk::assignDriveLetter()+0xae>
c001669e:	45                   	inc    ebp
c001669f:	40                   	inc    eax
c00166a0:	3c 5b                	cmp    al,0x5b
c00166a2:	75 90                	jne    c0016634 <LogicalDisk::assignDriveLetter()+0x3c>
c00166a4:	31 c0                	xor    eax,eax
c00166a6:	83 c4 14             	add    esp,0x14
c00166a9:	5b                   	pop    ebx
c00166aa:	5e                   	pop    esi
c00166ab:	5f                   	pop    edi
c00166ac:	5d                   	pop    ebp
c00166ad:	c3                   	ret    

c00166ae <LogicalDisk::mount()>:
c00166ae:	56                   	push   esi
c00166af:	53                   	push   ebx
c00166b0:	51                   	push   ecx
c00166b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166b5:	8b 1d 94 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e794
c00166bb:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166c5:	85 db                	test   ebx,ebx
c00166c7:	74 50                	je     c0016719 <LogicalDisk::mount()+0x6b>
c00166c9:	e8 3f 77 00 00       	call   c001de0d <getIRQNestingLevel()>
c00166ce:	52                   	push   edx
c00166cf:	52                   	push   edx
c00166d0:	50                   	push   eax
c00166d1:	68 7c b3 02 c0       	push   0xc002b37c
c00166d6:	e8 2e c8 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00166db:	83 c4 0c             	add    esp,0xc
c00166de:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166e7:	83 e8 41             	sub    eax,0x41
c00166ea:	50                   	push   eax
c00166eb:	56                   	push   esi
c00166ec:	53                   	push   ebx
c00166ed:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166f0:	83 c4 10             	add    esp,0x10
c00166f3:	84 c0                	test   al,al
c00166f5:	74 08                	je     c00166ff <LogicalDisk::mount()+0x51>
c00166f7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166fd:	eb 1c                	jmp    c001671b <LogicalDisk::mount()+0x6d>
c00166ff:	e8 09 77 00 00       	call   c001de0d <getIRQNestingLevel()>
c0016704:	51                   	push   ecx
c0016705:	51                   	push   ecx
c0016706:	50                   	push   eax
c0016707:	68 97 b3 02 c0       	push   0xc002b397
c001670c:	e8 f8 c7 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0016711:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016714:	83 c4 10             	add    esp,0x10
c0016717:	eb ac                	jmp    c00166c5 <LogicalDisk::mount()+0x17>
c0016719:	31 c0                	xor    eax,eax
c001671b:	5a                   	pop    edx
c001671c:	5b                   	pop    ebx
c001671d:	5e                   	pop    esi
c001671e:	c3                   	ret    
c001671f:	90                   	nop

c0016720 <LogicalDisk::unmount()>:
c0016720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016724:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001672e:	c3                   	ret    
c001672f:	90                   	nop

c0016730 <LogicalDisk::eject()>:
c0016730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016734:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001673a:	8b 10                	mov    edx,DWORD PTR [eax]
c001673c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016740:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016743:	90                   	nop

c0016744 <LogicalDisk::unassignDriveLetter()>:
c0016744:	57                   	push   edi
c0016745:	56                   	push   esi
c0016746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001674a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016751:	84 c9                	test   cl,cl
c0016753:	75 0f                	jne    c0016764 <LogicalDisk::unassignDriveLetter()+0x20>
c0016755:	c7 44 24 0c b2 b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b3b2
c001675d:	5e                   	pop    esi
c001675e:	5f                   	pop    edi
c001675f:	e9 e3 3e 00 00       	jmp    c001a647 <Krnl::panic(char const*)>
c0016764:	83 e9 41             	sub    ecx,0x41
c0016767:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001676e:	b8 01 00 00 00       	mov    eax,0x1
c0016773:	c7 04 8d 20 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd13e0],0x0
c001677e:	d3 e0                	shl    eax,cl
c0016780:	89 c7                	mov    edi,eax
c0016782:	f7 d0                	not    eax
c0016784:	c1 ff 1f             	sar    edi,0x1f
c0016787:	21 05 00 ec 02 c0    	and    DWORD PTR ds:0xc002ec00,eax
c001678d:	89 fe                	mov    esi,edi
c001678f:	f7 d6                	not    esi
c0016791:	21 35 04 ec 02 c0    	and    DWORD PTR ds:0xc002ec04,esi
c0016797:	5e                   	pop    esi
c0016798:	5f                   	pop    edi
c0016799:	c3                   	ret    

c001679a <LogicalDisk::read(unsigned long long, int, void*)>:
c001679a:	57                   	push   edi
c001679b:	56                   	push   esi
c001679c:	53                   	push   ebx
c001679d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167a5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167ad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167b3:	77 41                	ja     c00167f6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167b5:	99                   	cdq    
c00167b6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167bc:	01 c8                	add    eax,ecx
c00167be:	11 da                	adc    edx,ebx
c00167c0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167c6:	19 d7                	sbb    edi,edx
c00167c8:	72 33                	jb     c00167fd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167ca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167d0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167da:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167de:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167e4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167ee:	5b                   	pop    ebx
c00167ef:	5e                   	pop    esi
c00167f0:	5f                   	pop    edi
c00167f1:	e9 b0 0a 00 00       	jmp    c00172a6 <VCache::read(unsigned long long, int, void*)>
c00167f6:	b8 05 00 00 00       	mov    eax,0x5
c00167fb:	eb 05                	jmp    c0016802 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167fd:	b8 07 00 00 00       	mov    eax,0x7
c0016802:	5b                   	pop    ebx
c0016803:	5e                   	pop    esi
c0016804:	5f                   	pop    edi
c0016805:	c3                   	ret    

c0016806 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016806:	57                   	push   edi
c0016807:	56                   	push   esi
c0016808:	53                   	push   ebx
c0016809:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001680d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016811:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016815:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016819:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001681f:	77 41                	ja     c0016862 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016821:	99                   	cdq    
c0016822:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016828:	01 c8                	add    eax,ecx
c001682a:	11 da                	adc    edx,ebx
c001682c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016832:	19 d7                	sbb    edi,edx
c0016834:	72 33                	jb     c0016869 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016836:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001683c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016842:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016846:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001684a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016850:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016856:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001685a:	5b                   	pop    ebx
c001685b:	5e                   	pop    esi
c001685c:	5f                   	pop    edi
c001685d:	e9 4e 09 00 00       	jmp    c00171b0 <VCache::write(unsigned long long, int, void*)>
c0016862:	b8 05 00 00 00       	mov    eax,0x5
c0016867:	eb 05                	jmp    c001686e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016869:	b8 07 00 00 00       	mov    eax,0x7
c001686e:	5b                   	pop    ebx
c001686f:	5e                   	pop    esi
c0016870:	5f                   	pop    edi
c0016871:	c3                   	ret    

c0016872 <Mouse::Mouse(char const*)>:
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016879:	83 ec 08             	sub    esp,0x8
c001687c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016880:	50                   	push   eax
c0016881:	e8 a0 dc ff ff       	call   c0014526 <Device::Device(char const*)>
c0016886:	83 c4 10             	add    esp,0x10
c0016889:	ba 08 b4 02 c0       	mov    edx,0xc002b408
c001688e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016892:	89 10                	mov    DWORD PTR [eax],edx
c0016894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016898:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168a2:	90                   	nop
c00168a3:	83 c4 0c             	add    esp,0xc
c00168a6:	c3                   	ret    
c00168a7:	90                   	nop

c00168a8 <Mouse::~Mouse()>:
c00168a8:	83 ec 0c             	sub    esp,0xc
c00168ab:	ba 08 b4 02 c0       	mov    edx,0xc002b408
c00168b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b4:	89 10                	mov    DWORD PTR [eax],edx
c00168b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ba:	83 ec 0c             	sub    esp,0xc
c00168bd:	50                   	push   eax
c00168be:	e8 45 d9 ff ff       	call   c0014208 <Device::~Device()>
c00168c3:	83 c4 10             	add    esp,0x10
c00168c6:	90                   	nop
c00168c7:	83 c4 0c             	add    esp,0xc
c00168ca:	c3                   	ret    
c00168cb:	90                   	nop

c00168cc <Mouse::~Mouse()>:
c00168cc:	83 ec 0c             	sub    esp,0xc
c00168cf:	83 ec 0c             	sub    esp,0xc
c00168d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168d6:	e8 cd ff ff ff       	call   c00168a8 <Mouse::~Mouse()>
c00168db:	83 c4 10             	add    esp,0x10
c00168de:	83 ec 08             	sub    esp,0x8
c00168e1:	68 58 01 00 00       	push   0x158
c00168e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ea:	e8 3a c5 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	83 c4 0c             	add    esp,0xc
c00168f5:	c3                   	ret    

c00168f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168f6:	55                   	push   ebp
c00168f7:	57                   	push   edi
c00168f8:	56                   	push   esi
c00168f9:	53                   	push   ebx
c00168fa:	81 ec 28 01 00 00    	sub    esp,0x128
c0016900:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016907:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001690e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016915:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001691c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016920:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016924:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001692b:	e8 f2 dc ff ff       	call   c0014622 <Device::getName()>
c0016930:	5a                   	pop    edx
c0016931:	59                   	pop    ecx
c0016932:	50                   	push   eax
c0016933:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016937:	55                   	push   ebp
c0016938:	e8 ff 9e fe ff       	call   c000083c <strcpy>
c001693d:	5b                   	pop    ebx
c001693e:	58                   	pop    eax
c001693f:	68 2c b4 02 c0       	push   0xc002b42c
c0016944:	55                   	push   ebp
c0016945:	e8 32 a0 fe ff       	call   c000097c <strcat>
c001694a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016951:	e8 f5 8e ff ff       	call   c000f84b <malloc>
c0016956:	83 c4 0c             	add    esp,0xc
c0016959:	89 c3                	mov    ebx,eax
c001695b:	57                   	push   edi
c001695c:	56                   	push   esi
c001695d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016965:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001696c:	55                   	push   ebp
c001696d:	50                   	push   eax
c001696e:	e8 cf fb ff ff       	call   c0016542 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016973:	83 c4 14             	add    esp,0x14
c0016976:	53                   	push   ebx
c0016977:	e8 7c fc ff ff       	call   c00165f8 <LogicalDisk::assignDriveLetter()>
c001697c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001697f:	89 c6                	mov    esi,eax
c0016981:	e8 28 fd ff ff       	call   c00166ae <LogicalDisk::mount()>
c0016986:	58                   	pop    eax
c0016987:	5a                   	pop    edx
c0016988:	53                   	push   ebx
c0016989:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016990:	e8 a1 d9 ff ff       	call   c0014336 <Device::addChild(Device*)>
c0016995:	59                   	pop    ecx
c0016996:	89 f0                	mov    eax,esi
c0016998:	5b                   	pop    ebx
c0016999:	0f be f0             	movsx  esi,al
c001699c:	56                   	push   esi
c001699d:	68 37 b4 02 c0       	push   0xc002b437
c00169a2:	e8 62 c5 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00169a7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169ad:	5b                   	pop    ebx
c00169ae:	5e                   	pop    esi
c00169af:	5f                   	pop    edi
c00169b0:	5d                   	pop    ebp
c00169b1:	c3                   	ret    

c00169b2 <createPartitionsForDisk(PhysicalDisk*)>:
c00169b2:	55                   	push   ebp
c00169b3:	57                   	push   edi
c00169b4:	56                   	push   esi
c00169b5:	53                   	push   ebx
c00169b6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169bc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169c3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169c9:	3d 00 02 00 00       	cmp    eax,0x200
c00169ce:	74 27                	je     c00169f7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169d0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169d6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169dc:	83 ec 10             	sub    esp,0x10
c00169df:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169e3:	99                   	cdq    
c00169e4:	c1 e6 0a             	shl    esi,0xa
c00169e7:	52                   	push   edx
c00169e8:	89 fd                	mov    ebp,edi
c00169ea:	50                   	push   eax
c00169eb:	55                   	push   ebp
c00169ec:	56                   	push   esi
c00169ed:	e8 42 01 01 00       	call   c0026b34 <__udivdi3>
c00169f2:	e9 b1 00 00 00       	jmp    c0016aa8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169f7:	83 ec 0c             	sub    esp,0xc
c00169fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169fc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a00:	56                   	push   esi
c0016a01:	6a 01                	push   0x1
c0016a03:	6a 00                	push   0x0
c0016a05:	6a 00                	push   0x0
c0016a07:	53                   	push   ebx
c0016a08:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a0b:	83 c4 20             	add    esp,0x20
c0016a0e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a16:	75 0a                	jne    c0016a22 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a18:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a20:	74 2c                	je     c0016a4e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a22:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a28:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a2e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a34:	83 ec 10             	sub    esp,0x10
c0016a37:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a3b:	89 f7                	mov    edi,esi
c0016a3d:	c1 e0 0a             	shl    eax,0xa
c0016a40:	c1 ff 1f             	sar    edi,0x1f
c0016a43:	57                   	push   edi
c0016a44:	56                   	push   esi
c0016a45:	52                   	push   edx
c0016a46:	50                   	push   eax
c0016a47:	e8 e8 00 01 00       	call   c0026b34 <__udivdi3>
c0016a4c:	eb 5a                	jmp    c0016aa8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a4e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a55:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a5c:	83 e1 7f             	and    ecx,0x7f
c0016a5f:	83 e0 7f             	and    eax,0x7f
c0016a62:	01 c1                	add    ecx,eax
c0016a64:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a6b:	83 e0 7f             	and    eax,0x7f
c0016a6e:	01 c1                	add    ecx,eax
c0016a70:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a77:	83 e0 7f             	and    eax,0x7f
c0016a7a:	00 c1                	add    cl,al
c0016a7c:	74 41                	je     c0016abf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a7e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a84:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a8a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a90:	83 ec 10             	sub    esp,0x10
c0016a93:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a97:	89 f7                	mov    edi,esi
c0016a99:	c1 e0 0a             	shl    eax,0xa
c0016a9c:	c1 ff 1f             	sar    edi,0x1f
c0016a9f:	57                   	push   edi
c0016aa0:	56                   	push   esi
c0016aa1:	52                   	push   edx
c0016aa2:	50                   	push   eax
c0016aa3:	e8 8c 00 01 00       	call   c0026b34 <__udivdi3>
c0016aa8:	83 c4 14             	add    esp,0x14
c0016aab:	52                   	push   edx
c0016aac:	50                   	push   eax
c0016aad:	6a 00                	push   0x0
c0016aaf:	6a 00                	push   0x0
c0016ab1:	53                   	push   ebx
c0016ab2:	e8 3f fe ff ff       	call   c00168f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ab7:	83 c4 20             	add    esp,0x20
c0016aba:	e9 79 01 00 00       	jmp    c0016c38 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016abf:	89 f0                	mov    eax,esi
c0016ac1:	31 f6                	xor    esi,esi
c0016ac3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016aca:	75 02                	jne    c0016ace <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016acc:	89 f1                	mov    ecx,esi
c0016ace:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016ad5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016adc:	c1 e2 08             	shl    edx,0x8
c0016adf:	c1 e7 10             	shl    edi,0x10
c0016ae2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016aea:	09 fa                	or     edx,edi
c0016aec:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016af4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016afb:	83 c0 10             	add    eax,0x10
c0016afe:	09 fa                	or     edx,edi
c0016b00:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b07:	c1 e7 18             	shl    edi,0x18
c0016b0a:	09 fa                	or     edx,edi
c0016b0c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b13:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b17:	c1 e7 10             	shl    edi,0x10
c0016b1a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b21:	c1 e2 08             	shl    edx,0x8
c0016b24:	09 fa                	or     edx,edi
c0016b26:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b2d:	09 fa                	or     edx,edi
c0016b2f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b36:	c1 e7 18             	shl    edi,0x18
c0016b39:	09 fa                	or     edx,edi
c0016b3b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b3f:	46                   	inc    esi
c0016b40:	83 fe 04             	cmp    esi,0x4
c0016b43:	0f 85 7a ff ff ff    	jne    c0016ac3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b4d:	83 f0 01             	xor    eax,0x1
c0016b50:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b54:	75 57                	jne    c0016bad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b5a:	83 f0 01             	xor    eax,0x1
c0016b5d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b61:	75 4a                	jne    c0016bad <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b63:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b6f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b77:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b7d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b83:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b89:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b8d:	89 f7                	mov    edi,esi
c0016b8f:	c1 e0 0a             	shl    eax,0xa
c0016b92:	c1 ff 1f             	sar    edi,0x1f
c0016b95:	57                   	push   edi
c0016b96:	56                   	push   esi
c0016b97:	52                   	push   edx
c0016b98:	50                   	push   eax
c0016b99:	e8 96 ff 00 00       	call   c0026b34 <__udivdi3>
c0016b9e:	83 c4 10             	add    esp,0x10
c0016ba1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ba5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ba9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bad:	84 c9                	test   cl,cl
c0016baf:	74 53                	je     c0016c04 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bb1:	0f b6 c9             	movzx  ecx,cl
c0016bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bbc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bc0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bcc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bd0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016be0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016be4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016be8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016bec:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016bf0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bf4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bf8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bfc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c00:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c04:	31 ed                	xor    ebp,ebp
c0016c06:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c0a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c0e:	89 f8                	mov    eax,edi
c0016c10:	09 f0                	or     eax,esi
c0016c12:	74 1e                	je     c0016c32 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c14:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c18:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c1c:	89 d1                	mov    ecx,edx
c0016c1e:	09 c1                	or     ecx,eax
c0016c20:	74 10                	je     c0016c32 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c22:	83 ec 0c             	sub    esp,0xc
c0016c25:	57                   	push   edi
c0016c26:	56                   	push   esi
c0016c27:	52                   	push   edx
c0016c28:	50                   	push   eax
c0016c29:	53                   	push   ebx
c0016c2a:	e8 c7 fc ff ff       	call   c00168f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c2f:	83 c4 20             	add    esp,0x20
c0016c32:	45                   	inc    ebp
c0016c33:	83 fd 04             	cmp    ebp,0x4
c0016c36:	75 ce                	jne    c0016c06 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c38:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c3e:	5b                   	pop    ebx
c0016c3f:	5e                   	pop    esi
c0016c40:	5f                   	pop    edi
c0016c41:	5d                   	pop    ebp
c0016c42:	c3                   	ret    
c0016c43:	90                   	nop

c0016c44 <Serial::Serial(char const*)>:
c0016c44:	83 ec 0c             	sub    esp,0xc
c0016c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4b:	83 ec 08             	sub    esp,0x8
c0016c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c52:	50                   	push   eax
c0016c53:	e8 ce d8 ff ff       	call   c0014526 <Device::Device(char const*)>
c0016c58:	83 c4 10             	add    esp,0x10
c0016c5b:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c0016c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c64:	89 10                	mov    DWORD PTR [eax],edx
c0016c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c74:	90                   	nop
c0016c75:	83 c4 0c             	add    esp,0xc
c0016c78:	c3                   	ret    
c0016c79:	90                   	nop

c0016c7a <Serial::~Serial()>:
c0016c7a:	83 ec 0c             	sub    esp,0xc
c0016c7d:	ba 64 b4 02 c0       	mov    edx,0xc002b464
c0016c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c86:	89 10                	mov    DWORD PTR [eax],edx
c0016c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	50                   	push   eax
c0016c90:	e8 73 d5 ff ff       	call   c0014208 <Device::~Device()>
c0016c95:	83 c4 10             	add    esp,0x10
c0016c98:	90                   	nop
c0016c99:	83 c4 0c             	add    esp,0xc
c0016c9c:	c3                   	ret    
c0016c9d:	90                   	nop

c0016c9e <Serial::~Serial()>:
c0016c9e:	83 ec 0c             	sub    esp,0xc
c0016ca1:	83 ec 0c             	sub    esp,0xc
c0016ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca8:	e8 cd ff ff ff       	call   c0016c7a <Serial::~Serial()>
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	83 ec 08             	sub    esp,0x8
c0016cb3:	68 58 01 00 00       	push   0x158
c0016cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cbc:	e8 68 c1 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0016cc1:	83 c4 10             	add    esp,0x10
c0016cc4:	83 c4 0c             	add    esp,0xc
c0016cc7:	c3                   	ret    

c0016cc8 <Timer::Timer(char const*)>:
c0016cc8:	83 ec 0c             	sub    esp,0xc
c0016ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ccf:	83 ec 08             	sub    esp,0x8
c0016cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd6:	50                   	push   eax
c0016cd7:	e8 4a d8 ff ff       	call   c0014526 <Device::Device(char const*)>
c0016cdc:	83 c4 10             	add    esp,0x10
c0016cdf:	ba a8 b4 02 c0       	mov    edx,0xc002b4a8
c0016ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce8:	89 10                	mov    DWORD PTR [eax],edx
c0016cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cee:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cf8:	90                   	nop
c0016cf9:	83 c4 0c             	add    esp,0xc
c0016cfc:	c3                   	ret    
c0016cfd:	90                   	nop

c0016cfe <Timer::~Timer()>:
c0016cfe:	83 ec 0c             	sub    esp,0xc
c0016d01:	ba a8 b4 02 c0       	mov    edx,0xc002b4a8
c0016d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0a:	89 10                	mov    DWORD PTR [eax],edx
c0016d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	50                   	push   eax
c0016d14:	e8 ef d4 ff ff       	call   c0014208 <Device::~Device()>
c0016d19:	83 c4 10             	add    esp,0x10
c0016d1c:	90                   	nop
c0016d1d:	83 c4 0c             	add    esp,0xc
c0016d20:	c3                   	ret    
c0016d21:	90                   	nop

c0016d22 <Timer::~Timer()>:
c0016d22:	83 ec 0c             	sub    esp,0xc
c0016d25:	83 ec 0c             	sub    esp,0xc
c0016d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d2c:	e8 cd ff ff ff       	call   c0016cfe <Timer::~Timer()>
c0016d31:	83 c4 10             	add    esp,0x10
c0016d34:	83 ec 08             	sub    esp,0x8
c0016d37:	68 5c 01 00 00       	push   0x15c
c0016d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d40:	e8 e4 c0 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0016d45:	83 c4 10             	add    esp,0x10
c0016d48:	83 c4 0c             	add    esp,0xc
c0016d4b:	c3                   	ret    

c0016d4c <Timer::read()>:
c0016d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d56:	c3                   	ret    

c0016d57 <timerHandler(unsigned long long)>:
c0016d57:	55                   	push   ebp
c0016d58:	57                   	push   edi
c0016d59:	56                   	push   esi
c0016d5a:	53                   	push   ebx
c0016d5b:	83 ec 0c             	sub    esp,0xc
c0016d5e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d62:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d66:	01 35 90 ec 02 c0    	add    DWORD PTR ds:0xc002ec90,esi
c0016d6c:	11 3d 94 ec 02 c0    	adc    DWORD PTR ds:0xc002ec94,edi
c0016d72:	80 3d 0d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e60d,0x0
c0016d79:	0f 84 07 01 00 00    	je     c0016e86 <timerHandler(unsigned long long)+0x12f>
c0016d7f:	e8 c5 70 00 00       	call   c001de49 <lockStuff()>
c0016d84:	83 ec 0c             	sub    esp,0xc
c0016d87:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016d8c:	e8 1d 1e 01 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d91:	c7 04 24 5c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b5c
c0016d98:	89 c3                	mov    ebx,eax
c0016d9a:	e8 17 1e 01 00       	call   c0028bb6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d9f:	83 c4 10             	add    esp,0x10
c0016da2:	84 c0                	test   al,al
c0016da4:	74 60                	je     c0016e06 <timerHandler(unsigned long long)+0xaf>
c0016da6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016dac:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016daf:	85 c0                	test   eax,eax
c0016db1:	0f 85 91 00 00 00    	jne    c0016e48 <timerHandler(unsigned long long)+0xf1>
c0016db7:	e9 be 00 00 00       	jmp    c0016e7a <timerHandler(unsigned long long)+0x123>
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	55                   	push   ebp
c0016dc0:	e8 af 76 00 00       	call   c001e474 <unblockTask(ThreadControlBlock*)>
c0016dc5:	83 c4 10             	add    esp,0x10
c0016dc8:	39 eb                	cmp    ebx,ebp
c0016dca:	75 12                	jne    c0016dde <timerHandler(unsigned long long)+0x87>
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016dd4:	e8 d5 1d 01 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd9:	89 c3                	mov    ebx,eax
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016de6:	e8 cb 1d 01 00       	call   c0028bb6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	84 c0                	test   al,al
c0016df0:	75 b4                	jne    c0016da6 <timerHandler(unsigned long long)+0x4f>
c0016df2:	83 ec 0c             	sub    esp,0xc
c0016df5:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016dfa:	e8 af 1d 01 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	39 d8                	cmp    eax,ebx
c0016e04:	74 a0                	je     c0016da6 <timerHandler(unsigned long long)+0x4f>
c0016e06:	83 ec 0c             	sub    esp,0xc
c0016e09:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016e0e:	e8 9b 1d 01 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e13:	c7 04 24 5c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b5c
c0016e1a:	89 c5                	mov    ebp,eax
c0016e1c:	e8 b1 1d 01 00       	call   c0028bd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e21:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e24:	83 c4 10             	add    esp,0x10
c0016e27:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e2a:	39 15 90 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec90,edx
c0016e30:	a1 94 ec 02 c0       	mov    eax,ds:0xc002ec94
c0016e35:	19 c8                	sbb    eax,ecx
c0016e37:	73 83                	jae    c0016dbc <timerHandler(unsigned long long)+0x65>
c0016e39:	50                   	push   eax
c0016e3a:	50                   	push   eax
c0016e3b:	55                   	push   ebp
c0016e3c:	68 5c 1b 03 c0       	push   0xc0031b5c
c0016e41:	e8 3a 1e 01 00       	call   c0028c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e46:	eb 93                	jmp    c0016ddb <timerHandler(unsigned long long)+0x84>
c0016e48:	80 3d 0c e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e60c,0x0
c0016e4f:	74 29                	je     c0016e7a <timerHandler(unsigned long long)+0x123>
c0016e51:	39 c6                	cmp    esi,eax
c0016e53:	bb 00 00 00 00       	mov    ebx,0x0
c0016e58:	19 df                	sbb    edi,ebx
c0016e5a:	72 19                	jb     c0016e75 <timerHandler(unsigned long long)+0x11e>
c0016e5c:	e8 c1 6f 00 00       	call   c001de22 <lockScheduler()>
c0016e61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e66:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e69:	e8 2a 73 00 00       	call   c001e198 <schedule()>
c0016e6e:	e8 b1 6f 00 00       	call   c001de24 <unlockScheduler()>
c0016e73:	eb 05                	jmp    c0016e7a <timerHandler(unsigned long long)+0x123>
c0016e75:	29 f0                	sub    eax,esi
c0016e77:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e7a:	83 c4 0c             	add    esp,0xc
c0016e7d:	5b                   	pop    ebx
c0016e7e:	5e                   	pop    esi
c0016e7f:	5f                   	pop    edi
c0016e80:	5d                   	pop    ebp
c0016e81:	e9 97 73 00 00       	jmp    c001e21d <unlockStuff()>
c0016e86:	83 c4 0c             	add    esp,0xc
c0016e89:	5b                   	pop    ebx
c0016e8a:	5e                   	pop    esi
c0016e8b:	5f                   	pop    edi
c0016e8c:	5d                   	pop    ebp
c0016e8d:	c3                   	ret    

c0016e8e <setupTimer(int)>:
c0016e8e:	57                   	push   edi
c0016e8f:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0016e94:	56                   	push   esi
c0016e95:	53                   	push   ebx
c0016e96:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ea0:	83 ec 0c             	sub    esp,0xc
c0016ea3:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ea9:	e8 74 d7 ff ff       	call   c0014622 <Device::getName()>
c0016eae:	83 c4 10             	add    esp,0x10
c0016eb1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016eb4:	0f 85 8d 00 00 00    	jne    c0016f47 <setupTimer(int)+0xb9>
c0016eba:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0016ebf:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ec6:	74 7f                	je     c0016f47 <setupTimer(int)+0xb9>
c0016ec8:	83 ec 0c             	sub    esp,0xc
c0016ecb:	68 5c 01 00 00       	push   0x15c
c0016ed0:	e8 76 89 ff ff       	call   c000f84b <malloc>
c0016ed5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ed8:	89 c3                	mov    ebx,eax
c0016eda:	e8 27 f8 00 00       	call   c0026706 <PIT::PIT()>
c0016edf:	59                   	pop    ecx
c0016ee0:	5f                   	pop    edi
c0016ee1:	53                   	push   ebx
c0016ee2:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0016ee8:	e8 49 d4 ff ff       	call   c0014336 <Device::addChild(Device*)>
c0016eed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016eef:	6a 00                	push   0x0
c0016ef1:	6a 00                	push   0x0
c0016ef3:	56                   	push   esi
c0016ef4:	53                   	push   ebx
c0016ef5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ef8:	83 c4 14             	add    esp,0x14
c0016efb:	68 60 01 00 00       	push   0x160
c0016f00:	e8 46 89 ff ff       	call   c000f84b <malloc>
c0016f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f08:	89 c7                	mov    edi,eax
c0016f0a:	e8 a7 f6 00 00       	call   c00265b6 <APICTimer::APICTimer()>
c0016f0f:	6a 00                	push   0x0
c0016f11:	6a 00                	push   0x0
c0016f13:	56                   	push   esi
c0016f14:	57                   	push   edi
c0016f15:	e8 9e f5 00 00       	call   c00264b8 <APICTimer::open(int, int, void*)>
c0016f1a:	83 c4 20             	add    esp,0x20
c0016f1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f1f:	6a 00                	push   0x0
c0016f21:	6a 00                	push   0x0
c0016f23:	6a 00                	push   0x0
c0016f25:	53                   	push   ebx
c0016f26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f29:	58                   	pop    eax
c0016f2a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0016f2f:	5a                   	pop    edx
c0016f30:	57                   	push   edi
c0016f31:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f37:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f3d:	e8 f4 d3 ff ff       	call   c0014336 <Device::addChild(Device*)>
c0016f42:	83 c4 10             	add    esp,0x10
c0016f45:	eb 33                	jmp    c0016f7a <setupTimer(int)+0xec>
c0016f47:	83 ec 0c             	sub    esp,0xc
c0016f4a:	68 5c 01 00 00       	push   0x15c
c0016f4f:	e8 f7 88 ff ff       	call   c000f84b <malloc>
c0016f54:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f57:	89 c3                	mov    ebx,eax
c0016f59:	e8 a8 f7 00 00       	call   c0026706 <PIT::PIT()>
c0016f5e:	58                   	pop    eax
c0016f5f:	5a                   	pop    edx
c0016f60:	53                   	push   ebx
c0016f61:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0016f67:	e8 ca d3 ff ff       	call   c0014336 <Device::addChild(Device*)>
c0016f6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f6e:	6a 00                	push   0x0
c0016f70:	6a 00                	push   0x0
c0016f72:	56                   	push   esi
c0016f73:	53                   	push   ebx
c0016f74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f77:	83 c4 20             	add    esp,0x20
c0016f7a:	89 d8                	mov    eax,ebx
c0016f7c:	5b                   	pop    ebx
c0016f7d:	5e                   	pop    esi
c0016f7e:	5f                   	pop    edi
c0016f7f:	c3                   	ret    

c0016f80 <VCache::VCache(PhysicalDisk*)>:
c0016f80:	53                   	push   ebx
c0016f81:	83 ec 18             	sub    esp,0x18
c0016f84:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c0016f89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8d:	89 10                	mov    DWORD PTR [eax],edx
c0016f8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f93:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016fb0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016fc2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fe7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017002:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017011:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017019:	83 ec 0c             	sub    esp,0xc
c001701c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017020:	e8 26 88 ff ff       	call   c000f84b <malloc>
c0017025:	83 c4 10             	add    esp,0x10
c0017028:	89 c3                	mov    ebx,eax
c001702a:	83 ec 0c             	sub    esp,0xc
c001702d:	53                   	push   ebx
c001702e:	e8 0f 6f 00 00       	call   c001df42 <Mutex::Mutex()>
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001703d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017041:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017045:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017053:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017057:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001705d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017061:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017064:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017068:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001706e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017074:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017078:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001707b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017082:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017086:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001708a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017090:	05 00 01 00 00       	add    eax,0x100
c0017095:	c1 e0 04             	shl    eax,0x4
c0017098:	83 ec 0c             	sub    esp,0xc
c001709b:	50                   	push   eax
c001709c:	e8 aa 87 ff ff       	call   c000f84b <malloc>
c00170a1:	83 c4 10             	add    esp,0x10
c00170a4:	89 c2                	mov    edx,eax
c00170a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ca:	c1 e0 07             	shl    eax,0x7
c00170cd:	83 ec 0c             	sub    esp,0xc
c00170d0:	50                   	push   eax
c00170d1:	e8 75 87 ff ff       	call   c000f84b <malloc>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	89 c2                	mov    edx,eax
c00170db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170df:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170e2:	90                   	nop
c00170e3:	83 c4 18             	add    esp,0x18
c00170e6:	5b                   	pop    ebx
c00170e7:	c3                   	ret    

c00170e8 <VCache::invalidateReadBuffer()>:
c00170e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170ec:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170f2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170f6:	c3                   	ret    
c00170f7:	90                   	nop

c00170f8 <VCache::writeWriteBuffer()>:
c00170f8:	53                   	push   ebx
c00170f9:	83 ec 14             	sub    esp,0x14
c00170fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017100:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017103:	8b 10                	mov    edx,DWORD PTR [eax]
c0017105:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017108:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001710b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001710e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017111:	50                   	push   eax
c0017112:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017115:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001711c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017123:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017127:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001712e:	83 c4 28             	add    esp,0x28
c0017131:	5b                   	pop    ebx
c0017132:	c3                   	ret    
c0017133:	90                   	nop

c0017134 <VCache::~VCache()>:
c0017134:	83 ec 0c             	sub    esp,0xc
c0017137:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c001713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017140:	89 10                	mov    DWORD PTR [eax],edx
c0017142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017146:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017149:	84 c0                	test   al,al
c001714b:	74 0f                	je     c001715c <VCache::~VCache()+0x28>
c001714d:	83 ec 0c             	sub    esp,0xc
c0017150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017154:	e8 9f ff ff ff       	call   c00170f8 <VCache::writeWriteBuffer()>
c0017159:	83 c4 10             	add    esp,0x10
c001715c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017160:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017163:	83 ec 0c             	sub    esp,0xc
c0017166:	50                   	push   eax
c0017167:	e8 ef 86 ff ff       	call   c000f85b <free>
c001716c:	83 c4 10             	add    esp,0x10
c001716f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017173:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017176:	83 ec 0c             	sub    esp,0xc
c0017179:	50                   	push   eax
c001717a:	e8 dc 86 ff ff       	call   c000f85b <free>
c001717f:	83 c4 10             	add    esp,0x10
c0017182:	90                   	nop
c0017183:	83 c4 0c             	add    esp,0xc
c0017186:	c3                   	ret    
c0017187:	90                   	nop

c0017188 <VCache::~VCache()>:
c0017188:	83 ec 0c             	sub    esp,0xc
c001718b:	83 ec 0c             	sub    esp,0xc
c001718e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017192:	e8 9d ff ff ff       	call   c0017134 <VCache::~VCache()>
c0017197:	83 c4 10             	add    esp,0x10
c001719a:	83 ec 08             	sub    esp,0x8
c001719d:	6a 44                	push   0x44
c001719f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171a3:	e8 81 bc ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00171a8:	83 c4 10             	add    esp,0x10
c00171ab:	83 c4 0c             	add    esp,0xc
c00171ae:	c3                   	ret    
c00171af:	90                   	nop

c00171b0 <VCache::write(unsigned long long, int, void*)>:
c00171b0:	55                   	push   ebp
c00171b1:	57                   	push   edi
c00171b2:	56                   	push   esi
c00171b3:	53                   	push   ebx
c00171b4:	83 ec 28             	sub    esp,0x28
c00171b7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171bb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171bf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171c3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00171c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171ca:	e8 0f 72 00 00       	call   c001e3de <Semaphore::acquire()>
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171d6:	74 0c                	je     c00171e4 <VCache::write(unsigned long long, int, void*)+0x34>
c00171d8:	83 ec 0c             	sub    esp,0xc
c00171db:	53                   	push   ebx
c00171dc:	e8 07 ff ff ff       	call   c00170e8 <VCache::invalidateReadBuffer()>
c00171e1:	83 c4 10             	add    esp,0x10
c00171e4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171e8:	74 66                	je     c0017250 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171ea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171ed:	99                   	cdq    
c00171ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171f2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171f5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171f8:	89 c1                	mov    ecx,eax
c00171fa:	89 d0                	mov    eax,edx
c00171fc:	31 f1                	xor    ecx,esi
c00171fe:	31 f8                	xor    eax,edi
c0017200:	89 ca                	mov    edx,ecx
c0017202:	09 c2                	or     edx,eax
c0017204:	75 3e                	jne    c0017244 <VCache::write(unsigned long long, int, void*)+0x94>
c0017206:	83 fd 01             	cmp    ebp,0x1
c0017209:	75 39                	jne    c0017244 <VCache::write(unsigned long long, int, void*)+0x94>
c001720b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001720e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017214:	51                   	push   ecx
c0017215:	50                   	push   eax
c0017216:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001721a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001721e:	0f af c8             	imul   ecx,eax
c0017221:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017224:	51                   	push   ecx
c0017225:	e8 22 95 fe ff       	call   c000074c <memcpy>
c001722a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001722d:	83 c4 10             	add    esp,0x10
c0017230:	40                   	inc    eax
c0017231:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017234:	83 c0 80             	add    eax,0xffffff80
c0017237:	75 57                	jne    c0017290 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017239:	83 ec 0c             	sub    esp,0xc
c001723c:	53                   	push   ebx
c001723d:	e8 b6 fe ff ff       	call   c00170f8 <VCache::writeWriteBuffer()>
c0017242:	eb 34                	jmp    c0017278 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017244:	83 ec 0c             	sub    esp,0xc
c0017247:	53                   	push   ebx
c0017248:	e8 ab fe ff ff       	call   c00170f8 <VCache::writeWriteBuffer()>
c001724d:	83 c4 10             	add    esp,0x10
c0017250:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017253:	83 fd 7f             	cmp    ebp,0x7f
c0017256:	7f 25                	jg     c001727d <VCache::write(unsigned long long, int, void*)+0xcd>
c0017258:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001725b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001725e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017261:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017265:	52                   	push   edx
c0017266:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001726c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017270:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017273:	e8 d4 94 fe ff       	call   c000074c <memcpy>
c0017278:	83 c4 10             	add    esp,0x10
c001727b:	eb 13                	jmp    c0017290 <VCache::write(unsigned long long, int, void*)+0xe0>
c001727d:	83 ec 0c             	sub    esp,0xc
c0017280:	8b 10                	mov    edx,DWORD PTR [eax]
c0017282:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017286:	55                   	push   ebp
c0017287:	57                   	push   edi
c0017288:	56                   	push   esi
c0017289:	50                   	push   eax
c001728a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001728d:	83 c4 20             	add    esp,0x20
c0017290:	83 ec 0c             	sub    esp,0xc
c0017293:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017296:	e8 f1 76 00 00       	call   c001e98c <Semaphore::release()>
c001729b:	83 c4 2c             	add    esp,0x2c
c001729e:	31 c0                	xor    eax,eax
c00172a0:	5b                   	pop    ebx
c00172a1:	5e                   	pop    esi
c00172a2:	5f                   	pop    edi
c00172a3:	5d                   	pop    ebp
c00172a4:	c3                   	ret    
c00172a5:	90                   	nop

c00172a6 <VCache::read(unsigned long long, int, void*)>:
c00172a6:	55                   	push   ebp
c00172a7:	57                   	push   edi
c00172a8:	56                   	push   esi
c00172a9:	53                   	push   ebx
c00172aa:	83 ec 28             	sub    esp,0x28
c00172ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172b5:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00172b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172bd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00172c1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172c5:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00172c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172cc:	e8 0d 71 00 00       	call   c001e3de <Semaphore::acquire()>
c00172d1:	83 c4 10             	add    esp,0x10
c00172d4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172d8:	74 0c                	je     c00172e6 <VCache::read(unsigned long long, int, void*)+0x40>
c00172da:	83 ec 0c             	sub    esp,0xc
c00172dd:	53                   	push   ebx
c00172de:	e8 15 fe ff ff       	call   c00170f8 <VCache::writeWriteBuffer()>
c00172e3:	83 c4 10             	add    esp,0x10
c00172e6:	83 fe 01             	cmp    esi,0x1
c00172e9:	0f 85 80 00 00 00    	jne    c001736f <VCache::read(unsigned long long, int, void*)+0xc9>
c00172ef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172f2:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172f9:	75 74                	jne    c001736f <VCache::read(unsigned long long, int, void*)+0xc9>
c00172fb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172fe:	89 d1                	mov    ecx,edx
c0017300:	f7 d9                	neg    ecx
c0017302:	89 cf                	mov    edi,ecx
c0017304:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017308:	c1 ff 1f             	sar    edi,0x1f
c001730b:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001730e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017312:	89 ce                	mov    esi,ecx
c0017314:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017318:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001731c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017320:	89 cf                	mov    edi,ecx
c0017322:	74 0a                	je     c001732e <VCache::read(unsigned long long, int, void*)+0x88>
c0017324:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017327:	75 05                	jne    c001732e <VCache::read(unsigned long long, int, void*)+0x88>
c0017329:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001732c:	74 1c                	je     c001734a <VCache::read(unsigned long long, int, void*)+0xa4>
c001732e:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017332:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017335:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017338:	83 ec 0c             	sub    esp,0xc
c001733b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001733d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017340:	52                   	push   edx
c0017341:	57                   	push   edi
c0017342:	56                   	push   esi
c0017343:	50                   	push   eax
c0017344:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017347:	83 c4 20             	add    esp,0x20
c001734a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001734d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017353:	50                   	push   eax
c0017354:	52                   	push   edx
c0017355:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017358:	48                   	dec    eax
c0017359:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c001735d:	0f af c2             	imul   eax,edx
c0017360:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017363:	50                   	push   eax
c0017364:	55                   	push   ebp
c0017365:	e8 e2 93 fe ff       	call   c000074c <memcpy>
c001736a:	83 c4 10             	add    esp,0x10
c001736d:	eb 21                	jmp    c0017390 <VCache::read(unsigned long long, int, void*)+0xea>
c001736f:	83 ec 0c             	sub    esp,0xc
c0017372:	53                   	push   ebx
c0017373:	e8 70 fd ff ff       	call   c00170e8 <VCache::invalidateReadBuffer()>
c0017378:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001737b:	8b 10                	mov    edx,DWORD PTR [eax]
c001737d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017380:	56                   	push   esi
c0017381:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017385:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017389:	50                   	push   eax
c001738a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001738d:	83 c4 20             	add    esp,0x20
c0017390:	83 ec 0c             	sub    esp,0xc
c0017393:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017396:	e8 f1 75 00 00       	call   c001e98c <Semaphore::release()>
c001739b:	83 c4 2c             	add    esp,0x2c
c001739e:	31 c0                	xor    eax,eax
c00173a0:	5b                   	pop    ebx
c00173a1:	5e                   	pop    esi
c00173a2:	5f                   	pop    edi
c00173a3:	5d                   	pop    ebp
c00173a4:	c3                   	ret    
c00173a5:	90                   	nop

c00173a6 <Video::putrect(int, int, int, int, unsigned int)>:
c00173a6:	55                   	push   ebp
c00173a7:	57                   	push   edi
c00173a8:	56                   	push   esi
c00173a9:	53                   	push   ebx
c00173aa:	83 ec 1c             	sub    esp,0x1c
c00173ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173b5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173b9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173c5:	01 df                	add    edi,ebx
c00173c7:	39 fb                	cmp    ebx,edi
c00173c9:	7d 1f                	jge    c00173ea <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00173cb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173cf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173d3:	7d 12                	jge    c00173e7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173d5:	8b 16                	mov    edx,DWORD PTR [esi]
c00173d7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173db:	53                   	push   ebx
c00173dc:	55                   	push   ebp
c00173dd:	45                   	inc    ebp
c00173de:	56                   	push   esi
c00173df:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173e2:	83 c4 10             	add    esp,0x10
c00173e5:	eb e8                	jmp    c00173cf <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173e7:	43                   	inc    ebx
c00173e8:	eb dd                	jmp    c00173c7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173ea:	83 c4 1c             	add    esp,0x1c
c00173ed:	5b                   	pop    ebx
c00173ee:	5e                   	pop    esi
c00173ef:	5f                   	pop    edi
c00173f0:	5d                   	pop    ebp
c00173f1:	c3                   	ret    

c00173f2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173f2:	55                   	push   ebp
c00173f3:	57                   	push   edi
c00173f4:	31 ff                	xor    edi,edi
c00173f6:	56                   	push   esi
c00173f7:	53                   	push   ebx
c00173f8:	83 ec 1c             	sub    esp,0x1c
c00173fb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173ff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017403:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001740a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001740f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017413:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017417:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001741b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001741e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017422:	01 f9                	add    ecx,edi
c0017424:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017428:	7d 2f                	jge    c0017459 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001742a:	31 f6                	xor    esi,esi
c001742c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017430:	01 f2                	add    edx,esi
c0017432:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017436:	7d 1a                	jge    c0017452 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017438:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001743b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001743e:	46                   	inc    esi
c001743f:	51                   	push   ecx
c0017440:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017444:	52                   	push   edx
c0017445:	55                   	push   ebp
c0017446:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017449:	83 c4 10             	add    esp,0x10
c001744c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017450:	eb da                	jmp    c001742c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017452:	47                   	inc    edi
c0017453:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017457:	eb c5                	jmp    c001741e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017459:	83 c4 1c             	add    esp,0x1c
c001745c:	5b                   	pop    ebx
c001745d:	5e                   	pop    esi
c001745e:	5f                   	pop    edi
c001745f:	5d                   	pop    ebp
c0017460:	c3                   	ret    
c0017461:	90                   	nop

c0017462 <Video::blit(unsigned int*, int, int, int, int)>:
c0017462:	55                   	push   ebp
c0017463:	57                   	push   edi
c0017464:	56                   	push   esi
c0017465:	53                   	push   ebx
c0017466:	83 ec 1c             	sub    esp,0x1c
c0017469:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001746d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017471:	85 c0                	test   eax,eax
c0017473:	79 02                	jns    c0017477 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017475:	31 c0                	xor    eax,eax
c0017477:	c1 e0 02             	shl    eax,0x2
c001747a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001747e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017482:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017486:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001748a:	39 d8                	cmp    eax,ebx
c001748c:	7e 49                	jle    c00174d7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001748e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017494:	7c 41                	jl     c00174d7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017496:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001749a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001749e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174a2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174a6:	39 f9                	cmp    ecx,edi
c00174a8:	7e 22                	jle    c00174cc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174aa:	83 c5 04             	add    ebp,0x4
c00174ad:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174b3:	7c 14                	jl     c00174c9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174b5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174b7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174c2:	56                   	push   esi
c00174c3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00174c6:	83 c4 10             	add    esp,0x10
c00174c9:	47                   	inc    edi
c00174ca:	eb d2                	jmp    c001749e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174d0:	43                   	inc    ebx
c00174d1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174d5:	eb ab                	jmp    c0017482 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174d7:	83 c4 1c             	add    esp,0x1c
c00174da:	5b                   	pop    ebx
c00174db:	5e                   	pop    esi
c00174dc:	5f                   	pop    edi
c00174dd:	5d                   	pop    ebp
c00174de:	c3                   	ret    
c00174df:	90                   	nop

c00174e0 <Video::clearScreen(unsigned int)>:
c00174e0:	57                   	push   edi
c00174e1:	56                   	push   esi
c00174e2:	53                   	push   ebx
c00174e3:	31 db                	xor    ebx,ebx
c00174e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174e9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174ef:	7e 1f                	jle    c0017510 <Video::clearScreen(unsigned int)+0x30>
c00174f1:	31 ff                	xor    edi,edi
c00174f3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174f9:	7e 12                	jle    c001750d <Video::clearScreen(unsigned int)+0x2d>
c00174fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00174fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017501:	53                   	push   ebx
c0017502:	57                   	push   edi
c0017503:	47                   	inc    edi
c0017504:	56                   	push   esi
c0017505:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017508:	83 c4 10             	add    esp,0x10
c001750b:	eb e6                	jmp    c00174f3 <Video::clearScreen(unsigned int)+0x13>
c001750d:	43                   	inc    ebx
c001750e:	eb d9                	jmp    c00174e9 <Video::clearScreen(unsigned int)+0x9>
c0017510:	5b                   	pop    ebx
c0017511:	5e                   	pop    esi
c0017512:	5f                   	pop    edi
c0017513:	c3                   	ret    

c0017514 <Video::putpixel(int, int, unsigned int)>:
c0017514:	c7 44 24 04 e0 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b4e0
c001751c:	e9 26 31 00 00       	jmp    c001a647 <Krnl::panic(char const*)>
c0017521:	90                   	nop

c0017522 <Video::Video(char const*)>:
c0017522:	83 ec 0c             	sub    esp,0xc
c0017525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017529:	83 ec 08             	sub    esp,0x8
c001752c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017530:	50                   	push   eax
c0017531:	e8 f0 cf ff ff       	call   c0014526 <Device::Device(char const*)>
c0017536:	83 c4 10             	add    esp,0x10
c0017539:	ba 64 b5 02 c0       	mov    edx,0xc002b564
c001753e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017542:	89 10                	mov    DWORD PTR [eax],edx
c0017544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017548:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017552:	90                   	nop
c0017553:	83 c4 0c             	add    esp,0xc
c0017556:	c3                   	ret    
c0017557:	90                   	nop

c0017558 <Video::~Video()>:
c0017558:	83 ec 0c             	sub    esp,0xc
c001755b:	ba 64 b5 02 c0       	mov    edx,0xc002b564
c0017560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017564:	89 10                	mov    DWORD PTR [eax],edx
c0017566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001756a:	83 ec 0c             	sub    esp,0xc
c001756d:	50                   	push   eax
c001756e:	e8 95 cc ff ff       	call   c0014208 <Device::~Device()>
c0017573:	83 c4 10             	add    esp,0x10
c0017576:	90                   	nop
c0017577:	83 c4 0c             	add    esp,0xc
c001757a:	c3                   	ret    
c001757b:	90                   	nop

c001757c <Video::~Video()>:
c001757c:	83 ec 0c             	sub    esp,0xc
c001757f:	83 ec 0c             	sub    esp,0xc
c0017582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017586:	e8 cd ff ff ff       	call   c0017558 <Video::~Video()>
c001758b:	83 c4 10             	add    esp,0x10
c001758e:	83 ec 08             	sub    esp,0x8
c0017591:	68 64 01 00 00       	push   0x164
c0017596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001759a:	e8 8a b8 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c001759f:	83 c4 10             	add    esp,0x10
c00175a2:	83 c4 0c             	add    esp,0xc
c00175a5:	c3                   	ret    

c00175a6 <Video::isMonochrome()>:
c00175a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175aa:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175b0:	c3                   	ret    
c00175b1:	90                   	nop

c00175b2 <Video::getWidth()>:
c00175b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175bc:	c3                   	ret    
c00175bd:	90                   	nop

c00175be <Video::getHeight()>:
c00175be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00175c8:	c3                   	ret    
c00175c9:	90                   	nop

c00175ca <Video::drawCursor(int, int, unsigned char*, int)>:
c00175ca:	55                   	push   ebp
c00175cb:	57                   	push   edi
c00175cc:	56                   	push   esi
c00175cd:	53                   	push   ebx
c00175ce:	83 ec 2c             	sub    esp,0x2c
c00175d1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175d5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175d9:	83 f8 01             	cmp    eax,0x1
c00175dc:	19 c9                	sbb    ecx,ecx
c00175de:	31 db                	xor    ebx,ebx
c00175e0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175e4:	89 cd                	mov    ebp,ecx
c00175e6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175ee:	f7 d5                	not    ebp
c00175f0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175f6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175fa:	01 d8                	add    eax,ebx
c00175fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017600:	56                   	push   esi
c0017601:	e8 b8 ff ff ff       	call   c00175be <Video::getHeight()>
c0017606:	59                   	pop    ecx
c0017607:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001760b:	7e 70                	jle    c001767d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001760d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017611:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017615:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017618:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001761c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017620:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017627:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001762b:	89 f8                	mov    eax,edi
c001762d:	83 c0 20             	add    eax,0x20
c0017630:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017634:	56                   	push   esi
c0017635:	e8 78 ff ff ff       	call   c00175b2 <Video::getWidth()>
c001763a:	5a                   	pop    edx
c001763b:	39 c7                	cmp    edi,eax
c001763d:	7d 34                	jge    c0017673 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001763f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017644:	74 05                	je     c001764b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017646:	8b 06                	mov    eax,DWORD PTR [esi]
c0017648:	55                   	push   ebp
c0017649:	eb 0d                	jmp    c0017658 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001764b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017650:	74 12                	je     c0017664 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017652:	8b 06                	mov    eax,DWORD PTR [esi]
c0017654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017658:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001765c:	57                   	push   edi
c001765d:	56                   	push   esi
c001765e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017668:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001766c:	47                   	inc    edi
c001766d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017671:	75 c1                	jne    c0017634 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017673:	43                   	inc    ebx
c0017674:	83 fb 20             	cmp    ebx,0x20
c0017677:	0f 85 79 ff ff ff    	jne    c00175f6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001767d:	83 c4 2c             	add    esp,0x2c
c0017680:	5b                   	pop    ebx
c0017681:	5e                   	pop    esi
c0017682:	5f                   	pop    edi
c0017683:	5d                   	pop    ebp
c0017684:	c3                   	ret    
c0017685:	90                   	nop

c0017686 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017686:	55                   	push   ebp
c0017687:	57                   	push   edi
c0017688:	56                   	push   esi
c0017689:	53                   	push   ebx
c001768a:	83 ec 28             	sub    esp,0x28
c001768d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017691:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017695:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017699:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001769d:	c1 e7 08             	shl    edi,0x8
c00176a0:	01 c7                	add    edi,eax
c00176a2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176a6:	c1 e0 08             	shl    eax,0x8
c00176a9:	01 d0                	add    eax,edx
c00176ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176b3:	0f af c7             	imul   eax,edi
c00176b6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176bd:	50                   	push   eax
c00176be:	e8 88 81 ff ff       	call   c000f84b <malloc>
c00176c3:	83 c4 10             	add    esp,0x10
c00176c6:	89 c5                	mov    ebp,eax
c00176c8:	85 c0                	test   eax,eax
c00176ca:	75 15                	jne    c00176e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176cc:	83 ec 0c             	sub    esp,0xc
c00176cf:	68 01 b5 02 c0       	push   0xc002b501
c00176d4:	e8 30 b8 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00176d9:	83 c4 10             	add    esp,0x10
c00176dc:	e9 1c 01 00 00       	jmp    c00177fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176e1:	be 12 00 00 00       	mov    esi,0x12
c00176e6:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176ea:	74 11                	je     c00176fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176ec:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176f0:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176f4:	c1 fe 03             	sar    esi,0x3
c00176f7:	0f af f0             	imul   esi,eax
c00176fa:	83 c6 12             	add    esi,0x12
c00176fd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017701:	74 04                	je     c0017707 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017703:	85 ff                	test   edi,edi
c0017705:	75 12                	jne    c0017719 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017707:	83 ec 0c             	sub    esp,0xc
c001770a:	68 18 b5 02 c0       	push   0xc002b518
c001770f:	e8 f5 b7 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0017714:	e9 ce 00 00 00       	jmp    c00177e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017719:	52                   	push   edx
c001771a:	52                   	push   edx
c001771b:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001771f:	50                   	push   eax
c0017720:	68 2d b5 02 c0       	push   0xc002b52d
c0017725:	e8 df b7 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001772a:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001772e:	83 c4 10             	add    esp,0x10
c0017731:	80 fa 02             	cmp    dl,0x2
c0017734:	0f 85 98 00 00 00    	jne    c00177d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001773a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001773f:	75 10                	jne    c0017751 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017741:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017745:	75 0a                	jne    c0017751 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017747:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001774a:	83 e8 18             	sub    eax,0x18
c001774d:	a8 f7                	test   al,0xf7
c001774f:	74 0a                	je     c001775b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017751:	83 ec 0c             	sub    esp,0xc
c0017754:	68 3a b5 02 c0       	push   0xc002b53a
c0017759:	eb 7f                	jmp    c00177da <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001775b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017763:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001776b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001776f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017777:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001777b:	75 0c                	jne    c0017789 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001777d:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017782:	c1 e0 18             	shl    eax,0x18
c0017785:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017789:	41                   	inc    ecx
c001778a:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001778f:	c1 e2 10             	shl    edx,0x10
c0017792:	89 d0                	mov    eax,edx
c0017794:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017799:	c1 e2 08             	shl    edx,0x8
c001779c:	09 c2                	or     edx,eax
c001779e:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177a2:	09 c2                	or     edx,eax
c00177a4:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177a8:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177ac:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177b0:	c1 f8 03             	sar    eax,0x3
c00177b3:	01 c6                	add    esi,eax
c00177b5:	89 c8                	mov    eax,ecx
c00177b7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177bb:	39 c7                	cmp    edi,eax
c00177bd:	7f b0                	jg     c001776f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177bf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177c7:	39 14 24             	cmp    DWORD PTR [esp],edx
c00177ca:	7e 22                	jle    c00177ee <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177cc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177d0:	eb 99                	jmp    c001776b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177d2:	50                   	push   eax
c00177d3:	50                   	push   eax
c00177d4:	52                   	push   edx
c00177d5:	68 48 b5 02 c0       	push   0xc002b548
c00177da:	e8 2a b7 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00177df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177e2:	e8 74 80 ff ff       	call   c000f85b <free>
c00177e7:	83 c4 10             	add    esp,0x10
c00177ea:	31 ed                	xor    ebp,ebp
c00177ec:	eb 0f                	jmp    c00177fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177f2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177f5:	89 38                	mov    DWORD PTR [eax],edi
c00177f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177fb:	89 08                	mov    DWORD PTR [eax],ecx
c00177fd:	83 c4 1c             	add    esp,0x1c
c0017800:	89 e8                	mov    eax,ebp
c0017802:	5b                   	pop    ebx
c0017803:	5e                   	pop    esi
c0017804:	5f                   	pop    edi
c0017805:	5d                   	pop    ebp
c0017806:	c3                   	ret    
c0017807:	90                   	nop

c0017808 <Video::putTGA(int, int, unsigned char*, int)>:
c0017808:	55                   	push   ebp
c0017809:	57                   	push   edi
c001780a:	56                   	push   esi
c001780b:	53                   	push   ebx
c001780c:	83 ec 28             	sub    esp,0x28
c001780f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017813:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017817:	50                   	push   eax
c0017818:	8d 44 24 18          	lea    eax,[esp+0x18]
c001781c:	50                   	push   eax
c001781d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017821:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017825:	56                   	push   esi
c0017826:	e8 5b fe ff ff       	call   c0017686 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001782b:	83 c4 20             	add    esp,0x20
c001782e:	85 c0                	test   eax,eax
c0017830:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017834:	74 35                	je     c001786b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017836:	89 c7                	mov    edi,eax
c0017838:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001783c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017840:	39 d8                	cmp    eax,ebx
c0017842:	7e 27                	jle    c001786b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017844:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017848:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001784c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017850:	39 e8                	cmp    eax,ebp
c0017852:	7e 14                	jle    c0017868 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017854:	8b 06                	mov    eax,DWORD PTR [esi]
c0017856:	83 c7 04             	add    edi,0x4
c0017859:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001785c:	53                   	push   ebx
c001785d:	55                   	push   ebp
c001785e:	45                   	inc    ebp
c001785f:	56                   	push   esi
c0017860:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	eb e0                	jmp    c0017848 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017868:	43                   	inc    ebx
c0017869:	eb cd                	jmp    c0017838 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001786b:	83 c4 1c             	add    esp,0x1c
c001786e:	5b                   	pop    ebx
c001786f:	5e                   	pop    esi
c0017870:	5f                   	pop    edi
c0017871:	5d                   	pop    ebp
c0017872:	c3                   	ret    
c0017873:	90                   	nop

c0017874 <ACPI::close(int, int, void*)>:
c0017874:	83 ec 1c             	sub    esp,0x1c
c0017877:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001787f:	74 0a                	je     c001788b <ACPI::close(int, int, void*)+0x17>
c0017881:	b8 00 00 00 00       	mov    eax,0x0
c0017886:	e9 9a 00 00 00       	jmp    c0017925 <ACPI::close(int, int, void*)+0xb1>
c001788b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017890:	75 37                	jne    c00178c9 <ACPI::close(int, int, void*)+0x55>
c0017892:	83 ec 0c             	sub    esp,0xc
c0017895:	68 a4 b5 02 c0       	push   0xc002b5a4
c001789a:	e8 6a b6 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001789f:	83 c4 10             	add    esp,0x10
c00178a2:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c00178a7:	85 c0                	test   eax,eax
c00178a9:	74 07                	je     c00178b2 <ACPI::close(int, int, void*)+0x3e>
c00178ab:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c00178b0:	ff d0                	call   eax
c00178b2:	83 ec 0c             	sub    esp,0xc
c00178b5:	68 d4 b6 02 c0       	push   0xc002b6d4
c00178ba:	e8 88 2d 00 00       	call   c001a647 <Krnl::panic(char const*)>
c00178bf:	83 c4 10             	add    esp,0x10
c00178c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178c7:	eb 5c                	jmp    c0017925 <ACPI::close(int, int, void*)+0xb1>
c00178c9:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178ce:	75 50                	jne    c0017920 <ACPI::close(int, int, void*)+0xac>
c00178d0:	a1 c4 0c 03 c0       	mov    eax,ds:0xc0030cc4
c00178d5:	85 c0                	test   eax,eax
c00178d7:	74 07                	je     c00178e0 <ACPI::close(int, int, void*)+0x6c>
c00178d9:	a1 c4 0c 03 c0       	mov    eax,ds:0xc0030cc4
c00178de:	ff d0                	call   eax
c00178e0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178e5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178ea:	83 e0 02             	and    eax,0x2
c00178ed:	74 1c                	je     c001790b <ACPI::close(int, int, void*)+0x97>
c00178ef:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178fa:	89 c2                	mov    edx,eax
c00178fc:	ec                   	in     al,dx
c00178fd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017901:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017905:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017909:	eb da                	jmp    c00178e5 <ACPI::close(int, int, void*)+0x71>
c001790b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017912:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017917:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001791b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001791f:	ee                   	out    dx,al
c0017920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017925:	83 c4 1c             	add    esp,0x1c
c0017928:	c3                   	ret    

c0017929 <findRSDP()>:
c0017929:	83 ec 1c             	sub    esp,0x1c
c001792c:	83 ec 0c             	sub    esp,0xc
c001792f:	68 b1 b5 02 c0       	push   0xc002b5b1
c0017934:	e8 d0 b5 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0017939:	83 c4 10             	add    esp,0x10
c001793c:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017941:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017947:	83 e0 04             	and    eax,0x4
c001794a:	84 c0                	test   al,al
c001794c:	75 07                	jne    c0017955 <findRSDP()+0x2c>
c001794e:	b8 00 00 00 00       	mov    eax,0x0
c0017953:	eb 6a                	jmp    c00179bf <findRSDP()+0x96>
c0017955:	a1 54 e6 02 c0       	mov    eax,ds:0xc002e654
c001795a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001795f:	7f 1b                	jg     c001797c <findRSDP()+0x53>
c0017961:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017966:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001796c:	83 e2 fb             	and    edx,0xfffffffb
c001796f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017975:	b8 00 00 00 00       	mov    eax,0x0
c001797a:	eb 43                	jmp    c00179bf <findRSDP()+0x96>
c001797c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017984:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001798c:	77 2c                	ja     c00179ba <findRSDP()+0x91>
c001798e:	83 ec 04             	sub    esp,0x4
c0017991:	6a 08                	push   0x8
c0017993:	68 bf b5 02 c0       	push   0xc002b5bf
c0017998:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001799c:	e8 a7 8c fe ff       	call   c0000648 <memcmp>
c00179a1:	83 c4 10             	add    esp,0x10
c00179a4:	85 c0                	test   eax,eax
c00179a6:	0f 94 c0             	sete   al
c00179a9:	84 c0                	test   al,al
c00179ab:	74 06                	je     c00179b3 <findRSDP()+0x8a>
c00179ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179b1:	eb 0c                	jmp    c00179bf <findRSDP()+0x96>
c00179b3:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179b8:	eb ca                	jmp    c0017984 <findRSDP()+0x5b>
c00179ba:	b8 00 00 00 00       	mov    eax,0x0
c00179bf:	83 c4 1c             	add    esp,0x1c
c00179c2:	c3                   	ret    

c00179c3 <loadACPITables(unsigned char*)>:
c00179c3:	56                   	push   esi
c00179c4:	53                   	push   ebx
c00179c5:	83 ec 44             	sub    esp,0x44
c00179c8:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00179cd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179d3:	83 e0 04             	and    eax,0x4
c00179d6:	84 c0                	test   al,al
c00179d8:	0f 84 05 02 00 00    	je     c0017be3 <loadACPITables(unsigned char*)+0x220>
c00179de:	a0 e0 0e 03 c0       	mov    al,ds:0xc0030ee0
c00179e3:	84 c0                	test   al,al
c00179e5:	74 75                	je     c0017a5c <loadACPITables(unsigned char*)+0x99>
c00179e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179f6:	83 e8 24             	sub    eax,0x24
c00179f9:	c1 e8 03             	shr    eax,0x3
c00179fc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a00:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a08:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a0c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a10:	0f 8d b2 00 00 00    	jge    c0017ac8 <loadACPITables(unsigned char*)+0x105>
c0017a16:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a1a:	83 c0 24             	add    eax,0x24
c0017a1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a2d:	c1 e0 03             	shl    eax,0x3
c0017a30:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a3d:	89 c1                	mov    ecx,eax
c0017a3f:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017a44:	8d 50 01             	lea    edx,[eax+0x1]
c0017a47:	89 15 cc 0c 03 c0    	mov    DWORD PTR ds:0xc0030ccc,edx
c0017a4d:	89 ca                	mov    edx,ecx
c0017a4f:	89 14 c5 e4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf31c],edx
c0017a56:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a5a:	eb ac                	jmp    c0017a08 <loadACPITables(unsigned char*)+0x45>
c0017a5c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a60:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a6b:	83 e8 24             	sub    eax,0x24
c0017a6e:	c1 e8 02             	shr    eax,0x2
c0017a71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a75:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a81:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a85:	7d 41                	jge    c0017ac8 <loadACPITables(unsigned char*)+0x105>
c0017a87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a8b:	83 c0 24             	add    eax,0x24
c0017a8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a9e:	c1 e0 02             	shl    eax,0x2
c0017aa1:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017aa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aa9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017aab:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017ab0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab3:	89 15 cc 0c 03 c0    	mov    DWORD PTR ds:0xc0030ccc,edx
c0017ab9:	89 ca                	mov    edx,ecx
c0017abb:	89 14 c5 e4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf31c],edx
c0017ac2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017ac6:	eb b5                	jmp    c0017a7d <loadACPITables(unsigned char*)+0xba>
c0017ac8:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017ad0:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017ad5:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017ad9:	0f 8d 05 01 00 00    	jge    c0017be4 <loadACPITables(unsigned char*)+0x221>
c0017adf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ae3:	8b 04 c5 e4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf31c]
c0017aea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017afa:	25 ff 0f 00 00       	and    eax,0xfff
c0017aff:	89 c6                	mov    esi,eax
c0017b01:	e8 e0 a2 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017b06:	89 c3                	mov    ebx,eax
c0017b08:	83 ec 0c             	sub    esp,0xc
c0017b0b:	6a 01                	push   0x1
c0017b0d:	e8 39 a0 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b19:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b1f:	83 ec 0c             	sub    esp,0xc
c0017b22:	6a 01                	push   0x1
c0017b24:	6a 01                	push   0x1
c0017b26:	50                   	push   eax
c0017b27:	52                   	push   edx
c0017b28:	53                   	push   ebx
c0017b29:	e8 28 ab ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b2e:	83 c4 20             	add    esp,0x20
c0017b31:	09 f0                	or     eax,esi
c0017b33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b3b:	c1 e0 03             	shl    eax,0x3
c0017b3e:	05 e0 0c 03 c0       	add    eax,0xc0030ce0
c0017b43:	83 ec 04             	sub    esp,0x4
c0017b46:	6a 04                	push   0x4
c0017b48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b4c:	50                   	push   eax
c0017b4d:	e8 fa 8b fe ff       	call   c000074c <memcpy>
c0017b52:	83 c4 10             	add    esp,0x10
c0017b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b64:	05 00 10 00 00       	add    eax,0x1000
c0017b69:	c1 e8 0c             	shr    eax,0xc
c0017b6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b74:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b7b:	25 ff 0f 00 00       	and    eax,0xfff
c0017b80:	89 c6                	mov    esi,eax
c0017b82:	e8 5f a2 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017b87:	89 c3                	mov    ebx,eax
c0017b89:	83 ec 0c             	sub    esp,0xc
c0017b8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b90:	e8 b6 9f ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017b95:	83 c4 10             	add    esp,0x10
c0017b98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b9c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ba2:	83 ec 0c             	sub    esp,0xc
c0017ba5:	6a 01                	push   0x1
c0017ba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bab:	50                   	push   eax
c0017bac:	52                   	push   edx
c0017bad:	53                   	push   ebx
c0017bae:	e8 a3 aa ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bb3:	83 c4 20             	add    esp,0x20
c0017bb6:	09 f0                	or     eax,esi
c0017bb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bbc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017bbf:	83 ec 0c             	sub    esp,0xc
c0017bc2:	50                   	push   eax
c0017bc3:	e8 33 a4 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c0017bc8:	83 c4 10             	add    esp,0x10
c0017bcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017bd3:	89 14 c5 e4 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf31c],edx
c0017bda:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017bde:	e9 ed fe ff ff       	jmp    c0017ad0 <loadACPITables(unsigned char*)+0x10d>
c0017be3:	90                   	nop
c0017be4:	83 c4 44             	add    esp,0x44
c0017be7:	5b                   	pop    ebx
c0017be8:	5e                   	pop    esi
c0017be9:	c3                   	ret    

c0017bea <findRSDT(unsigned char*)>:
c0017bea:	56                   	push   esi
c0017beb:	53                   	push   ebx
c0017bec:	83 ec 44             	sub    esp,0x44
c0017bef:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017bf4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bfa:	83 e0 04             	and    eax,0x4
c0017bfd:	84 c0                	test   al,al
c0017bff:	75 0a                	jne    c0017c0b <findRSDT(unsigned char*)+0x21>
c0017c01:	b8 00 00 00 00       	mov    eax,0x0
c0017c06:	e9 f7 00 00 00       	jmp    c0017d02 <findRSDT(unsigned char*)+0x118>
c0017c0b:	83 ec 04             	sub    esp,0x4
c0017c0e:	6a 24                	push   0x24
c0017c10:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c14:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c18:	50                   	push   eax
c0017c19:	e8 2e 8b fe ff       	call   c000074c <memcpy>
c0017c1e:	83 c4 10             	add    esp,0x10
c0017c21:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c25:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c29:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c39:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c49:	25 ff 0f 00 00       	and    eax,0xfff
c0017c4e:	89 c6                	mov    esi,eax
c0017c50:	e8 91 a1 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017c55:	89 c3                	mov    ebx,eax
c0017c57:	83 ec 0c             	sub    esp,0xc
c0017c5a:	6a 02                	push   0x2
c0017c5c:	e8 ea 9e ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017c61:	83 c4 10             	add    esp,0x10
c0017c64:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c68:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c6e:	83 ec 0c             	sub    esp,0xc
c0017c71:	6a 01                	push   0x1
c0017c73:	6a 02                	push   0x2
c0017c75:	50                   	push   eax
c0017c76:	52                   	push   edx
c0017c77:	53                   	push   ebx
c0017c78:	e8 d9 a9 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c7d:	83 c4 20             	add    esp,0x20
c0017c80:	09 f0                	or     eax,esi
c0017c82:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c8a:	25 ff 0f 00 00       	and    eax,0xfff
c0017c8f:	89 c6                	mov    esi,eax
c0017c91:	e8 50 a1 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017c96:	89 c3                	mov    ebx,eax
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	6a 02                	push   0x2
c0017c9d:	e8 a9 9e ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0017ca2:	83 c4 10             	add    esp,0x10
c0017ca5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ca9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017caf:	83 ec 0c             	sub    esp,0xc
c0017cb2:	6a 01                	push   0x1
c0017cb4:	6a 02                	push   0x2
c0017cb6:	50                   	push   eax
c0017cb7:	52                   	push   edx
c0017cb8:	53                   	push   ebx
c0017cb9:	e8 98 a9 ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cbe:	83 c4 20             	add    esp,0x20
c0017cc1:	09 f0                	or     eax,esi
c0017cc3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cc7:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017ccc:	75 11                	jne    c0017cdf <findRSDT(unsigned char*)+0xf5>
c0017cce:	c6 05 e0 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ee0,0x0
c0017cd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cd9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cdd:	eb 1f                	jmp    c0017cfe <findRSDT(unsigned char*)+0x114>
c0017cdf:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017ce4:	75 11                	jne    c0017cf7 <findRSDT(unsigned char*)+0x10d>
c0017ce6:	c6 05 e0 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ee0,0x1
c0017ced:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cf1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cf5:	eb 07                	jmp    c0017cfe <findRSDT(unsigned char*)+0x114>
c0017cf7:	b8 00 00 00 00       	mov    eax,0x0
c0017cfc:	eb 04                	jmp    c0017d02 <findRSDT(unsigned char*)+0x118>
c0017cfe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d02:	83 c4 44             	add    esp,0x44
c0017d05:	5b                   	pop    ebx
c0017d06:	5e                   	pop    esi
c0017d07:	c3                   	ret    

c0017d08 <findDataTable(unsigned char*, char*)>:
c0017d08:	83 ec 1c             	sub    esp,0x1c
c0017d0b:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017d10:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d16:	83 e0 04             	and    eax,0x4
c0017d19:	84 c0                	test   al,al
c0017d1b:	75 07                	jne    c0017d24 <findDataTable(unsigned char*, char*)+0x1c>
c0017d1d:	b8 00 00 00 00       	mov    eax,0x0
c0017d22:	eb 7c                	jmp    c0017da0 <findDataTable(unsigned char*, char*)+0x98>
c0017d24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d2c:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c0017d31:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d35:	7d 3a                	jge    c0017d71 <findDataTable(unsigned char*, char*)+0x69>
c0017d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d3b:	c1 e0 03             	shl    eax,0x3
c0017d3e:	05 e0 0c 03 c0       	add    eax,0xc0030ce0
c0017d43:	83 ec 04             	sub    esp,0x4
c0017d46:	6a 04                	push   0x4
c0017d48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d4c:	50                   	push   eax
c0017d4d:	e8 f6 88 fe ff       	call   c0000648 <memcmp>
c0017d52:	83 c4 10             	add    esp,0x10
c0017d55:	85 c0                	test   eax,eax
c0017d57:	0f 94 c0             	sete   al
c0017d5a:	84 c0                	test   al,al
c0017d5c:	74 0d                	je     c0017d6b <findDataTable(unsigned char*, char*)+0x63>
c0017d5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d62:	8b 04 c5 e4 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf31c]
c0017d69:	eb 35                	jmp    c0017da0 <findDataTable(unsigned char*, char*)+0x98>
c0017d6b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d6f:	eb bb                	jmp    c0017d2c <findDataTable(unsigned char*, char*)+0x24>
c0017d71:	a0 e0 0e 03 c0       	mov    al,ds:0xc0030ee0
c0017d76:	84 c0                	test   al,al
c0017d78:	74 07                	je     c0017d81 <findDataTable(unsigned char*, char*)+0x79>
c0017d7a:	b8 58 00 00 00       	mov    eax,0x58
c0017d7f:	eb 05                	jmp    c0017d86 <findDataTable(unsigned char*, char*)+0x7e>
c0017d81:	b8 52 00 00 00       	mov    eax,0x52
c0017d86:	83 ec 04             	sub    esp,0x4
c0017d89:	50                   	push   eax
c0017d8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d8e:	68 f8 b6 02 c0       	push   0xc002b6f8
c0017d93:	e8 71 b1 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0017d98:	83 c4 10             	add    esp,0x10
c0017d9b:	b8 00 00 00 00       	mov    eax,0x0
c0017da0:	83 c4 1c             	add    esp,0x1c
c0017da3:	c3                   	ret    

c0017da4 <scanMADT()>:
c0017da4:	53                   	push   ebx
c0017da5:	83 ec 38             	sub    esp,0x38
c0017da8:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017dad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017db3:	83 e0 04             	and    eax,0x4
c0017db6:	84 c0                	test   al,al
c0017db8:	0f 84 63 04 00 00    	je     c0018221 <scanMADT()+0x47d>
c0017dbe:	e8 66 fb ff ff       	call   c0017929 <findRSDP()>
c0017dc3:	a3 ec 0e 03 c0       	mov    ds:0xc0030eec,eax
c0017dc8:	a1 ec 0e 03 c0       	mov    eax,ds:0xc0030eec
c0017dcd:	85 c0                	test   eax,eax
c0017dcf:	75 19                	jne    c0017dea <scanMADT()+0x46>
c0017dd1:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017dd6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ddc:	83 e2 fb             	and    edx,0xfffffffb
c0017ddf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017de5:	e9 3b 04 00 00       	jmp    c0018225 <scanMADT()+0x481>
c0017dea:	a1 ec 0e 03 c0       	mov    eax,ds:0xc0030eec
c0017def:	83 ec 0c             	sub    esp,0xc
c0017df2:	50                   	push   eax
c0017df3:	e8 f2 fd ff ff       	call   c0017bea <findRSDT(unsigned char*)>
c0017df8:	83 c4 10             	add    esp,0x10
c0017dfb:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c0017e00:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0017e05:	85 c0                	test   eax,eax
c0017e07:	75 19                	jne    c0017e22 <scanMADT()+0x7e>
c0017e09:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017e0e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e14:	83 e2 fb             	and    edx,0xfffffffb
c0017e17:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e1d:	e9 03 04 00 00       	jmp    c0018225 <scanMADT()+0x481>
c0017e22:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0017e27:	83 ec 0c             	sub    esp,0xc
c0017e2a:	50                   	push   eax
c0017e2b:	e8 93 fb ff ff       	call   c00179c3 <loadACPITables(unsigned char*)>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c0017e38:	83 ec 08             	sub    esp,0x8
c0017e3b:	68 c8 b5 02 c0       	push   0xc002b5c8
c0017e40:	50                   	push   eax
c0017e41:	e8 c2 fe ff ff       	call   c0017d08 <findDataTable(unsigned char*, char*)>
c0017e46:	83 c4 10             	add    esp,0x10
c0017e49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e4d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e52:	75 19                	jne    c0017e6d <scanMADT()+0xc9>
c0017e54:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0017e59:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e5f:	83 e2 fe             	and    edx,0xfffffffe
c0017e62:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e68:	e9 b8 03 00 00       	jmp    c0018225 <scanMADT()+0x481>
c0017e6d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e7c:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e80:	0f 87 9f 03 00 00    	ja     c0018225 <scanMADT()+0x481>
c0017e86:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e8e:	0f 87 91 03 00 00    	ja     c0018225 <scanMADT()+0x481>
c0017e94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e98:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ea7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017eaf:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017eb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb7:	8d 50 01             	lea    edx,[eax+0x1]
c0017eba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ebe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ec2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ec6:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017eca:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017ecf:	0f 86 4f 03 00 00    	jbe    c0018224 <scanMADT()+0x480>
c0017ed5:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017eda:	75 57                	jne    c0017f33 <scanMADT()+0x18f>
c0017edc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ee3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ee7:	8a 15 e0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310e0
c0017eed:	0f b6 d2             	movzx  edx,dl
c0017ef0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ef4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ef8:	88 82 20 11 03 c0    	mov    BYTE PTR [edx-0x3ffceee0],al
c0017efe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f02:	8d 50 01             	lea    edx,[eax+0x1]
c0017f05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f09:	8a 15 e0 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310e0
c0017f0f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f12:	88 0d e0 10 03 c0    	mov    BYTE PTR ds:0xc00310e0,cl
c0017f18:	0f b6 d2             	movzx  edx,dl
c0017f1b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f1f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f23:	88 82 00 11 03 c0    	mov    BYTE PTR [edx-0x3ffcef00],al
c0017f29:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f2e:	e9 da 02 00 00       	jmp    c001820d <scanMADT()+0x469>
c0017f33:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f38:	0f 85 14 01 00 00    	jne    c0018052 <scanMADT()+0x2ae>
c0017f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f42:	8d 50 01             	lea    edx,[eax+0x1]
c0017f45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f49:	8a 15 a0 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fa0
c0017f4f:	0f b6 d2             	movzx  edx,dl
c0017f52:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f56:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f5a:	88 82 c0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf040],al
c0017f60:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f64:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6c:	01 d0                	add    eax,edx
c0017f6e:	83 c0 2c             	add    eax,0x2c
c0017f71:	8a 00                	mov    al,BYTE PTR [eax]
c0017f73:	0f b6 d0             	movzx  edx,al
c0017f76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7a:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f81:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f85:	0f b6 c0             	movzx  eax,al
c0017f88:	c1 e0 08             	shl    eax,0x8
c0017f8b:	89 d1                	mov    ecx,edx
c0017f8d:	09 c1                	or     ecx,eax
c0017f8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f93:	8d 50 02             	lea    edx,[eax+0x2]
c0017f96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f9a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f9e:	0f b6 c0             	movzx  eax,al
c0017fa1:	c1 e0 10             	shl    eax,0x10
c0017fa4:	09 c1                	or     ecx,eax
c0017fa6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017faa:	8d 50 03             	lea    edx,[eax+0x3]
c0017fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017fb5:	0f b6 c0             	movzx  eax,al
c0017fb8:	c1 e0 18             	shl    eax,0x18
c0017fbb:	09 c1                	or     ecx,eax
c0017fbd:	89 ca                	mov    edx,ecx
c0017fbf:	a0 a0 0f 03 c0       	mov    al,ds:0xc0030fa0
c0017fc4:	0f b6 c0             	movzx  eax,al
c0017fc7:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c0017fce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdb:	01 d0                	add    eax,edx
c0017fdd:	83 c0 2c             	add    eax,0x2c
c0017fe0:	8a 00                	mov    al,BYTE PTR [eax]
c0017fe2:	0f b6 d0             	movzx  edx,al
c0017fe5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ff0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ff4:	0f b6 c0             	movzx  eax,al
c0017ff7:	c1 e0 08             	shl    eax,0x8
c0017ffa:	89 d1                	mov    ecx,edx
c0017ffc:	09 c1                	or     ecx,eax
c0017ffe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018002:	8d 50 02             	lea    edx,[eax+0x2]
c0018005:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018009:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001800d:	0f b6 c0             	movzx  eax,al
c0018010:	c1 e0 10             	shl    eax,0x10
c0018013:	09 c1                	or     ecx,eax
c0018015:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018019:	8d 50 03             	lea    edx,[eax+0x3]
c001801c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018020:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018024:	0f b6 c0             	movzx  eax,al
c0018027:	c1 e0 18             	shl    eax,0x18
c001802a:	09 c1                	or     ecx,eax
c001802c:	89 ca                	mov    edx,ecx
c001802e:	a0 a0 0f 03 c0       	mov    al,ds:0xc0030fa0
c0018033:	0f b6 c0             	movzx  eax,al
c0018036:	89 14 85 60 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefa0],edx
c001803d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018042:	a0 a0 0f 03 c0       	mov    al,ds:0xc0030fa0
c0018047:	40                   	inc    eax
c0018048:	a2 a0 0f 03 c0       	mov    ds:0xc0030fa0,al
c001804d:	e9 bb 01 00 00       	jmp    c001820d <scanMADT()+0x469>
c0018052:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018057:	0f 85 e9 00 00 00    	jne    c0018146 <scanMADT()+0x3a2>
c001805d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018061:	8d 50 01             	lea    edx,[eax+0x1]
c0018064:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018068:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001806c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018070:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018074:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018078:	8d 50 01             	lea    edx,[eax+0x1]
c001807b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001807f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018083:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018087:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001808b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018093:	01 d0                	add    eax,edx
c0018095:	83 c0 2c             	add    eax,0x2c
c0018098:	8a 00                	mov    al,BYTE PTR [eax]
c001809a:	0f b6 d0             	movzx  edx,al
c001809d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00180a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180ac:	0f b6 c0             	movzx  eax,al
c00180af:	c1 e0 08             	shl    eax,0x8
c00180b2:	89 d1                	mov    ecx,edx
c00180b4:	09 c1                	or     ecx,eax
c00180b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ba:	8d 50 02             	lea    edx,[eax+0x2]
c00180bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180c5:	0f b6 c0             	movzx  eax,al
c00180c8:	c1 e0 10             	shl    eax,0x10
c00180cb:	09 c1                	or     ecx,eax
c00180cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180d1:	8d 50 03             	lea    edx,[eax+0x3]
c00180d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180dc:	0f b6 c0             	movzx  eax,al
c00180df:	c1 e0 18             	shl    eax,0x18
c00180e2:	09 c8                	or     eax,ecx
c00180e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180e8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f5:	01 d0                	add    eax,edx
c00180f7:	83 c0 2c             	add    eax,0x2c
c00180fa:	8a 00                	mov    al,BYTE PTR [eax]
c00180fc:	0f b6 c0             	movzx  eax,al
c00180ff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018103:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018106:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001810a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001810e:	0f b6 d2             	movzx  edx,dl
c0018111:	c1 e2 08             	shl    edx,0x8
c0018114:	09 d0                	or     eax,edx
c0018116:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001811b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018120:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018125:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018129:	88 90 60 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd27a0],dl
c001812f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018134:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018139:	66 89 84 12 80 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf080],ax
c0018141:	e9 c7 00 00 00       	jmp    c001820d <scanMADT()+0x469>
c0018146:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001814b:	0f 85 b0 00 00 00    	jne    c0018201 <scanMADT()+0x45d>
c0018151:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018155:	8d 50 01             	lea    edx,[eax+0x1]
c0018158:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001815c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018160:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018164:	0f b6 c0             	movzx  eax,al
c0018167:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001816b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018173:	01 d0                	add    eax,edx
c0018175:	83 c0 2c             	add    eax,0x2c
c0018178:	8a 00                	mov    al,BYTE PTR [eax]
c001817a:	0f b6 d0             	movzx  edx,al
c001817d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018181:	8d 48 01             	lea    ecx,[eax+0x1]
c0018184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018188:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001818c:	0f b6 c0             	movzx  eax,al
c001818f:	c1 e0 08             	shl    eax,0x8
c0018192:	09 d0                	or     eax,edx
c0018194:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018198:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001819d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a1:	8d 50 01             	lea    edx,[eax+0x1]
c00181a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ac:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181b0:	0f b6 c0             	movzx  eax,al
c00181b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bb:	c1 e0 08             	shl    eax,0x8
c00181be:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00181c2:	89 c1                	mov    ecx,eax
c00181c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181c8:	c1 e0 18             	shl    eax,0x18
c00181cb:	89 c3                	mov    ebx,eax
c00181cd:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00181d2:	8d 50 01             	lea    edx,[eax+0x1]
c00181d5:	89 15 f0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ef0,edx
c00181db:	09 d9                	or     ecx,ebx
c00181dd:	89 ca                	mov    edx,ecx
c00181df:	89 14 85 00 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf100],edx
c00181e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181f2:	68 28 b7 02 c0       	push   0xc002b728
c00181f7:	e8 0d ad ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00181fc:	83 c4 10             	add    esp,0x10
c00181ff:	eb 0c                	jmp    c001820d <scanMADT()+0x469>
c0018201:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018206:	75 05                	jne    c001820d <scanMADT()+0x469>
c0018208:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001820d:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018212:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018216:	01 d0                	add    eax,edx
c0018218:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001821c:	e9 54 fc ff ff       	jmp    c0017e75 <scanMADT()+0xd1>
c0018221:	90                   	nop
c0018222:	eb 01                	jmp    c0018225 <scanMADT()+0x481>
c0018224:	90                   	nop
c0018225:	83 c4 38             	add    esp,0x38
c0018228:	5b                   	pop    ebx
c0018229:	c3                   	ret    

c001822a <ACPI::ACPI()>:
c001822a:	83 ec 0c             	sub    esp,0xc
c001822d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018231:	83 ec 08             	sub    esp,0x8
c0018234:	68 cd b5 02 c0       	push   0xc002b5cd
c0018239:	50                   	push   eax
c001823a:	e8 e7 c2 ff ff       	call   c0014526 <Device::Device(char const*)>
c001823f:	83 c4 10             	add    esp,0x10
c0018242:	ba 9c b7 02 c0       	mov    edx,0xc002b79c
c0018247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824b:	89 10                	mov    DWORD PTR [eax],edx
c001824d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018251:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825c:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826a:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018278:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001827f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018283:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001828a:	e8 15 fb ff ff       	call   c0017da4 <scanMADT()>
c001828f:	90                   	nop
c0018290:	83 c4 0c             	add    esp,0xc
c0018293:	c3                   	ret    

c0018294 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018294:	83 ec 2c             	sub    esp,0x2c
c0018297:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001829b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001829f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182a3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00182a7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00182ac:	88 d0                	mov    al,dl
c00182ae:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00182b7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00182bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182c3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182c9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00182cd:	0f 8d 97 00 00 00    	jge    c001836a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00182d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182db:	83 c2 2a             	add    edx,0x2a
c00182de:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182e2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182e7:	75 78                	jne    c0018361 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f1:	83 c2 2a             	add    edx,0x2a
c00182f4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182f8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182fc:	75 63                	jne    c0018361 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182fe:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018303:	74 3a                	je     c001833f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018305:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001830d:	83 c2 2a             	add    edx,0x2a
c0018310:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018314:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018318:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001831b:	39 c2                	cmp    edx,eax
c001831d:	74 10                	je     c001832f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001831f:	83 ec 0c             	sub    esp,0xc
c0018322:	68 64 b7 02 c0       	push   0xc002b764
c0018327:	e8 1b 23 00 00       	call   c001a647 <Krnl::panic(char const*)>
c001832c:	83 c4 10             	add    esp,0x10
c001832f:	83 ec 0c             	sub    esp,0xc
c0018332:	68 d2 b5 02 c0       	push   0xc002b5d2
c0018337:	e8 0b 23 00 00       	call   c001a647 <Krnl::panic(char const*)>
c001833c:	83 c4 10             	add    esp,0x10
c001833f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018343:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018347:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001834b:	83 c2 2a             	add    edx,0x2a
c001834e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018352:	8b 02                	mov    eax,DWORD PTR [edx]
c0018354:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018357:	89 01                	mov    DWORD PTR [ecx],eax
c0018359:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001835c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018361:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018365:	e9 55 ff ff ff       	jmp    c00182bf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001836a:	90                   	nop
c001836b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001836f:	83 c4 2c             	add    esp,0x2c
c0018372:	c2 04 00             	ret    0x4
c0018375:	90                   	nop

c0018376 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018376:	83 ec 1c             	sub    esp,0x1c
c0018379:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001837d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018381:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018385:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001838a:	88 c8                	mov    al,cl
c001838c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018390:	88 d0                	mov    al,dl
c0018392:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183a7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00183ab:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00183af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183bd:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00183c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183c4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00183c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183cd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183d3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00183da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183de:	83 c2 2a             	add    edx,0x2a
c00183e1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183fa:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018402:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018408:	8d 50 01             	lea    edx,[eax+0x1]
c001840b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001840f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018419:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001841f:	3d 00 02 00 00       	cmp    eax,0x200
c0018424:	75 10                	jne    c0018436 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018426:	83 ec 0c             	sub    esp,0xc
c0018429:	68 e1 b5 02 c0       	push   0xc002b5e1
c001842e:	e8 14 22 00 00       	call   c001a647 <Krnl::panic(char const*)>
c0018433:	83 c4 10             	add    esp,0x10
c0018436:	90                   	nop
c0018437:	83 c4 1c             	add    esp,0x1c
c001843a:	c3                   	ret    
c001843b:	90                   	nop

c001843c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001843c:	b8 00 00 00 00       	mov    eax,0x0
c0018441:	c3                   	ret    

c0018442 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018442:	83 ec 1c             	sub    esp,0x1c
c0018445:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018449:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001844c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018450:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0018455:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001845a:	83 ec 08             	sub    esp,0x8
c001845d:	52                   	push   edx
c001845e:	50                   	push   eax
c001845f:	e8 fc 69 ff ff       	call   c000ee60 <Computer::readCMOS(unsigned char)>
c0018464:	83 c4 10             	add    esp,0x10
c0018467:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001846b:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0018470:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018475:	83 ec 04             	sub    esp,0x4
c0018478:	6a 01                	push   0x1
c001847a:	52                   	push   edx
c001847b:	50                   	push   eax
c001847c:	e8 f5 6a ff ff       	call   c000ef76 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018481:	83 c4 10             	add    esp,0x10
c0018484:	90                   	nop
c0018485:	83 c4 1c             	add    esp,0x1c
c0018488:	c3                   	ret    
c0018489:	90                   	nop

c001848a <ACPI::open(int, int, void*)>:
c001848a:	53                   	push   ebx
c001848b:	83 ec 28             	sub    esp,0x28
c001848e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018492:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018499:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001849d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00184a4:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00184a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00184af:	83 e0 04             	and    eax,0x4
c00184b2:	84 c0                	test   al,al
c00184b4:	74 47                	je     c00184fd <ACPI::open(int, int, void*)+0x73>
c00184b6:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00184bb:	83 ec 08             	sub    esp,0x8
c00184be:	68 fe b5 02 c0       	push   0xc002b5fe
c00184c3:	50                   	push   eax
c00184c4:	e8 3f f8 ff ff       	call   c0017d08 <findDataTable(unsigned char*, char*)>
c00184c9:	83 c4 10             	add    esp,0x10
c00184cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184d5:	74 26                	je     c00184fd <ACPI::open(int, int, void*)+0x73>
c00184d7:	83 ec 0c             	sub    esp,0xc
c00184da:	68 03 b6 02 c0       	push   0xc002b603
c00184df:	e8 25 aa ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00184e4:	83 c4 10             	add    esp,0x10
c00184e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184eb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f6:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184fd:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018505:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018509:	8a 00                	mov    al,BYTE PTR [eax]
c001850b:	3c 01                	cmp    al,0x1
c001850d:	75 28                	jne    c0018537 <ACPI::open(int, int, void*)+0xad>
c001850f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018513:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001851a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001851e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018525:	83 ec 0c             	sub    esp,0xc
c0018528:	68 14 b6 02 c0       	push   0xc002b614
c001852d:	e8 d7 a9 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018532:	83 c4 10             	add    esp,0x10
c0018535:	eb 25                	jmp    c001855c <ACPI::open(int, int, void*)+0xd2>
c0018537:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001853b:	8a 00                	mov    al,BYTE PTR [eax]
c001853d:	3c 02                	cmp    al,0x2
c001853f:	75 1b                	jne    c001855c <ACPI::open(int, int, void*)+0xd2>
c0018541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018545:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001854c:	83 ec 0c             	sub    esp,0xc
c001854f:	68 1c b6 02 c0       	push   0xc002b61c
c0018554:	e8 b0 a9 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018559:	83 c4 10             	add    esp,0x10
c001855c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018560:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018566:	83 f0 01             	xor    eax,0x1
c0018569:	84 c0                	test   al,al
c001856b:	74 6a                	je     c00185d7 <ACPI::open(int, int, void*)+0x14d>
c001856d:	83 ec 0c             	sub    esp,0xc
c0018570:	68 24 b6 02 c0       	push   0xc002b624
c0018575:	e8 8f a9 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001857a:	83 c4 10             	add    esp,0x10
c001857d:	e8 ce 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018582:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018586:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001858b:	75 28                	jne    c00185b5 <ACPI::open(int, int, void*)+0x12b>
c001858d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018591:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018598:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185a3:	83 ec 0c             	sub    esp,0xc
c00185a6:	68 32 b6 02 c0       	push   0xc002b632
c00185ab:	e8 59 a9 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00185b0:	83 c4 10             	add    esp,0x10
c00185b3:	eb 22                	jmp    c00185d7 <ACPI::open(int, int, void*)+0x14d>
c00185b5:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185ba:	75 1b                	jne    c00185d7 <ACPI::open(int, int, void*)+0x14d>
c00185bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c0:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185c7:	83 ec 0c             	sub    esp,0xc
c00185ca:	68 3c b6 02 c0       	push   0xc002b63c
c00185cf:	e8 35 a9 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00185d4:	83 c4 10             	add    esp,0x10
c00185d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185db:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185e1:	84 c0                	test   al,al
c00185e3:	74 13                	je     c00185f8 <ACPI::open(int, int, void*)+0x16e>
c00185e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185e9:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185ef:	83 f0 01             	xor    eax,0x1
c00185f2:	0f b6 c0             	movzx  eax,al
c00185f5:	40                   	inc    eax
c00185f6:	eb 05                	jmp    c00185fd <ACPI::open(int, int, void*)+0x173>
c00185f8:	b8 00 00 00 00       	mov    eax,0x0
c00185fd:	83 ec 08             	sub    esp,0x8
c0018600:	50                   	push   eax
c0018601:	68 46 b6 02 c0       	push   0xc002b646
c0018606:	e8 fe a8 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001860b:	83 c4 10             	add    esp,0x10
c001860e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018612:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018618:	84 c0                	test   al,al
c001861a:	74 67                	je     c0018683 <ACPI::open(int, int, void*)+0x1f9>
c001861c:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001862b:	e8 1b 72 ff ff       	call   c000f84b <malloc>
c0018630:	83 c4 10             	add    esp,0x10
c0018633:	89 c3                	mov    ebx,eax
c0018635:	83 ec 0c             	sub    esp,0xc
c0018638:	53                   	push   ebx
c0018639:	e8 12 a4 00 00       	call   c0022a50 <PCI::PCI()>
c001863e:	83 c4 10             	add    esp,0x10
c0018641:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018649:	83 ec 08             	sub    esp,0x8
c001864c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018650:	50                   	push   eax
c0018651:	e8 e0 bc ff ff       	call   c0014336 <Device::addChild(Device*)>
c0018656:	83 c4 10             	add    esp,0x10
c0018659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001865d:	8b 00                	mov    eax,DWORD PTR [eax]
c001865f:	83 c0 08             	add    eax,0x8
c0018662:	8b 00                	mov    eax,DWORD PTR [eax]
c0018664:	6a 00                	push   0x0
c0018666:	6a 00                	push   0x0
c0018668:	6a 00                	push   0x0
c001866a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001866e:	ff d0                	call   eax
c0018670:	83 c4 10             	add    esp,0x10
c0018673:	83 ec 0c             	sub    esp,0xc
c0018676:	68 4f b6 02 c0       	push   0xc002b64f
c001867b:	e8 89 a8 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018680:	83 c4 10             	add    esp,0x10
c0018683:	83 ec 0c             	sub    esp,0xc
c0018686:	68 5a b6 02 c0       	push   0xc002b65a
c001868b:	e8 8d 46 00 00       	call   c001cd1d <Thr::loadKernelSymbolTable(char const*)>
c0018690:	83 c4 10             	add    esp,0x10
c0018693:	83 ec 0c             	sub    esp,0xc
c0018696:	6a 0c                	push   0xc
c0018698:	e8 4f 97 ff ff       	call   c0011dec <Virt::setupPageSwapping(int)>
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c00186a6:	83 ec 08             	sub    esp,0x8
c00186a9:	6a 01                	push   0x1
c00186ab:	68 78 b6 02 c0       	push   0xc002b678
c00186b0:	e8 c5 50 00 00       	call   c001d77a <Thr::loadDLL(char const*, bool)>
c00186b5:	83 c4 10             	add    esp,0x10
c00186b8:	83 ec 08             	sub    esp,0x8
c00186bb:	53                   	push   ebx
c00186bc:	50                   	push   eax
c00186bd:	e8 ec 52 00 00       	call   c001d9ae <Thr::executeDLL(unsigned long, void*)>
c00186c2:	83 c4 10             	add    esp,0x10
c00186c5:	8b 1d 08 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e608
c00186cb:	83 ec 08             	sub    esp,0x8
c00186ce:	6a 01                	push   0x1
c00186d0:	68 95 b6 02 c0       	push   0xc002b695
c00186d5:	e8 a0 50 00 00       	call   c001d77a <Thr::loadDLL(char const*, bool)>
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	83 ec 08             	sub    esp,0x8
c00186e0:	53                   	push   ebx
c00186e1:	50                   	push   eax
c00186e2:	e8 c7 52 00 00       	call   c001d9ae <Thr::executeDLL(unsigned long, void*)>
c00186e7:	83 c4 10             	add    esp,0x10
c00186ea:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00186ef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186f5:	83 e0 04             	and    eax,0x4
c00186f8:	84 c0                	test   al,al
c00186fa:	0f 84 d2 00 00 00    	je     c00187d2 <ACPI::open(int, int, void*)+0x348>
c0018700:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018707:	83 ec 0c             	sub    esp,0xc
c001870a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001870e:	e8 38 71 ff ff       	call   c000f84b <malloc>
c0018713:	83 c4 10             	add    esp,0x10
c0018716:	89 c3                	mov    ebx,eax
c0018718:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001871d:	83 ec 04             	sub    esp,0x4
c0018720:	50                   	push   eax
c0018721:	68 b2 b6 02 c0       	push   0xc002b6b2
c0018726:	53                   	push   ebx
c0018727:	e8 3c ad ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001872c:	83 c4 10             	add    esp,0x10
c001872f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018733:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018738:	74 17                	je     c0018751 <ACPI::open(int, int, void*)+0x2c7>
c001873a:	83 ec 0c             	sub    esp,0xc
c001873d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018741:	e8 f4 af ff ff       	call   c001373a <File::exists()>
c0018746:	83 c4 10             	add    esp,0x10
c0018749:	84 c0                	test   al,al
c001874b:	74 04                	je     c0018751 <ACPI::open(int, int, void*)+0x2c7>
c001874d:	b0 01                	mov    al,0x1
c001874f:	eb 02                	jmp    c0018753 <ACPI::open(int, int, void*)+0x2c9>
c0018751:	b0 00                	mov    al,0x0
c0018753:	84 c0                	test   al,al
c0018755:	74 22                	je     c0018779 <ACPI::open(int, int, void*)+0x2ef>
c0018757:	83 ec 08             	sub    esp,0x8
c001875a:	6a 01                	push   0x1
c001875c:	68 b2 b6 02 c0       	push   0xc002b6b2
c0018761:	e8 14 50 00 00       	call   c001d77a <Thr::loadDLL(char const*, bool)>
c0018766:	83 c4 10             	add    esp,0x10
c0018769:	83 ec 08             	sub    esp,0x8
c001876c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018770:	50                   	push   eax
c0018771:	e8 38 52 00 00       	call   c001d9ae <Thr::executeDLL(unsigned long, void*)>
c0018776:	83 c4 10             	add    esp,0x10
c0018779:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001877e:	74 1e                	je     c001879e <ACPI::open(int, int, void*)+0x314>
c0018780:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018785:	74 17                	je     c001879e <ACPI::open(int, int, void*)+0x314>
c0018787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001878b:	8b 00                	mov    eax,DWORD PTR [eax]
c001878d:	83 c0 08             	add    eax,0x8
c0018790:	8b 00                	mov    eax,DWORD PTR [eax]
c0018792:	83 ec 0c             	sub    esp,0xc
c0018795:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018799:	ff d0                	call   eax
c001879b:	83 c4 10             	add    esp,0x10
c001879e:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c00187a3:	83 ec 08             	sub    esp,0x8
c00187a6:	68 cf b6 02 c0       	push   0xc002b6cf
c00187ab:	50                   	push   eax
c00187ac:	e8 57 f5 ff ff       	call   c0017d08 <findDataTable(unsigned char*, char*)>
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00187bd:	74 13                	je     c00187d2 <ACPI::open(int, int, void*)+0x348>
c00187bf:	83 ec 08             	sub    esp,0x8
c00187c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187ca:	e8 73 fc ff ff       	call   c0018442 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187cf:	83 c4 10             	add    esp,0x10
c00187d2:	b8 00 00 00 00       	mov    eax,0x0
c00187d7:	83 c4 28             	add    esp,0x28
c00187da:	5b                   	pop    ebx
c00187db:	c3                   	ret    

c00187dc <ACPI::sleep()>:
c00187dc:	83 ec 0c             	sub    esp,0xc
c00187df:	a1 c0 0c 03 c0       	mov    eax,ds:0xc0030cc0
c00187e4:	85 c0                	test   eax,eax
c00187e6:	74 07                	je     c00187ef <ACPI::sleep()+0x13>
c00187e8:	a1 c0 0c 03 c0       	mov    eax,ds:0xc0030cc0
c00187ed:	ff d0                	call   eax
c00187ef:	90                   	nop
c00187f0:	83 c4 0c             	add    esp,0xc
c00187f3:	c3                   	ret    

c00187f4 <CPU::close(int, int, void*)>:
c00187f4:	31 c0                	xor    eax,eax
c00187f6:	c3                   	ret    
c00187f7:	90                   	nop

c00187f8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187f8:	55                   	push   ebp
c00187f9:	57                   	push   edi
c00187fa:	56                   	push   esi
c00187fb:	53                   	push   ebx
c00187fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018800:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018804:	89 ce                	mov    esi,ecx
c0018806:	89 d5                	mov    ebp,edx
c0018808:	80 f9 04             	cmp    cl,0x4
c001880b:	75 28                	jne    c0018835 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001880d:	8d 42 f9             	lea    eax,[edx-0x7]
c0018810:	3c 03                	cmp    al,0x3
c0018812:	0f 86 63 01 00 00    	jbe    c001897b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018818:	80 fa 03             	cmp    dl,0x3
c001881b:	0f 84 5a 01 00 00    	je     c001897b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018821:	8d 7a f2             	lea    edi,[edx-0xe]
c0018824:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018829:	89 fb                	mov    ebx,edi
c001882b:	80 fb 01             	cmp    bl,0x1
c001882e:	77 4e                	ja     c001887e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018830:	e9 52 01 00 00       	jmp    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018835:	80 f9 05             	cmp    cl,0x5
c0018838:	75 4d                	jne    c0018887 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001883a:	b8 40 da 02 c0       	mov    eax,0xc002da40
c001883f:	80 fa 03             	cmp    dl,0x3
c0018842:	0f 86 3f 01 00 00    	jbe    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018848:	8d 7a fa             	lea    edi,[edx-0x6]
c001884b:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018850:	89 fb                	mov    ebx,edi
c0018852:	80 fb 01             	cmp    bl,0x1
c0018855:	0f 86 2c 01 00 00    	jbe    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885b:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018860:	80 fa 08             	cmp    dl,0x8
c0018863:	0f 84 1e 01 00 00    	je     c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018869:	89 d7                	mov    edi,edx
c001886b:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018870:	83 e7 fb             	and    edi,0xfffffffb
c0018873:	89 fb                	mov    ebx,edi
c0018875:	80 fb 09             	cmp    bl,0x9
c0018878:	0f 84 09 01 00 00    	je     c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001887e:	31 c0                	xor    eax,eax
c0018880:	89 eb                	mov    ebx,ebp
c0018882:	0f b6 fb             	movzx  edi,bl
c0018885:	eb 30                	jmp    c00188b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018887:	31 c0                	xor    eax,eax
c0018889:	80 f9 06             	cmp    cl,0x6
c001888c:	75 f2                	jne    c0018880 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001888e:	80 fa 0a             	cmp    dl,0xa
c0018891:	77 ed                	ja     c0018880 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018893:	bf de 05 00 00       	mov    edi,0x5de
c0018898:	0f a3 d7             	bt     edi,edx
c001889b:	73 e3                	jae    c0018880 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001889d:	b8 80 da 02 c0       	mov    eax,0xc002da80
c00188a2:	e9 e0 00 00 00       	jmp    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a7:	39 c7                	cmp    edi,eax
c00188a9:	0f 84 d3 00 00 00    	je     c0018982 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188af:	40                   	inc    eax
c00188b0:	3d d0 00 00 00       	cmp    eax,0xd0
c00188b5:	74 09                	je     c00188c0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00188b7:	89 f3                	mov    ebx,esi
c00188b9:	80 fb 0f             	cmp    bl,0xf
c00188bc:	75 f1                	jne    c00188af <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00188be:	eb e7                	jmp    c00188a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00188c0:	80 f9 10             	cmp    cl,0x10
c00188c3:	75 14                	jne    c00188d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188c5:	8d 42 fc             	lea    eax,[edx-0x4]
c00188c8:	83 e0 fb             	and    eax,0xfffffffb
c00188cb:	3c 02                	cmp    al,0x2
c00188cd:	76 34                	jbe    c0018903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188cf:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c00188d4:	80 fa 02             	cmp    dl,0x2
c00188d7:	eb 24                	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188d9:	80 f9 11             	cmp    cl,0x11
c00188dc:	75 13                	jne    c00188f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188de:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c00188e3:	80 fa 03             	cmp    dl,0x3
c00188e6:	0f 85 9b 00 00 00    	jne    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ec:	e9 91 00 00 00       	jmp    c0018982 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188f1:	80 f9 12             	cmp    cl,0x12
c00188f4:	75 14                	jne    c001890a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188f6:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c00188fb:	fe ca                	dec    dl
c00188fd:	0f 85 84 00 00 00    	jne    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018903:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c0018908:	eb 7d                	jmp    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890a:	80 f9 14             	cmp    cl,0x14
c001890d:	75 12                	jne    c0018921 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001890f:	4a                   	dec    edx
c0018910:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c0018915:	80 fa 01             	cmp    dl,0x1
c0018918:	77 6d                	ja     c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891a:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c001891f:	eb 66                	jmp    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018921:	80 f9 15             	cmp    cl,0x15
c0018924:	75 31                	jne    c0018957 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018926:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c001892b:	80 fa 01             	cmp    dl,0x1
c001892e:	74 57                	je     c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018930:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c0018935:	80 fa 13             	cmp    dl,0x13
c0018938:	76 0c                	jbe    c0018946 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001893a:	80 fa 30             	cmp    dl,0x30
c001893d:	75 48                	jne    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893f:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c0018944:	eb 41                	jmp    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018946:	b9 04 00 09 00       	mov    ecx,0x90004
c001894b:	0f a3 d1             	bt     ecx,edx
c001894e:	73 37                	jae    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018950:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018955:	eb 30                	jmp    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018957:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c001895c:	80 f9 16             	cmp    cl,0x16
c001895f:	75 26                	jne    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018961:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c0018966:	84 d2                	test   dl,dl
c0018968:	74 1d                	je     c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001896a:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c001896f:	80 fa 30             	cmp    dl,0x30
c0018972:	75 13                	jne    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018974:	b8 00 db 02 c0       	mov    eax,0xc002db00
c0018979:	eb 0c                	jmp    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001897b:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018980:	eb 05                	jmp    c0018987 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018982:	b8 90 da 02 c0       	mov    eax,0xc002da90
c0018987:	5b                   	pop    ebx
c0018988:	5e                   	pop    esi
c0018989:	5f                   	pop    edi
c001898a:	5d                   	pop    ebp
c001898b:	c3                   	ret    

c001898c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001898c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018994:	80 f9 04             	cmp    cl,0x4
c0018997:	75 6b                	jne    c0018a04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018999:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c001899e:	80 fa 01             	cmp    dl,0x1
c00189a1:	0f 86 92 02 00 00    	jbe    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a7:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c00189ac:	80 fa 02             	cmp    dl,0x2
c00189af:	0f 84 84 02 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b5:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00189ba:	80 fa 03             	cmp    dl,0x3
c00189bd:	0f 84 76 02 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c3:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c00189c8:	80 fa 04             	cmp    dl,0x4
c00189cb:	0f 84 68 02 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d1:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c00189d6:	80 fa 05             	cmp    dl,0x5
c00189d9:	0f 84 5a 02 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189df:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c00189e4:	80 fa 07             	cmp    dl,0x7
c00189e7:	0f 84 4c 02 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ed:	83 ea 08             	sub    edx,0x8
c00189f0:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c00189f5:	80 fa 01             	cmp    dl,0x1
c00189f8:	0f 87 3b 02 00 00    	ja     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fe:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018a03:	c3                   	ret    
c0018a04:	80 f9 05             	cmp    cl,0x5
c0018a07:	75 45                	jne    c0018a4e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a09:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a0c:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018a11:	80 f9 02             	cmp    cl,0x2
c0018a14:	0f 86 1f 02 00 00    	jbe    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1a:	80 fa 04             	cmp    dl,0x4
c0018a1d:	0f 84 f3 01 00 00    	je     c0018c16 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a23:	80 fa 07             	cmp    dl,0x7
c0018a26:	0f 84 0d 02 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2c:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018a31:	80 fa 08             	cmp    dl,0x8
c0018a34:	0f 84 ff 01 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3a:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c0018a3f:	80 fa 09             	cmp    dl,0x9
c0018a42:	0f 85 f1 01 00 00    	jne    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a48:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018a4d:	c3                   	ret    
c0018a4e:	80 f9 06             	cmp    cl,0x6
c0018a51:	0f 85 85 01 00 00    	jne    c0018bdc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a57:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018a5c:	80 fa 01             	cmp    dl,0x1
c0018a5f:	0f 84 d4 01 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a65:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a68:	3c 01                	cmp    al,0x1
c0018a6a:	0f 86 ac 01 00 00    	jbe    c0018c1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a70:	80 fa 03             	cmp    dl,0x3
c0018a73:	0f 84 a3 01 00 00    	je     c0018c1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a79:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a7c:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018a81:	80 f9 01             	cmp    cl,0x1
c0018a84:	0f 86 af 01 00 00    	jbe    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8a:	80 fa 09             	cmp    dl,0x9
c0018a8d:	0f 84 8f 01 00 00    	je     c0018c22 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a93:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a96:	80 f9 01             	cmp    cl,0x1
c0018a99:	0f 86 9a 01 00 00    	jbe    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9f:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018aa4:	80 fa 0d             	cmp    dl,0xd
c0018aa7:	0f 84 8c 01 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aad:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018ab2:	80 fa 0e             	cmp    dl,0xe
c0018ab5:	0f 84 7e 01 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abb:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018ac0:	80 fa 0f             	cmp    dl,0xf
c0018ac3:	0f 84 70 01 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac9:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018ace:	80 fa 15             	cmp    dl,0x15
c0018ad1:	0f 84 62 01 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad7:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018ada:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018adf:	80 f9 01             	cmp    cl,0x1
c0018ae2:	0f 86 51 01 00 00    	jbe    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae8:	80 fa 1a             	cmp    dl,0x1a
c0018aeb:	0f 84 37 01 00 00    	je     c0018c28 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018af1:	80 fa 1c             	cmp    dl,0x1c
c0018af4:	0f 84 34 01 00 00    	je     c0018c2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018afa:	80 fa 1d             	cmp    dl,0x1d
c0018afd:	0f 84 36 01 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b03:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b08:	80 fa 25             	cmp    dl,0x25
c0018b0b:	0f 84 28 01 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b11:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b14:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b19:	80 f9 01             	cmp    cl,0x1
c0018b1c:	0f 86 17 01 00 00    	jbe    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b22:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b27:	80 fa 2a             	cmp    dl,0x2a
c0018b2a:	0f 84 09 01 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b30:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b35:	80 fa 2c             	cmp    dl,0x2c
c0018b38:	0f 84 fb 00 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3e:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018b43:	80 fa 2d             	cmp    dl,0x2d
c0018b46:	0f 84 ed 00 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4c:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018b51:	80 fa 2e             	cmp    dl,0x2e
c0018b54:	0f 84 df 00 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5a:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018b5f:	80 fa 2f             	cmp    dl,0x2f
c0018b62:	0f 84 d1 00 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b68:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b6b:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018b70:	80 f9 01             	cmp    cl,0x1
c0018b73:	0f 86 c0 00 00 00    	jbe    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b79:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b7e:	80 fa 37             	cmp    dl,0x37
c0018b81:	0f 84 b2 00 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b87:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b8c:	80 fa 3a             	cmp    dl,0x3a
c0018b8f:	0f 84 a4 00 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b95:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b9a:	80 fa 3c             	cmp    dl,0x3c
c0018b9d:	0f 84 96 00 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba3:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018ba8:	80 fa 3d             	cmp    dl,0x3d
c0018bab:	0f 84 88 00 00 00    	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb1:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018bb6:	80 fa 3e             	cmp    dl,0x3e
c0018bb9:	74 7e                	je     c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbb:	8d 42 bb             	lea    eax,[edx-0x45]
c0018bbe:	3c 01                	cmp    al,0x1
c0018bc0:	76 72                	jbe    c0018c34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bc2:	80 fa 3f             	cmp    dl,0x3f
c0018bc5:	74 6d                	je     c0018c34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018bc7:	80 fa 4a             	cmp    dl,0x4a
c0018bca:	74 0a                	je     c0018bd6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018bcc:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c0018bd1:	80 fa 4d             	cmp    dl,0x4d
c0018bd4:	75 63                	jne    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd6:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018bdb:	c3                   	ret    
c0018bdc:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c0018be1:	80 f9 0b             	cmp    cl,0xb
c0018be4:	75 0a                	jne    c0018bf0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018be6:	fe ca                	dec    dl
c0018be8:	75 4f                	jne    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bea:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018bef:	c3                   	ret    
c0018bf0:	80 f9 0f             	cmp    cl,0xf
c0018bf3:	75 44                	jne    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf5:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018bfa:	80 fa 02             	cmp    dl,0x2
c0018bfd:	76 3a                	jbe    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bff:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c02:	3c 01                	cmp    al,0x1
c0018c04:	76 0a                	jbe    c0018c10 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c06:	b8 b2 ba 02 c0       	mov    eax,0xc002bab2
c0018c0b:	80 fa 06             	cmp    dl,0x6
c0018c0e:	75 29                	jne    c0018c39 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c10:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018c15:	c3                   	ret    
c0018c16:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018c1b:	c3                   	ret    
c0018c1c:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018c21:	c3                   	ret    
c0018c22:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018c27:	c3                   	ret    
c0018c28:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018c2d:	c3                   	ret    
c0018c2e:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018c33:	c3                   	ret    
c0018c34:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018c39:	c3                   	ret    

c0018c3a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c3a:	60                   	pusha  
c0018c3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c47:	9c                   	pushf  
c0018c48:	fa                   	cli    
c0018c49:	0f 09                	wbinvd 
c0018c4b:	0f 30                	wrmsr  
c0018c4d:	9d                   	popf   
c0018c4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c52:	89 02                	mov    DWORD PTR [edx],eax
c0018c54:	61                   	popa   
c0018c55:	c3                   	ret    

c0018c56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c56:	60                   	pusha  
c0018c57:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c5b:	9c                   	pushf  
c0018c5c:	fa                   	cli    
c0018c5d:	0f 09                	wbinvd 
c0018c5f:	31 c0                	xor    eax,eax
c0018c61:	31 d2                	xor    edx,edx
c0018c63:	0f 32                	rdmsr  
c0018c65:	9d                   	popf   
c0018c66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c6a:	89 02                	mov    DWORD PTR [edx],eax
c0018c6c:	61                   	popa   
c0018c6d:	c3                   	ret    

c0018c6e <CPU::AMD_K6_writeback(int, int, int)>:
c0018c6e:	56                   	push   esi
c0018c6f:	53                   	push   ebx
c0018c70:	83 ec 10             	sub    esp,0x10
c0018c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c77:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c7c:	75 5d                	jne    c0018cdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c7e:	83 f8 08             	cmp    eax,0x8
c0018c81:	75 09                	jne    c0018c8c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c83:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c88:	7e 13                	jle    c0018c9d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c8a:	eb 30                	jmp    c0018cbc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c8c:	83 f8 06             	cmp    eax,0x6
c0018c8f:	7c 4a                	jl     c0018cdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c91:	83 f8 07             	cmp    eax,0x7
c0018c94:	7e 07                	jle    c0018c9d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c96:	83 f8 09             	cmp    eax,0x9
c0018c99:	74 21                	je     c0018cbc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c9b:	eb 3e                	jmp    c0018cdb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c9d:	89 e6                	mov    esi,esp
c0018c9f:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0018ca5:	56                   	push   esi
c0018ca6:	c1 eb 15             	shr    ebx,0x15
c0018ca9:	68 82 00 00 c0       	push   0xc0000082
c0018cae:	83 e3 7e             	and    ebx,0x7e
c0018cb1:	e8 a0 ff ff ff       	call   c0018c56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cb6:	56                   	push   esi
c0018cb7:	6a 00                	push   0x0
c0018cb9:	53                   	push   ebx
c0018cba:	eb 12                	jmp    c0018cce <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018cbc:	89 e3                	mov    ebx,esp
c0018cbe:	53                   	push   ebx
c0018cbf:	68 82 00 00 c0       	push   0xc0000082
c0018cc4:	e8 8d ff ff ff       	call   c0018c56 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018cc9:	53                   	push   ebx
c0018cca:	6a 00                	push   0x0
c0018ccc:	6a 00                	push   0x0
c0018cce:	68 82 00 00 c0       	push   0xc0000082
c0018cd3:	e8 62 ff ff ff       	call   c0018c3a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018cd8:	83 c4 18             	add    esp,0x18
c0018cdb:	83 c4 10             	add    esp,0x10
c0018cde:	5b                   	pop    ebx
c0018cdf:	5e                   	pop    esi
c0018ce0:	c3                   	ret    
c0018ce1:	90                   	nop

c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018ce2:	55                   	push   ebp
c0018ce3:	57                   	push   edi
c0018ce4:	56                   	push   esi
c0018ce5:	53                   	push   ebx
c0018ce6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cf2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cf6:	39 05 20 db 02 c0    	cmp    DWORD PTR ds:0xc002db20,eax
c0018cfc:	75 23                	jne    c0018d21 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cfe:	a1 4c 11 03 c0       	mov    eax,ds:0xc003114c
c0018d03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d07:	89 06                	mov    DWORD PTR [esi],eax
c0018d09:	a1 48 11 03 c0       	mov    eax,ds:0xc0031148
c0018d0e:	89 07                	mov    DWORD PTR [edi],eax
c0018d10:	a1 44 11 03 c0       	mov    eax,ds:0xc0031144
c0018d15:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d18:	a1 40 11 03 c0       	mov    eax,ds:0xc0031140
c0018d1d:	89 02                	mov    DWORD PTR [edx],eax
c0018d1f:	eb 3f                	jmp    c0018d60 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d21:	31 c9                	xor    ecx,ecx
c0018d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d27:	0f a2                	cpuid  
c0018d29:	89 06                	mov    DWORD PTR [esi],eax
c0018d2b:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d31:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d34:	89 10                	mov    DWORD PTR [eax],edx
c0018d36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d3a:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c0018d3f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d41:	a3 4c 11 03 c0       	mov    ds:0xc003114c,eax
c0018d46:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d48:	a3 48 11 03 c0       	mov    ds:0xc0031148,eax
c0018d4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d50:	a3 44 11 03 c0       	mov    ds:0xc0031144,eax
c0018d55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d5b:	a3 40 11 03 c0       	mov    ds:0xc0031140,eax
c0018d60:	5b                   	pop    ebx
c0018d61:	5e                   	pop    esi
c0018d62:	5f                   	pop    edi
c0018d63:	5d                   	pop    ebp
c0018d64:	c3                   	ret    
c0018d65:	90                   	nop

c0018d66 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d66:	83 ec 10             	sub    esp,0x10
c0018d69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d6d:	50                   	push   eax
c0018d6e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d72:	50                   	push   eax
c0018d73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d77:	50                   	push   eax
c0018d78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7c:	50                   	push   eax
c0018d7d:	6a 01                	push   0x1
c0018d7f:	e8 5e ff ff ff       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d88:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d8c:	0f 95 c0             	setne  al
c0018d8f:	83 c4 24             	add    esp,0x24
c0018d92:	c3                   	ret    
c0018d93:	90                   	nop

c0018d94 <CPU::cpuidCheckECX(unsigned int)>:
c0018d94:	83 ec 10             	sub    esp,0x10
c0018d97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d9b:	50                   	push   eax
c0018d9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da0:	50                   	push   eax
c0018da1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da5:	50                   	push   eax
c0018da6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018daa:	50                   	push   eax
c0018dab:	6a 01                	push   0x1
c0018dad:	e8 30 ff ff ff       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018db2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018db6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018dba:	0f 95 c0             	setne  al
c0018dbd:	83 c4 24             	add    esp,0x24
c0018dc0:	c3                   	ret    
c0018dc1:	90                   	nop

c0018dc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018dc2:	83 ec 10             	sub    esp,0x10
c0018dc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc9:	50                   	push   eax
c0018dca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dce:	50                   	push   eax
c0018dcf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd3:	50                   	push   eax
c0018dd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd8:	50                   	push   eax
c0018dd9:	6a 07                	push   0x7
c0018ddb:	e8 02 ff ff ff       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018de0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018de4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018de8:	0f 95 c0             	setne  al
c0018deb:	83 c4 24             	add    esp,0x24
c0018dee:	c3                   	ret    
c0018def:	90                   	nop

c0018df0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018df0:	83 ec 10             	sub    esp,0x10
c0018df3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df7:	50                   	push   eax
c0018df8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfc:	50                   	push   eax
c0018dfd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e01:	50                   	push   eax
c0018e02:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e06:	50                   	push   eax
c0018e07:	6a 07                	push   0x7
c0018e09:	e8 d4 fe ff ff       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e12:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e16:	0f 95 c0             	setne  al
c0018e19:	83 c4 24             	add    esp,0x24
c0018e1c:	c3                   	ret    
c0018e1d:	90                   	nop

c0018e1e <CPU::CPU()>:
c0018e1e:	83 ec 0c             	sub    esp,0xc
c0018e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e25:	83 ec 08             	sub    esp,0x8
c0018e28:	68 b2 ba 02 c0       	push   0xc002bab2
c0018e2d:	50                   	push   eax
c0018e2e:	e8 f3 b6 ff ff       	call   c0014526 <Device::Device(char const*)>
c0018e33:	83 c4 10             	add    esp,0x10
c0018e36:	ba 8c bb 02 c0       	mov    edx,0xc002bb8c
c0018e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e3f:	89 10                	mov    DWORD PTR [eax],edx
c0018e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e45:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e53:	05 78 01 00 00       	add    eax,0x178
c0018e58:	83 ec 0c             	sub    esp,0xc
c0018e5b:	50                   	push   eax
c0018e5c:	e8 ff 61 ff ff       	call   c000f060 <GDT::GDT()>
c0018e61:	83 c4 10             	add    esp,0x10
c0018e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e68:	05 7c 09 00 00       	add    eax,0x97c
c0018e6d:	83 ec 0c             	sub    esp,0xc
c0018e70:	50                   	push   eax
c0018e71:	e8 4c 64 ff ff       	call   c000f2c2 <IDT::IDT()>
c0018e76:	83 c4 10             	add    esp,0x10
c0018e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7d:	05 7c 11 00 00       	add    eax,0x117c
c0018e82:	83 ec 0c             	sub    esp,0xc
c0018e85:	50                   	push   eax
c0018e86:	e8 f1 85 ff ff       	call   c001147c <TSS::TSS()>
c0018e8b:	83 c4 10             	add    esp,0x10
c0018e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e92:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e9d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018ea7:	90                   	nop
c0018ea8:	83 c4 0c             	add    esp,0xc
c0018eab:	c3                   	ret    

c0018eac <CPU::displayFeatures()>:
c0018eac:	53                   	push   ebx
c0018ead:	83 ec 10             	sub    esp,0x10
c0018eb0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018eb4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018eba:	68 c0 b7 02 c0       	push   0xc002b7c0
c0018ebf:	e8 45 a0 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018ec4:	59                   	pop    ecx
c0018ec5:	58                   	pop    eax
c0018ec6:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018ecc:	50                   	push   eax
c0018ecd:	68 d1 b7 02 c0       	push   0xc002b7d1
c0018ed2:	e8 32 a0 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018ed7:	58                   	pop    eax
c0018ed8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ede:	5a                   	pop    edx
c0018edf:	c1 e8 0e             	shr    eax,0xe
c0018ee2:	0f b6 c0             	movzx  eax,al
c0018ee5:	50                   	push   eax
c0018ee6:	68 e2 b7 02 c0       	push   0xc002b7e2
c0018eeb:	e8 19 a0 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018ef0:	59                   	pop    ecx
c0018ef1:	58                   	pop    eax
c0018ef2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ef8:	66 c1 e8 06          	shr    ax,0x6
c0018efc:	0f b6 c0             	movzx  eax,al
c0018eff:	50                   	push   eax
c0018f00:	68 f3 b7 02 c0       	push   0xc002b7f3
c0018f05:	e8 ff 9f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018f0a:	c7 04 24 a0 bc 02 c0 	mov    DWORD PTR [esp],0xc002bca0
c0018f11:	e8 f3 9f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0018f1e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f25:	74 05                	je     c0018f2c <CPU::displayFeatures()+0x80>
c0018f27:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0018f2c:	52                   	push   edx
c0018f2d:	52                   	push   edx
c0018f2e:	50                   	push   eax
c0018f2f:	68 04 b8 02 c0       	push   0xc002b804
c0018f34:	e8 d0 9f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018f39:	83 c4 10             	add    esp,0x10
c0018f3c:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0018f41:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f48:	78 05                	js     c0018f4f <CPU::displayFeatures()+0xa3>
c0018f4a:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0018f4f:	51                   	push   ecx
c0018f50:	51                   	push   ecx
c0018f51:	50                   	push   eax
c0018f52:	68 1b b8 02 c0       	push   0xc002b81b
c0018f57:	e8 ad 9f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018f5c:	83 c4 10             	add    esp,0x10
c0018f5f:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0018f64:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f6b:	75 05                	jne    c0018f72 <CPU::displayFeatures()+0xc6>
c0018f6d:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0018f72:	52                   	push   edx
c0018f73:	52                   	push   edx
c0018f74:	50                   	push   eax
c0018f75:	68 32 b8 02 c0       	push   0xc002b832
c0018f7a:	e8 8a 9f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0018f87:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f8e:	75 05                	jne    c0018f95 <CPU::displayFeatures()+0xe9>
c0018f90:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0018f95:	51                   	push   ecx
c0018f96:	51                   	push   ecx
c0018f97:	50                   	push   eax
c0018f98:	68 49 b8 02 c0       	push   0xc002b849
c0018f9d:	e8 67 9f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018fa2:	83 c4 10             	add    esp,0x10
c0018fa5:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0018faa:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018fb1:	75 05                	jne    c0018fb8 <CPU::displayFeatures()+0x10c>
c0018fb3:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0018fb8:	52                   	push   edx
c0018fb9:	52                   	push   edx
c0018fba:	50                   	push   eax
c0018fbb:	68 60 b8 02 c0       	push   0xc002b860
c0018fc0:	e8 44 9f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018fc5:	83 c4 10             	add    esp,0x10
c0018fc8:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0018fcd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018fd4:	75 05                	jne    c0018fdb <CPU::displayFeatures()+0x12f>
c0018fd6:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0018fdb:	51                   	push   ecx
c0018fdc:	51                   	push   ecx
c0018fdd:	50                   	push   eax
c0018fde:	68 77 b8 02 c0       	push   0xc002b877
c0018fe3:	e8 21 9f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0018fe8:	83 c4 10             	add    esp,0x10
c0018feb:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0018ff0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018ff7:	75 05                	jne    c0018ffe <CPU::displayFeatures()+0x152>
c0018ff9:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0018ffe:	52                   	push   edx
c0018fff:	52                   	push   edx
c0019000:	50                   	push   eax
c0019001:	68 8e b8 02 c0       	push   0xc002b88e
c0019006:	e8 fe 9e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001900b:	83 c4 10             	add    esp,0x10
c001900e:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0019013:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001901a:	75 05                	jne    c0019021 <CPU::displayFeatures()+0x175>
c001901c:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0019021:	51                   	push   ecx
c0019022:	51                   	push   ecx
c0019023:	50                   	push   eax
c0019024:	68 a5 b8 02 c0       	push   0xc002b8a5
c0019029:	e8 db 9e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001902e:	83 c4 10             	add    esp,0x10
c0019031:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0019036:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001903d:	75 05                	jne    c0019044 <CPU::displayFeatures()+0x198>
c001903f:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0019044:	52                   	push   edx
c0019045:	52                   	push   edx
c0019046:	50                   	push   eax
c0019047:	68 bc b8 02 c0       	push   0xc002b8bc
c001904c:	e8 b8 9e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0019059:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019060:	75 05                	jne    c0019067 <CPU::displayFeatures()+0x1bb>
c0019062:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0019067:	51                   	push   ecx
c0019068:	51                   	push   ecx
c0019069:	50                   	push   eax
c001906a:	68 d3 b8 02 c0       	push   0xc002b8d3
c001906f:	e8 95 9e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0019074:	83 c4 10             	add    esp,0x10
c0019077:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c001907c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019083:	75 05                	jne    c001908a <CPU::displayFeatures()+0x1de>
c0019085:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c001908a:	52                   	push   edx
c001908b:	52                   	push   edx
c001908c:	50                   	push   eax
c001908d:	68 ea b8 02 c0       	push   0xc002b8ea
c0019092:	e8 72 9e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0019097:	83 c4 10             	add    esp,0x10
c001909a:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c001909f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190a6:	75 05                	jne    c00190ad <CPU::displayFeatures()+0x201>
c00190a8:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c00190ad:	51                   	push   ecx
c00190ae:	51                   	push   ecx
c00190af:	50                   	push   eax
c00190b0:	68 01 b9 02 c0       	push   0xc002b901
c00190b5:	e8 4f 9e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00190ba:	83 c4 10             	add    esp,0x10
c00190bd:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c00190c2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190c9:	75 05                	jne    c00190d0 <CPU::displayFeatures()+0x224>
c00190cb:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c00190d0:	52                   	push   edx
c00190d1:	52                   	push   edx
c00190d2:	50                   	push   eax
c00190d3:	68 18 b9 02 c0       	push   0xc002b918
c00190d8:	e8 2c 9e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00190dd:	83 c4 10             	add    esp,0x10
c00190e0:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c00190e5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190ec:	78 05                	js     c00190f3 <CPU::displayFeatures()+0x247>
c00190ee:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c00190f3:	51                   	push   ecx
c00190f4:	51                   	push   ecx
c00190f5:	50                   	push   eax
c00190f6:	68 2f b9 02 c0       	push   0xc002b92f
c00190fb:	e8 09 9e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0019100:	83 c4 10             	add    esp,0x10
c0019103:	b8 b2 a1 02 c0       	mov    eax,0xc002a1b2
c0019108:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001910f:	75 05                	jne    c0019116 <CPU::displayFeatures()+0x26a>
c0019111:	b8 b6 a1 02 c0       	mov    eax,0xc002a1b6
c0019116:	52                   	push   edx
c0019117:	52                   	push   edx
c0019118:	50                   	push   eax
c0019119:	68 46 b9 02 c0       	push   0xc002b946
c001911e:	e8 e6 9d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0019123:	83 c4 18             	add    esp,0x18
c0019126:	5b                   	pop    ebx
c0019127:	c3                   	ret    

c0019128 <CPU::detectFeatures()>:
c0019128:	55                   	push   ebp
c0019129:	57                   	push   edi
c001912a:	56                   	push   esi
c001912b:	53                   	push   ebx
c001912c:	83 ec 50             	sub    esp,0x50
c001912f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019133:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001913d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019144:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001914a:	6a 0d                	push   0xd
c001914c:	6a 00                	push   0x0
c001914e:	57                   	push   edi
c001914f:	e8 2c 76 fe ff       	call   c0000780 <memset>
c0019154:	83 c4 10             	add    esp,0x10
c0019157:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001915c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019163:	0f 84 20 09 00 00    	je     c0019a89 <CPU::detectFeatures()+0x961>
c0019169:	83 ec 0c             	sub    esp,0xc
c001916c:	6a 10                	push   0x10
c001916e:	e8 f3 fb ff ff       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c0019173:	83 e0 01             	and    eax,0x1
c0019176:	8d 14 00             	lea    edx,[eax+eax*1]
c0019179:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001917f:	83 e0 fd             	and    eax,0xfffffffd
c0019182:	09 d0                	or     eax,edx
c0019184:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001918a:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019191:	e8 d0 fb ff ff       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c0019196:	83 e0 01             	and    eax,0x1
c0019199:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191a0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191a6:	83 e0 fb             	and    eax,0xfffffffb
c00191a9:	09 d0                	or     eax,edx
c00191ab:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00191b8:	e8 a9 fb ff ff       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c00191bd:	83 e0 01             	and    eax,0x1
c00191c0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191c7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191cd:	83 e0 f7             	and    eax,0xfffffff7
c00191d0:	09 d0                	or     eax,edx
c00191d2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d8:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191df:	e8 82 fb ff ff       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c00191e4:	83 e0 01             	and    eax,0x1
c00191e7:	c1 e0 04             	shl    eax,0x4
c00191ea:	88 c2                	mov    dl,al
c00191ec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f2:	83 e0 ef             	and    eax,0xffffffef
c00191f5:	09 d0                	or     eax,edx
c00191f7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191fd:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019204:	e8 5d fb ff ff       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c0019209:	83 e0 01             	and    eax,0x1
c001920c:	c1 e0 05             	shl    eax,0x5
c001920f:	88 c2                	mov    dl,al
c0019211:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019217:	83 e0 df             	and    eax,0xffffffdf
c001921a:	09 d0                	or     eax,edx
c001921c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019222:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019229:	e8 38 fb ff ff       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c001922e:	83 e0 01             	and    eax,0x1
c0019231:	8d 14 00             	lea    edx,[eax+eax*1]
c0019234:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001923a:	83 e0 fd             	and    eax,0xfffffffd
c001923d:	09 d0                	or     eax,edx
c001923f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019245:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001924c:	e8 15 fb ff ff       	call   c0018d66 <CPU::cpuidCheckEDX(unsigned int)>
c0019251:	83 e0 01             	and    eax,0x1
c0019254:	c1 e0 06             	shl    eax,0x6
c0019257:	88 c2                	mov    dl,al
c0019259:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001925f:	83 e0 bf             	and    eax,0xffffffbf
c0019262:	09 d0                	or     eax,edx
c0019264:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001926a:	58                   	pop    eax
c001926b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001926f:	56                   	push   esi
c0019270:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019274:	55                   	push   ebp
c0019275:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019279:	50                   	push   eax
c001927a:	8d 54 24 28          	lea    edx,[esp+0x28]
c001927e:	52                   	push   edx
c001927f:	6a 00                	push   0x0
c0019281:	e8 5c fa ff ff       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019286:	83 c4 1c             	add    esp,0x1c
c0019289:	6a 04                	push   0x4
c001928b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001928f:	50                   	push   eax
c0019290:	57                   	push   edi
c0019291:	e8 b6 74 fe ff       	call   c000074c <memcpy>
c0019296:	83 c4 0c             	add    esp,0xc
c0019299:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001929f:	6a 04                	push   0x4
c00192a1:	56                   	push   esi
c00192a2:	50                   	push   eax
c00192a3:	e8 a4 74 fe ff       	call   c000074c <memcpy>
c00192a8:	83 c4 0c             	add    esp,0xc
c00192ab:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00192b1:	6a 04                	push   0x4
c00192b3:	55                   	push   ebp
c00192b4:	50                   	push   eax
c00192b5:	e8 92 74 fe ff       	call   c000074c <memcpy>
c00192ba:	58                   	pop    eax
c00192bb:	5a                   	pop    edx
c00192bc:	68 5d b9 02 c0       	push   0xc002b95d
c00192c1:	57                   	push   edi
c00192c2:	e8 01 76 fe ff       	call   c00008c8 <strcmp>
c00192c7:	83 c4 10             	add    esp,0x10
c00192ca:	85 c0                	test   eax,eax
c00192cc:	75 0f                	jne    c00192dd <CPU::detectFeatures()+0x1b5>
c00192ce:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00192d8:	e9 22 02 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c00192dd:	50                   	push   eax
c00192de:	50                   	push   eax
c00192df:	68 6a b9 02 c0       	push   0xc002b96a
c00192e4:	57                   	push   edi
c00192e5:	e8 de 75 fe ff       	call   c00008c8 <strcmp>
c00192ea:	83 c4 10             	add    esp,0x10
c00192ed:	85 c0                	test   eax,eax
c00192ef:	74 dd                	je     c00192ce <CPU::detectFeatures()+0x1a6>
c00192f1:	51                   	push   ecx
c00192f2:	51                   	push   ecx
c00192f3:	68 77 b9 02 c0       	push   0xc002b977
c00192f8:	57                   	push   edi
c00192f9:	e8 ca 75 fe ff       	call   c00008c8 <strcmp>
c00192fe:	83 c4 10             	add    esp,0x10
c0019301:	85 c0                	test   eax,eax
c0019303:	74 2a                	je     c001932f <CPU::detectFeatures()+0x207>
c0019305:	52                   	push   edx
c0019306:	52                   	push   edx
c0019307:	68 84 b9 02 c0       	push   0xc002b984
c001930c:	57                   	push   edi
c001930d:	e8 b6 75 fe ff       	call   c00008c8 <strcmp>
c0019312:	83 c4 10             	add    esp,0x10
c0019315:	85 c0                	test   eax,eax
c0019317:	74 16                	je     c001932f <CPU::detectFeatures()+0x207>
c0019319:	50                   	push   eax
c001931a:	50                   	push   eax
c001931b:	68 91 b9 02 c0       	push   0xc002b991
c0019320:	57                   	push   edi
c0019321:	e8 a2 75 fe ff       	call   c00008c8 <strcmp>
c0019326:	83 c4 10             	add    esp,0x10
c0019329:	85 c0                	test   eax,eax
c001932b:	74 48                	je     c0019375 <CPU::detectFeatures()+0x24d>
c001932d:	eb 0f                	jmp    c001933e <CPU::detectFeatures()+0x216>
c001932f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019339:	e9 c1 01 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c001933e:	50                   	push   eax
c001933f:	50                   	push   eax
c0019340:	68 9e b9 02 c0       	push   0xc002b99e
c0019345:	57                   	push   edi
c0019346:	e8 7d 75 fe ff       	call   c00008c8 <strcmp>
c001934b:	83 c4 10             	add    esp,0x10
c001934e:	85 c0                	test   eax,eax
c0019350:	74 23                	je     c0019375 <CPU::detectFeatures()+0x24d>
c0019352:	50                   	push   eax
c0019353:	50                   	push   eax
c0019354:	68 ab b9 02 c0       	push   0xc002b9ab
c0019359:	57                   	push   edi
c001935a:	e8 69 75 fe ff       	call   c00008c8 <strcmp>
c001935f:	83 c4 10             	add    esp,0x10
c0019362:	85 c0                	test   eax,eax
c0019364:	75 1e                	jne    c0019384 <CPU::detectFeatures()+0x25c>
c0019366:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019370:	e9 8a 01 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c0019375:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001937f:	e9 7b 01 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c0019384:	50                   	push   eax
c0019385:	50                   	push   eax
c0019386:	68 b8 b9 02 c0       	push   0xc002b9b8
c001938b:	57                   	push   edi
c001938c:	e8 37 75 fe ff       	call   c00008c8 <strcmp>
c0019391:	83 c4 10             	add    esp,0x10
c0019394:	85 c0                	test   eax,eax
c0019396:	75 0f                	jne    c00193a7 <CPU::detectFeatures()+0x27f>
c0019398:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193a2:	e9 58 01 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c00193a7:	50                   	push   eax
c00193a8:	50                   	push   eax
c00193a9:	68 77 b9 02 c0       	push   0xc002b977
c00193ae:	57                   	push   edi
c00193af:	e8 14 75 fe ff       	call   c00008c8 <strcmp>
c00193b4:	83 c4 10             	add    esp,0x10
c00193b7:	85 c0                	test   eax,eax
c00193b9:	75 0f                	jne    c00193ca <CPU::detectFeatures()+0x2a2>
c00193bb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193c5:	e9 35 01 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c00193ca:	50                   	push   eax
c00193cb:	50                   	push   eax
c00193cc:	68 c5 b9 02 c0       	push   0xc002b9c5
c00193d1:	57                   	push   edi
c00193d2:	e8 f1 74 fe ff       	call   c00008c8 <strcmp>
c00193d7:	83 c4 10             	add    esp,0x10
c00193da:	85 c0                	test   eax,eax
c00193dc:	75 0f                	jne    c00193ed <CPU::detectFeatures()+0x2c5>
c00193de:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193e8:	e9 12 01 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c00193ed:	51                   	push   ecx
c00193ee:	51                   	push   ecx
c00193ef:	68 d2 b9 02 c0       	push   0xc002b9d2
c00193f4:	57                   	push   edi
c00193f5:	e8 ce 74 fe ff       	call   c00008c8 <strcmp>
c00193fa:	83 c4 10             	add    esp,0x10
c00193fd:	85 c0                	test   eax,eax
c00193ff:	75 0f                	jne    c0019410 <CPU::detectFeatures()+0x2e8>
c0019401:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001940b:	e9 ef 00 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c0019410:	52                   	push   edx
c0019411:	52                   	push   edx
c0019412:	68 df b9 02 c0       	push   0xc002b9df
c0019417:	57                   	push   edi
c0019418:	e8 ab 74 fe ff       	call   c00008c8 <strcmp>
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	85 c0                	test   eax,eax
c0019422:	75 0f                	jne    c0019433 <CPU::detectFeatures()+0x30b>
c0019424:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001942e:	e9 cc 00 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c0019433:	50                   	push   eax
c0019434:	50                   	push   eax
c0019435:	68 ec b9 02 c0       	push   0xc002b9ec
c001943a:	57                   	push   edi
c001943b:	e8 88 74 fe ff       	call   c00008c8 <strcmp>
c0019440:	83 c4 10             	add    esp,0x10
c0019443:	85 c0                	test   eax,eax
c0019445:	75 0f                	jne    c0019456 <CPU::detectFeatures()+0x32e>
c0019447:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019451:	e9 a9 00 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c0019456:	50                   	push   eax
c0019457:	50                   	push   eax
c0019458:	68 f9 b9 02 c0       	push   0xc002b9f9
c001945d:	57                   	push   edi
c001945e:	e8 65 74 fe ff       	call   c00008c8 <strcmp>
c0019463:	83 c4 10             	add    esp,0x10
c0019466:	85 c0                	test   eax,eax
c0019468:	75 0f                	jne    c0019479 <CPU::detectFeatures()+0x351>
c001946a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019474:	e9 86 00 00 00       	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c0019479:	50                   	push   eax
c001947a:	50                   	push   eax
c001947b:	68 06 ba 02 c0       	push   0xc002ba06
c0019480:	57                   	push   edi
c0019481:	e8 42 74 fe ff       	call   c00008c8 <strcmp>
c0019486:	83 c4 10             	add    esp,0x10
c0019489:	85 c0                	test   eax,eax
c001948b:	75 0c                	jne    c0019499 <CPU::detectFeatures()+0x371>
c001948d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019497:	eb 66                	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c0019499:	50                   	push   eax
c001949a:	50                   	push   eax
c001949b:	68 13 ba 02 c0       	push   0xc002ba13
c00194a0:	57                   	push   edi
c00194a1:	e8 22 74 fe ff       	call   c00008c8 <strcmp>
c00194a6:	83 c4 10             	add    esp,0x10
c00194a9:	85 c0                	test   eax,eax
c00194ab:	75 0c                	jne    c00194b9 <CPU::detectFeatures()+0x391>
c00194ad:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00194b7:	eb 46                	jmp    c00194ff <CPU::detectFeatures()+0x3d7>
c00194b9:	50                   	push   eax
c00194ba:	50                   	push   eax
c00194bb:	68 20 ba 02 c0       	push   0xc002ba20
c00194c0:	57                   	push   edi
c00194c1:	e8 02 74 fe ff       	call   c00008c8 <strcmp>
c00194c6:	83 c4 10             	add    esp,0x10
c00194c9:	85 c0                	test   eax,eax
c00194cb:	74 e0                	je     c00194ad <CPU::detectFeatures()+0x385>
c00194cd:	50                   	push   eax
c00194ce:	50                   	push   eax
c00194cf:	68 2d ba 02 c0       	push   0xc002ba2d
c00194d4:	57                   	push   edi
c00194d5:	e8 ee 73 fe ff       	call   c00008c8 <strcmp>
c00194da:	83 c4 10             	add    esp,0x10
c00194dd:	85 c0                	test   eax,eax
c00194df:	74 cc                	je     c00194ad <CPU::detectFeatures()+0x385>
c00194e1:	51                   	push   ecx
c00194e2:	51                   	push   ecx
c00194e3:	68 3a ba 02 c0       	push   0xc002ba3a
c00194e8:	57                   	push   edi
c00194e9:	e8 da 73 fe ff       	call   c00008c8 <strcmp>
c00194ee:	83 c4 10             	add    esp,0x10
c00194f1:	85 c0                	test   eax,eax
c00194f3:	74 b8                	je     c00194ad <CPU::detectFeatures()+0x385>
c00194f5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194ff:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019504:	0f 86 be 00 00 00    	jbe    c00195c8 <CPU::detectFeatures()+0x4a0>
c001950a:	83 ec 0c             	sub    esp,0xc
c001950d:	68 80 00 00 00       	push   0x80
c0019512:	e8 ab f8 ff ff       	call   c0018dc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019517:	83 e0 01             	and    eax,0x1
c001951a:	c1 e0 06             	shl    eax,0x6
c001951d:	88 c2                	mov    dl,al
c001951f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019525:	83 e0 bf             	and    eax,0xffffffbf
c0019528:	09 d0                	or     eax,edx
c001952a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019530:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019537:	e8 86 f8 ff ff       	call   c0018dc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001953c:	83 e0 01             	and    eax,0x1
c001953f:	c1 e0 04             	shl    eax,0x4
c0019542:	88 c2                	mov    dl,al
c0019544:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001954a:	83 e0 ef             	and    eax,0xffffffef
c001954d:	09 d0                	or     eax,edx
c001954f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019555:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001955c:	e8 61 f8 ff ff       	call   c0018dc2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019561:	c1 e0 07             	shl    eax,0x7
c0019564:	88 c2                	mov    dl,al
c0019566:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001956c:	83 e0 7f             	and    eax,0x7f
c001956f:	09 d0                	or     eax,edx
c0019571:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019577:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001957e:	e8 6d f8 ff ff       	call   c0018df0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019583:	83 e0 01             	and    eax,0x1
c0019586:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001958d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019593:	83 e0 f7             	and    eax,0xfffffff7
c0019596:	09 d0                	or     eax,edx
c0019598:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001959e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195a5:	e8 46 f8 ff ff       	call   c0018df0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195aa:	83 c4 10             	add    esp,0x10
c00195ad:	83 e0 01             	and    eax,0x1
c00195b0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00195b7:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00195bd:	83 e0 fb             	and    eax,0xfffffffb
c00195c0:	09 d0                	or     eax,edx
c00195c2:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195c8:	83 ec 0c             	sub    esp,0xc
c00195cb:	56                   	push   esi
c00195cc:	55                   	push   ebp
c00195cd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195d1:	57                   	push   edi
c00195d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195d6:	50                   	push   eax
c00195d7:	6a 01                	push   0x1
c00195d9:	e8 04 f7 ff ff       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195de:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195e2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195e8:	88 ca                	mov    dl,cl
c00195ea:	83 e0 f0             	and    eax,0xfffffff0
c00195ed:	83 e2 0f             	and    edx,0xf
c00195f0:	09 d0                	or     eax,edx
c00195f2:	88 ca                	mov    dl,cl
c00195f4:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195fa:	c0 ea 04             	shr    dl,0x4
c00195fd:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019601:	0f b6 c2             	movzx  eax,dl
c0019604:	83 c4 20             	add    esp,0x20
c0019607:	c1 e0 06             	shl    eax,0x6
c001960a:	89 c5                	mov    ebp,eax
c001960c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019612:	66 25 3f c0          	and    ax,0xc03f
c0019616:	09 e8                	or     eax,ebp
c0019618:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001961f:	89 c8                	mov    eax,ecx
c0019621:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019627:	c1 e8 08             	shr    eax,0x8
c001962a:	83 e2 3f             	and    edx,0x3f
c001962d:	83 e0 0f             	and    eax,0xf
c0019630:	89 c5                	mov    ebp,eax
c0019632:	c1 e5 06             	shl    ebp,0x6
c0019635:	09 d5                	or     ebp,edx
c0019637:	89 ea                	mov    edx,ebp
c0019639:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001963f:	88 c2                	mov    dl,al
c0019641:	c0 ea 02             	shr    dl,0x2
c0019644:	89 d5                	mov    ebp,edx
c0019646:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001964c:	83 e2 c0             	and    edx,0xffffffc0
c001964f:	09 d5                	or     ebp,edx
c0019651:	89 ea                	mov    edx,ebp
c0019653:	89 cd                	mov    ebp,ecx
c0019655:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001965b:	c1 ed 0c             	shr    ebp,0xc
c001965e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019664:	83 e5 03             	and    ebp,0x3
c0019667:	83 e2 cf             	and    edx,0xffffffcf
c001966a:	c1 e5 04             	shl    ebp,0x4
c001966d:	09 d5                	or     ebp,edx
c001966f:	3c 06                	cmp    al,0x6
c0019671:	89 ea                	mov    edx,ebp
c0019673:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019679:	74 04                	je     c001967f <CPU::detectFeatures()+0x557>
c001967b:	3c 0f                	cmp    al,0xf
c001967d:	75 5c                	jne    c00196db <CPU::detectFeatures()+0x5b3>
c001967f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019683:	89 cd                	mov    ebp,ecx
c0019685:	c1 ed 10             	shr    ebp,0x10
c0019688:	c1 e5 04             	shl    ebp,0x4
c001968b:	09 ea                	or     edx,ebp
c001968d:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019693:	0f b6 d2             	movzx  edx,dl
c0019696:	66 81 e5 3f c0       	and    bp,0xc03f
c001969b:	c1 e2 06             	shl    edx,0x6
c001969e:	09 ea                	or     edx,ebp
c00196a0:	3c 0f                	cmp    al,0xf
c00196a2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196a9:	75 30                	jne    c00196db <CPU::detectFeatures()+0x5b3>
c00196ab:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00196b1:	c1 e9 14             	shr    ecx,0x14
c00196b4:	83 e0 3f             	and    eax,0x3f
c00196b7:	83 c1 0f             	add    ecx,0xf
c00196ba:	88 ca                	mov    dl,cl
c00196bc:	c0 e9 02             	shr    cl,0x2
c00196bf:	c1 e2 06             	shl    edx,0x6
c00196c2:	09 d0                	or     eax,edx
c00196c4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196ca:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196d0:	83 e0 c0             	and    eax,0xffffffc0
c00196d3:	09 c1                	or     ecx,eax
c00196d5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00196db:	83 ec 0c             	sub    esp,0xc
c00196de:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196e5:	56                   	push   esi
c00196e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196ea:	50                   	push   eax
c00196eb:	57                   	push   edi
c00196ec:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196f0:	55                   	push   ebp
c00196f1:	68 00 00 00 80       	push   0x80000000
c00196f6:	e8 e7 f5 ff ff       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196fb:	83 c4 20             	add    esp,0x20
c00196fe:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019706:	8d 44 24 18          	lea    eax,[esp+0x18]
c001970a:	76 1e                	jbe    c001972a <CPU::detectFeatures()+0x602>
c001970c:	83 ec 0c             	sub    esp,0xc
c001970f:	56                   	push   esi
c0019710:	50                   	push   eax
c0019711:	57                   	push   edi
c0019712:	55                   	push   ebp
c0019713:	68 01 00 00 80       	push   0x80000001
c0019718:	e8 c5 f5 ff ff       	call   c0018ce2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001971d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019727:	83 c4 20             	add    esp,0x20
c001972a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019730:	83 f8 01             	cmp    eax,0x1
c0019733:	75 6f                	jne    c00197a4 <CPU::detectFeatures()+0x67c>
c0019735:	51                   	push   ecx
c0019736:	51                   	push   ecx
c0019737:	68 46 ba 02 c0       	push   0xc002ba46
c001973c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019740:	56                   	push   esi
c0019741:	e8 f6 70 fe ff       	call   c000083c <strcpy>
c0019746:	5f                   	pop    edi
c0019747:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001974d:	5d                   	pop    ebp
c001974e:	66 c1 e8 06          	shr    ax,0x6
c0019752:	0f b6 c0             	movzx  eax,al
c0019755:	50                   	push   eax
c0019756:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001975c:	c1 e8 0e             	shr    eax,0xe
c001975f:	0f b6 c0             	movzx  eax,al
c0019762:	50                   	push   eax
c0019763:	e8 24 f2 ff ff       	call   c001898c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019768:	5a                   	pop    edx
c0019769:	59                   	pop    ecx
c001976a:	50                   	push   eax
c001976b:	56                   	push   esi
c001976c:	e8 0b 72 fe ff       	call   c000097c <strcat>
c0019771:	5f                   	pop    edi
c0019772:	5d                   	pop    ebp
c0019773:	56                   	push   esi
c0019774:	53                   	push   ebx
c0019775:	e8 9e ad ff ff       	call   c0014518 <Device::setName(char const*)>
c001977a:	58                   	pop    eax
c001977b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019781:	5a                   	pop    edx
c0019782:	68 4d ba 02 c0       	push   0xc002ba4d
c0019787:	50                   	push   eax
c0019788:	e8 3b 71 fe ff       	call   c00008c8 <strcmp>
c001978d:	83 c4 10             	add    esp,0x10
c0019790:	85 c0                	test   eax,eax
c0019792:	0f 85 71 03 00 00    	jne    c0019b09 <CPU::detectFeatures()+0x9e1>
c0019798:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001979f:	e9 65 03 00 00       	jmp    c0019b09 <CPU::detectFeatures()+0x9e1>
c00197a4:	83 f8 02             	cmp    eax,0x2
c00197a7:	0f 85 b5 00 00 00    	jne    c0019862 <CPU::detectFeatures()+0x73a>
c00197ad:	57                   	push   edi
c00197ae:	57                   	push   edi
c00197af:	68 5f ba 02 c0       	push   0xc002ba5f
c00197b4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197b8:	56                   	push   esi
c00197b9:	e8 7e 70 fe ff       	call   c000083c <strcpy>
c00197be:	5d                   	pop    ebp
c00197bf:	58                   	pop    eax
c00197c0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197c6:	66 c1 e8 06          	shr    ax,0x6
c00197ca:	0f b6 c0             	movzx  eax,al
c00197cd:	50                   	push   eax
c00197ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197d4:	c1 e8 0e             	shr    eax,0xe
c00197d7:	0f b6 c0             	movzx  eax,al
c00197da:	50                   	push   eax
c00197db:	e8 18 f0 ff ff       	call   c00187f8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197e0:	5a                   	pop    edx
c00197e1:	59                   	pop    ecx
c00197e2:	50                   	push   eax
c00197e3:	56                   	push   esi
c00197e4:	e8 93 71 fe ff       	call   c000097c <strcat>
c00197e9:	5f                   	pop    edi
c00197ea:	5d                   	pop    ebp
c00197eb:	56                   	push   esi
c00197ec:	53                   	push   ebx
c00197ed:	e8 26 ad ff ff       	call   c0014518 <Device::setName(char const*)>
c00197f2:	58                   	pop    eax
c00197f3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197f9:	5a                   	pop    edx
c00197fa:	68 64 ba 02 c0       	push   0xc002ba64
c00197ff:	50                   	push   eax
c0019800:	e8 c3 70 fe ff       	call   c00008c8 <strcmp>
c0019805:	83 c4 10             	add    esp,0x10
c0019808:	85 c0                	test   eax,eax
c001980a:	75 20                	jne    c001982c <CPU::detectFeatures()+0x704>
c001980c:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0019812:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019818:	a8 01                	test   al,0x1
c001981a:	74 10                	je     c001982c <CPU::detectFeatures()+0x704>
c001981c:	83 e0 fe             	and    eax,0xfffffffe
c001981f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019825:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001982c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019832:	c1 e8 0e             	shr    eax,0xe
c0019835:	3c 05                	cmp    al,0x5
c0019837:	0f 85 cc 02 00 00    	jne    c0019b09 <CPU::detectFeatures()+0x9e1>
c001983d:	56                   	push   esi
c001983e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019844:	83 e0 0f             	and    eax,0xf
c0019847:	50                   	push   eax
c0019848:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001984e:	66 c1 e8 06          	shr    ax,0x6
c0019852:	0f b6 c0             	movzx  eax,al
c0019855:	50                   	push   eax
c0019856:	6a 05                	push   0x5
c0019858:	e8 11 f4 ff ff       	call   c0018c6e <CPU::AMD_K6_writeback(int, int, int)>
c001985d:	e9 1f 02 00 00       	jmp    c0019a81 <CPU::detectFeatures()+0x959>
c0019862:	8d 50 fd             	lea    edx,[eax-0x3]
c0019865:	83 fa 01             	cmp    edx,0x1
c0019868:	76 09                	jbe    c0019873 <CPU::detectFeatures()+0x74b>
c001986a:	83 f8 06             	cmp    eax,0x6
c001986d:	0f 85 91 01 00 00    	jne    c0019a04 <CPU::detectFeatures()+0x8dc>
c0019873:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019879:	c1 ea 0e             	shr    edx,0xe
c001987c:	80 fa 05             	cmp    dl,0x5
c001987f:	75 7b                	jne    c00198fc <CPU::detectFeatures()+0x7d4>
c0019881:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019887:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001988c:	66 81 fa 00 01       	cmp    dx,0x100
c0019891:	75 0c                	jne    c001989f <CPU::detectFeatures()+0x777>
c0019893:	51                   	push   ecx
c0019894:	51                   	push   ecx
c0019895:	68 6b ba 02 c0       	push   0xc002ba6b
c001989a:	e9 dc 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c001989f:	66 81 fa 00 02       	cmp    dx,0x200
c00198a4:	75 0c                	jne    c00198b2 <CPU::detectFeatures()+0x78a>
c00198a6:	52                   	push   edx
c00198a7:	52                   	push   edx
c00198a8:	68 7e ba 02 c0       	push   0xc002ba7e
c00198ad:	e9 c9 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c00198b2:	66 81 fa 40 02       	cmp    dx,0x240
c00198b7:	75 0c                	jne    c00198c5 <CPU::detectFeatures()+0x79d>
c00198b9:	50                   	push   eax
c00198ba:	50                   	push   eax
c00198bb:	68 90 ba 02 c0       	push   0xc002ba90
c00198c0:	e9 b6 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c00198c5:	83 f8 06             	cmp    eax,0x6
c00198c8:	75 0c                	jne    c00198d6 <CPU::detectFeatures()+0x7ae>
c00198ca:	50                   	push   eax
c00198cb:	50                   	push   eax
c00198cc:	68 a2 ba 02 c0       	push   0xc002baa2
c00198d1:	e9 a5 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c00198d6:	83 f8 04             	cmp    eax,0x4
c00198d9:	75 0c                	jne    c00198e7 <CPU::detectFeatures()+0x7bf>
c00198db:	50                   	push   eax
c00198dc:	50                   	push   eax
c00198dd:	68 ae ba 02 c0       	push   0xc002baae
c00198e2:	e9 94 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c00198e7:	83 f8 03             	cmp    eax,0x3
c00198ea:	0f 85 19 02 00 00    	jne    c0019b09 <CPU::detectFeatures()+0x9e1>
c00198f0:	50                   	push   eax
c00198f1:	50                   	push   eax
c00198f2:	68 b6 ba 02 c0       	push   0xc002bab6
c00198f7:	e9 7f 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c00198fc:	80 fa 06             	cmp    dl,0x6
c00198ff:	0f 85 db 00 00 00    	jne    c00199e0 <CPU::detectFeatures()+0x8b8>
c0019905:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001990b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019910:	66 81 fa 80 01       	cmp    dx,0x180
c0019915:	75 0c                	jne    c0019923 <CPU::detectFeatures()+0x7fb>
c0019917:	50                   	push   eax
c0019918:	50                   	push   eax
c0019919:	68 c1 ba 02 c0       	push   0xc002bac1
c001991e:	e9 58 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019923:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019929:	66 f7 c1 80 ff       	test   cx,0xff80
c001992e:	75 0c                	jne    c001993c <CPU::detectFeatures()+0x814>
c0019930:	50                   	push   eax
c0019931:	50                   	push   eax
c0019932:	68 d1 ba 02 c0       	push   0xc002bad1
c0019937:	e9 3f 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c001993c:	66 81 fa 40 02       	cmp    dx,0x240
c0019941:	75 0c                	jne    c001994f <CPU::detectFeatures()+0x827>
c0019943:	55                   	push   ebp
c0019944:	55                   	push   ebp
c0019945:	68 d8 ba 02 c0       	push   0xc002bad8
c001994a:	e9 2c 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c001994f:	66 81 fa 80 02       	cmp    dx,0x280
c0019954:	75 0c                	jne    c0019962 <CPU::detectFeatures()+0x83a>
c0019956:	57                   	push   edi
c0019957:	57                   	push   edi
c0019958:	68 e1 ba 02 c0       	push   0xc002bae1
c001995d:	e9 19 01 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019962:	66 81 fa 40 03       	cmp    dx,0x340
c0019967:	74 ed                	je     c0019956 <CPU::detectFeatures()+0x82e>
c0019969:	66 81 fa c0 03       	cmp    dx,0x3c0
c001996e:	75 0c                	jne    c001997c <CPU::detectFeatures()+0x854>
c0019970:	56                   	push   esi
c0019971:	56                   	push   esi
c0019972:	68 e8 ba 02 c0       	push   0xc002bae8
c0019977:	e9 ff 00 00 00       	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c001997c:	83 f8 06             	cmp    eax,0x6
c001997f:	0f 84 45 ff ff ff    	je     c00198ca <CPU::detectFeatures()+0x7a2>
c0019985:	83 f8 04             	cmp    eax,0x4
c0019988:	0f 84 4d ff ff ff    	je     c00198db <CPU::detectFeatures()+0x7b3>
c001998e:	83 f8 03             	cmp    eax,0x3
c0019991:	0f 85 72 01 00 00    	jne    c0019b09 <CPU::detectFeatures()+0x9e1>
c0019997:	51                   	push   ecx
c0019998:	51                   	push   ecx
c0019999:	68 f1 ba 02 c0       	push   0xc002baf1
c001999e:	53                   	push   ebx
c001999f:	e8 74 ab ff ff       	call   c0014518 <Device::setName(char const*)>
c00199a4:	b1 c1                	mov    cl,0xc1
c00199a6:	88 c8                	mov    al,cl
c00199a8:	e6 22                	out    0x22,al
c00199aa:	e4 23                	in     al,0x23
c00199ac:	88 c2                	mov    dl,al
c00199ae:	88 c8                	mov    al,cl
c00199b0:	e6 22                	out    0x22,al
c00199b2:	88 d0                	mov    al,dl
c00199b4:	83 c8 10             	or     eax,0x10
c00199b7:	e6 23                	out    0x23,al
c00199b9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00199c0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00199c3:	89 d0                	mov    eax,edx
c00199c5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199cb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199cf:	40                   	inc    eax
c00199d0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199d6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199db:	e9 a1 00 00 00       	jmp    c0019a81 <CPU::detectFeatures()+0x959>
c00199e0:	83 f8 06             	cmp    eax,0x6
c00199e3:	0f 84 e1 fe ff ff    	je     c00198ca <CPU::detectFeatures()+0x7a2>
c00199e9:	83 f8 04             	cmp    eax,0x4
c00199ec:	0f 84 e9 fe ff ff    	je     c00198db <CPU::detectFeatures()+0x7b3>
c00199f2:	83 f8 03             	cmp    eax,0x3
c00199f5:	0f 85 0e 01 00 00    	jne    c0019b09 <CPU::detectFeatures()+0x9e1>
c00199fb:	52                   	push   edx
c00199fc:	52                   	push   edx
c00199fd:	68 fc ba 02 c0       	push   0xc002bafc
c0019a02:	eb 77                	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019a04:	83 f8 07             	cmp    eax,0x7
c0019a07:	75 09                	jne    c0019a12 <CPU::detectFeatures()+0x8ea>
c0019a09:	50                   	push   eax
c0019a0a:	50                   	push   eax
c0019a0b:	68 06 bb 02 c0       	push   0xc002bb06
c0019a10:	eb 69                	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019a12:	83 f8 0a             	cmp    eax,0xa
c0019a15:	75 09                	jne    c0019a20 <CPU::detectFeatures()+0x8f8>
c0019a17:	50                   	push   eax
c0019a18:	50                   	push   eax
c0019a19:	68 11 bb 02 c0       	push   0xc002bb11
c0019a1e:	eb 5b                	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019a20:	83 f8 0b             	cmp    eax,0xb
c0019a23:	75 09                	jne    c0019a2e <CPU::detectFeatures()+0x906>
c0019a25:	50                   	push   eax
c0019a26:	50                   	push   eax
c0019a27:	68 19 bb 02 c0       	push   0xc002bb19
c0019a2c:	eb 4d                	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019a2e:	83 f8 08             	cmp    eax,0x8
c0019a31:	75 09                	jne    c0019a3c <CPU::detectFeatures()+0x914>
c0019a33:	50                   	push   eax
c0019a34:	50                   	push   eax
c0019a35:	68 22 bb 02 c0       	push   0xc002bb22
c0019a3a:	eb 3f                	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019a3c:	83 f8 09             	cmp    eax,0x9
c0019a3f:	75 09                	jne    c0019a4a <CPU::detectFeatures()+0x922>
c0019a41:	50                   	push   eax
c0019a42:	50                   	push   eax
c0019a43:	68 2a bb 02 c0       	push   0xc002bb2a
c0019a48:	eb 31                	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019a4a:	83 f8 05             	cmp    eax,0x5
c0019a4d:	75 09                	jne    c0019a58 <CPU::detectFeatures()+0x930>
c0019a4f:	50                   	push   eax
c0019a50:	50                   	push   eax
c0019a51:	68 32 bb 02 c0       	push   0xc002bb32
c0019a56:	eb 23                	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019a58:	83 f8 0c             	cmp    eax,0xc
c0019a5b:	75 09                	jne    c0019a66 <CPU::detectFeatures()+0x93e>
c0019a5d:	55                   	push   ebp
c0019a5e:	55                   	push   ebp
c0019a5f:	68 40 bb 02 c0       	push   0xc002bb40
c0019a64:	eb 15                	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019a66:	83 f8 0d             	cmp    eax,0xd
c0019a69:	75 09                	jne    c0019a74 <CPU::detectFeatures()+0x94c>
c0019a6b:	57                   	push   edi
c0019a6c:	57                   	push   edi
c0019a6d:	68 4b bb 02 c0       	push   0xc002bb4b
c0019a72:	eb 07                	jmp    c0019a7b <CPU::detectFeatures()+0x953>
c0019a74:	56                   	push   esi
c0019a75:	56                   	push   esi
c0019a76:	68 5f bb 02 c0       	push   0xc002bb5f
c0019a7b:	53                   	push   ebx
c0019a7c:	e8 97 aa ff ff       	call   c0014518 <Device::setName(char const*)>
c0019a81:	83 c4 10             	add    esp,0x10
c0019a84:	e9 80 00 00 00       	jmp    c0019b09 <CPU::detectFeatures()+0x9e1>
c0019a89:	51                   	push   ecx
c0019a8a:	51                   	push   ecx
c0019a8b:	68 ab b9 02 c0       	push   0xc002b9ab
c0019a90:	57                   	push   edi
c0019a91:	e8 a6 6d fe ff       	call   c000083c <strcpy>
c0019a96:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019aa0:	e8 09 68 fe ff       	call   c00002ae <is486>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	85 c0                	test   eax,eax
c0019aaa:	74 2b                	je     c0019ad7 <CPU::detectFeatures()+0x9af>
c0019aac:	52                   	push   edx
c0019aad:	52                   	push   edx
c0019aae:	68 6b bb 02 c0       	push   0xc002bb6b
c0019ab3:	53                   	push   ebx
c0019ab4:	e8 5f aa ff ff       	call   c0014518 <Device::setName(char const*)>
c0019ab9:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019ac0:	0f 20 c0             	mov    eax,cr0
c0019ac3:	83 e0 14             	and    eax,0x14
c0019ac6:	83 c4 10             	add    esp,0x10
c0019ac9:	83 f8 04             	cmp    eax,0x4
c0019acc:	75 1f                	jne    c0019aed <CPU::detectFeatures()+0x9c5>
c0019ace:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019ad5:	eb 32                	jmp    c0019b09 <CPU::detectFeatures()+0x9e1>
c0019ad7:	50                   	push   eax
c0019ad8:	50                   	push   eax
c0019ad9:	68 76 bb 02 c0       	push   0xc002bb76
c0019ade:	53                   	push   ebx
c0019adf:	e8 34 aa ff ff       	call   c0014518 <Device::setName(char const*)>
c0019ae4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019aeb:	eb d3                	jmp    c0019ac0 <CPU::detectFeatures()+0x998>
c0019aed:	e8 97 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019af2:	83 e0 01             	and    eax,0x1
c0019af5:	8d 14 00             	lea    edx,[eax+eax*1]
c0019af8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019afe:	83 e0 fd             	and    eax,0xfffffffd
c0019b01:	09 d0                	or     eax,edx
c0019b03:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b09:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b10:	83 c4 4c             	add    esp,0x4c
c0019b13:	5b                   	pop    ebx
c0019b14:	5e                   	pop    esi
c0019b15:	5f                   	pop    edi
c0019b16:	5d                   	pop    ebp
c0019b17:	c3                   	ret    

c0019b18 <CPU::setupSMEP()>:
c0019b18:	0f 20 e0             	mov    eax,cr4
c0019b1b:	0d 00 00 10 00       	or     eax,0x100000
c0019b20:	0f 22 e0             	mov    cr4,eax
c0019b23:	c3                   	ret    

c0019b24 <CPU::setupUMIP()>:
c0019b24:	0f 20 e0             	mov    eax,cr4
c0019b27:	80 cc 08             	or     ah,0x8
c0019b2a:	0f 22 e0             	mov    cr4,eax
c0019b2d:	c3                   	ret    

c0019b2e <CPU::setupTSC()>:
c0019b2e:	0f 20 e0             	mov    eax,cr4
c0019b31:	83 c8 04             	or     eax,0x4
c0019b34:	0f 22 e0             	mov    cr4,eax
c0019b37:	c3                   	ret    

c0019b38 <CPU::setupLargePages()>:
c0019b38:	0f 20 e0             	mov    eax,cr4
c0019b3b:	83 c8 10             	or     eax,0x10
c0019b3e:	0f 22 e0             	mov    cr4,eax
c0019b41:	c3                   	ret    

c0019b42 <CPU::setupPAT()>:
c0019b42:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0019b47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b4e:	74 2c                	je     c0019b7c <CPU::setupPAT()+0x3a>
c0019b50:	53                   	push   ebx
c0019b51:	83 ec 10             	sub    esp,0x10
c0019b54:	68 77 02 00 00       	push   0x277
c0019b59:	50                   	push   eax
c0019b5a:	e8 91 52 ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019b5f:	83 e2 f8             	and    edx,0xfffffff8
c0019b62:	83 ca 01             	or     edx,0x1
c0019b65:	52                   	push   edx
c0019b66:	50                   	push   eax
c0019b67:	68 77 02 00 00       	push   0x277
c0019b6c:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0019b72:	e8 a5 52 ff ff       	call   c000ee1c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b77:	83 c4 28             	add    esp,0x28
c0019b7a:	5b                   	pop    ebx
c0019b7b:	c3                   	ret    
c0019b7c:	c3                   	ret    
c0019b7d:	90                   	nop

c0019b7e <CPU::setupMTRR()>:
c0019b7e:	c3                   	ret    
c0019b7f:	90                   	nop

c0019b80 <CPU::setupGlobalPages()>:
c0019b80:	0f 20 e0             	mov    eax,cr4
c0019b83:	0c 80                	or     al,0x80
c0019b85:	0f 22 e0             	mov    cr4,eax
c0019b88:	c3                   	ret    
c0019b89:	90                   	nop

c0019b8a <CPU::allowUsermodeDataAccess()>:
c0019b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b8e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b95:	74 03                	je     c0019b9a <CPU::allowUsermodeDataAccess()+0x10>
c0019b97:	0f 01 cb             	stac   
c0019b9a:	c3                   	ret    
c0019b9b:	90                   	nop

c0019b9c <CPU::prohibitUsermodeDataAccess()>:
c0019b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ba0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ba7:	74 03                	je     c0019bac <CPU::prohibitUsermodeDataAccess()+0x10>
c0019ba9:	0f 01 ca             	clac   
c0019bac:	c3                   	ret    
c0019bad:	90                   	nop

c0019bae <CPU::setupSMAP()>:
c0019bae:	0f 20 e0             	mov    eax,cr4
c0019bb1:	0d 00 00 20 00       	or     eax,0x200000
c0019bb6:	0f 22 e0             	mov    cr4,eax
c0019bb9:	eb e1                	jmp    c0019b9c <CPU::prohibitUsermodeDataAccess()>
c0019bbb:	90                   	nop

c0019bbc <CPU::setupFeatures()>:
c0019bbc:	83 ec 0c             	sub    esp,0xc
c0019bbf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bc3:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019bca:	74 07                	je     c0019bd3 <CPU::setupFeatures()+0x17>
c0019bcc:	52                   	push   edx
c0019bcd:	e8 46 ff ff ff       	call   c0019b18 <CPU::setupSMEP()>
c0019bd2:	58                   	pop    eax
c0019bd3:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019bda:	74 07                	je     c0019be3 <CPU::setupFeatures()+0x27>
c0019bdc:	52                   	push   edx
c0019bdd:	e8 cc ff ff ff       	call   c0019bae <CPU::setupSMAP()>
c0019be2:	58                   	pop    eax
c0019be3:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019bea:	74 07                	je     c0019bf3 <CPU::setupFeatures()+0x37>
c0019bec:	52                   	push   edx
c0019bed:	e8 32 ff ff ff       	call   c0019b24 <CPU::setupUMIP()>
c0019bf2:	58                   	pop    eax
c0019bf3:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bfa:	74 07                	je     c0019c03 <CPU::setupFeatures()+0x47>
c0019bfc:	52                   	push   edx
c0019bfd:	e8 2c ff ff ff       	call   c0019b2e <CPU::setupTSC()>
c0019c02:	58                   	pop    eax
c0019c03:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c0a:	74 07                	je     c0019c13 <CPU::setupFeatures()+0x57>
c0019c0c:	52                   	push   edx
c0019c0d:	e8 26 ff ff ff       	call   c0019b38 <CPU::setupLargePages()>
c0019c12:	59                   	pop    ecx
c0019c13:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c1a:	74 07                	je     c0019c23 <CPU::setupFeatures()+0x67>
c0019c1c:	52                   	push   edx
c0019c1d:	e8 5e ff ff ff       	call   c0019b80 <CPU::setupGlobalPages()>
c0019c22:	58                   	pop    eax
c0019c23:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c2a:	74 0c                	je     c0019c38 <CPU::setupFeatures()+0x7c>
c0019c2c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c30:	83 c4 0c             	add    esp,0xc
c0019c33:	e9 0a ff ff ff       	jmp    c0019b42 <CPU::setupPAT()>
c0019c38:	83 c4 0c             	add    esp,0xc
c0019c3b:	c3                   	ret    

c0019c3c <CPU::open(int, int, void*)>:
c0019c3c:	57                   	push   edi
c0019c3d:	56                   	push   esi
c0019c3e:	53                   	push   ebx
c0019c3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c47:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c4d:	83 ec 0c             	sub    esp,0xc
c0019c50:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c56:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c5c:	50                   	push   eax
c0019c5d:	e8 7a 54 ff ff       	call   c000f0dc <GDT::setup()>
c0019c62:	83 c4 0c             	add    esp,0xc
c0019c65:	6a 00                	push   0x0
c0019c67:	68 ef be ad de       	push   0xdeadbeef
c0019c6c:	57                   	push   edi
c0019c6d:	e8 4a 78 ff ff       	call   c00114bc <TSS::setup(unsigned long, unsigned long)>
c0019c72:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c75:	e8 22 78 ff ff       	call   c001149c <TSS::flush()>
c0019c7a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c80:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c83:	e8 b0 56 ff ff       	call   c000f338 <IDT::setup()>
c0019c88:	b8 00 04 00 00       	mov    eax,0x400
c0019c8d:	0f 23 f8             	mov    db7,eax
c0019c90:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c9a:	e8 4e 62 ff ff       	call   c000feed <Phys::allocatePage()>
c0019c9f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ca5:	89 30                	mov    DWORD PTR [eax],esi
c0019ca7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019cad:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019cb0:	58                   	pop    eax
c0019cb1:	5a                   	pop    edx
c0019cb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cbc:	e8 79 89 ff ff       	call   c001263a <VAS::setCPUSpecific(unsigned long)>
c0019cc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cc4:	e8 5f f4 ff ff       	call   c0019128 <CPU::detectFeatures()>
c0019cc9:	e8 7c bc ff ff       	call   c001594a <setupInterruptController()>
c0019cce:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019cd4:	a1 20 e6 02 c0       	mov    eax,ds:0xc002e620
c0019cd9:	83 e0 10             	and    eax,0x10
c0019cdc:	83 f8 01             	cmp    eax,0x1
c0019cdf:	19 c0                	sbb    eax,eax
c0019ce1:	83 e0 46             	and    eax,0x46
c0019ce4:	83 c0 1e             	add    eax,0x1e
c0019ce7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cea:	e8 9f d1 ff ff       	call   c0016e8e <setupTimer(int)>
c0019cef:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019cf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cf8:	e8 bf fe ff ff       	call   c0019bbc <CPU::setupFeatures()>
c0019cfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d00:	e8 a7 f1 ff ff       	call   c0018eac <CPU::displayFeatures()>
c0019d05:	83 c4 10             	add    esp,0x10
c0019d08:	31 c0                	xor    eax,eax
c0019d0a:	5b                   	pop    ebx
c0019d0b:	5e                   	pop    esi
c0019d0c:	5f                   	pop    edi
c0019d0d:	c3                   	ret    

c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d0e:	57                   	push   edi
c0019d0f:	56                   	push   esi
c0019d10:	53                   	push   ebx
c0019d11:	51                   	push   ecx
c0019d12:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d16:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d19:	0f 02 c0             	lar    eax,ax
c0019d1c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d1f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d23:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d26:	88 ca                	mov    dl,cl
c0019d28:	c0 ea 06             	shr    dl,0x6
c0019d2b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d2f:	89 ca                	mov    edx,ecx
c0019d31:	66 c1 ea 03          	shr    dx,0x3
c0019d35:	83 e2 07             	and    edx,0x7
c0019d38:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d3d:	88 17                	mov    BYTE PTR [edi],dl
c0019d3f:	0f 84 a6 01 00 00    	je     c0019eeb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d45:	83 e1 07             	and    ecx,0x7
c0019d48:	80 f9 04             	cmp    cl,0x4
c0019d4b:	0f 84 98 00 00 00    	je     c0019de9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d51:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d56:	0f 95 c0             	setne  al
c0019d59:	80 f9 05             	cmp    cl,0x5
c0019d5c:	0f 95 c2             	setne  dl
c0019d5f:	08 c2                	or     dl,al
c0019d61:	74 79                	je     c0019ddc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d63:	84 c9                	test   cl,cl
c0019d65:	75 05                	jne    c0019d6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d67:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d6a:	eb 3c                	jmp    c0019da8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d6c:	80 f9 01             	cmp    cl,0x1
c0019d6f:	75 05                	jne    c0019d76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d71:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d74:	eb 32                	jmp    c0019da8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d76:	80 f9 02             	cmp    cl,0x2
c0019d79:	75 05                	jne    c0019d80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d7b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d7e:	eb 28                	jmp    c0019da8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d80:	31 c0                	xor    eax,eax
c0019d82:	80 f9 03             	cmp    cl,0x3
c0019d85:	75 05                	jne    c0019d8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d87:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d8a:	eb 1c                	jmp    c0019da8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d8c:	80 f9 05             	cmp    cl,0x5
c0019d8f:	75 05                	jne    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d91:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d94:	eb 12                	jmp    c0019da8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d96:	80 f9 06             	cmp    cl,0x6
c0019d99:	75 05                	jne    c0019da0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d9b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d9e:	eb 08                	jmp    c0019da8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019da0:	80 f9 07             	cmp    cl,0x7
c0019da3:	75 03                	jne    c0019da8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019da5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019da8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019dad:	75 10                	jne    c0019dbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019daf:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019db3:	b9 03 00 00 00       	mov    ecx,0x3
c0019db8:	01 d0                	add    eax,edx
c0019dba:	e9 37 01 00 00       	jmp    c0019ef6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dbf:	b9 02 00 00 00       	mov    ecx,0x2
c0019dc4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019dc9:	0f 85 27 01 00 00    	jne    c0019ef6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dcf:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019dd2:	b9 06 00 00 00       	mov    ecx,0x6
c0019dd7:	e9 1a 01 00 00       	jmp    c0019ef6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ddc:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019ddf:	b9 06 00 00 00       	mov    ecx,0x6
c0019de4:	e9 0f 01 00 00       	jmp    c0019ef8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019de9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019dec:	88 ca                	mov    dl,cl
c0019dee:	c0 ea 06             	shr    dl,0x6
c0019df1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019df5:	89 ca                	mov    edx,ecx
c0019df7:	66 c1 ea 03          	shr    dx,0x3
c0019dfb:	83 e2 07             	and    edx,0x7
c0019dfe:	80 e1 07             	and    cl,0x7
c0019e01:	75 05                	jne    c0019e08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e03:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e06:	eb 4c                	jmp    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e08:	80 f9 01             	cmp    cl,0x1
c0019e0b:	75 05                	jne    c0019e12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e0d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e10:	eb 42                	jmp    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e12:	80 f9 02             	cmp    cl,0x2
c0019e15:	75 05                	jne    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e17:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e1a:	eb 38                	jmp    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e1c:	80 f9 03             	cmp    cl,0x3
c0019e1f:	75 05                	jne    c0019e26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e21:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e24:	eb 2e                	jmp    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e26:	80 f9 04             	cmp    cl,0x4
c0019e29:	75 12                	jne    c0019e3d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e2b:	f6 c4 60             	test   ah,0x60
c0019e2e:	75 08                	jne    c0019e38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e30:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e33:	8d 78 14             	lea    edi,[eax+0x14]
c0019e36:	eb 1c                	jmp    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e38:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e3b:	eb 17                	jmp    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e3d:	80 f9 05             	cmp    cl,0x5
c0019e40:	75 05                	jne    c0019e47 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e42:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e45:	eb 0d                	jmp    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e47:	80 f9 06             	cmp    cl,0x6
c0019e4a:	75 05                	jne    c0019e51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e4c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e4f:	eb 03                	jmp    c0019e54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e51:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e54:	84 d2                	test   dl,dl
c0019e56:	75 05                	jne    c0019e5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e58:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e5b:	eb 3c                	jmp    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e5d:	80 fa 01             	cmp    dl,0x1
c0019e60:	75 05                	jne    c0019e67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e62:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e65:	eb 32                	jmp    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e67:	80 fa 02             	cmp    dl,0x2
c0019e6a:	75 05                	jne    c0019e71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e6c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e6f:	eb 28                	jmp    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e71:	80 fa 03             	cmp    dl,0x3
c0019e74:	75 05                	jne    c0019e7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e76:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e79:	eb 1e                	jmp    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e7b:	31 c0                	xor    eax,eax
c0019e7d:	80 fa 04             	cmp    dl,0x4
c0019e80:	74 17                	je     c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e82:	80 fa 05             	cmp    dl,0x5
c0019e85:	75 05                	jne    c0019e8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e87:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e8a:	eb 0d                	jmp    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e8c:	80 fa 06             	cmp    dl,0x6
c0019e8f:	75 05                	jne    c0019e96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e91:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e94:	eb 03                	jmp    c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e96:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e99:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e9e:	0f 94 c2             	sete   dl
c0019ea1:	80 f9 05             	cmp    cl,0x5
c0019ea4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019ea8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ead:	d3 e0                	shl    eax,cl
c0019eaf:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019eb3:	74 0a                	je     c0019ebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019eb5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019eb8:	b9 07 00 00 00       	mov    ecx,0x7
c0019ebd:	eb 37                	jmp    c0019ef6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ebf:	01 f8                	add    eax,edi
c0019ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0019ec6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ecb:	74 2b                	je     c0019ef8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ecd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019ed2:	75 0d                	jne    c0019ee1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ed4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ed8:	01 c8                	add    eax,ecx
c0019eda:	b9 04 00 00 00       	mov    ecx,0x4
c0019edf:	eb 17                	jmp    c0019ef8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ee1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ee4:	b9 07 00 00 00       	mov    ecx,0x7
c0019ee9:	eb 0d                	jmp    c0019ef8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019eeb:	b9 02 00 00 00       	mov    ecx,0x2
c0019ef0:	b2 01                	mov    dl,0x1
c0019ef2:	31 c0                	xor    eax,eax
c0019ef4:	eb 02                	jmp    c0019ef8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ef6:	31 d2                	xor    edx,edx
c0019ef8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019efc:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019efe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f02:	88 11                	mov    BYTE PTR [ecx],dl
c0019f04:	5a                   	pop    edx
c0019f05:	5b                   	pop    ebx
c0019f06:	5e                   	pop    esi
c0019f07:	5f                   	pop    edi
c0019f08:	c3                   	ret    

c0019f09 <Krnl::smpEntry()>:
c0019f09:	eb fe                	jmp    c0019f09 <Krnl::smpEntry()>

c0019f0b <Krnl::startCPU(int)>:
c0019f0b:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0019f10:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f17:	0f 84 36 01 00 00    	je     c001a053 <Krnl::startCPU(int)+0x148>
c0019f1d:	53                   	push   ebx
c0019f1e:	83 ec 08             	sub    esp,0x8
c0019f21:	e8 fc 3e 00 00       	call   c001de22 <lockScheduler()>
c0019f26:	52                   	push   edx
c0019f27:	52                   	push   edx
c0019f28:	6a 1b                	push   0x1b
c0019f2a:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c0019f30:	e8 bb 4e ff ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c0019f35:	59                   	pop    ecx
c0019f36:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f3b:	89 c3                	mov    ebx,eax
c0019f3d:	58                   	pop    eax
c0019f3e:	53                   	push   ebx
c0019f3f:	68 b0 bb 02 c0       	push   0xc002bbb0
c0019f44:	e8 c0 8f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0019f49:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f57:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f61:	c1 e0 18             	shl    eax,0x18
c0019f64:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f6a:	83 c4 10             	add    esp,0x10
c0019f6d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f73:	09 c2                	or     edx,eax
c0019f75:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f7b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f81:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f87:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f8d:	80 cd c5             	or     ch,0xc5
c0019f90:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f96:	f3 90                	pause  
c0019f98:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f9a:	0f ba e1 0c          	bt     ecx,0xc
c0019f9e:	72 f6                	jb     c0019f96 <Krnl::startCPU(int)+0x8b>
c0019fa0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fa6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fac:	09 c1                	or     ecx,eax
c0019fae:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fb4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fba:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fc0:	80 cd 85             	or     ch,0x85
c0019fc3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fc9:	f3 90                	pause  
c0019fcb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fcd:	0f ba e1 0c          	bt     ecx,0xc
c0019fd1:	72 f6                	jb     c0019fc9 <Krnl::startCPU(int)+0xbe>
c0019fd3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fdd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fe3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fe9:	09 c1                	or     ecx,eax
c0019feb:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019ff1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ff7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019ffd:	81 c9 02 06 00 00    	or     ecx,0x602
c001a003:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a009:	f3 90                	pause  
c001a00b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a00d:	0f ba e1 0c          	bt     ecx,0xc
c001a011:	72 f6                	jb     c001a009 <Krnl::startCPU(int)+0xfe>
c001a013:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a01d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a023:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a029:	09 c8                	or     eax,ecx
c001a02b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a031:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a037:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a03c:	0d 02 06 00 00       	or     eax,0x602
c001a041:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a047:	f3 90                	pause  
c001a049:	8b 02                	mov    eax,DWORD PTR [edx]
c001a04b:	0f ba e0 0c          	bt     eax,0xc
c001a04f:	72 f6                	jb     c001a047 <Krnl::startCPU(int)+0x13c>
c001a051:	eb fe                	jmp    c001a051 <Krnl::startCPU(int)+0x146>
c001a053:	c3                   	ret    

c001a054 <Krnl::startCPUs()>:
c001a054:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001a059:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a05f:	88 c2                	mov    dl,al
c001a061:	83 e2 0a             	and    edx,0xa
c001a064:	80 fa 0a             	cmp    dl,0xa
c001a067:	75 09                	jne    c001a072 <Krnl::startCPUs()+0x1e>
c001a069:	a8 01                	test   al,0x1
c001a06b:	74 05                	je     c001a072 <Krnl::startCPUs()+0x1e>
c001a06d:	e9 29 61 fe ff       	jmp    c000019b <prepareTramp>
c001a072:	c3                   	ret    
c001a073:	90                   	nop

c001a074 <EnvVarContainer::getEnv(char const*)>:
c001a074:	57                   	push   edi
c001a075:	56                   	push   esi
c001a076:	53                   	push   ebx
c001a077:	31 db                	xor    ebx,ebx
c001a079:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a07d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a07f:	7e 2b                	jle    c001a0ac <EnvVarContainer::getEnv(char const*)+0x38>
c001a081:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a088:	50                   	push   eax
c001a089:	50                   	push   eax
c001a08a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a08d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a090:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a094:	e8 2f 68 fe ff       	call   c00008c8 <strcmp>
c001a099:	83 c4 10             	add    esp,0x10
c001a09c:	85 c0                	test   eax,eax
c001a09e:	75 09                	jne    c001a0a9 <EnvVarContainer::getEnv(char const*)+0x35>
c001a0a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0a3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0a7:	eb 05                	jmp    c001a0ae <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0a9:	43                   	inc    ebx
c001a0aa:	eb d1                	jmp    c001a07d <EnvVarContainer::getEnv(char const*)+0x9>
c001a0ac:	31 c0                	xor    eax,eax
c001a0ae:	5b                   	pop    ebx
c001a0af:	5e                   	pop    esi
c001a0b0:	5f                   	pop    edi
c001a0b1:	c3                   	ret    

c001a0b2 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a0b2:	57                   	push   edi
c001a0b3:	56                   	push   esi
c001a0b4:	53                   	push   ebx
c001a0b5:	83 ec 1c             	sub    esp,0x1c
c001a0b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0bc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a0c0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0c4:	57                   	push   edi
c001a0c5:	e8 d2 66 fe ff       	call   c000079c <strlen>
c001a0ca:	40                   	inc    eax
c001a0cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0ce:	e8 78 57 ff ff       	call   c000f84b <malloc>
c001a0d3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0da:	e8 bd 66 fe ff       	call   c000079c <strlen>
c001a0df:	40                   	inc    eax
c001a0e0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0e3:	e8 63 57 ff ff       	call   c000f84b <malloc>
c001a0e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0ef:	e8 a8 66 fe ff       	call   c000079c <strlen>
c001a0f4:	83 c4 0c             	add    esp,0xc
c001a0f7:	40                   	inc    eax
c001a0f8:	50                   	push   eax
c001a0f9:	6a 00                	push   0x0
c001a0fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0ff:	e8 7c 66 fe ff       	call   c0000780 <memset>
c001a104:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a107:	e8 90 66 fe ff       	call   c000079c <strlen>
c001a10c:	83 c4 0c             	add    esp,0xc
c001a10f:	40                   	inc    eax
c001a110:	50                   	push   eax
c001a111:	57                   	push   edi
c001a112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a116:	e8 31 66 fe ff       	call   c000074c <memcpy>
c001a11b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a11e:	e8 79 66 fe ff       	call   c000079c <strlen>
c001a123:	83 c4 0c             	add    esp,0xc
c001a126:	40                   	inc    eax
c001a127:	50                   	push   eax
c001a128:	6a 00                	push   0x0
c001a12a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a12e:	e8 4d 66 fe ff       	call   c0000780 <memset>
c001a133:	89 34 24             	mov    DWORD PTR [esp],esi
c001a136:	e8 61 66 fe ff       	call   c000079c <strlen>
c001a13b:	83 c4 0c             	add    esp,0xc
c001a13e:	40                   	inc    eax
c001a13f:	50                   	push   eax
c001a140:	56                   	push   esi
c001a141:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a145:	e8 02 66 fe ff       	call   c000074c <memcpy>
c001a14a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a14c:	40                   	inc    eax
c001a14d:	89 03                	mov    DWORD PTR [ebx],eax
c001a14f:	c1 e0 03             	shl    eax,0x3
c001a152:	5a                   	pop    edx
c001a153:	59                   	pop    ecx
c001a154:	50                   	push   eax
c001a155:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a158:	e8 da 56 ff ff       	call   c000f837 <realloc>
c001a15d:	83 c4 0c             	add    esp,0xc
c001a160:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a163:	6a 08                	push   0x8
c001a165:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a169:	52                   	push   edx
c001a16a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a16c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a170:	50                   	push   eax
c001a171:	e8 d6 65 fe ff       	call   c000074c <memcpy>
c001a176:	83 c4 20             	add    esp,0x20
c001a179:	5b                   	pop    ebx
c001a17a:	5e                   	pop    esi
c001a17b:	5f                   	pop    edi
c001a17c:	c3                   	ret    
c001a17d:	90                   	nop

c001a17e <EnvVarContainer::deleteEnv(char const*)>:
c001a17e:	c3                   	ret    
c001a17f:	90                   	nop

c001a180 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a180:	55                   	push   ebp
c001a181:	57                   	push   edi
c001a182:	56                   	push   esi
c001a183:	53                   	push   ebx
c001a184:	81 ec 38 01 00 00    	sub    esp,0x138
c001a18a:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a191:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a198:	68 14 01 00 00       	push   0x114
c001a19d:	e8 a9 56 ff ff       	call   c000f84b <malloc>
c001a1a2:	83 c4 0c             	add    esp,0xc
c001a1a5:	89 c7                	mov    edi,eax
c001a1a7:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a1aa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1b1:	50                   	push   eax
c001a1b2:	e8 b1 92 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001a1b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1ba:	e8 7b 95 ff ff       	call   c001373a <File::exists()>
c001a1bf:	83 c4 10             	add    esp,0x10
c001a1c2:	84 c0                	test   al,al
c001a1c4:	75 31                	jne    c001a1f7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1c6:	51                   	push   ecx
c001a1c7:	51                   	push   ecx
c001a1c8:	6a 12                	push   0x12
c001a1ca:	57                   	push   edi
c001a1cb:	e8 fc 92 ff ff       	call   c00134cc <File::open(FileOpenMode)>
c001a1d0:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1d2:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a1d5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1d8:	e8 bf 65 fe ff       	call   c000079c <strlen>
c001a1dd:	5a                   	pop    edx
c001a1de:	31 d2                	xor    edx,edx
c001a1e0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1e4:	51                   	push   ecx
c001a1e5:	55                   	push   ebp
c001a1e6:	52                   	push   edx
c001a1e7:	50                   	push   eax
c001a1e8:	57                   	push   edi
c001a1e9:	ff d3                	call   ebx
c001a1eb:	83 c4 14             	add    esp,0x14
c001a1ee:	57                   	push   edi
c001a1ef:	e8 36 93 ff ff       	call   c001352a <File::close()>
c001a1f4:	83 c4 10             	add    esp,0x10
c001a1f7:	31 db                	xor    ebx,ebx
c001a1f9:	50                   	push   eax
c001a1fa:	31 ed                	xor    ebp,ebp
c001a1fc:	68 00 01 00 00       	push   0x100
c001a201:	6a 00                	push   0x0
c001a203:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a207:	50                   	push   eax
c001a208:	e8 73 65 fe ff       	call   c0000780 <memset>
c001a20d:	58                   	pop    eax
c001a20e:	5a                   	pop    edx
c001a20f:	6a 01                	push   0x1
c001a211:	57                   	push   edi
c001a212:	e8 b5 92 ff ff       	call   c00134cc <File::open(FileOpenMode)>
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	83 ec 0c             	sub    esp,0xc
c001a21d:	8b 07                	mov    eax,DWORD PTR [edi]
c001a21f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a223:	51                   	push   ecx
c001a224:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a228:	52                   	push   edx
c001a229:	6a 00                	push   0x0
c001a22b:	6a 01                	push   0x1
c001a22d:	57                   	push   edi
c001a22e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a231:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a235:	83 c4 20             	add    esp,0x20
c001a238:	3c 0d                	cmp    al,0xd
c001a23a:	0f 84 12 01 00 00    	je     c001a352 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a240:	85 db                	test   ebx,ebx
c001a242:	0f 84 fd 00 00 00    	je     c001a345 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a248:	3c 0a                	cmp    al,0xa
c001a24a:	74 13                	je     c001a25f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a24c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a251:	74 0c                	je     c001a25f <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a253:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a259:	0f 8e e6 00 00 00    	jle    c001a345 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a25f:	83 ec 0c             	sub    esp,0xc
c001a262:	8d 53 01             	lea    edx,[ebx+0x1]
c001a265:	29 dd                	sub    ebp,ebx
c001a267:	52                   	push   edx
c001a268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a26c:	e8 da 55 ff ff       	call   c000f84b <malloc>
c001a271:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a274:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a278:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a27b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a27f:	e8 c7 55 ff ff       	call   c000f84b <malloc>
c001a284:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a288:	83 c4 0c             	add    esp,0xc
c001a28b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a28f:	52                   	push   edx
c001a290:	6a 00                	push   0x0
c001a292:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a296:	e8 e5 64 fe ff       	call   c0000780 <memset>
c001a29b:	83 c4 0c             	add    esp,0xc
c001a29e:	53                   	push   ebx
c001a29f:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2a3:	55                   	push   ebp
c001a2a4:	01 eb                	add    ebx,ebp
c001a2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2aa:	e8 9d 64 fe ff       	call   c000074c <memcpy>
c001a2af:	83 c4 0c             	add    esp,0xc
c001a2b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a2b6:	51                   	push   ecx
c001a2b7:	6a 00                	push   0x0
c001a2b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2bd:	e8 be 64 fe ff       	call   c0000780 <memset>
c001a2c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2c5:	e8 d2 64 fe ff       	call   c000079c <strlen>
c001a2ca:	83 c4 0c             	add    esp,0xc
c001a2cd:	50                   	push   eax
c001a2ce:	53                   	push   ebx
c001a2cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2d3:	e8 74 64 fe ff       	call   c000074c <memcpy>
c001a2d8:	5b                   	pop    ebx
c001a2d9:	58                   	pop    eax
c001a2da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2de:	68 c1 bb 02 c0       	push   0xc002bbc1
c001a2e3:	e8 21 8c ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001a2e8:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2ea:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2ed:	40                   	inc    eax
c001a2ee:	83 c4 10             	add    esp,0x10
c001a2f1:	89 06                	mov    DWORD PTR [esi],eax
c001a2f3:	85 d2                	test   edx,edx
c001a2f5:	75 0c                	jne    c001a303 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2f7:	83 ec 0c             	sub    esp,0xc
c001a2fa:	6a 08                	push   0x8
c001a2fc:	e8 4a 55 ff ff       	call   c000f84b <malloc>
c001a301:	eb 0c                	jmp    c001a30f <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a303:	c1 e0 03             	shl    eax,0x3
c001a306:	51                   	push   ecx
c001a307:	51                   	push   ecx
c001a308:	50                   	push   eax
c001a309:	52                   	push   edx
c001a30a:	e8 28 55 ff ff       	call   c000f837 <realloc>
c001a30f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	31 db                	xor    ebx,ebx
c001a317:	52                   	push   edx
c001a318:	6a 08                	push   0x8
c001a31a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a31e:	50                   	push   eax
c001a31f:	8b 16                	mov    edx,DWORD PTR [esi]
c001a321:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a324:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a328:	50                   	push   eax
c001a329:	e8 1e 64 fe ff       	call   c000074c <memcpy>
c001a32e:	83 c4 0c             	add    esp,0xc
c001a331:	68 00 01 00 00       	push   0x100
c001a336:	6a 00                	push   0x0
c001a338:	55                   	push   ebp
c001a339:	31 ed                	xor    ebp,ebp
c001a33b:	e8 40 64 fe ff       	call   c0000780 <memset>
c001a340:	83 c4 10             	add    esp,0x10
c001a343:	eb 0d                	jmp    c001a352 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a345:	3c 3d                	cmp    al,0x3d
c001a347:	74 07                	je     c001a350 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a349:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a34d:	45                   	inc    ebp
c001a34e:	eb 02                	jmp    c001a352 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a350:	89 eb                	mov    ebx,ebp
c001a352:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a357:	0f 85 bd fe ff ff    	jne    c001a21a <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a35d:	50                   	push   eax
c001a35e:	50                   	push   eax
c001a35f:	ff 36                	push   DWORD PTR [esi]
c001a361:	68 cf bb 02 c0       	push   0xc002bbcf
c001a366:	e8 9e 8b ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001a36b:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a371:	5b                   	pop    ebx
c001a372:	5e                   	pop    esi
c001a373:	5f                   	pop    edi
c001a374:	5d                   	pop    ebp
c001a375:	c3                   	ret    

c001a376 <EnvVarContainer::__loadSystem()>:
c001a376:	83 ec 10             	sub    esp,0x10
c001a379:	68 40 db 02 c0       	push   0xc002db40
c001a37e:	68 fa bb 02 c0       	push   0xc002bbfa
c001a383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a387:	e8 f4 fd ff ff       	call   c001a180 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a38c:	83 c4 1c             	add    esp,0x1c
c001a38f:	c3                   	ret    

c001a390 <EnvVarContainer::__loadUser()>:
c001a390:	c3                   	ret    
c001a391:	90                   	nop

c001a392 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a396:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a3b2:	90                   	nop
c001a3b3:	c3                   	ret    

c001a3b4 <EnvVarContainer::~EnvVarContainer()>:
c001a3b4:	83 ec 0c             	sub    esp,0xc
c001a3b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3be:	85 c0                	test   eax,eax
c001a3c0:	74 1d                	je     c001a3df <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3c8:	85 c0                	test   eax,eax
c001a3ca:	74 13                	je     c001a3df <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3d3:	83 ec 0c             	sub    esp,0xc
c001a3d6:	50                   	push   eax
c001a3d7:	e8 7f 54 ff ff       	call   c000f85b <free>
c001a3dc:	83 c4 10             	add    esp,0x10
c001a3df:	90                   	nop
c001a3e0:	83 c4 0c             	add    esp,0xc
c001a3e3:	c3                   	ret    

c001a3e4 <Krnl::getEnv(Process*, char const*)>:
c001a3e4:	53                   	push   ebx
c001a3e5:	83 ec 08             	sub    esp,0x8
c001a3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3f0:	39 05 74 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b74,eax
c001a3f6:	74 04                	je     c001a3fc <Krnl::getEnv(Process*, char const*)+0x18>
c001a3f8:	85 c0                	test   eax,eax
c001a3fa:	75 0b                	jne    c001a407 <Krnl::getEnv(Process*, char const*)+0x23>
c001a3fc:	a1 54 11 03 c0       	mov    eax,ds:0xc0031154
c001a401:	85 c0                	test   eax,eax
c001a403:	75 19                	jne    c001a41e <Krnl::getEnv(Process*, char const*)+0x3a>
c001a405:	eb 27                	jmp    c001a42e <Krnl::getEnv(Process*, char const*)+0x4a>
c001a407:	52                   	push   edx
c001a408:	52                   	push   edx
c001a409:	53                   	push   ebx
c001a40a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a410:	e8 5f fc ff ff       	call   c001a074 <EnvVarContainer::getEnv(char const*)>
c001a415:	83 c4 10             	add    esp,0x10
c001a418:	85 c0                	test   eax,eax
c001a41a:	75 28                	jne    c001a444 <Krnl::getEnv(Process*, char const*)+0x60>
c001a41c:	eb de                	jmp    c001a3fc <Krnl::getEnv(Process*, char const*)+0x18>
c001a41e:	52                   	push   edx
c001a41f:	52                   	push   edx
c001a420:	53                   	push   ebx
c001a421:	50                   	push   eax
c001a422:	e8 4d fc ff ff       	call   c001a074 <EnvVarContainer::getEnv(char const*)>
c001a427:	83 c4 10             	add    esp,0x10
c001a42a:	85 c0                	test   eax,eax
c001a42c:	75 16                	jne    c001a444 <Krnl::getEnv(Process*, char const*)+0x60>
c001a42e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a432:	a1 58 11 03 c0       	mov    eax,ds:0xc0031158
c001a437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a43b:	83 c4 08             	add    esp,0x8
c001a43e:	5b                   	pop    ebx
c001a43f:	e9 30 fc ff ff       	jmp    c001a074 <EnvVarContainer::getEnv(char const*)>
c001a444:	83 c4 08             	add    esp,0x8
c001a447:	5b                   	pop    ebx
c001a448:	c3                   	ret    

c001a449 <Krnl::setEnvSystem(char const*, char const*)>:
c001a449:	83 ec 10             	sub    esp,0x10
c001a44c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a450:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a454:	ff 35 58 11 03 c0    	push   DWORD PTR ds:0xc0031158
c001a45a:	e8 53 fc ff ff       	call   c001a0b2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a45f:	83 c4 1c             	add    esp,0x1c
c001a462:	c3                   	ret    

c001a463 <Krnl::setEnvUser(char const*, char const*)>:
c001a463:	a1 54 11 03 c0       	mov    eax,ds:0xc0031154
c001a468:	85 c0                	test   eax,eax
c001a46a:	74 15                	je     c001a481 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a46c:	83 ec 10             	sub    esp,0x10
c001a46f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a473:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a477:	50                   	push   eax
c001a478:	e8 35 fc ff ff       	call   c001a0b2 <EnvVarContainer::setEnv(char const*, char const*)>
c001a47d:	83 c4 1c             	add    esp,0x1c
c001a480:	c3                   	ret    
c001a481:	c3                   	ret    

c001a482 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a486:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a48c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a490:	e9 1d fc ff ff       	jmp    c001a0b2 <EnvVarContainer::setEnv(char const*, char const*)>

c001a495 <Krnl::deleteEnvSystem(char const*)>:
c001a495:	c3                   	ret    

c001a496 <Krnl::deleteEnvUser(char const*)>:
c001a496:	c3                   	ret    

c001a497 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a497:	c3                   	ret    

c001a498 <Krnl::newProcessEnv(Process*)>:
c001a498:	83 ec 28             	sub    esp,0x28
c001a49b:	6a 0c                	push   0xc
c001a49d:	e8 a9 53 ff ff       	call   c000f84b <malloc>
c001a4a2:	5a                   	pop    edx
c001a4a3:	59                   	pop    ecx
c001a4a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4a8:	50                   	push   eax
c001a4a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4ad:	e8 e0 fe ff ff       	call   c001a392 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4b6:	83 c4 2c             	add    esp,0x2c
c001a4b9:	c3                   	ret    

c001a4ba <Krnl::copyProcessEnv(Process*, Process*)>:
c001a4ba:	56                   	push   esi
c001a4bb:	53                   	push   ebx
c001a4bc:	83 ec 10             	sub    esp,0x10
c001a4bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4c3:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4c9:	6a 0c                	push   0xc
c001a4cb:	e8 7b 53 ff ff       	call   c000f84b <malloc>
c001a4d0:	89 c3                	mov    ebx,eax
c001a4d2:	58                   	pop    eax
c001a4d3:	5a                   	pop    edx
c001a4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4d8:	53                   	push   ebx
c001a4d9:	e8 b4 fe ff ff       	call   c001a392 <EnvVarContainer::EnvVarContainer(Process*)>
c001a4de:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4e0:	89 03                	mov    DWORD PTR [ebx],eax
c001a4e2:	c1 e0 03             	shl    eax,0x3
c001a4e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4e8:	e8 5e 53 ff ff       	call   c000f84b <malloc>
c001a4ed:	83 c4 0c             	add    esp,0xc
c001a4f0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4f3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4f5:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4fc:	52                   	push   edx
c001a4fd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a500:	50                   	push   eax
c001a501:	e8 46 62 fe ff       	call   c000074c <memcpy>
c001a506:	89 d8                	mov    eax,ebx
c001a508:	83 c4 14             	add    esp,0x14
c001a50b:	5b                   	pop    ebx
c001a50c:	5e                   	pop    esi
c001a50d:	c3                   	ret    

c001a50e <Krnl::loadSystemEnv()>:
c001a50e:	53                   	push   ebx
c001a50f:	83 ec 14             	sub    esp,0x14
c001a512:	6a 0c                	push   0xc
c001a514:	e8 32 53 ff ff       	call   c000f84b <malloc>
c001a519:	89 c3                	mov    ebx,eax
c001a51b:	58                   	pop    eax
c001a51c:	5a                   	pop    edx
c001a51d:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001a523:	53                   	push   ebx
c001a524:	e8 69 fe ff ff       	call   c001a392 <EnvVarContainer::EnvVarContainer(Process*)>
c001a529:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a52c:	89 1d 58 11 03 c0    	mov    DWORD PTR ds:0xc0031158,ebx
c001a532:	e8 3f fe ff ff       	call   c001a376 <EnvVarContainer::__loadSystem()>
c001a537:	83 c4 18             	add    esp,0x18
c001a53a:	5b                   	pop    ebx
c001a53b:	c3                   	ret    

c001a53c <Krnl::loadUserEnv()>:
c001a53c:	53                   	push   ebx
c001a53d:	83 ec 14             	sub    esp,0x14
c001a540:	6a 0c                	push   0xc
c001a542:	e8 04 53 ff ff       	call   c000f84b <malloc>
c001a547:	89 c3                	mov    ebx,eax
c001a549:	58                   	pop    eax
c001a54a:	5a                   	pop    edx
c001a54b:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001a551:	53                   	push   ebx
c001a552:	e8 3b fe ff ff       	call   c001a392 <EnvVarContainer::EnvVarContainer(Process*)>
c001a557:	89 1d 54 11 03 c0    	mov    DWORD PTR ds:0xc0031154,ebx
c001a55d:	83 c4 18             	add    esp,0x18
c001a560:	5b                   	pop    ebx
c001a561:	c3                   	ret    

c001a562 <Krnl::flushEnv()>:
c001a562:	c3                   	ret    

c001a563 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a567:	8b 15 54 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031154
c001a56d:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a573:	a1 58 11 03 c0       	mov    eax,ds:0xc0031158
c001a578:	8b 00                	mov    eax,DWORD PTR [eax]
c001a57a:	03 01                	add    eax,DWORD PTR [ecx]
c001a57c:	85 d2                	test   edx,edx
c001a57e:	74 02                	je     c001a582 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a580:	03 02                	add    eax,DWORD PTR [edx]
c001a582:	c3                   	ret    

c001a583 <Krnl::getProcessEnvPair(Process*, int)>:
c001a583:	57                   	push   edi
c001a584:	8b 0d 54 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031154
c001a58a:	56                   	push   esi
c001a58b:	85 c9                	test   ecx,ecx
c001a58d:	53                   	push   ebx
c001a58e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a592:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a596:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a59c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5a0:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5a2:	75 47                	jne    c001a5eb <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5a4:	39 c3                	cmp    ebx,eax
c001a5a6:	7c 47                	jl     c001a5ef <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5a8:	8b 15 58 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031158
c001a5ae:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a5b0:	01 c1                	add    ecx,eax
c001a5b2:	39 d9                	cmp    ecx,ebx
c001a5b4:	7e 6c                	jle    c001a622 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5b6:	51                   	push   ecx
c001a5b7:	89 d9                	mov    ecx,ebx
c001a5b9:	29 c1                	sub    ecx,eax
c001a5bb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5be:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a5c2:	53                   	push   ebx
c001a5c3:	68 1c bc 02 c0       	push   0xc002bc1c
c001a5c8:	e8 3c 89 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001a5cd:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5d3:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a5d5:	a1 58 11 03 c0       	mov    eax,ds:0xc0031158
c001a5da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5dd:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5e1:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5e4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5e7:	89 06                	mov    DWORD PTR [esi],eax
c001a5e9:	eb 51                	jmp    c001a63c <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5eb:	39 c3                	cmp    ebx,eax
c001a5ed:	7d 05                	jge    c001a5f4 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5ef:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5f2:	eb 20                	jmp    c001a614 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5f4:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5f6:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5f9:	39 da                	cmp    edx,ebx
c001a5fb:	7e 04                	jle    c001a601 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5fd:	29 c3                	sub    ebx,eax
c001a5ff:	eb 10                	jmp    c001a611 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a601:	8b 0d 58 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031158
c001a607:	03 11                	add    edx,DWORD PTR [ecx]
c001a609:	39 da                	cmp    edx,ebx
c001a60b:	7e 15                	jle    c001a622 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a60d:	29 c3                	sub    ebx,eax
c001a60f:	29 fb                	sub    ebx,edi
c001a611:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a614:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a618:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a61b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a61e:	89 06                	mov    DWORD PTR [esi],eax
c001a620:	eb 1d                	jmp    c001a63f <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a622:	83 ec 0c             	sub    esp,0xc
c001a625:	68 30 bc 02 c0       	push   0xc002bc30
c001a62a:	e8 18 00 00 00       	call   c001a647 <Krnl::panic(char const*)>
c001a62f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a635:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a63c:	83 c4 10             	add    esp,0x10
c001a63f:	89 f0                	mov    eax,esi
c001a641:	5b                   	pop    ebx
c001a642:	5e                   	pop    esi
c001a643:	5f                   	pop    edi
c001a644:	c2 04 00             	ret    0x4

c001a647 <Krnl::panic(char const*)>:
c001a647:	55                   	push   ebp
c001a648:	89 e5                	mov    ebp,esp
c001a64a:	53                   	push   ebx
c001a64b:	83 ec 0c             	sub    esp,0xc
c001a64e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a651:	fa                   	cli    
c001a652:	c6 05 64 11 03 c0 01 	mov    BYTE PTR ds:0xc0031164,0x1
c001a659:	53                   	push   ebx
c001a65a:	c6 05 44 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d544,0x0
c001a661:	68 4a bc 02 c0       	push   0xc002bc4a
c001a666:	e8 9e 88 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001a66b:	58                   	pop    eax
c001a66c:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a671:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a677:	e8 81 66 ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c001a67c:	83 c4 0c             	add    esp,0xc
c001a67f:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a684:	6a 01                	push   0x1
c001a686:	6a 0f                	push   0xf
c001a688:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a68e:	e8 9b 60 ff ff       	call   c001072e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a693:	58                   	pop    eax
c001a694:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a699:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a69f:	e8 fa 68 ff ff       	call   c0010f9e <VgaText::clearScreen()>
c001a6a4:	58                   	pop    eax
c001a6a5:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a6aa:	5a                   	pop    edx
c001a6ab:	68 63 bc 02 c0       	push   0xc002bc63
c001a6b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b6:	e8 61 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6bb:	59                   	pop    ecx
c001a6bc:	58                   	pop    eax
c001a6bd:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a6c2:	68 08 bd 02 c0       	push   0xc002bd08
c001a6c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6cd:	e8 4a 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6d2:	58                   	pop    eax
c001a6d3:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a6d8:	5a                   	pop    edx
c001a6d9:	68 7f bc 02 c0       	push   0xc002bc7f
c001a6de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e4:	e8 33 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6e9:	59                   	pop    ecx
c001a6ea:	58                   	pop    eax
c001a6eb:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a6f0:	53                   	push   ebx
c001a6f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f7:	e8 20 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a6fc:	58                   	pop    eax
c001a6fd:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a702:	5a                   	pop    edx
c001a703:	68 9f bc 02 c0       	push   0xc002bc9f
c001a708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70e:	e8 09 6a ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a713:	a1 60 11 03 c0       	mov    eax,ds:0xc0031160
c001a718:	83 c4 10             	add    esp,0x10
c001a71b:	85 c0                	test   eax,eax
c001a71d:	74 02                	je     c001a721 <Krnl::panic(char const*)+0xda>
c001a71f:	ff d0                	call   eax
c001a721:	83 ec 0c             	sub    esp,0xc
c001a724:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a727:	e8 fd 2f 00 00       	call   c001d729 <Thr::getDriverNameFromAddress(unsigned long)>
c001a72c:	83 c4 10             	add    esp,0x10
c001a72f:	89 c3                	mov    ebx,eax
c001a731:	85 c0                	test   eax,eax
c001a733:	0f 84 50 02 00 00    	je     c001a989 <Krnl::panic(char const*)+0x342>
c001a739:	83 ec 08             	sub    esp,0x8
c001a73c:	8b 15 74 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b74
c001a742:	68 44 bd 02 c0       	push   0xc002bd44
c001a747:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a74d:	e8 ca 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a752:	58                   	pop    eax
c001a753:	5a                   	pop    edx
c001a754:	8b 15 74 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b74
c001a75a:	68 7f bc 02 c0       	push   0xc002bc7f
c001a75f:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a765:	e8 b2 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a76a:	59                   	pop    ecx
c001a76b:	58                   	pop    eax
c001a76c:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a771:	53                   	push   ebx
c001a772:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a778:	e8 9f 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a77d:	83 c4 10             	add    esp,0x10
c001a780:	83 ec 08             	sub    esp,0x8
c001a783:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a788:	68 9e bc 02 c0       	push   0xc002bc9e
c001a78d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a793:	e8 84 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a798:	58                   	pop    eax
c001a799:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a79e:	5a                   	pop    edx
c001a79f:	68 9c bd 02 c0       	push   0xc002bd9c
c001a7a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7aa:	e8 6d 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7af:	59                   	pop    ecx
c001a7b0:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a7b5:	5b                   	pop    ebx
c001a7b6:	68 dc bd 02 c0       	push   0xc002bddc
c001a7bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c1:	e8 56 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7c6:	58                   	pop    eax
c001a7c7:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a7cc:	5a                   	pop    edx
c001a7cd:	68 8a bc 02 c0       	push   0xc002bc8a
c001a7d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d8:	e8 3f 69 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a7dd:	59                   	pop    ecx
c001a7de:	5b                   	pop    ebx
c001a7df:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7e2:	68 a2 bc 02 c0       	push   0xc002bca2
c001a7e7:	e8 1d 87 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001a7ec:	58                   	pop    eax
c001a7ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7f0:	5a                   	pop    edx
c001a7f1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7f4:	68 ab bc 02 c0       	push   0xc002bcab
c001a7f9:	e8 0b 87 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001a7fe:	59                   	pop    ecx
c001a7ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a802:	5b                   	pop    ebx
c001a803:	8b 00                	mov    eax,DWORD PTR [eax]
c001a805:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a808:	68 b4 bc 02 c0       	push   0xc002bcb4
c001a80d:	e8 f7 86 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001a812:	58                   	pop    eax
c001a813:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a818:	5a                   	pop    edx
c001a819:	68 20 be 02 c0       	push   0xc002be20
c001a81e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a824:	e8 f3 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a829:	59                   	pop    ecx
c001a82a:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a82f:	5b                   	pop    ebx
c001a830:	68 bd bc 02 c0       	push   0xc002bcbd
c001a835:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a83b:	e8 dc 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a840:	0f 20 c0             	mov    eax,cr0
c001a843:	5a                   	pop    edx
c001a844:	59                   	pop    ecx
c001a845:	50                   	push   eax
c001a846:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a84b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a851:	e8 ec 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a856:	5b                   	pop    ebx
c001a857:	58                   	pop    eax
c001a858:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a85d:	68 c7 bc 02 c0       	push   0xc002bcc7
c001a862:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a868:	e8 af 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a86d:	0f 20 d0             	mov    eax,cr2
c001a870:	5a                   	pop    edx
c001a871:	59                   	pop    ecx
c001a872:	50                   	push   eax
c001a873:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a878:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87e:	e8 bf 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a883:	5b                   	pop    ebx
c001a884:	58                   	pop    eax
c001a885:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a88a:	68 d1 bc 02 c0       	push   0xc002bcd1
c001a88f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a895:	e8 82 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a89a:	0f 20 d8             	mov    eax,cr3
c001a89d:	5a                   	pop    edx
c001a89e:	59                   	pop    ecx
c001a89f:	50                   	push   eax
c001a8a0:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a8a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ab:	e8 92 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a8b0:	5b                   	pop    ebx
c001a8b1:	58                   	pop    eax
c001a8b2:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a8b7:	68 e4 bc 02 c0       	push   0xc002bce4
c001a8bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c2:	e8 55 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a8c7:	0f 20 e0             	mov    eax,cr4
c001a8ca:	5a                   	pop    edx
c001a8cb:	59                   	pop    ecx
c001a8cc:	50                   	push   eax
c001a8cd:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a8d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d8:	e8 65 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a8dd:	5b                   	pop    ebx
c001a8de:	58                   	pop    eax
c001a8df:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a8e4:	68 ee bc 02 c0       	push   0xc002bcee
c001a8e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ef:	e8 28 68 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a8f4:	5a                   	pop    edx
c001a8f5:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a8fa:	59                   	pop    ecx
c001a8fb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a901:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a904:	50                   	push   eax
c001a905:	e8 38 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a90a:	5b                   	pop    ebx
c001a90b:	58                   	pop    eax
c001a90c:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a911:	68 05 bd 02 c0       	push   0xc002bd05
c001a916:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91c:	e8 fb 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a921:	5a                   	pop    edx
c001a922:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a927:	59                   	pop    ecx
c001a928:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a92e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a931:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a934:	50                   	push   eax
c001a935:	e8 08 68 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a93a:	5b                   	pop    ebx
c001a93b:	58                   	pop    eax
c001a93c:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a941:	68 05 bd 02 c0       	push   0xc002bd05
c001a946:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94c:	e8 cb 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a951:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a956:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a959:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a95f:	8b 12                	mov    edx,DWORD PTR [edx]
c001a961:	59                   	pop    ecx
c001a962:	5b                   	pop    ebx
c001a963:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a966:	50                   	push   eax
c001a967:	e8 d6 67 ff ff       	call   c0011142 <VgaText::putx(unsigned int)>
c001a96c:	83 c4 10             	add    esp,0x10
c001a96f:	b2 fe                	mov    dl,0xfe
c001a971:	e4 60                	in     al,0x60
c001a973:	3c 1c                	cmp    al,0x1c
c001a975:	74 04                	je     c001a97b <Krnl::panic(char const*)+0x334>
c001a977:	3c 5a                	cmp    al,0x5a
c001a979:	75 f6                	jne    c001a971 <Krnl::panic(char const*)+0x32a>
c001a97b:	e4 64                	in     al,0x64
c001a97d:	a8 02                	test   al,0x2
c001a97f:	75 fa                	jne    c001a97b <Krnl::panic(char const*)+0x334>
c001a981:	88 d0                	mov    al,dl
c001a983:	e6 64                	out    0x64,al
c001a985:	fa                   	cli    
c001a986:	f4                   	hlt    
c001a987:	eb e8                	jmp    c001a971 <Krnl::panic(char const*)+0x32a>
c001a989:	50                   	push   eax
c001a98a:	50                   	push   eax
c001a98b:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a990:	68 70 bd 02 c0       	push   0xc002bd70
c001a995:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99b:	e8 7c 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a9a0:	58                   	pop    eax
c001a9a1:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a9a6:	5a                   	pop    edx
c001a9a7:	68 7f bc 02 c0       	push   0xc002bc7f
c001a9ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9b2:	e8 65 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a9b7:	59                   	pop    ecx
c001a9b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9bd:	5b                   	pop    ebx
c001a9be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9c1:	83 c0 0c             	add    eax,0xc
c001a9c4:	50                   	push   eax
c001a9c5:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001a9ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d0:	e8 47 67 ff ff       	call   c001111c <VgaText::puts(char const*)>
c001a9d5:	83 c4 10             	add    esp,0x10
c001a9d8:	e9 a3 fd ff ff       	jmp    c001a780 <Krnl::panic(char const*)+0x139>

c001a9dd <Net::switchEndian16(unsigned short)>:
c001a9dd:	83 ec 04             	sub    esp,0x4
c001a9e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9e4:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9e8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9ec:	c1 f8 08             	sar    eax,0x8
c001a9ef:	89 c2                	mov    edx,eax
c001a9f1:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9f5:	c1 e0 08             	shl    eax,0x8
c001a9f8:	09 d0                	or     eax,edx
c001a9fa:	83 c4 04             	add    esp,0x4
c001a9fd:	c3                   	ret    

c001a9fe <Net::switchEndian32(unsigned int)>:
c001a9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa02:	c1 e8 18             	shr    eax,0x18
c001aa05:	89 c2                	mov    edx,eax
c001aa07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0b:	c1 e0 08             	shl    eax,0x8
c001aa0e:	25 00 00 ff 00       	and    eax,0xff0000
c001aa13:	09 c2                	or     edx,eax
c001aa15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa19:	c1 e8 08             	shr    eax,0x8
c001aa1c:	25 00 ff 00 00       	and    eax,0xff00
c001aa21:	09 c2                	or     edx,eax
c001aa23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa27:	c1 e0 18             	shl    eax,0x18
c001aa2a:	09 d0                	or     eax,edx
c001aa2c:	c3                   	ret    

c001aa2d <Net::crc32Calc(unsigned char*, int)>:
c001aa2d:	83 ec 10             	sub    esp,0x10
c001aa30:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa35:	75 07                	jne    c001aa3e <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa37:	b8 00 00 00 00       	mov    eax,0x0
c001aa3c:	eb 7c                	jmp    c001aaba <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa3e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa43:	7f 07                	jg     c001aa4c <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa45:	b8 00 00 00 00       	mov    eax,0x0
c001aa4a:	eb 6e                	jmp    c001aaba <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa4c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa64:	7d 4e                	jge    c001aab4 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa6e:	01 d0                	add    eax,edx
c001aa70:	8a 00                	mov    al,BYTE PTR [eax]
c001aa72:	0f b6 c0             	movzx  eax,al
c001aa75:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa79:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa81:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa86:	7f 26                	jg     c001aaae <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa8c:	83 e0 01             	and    eax,0x1
c001aa8f:	74 0d                	je     c001aa9e <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa95:	d1 e8                	shr    eax,1
c001aa97:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa9c:	eb 06                	jmp    c001aaa4 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa2:	d1 e8                	shr    eax,1
c001aaa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aaa8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaac:	eb d3                	jmp    c001aa81 <Net::crc32Calc(unsigned char*, int)+0x54>
c001aaae:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aab2:	eb a8                	jmp    c001aa5c <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab8:	f7 d0                	not    eax
c001aaba:	83 c4 10             	add    esp,0x10
c001aabd:	c3                   	ret    

c001aabe <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aabe:	83 ec 1c             	sub    esp,0x1c
c001aac1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aac5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aac9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aad1:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aad6:	7f 14                	jg     c001aaec <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aad8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aadc:	8d 50 01             	lea    edx,[eax+0x1]
c001aadf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aae3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aaea:	eb e5                	jmp    c001aad1 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aaec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf0:	8d 50 01             	lea    edx,[eax+0x1]
c001aaf3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaf7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aafa:	83 ec 04             	sub    esp,0x4
c001aafd:	6a 06                	push   0x6
c001aaff:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab03:	50                   	push   eax
c001ab04:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab08:	e8 3f 5c fe ff       	call   c000074c <memcpy>
c001ab0d:	83 c4 10             	add    esp,0x10
c001ab10:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab15:	83 ec 04             	sub    esp,0x4
c001ab18:	6a 06                	push   0x6
c001ab1a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab1e:	50                   	push   eax
c001ab1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab23:	e8 24 5c fe ff       	call   c000074c <memcpy>
c001ab28:	83 c4 10             	add    esp,0x10
c001ab2b:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab34:	0f b7 c0             	movzx  eax,ax
c001ab37:	c1 f8 08             	sar    eax,0x8
c001ab3a:	89 c1                	mov    ecx,eax
c001ab3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab40:	8d 50 01             	lea    edx,[eax+0x1]
c001ab43:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab47:	88 ca                	mov    dl,cl
c001ab49:	88 10                	mov    BYTE PTR [eax],dl
c001ab4b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab53:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab56:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab5a:	88 10                	mov    BYTE PTR [eax],dl
c001ab5c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab64:	83 ec 04             	sub    esp,0x4
c001ab67:	52                   	push   edx
c001ab68:	50                   	push   eax
c001ab69:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab6d:	e8 da 5b fe ff       	call   c000074c <memcpy>
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab79:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab81:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab85:	83 ec 08             	sub    esp,0x8
c001ab88:	50                   	push   eax
c001ab89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab8d:	e8 9b fe ff ff       	call   c001aa2d <Net::crc32Calc(unsigned char*, int)>
c001ab92:	83 c4 10             	add    esp,0x10
c001ab95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab9d:	c1 e8 18             	shr    eax,0x18
c001aba0:	89 c1                	mov    ecx,eax
c001aba2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba6:	8d 50 01             	lea    edx,[eax+0x1]
c001aba9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abad:	88 ca                	mov    dl,cl
c001abaf:	88 10                	mov    BYTE PTR [eax],dl
c001abb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb5:	c1 e8 10             	shr    eax,0x10
c001abb8:	89 c1                	mov    ecx,eax
c001abba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abbe:	8d 50 01             	lea    edx,[eax+0x1]
c001abc1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abc5:	88 ca                	mov    dl,cl
c001abc7:	88 10                	mov    BYTE PTR [eax],dl
c001abc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abcd:	c1 e8 08             	shr    eax,0x8
c001abd0:	89 c1                	mov    ecx,eax
c001abd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abd6:	8d 50 01             	lea    edx,[eax+0x1]
c001abd9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abdd:	88 ca                	mov    dl,cl
c001abdf:	88 10                	mov    BYTE PTR [eax],dl
c001abe1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abe5:	8d 50 01             	lea    edx,[eax+0x1]
c001abe8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abf0:	88 10                	mov    BYTE PTR [eax],dl
c001abf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abf6:	83 c4 1c             	add    esp,0x1c
c001abf9:	c3                   	ret    

c001abfa <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abfa:	83 ec 2c             	sub    esp,0x2c
c001abfd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac05:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac0a:	83 ec 04             	sub    esp,0x4
c001ac0d:	6a 06                	push   0x6
c001ac0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac17:	83 c0 0e             	add    eax,0xe
c001ac1a:	50                   	push   eax
c001ac1b:	e8 2c 5b fe ff       	call   c000074c <memcpy>
c001ac20:	83 c4 10             	add    esp,0x10
c001ac23:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac28:	83 ec 04             	sub    esp,0x4
c001ac2b:	6a 06                	push   0x6
c001ac2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac31:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac35:	83 c0 08             	add    eax,0x8
c001ac38:	50                   	push   eax
c001ac39:	e8 0e 5b fe ff       	call   c000074c <memcpy>
c001ac3e:	83 c4 10             	add    esp,0x10
c001ac41:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac4a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac51:	8a 00                	mov    al,BYTE PTR [eax]
c001ac53:	0f b6 c0             	movzx  eax,al
c001ac56:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac5f:	8d 50 01             	lea    edx,[eax+0x1]
c001ac62:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac66:	8a 00                	mov    al,BYTE PTR [eax]
c001ac68:	0f b6 c0             	movzx  eax,al
c001ac6b:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac70:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac75:	c1 e0 08             	shl    eax,0x8
c001ac78:	89 c2                	mov    edx,eax
c001ac7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac7e:	09 d0                	or     eax,edx
c001ac80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac84:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac88:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac8d:	75 3a                	jne    c001acc9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac93:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac96:	66 3d dc 05          	cmp    ax,0x5dc
c001ac9a:	77 10                	ja     c001acac <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aca0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aca3:	0f b7 c0             	movzx  eax,ax
c001aca6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acaa:	eb 1d                	jmp    c001acc9 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001acac:	83 ec 0c             	sub    esp,0xc
c001acaf:	68 48 be 02 c0       	push   0xc002be48
c001acb4:	e8 50 82 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001acb9:	83 c4 10             	add    esp,0x10
c001acbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acc0:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001acc4:	e9 c0 00 00 00       	jmp    c001ad89 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001acc9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001accd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acd1:	8b 00                	mov    eax,DWORD PTR [eax]
c001acd3:	83 ec 04             	sub    esp,0x4
c001acd6:	52                   	push   edx
c001acd7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acdb:	50                   	push   eax
c001acdc:	e8 6b 5a fe ff       	call   c000074c <memcpy>
c001ace1:	83 c4 10             	add    esp,0x10
c001ace4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ace8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acf0:	8d 50 01             	lea    edx,[eax+0x1]
c001acf3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acf7:	8a 00                	mov    al,BYTE PTR [eax]
c001acf9:	0f b6 c0             	movzx  eax,al
c001acfc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad04:	8d 50 01             	lea    edx,[eax+0x1]
c001ad07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad0b:	8a 00                	mov    al,BYTE PTR [eax]
c001ad0d:	0f b6 c0             	movzx  eax,al
c001ad10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad18:	8d 50 01             	lea    edx,[eax+0x1]
c001ad1b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad1f:	8a 00                	mov    al,BYTE PTR [eax]
c001ad21:	0f b6 c0             	movzx  eax,al
c001ad24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad2c:	8d 50 01             	lea    edx,[eax+0x1]
c001ad2f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad33:	8a 00                	mov    al,BYTE PTR [eax]
c001ad35:	0f b6 c0             	movzx  eax,al
c001ad38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad40:	c1 e0 18             	shl    eax,0x18
c001ad43:	89 c2                	mov    edx,eax
c001ad45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad49:	c1 e0 10             	shl    eax,0x10
c001ad4c:	09 c2                	or     edx,eax
c001ad4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad52:	c1 e0 08             	shl    eax,0x8
c001ad55:	09 d0                	or     eax,edx
c001ad57:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad63:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad67:	83 e8 04             	sub    eax,0x4
c001ad6a:	83 ec 08             	sub    esp,0x8
c001ad6d:	50                   	push   eax
c001ad6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad72:	e8 b6 fc ff ff       	call   c001aa2d <Net::crc32Calc(unsigned char*, int)>
c001ad77:	83 c4 10             	add    esp,0x10
c001ad7a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad7e:	0f 94 c2             	sete   dl
c001ad81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad85:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad88:	90                   	nop
c001ad89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad8d:	83 c4 2c             	add    esp,0x2c
c001ad90:	c2 04 00             	ret    0x4

c001ad93 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad93:	55                   	push   ebp
c001ad94:	57                   	push   edi
c001ad95:	56                   	push   esi
c001ad96:	53                   	push   ebx
c001ad97:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad9d:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ada4:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ada6:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ada9:	80 fb 40             	cmp    bl,0x40
c001adac:	75 1b                	jne    c001adc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001adae:	8a 16                	mov    dl,BYTE PTR [esi]
c001adb0:	84 d2                	test   dl,dl
c001adb2:	0f 84 f1 00 00 00    	je     c001aea9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adb8:	8d 46 01             	lea    eax,[esi+0x1]
c001adbb:	80 fa 3a             	cmp    dl,0x3a
c001adbe:	74 04                	je     c001adc4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001adc0:	89 c6                	mov    esi,eax
c001adc2:	eb ea                	jmp    c001adae <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001adc4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001adc7:	89 c6                	mov    esi,eax
c001adc9:	50                   	push   eax
c001adca:	6a 40                	push   0x40
c001adcc:	6a 00                	push   0x0
c001adce:	8d 44 24 24          	lea    eax,[esp+0x24]
c001add2:	50                   	push   eax
c001add3:	e8 a8 59 fe ff       	call   c0000780 <memset>
c001add8:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001addf:	31 c0                	xor    eax,eax
c001ade1:	83 c4 10             	add    esp,0x10
c001ade4:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ade6:	84 c9                	test   cl,cl
c001ade8:	0f 84 bb 00 00 00    	je     c001aea9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adee:	3d c7 00 00 00       	cmp    eax,0xc7
c001adf3:	0f 8f b0 00 00 00    	jg     c001aea9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adf9:	80 f9 0a             	cmp    cl,0xa
c001adfc:	0f 85 98 00 00 00    	jne    c001ae9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae02:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae07:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae0b:	a8 df                	test   al,0xdf
c001ae0d:	0f 94 c1             	sete   cl
c001ae10:	3c 23                	cmp    al,0x23
c001ae12:	0f 94 c2             	sete   dl
c001ae15:	08 d1                	or     cl,dl
c001ae17:	75 4a                	jne    c001ae63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae19:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae1c:	80 fa 01             	cmp    dl,0x1
c001ae1f:	76 42                	jbe    c001ae63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae21:	3c 5b                	cmp    al,0x5b
c001ae23:	75 42                	jne    c001ae67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae25:	80 fb 40             	cmp    bl,0x40
c001ae28:	75 39                	jne    c001ae63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae2a:	83 ec 0c             	sub    esp,0xc
c001ae2d:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae31:	52                   	push   edx
c001ae32:	e8 65 59 fe ff       	call   c000079c <strlen>
c001ae37:	83 c4 10             	add    esp,0x10
c001ae3a:	83 f8 3f             	cmp    eax,0x3f
c001ae3d:	77 6a                	ja     c001aea9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae3f:	50                   	push   eax
c001ae40:	50                   	push   eax
c001ae41:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae45:	52                   	push   edx
c001ae46:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae4a:	52                   	push   edx
c001ae4b:	e8 ec 59 fe ff       	call   c000083c <strcpy>
c001ae50:	58                   	pop    eax
c001ae51:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae55:	52                   	push   edx
c001ae56:	e8 41 59 fe ff       	call   c000079c <strlen>
c001ae5b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae60:	83 c4 10             	add    esp,0x10
c001ae63:	31 d2                	xor    edx,edx
c001ae65:	eb 3a                	jmp    c001aea1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae67:	80 fb 40             	cmp    bl,0x40
c001ae6a:	74 06                	je     c001ae72 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae6c:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae70:	eb 20                	jmp    c001ae92 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae72:	50                   	push   eax
c001ae73:	50                   	push   eax
c001ae74:	55                   	push   ebp
c001ae75:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae79:	50                   	push   eax
c001ae7a:	e8 49 5a fe ff       	call   c00008c8 <strcmp>
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	85 c0                	test   eax,eax
c001ae84:	75 dd                	jne    c001ae63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae86:	eb e4                	jmp    c001ae6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae88:	8d 50 01             	lea    edx,[eax+0x1]
c001ae8b:	80 f9 3d             	cmp    cl,0x3d
c001ae8e:	74 1d                	je     c001aead <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae90:	89 d0                	mov    eax,edx
c001ae92:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae94:	84 c9                	test   cl,cl
c001ae96:	75 f0                	jne    c001ae88 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae98:	eb 0f                	jmp    c001aea9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae9a:	8d 50 01             	lea    edx,[eax+0x1]
c001ae9d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aea1:	47                   	inc    edi
c001aea2:	89 d0                	mov    eax,edx
c001aea4:	e9 3b ff ff ff       	jmp    c001ade4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aea9:	31 c0                	xor    eax,eax
c001aeab:	eb 33                	jmp    c001aee0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aeb1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aeb4:	50                   	push   eax
c001aeb5:	50                   	push   eax
c001aeb6:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aeba:	50                   	push   eax
c001aebb:	56                   	push   esi
c001aebc:	e8 07 5a fe ff       	call   c00008c8 <strcmp>
c001aec1:	83 c4 10             	add    esp,0x10
c001aec4:	85 c0                	test   eax,eax
c001aec6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aeca:	75 97                	jne    c001ae63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aecc:	51                   	push   ecx
c001aecd:	51                   	push   ecx
c001aece:	52                   	push   edx
c001aecf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aed6:	e8 61 59 fe ff       	call   c000083c <strcpy>
c001aedb:	83 c4 10             	add    esp,0x10
c001aede:	b0 01                	mov    al,0x1
c001aee0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aee6:	5b                   	pop    ebx
c001aee7:	5e                   	pop    esi
c001aee8:	5f                   	pop    edi
c001aee9:	5d                   	pop    ebp
c001aeea:	c3                   	ret    

c001aeeb <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aeeb:	57                   	push   edi
c001aeec:	56                   	push   esi
c001aeed:	53                   	push   ebx
c001aeee:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aef4:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aefb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af02:	53                   	push   ebx
c001af03:	e8 94 58 fe ff       	call   c000079c <strlen>
c001af08:	89 34 24             	mov    DWORD PTR [esp],esi
c001af0b:	89 c7                	mov    edi,eax
c001af0d:	e8 8a 58 fe ff       	call   c000079c <strlen>
c001af12:	83 c4 10             	add    esp,0x10
c001af15:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af19:	3d ff 00 00 00       	cmp    eax,0xff
c001af1e:	0f 87 d3 00 00 00    	ja     c001aff7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af24:	57                   	push   edi
c001af25:	57                   	push   edi
c001af26:	56                   	push   esi
c001af27:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af2b:	56                   	push   esi
c001af2c:	e8 0b 59 fe ff       	call   c000083c <strcpy>
c001af31:	58                   	pop    eax
c001af32:	5a                   	pop    edx
c001af33:	68 91 c3 02 c0       	push   0xc002c391
c001af38:	56                   	push   esi
c001af39:	e8 3e 5a fe ff       	call   c000097c <strcat>
c001af3e:	59                   	pop    ecx
c001af3f:	5f                   	pop    edi
c001af40:	53                   	push   ebx
c001af41:	56                   	push   esi
c001af42:	e8 35 5a fe ff       	call   c000097c <strcat>
c001af47:	58                   	pop    eax
c001af48:	5a                   	pop    edx
c001af49:	68 94 be 02 c0       	push   0xc002be94
c001af4e:	56                   	push   esi
c001af4f:	e8 28 5a fe ff       	call   c000097c <strcat>
c001af54:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af5b:	e8 eb 48 ff ff       	call   c000f84b <malloc>
c001af60:	83 c4 0c             	add    esp,0xc
c001af63:	89 c3                	mov    ebx,eax
c001af65:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001af6b:	56                   	push   esi
c001af6c:	50                   	push   eax
c001af6d:	e8 f6 84 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001af72:	83 c4 10             	add    esp,0x10
c001af75:	85 db                	test   ebx,ebx
c001af77:	74 7e                	je     c001aff7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af79:	51                   	push   ecx
c001af7a:	51                   	push   ecx
c001af7b:	6a 01                	push   0x1
c001af7d:	53                   	push   ebx
c001af7e:	e8 49 85 ff ff       	call   c00134cc <File::open(FileOpenMode)>
c001af83:	83 c4 10             	add    esp,0x10
c001af86:	85 c0                	test   eax,eax
c001af88:	74 08                	je     c001af92 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af8a:	83 ec 0c             	sub    esp,0xc
c001af8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af8f:	53                   	push   ebx
c001af90:	eb 5f                	jmp    c001aff1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af92:	52                   	push   edx
c001af93:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af97:	50                   	push   eax
c001af98:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af9c:	50                   	push   eax
c001af9d:	53                   	push   ebx
c001af9e:	e8 d5 87 ff ff       	call   c0013778 <File::stat(unsigned long long*, bool*)>
c001afa3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afa7:	83 c4 10             	add    esp,0x10
c001afaa:	89 c1                	mov    ecx,eax
c001afac:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001afb0:	74 31                	je     c001afe3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afb2:	83 ec 0c             	sub    esp,0xc
c001afb5:	50                   	push   eax
c001afb6:	e8 90 48 ff ff       	call   c000f84b <malloc>
c001afbb:	89 c6                	mov    esi,eax
c001afbd:	58                   	pop    eax
c001afbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afc0:	8d 54 24 20          	lea    edx,[esp+0x20]
c001afc4:	52                   	push   edx
c001afc5:	56                   	push   esi
c001afc6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afce:	53                   	push   ebx
c001afcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afd2:	83 c4 20             	add    esp,0x20
c001afd5:	85 c0                	test   eax,eax
c001afd7:	75 0a                	jne    c001afe3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afdd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afe1:	74 18                	je     c001affb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001afe3:	83 ec 0c             	sub    esp,0xc
c001afe6:	53                   	push   ebx
c001afe7:	e8 3e 85 ff ff       	call   c001352a <File::close()>
c001afec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aff1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aff4:	83 c4 10             	add    esp,0x10
c001aff7:	31 c0                	xor    eax,eax
c001aff9:	eb 3b                	jmp    c001b036 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001affb:	83 ec 0c             	sub    esp,0xc
c001affe:	53                   	push   ebx
c001afff:	e8 26 85 ff ff       	call   c001352a <File::close()>
c001b004:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b006:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b009:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b00c:	83 c4 0c             	add    esp,0xc
c001b00f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b016:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b01d:	56                   	push   esi
c001b01e:	e8 70 fd ff ff       	call   c001ad93 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b023:	89 34 24             	mov    DWORD PTR [esp],esi
c001b026:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b02a:	e8 2c 48 ff ff       	call   c000f85b <free>
c001b02f:	83 c4 10             	add    esp,0x10
c001b032:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b036:	81 c4 20 01 00 00    	add    esp,0x120
c001b03c:	5b                   	pop    ebx
c001b03d:	5e                   	pop    esi
c001b03e:	5f                   	pop    edi
c001b03f:	c3                   	ret    

c001b040 <Reg::getLine(char*, char*, char*)>:
c001b040:	57                   	push   edi
c001b041:	56                   	push   esi
c001b042:	53                   	push   ebx
c001b043:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b047:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b04b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b04f:	57                   	push   edi
c001b050:	56                   	push   esi
c001b051:	53                   	push   ebx
c001b052:	68 99 be 02 c0       	push   0xc002be99
c001b057:	e8 8f fe ff ff       	call   c001aeeb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b05c:	83 c4 10             	add    esp,0x10
c001b05f:	84 c0                	test   al,al
c001b061:	75 10                	jne    c001b073 <Reg::getLine(char*, char*, char*)+0x33>
c001b063:	57                   	push   edi
c001b064:	56                   	push   esi
c001b065:	53                   	push   ebx
c001b066:	68 be be 02 c0       	push   0xc002bebe
c001b06b:	e8 7b fe ff ff       	call   c001aeeb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b070:	83 c4 10             	add    esp,0x10
c001b073:	5b                   	pop    ebx
c001b074:	5e                   	pop    esi
c001b075:	5f                   	pop    edi
c001b076:	c3                   	ret    

c001b077 <Reg::readInt(char*, char*, int*)>:
c001b077:	55                   	push   ebp
c001b078:	57                   	push   edi
c001b079:	56                   	push   esi
c001b07a:	53                   	push   ebx
c001b07b:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b081:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b085:	57                   	push   edi
c001b086:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b08d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b094:	e8 a7 ff ff ff       	call   c001b040 <Reg::getLine(char*, char*, char*)>
c001b099:	83 c4 10             	add    esp,0x10
c001b09c:	84 c0                	test   al,al
c001b09e:	0f 84 b3 00 00 00    	je     c001b157 <Reg::readInt(char*, char*, int*)+0xe0>
c001b0a4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0a8:	80 fa 2b             	cmp    dl,0x2b
c001b0ab:	74 0c                	je     c001b0b9 <Reg::readInt(char*, char*, int*)+0x42>
c001b0ad:	80 fa 2d             	cmp    dl,0x2d
c001b0b0:	75 0e                	jne    c001b0c0 <Reg::readInt(char*, char*, int*)+0x49>
c001b0b2:	ba 01 00 00 00       	mov    edx,0x1
c001b0b7:	eb 0b                	jmp    c001b0c4 <Reg::readInt(char*, char*, int*)+0x4d>
c001b0b9:	ba 01 00 00 00       	mov    edx,0x1
c001b0be:	eb 02                	jmp    c001b0c2 <Reg::readInt(char*, char*, int*)+0x4b>
c001b0c0:	31 d2                	xor    edx,edx
c001b0c2:	31 c0                	xor    eax,eax
c001b0c4:	be 0a 00 00 00       	mov    esi,0xa
c001b0c9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0ce:	75 20                	jne    c001b0f0 <Reg::readInt(char*, char*, int*)+0x79>
c001b0d0:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b0d4:	80 f9 78             	cmp    cl,0x78
c001b0d7:	75 0a                	jne    c001b0e3 <Reg::readInt(char*, char*, int*)+0x6c>
c001b0d9:	83 c2 02             	add    edx,0x2
c001b0dc:	be 10 00 00 00       	mov    esi,0x10
c001b0e1:	eb 0d                	jmp    c001b0f0 <Reg::readInt(char*, char*, int*)+0x79>
c001b0e3:	80 f9 62             	cmp    cl,0x62
c001b0e6:	75 08                	jne    c001b0f0 <Reg::readInt(char*, char*, int*)+0x79>
c001b0e8:	83 c2 02             	add    edx,0x2
c001b0eb:	be 02 00 00 00       	mov    esi,0x2
c001b0f0:	01 d7                	add    edi,edx
c001b0f2:	31 d2                	xor    edx,edx
c001b0f4:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0f6:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0fa:	80 fb 0d             	cmp    bl,0xd
c001b0fd:	0f 94 c3             	sete   bl
c001b100:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b105:	0f 94 c1             	sete   cl
c001b108:	08 cb                	or     bl,cl
c001b10a:	75 3a                	jne    c001b146 <Reg::readInt(char*, char*, int*)+0xcf>
c001b10c:	0f af d6             	imul   edx,esi
c001b10f:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b114:	83 fe 10             	cmp    esi,0x10
c001b117:	75 26                	jne    c001b13f <Reg::readInt(char*, char*, int*)+0xc8>
c001b119:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b11d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b120:	89 e9                	mov    ecx,ebp
c001b122:	80 f9 05             	cmp    cl,0x5
c001b125:	77 06                	ja     c001b12d <Reg::readInt(char*, char*, int*)+0xb6>
c001b127:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b12b:	eb 16                	jmp    c001b143 <Reg::readInt(char*, char*, int*)+0xcc>
c001b12d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b131:	83 e9 61             	sub    ecx,0x61
c001b134:	80 f9 05             	cmp    cl,0x5
c001b137:	77 06                	ja     c001b13f <Reg::readInt(char*, char*, int*)+0xc8>
c001b139:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b13d:	eb 04                	jmp    c001b143 <Reg::readInt(char*, char*, int*)+0xcc>
c001b13f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b143:	47                   	inc    edi
c001b144:	eb ae                	jmp    c001b0f4 <Reg::readInt(char*, char*, int*)+0x7d>
c001b146:	84 c0                	test   al,al
c001b148:	74 02                	je     c001b14c <Reg::readInt(char*, char*, int*)+0xd5>
c001b14a:	f7 da                	neg    edx
c001b14c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b153:	89 10                	mov    DWORD PTR [eax],edx
c001b155:	88 d8                	mov    al,bl
c001b157:	81 c4 ec 00 00 00    	add    esp,0xec
c001b15d:	5b                   	pop    ebx
c001b15e:	5e                   	pop    esi
c001b15f:	5f                   	pop    edi
c001b160:	5d                   	pop    ebp
c001b161:	c3                   	ret    

c001b162 <Reg::readString(char*, char*, char*, int)>:
c001b162:	57                   	push   edi
c001b163:	56                   	push   esi
c001b164:	53                   	push   ebx
c001b165:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b16b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b172:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b176:	57                   	push   edi
c001b177:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b17e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b185:	e8 b6 fe ff ff       	call   c001b040 <Reg::getLine(char*, char*, char*)>
c001b18a:	83 c4 10             	add    esp,0x10
c001b18d:	89 c6                	mov    esi,eax
c001b18f:	84 c0                	test   al,al
c001b191:	74 44                	je     c001b1d7 <Reg::readString(char*, char*, char*, int)+0x75>
c001b193:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b19a:	31 c0                	xor    eax,eax
c001b19c:	4a                   	dec    edx
c001b19d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1a0:	84 c9                	test   cl,cl
c001b1a2:	74 0f                	je     c001b1b3 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1a4:	39 c2                	cmp    edx,eax
c001b1a6:	7e 0b                	jle    c001b1b3 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1a8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b1ab:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b1b0:	40                   	inc    eax
c001b1b1:	eb ea                	jmp    c001b19d <Reg::readString(char*, char*, char*, int)+0x3b>
c001b1b3:	83 ec 0c             	sub    esp,0xc
c001b1b6:	53                   	push   ebx
c001b1b7:	e8 e0 55 fe ff       	call   c000079c <strlen>
c001b1bc:	83 c4 10             	add    esp,0x10
c001b1bf:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1c4:	75 11                	jne    c001b1d7 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1c6:	83 ec 0c             	sub    esp,0xc
c001b1c9:	53                   	push   ebx
c001b1ca:	e8 cd 55 fe ff       	call   c000079c <strlen>
c001b1cf:	83 c4 10             	add    esp,0x10
c001b1d2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b1d7:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1dd:	89 f0                	mov    eax,esi
c001b1df:	5b                   	pop    ebx
c001b1e0:	5e                   	pop    esi
c001b1e1:	5f                   	pop    edi
c001b1e2:	c3                   	ret    

c001b1e3 <Reg::readBool(char*, char*, bool*)>:
c001b1e3:	83 ec 20             	sub    esp,0x20
c001b1e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1ea:	50                   	push   eax
c001b1eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f3:	e8 7f fe ff ff       	call   c001b077 <Reg::readInt(char*, char*, int*)>
c001b1f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1fd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b201:	0f 95 02             	setne  BYTE PTR [edx]
c001b204:	83 c4 2c             	add    esp,0x2c
c001b207:	c3                   	ret    

c001b208 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b208:	53                   	push   ebx
c001b209:	83 ec 1c             	sub    esp,0x1c
c001b20c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b210:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b214:	50                   	push   eax
c001b215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b219:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21d:	e8 c1 ff ff ff       	call   c001b1e3 <Reg::readBool(char*, char*, bool*)>
c001b222:	83 c4 10             	add    esp,0x10
c001b225:	84 c0                	test   al,al
c001b227:	74 04                	je     c001b22d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b229:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b22d:	88 d8                	mov    al,bl
c001b22f:	83 c4 18             	add    esp,0x18
c001b232:	5b                   	pop    ebx
c001b233:	c3                   	ret    

c001b234 <Reg::readIntWithDefault(char*, char*, int)>:
c001b234:	53                   	push   ebx
c001b235:	83 ec 1c             	sub    esp,0x1c
c001b238:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b23c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b240:	50                   	push   eax
c001b241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b245:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b249:	e8 29 fe ff ff       	call   c001b077 <Reg::readInt(char*, char*, int*)>
c001b24e:	83 c4 10             	add    esp,0x10
c001b251:	84 c0                	test   al,al
c001b253:	74 04                	je     c001b259 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b255:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b259:	89 d8                	mov    eax,ebx
c001b25b:	83 c4 18             	add    esp,0x18
c001b25e:	5b                   	pop    ebx
c001b25f:	c3                   	ret    

c001b260 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b260:	57                   	push   edi
c001b261:	56                   	push   esi
c001b262:	53                   	push   ebx
c001b263:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b267:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b26b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b26f:	56                   	push   esi
c001b270:	53                   	push   ebx
c001b271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b279:	e8 e4 fe ff ff       	call   c001b162 <Reg::readString(char*, char*, char*, int)>
c001b27e:	83 c4 10             	add    esp,0x10
c001b281:	84 c0                	test   al,al
c001b283:	75 1b                	jne    c001b2a0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b285:	50                   	push   eax
c001b286:	56                   	push   esi
c001b287:	4e                   	dec    esi
c001b288:	6a 00                	push   0x0
c001b28a:	53                   	push   ebx
c001b28b:	e8 f0 54 fe ff       	call   c0000780 <memset>
c001b290:	83 c4 0c             	add    esp,0xc
c001b293:	56                   	push   esi
c001b294:	57                   	push   edi
c001b295:	53                   	push   ebx
c001b296:	89 fb                	mov    ebx,edi
c001b298:	e8 af 54 fe ff       	call   c000074c <memcpy>
c001b29d:	83 c4 10             	add    esp,0x10
c001b2a0:	89 d8                	mov    eax,ebx
c001b2a2:	5b                   	pop    ebx
c001b2a3:	5e                   	pop    esi
c001b2a4:	5f                   	pop    edi
c001b2a5:	c3                   	ret    

c001b2a6 <Sys::eject(regs*)>:
c001b2a6:	83 ec 0c             	sub    esp,0xc
c001b2a9:	83 ca ff             	or     edx,0xffffffff
c001b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b2b3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2b8:	83 e9 41             	sub    ecx,0x41
c001b2bb:	83 f9 19             	cmp    ecx,0x19
c001b2be:	77 18                	ja     c001b2d8 <Sys::eject(regs*)+0x32>
c001b2c0:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c001b2c7:	85 c9                	test   ecx,ecx
c001b2c9:	74 0d                	je     c001b2d8 <Sys::eject(regs*)+0x32>
c001b2cb:	83 ec 0c             	sub    esp,0xc
c001b2ce:	51                   	push   ecx
c001b2cf:	e8 5c b4 ff ff       	call   c0016730 <LogicalDisk::eject()>
c001b2d4:	83 c4 10             	add    esp,0x10
c001b2d7:	99                   	cdq    
c001b2d8:	83 c4 0c             	add    esp,0xc
c001b2db:	c3                   	ret    

c001b2dc <Sys::exit(regs*)>:
c001b2dc:	83 ec 18             	sub    esp,0x18
c001b2df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2e6:	e8 b4 35 00 00       	call   c001e89f <terminateTask(int)>
c001b2eb:	83 c8 ff             	or     eax,0xffffffff
c001b2ee:	83 c4 1c             	add    esp,0x1c
c001b2f1:	89 c2                	mov    edx,eax
c001b2f3:	c3                   	ret    

c001b2f4 <Sys::getCwd(regs*)>:
c001b2f4:	83 ec 10             	sub    esp,0x10
c001b2f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2fb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2fe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b301:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b306:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b309:	e8 5c 7f ff ff       	call   c001326a <Fs::getcwd(Process*, char*, int)>
c001b30e:	83 c4 1c             	add    esp,0x1c
c001b311:	99                   	cdq    
c001b312:	c3                   	ret    

c001b313 <Sys::getPID(regs*)>:
c001b313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b318:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b31b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b31d:	99                   	cdq    
c001b31e:	c3                   	ret    

c001b31f <Sys::getRAMData(regs*)>:
c001b31f:	8b 0d 54 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e654
c001b325:	6b 05 50 e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e650,0x64
c001b32c:	99                   	cdq    
c001b32d:	f7 f9                	idiv   ecx
c001b32f:	c1 e0 18             	shl    eax,0x18
c001b332:	09 c8                	or     eax,ecx
c001b334:	99                   	cdq    
c001b335:	c3                   	ret    

c001b336 <Sys::loadDLL(regs*)>:
c001b336:	56                   	push   esi
c001b337:	53                   	push   ebx
c001b338:	31 d2                	xor    edx,edx
c001b33a:	51                   	push   ecx
c001b33b:	b8 01 00 00 00       	mov    eax,0x1
c001b340:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b344:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b348:	0f 84 8c 00 00 00    	je     c001b3da <Sys::loadDLL(regs*)+0xa4>
c001b34e:	83 ec 0c             	sub    esp,0xc
c001b351:	68 14 01 00 00       	push   0x114
c001b356:	e8 f0 44 ff ff       	call   c000f84b <malloc>
c001b35b:	83 c4 0c             	add    esp,0xc
c001b35e:	89 c3                	mov    ebx,eax
c001b360:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b365:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b368:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b36b:	53                   	push   ebx
c001b36c:	e8 f7 80 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001b371:	83 c4 10             	add    esp,0x10
c001b374:	31 d2                	xor    edx,edx
c001b376:	b8 02 00 00 00       	mov    eax,0x2
c001b37b:	85 db                	test   ebx,ebx
c001b37d:	74 5b                	je     c001b3da <Sys::loadDLL(regs*)+0xa4>
c001b37f:	83 ec 0c             	sub    esp,0xc
c001b382:	53                   	push   ebx
c001b383:	e8 b2 83 ff ff       	call   c001373a <File::exists()>
c001b388:	83 c4 10             	add    esp,0x10
c001b38b:	84 c0                	test   al,al
c001b38d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b38f:	75 11                	jne    c001b3a2 <Sys::loadDLL(regs*)+0x6c>
c001b391:	83 ec 0c             	sub    esp,0xc
c001b394:	53                   	push   ebx
c001b395:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b398:	83 c4 10             	add    esp,0x10
c001b39b:	b8 03 00 00 00       	mov    eax,0x3
c001b3a0:	eb 36                	jmp    c001b3d8 <Sys::loadDLL(regs*)+0xa2>
c001b3a2:	83 ec 0c             	sub    esp,0xc
c001b3a5:	53                   	push   ebx
c001b3a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3a9:	58                   	pop    eax
c001b3aa:	5a                   	pop    edx
c001b3ab:	6a 00                	push   0x0
c001b3ad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3b0:	e8 c5 23 00 00       	call   c001d77a <Thr::loadDLL(char const*, bool)>
c001b3b5:	83 c4 10             	add    esp,0x10
c001b3b8:	89 c1                	mov    ecx,eax
c001b3ba:	31 d2                	xor    edx,edx
c001b3bc:	b8 04 00 00 00       	mov    eax,0x4
c001b3c1:	85 c9                	test   ecx,ecx
c001b3c3:	74 15                	je     c001b3da <Sys::loadDLL(regs*)+0xa4>
c001b3c5:	53                   	push   ebx
c001b3c6:	53                   	push   ebx
c001b3c7:	ff 35 08 e6 02 c0    	push   DWORD PTR ds:0xc002e608
c001b3cd:	51                   	push   ecx
c001b3ce:	e8 db 25 00 00       	call   c001d9ae <Thr::executeDLL(unsigned long, void*)>
c001b3d3:	83 c4 10             	add    esp,0x10
c001b3d6:	31 c0                	xor    eax,eax
c001b3d8:	31 d2                	xor    edx,edx
c001b3da:	59                   	pop    ecx
c001b3db:	5b                   	pop    ebx
c001b3dc:	5e                   	pop    esi
c001b3dd:	c3                   	ret    

c001b3de <Sys::read(regs*)>:
c001b3de:	57                   	push   edi
c001b3df:	56                   	push   esi
c001b3e0:	53                   	push   ebx
c001b3e1:	83 ec 10             	sub    esp,0x10
c001b3e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3eb:	83 f8 02             	cmp    eax,0x2
c001b3ee:	77 10                	ja     c001b400 <Sys::read(regs*)+0x22>
c001b3f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3f8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3fe:	eb 0e                	jmp    c001b40e <Sys::read(regs*)+0x30>
c001b400:	83 ec 0c             	sub    esp,0xc
c001b403:	50                   	push   eax
c001b404:	e8 ec 65 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b409:	83 c4 10             	add    esp,0x10
c001b40c:	89 c1                	mov    ecx,eax
c001b40e:	83 c8 ff             	or     eax,0xffffffff
c001b411:	85 c9                	test   ecx,ecx
c001b413:	89 c2                	mov    edx,eax
c001b415:	74 28                	je     c001b43f <Sys::read(regs*)+0x61>
c001b417:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b41f:	31 ff                	xor    edi,edi
c001b421:	83 ec 0c             	sub    esp,0xc
c001b424:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b426:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b42a:	52                   	push   edx
c001b42b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b42e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b431:	57                   	push   edi
c001b432:	56                   	push   esi
c001b433:	51                   	push   ecx
c001b434:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b437:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b43b:	83 c4 20             	add    esp,0x20
c001b43e:	99                   	cdq    
c001b43f:	83 c4 10             	add    esp,0x10
c001b442:	5b                   	pop    ebx
c001b443:	5e                   	pop    esi
c001b444:	5f                   	pop    edi
c001b445:	c3                   	ret    

c001b446 <Sys::sbrk(regs*)>:
c001b446:	56                   	push   esi
c001b447:	53                   	push   ebx
c001b448:	50                   	push   eax
c001b449:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b452:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b455:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b458:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b45e:	85 db                	test   ebx,ebx
c001b460:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b463:	74 02                	je     c001b467 <Sys::sbrk(regs*)+0x21>
c001b465:	79 06                	jns    c001b46d <Sys::sbrk(regs*)+0x27>
c001b467:	89 f0                	mov    eax,esi
c001b469:	31 d2                	xor    edx,edx
c001b46b:	eb 2a                	jmp    c001b497 <Sys::sbrk(regs*)+0x51>
c001b46d:	83 c8 ff             	or     eax,0xffffffff
c001b470:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b476:	89 c2                	mov    edx,eax
c001b478:	77 1d                	ja     c001b497 <Sys::sbrk(regs*)+0x51>
c001b47a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b480:	50                   	push   eax
c001b481:	c1 ea 0c             	shr    edx,0xc
c001b484:	68 07 0c 00 00       	push   0xc07
c001b489:	52                   	push   edx
c001b48a:	51                   	push   ecx
c001b48b:	e8 d2 6f ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001b490:	89 f0                	mov    eax,esi
c001b492:	31 d2                	xor    edx,edx
c001b494:	83 c4 10             	add    esp,0x10
c001b497:	59                   	pop    ecx
c001b498:	5b                   	pop    ebx
c001b499:	5e                   	pop    esi
c001b49a:	c3                   	ret    

c001b49b <Sys::setCwd(regs*)>:
c001b49b:	83 ec 14             	sub    esp,0x14
c001b49e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4a2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4aa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4ad:	e8 27 83 ff ff       	call   c00137d9 <Fs::setcwd(Process*, char*)>
c001b4b2:	83 c4 1c             	add    esp,0x1c
c001b4b5:	99                   	cdq    
c001b4b6:	c3                   	ret    

c001b4b7 <Sys::setTime(regs*)>:
c001b4b7:	55                   	push   ebp
c001b4b8:	31 d2                	xor    edx,edx
c001b4ba:	57                   	push   edi
c001b4bb:	bf 18 00 00 00       	mov    edi,0x18
c001b4c0:	56                   	push   esi
c001b4c1:	53                   	push   ebx
c001b4c2:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4c7:	83 ec 30             	sub    esp,0x30
c001b4ca:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4ce:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4d1:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4d4:	f7 f3                	div    ebx
c001b4d6:	89 d6                	mov    esi,edx
c001b4d8:	31 d2                	xor    edx,edx
c001b4da:	f7 f3                	div    ebx
c001b4dc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4e3:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4e8:	31 d2                	xor    edx,edx
c001b4ea:	f7 f3                	div    ebx
c001b4ec:	31 d2                	xor    edx,edx
c001b4ee:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4f3:	f7 f7                	div    edi
c001b4f5:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4f8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4fc:	0f b7 cd             	movzx  ecx,bp
c001b4ff:	56                   	push   esi
c001b500:	89 c7                	mov    edi,eax
c001b502:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b506:	c1 e6 10             	shl    esi,0x10
c001b509:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b50d:	83 e7 1f             	and    edi,0x1f
c001b510:	51                   	push   ecx
c001b511:	47                   	inc    edi
c001b512:	c1 e8 05             	shr    eax,0x5
c001b515:	31 d2                	xor    edx,edx
c001b517:	f7 f3                	div    ebx
c001b519:	31 db                	xor    ebx,ebx
c001b51b:	52                   	push   edx
c001b51c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b520:	57                   	push   edi
c001b521:	68 d9 be 02 c0       	push   0xc002bed9
c001b526:	e8 de 79 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001b52b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b52f:	89 f8                	mov    eax,edi
c001b531:	31 c9                	xor    ecx,ecx
c001b533:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b537:	88 c1                	mov    cl,al
c001b539:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b53f:	88 d5                	mov    ch,dl
c001b541:	c1 e0 10             	shl    eax,0x10
c001b544:	0f b7 d1             	movzx  edx,cx
c001b547:	09 c2                	or     edx,eax
c001b549:	89 d8                	mov    eax,ebx
c001b54b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b550:	09 f0                	or     eax,esi
c001b552:	89 c3                	mov    ebx,eax
c001b554:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b558:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b55c:	83 c4 18             	add    esp,0x18
c001b55f:	53                   	push   ebx
c001b560:	52                   	push   edx
c001b561:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b565:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b569:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b56d:	e8 81 89 ff ff       	call   c0013ef3 <datetimeToSeconds(datetime_t)>
c001b572:	83 c4 0c             	add    esp,0xc
c001b575:	52                   	push   edx
c001b576:	50                   	push   eax
c001b577:	56                   	push   esi
c001b578:	e8 fd 8a ff ff       	call   c001407a <secondsToDatetime(unsigned long long)>
c001b57d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b581:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b585:	51                   	push   ecx
c001b586:	89 d6                	mov    esi,edx
c001b588:	51                   	push   ecx
c001b589:	c1 ee 10             	shr    esi,0x10
c001b58c:	89 f3                	mov    ebx,esi
c001b58e:	0f b6 f3             	movzx  esi,bl
c001b591:	56                   	push   esi
c001b592:	0f b6 f6             	movzx  esi,dh
c001b595:	0f b6 d2             	movzx  edx,dl
c001b598:	56                   	push   esi
c001b599:	52                   	push   edx
c001b59a:	89 c2                	mov    edx,eax
c001b59c:	c1 ea 10             	shr    edx,0x10
c001b59f:	52                   	push   edx
c001b5a0:	0f b6 d4             	movzx  edx,ah
c001b5a3:	0f b6 c0             	movzx  eax,al
c001b5a6:	52                   	push   edx
c001b5a7:	50                   	push   eax
c001b5a8:	68 f5 be 02 c0       	push   0xc002bef5
c001b5ad:	e8 57 79 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001b5b2:	83 c4 2c             	add    esp,0x2c
c001b5b5:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001b5ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5c2:	53                   	push   ebx
c001b5c3:	51                   	push   ecx
c001b5c4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5ca:	e8 4b 8a ff ff       	call   c001401a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5cf:	83 f0 01             	xor    eax,0x1
c001b5d2:	31 d2                	xor    edx,edx
c001b5d4:	0f b6 c0             	movzx  eax,al
c001b5d7:	83 c4 3c             	add    esp,0x3c
c001b5da:	5b                   	pop    ebx
c001b5db:	5e                   	pop    esi
c001b5dc:	5f                   	pop    edi
c001b5dd:	5d                   	pop    ebp
c001b5de:	c3                   	ret    

c001b5df <Sys::timezone(regs*)>:
c001b5df:	53                   	push   ebx
c001b5e0:	83 ec 08             	sub    esp,0x8
c001b5e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5e7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5eb:	75 17                	jne    c001b604 <Sys::timezone(regs*)+0x25>
c001b5ed:	83 ec 0c             	sub    esp,0xc
c001b5f0:	68 11 bf 02 c0       	push   0xc002bf11
c001b5f5:	e8 0f 79 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001b5fa:	83 c8 ff             	or     eax,0xffffffff
c001b5fd:	83 c4 10             	add    esp,0x10
c001b600:	89 c2                	mov    edx,eax
c001b602:	eb 20                	jmp    c001b624 <Sys::timezone(regs*)+0x45>
c001b604:	83 ec 0c             	sub    esp,0xc
c001b607:	68 49 bf 02 c0       	push   0xc002bf49
c001b60c:	e8 f8 78 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001b611:	58                   	pop    eax
c001b612:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b615:	e8 62 87 ff ff       	call   c0013d7c <User::loadClockSettings(int)>
c001b61a:	83 c4 10             	add    esp,0x10
c001b61d:	b8 01 00 00 00       	mov    eax,0x1
c001b622:	31 d2                	xor    edx,edx
c001b624:	83 c4 08             	add    esp,0x8
c001b627:	5b                   	pop    ebx
c001b628:	c3                   	ret    

c001b629 <Sys::write(regs*)>:
c001b629:	57                   	push   edi
c001b62a:	56                   	push   esi
c001b62b:	53                   	push   ebx
c001b62c:	83 ec 10             	sub    esp,0x10
c001b62f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b633:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b636:	83 f8 02             	cmp    eax,0x2
c001b639:	77 10                	ja     c001b64b <Sys::write(regs*)+0x22>
c001b63b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b640:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b643:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b649:	eb 0e                	jmp    c001b659 <Sys::write(regs*)+0x30>
c001b64b:	83 ec 0c             	sub    esp,0xc
c001b64e:	50                   	push   eax
c001b64f:	e8 a1 63 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b654:	83 c4 10             	add    esp,0x10
c001b657:	89 c1                	mov    ecx,eax
c001b659:	83 c8 ff             	or     eax,0xffffffff
c001b65c:	85 c9                	test   ecx,ecx
c001b65e:	89 c2                	mov    edx,eax
c001b660:	74 28                	je     c001b68a <Sys::write(regs*)+0x61>
c001b662:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b66a:	31 ff                	xor    edi,edi
c001b66c:	83 ec 0c             	sub    esp,0xc
c001b66f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b671:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b675:	52                   	push   edx
c001b676:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b679:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b67c:	57                   	push   edi
c001b67d:	56                   	push   esi
c001b67e:	51                   	push   ecx
c001b67f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b682:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b686:	83 c4 20             	add    esp,0x20
c001b689:	99                   	cdq    
c001b68a:	83 c4 10             	add    esp,0x10
c001b68d:	5b                   	pop    ebx
c001b68e:	5e                   	pop    esi
c001b68f:	5f                   	pop    edi
c001b690:	c3                   	ret    

c001b691 <Sys::wsbe(regs*)>:
c001b691:	57                   	push   edi
c001b692:	b9 0b 00 00 00       	mov    ecx,0xb
c001b697:	56                   	push   esi
c001b698:	be 88 bf 02 c0       	mov    esi,0xc002bf88
c001b69d:	53                   	push   ebx
c001b69e:	83 ec 30             	sub    esp,0x30
c001b6a1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6a5:	fc                   	cld    
c001b6a6:	83 ec 0c             	sub    esp,0xc
c001b6a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6ab:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6b7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6bd:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6bf:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6c2:	57                   	push   edi
c001b6c3:	e8 d4 50 fe ff       	call   c000079c <strlen>
c001b6c8:	5a                   	pop    edx
c001b6c9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6cd:	52                   	push   edx
c001b6ce:	31 d2                	xor    edx,edx
c001b6d0:	57                   	push   edi
c001b6d1:	52                   	push   edx
c001b6d2:	50                   	push   eax
c001b6d3:	56                   	push   esi
c001b6d4:	ff d3                	call   ebx
c001b6d6:	83 c4 14             	add    esp,0x14
c001b6d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6dd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6e0:	e8 ba 31 00 00       	call   c001e89f <terminateTask(int)>
c001b6e5:	83 c4 40             	add    esp,0x40
c001b6e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6ed:	5b                   	pop    ebx
c001b6ee:	31 d2                	xor    edx,edx
c001b6f0:	5e                   	pop    esi
c001b6f1:	5f                   	pop    edi
c001b6f2:	c3                   	ret    

c001b6f3 <Sys::yield(regs*)>:
c001b6f3:	57                   	push   edi
c001b6f4:	56                   	push   esi
c001b6f5:	53                   	push   ebx
c001b6f6:	e8 27 27 00 00       	call   c001de22 <lockScheduler()>
c001b6fb:	e8 98 2a 00 00       	call   c001e198 <schedule()>
c001b700:	e8 1f 27 00 00       	call   c001de24 <unlockScheduler()>
c001b705:	8b 35 90 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec90
c001b70b:	8b 3d 94 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec94
c001b711:	89 f0                	mov    eax,esi
c001b713:	89 fb                	mov    ebx,edi
c001b715:	89 f1                	mov    ecx,esi
c001b717:	c1 e0 07             	shl    eax,0x7
c001b71a:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b71e:	25 80 30 0f 00       	and    eax,0xf3080
c001b723:	c1 eb 17             	shr    ebx,0x17
c001b726:	31 c8                	xor    eax,ecx
c001b728:	89 da                	mov    edx,ebx
c001b72a:	5b                   	pop    ebx
c001b72b:	5e                   	pop    esi
c001b72c:	5f                   	pop    edi
c001b72d:	c3                   	ret    

c001b72e <sysCallSeekDir(regs*)>:
c001b72e:	31 c0                	xor    eax,eax
c001b730:	31 d2                	xor    edx,edx
c001b732:	c3                   	ret    

c001b733 <sysCallTellDir(regs*)>:
c001b733:	31 c0                	xor    eax,eax
c001b735:	31 d2                	xor    edx,edx
c001b737:	c3                   	ret    

c001b738 <sysCallVerify(regs*)>:
c001b738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b73c:	31 d2                	xor    edx,edx
c001b73e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b741:	c3                   	ret    

c001b742 <sysFormatDisk(regs*)>:
c001b742:	56                   	push   esi
c001b743:	53                   	push   ebx
c001b744:	53                   	push   ebx
c001b745:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b749:	8b 1d 94 e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e794
c001b74f:	eb 25                	jmp    c001b776 <sysFormatDisk(regs*)+0x34>
c001b751:	83 ec 0c             	sub    esp,0xc
c001b754:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b757:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b759:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b75c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b75f:	50                   	push   eax
c001b760:	ff 34 85 20 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd13e0]
c001b767:	53                   	push   ebx
c001b768:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b76b:	83 c4 20             	add    esp,0x20
c001b76e:	83 f8 08             	cmp    eax,0x8
c001b771:	75 12                	jne    c001b785 <sysFormatDisk(regs*)+0x43>
c001b773:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b776:	85 db                	test   ebx,ebx
c001b778:	75 d7                	jne    c001b751 <sysFormatDisk(regs*)+0xf>
c001b77a:	59                   	pop    ecx
c001b77b:	b8 03 00 00 00       	mov    eax,0x3
c001b780:	31 d2                	xor    edx,edx
c001b782:	5b                   	pop    ebx
c001b783:	5e                   	pop    esi
c001b784:	c3                   	ret    
c001b785:	85 c0                	test   eax,eax
c001b787:	74 1b                	je     c001b7a4 <sysFormatDisk(regs*)+0x62>
c001b789:	83 f8 09             	cmp    eax,0x9
c001b78c:	74 0b                	je     c001b799 <sysFormatDisk(regs*)+0x57>
c001b78e:	59                   	pop    ecx
c001b78f:	b8 02 00 00 00       	mov    eax,0x2
c001b794:	31 d2                	xor    edx,edx
c001b796:	5b                   	pop    ebx
c001b797:	5e                   	pop    esi
c001b798:	c3                   	ret    
c001b799:	59                   	pop    ecx
c001b79a:	b8 01 00 00 00       	mov    eax,0x1
c001b79f:	31 d2                	xor    edx,edx
c001b7a1:	5b                   	pop    ebx
c001b7a2:	5e                   	pop    esi
c001b7a3:	c3                   	ret    
c001b7a4:	59                   	pop    ecx
c001b7a5:	31 c0                	xor    eax,eax
c001b7a7:	31 d2                	xor    edx,edx
c001b7a9:	5b                   	pop    ebx
c001b7aa:	5e                   	pop    esi
c001b7ab:	c3                   	ret    

c001b7ac <sysSetDiskVolumeLabel(regs*)>:
c001b7ac:	56                   	push   esi
c001b7ad:	53                   	push   ebx
c001b7ae:	53                   	push   ebx
c001b7af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7b3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7b6:	83 f8 19             	cmp    eax,0x19
c001b7b9:	77 29                	ja     c001b7e4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7bb:	8b 0c 85 20 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13e0]
c001b7c2:	85 c9                	test   ecx,ecx
c001b7c4:	74 1e                	je     c001b7e4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7c6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7c9:	85 d2                	test   edx,edx
c001b7cb:	74 17                	je     c001b7e4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7cd:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7d3:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7d5:	52                   	push   edx
c001b7d6:	50                   	push   eax
c001b7d7:	51                   	push   ecx
c001b7d8:	53                   	push   ebx
c001b7d9:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7dc:	83 c4 10             	add    esp,0x10
c001b7df:	99                   	cdq    
c001b7e0:	59                   	pop    ecx
c001b7e1:	5b                   	pop    ebx
c001b7e2:	5e                   	pop    esi
c001b7e3:	c3                   	ret    
c001b7e4:	59                   	pop    ecx
c001b7e5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7ef:	5b                   	pop    ebx
c001b7f0:	5e                   	pop    esi
c001b7f1:	c3                   	ret    

c001b7f2 <sysGetDiskVolumeLabel(regs*)>:
c001b7f2:	57                   	push   edi
c001b7f3:	56                   	push   esi
c001b7f4:	53                   	push   ebx
c001b7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7fc:	83 fa 19             	cmp    edx,0x19
c001b7ff:	77 34                	ja     c001b835 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b801:	8b 0c 95 20 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd13e0]
c001b808:	85 c9                	test   ecx,ecx
c001b80a:	74 29                	je     c001b835 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b80c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b80f:	85 db                	test   ebx,ebx
c001b811:	74 22                	je     c001b835 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b813:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b816:	85 c0                	test   eax,eax
c001b818:	74 1b                	je     c001b835 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b81a:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b820:	83 ec 0c             	sub    esp,0xc
c001b823:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b825:	50                   	push   eax
c001b826:	53                   	push   ebx
c001b827:	52                   	push   edx
c001b828:	51                   	push   ecx
c001b829:	56                   	push   esi
c001b82a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b82d:	83 c4 20             	add    esp,0x20
c001b830:	99                   	cdq    
c001b831:	5b                   	pop    ebx
c001b832:	5e                   	pop    esi
c001b833:	5f                   	pop    edi
c001b834:	c3                   	ret    
c001b835:	5b                   	pop    ebx
c001b836:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b83b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b840:	5e                   	pop    esi
c001b841:	5f                   	pop    edi
c001b842:	c3                   	ret    

c001b843 <sysShutdown(regs*)>:
c001b843:	83 ec 0c             	sub    esp,0xc
c001b846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b84d:	85 c0                	test   eax,eax
c001b84f:	74 18                	je     c001b869 <sysShutdown(regs*)+0x26>
c001b851:	83 f8 01             	cmp    eax,0x1
c001b854:	74 38                	je     c001b88e <sysShutdown(regs*)+0x4b>
c001b856:	83 f8 02             	cmp    eax,0x2
c001b859:	74 24                	je     c001b87f <sysShutdown(regs*)+0x3c>
c001b85b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b860:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b865:	83 c4 0c             	add    esp,0xc
c001b868:	c3                   	ret    
c001b869:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001b86e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b870:	6a 00                	push   0x0
c001b872:	6a 00                	push   0x0
c001b874:	6a 00                	push   0x0
c001b876:	50                   	push   eax
c001b877:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b87a:	83 c4 10             	add    esp,0x10
c001b87d:	eb dc                	jmp    c001b85b <sysShutdown(regs*)+0x18>
c001b87f:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001b884:	8b 10                	mov    edx,DWORD PTR [eax]
c001b886:	6a 00                	push   0x0
c001b888:	6a 00                	push   0x0
c001b88a:	6a 01                	push   0x1
c001b88c:	eb e8                	jmp    c001b876 <sysShutdown(regs*)+0x33>
c001b88e:	a1 c0 0c 03 c0       	mov    eax,ds:0xc0030cc0
c001b893:	85 c0                	test   eax,eax
c001b895:	74 02                	je     c001b899 <sysShutdown(regs*)+0x56>
c001b897:	ff d0                	call   eax
c001b899:	31 c0                	xor    eax,eax
c001b89b:	31 d2                	xor    edx,edx
c001b89d:	83 c4 0c             	add    esp,0xc
c001b8a0:	c3                   	ret    

c001b8a1 <sysCallRealpath(regs*)>:
c001b8a1:	83 ec 0c             	sub    esp,0xc
c001b8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8ab:	85 d2                	test   edx,edx
c001b8ad:	74 07                	je     c001b8b6 <sysCallRealpath(regs*)+0x15>
c001b8af:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8b2:	85 c0                	test   eax,eax
c001b8b4:	75 0b                	jne    c001b8c1 <sysCallRealpath(regs*)+0x20>
c001b8b6:	b8 01 00 00 00       	mov    eax,0x1
c001b8bb:	31 d2                	xor    edx,edx
c001b8bd:	83 c4 0c             	add    esp,0xc
c001b8c0:	c3                   	ret    
c001b8c1:	51                   	push   ecx
c001b8c2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8c8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8cb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8d1:	51                   	push   ecx
c001b8d2:	52                   	push   edx
c001b8d3:	50                   	push   eax
c001b8d4:	e8 e5 79 ff ff       	call   c00132be <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8d9:	83 c4 10             	add    esp,0x10
c001b8dc:	31 c0                	xor    eax,eax
c001b8de:	31 d2                	xor    edx,edx
c001b8e0:	83 c4 0c             	add    esp,0xc
c001b8e3:	c3                   	ret    

c001b8e4 <sysCallGetArgc(regs*)>:
c001b8e4:	83 ec 14             	sub    esp,0x14
c001b8e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ef:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8f5:	68 b4 bf 02 c0       	push   0xc002bfb4
c001b8fa:	e8 0a 76 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001b8ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b904:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b907:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b90d:	83 c4 1c             	add    esp,0x1c
c001b910:	99                   	cdq    
c001b911:	c3                   	ret    

c001b912 <sysCallReadDir(regs*)>:
c001b912:	53                   	push   ebx
c001b913:	83 ec 18             	sub    esp,0x18
c001b916:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b91a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b91d:	83 f8 02             	cmp    eax,0x2
c001b920:	76 53                	jbe    c001b975 <sysCallReadDir(regs*)+0x63>
c001b922:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b925:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b92b:	77 4f                	ja     c001b97c <sysCallReadDir(regs*)+0x6a>
c001b92d:	83 ec 0c             	sub    esp,0xc
c001b930:	50                   	push   eax
c001b931:	e8 bf 60 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b936:	83 c4 10             	add    esp,0x10
c001b939:	85 c0                	test   eax,eax
c001b93b:	74 50                	je     c001b98d <sysCallReadDir(regs*)+0x7b>
c001b93d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b945:	83 ec 0c             	sub    esp,0xc
c001b948:	8b 10                	mov    edx,DWORD PTR [eax]
c001b94a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b94e:	51                   	push   ecx
c001b94f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b952:	6a 00                	push   0x0
c001b954:	68 10 01 00 00       	push   0x110
c001b959:	50                   	push   eax
c001b95a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b95d:	83 c4 20             	add    esp,0x20
c001b960:	85 c0                	test   eax,eax
c001b962:	74 38                	je     c001b99c <sysCallReadDir(regs*)+0x8a>
c001b964:	83 f8 07             	cmp    eax,0x7
c001b967:	74 0c                	je     c001b975 <sysCallReadDir(regs*)+0x63>
c001b969:	b8 02 00 00 00       	mov    eax,0x2
c001b96e:	31 d2                	xor    edx,edx
c001b970:	83 c4 18             	add    esp,0x18
c001b973:	5b                   	pop    ebx
c001b974:	c3                   	ret    
c001b975:	b8 01 00 00 00       	mov    eax,0x1
c001b97a:	eb f2                	jmp    c001b96e <sysCallReadDir(regs*)+0x5c>
c001b97c:	83 ec 08             	sub    esp,0x8
c001b97f:	52                   	push   edx
c001b980:	68 cc c0 02 c0       	push   0xc002c0cc
c001b985:	e8 7f 75 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001b98a:	83 c4 10             	add    esp,0x10
c001b98d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b992:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b997:	83 c4 18             	add    esp,0x18
c001b99a:	5b                   	pop    ebx
c001b99b:	c3                   	ret    
c001b99c:	31 c0                	xor    eax,eax
c001b99e:	eb ce                	jmp    c001b96e <sysCallReadDir(regs*)+0x5c>

c001b9a0 <sysCallIsATTY(regs*)>:
c001b9a0:	83 ec 0c             	sub    esp,0xc
c001b9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9aa:	83 f8 02             	cmp    eax,0x2
c001b9ad:	76 07                	jbe    c001b9b6 <sysCallIsATTY(regs*)+0x16>
c001b9af:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9b4:	75 26                	jne    c001b9dc <sysCallIsATTY(regs*)+0x3c>
c001b9b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9be:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9c4:	85 c0                	test   eax,eax
c001b9c6:	74 24                	je     c001b9ec <sysCallIsATTY(regs*)+0x4c>
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9cd:	50                   	push   eax
c001b9ce:	ff 12                	call   DWORD PTR [edx]
c001b9d0:	31 d2                	xor    edx,edx
c001b9d2:	0f b6 c0             	movzx  eax,al
c001b9d5:	83 c4 10             	add    esp,0x10
c001b9d8:	83 c4 0c             	add    esp,0xc
c001b9db:	c3                   	ret    
c001b9dc:	83 ec 0c             	sub    esp,0xc
c001b9df:	50                   	push   eax
c001b9e0:	e8 10 60 ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	85 c0                	test   eax,eax
c001b9ea:	75 dc                	jne    c001b9c8 <sysCallIsATTY(regs*)+0x28>
c001b9ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9f6:	83 c4 0c             	add    esp,0xc
c001b9f9:	c3                   	ret    

c001b9fa <sysCallSeek(regs*)>:
c001b9fa:	53                   	push   ebx
c001b9fb:	83 ec 08             	sub    esp,0x8
c001b9fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba02:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba05:	83 f8 02             	cmp    eax,0x2
c001ba08:	76 4a                	jbe    c001ba54 <sysCallSeek(regs*)+0x5a>
c001ba0a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba0f:	77 32                	ja     c001ba43 <sysCallSeek(regs*)+0x49>
c001ba11:	83 ec 0c             	sub    esp,0xc
c001ba14:	50                   	push   eax
c001ba15:	e8 db 5f ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001ba1a:	83 c4 0c             	add    esp,0xc
c001ba1d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba20:	31 db                	xor    ebx,ebx
c001ba22:	53                   	push   ebx
c001ba23:	51                   	push   ecx
c001ba24:	50                   	push   eax
c001ba25:	e8 60 7b ff ff       	call   c001358a <File::seek(unsigned long long)>
c001ba2a:	83 c4 10             	add    esp,0x10
c001ba2d:	85 c0                	test   eax,eax
c001ba2f:	0f 95 c0             	setne  al
c001ba32:	31 d2                	xor    edx,edx
c001ba34:	0f b6 c0             	movzx  eax,al
c001ba37:	f7 d8                	neg    eax
c001ba39:	83 d2 00             	adc    edx,0x0
c001ba3c:	83 c4 08             	add    esp,0x8
c001ba3f:	f7 da                	neg    edx
c001ba41:	5b                   	pop    ebx
c001ba42:	c3                   	ret    
c001ba43:	83 ec 08             	sub    esp,0x8
c001ba46:	50                   	push   eax
c001ba47:	68 bf bf 02 c0       	push   0xc002bfbf
c001ba4c:	e8 b8 74 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001ba51:	83 c4 10             	add    esp,0x10
c001ba54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba59:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba5e:	83 c4 08             	add    esp,0x8
c001ba61:	5b                   	pop    ebx
c001ba62:	c3                   	ret    

c001ba63 <sysCallTell(regs*)>:
c001ba63:	53                   	push   ebx
c001ba64:	83 ec 08             	sub    esp,0x8
c001ba67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba6e:	83 f8 02             	cmp    eax,0x2
c001ba71:	76 5e                	jbe    c001bad1 <sysCallTell(regs*)+0x6e>
c001ba73:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba78:	77 2d                	ja     c001baa7 <sysCallTell(regs*)+0x44>
c001ba7a:	83 ec 0c             	sub    esp,0xc
c001ba7d:	50                   	push   eax
c001ba7e:	e8 72 5f ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001ba83:	5a                   	pop    edx
c001ba84:	59                   	pop    ecx
c001ba85:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba88:	50                   	push   eax
c001ba89:	e8 52 7b ff ff       	call   c00135e0 <File::tell(unsigned long long*)>
c001ba8e:	83 c4 10             	add    esp,0x10
c001ba91:	85 c0                	test   eax,eax
c001ba93:	0f 95 c0             	setne  al
c001ba96:	31 d2                	xor    edx,edx
c001ba98:	0f b6 c0             	movzx  eax,al
c001ba9b:	f7 d8                	neg    eax
c001ba9d:	83 d2 00             	adc    edx,0x0
c001baa0:	83 c4 08             	add    esp,0x8
c001baa3:	f7 da                	neg    edx
c001baa5:	5b                   	pop    ebx
c001baa6:	c3                   	ret    
c001baa7:	83 ec 08             	sub    esp,0x8
c001baaa:	50                   	push   eax
c001baab:	68 d9 bf 02 c0       	push   0xc002bfd9
c001bab0:	e8 54 74 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001bab5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bab8:	83 c4 10             	add    esp,0x10
c001babb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bac1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bac8:	31 d2                	xor    edx,edx
c001baca:	31 c0                	xor    eax,eax
c001bacc:	83 c4 08             	add    esp,0x8
c001bacf:	5b                   	pop    ebx
c001bad0:	c3                   	ret    
c001bad1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bad6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001badb:	83 c4 08             	add    esp,0x8
c001bade:	5b                   	pop    ebx
c001badf:	c3                   	ret    

c001bae0 <sysCallSize(regs*)>:
c001bae0:	53                   	push   ebx
c001bae1:	83 ec 18             	sub    esp,0x18
c001bae4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bae8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baeb:	83 f8 02             	cmp    eax,0x2
c001baee:	76 64                	jbe    c001bb54 <sysCallSize(regs*)+0x74>
c001baf0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baf5:	77 33                	ja     c001bb2a <sysCallSize(regs*)+0x4a>
c001baf7:	83 ec 0c             	sub    esp,0xc
c001bafa:	50                   	push   eax
c001bafb:	e8 f5 5e ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bb00:	83 c4 0c             	add    esp,0xc
c001bb03:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb07:	52                   	push   edx
c001bb08:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb0b:	50                   	push   eax
c001bb0c:	e8 67 7c ff ff       	call   c0013778 <File::stat(unsigned long long*, bool*)>
c001bb11:	83 c4 10             	add    esp,0x10
c001bb14:	85 c0                	test   eax,eax
c001bb16:	0f 95 c0             	setne  al
c001bb19:	31 d2                	xor    edx,edx
c001bb1b:	0f b6 c0             	movzx  eax,al
c001bb1e:	f7 d8                	neg    eax
c001bb20:	83 d2 00             	adc    edx,0x0
c001bb23:	83 c4 18             	add    esp,0x18
c001bb26:	f7 da                	neg    edx
c001bb28:	5b                   	pop    ebx
c001bb29:	c3                   	ret    
c001bb2a:	83 ec 08             	sub    esp,0x8
c001bb2d:	50                   	push   eax
c001bb2e:	68 f3 bf 02 c0       	push   0xc002bff3
c001bb33:	e8 d1 73 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001bb38:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb3b:	83 c4 10             	add    esp,0x10
c001bb3e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb4b:	31 d2                	xor    edx,edx
c001bb4d:	31 c0                	xor    eax,eax
c001bb4f:	83 c4 18             	add    esp,0x18
c001bb52:	5b                   	pop    ebx
c001bb53:	c3                   	ret    
c001bb54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb59:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb5e:	83 c4 18             	add    esp,0x18
c001bb61:	5b                   	pop    ebx
c001bb62:	c3                   	ret    

c001bb63 <sysCallSizeFromFilename(regs*)>:
c001bb63:	57                   	push   edi
c001bb64:	56                   	push   esi
c001bb65:	53                   	push   ebx
c001bb66:	83 ec 20             	sub    esp,0x20
c001bb69:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb6d:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb70:	83 fb 02             	cmp    ebx,0x2
c001bb73:	0f 86 99 00 00 00    	jbe    c001bc12 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb79:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb7f:	77 65                	ja     c001bbe6 <sysCallSizeFromFilename(regs*)+0x83>
c001bb81:	83 ec 0c             	sub    esp,0xc
c001bb84:	68 14 01 00 00       	push   0x114
c001bb89:	e8 bd 3c ff ff       	call   c000f84b <malloc>
c001bb8e:	83 c4 0c             	add    esp,0xc
c001bb91:	89 c6                	mov    esi,eax
c001bb93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb98:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb9b:	53                   	push   ebx
c001bb9c:	56                   	push   esi
c001bb9d:	e8 c6 78 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001bba2:	83 c4 0c             	add    esp,0xc
c001bba5:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bba9:	50                   	push   eax
c001bbaa:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbad:	56                   	push   esi
c001bbae:	e8 c5 7b ff ff       	call   c0013778 <File::stat(unsigned long long*, bool*)>
c001bbb3:	83 c4 10             	add    esp,0x10
c001bbb6:	85 f6                	test   esi,esi
c001bbb8:	74 14                	je     c001bbce <sysCallSizeFromFilename(regs*)+0x6b>
c001bbba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbbe:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbc0:	83 ec 0c             	sub    esp,0xc
c001bbc3:	56                   	push   esi
c001bbc4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbc7:	83 c4 10             	add    esp,0x10
c001bbca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbce:	85 c0                	test   eax,eax
c001bbd0:	0f 95 c0             	setne  al
c001bbd3:	31 d2                	xor    edx,edx
c001bbd5:	0f b6 c0             	movzx  eax,al
c001bbd8:	f7 d8                	neg    eax
c001bbda:	83 d2 00             	adc    edx,0x0
c001bbdd:	83 c4 20             	add    esp,0x20
c001bbe0:	f7 da                	neg    edx
c001bbe2:	5b                   	pop    ebx
c001bbe3:	5e                   	pop    esi
c001bbe4:	5f                   	pop    edi
c001bbe5:	c3                   	ret    
c001bbe6:	83 ec 08             	sub    esp,0x8
c001bbe9:	53                   	push   ebx
c001bbea:	68 f3 bf 02 c0       	push   0xc002bff3
c001bbef:	e8 15 73 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001bbf4:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc07:	31 d2                	xor    edx,edx
c001bc09:	83 c4 20             	add    esp,0x20
c001bc0c:	31 c0                	xor    eax,eax
c001bc0e:	5b                   	pop    ebx
c001bc0f:	5e                   	pop    esi
c001bc10:	5f                   	pop    edi
c001bc11:	c3                   	ret    
c001bc12:	83 c4 20             	add    esp,0x20
c001bc15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc1a:	5b                   	pop    ebx
c001bc1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc20:	5e                   	pop    esi
c001bc21:	5f                   	pop    edi
c001bc22:	c3                   	ret    

c001bc23 <sysCallClose(regs*)>:
c001bc23:	53                   	push   ebx
c001bc24:	83 ec 08             	sub    esp,0x8
c001bc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc2e:	83 f8 02             	cmp    eax,0x2
c001bc31:	76 50                	jbe    c001bc83 <sysCallClose(regs*)+0x60>
c001bc33:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc38:	74 58                	je     c001bc92 <sysCallClose(regs*)+0x6f>
c001bc3a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc3f:	74 60                	je     c001bca1 <sysCallClose(regs*)+0x7e>
c001bc41:	77 2f                	ja     c001bc72 <sysCallClose(regs*)+0x4f>
c001bc43:	83 ec 0c             	sub    esp,0xc
c001bc46:	50                   	push   eax
c001bc47:	e8 a9 5d ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bc4c:	89 c3                	mov    ebx,eax
c001bc4e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc51:	e8 d4 78 ff ff       	call   c001352a <File::close()>
c001bc56:	83 c4 10             	add    esp,0x10
c001bc59:	85 db                	test   ebx,ebx
c001bc5b:	74 0c                	je     c001bc69 <sysCallClose(regs*)+0x46>
c001bc5d:	83 ec 0c             	sub    esp,0xc
c001bc60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc62:	53                   	push   ebx
c001bc63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc66:	83 c4 10             	add    esp,0x10
c001bc69:	31 c0                	xor    eax,eax
c001bc6b:	31 d2                	xor    edx,edx
c001bc6d:	83 c4 08             	add    esp,0x8
c001bc70:	5b                   	pop    ebx
c001bc71:	c3                   	ret    
c001bc72:	83 ec 08             	sub    esp,0x8
c001bc75:	50                   	push   eax
c001bc76:	68 f0 c0 02 c0       	push   0xc002c0f0
c001bc7b:	e8 89 72 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001bc80:	83 c4 10             	add    esp,0x10
c001bc83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc88:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc8d:	83 c4 08             	add    esp,0x8
c001bc90:	5b                   	pop    ebx
c001bc91:	c3                   	ret    
c001bc92:	83 ec 0c             	sub    esp,0xc
c001bc95:	68 0e c0 02 c0       	push   0xc002c00e
c001bc9a:	e8 6a 72 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001bc9f:	eb c5                	jmp    c001bc66 <sysCallClose(regs*)+0x43>
c001bca1:	83 ec 0c             	sub    esp,0xc
c001bca4:	68 1c c0 02 c0       	push   0xc002c01c
c001bca9:	eb ef                	jmp    c001bc9a <sysCallClose(regs*)+0x77>

c001bcab <sysCallOpenDir(regs*)>:
c001bcab:	56                   	push   esi
c001bcac:	53                   	push   ebx
c001bcad:	53                   	push   ebx
c001bcae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcb2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bcb5:	85 f6                	test   esi,esi
c001bcb7:	74 59                	je     c001bd12 <sysCallOpenDir(regs*)+0x67>
c001bcb9:	83 ec 0c             	sub    esp,0xc
c001bcbc:	68 14 01 00 00       	push   0x114
c001bcc1:	e8 85 3b ff ff       	call   c000f84b <malloc>
c001bcc6:	83 c4 0c             	add    esp,0xc
c001bcc9:	89 c6                	mov    esi,eax
c001bccb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcd0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcd3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcd6:	56                   	push   esi
c001bcd7:	e8 38 7c ff ff       	call   c0013914 <Directory::Directory(char const*, Process*)>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	85 f6                	test   esi,esi
c001bce1:	74 2f                	je     c001bd12 <sysCallOpenDir(regs*)+0x67>
c001bce3:	83 ec 0c             	sub    esp,0xc
c001bce6:	56                   	push   esi
c001bce7:	e8 8c 7c ff ff       	call   c0013978 <Directory::open()>
c001bcec:	83 c4 10             	add    esp,0x10
c001bcef:	85 c0                	test   eax,eax
c001bcf1:	75 1f                	jne    c001bd12 <sysCallOpenDir(regs*)+0x67>
c001bcf3:	83 ec 0c             	sub    esp,0xc
c001bcf6:	56                   	push   esi
c001bcf7:	e8 04 5a ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001bcfc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcff:	83 c4 10             	add    esp,0x10
c001bd02:	89 02                	mov    DWORD PTR [edx],eax
c001bd04:	c1 f8 1f             	sar    eax,0x1f
c001bd07:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd0a:	31 c0                	xor    eax,eax
c001bd0c:	59                   	pop    ecx
c001bd0d:	31 d2                	xor    edx,edx
c001bd0f:	5b                   	pop    ebx
c001bd10:	5e                   	pop    esi
c001bd11:	c3                   	ret    
c001bd12:	59                   	pop    ecx
c001bd13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd18:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd1d:	5b                   	pop    ebx
c001bd1e:	5e                   	pop    esi
c001bd1f:	c3                   	ret    

c001bd20 <sysCallCloseDir(regs*)>:
c001bd20:	53                   	push   ebx
c001bd21:	83 ec 08             	sub    esp,0x8
c001bd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd2b:	83 f8 02             	cmp    eax,0x2
c001bd2e:	76 47                	jbe    c001bd77 <sysCallCloseDir(regs*)+0x57>
c001bd30:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd35:	77 2f                	ja     c001bd66 <sysCallCloseDir(regs*)+0x46>
c001bd37:	83 ec 0c             	sub    esp,0xc
c001bd3a:	50                   	push   eax
c001bd3b:	e8 b5 5c ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bd40:	89 c3                	mov    ebx,eax
c001bd42:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd45:	e8 8a 7c ff ff       	call   c00139d4 <Directory::close()>
c001bd4a:	83 c4 10             	add    esp,0x10
c001bd4d:	85 db                	test   ebx,ebx
c001bd4f:	74 0c                	je     c001bd5d <sysCallCloseDir(regs*)+0x3d>
c001bd51:	83 ec 0c             	sub    esp,0xc
c001bd54:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd56:	53                   	push   ebx
c001bd57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	31 c0                	xor    eax,eax
c001bd5f:	31 d2                	xor    edx,edx
c001bd61:	83 c4 08             	add    esp,0x8
c001bd64:	5b                   	pop    ebx
c001bd65:	c3                   	ret    
c001bd66:	83 ec 08             	sub    esp,0x8
c001bd69:	50                   	push   eax
c001bd6a:	68 18 c1 02 c0       	push   0xc002c118
c001bd6f:	e8 95 71 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001bd74:	83 c4 10             	add    esp,0x10
c001bd77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd7c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd81:	83 c4 08             	add    esp,0x8
c001bd84:	5b                   	pop    ebx
c001bd85:	c3                   	ret    

c001bd86 <sysCallMakeDir(regs*)>:
c001bd86:	56                   	push   esi
c001bd87:	53                   	push   ebx
c001bd88:	83 ec 10             	sub    esp,0x10
c001bd8b:	68 14 01 00 00       	push   0x114
c001bd90:	e8 b6 3a ff ff       	call   c000f84b <malloc>
c001bd95:	83 c4 0c             	add    esp,0xc
c001bd98:	89 c3                	mov    ebx,eax
c001bd9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd9f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bda2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bda6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bda9:	53                   	push   ebx
c001bdaa:	e8 65 7b ff ff       	call   c0013914 <Directory::Directory(char const*, Process*)>
c001bdaf:	83 c4 10             	add    esp,0x10
c001bdb2:	85 db                	test   ebx,ebx
c001bdb4:	74 32                	je     c001bde8 <sysCallMakeDir(regs*)+0x62>
c001bdb6:	83 ec 0c             	sub    esp,0xc
c001bdb9:	53                   	push   ebx
c001bdba:	e8 99 7d ff ff       	call   c0013b58 <Directory::create()>
c001bdbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdc2:	89 c6                	mov    esi,eax
c001bdc4:	e8 0b 7c ff ff       	call   c00139d4 <Directory::close()>
c001bdc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdd1:	83 c4 10             	add    esp,0x10
c001bdd4:	31 c0                	xor    eax,eax
c001bdd6:	59                   	pop    ecx
c001bdd7:	85 f6                	test   esi,esi
c001bdd9:	5b                   	pop    ebx
c001bdda:	0f 95 c0             	setne  al
c001bddd:	5e                   	pop    esi
c001bdde:	31 d2                	xor    edx,edx
c001bde0:	f7 d8                	neg    eax
c001bde2:	83 d2 00             	adc    edx,0x0
c001bde5:	f7 da                	neg    edx
c001bde7:	c3                   	ret    
c001bde8:	59                   	pop    ecx
c001bde9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdee:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdf3:	5b                   	pop    ebx
c001bdf4:	5e                   	pop    esi
c001bdf5:	c3                   	ret    

c001bdf6 <sysCallWait(regs*)>:
c001bdf6:	83 ec 10             	sub    esp,0x10
c001bdf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdfd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be00:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be03:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be06:	e8 08 25 00 00       	call   c001e313 <waitTask(int, int*, int)>
c001be0b:	83 c4 1c             	add    esp,0x1c
c001be0e:	99                   	cdq    
c001be0f:	c3                   	ret    

c001be10 <sysCallNotImpl(regs*)>:
c001be10:	83 ec 18             	sub    esp,0x18
c001be13:	68 2a c0 02 c0       	push   0xc002c02a
c001be18:	e8 2a e8 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001be1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be22:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be27:	83 c4 1c             	add    esp,0x1c
c001be2a:	c3                   	ret    

c001be2b <sysPanic(regs*)>:
c001be2b:	83 ec 18             	sub    esp,0x18
c001be2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be32:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be35:	e8 0d e8 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001be3a:	c7 04 24 44 c0 02 c0 	mov    DWORD PTR [esp],0xc002c044
c001be41:	e8 01 e8 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001be46:	b8 01 00 00 00       	mov    eax,0x1
c001be4b:	31 d2                	xor    edx,edx
c001be4d:	83 c4 1c             	add    esp,0x1c
c001be50:	c3                   	ret    

c001be51 <sysCallRmdir(regs*)>:
c001be51:	56                   	push   esi
c001be52:	53                   	push   ebx
c001be53:	83 ec 20             	sub    esp,0x20
c001be56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be5a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be5d:	68 14 01 00 00       	push   0x114
c001be62:	e8 e4 39 ff ff       	call   c000f84b <malloc>
c001be67:	83 c4 0c             	add    esp,0xc
c001be6a:	89 c3                	mov    ebx,eax
c001be6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be71:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be74:	56                   	push   esi
c001be75:	53                   	push   ebx
c001be76:	e8 ed 75 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001be7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be7e:	e8 c1 77 ff ff       	call   c0013644 <File::unlink()>
c001be83:	83 c4 10             	add    esp,0x10
c001be86:	85 db                	test   ebx,ebx
c001be88:	74 14                	je     c001be9e <sysCallRmdir(regs*)+0x4d>
c001be8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be8e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be90:	83 ec 0c             	sub    esp,0xc
c001be93:	53                   	push   ebx
c001be94:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be97:	83 c4 10             	add    esp,0x10
c001be9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be9e:	85 c0                	test   eax,eax
c001bea0:	0f 95 c0             	setne  al
c001bea3:	31 d2                	xor    edx,edx
c001bea5:	0f b6 c0             	movzx  eax,al
c001bea8:	f7 d8                	neg    eax
c001beaa:	83 d2 00             	adc    edx,0x0
c001bead:	83 c4 14             	add    esp,0x14
c001beb0:	f7 da                	neg    edx
c001beb2:	5b                   	pop    ebx
c001beb3:	5e                   	pop    esi
c001beb4:	c3                   	ret    

c001beb5 <sysCallUnlink(regs*)>:
c001beb5:	56                   	push   esi
c001beb6:	53                   	push   ebx
c001beb7:	83 ec 20             	sub    esp,0x20
c001beba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bebe:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bec1:	68 14 01 00 00       	push   0x114
c001bec6:	e8 80 39 ff ff       	call   c000f84b <malloc>
c001becb:	83 c4 0c             	add    esp,0xc
c001bece:	89 c3                	mov    ebx,eax
c001bed0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bed8:	56                   	push   esi
c001bed9:	53                   	push   ebx
c001beda:	e8 89 75 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001bedf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bee2:	e8 5d 77 ff ff       	call   c0013644 <File::unlink()>
c001bee7:	83 c4 10             	add    esp,0x10
c001beea:	85 db                	test   ebx,ebx
c001beec:	74 14                	je     c001bf02 <sysCallUnlink(regs*)+0x4d>
c001beee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bef2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bef4:	83 ec 0c             	sub    esp,0xc
c001bef7:	53                   	push   ebx
c001bef8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001befb:	83 c4 10             	add    esp,0x10
c001befe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf02:	85 c0                	test   eax,eax
c001bf04:	0f 95 c0             	setne  al
c001bf07:	31 d2                	xor    edx,edx
c001bf09:	0f b6 c0             	movzx  eax,al
c001bf0c:	f7 d8                	neg    eax
c001bf0e:	83 d2 00             	adc    edx,0x0
c001bf11:	83 c4 14             	add    esp,0x14
c001bf14:	f7 da                	neg    edx
c001bf16:	5b                   	pop    ebx
c001bf17:	5e                   	pop    esi
c001bf18:	c3                   	ret    

c001bf19 <sysCallGetArgv(regs*)>:
c001bf19:	83 ec 0c             	sub    esp,0xc
c001bf1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf20:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf23:	85 c0                	test   eax,eax
c001bf25:	78 2b                	js     c001bf52 <sysCallGetArgv(regs*)+0x39>
c001bf27:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf2d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf30:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf36:	7d 1a                	jge    c001bf52 <sysCallGetArgv(regs*)+0x39>
c001bf38:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf3f:	85 c0                	test   eax,eax
c001bf41:	74 17                	je     c001bf5a <sysCallGetArgv(regs*)+0x41>
c001bf43:	83 ec 08             	sub    esp,0x8
c001bf46:	50                   	push   eax
c001bf47:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf4a:	e8 ed 48 fe ff       	call   c000083c <strcpy>
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	31 c0                	xor    eax,eax
c001bf54:	31 d2                	xor    edx,edx
c001bf56:	83 c4 0c             	add    esp,0xc
c001bf59:	c3                   	ret    
c001bf5a:	b8 01 00 00 00       	mov    eax,0x1
c001bf5f:	31 d2                	xor    edx,edx
c001bf61:	83 c4 0c             	add    esp,0xc
c001bf64:	c3                   	ret    

c001bf65 <sysCallTTYName(regs*)>:
c001bf65:	56                   	push   esi
c001bf66:	53                   	push   ebx
c001bf67:	53                   	push   ebx
c001bf68:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf6c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf6f:	85 c0                	test   eax,eax
c001bf71:	74 5f                	je     c001bfd2 <sysCallTTYName(regs*)+0x6d>
c001bf73:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf76:	83 f8 02             	cmp    eax,0x2
c001bf79:	77 3e                	ja     c001bfb9 <sysCallTTYName(regs*)+0x54>
c001bf7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf83:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf89:	85 db                	test   ebx,ebx
c001bf8b:	74 45                	je     c001bfd2 <sysCallTTYName(regs*)+0x6d>
c001bf8d:	83 ec 0c             	sub    esp,0xc
c001bf90:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf92:	53                   	push   ebx
c001bf93:	ff 10                	call   DWORD PTR [eax]
c001bf95:	83 c4 10             	add    esp,0x10
c001bf98:	84 c0                	test   al,al
c001bf9a:	74 41                	je     c001bfdd <sysCallTTYName(regs*)+0x78>
c001bf9c:	83 ec 08             	sub    esp,0x8
c001bf9f:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfa5:	53                   	push   ebx
c001bfa6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfa9:	e8 8e 48 fe ff       	call   c000083c <strcpy>
c001bfae:	83 c4 10             	add    esp,0x10
c001bfb1:	31 c0                	xor    eax,eax
c001bfb3:	59                   	pop    ecx
c001bfb4:	31 d2                	xor    edx,edx
c001bfb6:	5b                   	pop    ebx
c001bfb7:	5e                   	pop    esi
c001bfb8:	c3                   	ret    
c001bfb9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfbe:	74 bb                	je     c001bf7b <sysCallTTYName(regs*)+0x16>
c001bfc0:	83 ec 0c             	sub    esp,0xc
c001bfc3:	50                   	push   eax
c001bfc4:	e8 2c 5a ff ff       	call   c00119f5 <getFromFileDescriptor(int)>
c001bfc9:	83 c4 10             	add    esp,0x10
c001bfcc:	89 c3                	mov    ebx,eax
c001bfce:	85 db                	test   ebx,ebx
c001bfd0:	75 bb                	jne    c001bf8d <sysCallTTYName(regs*)+0x28>
c001bfd2:	59                   	pop    ecx
c001bfd3:	b8 01 00 00 00       	mov    eax,0x1
c001bfd8:	31 d2                	xor    edx,edx
c001bfda:	5b                   	pop    ebx
c001bfdb:	5e                   	pop    esi
c001bfdc:	c3                   	ret    
c001bfdd:	59                   	pop    ecx
c001bfde:	b8 02 00 00 00       	mov    eax,0x2
c001bfe3:	31 d2                	xor    edx,edx
c001bfe5:	5b                   	pop    ebx
c001bfe6:	5e                   	pop    esi
c001bfe7:	c3                   	ret    

c001bfe8 <sysCallUSleep(regs*)>:
c001bfe8:	83 ec 14             	sub    esp,0x14
c001bfeb:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bff0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bff4:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bffb:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bffe:	01 ca                	add    edx,ecx
c001c000:	52                   	push   edx
c001c001:	50                   	push   eax
c001c002:	e8 a5 23 00 00       	call   c001e3ac <nanoSleep(unsigned long long)>
c001c007:	31 c0                	xor    eax,eax
c001c009:	31 d2                	xor    edx,edx
c001c00b:	83 c4 1c             	add    esp,0x1c
c001c00e:	c3                   	ret    

c001c00f <sysCallSpawn(regs*)>:
c001c00f:	56                   	push   esi
c001c010:	53                   	push   ebx
c001c011:	53                   	push   ebx
c001c012:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c016:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c019:	85 f6                	test   esi,esi
c001c01b:	75 08                	jne    c001c025 <sysCallSpawn(regs*)+0x16>
c001c01d:	59                   	pop    ecx
c001c01e:	31 c0                	xor    eax,eax
c001c020:	31 d2                	xor    edx,edx
c001c022:	5b                   	pop    ebx
c001c023:	5e                   	pop    esi
c001c024:	c3                   	ret    
c001c025:	83 ec 0c             	sub    esp,0xc
c001c028:	68 3f 07 00 00       	push   0x73f
c001c02d:	e8 19 38 ff ff       	call   c000f84b <malloc>
c001c032:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c035:	89 c6                	mov    esi,eax
c001c037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c03c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c03f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c042:	56                   	push   esi
c001c043:	e8 2a 1a 00 00       	call   c001da72 <Process::Process(char const*, Process*, char**)>
c001c048:	83 c4 20             	add    esp,0x20
c001c04b:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c052:	75 c9                	jne    c001c01d <sysCallSpawn(regs*)+0xe>
c001c054:	83 ec 0c             	sub    esp,0xc
c001c057:	56                   	push   esi
c001c058:	e8 fd 1f 00 00       	call   c001e05a <Process::createUserThread()>
c001c05d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c05f:	83 c4 10             	add    esp,0x10
c001c062:	99                   	cdq    
c001c063:	59                   	pop    ecx
c001c064:	5b                   	pop    ebx
c001c065:	5e                   	pop    esi
c001c066:	c3                   	ret    

c001c067 <sysCallGetEnv(regs*)>:
c001c067:	55                   	push   ebp
c001c068:	57                   	push   edi
c001c069:	56                   	push   esi
c001c06a:	53                   	push   ebx
c001c06b:	83 ec 28             	sub    esp,0x28
c001c06e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c072:	68 53 c0 02 c0       	push   0xc002c053
c001c077:	e8 8d 6e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c07c:	5f                   	pop    edi
c001c07d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c080:	5d                   	pop    ebp
c001c081:	53                   	push   ebx
c001c082:	68 82 c3 02 c0       	push   0xc002c382
c001c087:	e8 7d 6e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c08c:	58                   	pop    eax
c001c08d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c090:	5a                   	pop    edx
c001c091:	57                   	push   edi
c001c092:	68 5c c0 02 c0       	push   0xc002c05c
c001c097:	e8 6d 6e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c09c:	59                   	pop    ecx
c001c09d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0a2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0a5:	e8 b9 e4 ff ff       	call   c001a563 <Krnl::getProcessTotalEnvCount(Process*)>
c001c0aa:	5a                   	pop    edx
c001c0ab:	89 c5                	mov    ebp,eax
c001c0ad:	59                   	pop    ecx
c001c0ae:	50                   	push   eax
c001c0af:	68 66 c0 02 c0       	push   0xc002c066
c001c0b4:	e8 50 6e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c0b9:	83 c4 10             	add    esp,0x10
c001c0bc:	39 ef                	cmp    edi,ebp
c001c0be:	7c 15                	jl     c001c0d5 <sysCallGetEnv(regs*)+0x6e>
c001c0c0:	85 db                	test   ebx,ebx
c001c0c2:	75 0c                	jne    c001c0d0 <sysCallGetEnv(regs*)+0x69>
c001c0c4:	83 c4 1c             	add    esp,0x1c
c001c0c7:	31 c0                	xor    eax,eax
c001c0c9:	5b                   	pop    ebx
c001c0ca:	31 d2                	xor    edx,edx
c001c0cc:	5e                   	pop    esi
c001c0cd:	5f                   	pop    edi
c001c0ce:	5d                   	pop    ebp
c001c0cf:	c3                   	ret    
c001c0d0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0d3:	eb ef                	jmp    c001c0c4 <sysCallGetEnv(regs*)+0x5d>
c001c0d5:	83 ec 0c             	sub    esp,0xc
c001c0d8:	68 72 c0 02 c0       	push   0xc002c072
c001c0dd:	e8 27 6e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c0e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0e6:	83 c4 0c             	add    esp,0xc
c001c0e9:	57                   	push   edi
c001c0ea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0f0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0f3:	50                   	push   eax
c001c0f4:	e8 8a e4 ff ff       	call   c001a583 <Krnl::getProcessEnvPair(Process*, int)>
c001c0f9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c101:	68 01 c4 02 c0       	push   0xc002c401
c001c106:	e8 fe 6d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c10b:	83 c4 10             	add    esp,0x10
c001c10e:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c111:	85 f6                	test   esi,esi
c001c113:	75 47                	jne    c001c15c <sysCallGetEnv(regs*)+0xf5>
c001c115:	83 ec 0c             	sub    esp,0xc
c001c118:	55                   	push   ebp
c001c119:	e8 7e 46 fe ff       	call   c000079c <strlen>
c001c11e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c121:	89 c3                	mov    ebx,eax
c001c123:	e8 74 46 fe ff       	call   c000079c <strlen>
c001c128:	5a                   	pop    edx
c001c129:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c12d:	59                   	pop    ecx
c001c12e:	50                   	push   eax
c001c12f:	68 75 c0 02 c0       	push   0xc002c075
c001c134:	e8 d0 6d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c139:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c13c:	e8 5b 46 fe ff       	call   c000079c <strlen>
c001c141:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c144:	89 c3                	mov    ebx,eax
c001c146:	e8 51 46 fe ff       	call   c000079c <strlen>
c001c14b:	83 c4 10             	add    esp,0x10
c001c14e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c152:	83 c4 1c             	add    esp,0x1c
c001c155:	31 d2                	xor    edx,edx
c001c157:	5b                   	pop    ebx
c001c158:	5e                   	pop    esi
c001c159:	5f                   	pop    edi
c001c15a:	5d                   	pop    ebp
c001c15b:	c3                   	ret    
c001c15c:	83 ec 0c             	sub    esp,0xc
c001c15f:	68 1b c4 02 c0       	push   0xc002c41b
c001c164:	e8 a0 6d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c169:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c16c:	58                   	pop    eax
c001c16d:	5a                   	pop    edx
c001c16e:	55                   	push   ebp
c001c16f:	53                   	push   ebx
c001c170:	e8 c7 46 fe ff       	call   c000083c <strcpy>
c001c175:	59                   	pop    ecx
c001c176:	5e                   	pop    esi
c001c177:	68 7f c0 02 c0       	push   0xc002c07f
c001c17c:	53                   	push   ebx
c001c17d:	e8 fa 47 fe ff       	call   c000097c <strcat>
c001c182:	5d                   	pop    ebp
c001c183:	58                   	pop    eax
c001c184:	57                   	push   edi
c001c185:	53                   	push   ebx
c001c186:	e8 f1 47 fe ff       	call   c000097c <strcat>
c001c18b:	c7 04 24 35 c4 02 c0 	mov    DWORD PTR [esp],0xc002c435
c001c192:	e8 72 6d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	e9 25 ff ff ff       	jmp    c001c0c4 <sysCallGetEnv(regs*)+0x5d>

c001c19f <sysAppSettings(regs*)>:
c001c19f:	53                   	push   ebx
c001c1a0:	83 ec 08             	sub    esp,0x8
c001c1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1aa:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1b0:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1b5:	66 3d c0 09          	cmp    ax,0x9c0
c001c1b9:	75 2f                	jne    c001c1ea <sysAppSettings(regs*)+0x4b>
c001c1bb:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1c1:	83 e0 1f             	and    eax,0x1f
c001c1c4:	3c 01                	cmp    al,0x1
c001c1c6:	74 2e                	je     c001c1f6 <sysAppSettings(regs*)+0x57>
c001c1c8:	3c 07                	cmp    al,0x7
c001c1ca:	0f 84 bd 00 00 00    	je     c001c28d <sysAppSettings(regs*)+0xee>
c001c1d0:	84 c0                	test   al,al
c001c1d2:	0f 84 dc 00 00 00    	je     c001c2b4 <sysAppSettings(regs*)+0x115>
c001c1d8:	3c 08                	cmp    al,0x8
c001c1da:	74 6d                	je     c001c249 <sysAppSettings(regs*)+0xaa>
c001c1dc:	0f b6 c0             	movzx  eax,al
c001c1df:	83 c4 08             	add    esp,0x8
c001c1e2:	05 e8 03 00 00       	add    eax,0x3e8
c001c1e7:	5b                   	pop    ebx
c001c1e8:	99                   	cdq    
c001c1e9:	c3                   	ret    
c001c1ea:	b8 01 00 00 00       	mov    eax,0x1
c001c1ef:	31 d2                	xor    edx,edx
c001c1f1:	83 c4 08             	add    esp,0x8
c001c1f4:	5b                   	pop    ebx
c001c1f5:	c3                   	ret    
c001c1f6:	51                   	push   ecx
c001c1f7:	68 00 01 00 00       	push   0x100
c001c1fc:	6a 00                	push   0x0
c001c1fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c203:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c206:	83 c0 0c             	add    eax,0xc
c001c209:	50                   	push   eax
c001c20a:	e8 71 45 fe ff       	call   c0000780 <memset>
c001c20f:	83 c4 0c             	add    esp,0xc
c001c212:	68 ff 00 00 00       	push   0xff
c001c217:	53                   	push   ebx
c001c218:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c220:	83 c0 0c             	add    eax,0xc
c001c223:	50                   	push   eax
c001c224:	e8 23 45 fe ff       	call   c000074c <memcpy>
c001c229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c22e:	5b                   	pop    ebx
c001c22f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c232:	5a                   	pop    edx
c001c233:	8d 50 0c             	lea    edx,[eax+0xc]
c001c236:	52                   	push   edx
c001c237:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c23d:	e8 2e 49 ff ff       	call   c0010b70 <VgaText::setTitle(char*)>
c001c242:	83 c4 10             	add    esp,0x10
c001c245:	31 c0                	xor    eax,eax
c001c247:	eb a6                	jmp    c001c1ef <sysAppSettings(regs*)+0x50>
c001c249:	83 ec 08             	sub    esp,0x8
c001c24c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c252:	83 e0 0f             	and    eax,0xf
c001c255:	50                   	push   eax
c001c256:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c25b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c25e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c264:	e8 f7 48 ff ff       	call   c0010b60 <VgaText::setTitleColour(VgaColour)>
c001c269:	58                   	pop    eax
c001c26a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c270:	5a                   	pop    edx
c001c271:	c1 e8 04             	shr    eax,0x4
c001c274:	83 e0 0f             	and    eax,0xf
c001c277:	50                   	push   eax
c001c278:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c280:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c286:	e8 c5 48 ff ff       	call   c0010b50 <VgaText::setTitleTextColour(VgaColour)>
c001c28b:	eb b5                	jmp    c001c242 <sysAppSettings(regs*)+0xa3>
c001c28d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c292:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c295:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c29b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2a1:	c0 e8 06             	shr    al,0x6
c001c2a4:	83 e0 01             	and    eax,0x1
c001c2a7:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2ad:	31 c0                	xor    eax,eax
c001c2af:	e9 3b ff ff ff       	jmp    c001c1ef <sysAppSettings(regs*)+0x50>
c001c2b4:	b8 02 00 00 00       	mov    eax,0x2
c001c2b9:	e9 31 ff ff ff       	jmp    c001c1ef <sysAppSettings(regs*)+0x50>

c001c2be <sysSetFatAttrib(regs*)>:
c001c2be:	57                   	push   edi
c001c2bf:	56                   	push   esi
c001c2c0:	53                   	push   ebx
c001c2c1:	83 ec 1c             	sub    esp,0x1c
c001c2c4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2c8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2cb:	68 14 01 00 00       	push   0x114
c001c2d0:	e8 76 35 ff ff       	call   c000f84b <malloc>
c001c2d5:	83 c4 0c             	add    esp,0xc
c001c2d8:	89 c3                	mov    ebx,eax
c001c2da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2df:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2e2:	57                   	push   edi
c001c2e3:	53                   	push   ebx
c001c2e4:	e8 7f 71 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001c2e9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2ec:	83 c4 0c             	add    esp,0xc
c001c2ef:	0f b6 d4             	movzx  edx,ah
c001c2f2:	0f b6 c0             	movzx  eax,al
c001c2f5:	52                   	push   edx
c001c2f6:	50                   	push   eax
c001c2f7:	53                   	push   ebx
c001c2f8:	e8 e1 73 ff ff       	call   c00136de <File::chfatattr(unsigned char, unsigned char)>
c001c2fd:	83 c4 10             	add    esp,0x10
c001c300:	85 db                	test   ebx,ebx
c001c302:	74 14                	je     c001c318 <sysSetFatAttrib(regs*)+0x5a>
c001c304:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c308:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c30a:	83 ec 0c             	sub    esp,0xc
c001c30d:	53                   	push   ebx
c001c30e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c311:	83 c4 10             	add    esp,0x10
c001c314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c318:	85 c0                	test   eax,eax
c001c31a:	0f 95 c0             	setne  al
c001c31d:	31 d2                	xor    edx,edx
c001c31f:	0f b6 c0             	movzx  eax,al
c001c322:	f7 d8                	neg    eax
c001c324:	83 d2 00             	adc    edx,0x0
c001c327:	83 c4 10             	add    esp,0x10
c001c32a:	f7 da                	neg    edx
c001c32c:	5b                   	pop    ebx
c001c32d:	5e                   	pop    esi
c001c32e:	5f                   	pop    edi
c001c32f:	c3                   	ret    

c001c330 <sysPipe(regs*)>:
c001c330:	57                   	push   edi
c001c331:	56                   	push   esi
c001c332:	53                   	push   ebx
c001c333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c337:	83 ec 0c             	sub    esp,0xc
c001c33a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c33d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c340:	6a 20                	push   0x20
c001c342:	e8 04 35 ff ff       	call   c000f84b <malloc>
c001c347:	89 c3                	mov    ebx,eax
c001c349:	58                   	pop    eax
c001c34a:	5a                   	pop    edx
c001c34b:	68 00 50 00 00       	push   0x5000
c001c350:	53                   	push   ebx
c001c351:	e8 4a 41 ff ff       	call   c00104a0 <Pipe::Pipe(int)>
c001c356:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c359:	e8 a2 53 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c35e:	89 07                	mov    DWORD PTR [edi],eax
c001c360:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c363:	e8 98 53 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c368:	83 c4 10             	add    esp,0x10
c001c36b:	89 06                	mov    DWORD PTR [esi],eax
c001c36d:	31 d2                	xor    edx,edx
c001c36f:	5b                   	pop    ebx
c001c370:	31 c0                	xor    eax,eax
c001c372:	5e                   	pop    esi
c001c373:	5f                   	pop    edi
c001c374:	c3                   	ret    

c001c375 <sysGetUnixTime(regs*)>:
c001c375:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001c37a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c380:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c384:	e9 c9 7a ff ff       	jmp    c0013e52 <Clock::timeInSecondsLocal()>

c001c389 <string_ends_with(char const*, char const*)>:
c001c389:	57                   	push   edi
c001c38a:	56                   	push   esi
c001c38b:	53                   	push   ebx
c001c38c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c390:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c394:	83 ec 0c             	sub    esp,0xc
c001c397:	53                   	push   ebx
c001c398:	e8 ff 43 fe ff       	call   c000079c <strlen>
c001c39d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3a0:	89 c6                	mov    esi,eax
c001c3a2:	e8 f5 43 fe ff       	call   c000079c <strlen>
c001c3a7:	83 c4 10             	add    esp,0x10
c001c3aa:	39 c6                	cmp    esi,eax
c001c3ac:	7d 06                	jge    c001c3b4 <string_ends_with(char const*, char const*)+0x2b>
c001c3ae:	5b                   	pop    ebx
c001c3af:	31 c0                	xor    eax,eax
c001c3b1:	5e                   	pop    esi
c001c3b2:	5f                   	pop    edi
c001c3b3:	c3                   	ret    
c001c3b4:	83 ec 08             	sub    esp,0x8
c001c3b7:	29 c6                	sub    esi,eax
c001c3b9:	57                   	push   edi
c001c3ba:	01 f3                	add    ebx,esi
c001c3bc:	53                   	push   ebx
c001c3bd:	e8 06 45 fe ff       	call   c00008c8 <strcmp>
c001c3c2:	83 c4 10             	add    esp,0x10
c001c3c5:	85 c0                	test   eax,eax
c001c3c7:	5b                   	pop    ebx
c001c3c8:	0f 94 c0             	sete   al
c001c3cb:	5e                   	pop    esi
c001c3cc:	0f b6 c0             	movzx  eax,al
c001c3cf:	5f                   	pop    edi
c001c3d0:	c3                   	ret    

c001c3d1 <sysCallOpen(regs*)>:
c001c3d1:	56                   	push   esi
c001c3d2:	53                   	push   ebx
c001c3d3:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3d9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3e0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3e3:	85 c9                	test   ecx,ecx
c001c3e5:	0f 84 b3 00 00 00    	je     c001c49e <sysCallOpen(regs*)+0xcd>
c001c3eb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3ee:	85 c0                	test   eax,eax
c001c3f0:	0f 84 a8 00 00 00    	je     c001c49e <sysCallOpen(regs*)+0xcd>
c001c3f6:	52                   	push   edx
c001c3f7:	68 81 c0 02 c0       	push   0xc002c081
c001c3fc:	50                   	push   eax
c001c3fd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c401:	56                   	push   esi
c001c402:	e8 b7 6e ff ff       	call   c00132be <Fs::standardiseFiles(char*, char const*, char const*)>
c001c407:	89 34 24             	mov    DWORD PTR [esp],esi
c001c40a:	e8 8d 43 fe ff       	call   c000079c <strlen>
c001c40f:	83 c4 10             	add    esp,0x10
c001c412:	48                   	dec    eax
c001c413:	74 1d                	je     c001c432 <sysCallOpen(regs*)+0x61>
c001c415:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c418:	eb 0f                	jmp    c001c429 <sysCallOpen(regs*)+0x58>
c001c41a:	80 fa 3a             	cmp    dl,0x3a
c001c41d:	74 0f                	je     c001c42e <sysCallOpen(regs*)+0x5d>
c001c41f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c423:	48                   	dec    eax
c001c424:	74 0c                	je     c001c432 <sysCallOpen(regs*)+0x61>
c001c426:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c429:	80 fa 2e             	cmp    dl,0x2e
c001c42c:	75 ec                	jne    c001c41a <sysCallOpen(regs*)+0x49>
c001c42e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c432:	83 ec 08             	sub    esp,0x8
c001c435:	68 85 c0 02 c0       	push   0xc002c085
c001c43a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c43d:	e8 47 ff ff ff       	call   c001c389 <string_ends_with(char const*, char const*)>
c001c442:	83 c4 10             	add    esp,0x10
c001c445:	85 c0                	test   eax,eax
c001c447:	75 17                	jne    c001c460 <sysCallOpen(regs*)+0x8f>
c001c449:	83 ec 08             	sub    esp,0x8
c001c44c:	68 a6 c0 02 c0       	push   0xc002c0a6
c001c451:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c454:	e8 30 ff ff ff       	call   c001c389 <string_ends_with(char const*, char const*)>
c001c459:	83 c4 10             	add    esp,0x10
c001c45c:	85 c0                	test   eax,eax
c001c45e:	74 51                	je     c001c4b1 <sysCallOpen(regs*)+0xe0>
c001c460:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c463:	83 ec 08             	sub    esp,0x8
c001c466:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c46c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c473:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c476:	ff 30                	push   DWORD PTR [eax]
c001c478:	68 8a c0 02 c0       	push   0xc002c08a
c001c47d:	e8 87 6a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c482:	c7 04 24 99 c0 02 c0 	mov    DWORD PTR [esp],0xc002c099
c001c489:	e8 7b 6a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c48e:	83 c4 10             	add    esp,0x10
c001c491:	81 c4 04 01 00 00    	add    esp,0x104
c001c497:	31 c0                	xor    eax,eax
c001c499:	31 d2                	xor    edx,edx
c001c49b:	5b                   	pop    ebx
c001c49c:	5e                   	pop    esi
c001c49d:	c3                   	ret    
c001c49e:	81 c4 04 01 00 00    	add    esp,0x104
c001c4a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4ae:	5b                   	pop    ebx
c001c4af:	5e                   	pop    esi
c001c4b0:	c3                   	ret    
c001c4b1:	83 ec 08             	sub    esp,0x8
c001c4b4:	68 86 c0 02 c0       	push   0xc002c086
c001c4b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4bc:	e8 07 44 fe ff       	call   c00008c8 <strcmp>
c001c4c1:	83 c4 10             	add    esp,0x10
c001c4c4:	85 c0                	test   eax,eax
c001c4c6:	74 98                	je     c001c460 <sysCallOpen(regs*)+0x8f>
c001c4c8:	83 ec 08             	sub    esp,0x8
c001c4cb:	68 85 c0 02 c0       	push   0xc002c085
c001c4d0:	56                   	push   esi
c001c4d1:	e8 b3 fe ff ff       	call   c001c389 <string_ends_with(char const*, char const*)>
c001c4d6:	83 c4 10             	add    esp,0x10
c001c4d9:	85 c0                	test   eax,eax
c001c4db:	75 83                	jne    c001c460 <sysCallOpen(regs*)+0x8f>
c001c4dd:	83 ec 08             	sub    esp,0x8
c001c4e0:	68 ab c0 02 c0       	push   0xc002c0ab
c001c4e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4e8:	e8 9c fe ff ff       	call   c001c389 <string_ends_with(char const*, char const*)>
c001c4ed:	83 c4 10             	add    esp,0x10
c001c4f0:	85 c0                	test   eax,eax
c001c4f2:	0f 85 d9 00 00 00    	jne    c001c5d1 <sysCallOpen(regs*)+0x200>
c001c4f8:	83 ec 08             	sub    esp,0x8
c001c4fb:	68 b0 c0 02 c0       	push   0xc002c0b0
c001c500:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c503:	e8 81 fe ff ff       	call   c001c389 <string_ends_with(char const*, char const*)>
c001c508:	83 c4 10             	add    esp,0x10
c001c50b:	85 c0                	test   eax,eax
c001c50d:	0f 85 be 00 00 00    	jne    c001c5d1 <sysCallOpen(regs*)+0x200>
c001c513:	83 ec 08             	sub    esp,0x8
c001c516:	68 ac c0 02 c0       	push   0xc002c0ac
c001c51b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c51e:	e8 a5 43 fe ff       	call   c00008c8 <strcmp>
c001c523:	83 c4 10             	add    esp,0x10
c001c526:	85 c0                	test   eax,eax
c001c528:	0f 84 a3 00 00 00    	je     c001c5d1 <sysCallOpen(regs*)+0x200>
c001c52e:	83 ec 08             	sub    esp,0x8
c001c531:	68 ab c0 02 c0       	push   0xc002c0ab
c001c536:	56                   	push   esi
c001c537:	e8 4d fe ff ff       	call   c001c389 <string_ends_with(char const*, char const*)>
c001c53c:	83 c4 10             	add    esp,0x10
c001c53f:	85 c0                	test   eax,eax
c001c541:	0f 85 8a 00 00 00    	jne    c001c5d1 <sysCallOpen(regs*)+0x200>
c001c547:	83 ec 0c             	sub    esp,0xc
c001c54a:	68 14 01 00 00       	push   0x114
c001c54f:	e8 f7 32 ff ff       	call   c000f84b <malloc>
c001c554:	83 c4 0c             	add    esp,0xc
c001c557:	89 c6                	mov    esi,eax
c001c559:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c55e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c561:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c564:	56                   	push   esi
c001c565:	e8 fe 6e ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001c56a:	83 c4 10             	add    esp,0x10
c001c56d:	85 f6                	test   esi,esi
c001c56f:	0f 84 29 ff ff ff    	je     c001c49e <sysCallOpen(regs*)+0xcd>
c001c575:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c578:	0f b6 c2             	movzx  eax,dl
c001c57b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c57e:	89 d0                	mov    eax,edx
c001c580:	83 e0 01             	and    eax,0x1
c001c583:	f6 c2 02             	test   dl,0x2
c001c586:	74 03                	je     c001c58b <sysCallOpen(regs*)+0x1ba>
c001c588:	83 c8 02             	or     eax,0x2
c001c58b:	f6 c2 04             	test   dl,0x4
c001c58e:	74 03                	je     c001c593 <sysCallOpen(regs*)+0x1c2>
c001c590:	83 c8 04             	or     eax,0x4
c001c593:	f6 c2 08             	test   dl,0x8
c001c596:	74 03                	je     c001c59b <sysCallOpen(regs*)+0x1ca>
c001c598:	83 c8 0a             	or     eax,0xa
c001c59b:	83 e2 10             	and    edx,0x10
c001c59e:	74 03                	je     c001c5a3 <sysCallOpen(regs*)+0x1d2>
c001c5a0:	83 c8 12             	or     eax,0x12
c001c5a3:	83 ec 08             	sub    esp,0x8
c001c5a6:	50                   	push   eax
c001c5a7:	56                   	push   esi
c001c5a8:	e8 1f 6f ff ff       	call   c00134cc <File::open(FileOpenMode)>
c001c5ad:	83 c4 10             	add    esp,0x10
c001c5b0:	85 c0                	test   eax,eax
c001c5b2:	0f 85 e6 fe ff ff    	jne    c001c49e <sysCallOpen(regs*)+0xcd>
c001c5b8:	83 ec 0c             	sub    esp,0xc
c001c5bb:	56                   	push   esi
c001c5bc:	e8 3f 51 ff ff       	call   c0011700 <UnixFile::getFileDescriptor()>
c001c5c1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5c4:	89 02                	mov    DWORD PTR [edx],eax
c001c5c6:	c1 f8 1f             	sar    eax,0x1f
c001c5c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5cc:	e9 bd fe ff ff       	jmp    c001c48e <sysCallOpen(regs*)+0xbd>
c001c5d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5d4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5e1:	e9 ab fe ff ff       	jmp    c001c491 <sysCallOpen(regs*)+0xc0>

c001c5e6 <Sys::loadSyscalls()>:
c001c5e6:	c7 05 80 11 03 c0 f3 b6 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001b6f3
c001c5f0:	c7 05 84 11 03 c0 dc b2 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001b2dc
c001c5fa:	c7 05 88 11 03 c0 46 b4 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001b446
c001c604:	c7 05 8c 11 03 c0 29 b6 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b629
c001c60e:	c7 05 90 11 03 c0 de b3 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001b3de
c001c618:	c7 05 94 11 03 c0 13 b3 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001b313
c001c622:	c7 05 98 11 03 c0 f4 b2 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001b2f4
c001c62c:	c7 05 9c 11 03 c0 9b b4 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001b49b
c001c636:	c7 05 a4 11 03 c0 23 bc 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001bc23
c001c640:	c7 05 a0 11 03 c0 d1 c3 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001c3d1
c001c64a:	c7 05 a8 11 03 c0 ab bc 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001bcab
c001c654:	c7 05 ac 11 03 c0 12 b9 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b912
c001c65e:	c7 05 b0 11 03 c0 2e b7 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001b72e
c001c668:	c7 05 b4 11 03 c0 33 b7 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b733
c001c672:	c7 05 b8 11 03 c0 86 bd 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001bd86
c001c67c:	c7 05 bc 11 03 c0 20 bd 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001bd20
c001c686:	c7 05 c0 11 03 c0 fa b9 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001b9fa
c001c690:	c7 05 c4 11 03 c0 63 ba 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001ba63
c001c69a:	c7 05 c8 11 03 c0 e0 ba 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001bae0
c001c6a4:	c7 05 cc 11 03 c0 38 b7 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b738
c001c6ae:	c7 05 d0 11 03 c0 f6 bd 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001bdf6
c001c6b8:	c7 05 d4 11 03 c0 10 be 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001be10
c001c6c2:	c7 05 d8 11 03 c0 10 be 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001be10
c001c6cc:	c7 05 dc 11 03 c0 51 be 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001be51
c001c6d6:	c7 05 e0 11 03 c0 b5 be 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001beb5
c001c6e0:	c7 05 e4 11 03 c0 e4 b8 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001b8e4
c001c6ea:	c7 05 e8 11 03 c0 19 bf 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001bf19
c001c6f4:	c7 05 ec 11 03 c0 a1 b8 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b8a1
c001c6fe:	c7 05 f0 11 03 c0 65 bf 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001bf65
c001c708:	c7 05 f4 11 03 c0 a0 b9 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b9a0
c001c712:	c7 05 f8 11 03 c0 e8 bf 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001bfe8
c001c71c:	c7 05 fc 11 03 c0 63 bb 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001bb63
c001c726:	c7 05 00 12 03 c0 0f c0 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001c00f
c001c730:	c7 05 04 12 03 c0 67 c0 01 c0 	mov    DWORD PTR ds:0xc0031204,0xc001c067
c001c73a:	c7 05 08 12 03 c0 9f c1 01 c0 	mov    DWORD PTR ds:0xc0031208,0xc001c19f
c001c744:	c7 05 0c 12 03 c0 42 b7 01 c0 	mov    DWORD PTR ds:0xc003120c,0xc001b742
c001c74e:	c7 05 10 12 03 c0 ac b7 01 c0 	mov    DWORD PTR ds:0xc0031210,0xc001b7ac
c001c758:	c7 05 14 12 03 c0 f2 b7 01 c0 	mov    DWORD PTR ds:0xc0031214,0xc001b7f2
c001c762:	c7 05 18 12 03 c0 be c2 01 c0 	mov    DWORD PTR ds:0xc0031218,0xc001c2be
c001c76c:	c7 05 1c 12 03 c0 2b be 01 c0 	mov    DWORD PTR ds:0xc003121c,0xc001be2b
c001c776:	c7 05 20 12 03 c0 43 b8 01 c0 	mov    DWORD PTR ds:0xc0031220,0xc001b843
c001c780:	c7 05 24 12 03 c0 30 c3 01 c0 	mov    DWORD PTR ds:0xc0031224,0xc001c330
c001c78a:	c7 05 28 12 03 c0 75 c3 01 c0 	mov    DWORD PTR ds:0xc0031228,0xc001c375
c001c794:	c7 05 2c 12 03 c0 36 b3 01 c0 	mov    DWORD PTR ds:0xc003122c,0xc001b336
c001c79e:	c7 05 30 12 03 c0 b7 b4 01 c0 	mov    DWORD PTR ds:0xc0031230,0xc001b4b7
c001c7a8:	c7 05 34 12 03 c0 df b5 01 c0 	mov    DWORD PTR ds:0xc0031234,0xc001b5df
c001c7b2:	c7 05 38 12 03 c0 a6 b2 01 c0 	mov    DWORD PTR ds:0xc0031238,0xc001b2a6
c001c7bc:	c7 05 3c 12 03 c0 91 b6 01 c0 	mov    DWORD PTR ds:0xc003123c,0xc001b691
c001c7c6:	c7 05 40 12 03 c0 1f b3 01 c0 	mov    DWORD PTR ds:0xc0031240,0xc001b31f
c001c7d0:	c3                   	ret    

c001c7d1 <Sys::systemCall(regs*, void*)>:
c001c7d1:	53                   	push   ebx
c001c7d2:	83 ec 08             	sub    esp,0x8
c001c7d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7d9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7dc:	83 f8 7f             	cmp    eax,0x7f
c001c7df:	77 16                	ja     c001c7f7 <Sys::systemCall(regs*, void*)+0x26>
c001c7e1:	8b 14 85 80 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee80]
c001c7e8:	85 d2                	test   edx,edx
c001c7ea:	74 0b                	je     c001c7f7 <Sys::systemCall(regs*, void*)+0x26>
c001c7ec:	83 ec 0c             	sub    esp,0xc
c001c7ef:	53                   	push   ebx
c001c7f0:	ff d2                	call   edx
c001c7f2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7f5:	eb 0d                	jmp    c001c804 <Sys::systemCall(regs*, void*)+0x33>
c001c7f7:	52                   	push   edx
c001c7f8:	52                   	push   edx
c001c7f9:	50                   	push   eax
c001c7fa:	68 b5 c0 02 c0       	push   0xc002c0b5
c001c7ff:	e8 05 67 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c804:	83 c4 10             	add    esp,0x10
c001c807:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c80c:	31 d2                	xor    edx,edx
c001c80e:	83 c4 08             	add    esp,0x8
c001c811:	5b                   	pop    ebx
c001c812:	c3                   	ret    

c001c813 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c813:	55                   	push   ebp
c001c814:	57                   	push   edi
c001c815:	56                   	push   esi
c001c816:	53                   	push   ebx
c001c817:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c81d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c824:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c82b:	85 c0                	test   eax,eax
c001c82d:	0f 95 c1             	setne  cl
c001c830:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c838:	0f 94 c2             	sete   dl
c001c83b:	84 d1                	test   cl,dl
c001c83d:	74 23                	je     c001c862 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c83f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c845:	74 1b                	je     c001c862 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c847:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c84d:	89 da                	mov    edx,ebx
c001c84f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c855:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c85b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c862:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c869:	05 ff 0f 00 00       	add    eax,0xfff
c001c86e:	83 ec 0c             	sub    esp,0xc
c001c871:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c875:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c87b:	c1 e8 0c             	shr    eax,0xc
c001c87e:	89 ef                	mov    edi,ebp
c001c880:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c884:	c1 ef 0c             	shr    edi,0xc
c001c887:	6a 01                	push   0x1
c001c889:	e8 bd 52 ff ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c001c88e:	89 c6                	mov    esi,eax
c001c890:	58                   	pop    eax
c001c891:	5a                   	pop    edx
c001c892:	57                   	push   edi
c001c893:	68 3b c1 02 c0       	push   0xc002c13b
c001c898:	e8 6c 66 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c89d:	59                   	pop    ecx
c001c89e:	58                   	pop    eax
c001c89f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8a3:	68 4d c1 02 c0       	push   0xc002c14d
c001c8a8:	e8 5c 66 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c8ad:	83 c4 10             	add    esp,0x10
c001c8b0:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8b6:	0f 86 24 01 00 00    	jbe    c001c9e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8bc:	c1 e7 0c             	shl    edi,0xc
c001c8bf:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8c2:	89 df                	mov    edi,ebx
c001c8c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8c8:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8cf:	01 dd                	add    ebp,ebx
c001c8d1:	29 fd                	sub    ebp,edi
c001c8d3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8d7:	0f 84 01 01 00 00    	je     c001c9de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8dd:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8e3:	76 05                	jbe    c001c8ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8e5:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8ea:	83 ec 0c             	sub    esp,0xc
c001c8ed:	31 d2                	xor    edx,edx
c001c8ef:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8fc:	50                   	push   eax
c001c8fd:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c901:	50                   	push   eax
c001c902:	52                   	push   edx
c001c903:	55                   	push   ebp
c001c904:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c90b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c90e:	83 c4 20             	add    esp,0x20
c001c911:	85 c0                	test   eax,eax
c001c913:	74 0a                	je     c001c91f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c915:	53                   	push   ebx
c001c916:	53                   	push   ebx
c001c917:	50                   	push   eax
c001c918:	68 5f c1 02 c0       	push   0xc002c15f
c001c91d:	eb 0f                	jmp    c001c92e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c91f:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c923:	74 20                	je     c001c945 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c925:	51                   	push   ecx
c001c926:	51                   	push   ecx
c001c927:	6a 00                	push   0x0
c001c929:	68 8a c1 02 c0       	push   0xc002c18a
c001c92e:	e8 d6 65 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001c933:	89 34 24             	mov    DWORD PTR [esp],esi
c001c936:	e8 c0 56 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	31 c0                	xor    eax,eax
c001c940:	e9 55 01 00 00       	jmp    c001ca9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c945:	e8 d8 14 00 00       	call   c001de22 <lockScheduler()>
c001c94a:	e8 9e 35 ff ff       	call   c000feed <Phys::allocatePage()>
c001c94f:	6a 07                	push   0x7
c001c951:	89 c5                	mov    ebp,eax
c001c953:	56                   	push   esi
c001c954:	50                   	push   eax
c001c955:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c95a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c95d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c963:	e8 fa 59 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c968:	83 c4 0c             	add    esp,0xc
c001c96b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c972:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c978:	6a 00                	push   0x0
c001c97a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c97f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c982:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c988:	e8 3f 58 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c98d:	58                   	pop    eax
c001c98e:	5a                   	pop    edx
c001c98f:	68 07 0c 00 00       	push   0xc07
c001c994:	57                   	push   edi
c001c995:	81 c7 00 10 00 00    	add    edi,0x1000
c001c99b:	55                   	push   ebp
c001c99c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9a3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a9:	6a 00                	push   0x0
c001c9ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b9:	e8 5e 5d ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9be:	83 c4 1c             	add    esp,0x1c
c001c9c1:	68 00 10 00 00       	push   0x1000
c001c9c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9ca:	50                   	push   eax
c001c9cb:	56                   	push   esi
c001c9cc:	e8 7b 3d fe ff       	call   c000074c <memcpy>
c001c9d1:	e8 4e 14 00 00       	call   c001de24 <unlockScheduler()>
c001c9d6:	83 c4 10             	add    esp,0x10
c001c9d9:	e9 ea fe ff ff       	jmp    c001c8c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9de:	89 fb                	mov    ebx,edi
c001c9e0:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9e8:	0f 86 9e 00 00 00    	jbe    c001ca8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9ee:	e8 2f 14 00 00       	call   c001de22 <lockScheduler()>
c001c9f3:	51                   	push   ecx
c001c9f4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9fb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca01:	6a 00                	push   0x0
c001ca03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca0b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca11:	e8 b6 57 ff ff       	call   c00121cc <VAS::mapOtherVASIn(bool, VAS*)>
c001ca16:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca1a:	c1 e7 0c             	shl    edi,0xc
c001ca1d:	01 df                	add    edi,ebx
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	39 fb                	cmp    ebx,edi
c001ca24:	74 61                	je     c001ca87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca26:	e8 c2 34 ff ff       	call   c000feed <Phys::allocatePage()>
c001ca2b:	6a 07                	push   0x7
c001ca2d:	89 c5                	mov    ebp,eax
c001ca2f:	56                   	push   esi
c001ca30:	50                   	push   eax
c001ca31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca39:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca3f:	e8 1e 59 ff ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca44:	58                   	pop    eax
c001ca45:	5a                   	pop    edx
c001ca46:	68 07 0c 00 00       	push   0xc07
c001ca4b:	53                   	push   ebx
c001ca4c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca52:	55                   	push   ebp
c001ca53:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca5a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca60:	6a 00                	push   0x0
c001ca62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca6a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca70:	e8 a7 5c ff ff       	call   c001271c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca75:	83 c4 1c             	add    esp,0x1c
c001ca78:	68 00 10 00 00       	push   0x1000
c001ca7d:	6a 00                	push   0x0
c001ca7f:	56                   	push   esi
c001ca80:	e8 fb 3c fe ff       	call   c0000780 <memset>
c001ca85:	eb 98                	jmp    c001ca1f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca87:	e8 98 13 00 00       	call   c001de24 <unlockScheduler()>
c001ca8c:	83 ec 0c             	sub    esp,0xc
c001ca8f:	56                   	push   esi
c001ca90:	e8 66 55 ff ff       	call   c0011ffb <Virt::freeKernelVirtualPages(unsigned long)>
c001ca95:	83 c4 10             	add    esp,0x10
c001ca98:	b0 01                	mov    al,0x1
c001ca9a:	81 c4 2c 10 00 00    	add    esp,0x102c
c001caa0:	5b                   	pop    ebx
c001caa1:	5e                   	pop    esi
c001caa2:	5f                   	pop    edi
c001caa3:	5d                   	pop    ebp
c001caa4:	c3                   	ret    

c001caa5 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001caa5:	55                   	push   ebp
c001caa6:	57                   	push   edi
c001caa7:	56                   	push   esi
c001caa8:	53                   	push   ebx
c001caa9:	83 ec 48             	sub    esp,0x48
c001caac:	68 14 01 00 00       	push   0x114
c001cab1:	e8 95 2d ff ff       	call   c000f84b <malloc>
c001cab6:	83 c4 0c             	add    esp,0xc
c001cab9:	89 c6                	mov    esi,eax
c001cabb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cabf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cac3:	50                   	push   eax
c001cac4:	e8 9f 69 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001cac9:	58                   	pop    eax
c001caca:	5a                   	pop    edx
c001cacb:	6a 01                	push   0x1
c001cacd:	56                   	push   esi
c001cace:	e8 f9 69 ff ff       	call   c00134cc <File::open(FileOpenMode)>
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	85 c0                	test   eax,eax
c001cad8:	0f 85 47 01 00 00    	jne    c001cc25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cade:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cae6:	83 ec 0c             	sub    esp,0xc
c001cae9:	6a 34                	push   0x34
c001caeb:	e8 5b 2d ff ff       	call   c000f84b <malloc>
c001caf0:	89 c3                	mov    ebx,eax
c001caf2:	58                   	pop    eax
c001caf3:	8b 06                	mov    eax,DWORD PTR [esi]
c001caf5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001caf9:	57                   	push   edi
c001cafa:	53                   	push   ebx
c001cafb:	6a 00                	push   0x0
c001cafd:	6a 34                	push   0x34
c001caff:	56                   	push   esi
c001cb00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb03:	83 c4 20             	add    esp,0x20
c001cb06:	85 c0                	test   eax,eax
c001cb08:	0f 85 17 01 00 00    	jne    c001cc25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb0e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb14:	0f 85 0b 01 00 00    	jne    c001cc25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb1a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb1d:	85 c0                	test   eax,eax
c001cb1f:	0f 84 00 01 00 00    	je     c001cc25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb25:	31 d2                	xor    edx,edx
c001cb27:	55                   	push   ebp
c001cb28:	52                   	push   edx
c001cb29:	50                   	push   eax
c001cb2a:	56                   	push   esi
c001cb2b:	e8 5a 6a ff ff       	call   c001358a <File::seek(unsigned long long)>
c001cb30:	83 c4 10             	add    esp,0x10
c001cb33:	85 c0                	test   eax,eax
c001cb35:	0f 85 ea 00 00 00    	jne    c001cc25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb3b:	83 ec 0c             	sub    esp,0xc
c001cb3e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb41:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb49:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb4d:	0f af c2             	imul   eax,edx
c001cb50:	50                   	push   eax
c001cb51:	e8 f5 2c ff ff       	call   c000f84b <malloc>
c001cb56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb5f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb63:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb67:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb6b:	0f af c2             	imul   eax,edx
c001cb6e:	99                   	cdq    
c001cb6f:	52                   	push   edx
c001cb70:	50                   	push   eax
c001cb71:	56                   	push   esi
c001cb72:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb75:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb78:	83 c4 20             	add    esp,0x20
c001cb7b:	85 c0                	test   eax,eax
c001cb7d:	0f 84 a2 00 00 00    	je     c001cc25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb83:	31 d2                	xor    edx,edx
c001cb85:	51                   	push   ecx
c001cb86:	52                   	push   edx
c001cb87:	50                   	push   eax
c001cb88:	56                   	push   esi
c001cb89:	e8 fc 69 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001cb8e:	83 c4 10             	add    esp,0x10
c001cb91:	85 c0                	test   eax,eax
c001cb93:	0f 85 8c 00 00 00    	jne    c001cc25 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb99:	83 ec 0c             	sub    esp,0xc
c001cb9c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cba0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cba4:	31 ed                	xor    ebp,ebp
c001cba6:	0f af c2             	imul   eax,edx
c001cba9:	50                   	push   eax
c001cbaa:	e8 9c 2c ff ff       	call   c000f84b <malloc>
c001cbaf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbb5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbbc:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbc0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbc4:	0f af c2             	imul   eax,edx
c001cbc7:	99                   	cdq    
c001cbc8:	52                   	push   edx
c001cbc9:	50                   	push   eax
c001cbca:	56                   	push   esi
c001cbcb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbce:	83 c4 20             	add    esp,0x20
c001cbd1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbd9:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbdd:	0f 86 80 00 00 00    	jbe    c001cc63 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbe3:	0f b7 fd             	movzx  edi,bp
c001cbe6:	c1 e7 05             	shl    edi,0x5
c001cbe9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbed:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbf0:	75 6b                	jne    c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbf2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbf5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbf9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc00:	52                   	push   edx
c001cc01:	31 d2                	xor    edx,edx
c001cc03:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc06:	52                   	push   edx
c001cc07:	50                   	push   eax
c001cc08:	56                   	push   esi
c001cc09:	e8 7c 69 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001cc0e:	83 c4 10             	add    esp,0x10
c001cc11:	85 c0                	test   eax,eax
c001cc13:	74 17                	je     c001cc2c <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc15:	83 ec 0c             	sub    esp,0xc
c001cc18:	68 b6 c1 02 c0       	push   0xc002c1b6
c001cc1d:	e8 e7 62 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001cc22:	83 c4 10             	add    esp,0x10
c001cc25:	31 c0                	xor    eax,eax
c001cc27:	e9 87 00 00 00       	jmp    c001ccb3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc2c:	83 ec 0c             	sub    esp,0xc
c001cc2f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc32:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc35:	50                   	push   eax
c001cc36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc3e:	56                   	push   esi
c001cc3f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc43:	e8 cb fb ff ff       	call   c001c813 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc4c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc50:	83 c4 20             	add    esp,0x20
c001cc53:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc57:	73 04                	jae    c001cc5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc5d:	45                   	inc    ebp
c001cc5e:	e9 76 ff ff ff       	jmp    c001cbd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc63:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc6f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc75:	83 ec 0c             	sub    esp,0xc
c001cc78:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc7e:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc83:	05 00 10 00 00       	add    eax,0x1000
c001cc88:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8f:	e8 c7 2b ff ff       	call   c000f85b <free>
c001cc94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc97:	e8 bf 2b ff ff       	call   c000f85b <free>
c001cc9c:	58                   	pop    eax
c001cc9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cca1:	e8 b5 2b ff ff       	call   c000f85b <free>
c001cca6:	89 34 24             	mov    DWORD PTR [esp],esi
c001cca9:	e8 7c 68 ff ff       	call   c001352a <File::close()>
c001ccae:	83 c4 10             	add    esp,0x10
c001ccb1:	b0 01                	mov    al,0x1
c001ccb3:	83 c4 3c             	add    esp,0x3c
c001ccb6:	5b                   	pop    ebx
c001ccb7:	5e                   	pop    esi
c001ccb8:	5f                   	pop    edi
c001ccb9:	5d                   	pop    ebp
c001ccba:	c3                   	ret    

c001ccbb <Thr::runtimeReferenceHelper()>:
c001ccbb:	83 ec 18             	sub    esp,0x18
c001ccbe:	68 be c1 02 c0       	push   0xc002c1be
c001ccc3:	e8 41 62 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001ccc8:	fa                   	cli    
c001ccc9:	83 c4 10             	add    esp,0x10
c001cccc:	eb fe                	jmp    c001cccc <Thr::runtimeReferenceHelper()+0x11>

c001ccce <Thr::getAddressOfKernelSymbol(char const*)>:
c001ccce:	57                   	push   edi
c001cccf:	56                   	push   esi
c001ccd0:	53                   	push   ebx
c001ccd1:	31 db                	xor    ebx,ebx
c001ccd3:	39 1d 20 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b20,ebx
c001ccd9:	7e 3c                	jle    c001cd17 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccdb:	8b 34 9d a0 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce560]
c001cce2:	31 ff                	xor    edi,edi
c001cce4:	39 3c 9d a0 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce660],edi
c001cceb:	7e 27                	jle    c001cd14 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cced:	50                   	push   eax
c001ccee:	50                   	push   eax
c001ccef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccf3:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccf5:	03 04 9d 20 1a 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce5e0]
c001ccfc:	50                   	push   eax
c001ccfd:	e8 c6 3b fe ff       	call   c00008c8 <strcmp>
c001cd02:	83 c4 10             	add    esp,0x10
c001cd05:	85 c0                	test   eax,eax
c001cd07:	75 05                	jne    c001cd0e <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd09:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd0c:	eb 0b                	jmp    c001cd19 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd0e:	83 c6 10             	add    esi,0x10
c001cd11:	47                   	inc    edi
c001cd12:	eb d0                	jmp    c001cce4 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd14:	43                   	inc    ebx
c001cd15:	eb bc                	jmp    c001ccd3 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd17:	31 c0                	xor    eax,eax
c001cd19:	5b                   	pop    ebx
c001cd1a:	5e                   	pop    esi
c001cd1b:	5f                   	pop    edi
c001cd1c:	c3                   	ret    

c001cd1d <Thr::loadKernelSymbolTable(char const*)>:
c001cd1d:	55                   	push   ebp
c001cd1e:	57                   	push   edi
c001cd1f:	56                   	push   esi
c001cd20:	53                   	push   ebx
c001cd21:	83 ec 68             	sub    esp,0x68
c001cd24:	8b 35 74 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031b74
c001cd2a:	68 14 01 00 00       	push   0x114
c001cd2f:	e8 17 2b ff ff       	call   c000f84b <malloc>
c001cd34:	83 c4 0c             	add    esp,0xc
c001cd37:	89 c3                	mov    ebx,eax
c001cd39:	56                   	push   esi
c001cd3a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd3e:	50                   	push   eax
c001cd3f:	e8 24 67 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001cd44:	5e                   	pop    esi
c001cd45:	5f                   	pop    edi
c001cd46:	6a 01                	push   0x1
c001cd48:	53                   	push   ebx
c001cd49:	e8 7e 67 ff ff       	call   c00134cc <File::open(FileOpenMode)>
c001cd4e:	83 c4 10             	add    esp,0x10
c001cd51:	85 c0                	test   eax,eax
c001cd53:	74 0a                	je     c001cd5f <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd55:	83 ec 0c             	sub    esp,0xc
c001cd58:	68 e0 c1 02 c0       	push   0xc002c1e0
c001cd5d:	eb 34                	jmp    c001cd93 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd5f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd67:	83 ec 0c             	sub    esp,0xc
c001cd6a:	6a 34                	push   0x34
c001cd6c:	e8 da 2a ff ff       	call   c000f84b <malloc>
c001cd71:	59                   	pop    ecx
c001cd72:	89 c7                	mov    edi,eax
c001cd74:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd78:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd7a:	56                   	push   esi
c001cd7b:	57                   	push   edi
c001cd7c:	6a 00                	push   0x0
c001cd7e:	6a 34                	push   0x34
c001cd80:	53                   	push   ebx
c001cd81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd84:	83 c4 20             	add    esp,0x20
c001cd87:	85 c0                	test   eax,eax
c001cd89:	74 17                	je     c001cda2 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	68 f7 c1 02 c0       	push   0xc002c1f7
c001cd93:	e8 af d8 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001cd98:	83 c4 10             	add    esp,0x10
c001cd9b:	31 c0                	xor    eax,eax
c001cd9d:	e9 31 02 00 00       	jmp    c001cfd3 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cda2:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cda8:	75 e1                	jne    c001cd8b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdaa:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdad:	85 c0                	test   eax,eax
c001cdaf:	74 da                	je     c001cd8b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdb1:	52                   	push   edx
c001cdb2:	31 d2                	xor    edx,edx
c001cdb4:	52                   	push   edx
c001cdb5:	50                   	push   eax
c001cdb6:	53                   	push   ebx
c001cdb7:	e8 ce 67 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001cdbc:	83 c4 10             	add    esp,0x10
c001cdbf:	85 c0                	test   eax,eax
c001cdc1:	75 c8                	jne    c001cd8b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdc3:	83 ec 0c             	sub    esp,0xc
c001cdc6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdca:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdce:	31 ed                	xor    ebp,ebp
c001cdd0:	0f af c2             	imul   eax,edx
c001cdd3:	50                   	push   eax
c001cdd4:	e8 72 2a ff ff       	call   c000f84b <malloc>
c001cdd9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cddb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cddf:	89 34 24             	mov    DWORD PTR [esp],esi
c001cde2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cde6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdee:	0f af c2             	imul   eax,edx
c001cdf1:	99                   	cdq    
c001cdf2:	52                   	push   edx
c001cdf3:	50                   	push   eax
c001cdf4:	53                   	push   ebx
c001cdf5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdf8:	83 c4 20             	add    esp,0x20
c001cdfb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce03:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce0b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce1b:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce1f:	0f 86 aa 00 00 00    	jbe    c001cecf <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce25:	0f b7 f5             	movzx  esi,bp
c001ce28:	6b f6 28             	imul   esi,esi,0x28
c001ce2b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce2f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce36:	50                   	push   eax
c001ce37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce3b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce3f:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce41:	6b c0 28             	imul   eax,eax,0x28
c001ce44:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce48:	89 d0                	mov    eax,edx
c001ce4a:	31 d2                	xor    edx,edx
c001ce4c:	52                   	push   edx
c001ce4d:	50                   	push   eax
c001ce4e:	53                   	push   ebx
c001ce4f:	e8 36 67 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001ce54:	83 c4 0c             	add    esp,0xc
c001ce57:	6a 20                	push   0x20
c001ce59:	6a 00                	push   0x0
c001ce5b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce5f:	52                   	push   edx
c001ce60:	e8 1b 39 fe ff       	call   c0000780 <memset>
c001ce65:	58                   	pop    eax
c001ce66:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce68:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce6c:	51                   	push   ecx
c001ce6d:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce71:	52                   	push   edx
c001ce72:	6a 00                	push   0x0
c001ce74:	6a 1f                	push   0x1f
c001ce76:	53                   	push   ebx
c001ce77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce7a:	83 c4 18             	add    esp,0x18
c001ce7d:	68 0e c2 02 c0       	push   0xc002c20e
c001ce82:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce86:	52                   	push   edx
c001ce87:	e8 3c 3a fe ff       	call   c00008c8 <strcmp>
c001ce8c:	83 c4 10             	add    esp,0x10
c001ce8f:	85 c0                	test   eax,eax
c001ce91:	75 0f                	jne    c001cea2 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce93:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cea2:	50                   	push   eax
c001cea3:	50                   	push   eax
c001cea4:	68 16 c2 02 c0       	push   0xc002c216
c001cea9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cead:	50                   	push   eax
c001ceae:	e8 15 3a fe ff       	call   c00008c8 <strcmp>
c001ceb3:	83 c4 10             	add    esp,0x10
c001ceb6:	85 c0                	test   eax,eax
c001ceb8:	75 0f                	jne    c001cec9 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ceba:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cebd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cec1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cec5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cec9:	45                   	inc    ebp
c001ceca:	e9 4c ff ff ff       	jmp    c001ce1b <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cecf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ced4:	75 10                	jne    c001cee6 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ced6:	83 ec 0c             	sub    esp,0xc
c001ced9:	68 1e c2 02 c0       	push   0xc002c21e
c001cede:	e8 64 d7 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001cee3:	83 c4 10             	add    esp,0x10
c001cee6:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ceeb:	75 10                	jne    c001cefd <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ceed:	83 ec 0c             	sub    esp,0xc
c001cef0:	68 1e c2 02 c0       	push   0xc002c21e
c001cef5:	e8 4d d7 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001cefa:	83 c4 10             	add    esp,0x10
c001cefd:	31 d2                	xor    edx,edx
c001ceff:	50                   	push   eax
c001cf00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf04:	52                   	push   edx
c001cf05:	50                   	push   eax
c001cf06:	53                   	push   ebx
c001cf07:	e8 7e 66 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001cf0c:	5a                   	pop    edx
c001cf0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf11:	e8 35 29 ff ff       	call   c000f84b <malloc>
c001cf16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf1e:	31 c9                	xor    ecx,ecx
c001cf20:	5e                   	pop    esi
c001cf21:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf23:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf27:	55                   	push   ebp
c001cf28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf2c:	51                   	push   ecx
c001cf2d:	52                   	push   edx
c001cf2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf32:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf36:	53                   	push   ebx
c001cf37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf3a:	83 c4 14             	add    esp,0x14
c001cf3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf41:	e8 05 29 ff ff       	call   c000f84b <malloc>
c001cf46:	89 c6                	mov    esi,eax
c001cf48:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf4d:	56                   	push   esi
c001cf4e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf52:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf56:	51                   	push   ecx
c001cf57:	52                   	push   edx
c001cf58:	53                   	push   ebx
c001cf59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf60:	8b 15 20 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b20
c001cf66:	83 c4 1c             	add    esp,0x1c
c001cf69:	c1 e8 04             	shr    eax,0x4
c001cf6c:	89 04 95 a0 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce660],eax
c001cf73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf77:	31 d2                	xor    edx,edx
c001cf79:	52                   	push   edx
c001cf7a:	50                   	push   eax
c001cf7b:	53                   	push   ebx
c001cf7c:	e8 09 66 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001cf81:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf83:	31 d2                	xor    edx,edx
c001cf85:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf88:	56                   	push   esi
c001cf89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf8d:	52                   	push   edx
c001cf8e:	50                   	push   eax
c001cf8f:	53                   	push   ebx
c001cf90:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf93:	83 c4 14             	add    esp,0x14
c001cf96:	53                   	push   ebx
c001cf97:	e8 8e 65 ff ff       	call   c001352a <File::close()>
c001cf9c:	5d                   	pop    ebp
c001cf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfa1:	e8 b5 28 ff ff       	call   c000f85b <free>
c001cfa6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfa9:	e8 ad 28 ff ff       	call   c000f85b <free>
c001cfae:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c001cfb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfb7:	8d 50 01             	lea    edx,[eax+0x1]
c001cfba:	89 0c 85 a0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce560],ecx
c001cfc1:	89 34 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],esi
c001cfc8:	89 15 20 1b 03 c0    	mov    DWORD PTR ds:0xc0031b20,edx
c001cfce:	83 c4 10             	add    esp,0x10
c001cfd1:	b0 01                	mov    al,0x1
c001cfd3:	83 c4 5c             	add    esp,0x5c
c001cfd6:	5b                   	pop    ebx
c001cfd7:	5e                   	pop    esi
c001cfd8:	5f                   	pop    edi
c001cfd9:	5d                   	pop    ebp
c001cfda:	c3                   	ret    

c001cfdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfdb:	55                   	push   ebp
c001cfdc:	57                   	push   edi
c001cfdd:	56                   	push   esi
c001cfde:	53                   	push   ebx
c001cfdf:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfe5:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfec:	8b 1d 74 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b74
c001cff2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cff6:	68 14 01 00 00       	push   0x114
c001cffb:	e8 4b 28 ff ff       	call   c000f84b <malloc>
c001d000:	83 c4 0c             	add    esp,0xc
c001d003:	89 c5                	mov    ebp,eax
c001d005:	53                   	push   ebx
c001d006:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d00d:	50                   	push   eax
c001d00e:	e8 55 64 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001d013:	5e                   	pop    esi
c001d014:	5f                   	pop    edi
c001d015:	6a 01                	push   0x1
c001d017:	55                   	push   ebp
c001d018:	e8 af 64 ff ff       	call   c00134cc <File::open(FileOpenMode)>
c001d01d:	83 c4 10             	add    esp,0x10
c001d020:	85 c0                	test   eax,eax
c001d022:	0f 85 8d 06 00 00    	jne    c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d028:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d030:	83 ec 0c             	sub    esp,0xc
c001d033:	6a 34                	push   0x34
c001d035:	e8 11 28 ff ff       	call   c000f84b <malloc>
c001d03a:	5b                   	pop    ebx
c001d03b:	89 c7                	mov    edi,eax
c001d03d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d041:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d044:	53                   	push   ebx
c001d045:	57                   	push   edi
c001d046:	6a 00                	push   0x0
c001d048:	6a 34                	push   0x34
c001d04a:	55                   	push   ebp
c001d04b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d04e:	83 c4 20             	add    esp,0x20
c001d051:	85 c0                	test   eax,eax
c001d053:	0f 85 5c 06 00 00    	jne    c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d059:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d05f:	0f 85 50 06 00 00    	jne    c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d065:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d068:	85 c0                	test   eax,eax
c001d06a:	0f 84 45 06 00 00    	je     c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d070:	31 d2                	xor    edx,edx
c001d072:	51                   	push   ecx
c001d073:	52                   	push   edx
c001d074:	50                   	push   eax
c001d075:	55                   	push   ebp
c001d076:	e8 0f 65 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001d07b:	83 c4 10             	add    esp,0x10
c001d07e:	85 c0                	test   eax,eax
c001d080:	0f 85 2f 06 00 00    	jne    c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d086:	83 ec 0c             	sub    esp,0xc
c001d089:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d08c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d090:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d094:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d098:	0f af c2             	imul   eax,edx
c001d09b:	50                   	push   eax
c001d09c:	e8 aa 27 ff ff       	call   c000f84b <malloc>
c001d0a1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0af:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0b3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0b7:	0f af c2             	imul   eax,edx
c001d0ba:	99                   	cdq    
c001d0bb:	52                   	push   edx
c001d0bc:	50                   	push   eax
c001d0bd:	55                   	push   ebp
c001d0be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0c1:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0c4:	83 c4 20             	add    esp,0x20
c001d0c7:	85 c0                	test   eax,eax
c001d0c9:	0f 84 e6 05 00 00    	je     c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0cf:	52                   	push   edx
c001d0d0:	31 d2                	xor    edx,edx
c001d0d2:	52                   	push   edx
c001d0d3:	50                   	push   eax
c001d0d4:	55                   	push   ebp
c001d0d5:	e8 b0 64 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001d0da:	83 c4 10             	add    esp,0x10
c001d0dd:	85 c0                	test   eax,eax
c001d0df:	0f 85 d0 05 00 00    	jne    c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0e5:	83 ec 0c             	sub    esp,0xc
c001d0e8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0ec:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0f0:	31 f6                	xor    esi,esi
c001d0f2:	0f af c2             	imul   eax,edx
c001d0f5:	50                   	push   eax
c001d0f6:	e8 50 27 ff ff       	call   c000f84b <malloc>
c001d0fb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d102:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d105:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d109:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d10d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d111:	0f af c2             	imul   eax,edx
c001d114:	99                   	cdq    
c001d115:	52                   	push   edx
c001d116:	50                   	push   eax
c001d117:	55                   	push   ebp
c001d118:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d11b:	83 c4 20             	add    esp,0x20
c001d11e:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d122:	0f 86 8a 00 00 00    	jbe    c001d1b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d128:	0f b7 de             	movzx  ebx,si
c001d12b:	c1 e3 05             	shl    ebx,0x5
c001d12e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d132:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d135:	75 75                	jne    c001d1ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d137:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d13a:	31 d2                	xor    edx,edx
c001d13c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d140:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d143:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d147:	50                   	push   eax
c001d148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d14b:	52                   	push   edx
c001d14c:	50                   	push   eax
c001d14d:	55                   	push   ebp
c001d14e:	e8 37 64 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001d153:	83 c4 10             	add    esp,0x10
c001d156:	85 c0                	test   eax,eax
c001d158:	0f 85 57 05 00 00    	jne    c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d15e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d165:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d168:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d16c:	31 d2                	xor    edx,edx
c001d16e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d172:	83 ec 0c             	sub    esp,0xc
c001d175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d179:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d180:	50                   	push   eax
c001d181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d185:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d189:	52                   	push   edx
c001d18a:	50                   	push   eax
c001d18b:	55                   	push   ebp
c001d18c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d18f:	83 c4 1c             	add    esp,0x1c
c001d192:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d195:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d198:	50                   	push   eax
c001d199:	6a 00                	push   0x0
c001d19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d19f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1a3:	50                   	push   eax
c001d1a4:	e8 d7 35 fe ff       	call   c0000780 <memset>
c001d1a9:	83 c4 10             	add    esp,0x10
c001d1ac:	46                   	inc    esi
c001d1ad:	e9 6c ff ff ff       	jmp    c001d11e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1b2:	53                   	push   ebx
c001d1b3:	31 db                	xor    ebx,ebx
c001d1b5:	68 00 01 00 00       	push   0x100
c001d1ba:	6a 00                	push   0x0
c001d1bc:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1c0:	50                   	push   eax
c001d1c1:	e8 ba 35 fe ff       	call   c0000780 <memset>
c001d1c6:	83 c4 0c             	add    esp,0xc
c001d1c9:	68 00 01 00 00       	push   0x100
c001d1ce:	6a 00                	push   0x0
c001d1d0:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1d7:	50                   	push   eax
c001d1d8:	e8 a3 35 fe ff       	call   c0000780 <memset>
c001d1dd:	83 c4 10             	add    esp,0x10
c001d1e0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1e8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1f0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1f8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d200:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d208:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d20c:	0f 86 30 01 00 00    	jbe    c001d342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d212:	0f b7 f3             	movzx  esi,bx
c001d215:	6b f6 28             	imul   esi,esi,0x28
c001d218:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d21c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d21f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d223:	52                   	push   edx
c001d224:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d228:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d22c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d22e:	6b d2 28             	imul   edx,edx,0x28
c001d231:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d235:	31 d2                	xor    edx,edx
c001d237:	52                   	push   edx
c001d238:	50                   	push   eax
c001d239:	55                   	push   ebp
c001d23a:	e8 4b 63 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001d23f:	83 c4 0c             	add    esp,0xc
c001d242:	6a 20                	push   0x20
c001d244:	6a 00                	push   0x0
c001d246:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d24d:	51                   	push   ecx
c001d24e:	e8 2d 35 fe ff       	call   c0000780 <memset>
c001d253:	59                   	pop    ecx
c001d254:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d257:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d25b:	52                   	push   edx
c001d25c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d263:	51                   	push   ecx
c001d264:	6a 00                	push   0x0
c001d266:	6a 1f                	push   0x1f
c001d268:	55                   	push   ebp
c001d269:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d26c:	83 c4 1c             	add    esp,0x1c
c001d26f:	6a 09                	push   0x9
c001d271:	68 38 c2 02 c0       	push   0xc002c238
c001d276:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d27d:	51                   	push   ecx
c001d27e:	e8 c5 33 fe ff       	call   c0000648 <memcmp>
c001d283:	83 c4 10             	add    esp,0x10
c001d286:	85 c0                	test   eax,eax
c001d288:	75 21                	jne    c001d2ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d28a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d28e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d292:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d296:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d29a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d29d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2a4:	89 d0                	mov    eax,edx
c001d2a6:	40                   	inc    eax
c001d2a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2ab:	50                   	push   eax
c001d2ac:	6a 09                	push   0x9
c001d2ae:	68 42 c2 02 c0       	push   0xc002c242
c001d2b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ba:	50                   	push   eax
c001d2bb:	e8 88 33 fe ff       	call   c0000648 <memcmp>
c001d2c0:	83 c4 10             	add    esp,0x10
c001d2c3:	85 c0                	test   eax,eax
c001d2c5:	75 21                	jne    c001d2e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2cf:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2d7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2da:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2e1:	89 d0                	mov    eax,edx
c001d2e3:	40                   	inc    eax
c001d2e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2e8:	50                   	push   eax
c001d2e9:	50                   	push   eax
c001d2ea:	68 0e c2 02 c0       	push   0xc002c20e
c001d2ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f6:	50                   	push   eax
c001d2f7:	e8 cc 35 fe ff       	call   c00008c8 <strcmp>
c001d2fc:	83 c4 10             	add    esp,0x10
c001d2ff:	85 c0                	test   eax,eax
c001d301:	75 0f                	jne    c001d312 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d303:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d306:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d30a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d30e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d312:	50                   	push   eax
c001d313:	50                   	push   eax
c001d314:	68 16 c2 02 c0       	push   0xc002c216
c001d319:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d320:	50                   	push   eax
c001d321:	e8 a2 35 fe ff       	call   c00008c8 <strcmp>
c001d326:	83 c4 10             	add    esp,0x10
c001d329:	85 c0                	test   eax,eax
c001d32b:	75 0f                	jne    c001d33c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d32d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d330:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d334:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d338:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d33c:	43                   	inc    ebx
c001d33d:	e9 c6 fe ff ff       	jmp    c001d208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d342:	31 d2                	xor    edx,edx
c001d344:	50                   	push   eax
c001d345:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d349:	52                   	push   edx
c001d34a:	50                   	push   eax
c001d34b:	55                   	push   ebp
c001d34c:	e8 39 62 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001d351:	58                   	pop    eax
c001d352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d356:	e8 f0 24 ff ff       	call   c000f84b <malloc>
c001d35b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d35e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d362:	31 d2                	xor    edx,edx
c001d364:	58                   	pop    eax
c001d365:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d369:	53                   	push   ebx
c001d36a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d36e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d372:	52                   	push   edx
c001d373:	50                   	push   eax
c001d374:	55                   	push   ebp
c001d375:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d378:	83 c4 14             	add    esp,0x14
c001d37b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d37f:	e8 c7 24 ff ff       	call   c000f84b <malloc>
c001d384:	31 d2                	xor    edx,edx
c001d386:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d38a:	83 c4 0c             	add    esp,0xc
c001d38d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d391:	52                   	push   edx
c001d392:	50                   	push   eax
c001d393:	55                   	push   ebp
c001d394:	e8 f1 61 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001d399:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d39c:	31 d2                	xor    edx,edx
c001d39e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3a9:	52                   	push   edx
c001d3aa:	50                   	push   eax
c001d3ab:	55                   	push   ebp
c001d3ac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3af:	83 c4 20             	add    esp,0x20
c001d3b2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3ba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3be:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3c2:	0f 84 f1 02 00 00    	je     c001d6b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3c8:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3cf:	31 d2                	xor    edx,edx
c001d3d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3d5:	c1 e8 03             	shr    eax,0x3
c001d3d8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3dc:	51                   	push   ecx
c001d3dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3e1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3e5:	52                   	push   edx
c001d3e6:	50                   	push   eax
c001d3e7:	55                   	push   ebp
c001d3e8:	e8 9d 61 ff ff       	call   c001358a <File::seek(unsigned long long)>
c001d3ed:	5b                   	pop    ebx
c001d3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3f9:	e8 4d 24 ff ff       	call   c000f84b <malloc>
c001d3fe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d401:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d405:	31 d2                	xor    edx,edx
c001d407:	5e                   	pop    esi
c001d408:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d40c:	50                   	push   eax
c001d40d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d411:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d415:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d41c:	52                   	push   edx
c001d41d:	50                   	push   eax
c001d41e:	55                   	push   ebp
c001d41f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d422:	83 c4 20             	add    esp,0x20
c001d425:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d42d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d431:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d435:	0f 8d 62 02 00 00    	jge    c001d69d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d43b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d43f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d443:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d448:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d44b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d44f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d453:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d457:	89 d8                	mov    eax,ebx
c001d459:	c1 e8 08             	shr    eax,0x8
c001d45c:	89 c6                	mov    esi,eax
c001d45e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d462:	c1 e6 04             	shl    esi,0x4
c001d465:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d469:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d46c:	85 d2                	test   edx,edx
c001d46e:	0f 85 bf 00 00 00    	jne    c001d533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d474:	83 ec 0c             	sub    esp,0xc
c001d477:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d47b:	03 06                	add    eax,DWORD PTR [esi]
c001d47d:	50                   	push   eax
c001d47e:	e8 4b f8 ff ff       	call   c001ccce <Thr::getAddressOfKernelSymbol(char const*)>
c001d483:	83 c4 10             	add    esp,0x10
c001d486:	89 c2                	mov    edx,eax
c001d488:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d48d:	85 c0                	test   eax,eax
c001d48f:	0f 85 9e 00 00 00    	jne    c001d533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d495:	83 ec 0c             	sub    esp,0xc
c001d498:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d49c:	03 06                	add    eax,DWORD PTR [esi]
c001d49e:	50                   	push   eax
c001d49f:	e8 59 10 ff ff       	call   c000e4fd <Krnl::resolveCompatibilitySymbol(char*)>
c001d4a4:	83 c4 10             	add    esp,0x10
c001d4a7:	89 c2                	mov    edx,eax
c001d4a9:	85 c0                	test   eax,eax
c001d4ab:	0f 85 82 00 00 00    	jne    c001d533 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4b1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4b5:	50                   	push   eax
c001d4b6:	50                   	push   eax
c001d4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bb:	03 06                	add    eax,DWORD PTR [esi]
c001d4bd:	50                   	push   eax
c001d4be:	68 4c c2 02 c0       	push   0xc002c24c
c001d4c3:	e8 41 5a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001d4c8:	58                   	pop    eax
c001d4c9:	5a                   	pop    edx
c001d4ca:	68 66 c2 02 c0       	push   0xc002c266
c001d4cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4d6:	50                   	push   eax
c001d4d7:	e8 60 33 fe ff       	call   c000083c <strcpy>
c001d4dc:	59                   	pop    ecx
c001d4dd:	58                   	pop    eax
c001d4de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e2:	03 06                	add    eax,DWORD PTR [esi]
c001d4e4:	50                   	push   eax
c001d4e5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ec:	50                   	push   eax
c001d4ed:	e8 8a 34 fe ff       	call   c000097c <strcat>
c001d4f2:	58                   	pop    eax
c001d4f3:	5a                   	pop    edx
c001d4f4:	68 fc c2 02 c0       	push   0xc002c2fc
c001d4f9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d500:	50                   	push   eax
c001d501:	e8 76 34 fe ff       	call   c000097c <strcat>
c001d506:	83 c4 10             	add    esp,0x10
c001d509:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d50e:	0f 84 43 01 00 00    	je     c001d657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d514:	83 ec 0c             	sub    esp,0xc
c001d517:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d51e:	50                   	push   eax
c001d51f:	e8 23 d1 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001d524:	83 c4 10             	add    esp,0x10
c001d527:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d52b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d52f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d533:	80 fb 01             	cmp    bl,0x1
c001d536:	75 7d                	jne    c001d5b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d538:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d53f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d543:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d547:	01 ce                	add    esi,ecx
c001d549:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d54f:	0f 94 c0             	sete   al
c001d552:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d558:	0f 94 c3             	sete   bl
c001d55b:	09 c3                	or     ebx,eax
c001d55d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d55f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d564:	74 36                	je     c001d59c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d566:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d569:	84 db                	test   bl,bl
c001d56b:	75 0a                	jne    c001d577 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d56d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d571:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d575:	76 37                	jbe    c001d5ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d577:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d57b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d580:	0f 84 d1 00 00 00    	je     c001d657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d586:	83 ec 0c             	sub    esp,0xc
c001d589:	68 7d c2 02 c0       	push   0xc002c27d
c001d58e:	e8 b4 d0 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001d593:	83 c4 10             	add    esp,0x10
c001d596:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d59a:	eb 12                	jmp    c001d5ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d59c:	01 c1                	add    ecx,eax
c001d59e:	84 db                	test   bl,bl
c001d5a0:	75 0c                	jne    c001d5ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5a6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5aa:	77 02                	ja     c001d5ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5ac:	01 d1                	add    ecx,edx
c001d5ae:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5b0:	e9 df 00 00 00       	jmp    c001d694 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5b5:	80 fb 02             	cmp    bl,0x2
c001d5b8:	75 71                	jne    c001d62b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5ba:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5c1:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5c5:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5c9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5cf:	74 15                	je     c001d5e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5d1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5d7:	74 0d                	je     c001d5e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5d9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5dd:	83 e8 04             	sub    eax,0x4
c001d5e0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5e4:	76 1f                	jbe    c001d605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5e6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5ea:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5ef:	74 66                	je     c001d657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5f1:	83 ec 0c             	sub    esp,0xc
c001d5f4:	68 99 c2 02 c0       	push   0xc002c299
c001d5f9:	e8 49 d0 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001d5fe:	83 c4 10             	add    esp,0x10
c001d601:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d605:	8b 06                	mov    eax,DWORD PTR [esi]
c001d607:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d60c:	74 13                	je     c001d621 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d60e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d612:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d619:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d61d:	01 c8                	add    eax,ecx
c001d61f:	eb 04                	jmp    c001d625 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d621:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d625:	01 c2                	add    edx,eax
c001d627:	89 16                	mov    DWORD PTR [esi],edx
c001d629:	eb 69                	jmp    c001d694 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d62b:	0f b6 db             	movzx  ebx,bl
c001d62e:	50                   	push   eax
c001d62f:	50                   	push   eax
c001d630:	53                   	push   ebx
c001d631:	68 b5 c2 02 c0       	push   0xc002c2b5
c001d636:	e8 ce 58 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001d63b:	83 c4 10             	add    esp,0x10
c001d63e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d643:	74 12                	je     c001d657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d645:	83 ec 0c             	sub    esp,0xc
c001d648:	68 c0 c2 02 c0       	push   0xc002c2c0
c001d64d:	e8 f5 cf ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001d652:	83 c4 10             	add    esp,0x10
c001d655:	eb 3d                	jmp    c001d694 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d657:	83 ec 0c             	sub    esp,0xc
c001d65a:	55                   	push   ebp
c001d65b:	e8 ca 5e ff ff       	call   c001352a <File::close()>
c001d660:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d663:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d666:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d669:	59                   	pop    ecx
c001d66a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d66e:	e8 e8 21 ff ff       	call   c000f85b <free>
c001d673:	5b                   	pop    ebx
c001d674:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d678:	e8 de 21 ff ff       	call   c000f85b <free>
c001d67d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d680:	e8 d6 21 ff ff       	call   c000f85b <free>
c001d685:	5e                   	pop    esi
c001d686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d68a:	e8 cc 21 ff ff       	call   c000f85b <free>
c001d68f:	83 c4 10             	add    esp,0x10
c001d692:	eb 21                	jmp    c001d6b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d694:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d698:	e9 90 fd ff ff       	jmp    c001d42d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d69d:	83 ec 0c             	sub    esp,0xc
c001d6a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6a4:	e8 b2 21 ff ff       	call   c000f85b <free>
c001d6a9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6ad:	83 c4 10             	add    esp,0x10
c001d6b0:	e9 05 fd ff ff       	jmp    c001d3ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6b5:	31 c0                	xor    eax,eax
c001d6b7:	eb 33                	jmp    c001d6ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d6b9:	83 ec 0c             	sub    esp,0xc
c001d6bc:	55                   	push   ebp
c001d6bd:	e8 68 5e ff ff       	call   c001352a <File::close()>
c001d6c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6cb:	58                   	pop    eax
c001d6cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6d0:	e8 86 21 ff ff       	call   c000f85b <free>
c001d6d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6d8:	e8 7e 21 ff ff       	call   c000f85b <free>
c001d6dd:	5a                   	pop    edx
c001d6de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e2:	e8 74 21 ff ff       	call   c000f85b <free>
c001d6e7:	83 c4 10             	add    esp,0x10
c001d6ea:	b0 01                	mov    al,0x1
c001d6ec:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6f2:	5b                   	pop    ebx
c001d6f3:	5e                   	pop    esi
c001d6f4:	5f                   	pop    edi
c001d6f5:	5d                   	pop    ebp
c001d6f6:	c3                   	ret    

c001d6f7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6f7:	56                   	push   esi
c001d6f8:	31 d2                	xor    edx,edx
c001d6fa:	53                   	push   ebx
c001d6fb:	8b 1d 80 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031380
c001d701:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d705:	39 d3                	cmp    ebx,edx
c001d707:	7e 1b                	jle    c001d724 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d709:	8b 04 95 a0 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcea60]
c001d710:	39 c8                	cmp    eax,ecx
c001d712:	77 0d                	ja     c001d721 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d714:	8b 34 95 a0 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcec60]
c001d71b:	01 c6                	add    esi,eax
c001d71d:	39 ce                	cmp    esi,ecx
c001d71f:	77 05                	ja     c001d726 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d721:	42                   	inc    edx
c001d722:	eb e1                	jmp    c001d705 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d724:	31 c0                	xor    eax,eax
c001d726:	5b                   	pop    ebx
c001d727:	5e                   	pop    esi
c001d728:	c3                   	ret    

c001d729 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d729:	53                   	push   ebx
c001d72a:	31 c0                	xor    eax,eax
c001d72c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d730:	8b 1d 80 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031380
c001d736:	39 c3                	cmp    ebx,eax
c001d738:	7e 22                	jle    c001d75c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d73a:	8b 14 85 a0 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcea60]
c001d741:	39 ca                	cmp    edx,ecx
c001d743:	77 14                	ja     c001d759 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d745:	03 14 85 a0 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcec60]
c001d74c:	39 ca                	cmp    edx,ecx
c001d74e:	76 09                	jbe    c001d759 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d750:	8b 04 85 a0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce860]
c001d757:	eb 05                	jmp    c001d75e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d759:	40                   	inc    eax
c001d75a:	eb da                	jmp    c001d736 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d75c:	31 c0                	xor    eax,eax
c001d75e:	5b                   	pop    ebx
c001d75f:	c3                   	ret    

c001d760 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d760:	53                   	push   ebx
c001d761:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d765:	53                   	push   ebx
c001d766:	e8 8c ff ff ff       	call   c001d6f7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d76b:	5a                   	pop    edx
c001d76c:	31 d2                	xor    edx,edx
c001d76e:	85 c0                	test   eax,eax
c001d770:	74 04                	je     c001d776 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d772:	89 da                	mov    edx,ebx
c001d774:	29 c2                	sub    edx,eax
c001d776:	89 d0                	mov    eax,edx
c001d778:	5b                   	pop    ebx
c001d779:	c3                   	ret    

c001d77a <Thr::loadDLL(char const*, bool)>:
c001d77a:	55                   	push   ebp
c001d77b:	57                   	push   edi
c001d77c:	56                   	push   esi
c001d77d:	53                   	push   ebx
c001d77e:	81 ec 34 01 00 00    	sub    esp,0x134
c001d784:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d78b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d792:	56                   	push   esi
c001d793:	68 d8 c2 02 c0       	push   0xc002c2d8
c001d798:	e8 6c 57 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001d79d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7a4:	e8 a2 20 ff ff       	call   c000f84b <malloc>
c001d7a9:	83 c4 0c             	add    esp,0xc
c001d7ac:	89 c3                	mov    ebx,eax
c001d7ae:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001d7b4:	56                   	push   esi
c001d7b5:	50                   	push   eax
c001d7b6:	e8 ad 5c ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001d7bb:	83 c4 10             	add    esp,0x10
c001d7be:	85 db                	test   ebx,ebx
c001d7c0:	75 3c                	jne    c001d7fe <Thr::loadDLL(char const*, bool)+0x84>
c001d7c2:	89 e8                	mov    eax,ebp
c001d7c4:	84 c0                	test   al,al
c001d7c6:	0f 84 d5 01 00 00    	je     c001d9a1 <Thr::loadDLL(char const*, bool)+0x227>
c001d7cc:	57                   	push   edi
c001d7cd:	57                   	push   edi
c001d7ce:	68 e9 c2 02 c0       	push   0xc002c2e9
c001d7d3:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7d7:	57                   	push   edi
c001d7d8:	e8 5f 30 fe ff       	call   c000083c <strcpy>
c001d7dd:	58                   	pop    eax
c001d7de:	5a                   	pop    edx
c001d7df:	56                   	push   esi
c001d7e0:	57                   	push   edi
c001d7e1:	e8 96 31 fe ff       	call   c000097c <strcat>
c001d7e6:	59                   	pop    ecx
c001d7e7:	58                   	pop    eax
c001d7e8:	68 fc c2 02 c0       	push   0xc002c2fc
c001d7ed:	57                   	push   edi
c001d7ee:	e8 89 31 fe ff       	call   c000097c <strcat>
c001d7f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7f6:	e8 4c ce ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	51                   	push   ecx
c001d7ff:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d803:	50                   	push   eax
c001d804:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d808:	50                   	push   eax
c001d809:	53                   	push   ebx
c001d80a:	e8 69 5f ff ff       	call   c0013778 <File::stat(unsigned long long*, bool*)>
c001d80f:	83 c4 10             	add    esp,0x10
c001d812:	85 db                	test   ebx,ebx
c001d814:	74 0c                	je     c001d822 <Thr::loadDLL(char const*, bool)+0xa8>
c001d816:	83 ec 0c             	sub    esp,0xc
c001d819:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d81b:	53                   	push   ebx
c001d81c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d81f:	83 c4 10             	add    esp,0x10
c001d822:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d827:	75 0a                	jne    c001d833 <Thr::loadDLL(char const*, bool)+0xb9>
c001d829:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d82d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d831:	75 3c                	jne    c001d86f <Thr::loadDLL(char const*, bool)+0xf5>
c001d833:	89 e8                	mov    eax,ebp
c001d835:	84 c0                	test   al,al
c001d837:	0f 84 4c 01 00 00    	je     c001d989 <Thr::loadDLL(char const*, bool)+0x20f>
c001d83d:	51                   	push   ecx
c001d83e:	51                   	push   ecx
c001d83f:	68 e9 c2 02 c0       	push   0xc002c2e9
c001d844:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d848:	53                   	push   ebx
c001d849:	e8 ee 2f fe ff       	call   c000083c <strcpy>
c001d84e:	5f                   	pop    edi
c001d84f:	58                   	pop    eax
c001d850:	56                   	push   esi
c001d851:	53                   	push   ebx
c001d852:	e8 25 31 fe ff       	call   c000097c <strcat>
c001d857:	58                   	pop    eax
c001d858:	5a                   	pop    edx
c001d859:	68 fc c2 02 c0       	push   0xc002c2fc
c001d85e:	53                   	push   ebx
c001d85f:	e8 18 31 fe ff       	call   c000097c <strcat>
c001d864:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d867:	e8 db cd ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001d86c:	83 c4 10             	add    esp,0x10
c001d86f:	e8 72 45 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d874:	51                   	push   ecx
c001d875:	6a 03                	push   0x3
c001d877:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d87b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d87f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d885:	83 d3 00             	adc    ebx,0x0
c001d888:	89 ca                	mov    edx,ecx
c001d88a:	89 d1                	mov    ecx,edx
c001d88c:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d890:	51                   	push   ecx
c001d891:	50                   	push   eax
c001d892:	e8 cb 4b ff ff       	call   c0012462 <VAS::allocatePages(int, int)>
c001d897:	5f                   	pop    edi
c001d898:	89 c3                	mov    ebx,eax
c001d89a:	58                   	pop    eax
c001d89b:	53                   	push   ebx
c001d89c:	68 fe c2 02 c0       	push   0xc002c2fe
c001d8a1:	e8 63 56 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001d8a6:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8a9:	e8 ee 2e fe ff       	call   c000079c <strlen>
c001d8ae:	8b 3d 80 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031380
c001d8b4:	40                   	inc    eax
c001d8b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8b8:	e8 8e 1f ff ff       	call   c000f84b <malloc>
c001d8bd:	89 04 bd a0 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce860],eax
c001d8c4:	58                   	pop    eax
c001d8c5:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c001d8ca:	5a                   	pop    edx
c001d8cb:	56                   	push   esi
c001d8cc:	ff 34 85 a0 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce860]
c001d8d3:	e8 64 2f fe ff       	call   c000083c <strcpy>
c001d8d8:	a1 80 13 03 c0       	mov    eax,ds:0xc0031380
c001d8dd:	8d 50 01             	lea    edx,[eax+0x1]
c001d8e0:	89 1c 85 a0 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea60],ebx
c001d8e7:	89 15 80 13 03 c0    	mov    DWORD PTR ds:0xc0031380,edx
c001d8ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8f1:	83 c4 0c             	add    esp,0xc
c001d8f4:	89 14 85 a0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec60],edx
c001d8fb:	6a 01                	push   0x1
c001d8fd:	53                   	push   ebx
c001d8fe:	56                   	push   esi
c001d8ff:	e8 d7 f6 ff ff       	call   c001cfdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d904:	83 c4 10             	add    esp,0x10
c001d907:	89 c7                	mov    edi,eax
c001d909:	84 c0                	test   al,al
c001d90b:	0f 85 8c 00 00 00    	jne    c001d99d <Thr::loadDLL(char const*, bool)+0x223>
c001d911:	89 e8                	mov    eax,ebp
c001d913:	84 c0                	test   al,al
c001d915:	74 76                	je     c001d98d <Thr::loadDLL(char const*, bool)+0x213>
c001d917:	83 ec 0c             	sub    esp,0xc
c001d91a:	68 0b c3 02 c0       	push   0xc002c30b
c001d91f:	e8 23 cd ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	eb 64                	jmp    c001d98d <Thr::loadDLL(char const*, bool)+0x213>
c001d929:	e8 b8 44 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d92e:	89 f5                	mov    ebp,esi
c001d930:	c1 e5 0c             	shl    ebp,0xc
c001d933:	52                   	push   edx
c001d934:	01 dd                	add    ebp,ebx
c001d936:	52                   	push   edx
c001d937:	55                   	push   ebp
c001d938:	50                   	push   eax
c001d939:	e8 9e 46 ff ff       	call   c0011fdc <VAS::getPageTableEntry(unsigned long)>
c001d93e:	83 c4 10             	add    esp,0x10
c001d941:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d944:	75 0c                	jne    c001d952 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d946:	83 ec 0c             	sub    esp,0xc
c001d949:	55                   	push   ebp
c001d94a:	e8 14 25 ff ff       	call   c000fe63 <Phys::freePage(unsigned long)>
c001d94f:	83 c4 10             	add    esp,0x10
c001d952:	46                   	inc    esi
c001d953:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d957:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d95b:	05 ff 0f 00 00       	add    eax,0xfff
c001d960:	83 d2 00             	adc    edx,0x0
c001d963:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d967:	c1 ea 0c             	shr    edx,0xc
c001d96a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d96e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d972:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d976:	ba 00 00 00 00       	mov    edx,0x0
c001d97b:	89 d0                	mov    eax,edx
c001d97d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d981:	72 a6                	jb     c001d929 <Thr::loadDLL(char const*, bool)+0x1af>
c001d983:	89 f8                	mov    eax,edi
c001d985:	84 c0                	test   al,al
c001d987:	75 18                	jne    c001d9a1 <Thr::loadDLL(char const*, bool)+0x227>
c001d989:	31 db                	xor    ebx,ebx
c001d98b:	eb 14                	jmp    c001d9a1 <Thr::loadDLL(char const*, bool)+0x227>
c001d98d:	83 ec 0c             	sub    esp,0xc
c001d990:	68 2a c3 02 c0       	push   0xc002c32a
c001d995:	e8 ad cc ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001d99a:	83 c4 10             	add    esp,0x10
c001d99d:	31 f6                	xor    esi,esi
c001d99f:	eb b2                	jmp    c001d953 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9a1:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9a7:	89 d8                	mov    eax,ebx
c001d9a9:	5b                   	pop    ebx
c001d9aa:	5e                   	pop    esi
c001d9ab:	5f                   	pop    edi
c001d9ac:	5d                   	pop    ebp
c001d9ad:	c3                   	ret    

c001d9ae <Thr::executeDLL(unsigned long, void*)>:
c001d9ae:	56                   	push   esi
c001d9af:	53                   	push   ebx
c001d9b0:	52                   	push   edx
c001d9b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9b9:	85 db                	test   ebx,ebx
c001d9bb:	75 10                	jne    c001d9cd <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9bd:	83 ec 0c             	sub    esp,0xc
c001d9c0:	68 46 c3 02 c0       	push   0xc002c346
c001d9c5:	e8 7d cc ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001d9ca:	83 c4 10             	add    esp,0x10
c001d9cd:	50                   	push   eax
c001d9ce:	50                   	push   eax
c001d9cf:	53                   	push   ebx
c001d9d0:	68 70 c3 02 c0       	push   0xc002c370
c001d9d5:	e8 2f 55 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001d9da:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9de:	89 d8                	mov    eax,ebx
c001d9e0:	83 c4 14             	add    esp,0x14
c001d9e3:	5b                   	pop    ebx
c001d9e4:	5e                   	pop    esi
c001d9e5:	ff e0                	jmp    eax
c001d9e7:	90                   	nop

c001d9e8 <changeTSS>:
c001d9e8:	83 ec 14             	sub    esp,0x14
c001d9eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9f0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9f3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9f8:	c1 e2 15             	shl    edx,0x15
c001d9fb:	29 d0                	sub    eax,edx
c001d9fd:	50                   	push   eax
c001d9fe:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001da03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da09:	05 7c 11 00 00       	add    eax,0x117c
c001da0e:	50                   	push   eax
c001da0f:	e8 76 3a ff ff       	call   c001148a <TSS::setESP(unsigned long)>
c001da14:	83 c4 1c             	add    esp,0x1c
c001da17:	c3                   	ret    

c001da18 <Process::addArgs(char**)>:
c001da18:	57                   	push   edi
c001da19:	56                   	push   esi
c001da1a:	53                   	push   ebx
c001da1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da1f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da23:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da2d:	85 ff                	test   edi,edi
c001da2f:	74 3d                	je     c001da6e <Process::addArgs(char**)+0x56>
c001da31:	8b 07                	mov    eax,DWORD PTR [edi]
c001da33:	85 c0                	test   eax,eax
c001da35:	74 37                	je     c001da6e <Process::addArgs(char**)+0x56>
c001da37:	31 db                	xor    ebx,ebx
c001da39:	83 ec 0c             	sub    esp,0xc
c001da3c:	50                   	push   eax
c001da3d:	e8 5a 2d fe ff       	call   c000079c <strlen>
c001da42:	40                   	inc    eax
c001da43:	89 04 24             	mov    DWORD PTR [esp],eax
c001da46:	e8 00 1e ff ff       	call   c000f84b <malloc>
c001da4b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da52:	5a                   	pop    edx
c001da53:	59                   	pop    ecx
c001da54:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da57:	43                   	inc    ebx
c001da58:	50                   	push   eax
c001da59:	e8 de 2d fe ff       	call   c000083c <strcpy>
c001da5e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da64:	83 c4 10             	add    esp,0x10
c001da67:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da6a:	85 c0                	test   eax,eax
c001da6c:	75 cb                	jne    c001da39 <Process::addArgs(char**)+0x21>
c001da6e:	5b                   	pop    ebx
c001da6f:	5e                   	pop    esi
c001da70:	5f                   	pop    edi
c001da71:	c3                   	ret    

c001da72 <Process::Process(char const*, Process*, char**)>:
c001da72:	56                   	push   esi
c001da73:	53                   	push   ebx
c001da74:	83 ec 14             	sub    esp,0x14
c001da77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da7b:	05 0c 02 00 00       	add    eax,0x20c
c001da80:	bb 07 00 00 00       	mov    ebx,0x7
c001da85:	89 c6                	mov    esi,eax
c001da87:	85 db                	test   ebx,ebx
c001da89:	78 12                	js     c001da9d <Process::Process(char const*, Process*, char**)+0x2b>
c001da8b:	83 ec 0c             	sub    esp,0xc
c001da8e:	56                   	push   esi
c001da8f:	e8 5e b3 00 00       	call   c0028df2 <ThreadControlBlock::ThreadControlBlock()>
c001da94:	83 c4 10             	add    esp,0x10
c001da97:	83 c6 63             	add    esi,0x63
c001da9a:	4b                   	dec    ebx
c001da9b:	eb ea                	jmp    c001da87 <Process::Process(char const*, Process*, char**)+0x15>
c001da9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa1:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001daa8:	83 ec 0c             	sub    esp,0xc
c001daab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daaf:	e8 e4 c9 ff ff       	call   c001a498 <Krnl::newProcessEnv(Process*)>
c001dab4:	83 c4 10             	add    esp,0x10
c001dab7:	89 c2                	mov    edx,eax
c001dab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dabd:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dad0:	a1 90 db 02 c0       	mov    eax,ds:0xc002db90
c001dad5:	8d 50 01             	lea    edx,[eax+0x1]
c001dad8:	89 15 90 db 02 c0    	mov    DWORD PTR ds:0xc002db90,edx
c001dade:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dae2:	89 02                	mov    DWORD PTR [edx],eax
c001dae4:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001daec:	83 ec 0c             	sub    esp,0xc
c001daef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001daf3:	e8 53 1d ff ff       	call   c000f84b <malloc>
c001daf8:	83 c4 10             	add    esp,0x10
c001dafb:	89 c3                	mov    ebx,eax
c001dafd:	83 ec 08             	sub    esp,0x8
c001db00:	6a 00                	push   0x0
c001db02:	53                   	push   ebx
c001db03:	e8 02 4d ff ff       	call   c001280a <VAS::VAS(bool)>
c001db08:	83 c4 10             	add    esp,0x10
c001db0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db19:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db2b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db35:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db3b:	85 c0                	test   eax,eax
c001db3d:	74 42                	je     c001db81 <Process::Process(char const*, Process*, char**)+0x10f>
c001db3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db43:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db49:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db53:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db63:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db6d:	05 0c 01 00 00       	add    eax,0x10c
c001db72:	83 ec 08             	sub    esp,0x8
c001db75:	52                   	push   edx
c001db76:	50                   	push   eax
c001db77:	e8 c0 2c fe ff       	call   c000083c <strcpy>
c001db7c:	83 c4 10             	add    esp,0x10
c001db7f:	eb 63                	jmp    c001dbe4 <Process::Process(char const*, Process*, char**)+0x172>
c001db81:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db89:	83 ec 0c             	sub    esp,0xc
c001db8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db90:	e8 b6 1c ff ff       	call   c000f84b <malloc>
c001db95:	83 c4 10             	add    esp,0x10
c001db98:	89 c3                	mov    ebx,eax
c001db9a:	83 ec 08             	sub    esp,0x8
c001db9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dba1:	53                   	push   ebx
c001dba2:	e8 e1 35 ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c001dba7:	83 c4 10             	add    esp,0x10
c001dbaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbae:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbbe:	83 ec 0c             	sub    esp,0xc
c001dbc1:	50                   	push   eax
c001dbc2:	e8 b4 29 ff ff       	call   c001057b <addToTerminalCycle(VgaText*)>
c001dbc7:	83 c4 10             	add    esp,0x10
c001dbca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbce:	05 0c 01 00 00       	add    eax,0x10c
c001dbd3:	83 ec 08             	sub    esp,0x8
c001dbd6:	68 8f c3 02 c0       	push   0xc002c38f
c001dbdb:	50                   	push   eax
c001dbdc:	e8 5b 2c fe ff       	call   c000083c <strcpy>
c001dbe1:	83 c4 10             	add    esp,0x10
c001dbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe8:	83 c0 0c             	add    eax,0xc
c001dbeb:	83 ec 08             	sub    esp,0x8
c001dbee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbf2:	50                   	push   eax
c001dbf3:	e8 44 2c fe ff       	call   c000083c <strcpy>
c001dbf8:	83 c4 10             	add    esp,0x10
c001dbfb:	83 ec 08             	sub    esp,0x8
c001dbfe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc06:	e8 0d fe ff ff       	call   c001da18 <Process::addArgs(char**)>
c001dc0b:	83 c4 10             	add    esp,0x10
c001dc0e:	83 ec 08             	sub    esp,0x8
c001dc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc19:	e8 87 ee ff ff       	call   c001caa5 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc1e:	83 c4 10             	add    esp,0x10
c001dc21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc25:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc29:	83 f0 01             	xor    eax,0x1
c001dc2c:	88 c2                	mov    dl,al
c001dc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc32:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc38:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc3d:	83 ec 08             	sub    esp,0x8
c001dc40:	50                   	push   eax
c001dc41:	68 8c c4 02 c0       	push   0xc002c48c
c001dc46:	e8 be 52 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001dc4b:	83 c4 10             	add    esp,0x10
c001dc4e:	90                   	nop
c001dc4f:	83 c4 14             	add    esp,0x14
c001dc52:	5b                   	pop    ebx
c001dc53:	5e                   	pop    esi
c001dc54:	c3                   	ret    
c001dc55:	90                   	nop

c001dc56 <Process::Process(bool, char const*, Process*, char**)>:
c001dc56:	56                   	push   esi
c001dc57:	53                   	push   ebx
c001dc58:	83 ec 24             	sub    esp,0x24
c001dc5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc5f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc67:	05 0c 02 00 00       	add    eax,0x20c
c001dc6c:	bb 07 00 00 00       	mov    ebx,0x7
c001dc71:	89 c6                	mov    esi,eax
c001dc73:	85 db                	test   ebx,ebx
c001dc75:	78 12                	js     c001dc89 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc77:	83 ec 0c             	sub    esp,0xc
c001dc7a:	56                   	push   esi
c001dc7b:	e8 72 b1 00 00       	call   c0028df2 <ThreadControlBlock::ThreadControlBlock()>
c001dc80:	83 c4 10             	add    esp,0x10
c001dc83:	83 c6 63             	add    esi,0x63
c001dc86:	4b                   	dec    ebx
c001dc87:	eb ea                	jmp    c001dc73 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc94:	83 ec 0c             	sub    esp,0xc
c001dc97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc9b:	e8 f8 c7 ff ff       	call   c001a498 <Krnl::newProcessEnv(Process*)>
c001dca0:	83 c4 10             	add    esp,0x10
c001dca3:	89 c2                	mov    edx,eax
c001dca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcbc:	a1 90 db 02 c0       	mov    eax,ds:0xc002db90
c001dcc1:	8d 50 01             	lea    edx,[eax+0x1]
c001dcc4:	89 15 90 db 02 c0    	mov    DWORD PTR ds:0xc002db90,edx
c001dcca:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcce:	89 02                	mov    DWORD PTR [edx],eax
c001dcd0:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dcd8:	83 ec 0c             	sub    esp,0xc
c001dcdb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcdf:	e8 67 1b ff ff       	call   c000f84b <malloc>
c001dce4:	83 c4 10             	add    esp,0x10
c001dce7:	89 c3                	mov    ebx,eax
c001dce9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcee:	83 ec 08             	sub    esp,0x8
c001dcf1:	50                   	push   eax
c001dcf2:	53                   	push   ebx
c001dcf3:	e8 12 4b ff ff       	call   c001280a <VAS::VAS(bool)>
c001dcf8:	83 c4 10             	add    esp,0x10
c001dcfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcff:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd09:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd1b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd25:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd2b:	85 c0                	test   eax,eax
c001dd2d:	74 42                	je     c001dd71 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd33:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd39:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd43:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd53:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5d:	05 0c 01 00 00       	add    eax,0x10c
c001dd62:	83 ec 08             	sub    esp,0x8
c001dd65:	52                   	push   edx
c001dd66:	50                   	push   eax
c001dd67:	e8 d0 2a fe ff       	call   c000083c <strcpy>
c001dd6c:	83 c4 10             	add    esp,0x10
c001dd6f:	eb 63                	jmp    c001ddd4 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd71:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd79:	83 ec 0c             	sub    esp,0xc
c001dd7c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd80:	e8 c6 1a ff ff       	call   c000f84b <malloc>
c001dd85:	83 c4 10             	add    esp,0x10
c001dd88:	89 c3                	mov    ebx,eax
c001dd8a:	83 ec 08             	sub    esp,0x8
c001dd8d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd91:	53                   	push   ebx
c001dd92:	e8 f1 33 ff ff       	call   c0011188 <VgaText::VgaText(char const*)>
c001dd97:	83 c4 10             	add    esp,0x10
c001dd9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dda4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddae:	83 ec 0c             	sub    esp,0xc
c001ddb1:	50                   	push   eax
c001ddb2:	e8 c4 27 ff ff       	call   c001057b <addToTerminalCycle(VgaText*)>
c001ddb7:	83 c4 10             	add    esp,0x10
c001ddba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbe:	05 0c 01 00 00       	add    eax,0x10c
c001ddc3:	83 ec 08             	sub    esp,0x8
c001ddc6:	68 8f c3 02 c0       	push   0xc002c38f
c001ddcb:	50                   	push   eax
c001ddcc:	e8 6b 2a fe ff       	call   c000083c <strcpy>
c001ddd1:	83 c4 10             	add    esp,0x10
c001ddd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd8:	83 c0 0c             	add    eax,0xc
c001dddb:	83 ec 08             	sub    esp,0x8
c001ddde:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dde2:	50                   	push   eax
c001dde3:	e8 54 2a fe ff       	call   c000083c <strcpy>
c001dde8:	83 c4 10             	add    esp,0x10
c001ddeb:	83 ec 08             	sub    esp,0x8
c001ddee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddf6:	e8 1d fc ff ff       	call   c001da18 <Process::addArgs(char**)>
c001ddfb:	83 c4 10             	add    esp,0x10
c001ddfe:	90                   	nop
c001ddff:	83 c4 24             	add    esp,0x24
c001de02:	5b                   	pop    ebx
c001de03:	5e                   	pop    esi
c001de04:	c3                   	ret    

c001de05 <disableIRQs()>:
c001de05:	fa                   	cli    
c001de06:	ff 05 4c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b4c
c001de0c:	c3                   	ret    

c001de0d <getIRQNestingLevel()>:
c001de0d:	a1 4c 1b 03 c0       	mov    eax,ds:0xc0031b4c
c001de12:	c3                   	ret    

c001de13 <enableIRQs()>:
c001de13:	a1 4c 1b 03 c0       	mov    eax,ds:0xc0031b4c
c001de18:	48                   	dec    eax
c001de19:	a3 4c 1b 03 c0       	mov    ds:0xc0031b4c,eax
c001de1e:	75 01                	jne    c001de21 <enableIRQs()+0xe>
c001de20:	fb                   	sti    
c001de21:	c3                   	ret    

c001de22 <lockScheduler()>:
c001de22:	eb e1                	jmp    c001de05 <disableIRQs()>

c001de24 <unlockScheduler()>:
c001de24:	eb ed                	jmp    c001de13 <enableIRQs()>

c001de26 <userModeEntryPoint(void*)>:
c001de26:	83 ec 0c             	sub    esp,0xc
c001de29:	e8 f6 ff ff ff       	call   c001de24 <unlockScheduler()>
c001de2e:	fb                   	sti    
c001de2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de37:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de41:	83 c4 0c             	add    esp,0xc
c001de44:	e9 e1 24 fe ff       	jmp    c000032a <goToUsermode>

c001de49 <lockStuff()>:
c001de49:	e8 b7 ff ff ff       	call   c001de05 <disableIRQs()>
c001de4e:	ff 05 48 1b 03 c0    	inc    DWORD PTR ds:0xc0031b48
c001de54:	c3                   	ret    

c001de55 <taskStartupFunction>:
c001de55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de5a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de5d:	c3                   	ret    

c001de5e <updateTimeUsed()>:
c001de5e:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001de63:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de69:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de70:	74 50                	je     c001dec2 <updateTimeUsed()+0x64>
c001de72:	57                   	push   edi
c001de73:	56                   	push   esi
c001de74:	53                   	push   ebx
c001de75:	0f 31                	rdtsc  
c001de77:	89 c1                	mov    ecx,eax
c001de79:	a3 88 1b 03 c0       	mov    ds:0xc0031b88,eax
c001de7e:	2b 0d 78 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031b78
c001de84:	89 d3                	mov    ebx,edx
c001de86:	89 0d 80 1b 03 c0    	mov    DWORD PTR ds:0xc0031b80,ecx
c001de8c:	1b 1d 7c 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031b7c
c001de92:	a3 78 1b 03 c0       	mov    ds:0xc0031b78,eax
c001de97:	89 1d 84 1b 03 c0    	mov    DWORD PTR ds:0xc0031b84,ebx
c001de9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dea2:	89 15 8c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b8c,edx
c001dea8:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001deab:	89 15 7c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b7c,edx
c001deb1:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001deb4:	01 f1                	add    ecx,esi
c001deb6:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001deb9:	11 fb                	adc    ebx,edi
c001debb:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001debe:	5b                   	pop    ebx
c001debf:	5e                   	pop    esi
c001dec0:	5f                   	pop    edi
c001dec1:	c3                   	ret    
c001dec2:	c3                   	ret    

c001dec3 <switchToThread(ThreadControlBlock*)>:
c001dec3:	53                   	push   ebx
c001dec4:	83 ec 08             	sub    esp,0x8
c001dec7:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c001decc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ded0:	85 c0                	test   eax,eax
c001ded2:	75 30                	jne    c001df04 <switchToThread(ThreadControlBlock*)+0x41>
c001ded4:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001ded7:	3c ff                	cmp    al,0xff
c001ded9:	74 25                	je     c001df00 <switchToThread(ThreadControlBlock*)+0x3d>
c001dedb:	0f b6 d0             	movzx  edx,al
c001dede:	b8 84 03 00 00       	mov    eax,0x384
c001dee3:	29 d0                	sub    eax,edx
c001dee5:	c1 e0 10             	shl    eax,0x10
c001dee8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001deeb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001deee:	e8 6b ff ff ff       	call   c001de5e <updateTimeUsed()>
c001def3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001def7:	83 c4 08             	add    esp,0x8
c001defa:	5b                   	pop    ebx
c001defb:	e9 62 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df00:	31 c0                	xor    eax,eax
c001df02:	eb e7                	jmp    c001deeb <switchToThread(ThreadControlBlock*)+0x28>
c001df04:	c7 05 44 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b44,0x1
c001df0e:	83 c4 08             	add    esp,0x8
c001df11:	5b                   	pop    ebx
c001df12:	c3                   	ret    
c001df13:	90                   	nop

c001df14 <Semaphore::Semaphore(int)>:
c001df14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df1c:	89 10                	mov    DWORD PTR [eax],edx
c001df1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df22:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df38:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df3f:	90                   	nop
c001df40:	c3                   	ret    
c001df41:	90                   	nop

c001df42 <Mutex::Mutex()>:
c001df42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df46:	6a 01                	push   0x1
c001df48:	50                   	push   eax
c001df49:	e8 c6 ff ff ff       	call   c001df14 <Semaphore::Semaphore(int)>
c001df4e:	83 c4 08             	add    esp,0x8
c001df51:	90                   	nop
c001df52:	c3                   	ret    
c001df53:	90                   	nop

c001df54 <Process::createThread(void (*)(void*), void*, int)>:
c001df54:	55                   	push   ebp
c001df55:	31 c9                	xor    ecx,ecx
c001df57:	57                   	push   edi
c001df58:	56                   	push   esi
c001df59:	53                   	push   ebx
c001df5a:	83 ec 1c             	sub    esp,0x1c
c001df5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df61:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df68:	89 f2                	mov    edx,esi
c001df6a:	0f b7 c2             	movzx  eax,dx
c001df6d:	83 e2 01             	and    edx,0x1
c001df70:	74 16                	je     c001df88 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001df72:	d1 f8                	sar    eax,1
c001df74:	41                   	inc    ecx
c001df75:	89 c2                	mov    edx,eax
c001df77:	83 f9 10             	cmp    ecx,0x10
c001df7a:	75 ee                	jne    c001df6a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df7c:	83 c4 1c             	add    esp,0x1c
c001df7f:	31 db                	xor    ebx,ebx
c001df81:	89 d8                	mov    eax,ebx
c001df83:	5b                   	pop    ebx
c001df84:	5e                   	pop    esi
c001df85:	5f                   	pop    edi
c001df86:	5d                   	pop    ebp
c001df87:	c3                   	ret    
c001df88:	b8 01 00 00 00       	mov    eax,0x1
c001df8d:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df90:	d3 e0                	shl    eax,cl
c001df92:	09 c6                	or     esi,eax
c001df94:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001df97:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df9e:	89 c6                	mov    esi,eax
c001dfa0:	c1 e6 05             	shl    esi,0x5
c001dfa3:	01 f0                	add    eax,esi
c001dfa5:	01 d8                	add    eax,ebx
c001dfa7:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dfae:	75 0a                	jne    c001dfba <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dfb0:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dfba:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfc0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dfc4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dfc7:	01 ca                	add    edx,ecx
c001dfc9:	83 ec 08             	sub    esp,0x8
c001dfcc:	89 d0                	mov    eax,edx
c001dfce:	c1 e0 05             	shl    eax,0x5
c001dfd1:	01 d0                	add    eax,edx
c001dfd3:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dfd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dfdb:	01 d8                	add    eax,ebx
c001dfdd:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001dfe3:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001dfe9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfef:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dff5:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dffb:	89 cd                	mov    ebp,ecx
c001dffd:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e001:	f7 dd                	neg    ebp
c001e003:	c1 e5 15             	shl    ebp,0x15
c001e006:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e00c:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e012:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e01c:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e022:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e02c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e036:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e03a:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e041:	53                   	push   ebx
c001e042:	68 68 1b 03 c0       	push   0xc0031b68
c001e047:	e8 34 ac 00 00       	call   c0028c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e04c:	89 d8                	mov    eax,ebx
c001e04e:	83 c4 10             	add    esp,0x10
c001e051:	83 c4 1c             	add    esp,0x1c
c001e054:	5b                   	pop    ebx
c001e055:	5e                   	pop    esi
c001e056:	5f                   	pop    edi
c001e057:	5d                   	pop    ebp
c001e058:	c3                   	ret    
c001e059:	90                   	nop

c001e05a <Process::createUserThread()>:
c001e05a:	83 ec 0c             	sub    esp,0xc
c001e05d:	68 80 00 00 00       	push   0x80
c001e062:	6a 00                	push   0x0
c001e064:	68 26 de 01 c0       	push   0xc001de26
c001e069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e06d:	e8 e2 fe ff ff       	call   c001df54 <Process::createThread(void (*)(void*), void*, int)>
c001e072:	83 c4 1c             	add    esp,0x1c
c001e075:	c3                   	ret    

c001e076 <setupMultitasking(void (*)())>:
c001e076:	56                   	push   esi
c001e077:	53                   	push   ebx
c001e078:	51                   	push   ecx
c001e079:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e07d:	eb 10                	jmp    c001e08f <setupMultitasking(void (*)())+0x19>
c001e07f:	83 ec 0c             	sub    esp,0xc
c001e082:	68 68 1b 03 c0       	push   0xc0031b68
c001e087:	e8 46 ab 00 00       	call   c0028bd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e08c:	83 c4 10             	add    esp,0x10
c001e08f:	83 ec 0c             	sub    esp,0xc
c001e092:	68 68 1b 03 c0       	push   0xc0031b68
c001e097:	e8 1a ab 00 00       	call   c0028bb6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e09c:	83 c4 10             	add    esp,0x10
c001e09f:	84 c0                	test   al,al
c001e0a1:	74 dc                	je     c001e07f <setupMultitasking(void (*)())+0x9>
c001e0a3:	83 ec 0c             	sub    esp,0xc
c001e0a6:	68 3f 07 00 00       	push   0x73f
c001e0ab:	e8 9b 17 ff ff       	call   c000f84b <malloc>
c001e0b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0b7:	89 c3                	mov    ebx,eax
c001e0b9:	6a 00                	push   0x0
c001e0bb:	68 93 c3 02 c0       	push   0xc002c393
c001e0c0:	6a 01                	push   0x1
c001e0c2:	50                   	push   eax
c001e0c3:	e8 8e fb ff ff       	call   c001dc56 <Process::Process(bool, char const*, Process*, char**)>
c001e0c8:	83 c4 18             	add    esp,0x18
c001e0cb:	89 1d 74 1b 03 c0    	mov    DWORD PTR ds:0xc0031b74,ebx
c001e0d1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0d7:	68 b4 c4 02 c0       	push   0xc002c4b4
c001e0dc:	e8 28 4e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e0e1:	58                   	pop    eax
c001e0e2:	5a                   	pop    edx
c001e0e3:	6a 63                	push   0x63
c001e0e5:	68 e8 c4 02 c0       	push   0xc002c4e8
c001e0ea:	e8 1a 4e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e0ef:	59                   	pop    ecx
c001e0f0:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0f6:	e8 02 2c ff ff       	call   c0010cfd <setActiveTerminal(VgaText*)>
c001e0fb:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e103:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e10d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e113:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e116:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e120:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e126:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e12c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e136:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e140:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e14a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e150:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e15a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e160:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e16a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e170:	58                   	pop    eax
c001e171:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e177:	5a                   	pop    edx
c001e178:	68 8f c3 02 c0       	push   0xc002c38f
c001e17d:	50                   	push   eax
c001e17e:	e8 b9 26 fe ff       	call   c000083c <strcpy>
c001e183:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e18a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e18e:	83 c4 14             	add    esp,0x14
c001e191:	5b                   	pop    ebx
c001e192:	5e                   	pop    esi
c001e193:	e9 bc 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e198 <schedule()>:
c001e198:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c001e19d:	85 c0                	test   eax,eax
c001e19f:	74 0b                	je     c001e1ac <schedule()+0x14>
c001e1a1:	c7 05 44 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b44,0x1
c001e1ab:	c3                   	ret    
c001e1ac:	53                   	push   ebx
c001e1ad:	83 ec 14             	sub    esp,0x14
c001e1b0:	68 68 1b 03 c0       	push   0xc0031b68
c001e1b5:	e8 fc a9 00 00       	call   c0028bb6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1ba:	83 c4 10             	add    esp,0x10
c001e1bd:	84 c0                	test   al,al
c001e1bf:	75 38                	jne    c001e1f9 <schedule()+0x61>
c001e1c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1c9:	4a                   	dec    edx
c001e1ca:	74 32                	je     c001e1fe <schedule()+0x66>
c001e1cc:	83 ec 0c             	sub    esp,0xc
c001e1cf:	68 68 1b 03 c0       	push   0xc0031b68
c001e1d4:	e8 d5 a9 00 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1d9:	c7 04 24 68 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b68
c001e1e0:	89 c3                	mov    ebx,eax
c001e1e2:	e8 eb a9 00 00       	call   c0028bd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1e7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1f1:	e8 cd fc ff ff       	call   c001dec3 <switchToThread(ThreadControlBlock*)>
c001e1f6:	83 c4 10             	add    esp,0x10
c001e1f9:	83 c4 08             	add    esp,0x8
c001e1fc:	5b                   	pop    ebx
c001e1fd:	c3                   	ret    
c001e1fe:	83 ec 08             	sub    esp,0x8
c001e201:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e208:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e20e:	68 68 1b 03 c0       	push   0xc0031b68
c001e213:	e8 68 aa 00 00       	call   c0028c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e218:	83 c4 10             	add    esp,0x10
c001e21b:	eb af                	jmp    c001e1cc <schedule()+0x34>

c001e21d <unlockStuff()>:
c001e21d:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c001e222:	48                   	dec    eax
c001e223:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c001e228:	75 09                	jne    c001e233 <unlockStuff()+0x16>
c001e22a:	a1 44 1b 03 c0       	mov    eax,ds:0xc0031b44
c001e22f:	85 c0                	test   eax,eax
c001e231:	75 05                	jne    c001e238 <unlockStuff()+0x1b>
c001e233:	e9 db fb ff ff       	jmp    c001de13 <enableIRQs()>
c001e238:	83 ec 0c             	sub    esp,0xc
c001e23b:	c7 05 44 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b44,0x0
c001e245:	e8 4e ff ff ff       	call   c001e198 <schedule()>
c001e24a:	83 c4 0c             	add    esp,0xc
c001e24d:	e9 c1 fb ff ff       	jmp    c001de13 <enableIRQs()>

c001e252 <Semaphore::tryAcquire()>:
c001e252:	83 ec 0c             	sub    esp,0xc
c001e255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e259:	e8 eb fb ff ff       	call   c001de49 <lockStuff()>
c001e25e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e261:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e263:	7c 0b                	jl     c001e270 <Semaphore::tryAcquire()+0x1e>
c001e265:	e8 b3 ff ff ff       	call   c001e21d <unlockStuff()>
c001e26a:	31 c0                	xor    eax,eax
c001e26c:	83 c4 0c             	add    esp,0xc
c001e26f:	c3                   	ret    
c001e270:	42                   	inc    edx
c001e271:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e274:	e8 a4 ff ff ff       	call   c001e21d <unlockStuff()>
c001e279:	b0 01                	mov    al,0x1
c001e27b:	83 c4 0c             	add    esp,0xc
c001e27e:	c3                   	ret    
c001e27f:	90                   	nop

c001e280 <Semaphore::assertLocked(char const*)>:
c001e280:	83 ec 0c             	sub    esp,0xc
c001e283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e287:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e28b:	e8 b9 fb ff ff       	call   c001de49 <lockStuff()>
c001e290:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e292:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e295:	7c 05                	jl     c001e29c <Semaphore::assertLocked(char const*)+0x1c>
c001e297:	83 c4 0c             	add    esp,0xc
c001e29a:	eb 81                	jmp    c001e21d <unlockStuff()>
c001e29c:	83 ec 0c             	sub    esp,0xc
c001e29f:	52                   	push   edx
c001e2a0:	e8 a2 c3 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001e2a5:	83 c4 10             	add    esp,0x10
c001e2a8:	83 c4 0c             	add    esp,0xc
c001e2ab:	e9 6d ff ff ff       	jmp    c001e21d <unlockStuff()>

c001e2b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2b0:	83 ec 0c             	sub    esp,0xc
c001e2b3:	e8 55 fb ff ff       	call   c001de0d <getIRQNestingLevel()>
c001e2b8:	83 ec 08             	sub    esp,0x8
c001e2bb:	50                   	push   eax
c001e2bc:	68 0c c5 02 c0       	push   0xc002c50c
c001e2c1:	e8 43 4c ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e2c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2d2:	e8 c1 fe ff ff       	call   c001e198 <schedule()>
c001e2d7:	e8 48 fb ff ff       	call   c001de24 <unlockScheduler()>
c001e2dc:	e8 2c fb ff ff       	call   c001de0d <getIRQNestingLevel()>
c001e2e1:	5a                   	pop    edx
c001e2e2:	59                   	pop    ecx
c001e2e3:	50                   	push   eax
c001e2e4:	68 40 c5 02 c0       	push   0xc002c540
c001e2e9:	e8 1b 4c ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e2ee:	83 c4 1c             	add    esp,0x1c
c001e2f1:	c3                   	ret    

c001e2f2 <blockTask(TaskState)>:
c001e2f2:	83 ec 0c             	sub    esp,0xc
c001e2f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2f9:	e8 24 fb ff ff       	call   c001de22 <lockScheduler()>
c001e2fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e303:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e306:	e8 8d fe ff ff       	call   c001e198 <schedule()>
c001e30b:	83 c4 0c             	add    esp,0xc
c001e30e:	e9 11 fb ff ff       	jmp    c001de24 <unlockScheduler()>

c001e313 <waitTask(int, int*, int)>:
c001e313:	83 ec 18             	sub    esp,0x18
c001e316:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e31b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e31f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e322:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e32b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e32e:	6a 07                	push   0x7
c001e330:	e8 bd ff ff ff       	call   c001e2f2 <blockTask(TaskState)>
c001e335:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e340:	85 d2                	test   edx,edx
c001e342:	74 0a                	je     c001e34e <waitTask(int, int*, int)+0x3b>
c001e344:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e347:	89 02                	mov    DWORD PTR [edx],eax
c001e349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e34e:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e351:	83 c4 0c             	add    esp,0xc
c001e354:	c3                   	ret    

c001e355 <nanoSleepUntil(unsigned long long)>:
c001e355:	83 ec 0c             	sub    esp,0xc
c001e358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e360:	3b 05 90 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec90
c001e366:	89 d1                	mov    ecx,edx
c001e368:	1b 0d 94 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec94
c001e36e:	73 04                	jae    c001e374 <nanoSleepUntil(unsigned long long)+0x1f>
c001e370:	83 c4 0c             	add    esp,0xc
c001e373:	c3                   	ret    
c001e374:	e8 d0 fa ff ff       	call   c001de49 <lockStuff()>
c001e379:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e37f:	83 ec 08             	sub    esp,0x8
c001e382:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e385:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e388:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e38e:	68 5c 1b 03 c0       	push   0xc0031b5c
c001e393:	e8 e8 a8 00 00       	call   c0028c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e398:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e39f:	e8 4e ff ff ff       	call   c001e2f2 <blockTask(TaskState)>
c001e3a4:	83 c4 1c             	add    esp,0x1c
c001e3a7:	e9 71 fe ff ff       	jmp    c001e21d <unlockStuff()>

c001e3ac <nanoSleep(unsigned long long)>:
c001e3ac:	a1 90 ec 02 c0       	mov    eax,ds:0xc002ec90
c001e3b1:	8b 15 94 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec94
c001e3b7:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3bb:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3bf:	eb 94                	jmp    c001e355 <nanoSleepUntil(unsigned long long)>

c001e3c1 <sleep(unsigned long long)>:
c001e3c1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3c9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3ce:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3d2:	01 ca                	add    edx,ecx
c001e3d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3d8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3dc:	eb ce                	jmp    c001e3ac <nanoSleep(unsigned long long)>

c001e3de <Semaphore::acquire()>:
c001e3de:	83 ec 0c             	sub    esp,0xc
c001e3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e5:	e8 5f fa ff ff       	call   c001de49 <lockStuff()>
c001e3ea:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3ed:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3ef:	7d 0c                	jge    c001e3fd <Semaphore::acquire()+0x1f>
c001e3f1:	42                   	inc    edx
c001e3f2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3f5:	83 c4 0c             	add    esp,0xc
c001e3f8:	e9 20 fe ff ff       	jmp    c001e21d <unlockStuff()>
c001e3fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e403:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e40a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e40d:	85 d2                	test   edx,edx
c001e40f:	74 2a                	je     c001e43b <Semaphore::acquire()+0x5d>
c001e411:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e414:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e41a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e41d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e423:	83 ec 0c             	sub    esp,0xc
c001e426:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e429:	6a 05                	push   0x5
c001e42b:	e8 c2 fe ff ff       	call   c001e2f2 <blockTask(TaskState)>
c001e430:	83 c4 10             	add    esp,0x10
c001e433:	83 c4 0c             	add    esp,0xc
c001e436:	e9 e2 fd ff ff       	jmp    c001e21d <unlockStuff()>
c001e43b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e441:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e444:	eb d7                	jmp    c001e41d <Semaphore::acquire()+0x3f>

c001e446 <taskReturned>:
c001e446:	83 ec 18             	sub    esp,0x18
c001e449:	68 74 c5 02 c0       	push   0xc002c574
c001e44e:	e8 f4 c1 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001e453:	83 c4 10             	add    esp,0x10
c001e456:	83 ec 0c             	sub    esp,0xc
c001e459:	6a 02                	push   0x2
c001e45b:	e8 92 fe ff ff       	call   c001e2f2 <blockTask(TaskState)>
c001e460:	e8 bd f9 ff ff       	call   c001de22 <lockScheduler()>
c001e465:	e8 2e fd ff ff       	call   c001e198 <schedule()>
c001e46a:	e8 b5 f9 ff ff       	call   c001de24 <unlockScheduler()>
c001e46f:	83 c4 10             	add    esp,0x10
c001e472:	eb e2                	jmp    c001e456 <taskReturned+0x10>

c001e474 <unblockTask(ThreadControlBlock*)>:
c001e474:	53                   	push   ebx
c001e475:	83 ec 08             	sub    esp,0x8
c001e478:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e47c:	e8 a1 f9 ff ff       	call   c001de22 <lockScheduler()>
c001e481:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e484:	85 c0                	test   eax,eax
c001e486:	74 5c                	je     c001e4e4 <unblockTask(ThreadControlBlock*)+0x70>
c001e488:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e48b:	48                   	dec    eax
c001e48c:	74 31                	je     c001e4bf <unblockTask(ThreadControlBlock*)+0x4b>
c001e48e:	83 ec 0c             	sub    esp,0xc
c001e491:	68 68 1b 03 c0       	push   0xc0031b68
c001e496:	e8 13 a7 00 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e49b:	83 c4 10             	add    esp,0x10
c001e49e:	85 c0                	test   eax,eax
c001e4a0:	75 17                	jne    c001e4b9 <unblockTask(ThreadControlBlock*)+0x45>
c001e4a2:	eb 65                	jmp    c001e509 <unblockTask(ThreadControlBlock*)+0x95>
c001e4a4:	83 ec 08             	sub    esp,0x8
c001e4a7:	50                   	push   eax
c001e4a8:	68 68 1b 03 c0       	push   0xc0031b68
c001e4ad:	e8 e2 a9 00 00       	call   c0028e94 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4b2:	83 c4 10             	add    esp,0x10
c001e4b5:	85 c0                	test   eax,eax
c001e4b7:	74 50                	je     c001e509 <unblockTask(ThreadControlBlock*)+0x95>
c001e4b9:	39 c3                	cmp    ebx,eax
c001e4bb:	75 e7                	jne    c001e4a4 <unblockTask(ThreadControlBlock*)+0x30>
c001e4bd:	eb 1c                	jmp    c001e4db <unblockTask(ThreadControlBlock*)+0x67>
c001e4bf:	83 ec 0c             	sub    esp,0xc
c001e4c2:	68 64 c6 02 c0       	push   0xc002c664
c001e4c7:	e8 3d 4a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e4cc:	c7 04 24 f0 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5f0
c001e4d3:	e8 31 4a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e4d8:	83 c4 10             	add    esp,0x10
c001e4db:	83 c4 08             	add    esp,0x8
c001e4de:	5b                   	pop    ebx
c001e4df:	e9 40 f9 ff ff       	jmp    c001de24 <unlockScheduler()>
c001e4e4:	83 ec 0c             	sub    esp,0xc
c001e4e7:	68 a8 c5 02 c0       	push   0xc002c5a8
c001e4ec:	e8 18 4a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e4f1:	c7 04 24 f0 c5 02 c0 	mov    DWORD PTR [esp],0xc002c5f0
c001e4f8:	e8 0c 4a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e4fd:	83 c4 10             	add    esp,0x10
c001e500:	83 c4 08             	add    esp,0x8
c001e503:	5b                   	pop    ebx
c001e504:	e9 1b f9 ff ff       	jmp    c001de24 <unlockScheduler()>
c001e509:	83 ec 08             	sub    esp,0x8
c001e50c:	53                   	push   ebx
c001e50d:	68 68 1b 03 c0       	push   0xc0031b68
c001e512:	e8 69 a7 00 00       	call   c0028c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e517:	83 c4 10             	add    esp,0x10
c001e51a:	83 c4 08             	add    esp,0x8
c001e51d:	5b                   	pop    ebx
c001e51e:	e9 01 f9 ff ff       	jmp    c001de24 <unlockScheduler()>

c001e523 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e523:	55                   	push   ebp
c001e524:	57                   	push   edi
c001e525:	56                   	push   esi
c001e526:	53                   	push   ebx
c001e527:	83 ec 1c             	sub    esp,0x1c
c001e52a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e52e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e531:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e537:	85 ff                	test   edi,edi
c001e539:	7e 20                	jle    c001e55b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e53b:	31 f6                	xor    esi,esi
c001e53d:	83 ec 0c             	sub    esp,0xc
c001e540:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e547:	46                   	inc    esi
c001e548:	e8 0e 13 ff ff       	call   c000f85b <free>
c001e54d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e550:	83 c4 10             	add    esp,0x10
c001e553:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e559:	7f e2                	jg     c001e53d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e55b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e565:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e56a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e56d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e570:	d3 c0                	rol    eax,cl
c001e572:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e579:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e57c:	89 f7                	mov    edi,esi
c001e57e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e586:	0f 85 74 01 00 00    	jne    c001e700 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e58c:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e592:	85 ed                	test   ebp,ebp
c001e594:	74 1b                	je     c001e5b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e596:	83 ec 0c             	sub    esp,0xc
c001e599:	55                   	push   ebp
c001e59a:	e8 15 be ff ff       	call   c001a3b4 <EnvVarContainer::~EnvVarContainer()>
c001e59f:	59                   	pop    ecx
c001e5a0:	5e                   	pop    esi
c001e5a1:	6a 0c                	push   0xc
c001e5a3:	55                   	push   ebp
c001e5a4:	e8 80 48 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c001e5a9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5ac:	83 c4 10             	add    esp,0x10
c001e5af:	89 f7                	mov    edi,esi
c001e5b1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5b7:	85 c0                	test   eax,eax
c001e5b9:	0f 84 aa 00 00 00    	je     c001e669 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5bf:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5c2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5c6:	31 c9                	xor    ecx,ecx
c001e5c8:	eb 10                	jmp    c001e5da <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e5ca:	41                   	inc    ecx
c001e5cb:	83 f9 10             	cmp    ecx,0x10
c001e5ce:	0f 84 95 00 00 00    	je     c001e669 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5d4:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5da:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5e1:	d3 fa                	sar    edx,cl
c001e5e3:	83 e2 01             	and    edx,0x1
c001e5e6:	74 e2                	je     c001e5ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5e8:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5eb:	01 ca                	add    edx,ecx
c001e5ed:	89 d5                	mov    ebp,edx
c001e5ef:	c1 e5 05             	shl    ebp,0x5
c001e5f2:	01 ea                	add    edx,ebp
c001e5f4:	01 d0                	add    eax,edx
c001e5f6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5fc:	83 fd 07             	cmp    ebp,0x7
c001e5ff:	75 c9                	jne    c001e5ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e601:	05 40 02 00 00       	add    eax,0x240
c001e606:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e609:	83 fd ff             	cmp    ebp,0xffffffff
c001e60c:	0f 8c 08 01 00 00    	jl     c001e71a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e612:	0f 84 b9 01 00 00    	je     c001e7d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e618:	85 ed                	test   ebp,ebp
c001e61a:	0f 84 a0 01 00 00    	je     c001e7c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e620:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e622:	75 a6                	jne    c001e5ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e624:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e62a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e62e:	01 d0                	add    eax,edx
c001e630:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e634:	83 ec 0c             	sub    esp,0xc
c001e637:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e63d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e640:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e646:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e64d:	50                   	push   eax
c001e64e:	e8 21 fe ff ff       	call   c001e474 <unblockTask(ThreadControlBlock*)>
c001e653:	83 c4 10             	add    esp,0x10
c001e656:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e659:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e65d:	89 f7                	mov    edi,esi
c001e65f:	41                   	inc    ecx
c001e660:	83 f9 10             	cmp    ecx,0x10
c001e663:	0f 85 6b ff ff ff    	jne    c001e5d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e669:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e66f:	85 c0                	test   eax,eax
c001e671:	74 5d                	je     c001e6d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e673:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e679:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e67f:	74 4f                	je     c001e6d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e681:	83 ec 0c             	sub    esp,0xc
c001e684:	68 68 1b 03 c0       	push   0xc0031b68
c001e689:	e8 20 a5 00 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e68e:	c7 04 24 68 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b68
c001e695:	89 c7                	mov    edi,eax
c001e697:	e8 1a a5 00 00       	call   c0028bb6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e69c:	83 c4 10             	add    esp,0x10
c001e69f:	84 c0                	test   al,al
c001e6a1:	0f 84 e4 00 00 00    	je     c001e78b <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e6a7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6aa:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6b0:	85 d2                	test   edx,edx
c001e6b2:	74 0f                	je     c001e6c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6b4:	83 ec 0c             	sub    esp,0xc
c001e6b7:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6b9:	52                   	push   edx
c001e6ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6bd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6c0:	83 c4 10             	add    esp,0x10
c001e6c3:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e6cd:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e6d0:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e6d6:	85 db                	test   ebx,ebx
c001e6d8:	74 16                	je     c001e6f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e6da:	83 ec 0c             	sub    esp,0xc
c001e6dd:	53                   	push   ebx
c001e6de:	e8 13 3b ff ff       	call   c00121f6 <VAS::~VAS()>
c001e6e3:	58                   	pop    eax
c001e6e4:	5a                   	pop    edx
c001e6e5:	6a 14                	push   0x14
c001e6e7:	53                   	push   ebx
c001e6e8:	e8 3c 47 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c001e6ed:	83 c4 10             	add    esp,0x10
c001e6f0:	83 ec 0c             	sub    esp,0xc
c001e6f3:	68 9a c3 02 c0       	push   0xc002c39a
c001e6f8:	e8 0c 48 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e6fd:	83 c4 10             	add    esp,0x10
c001e700:	83 ec 08             	sub    esp,0x8
c001e703:	68 3f 07 00 00       	push   0x73f
c001e708:	68 a8 c3 02 c0       	push   0xc002c3a8
c001e70d:	e8 f7 47 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e712:	83 c4 2c             	add    esp,0x2c
c001e715:	5b                   	pop    ebx
c001e716:	5e                   	pop    esi
c001e717:	5f                   	pop    edi
c001e718:	5d                   	pop    ebp
c001e719:	c3                   	ret    
c001e71a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e71e:	83 ec 0c             	sub    esp,0xc
c001e721:	68 a8 c6 02 c0       	push   0xc002c6a8
c001e726:	e8 1c bf ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001e72b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e72e:	83 c4 10             	add    esp,0x10
c001e731:	89 f7                	mov    edi,esi
c001e733:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e737:	e9 8e fe ff ff       	jmp    c001e5ca <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e73c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e742:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e748:	75 1c                	jne    c001e766 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e74a:	83 ec 0c             	sub    esp,0xc
c001e74d:	68 10 c7 02 c0       	push   0xc002c710
c001e752:	e8 b2 47 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e757:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e75e:	e8 8f fb ff ff       	call   c001e2f2 <blockTask(TaskState)>
c001e763:	83 c4 10             	add    esp,0x10
c001e766:	83 ec 08             	sub    esp,0x8
c001e769:	56                   	push   esi
c001e76a:	68 68 1b 03 c0       	push   0xc0031b68
c001e76f:	e8 0c a5 00 00       	call   c0028c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e774:	c7 04 24 68 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b68
c001e77b:	e8 2e a4 00 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e780:	83 c4 10             	add    esp,0x10
c001e783:	39 f8                	cmp    eax,edi
c001e785:	0f 84 1c ff ff ff    	je     c001e6a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e78b:	83 ec 0c             	sub    esp,0xc
c001e78e:	68 68 1b 03 c0       	push   0xc0031b68
c001e793:	e8 16 a4 00 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e798:	c7 04 24 68 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b68
c001e79f:	89 c6                	mov    esi,eax
c001e7a1:	e8 2c a4 00 00       	call   c0028bd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7a6:	83 c4 10             	add    esp,0x10
c001e7a9:	39 f3                	cmp    ebx,esi
c001e7ab:	74 b9                	je     c001e766 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7ad:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7b0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7b3:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7b9:	75 ab                	jne    c001e766 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7bb:	e9 7c ff ff ff       	jmp    c001e73c <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7c4:	83 ec 0c             	sub    esp,0xc
c001e7c7:	68 dc c6 02 c0       	push   0xc002c6dc
c001e7cc:	e9 55 ff ff ff       	jmp    c001e726 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e7d1:	8b 36                	mov    esi,DWORD PTR [esi]
c001e7d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7d7:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e7da:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7dd:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7e3:	01 d7                	add    edi,edx
c001e7e5:	89 f8                	mov    eax,edi
c001e7e7:	e9 44 fe ff ff       	jmp    c001e630 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7ec <cleanerTaskFunction(void*)>:
c001e7ec:	53                   	push   ebx
c001e7ed:	83 ec 08             	sub    esp,0x8
c001e7f0:	e8 2f f6 ff ff       	call   c001de24 <unlockScheduler()>
c001e7f5:	e8 28 f6 ff ff       	call   c001de22 <lockScheduler()>
c001e7fa:	80 3d 2c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b2c,0x0
c001e801:	0f 85 8e 00 00 00    	jne    c001e895 <cleanerTaskFunction(void*)+0xa9>
c001e807:	83 ec 0c             	sub    esp,0xc
c001e80a:	6a 02                	push   0x2
c001e80c:	e8 9f fa ff ff       	call   c001e2b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e811:	83 c4 10             	add    esp,0x10
c001e814:	c6 05 2c 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b2c,0x0
c001e81b:	e8 29 f6 ff ff       	call   c001de49 <lockStuff()>
c001e820:	e8 fd f5 ff ff       	call   c001de22 <lockScheduler()>
c001e825:	83 ec 0c             	sub    esp,0xc
c001e828:	68 50 1b 03 c0       	push   0xc0031b50
c001e82d:	e8 84 a3 00 00       	call   c0028bb6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e832:	83 c4 10             	add    esp,0x10
c001e835:	84 c0                	test   al,al
c001e837:	75 40                	jne    c001e879 <cleanerTaskFunction(void*)+0x8d>
c001e839:	83 ec 0c             	sub    esp,0xc
c001e83c:	68 50 1b 03 c0       	push   0xc0031b50
c001e841:	e8 68 a3 00 00       	call   c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e846:	c7 04 24 50 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b50
c001e84d:	89 c3                	mov    ebx,eax
c001e84f:	e8 7e a3 00 00       	call   c0028bd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e854:	c7 04 24 be c3 02 c0 	mov    DWORD PTR [esp],0xc002c3be
c001e85b:	e8 a9 46 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e860:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e863:	e8 bb fc ff ff       	call   c001e523 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e868:	c7 04 24 d7 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3d7
c001e86f:	e8 95 46 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e874:	83 c4 10             	add    esp,0x10
c001e877:	eb ac                	jmp    c001e825 <cleanerTaskFunction(void*)+0x39>
c001e879:	e8 a6 f5 ff ff       	call   c001de24 <unlockScheduler()>
c001e87e:	e8 9a f9 ff ff       	call   c001e21d <unlockStuff()>
c001e883:	e8 9a f5 ff ff       	call   c001de22 <lockScheduler()>
c001e888:	80 3d 2c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b2c,0x0
c001e88f:	0f 84 72 ff ff ff    	je     c001e807 <cleanerTaskFunction(void*)+0x1b>
c001e895:	e8 8a f5 ff ff       	call   c001de24 <unlockScheduler()>
c001e89a:	e9 75 ff ff ff       	jmp    c001e814 <cleanerTaskFunction(void*)+0x28>

c001e89f <terminateTask(int)>:
c001e89f:	83 ec 14             	sub    esp,0x14
c001e8a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8aa:	83 c0 0c             	add    eax,0xc
c001e8ad:	50                   	push   eax
c001e8ae:	68 38 c7 02 c0       	push   0xc002c738
c001e8b3:	e8 51 46 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e8b8:	e8 8c f5 ff ff       	call   c001de49 <lockStuff()>
c001e8bd:	e8 60 f5 ff ff       	call   c001de22 <lockScheduler()>
c001e8c2:	c7 04 24 ea c3 02 c0 	mov    DWORD PTR [esp],0xc002c3ea
c001e8c9:	e8 3b 46 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e8ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8d7:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e8da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8df:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8e2:	5a                   	pop    edx
c001e8e3:	59                   	pop    ecx
c001e8e4:	50                   	push   eax
c001e8e5:	68 50 1b 03 c0       	push   0xc0031b50
c001e8ea:	e8 91 a3 00 00       	call   c0028c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f4:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8fb:	c7 04 24 04 c4 02 c0 	mov    DWORD PTR [esp],0xc002c404
c001e902:	e8 02 46 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e907:	83 c4 10             	add    esp,0x10
c001e90a:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001e90f:	85 c0                	test   eax,eax
c001e911:	74 5a                	je     c001e96d <terminateTask(int)+0xce>
c001e913:	83 ec 0c             	sub    esp,0xc
c001e916:	68 1e c4 02 c0       	push   0xc002c41e
c001e91b:	e8 e9 45 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e920:	58                   	pop    eax
c001e921:	c6 05 2c 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b2c,0x1
c001e928:	ff 35 28 1b 03 c0    	push   DWORD PTR ds:0xc0031b28
c001e92e:	e8 41 fb ff ff       	call   c001e474 <unblockTask(ThreadControlBlock*)>
c001e933:	c7 04 24 38 c4 02 c0 	mov    DWORD PTR [esp],0xc002c438
c001e93a:	e8 ca 45 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e93f:	83 c4 10             	add    esp,0x10
c001e942:	e8 dd f4 ff ff       	call   c001de24 <unlockScheduler()>
c001e947:	e8 d1 f8 ff ff       	call   c001e21d <unlockStuff()>
c001e94c:	83 ec 0c             	sub    esp,0xc
c001e94f:	68 70 c4 02 c0       	push   0xc002c470
c001e954:	e8 b0 45 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	e8 c1 f4 ff ff       	call   c001de22 <lockScheduler()>
c001e961:	e8 32 f8 ff ff       	call   c001e198 <schedule()>
c001e966:	e8 b9 f4 ff ff       	call   c001de24 <unlockScheduler()>
c001e96b:	eb ef                	jmp    c001e95c <terminateTask(int)+0xbd>
c001e96d:	83 ec 0c             	sub    esp,0xc
c001e970:	68 52 c4 02 c0       	push   0xc002c452
c001e975:	e8 8f 45 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001e97a:	83 c4 10             	add    esp,0x10
c001e97d:	eb c3                	jmp    c001e942 <terminateTask(int)+0xa3>

c001e97f <Thr::terminateFromIRQ(int)>:
c001e97f:	83 ec 18             	sub    esp,0x18
c001e982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e986:	e8 14 ff ff ff       	call   c001e89f <terminateTask(int)>
c001e98b:	90                   	nop

c001e98c <Semaphore::release()>:
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e993:	e8 b1 f4 ff ff       	call   c001de49 <lockStuff()>
c001e998:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e99b:	85 d2                	test   edx,edx
c001e99d:	74 1a                	je     c001e9b9 <Semaphore::release()+0x2d>
c001e99f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e9a2:	83 ec 0c             	sub    esp,0xc
c001e9a5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9a8:	52                   	push   edx
c001e9a9:	e8 c6 fa ff ff       	call   c001e474 <unblockTask(ThreadControlBlock*)>
c001e9ae:	83 c4 10             	add    esp,0x10
c001e9b1:	83 c4 0c             	add    esp,0xc
c001e9b4:	e9 64 f8 ff ff       	jmp    c001e21d <unlockStuff()>
c001e9b9:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9bc:	83 c4 0c             	add    esp,0xc
c001e9bf:	e9 59 f8 ff ff       	jmp    c001e21d <unlockStuff()>

c001e9c4 <__static_initialization_and_destruction_0(int, int)>:
c001e9c4:	83 ec 0c             	sub    esp,0xc
c001e9c7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9cc:	0f 85 88 00 00 00    	jne    c001ea5a <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e9da:	75 7e                	jne    c001ea5a <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9dc:	83 ec 0c             	sub    esp,0xc
c001e9df:	68 68 1b 03 c0       	push   0xc0031b68
c001e9e4:	e8 53 a4 00 00       	call   c0028e3c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9e9:	83 c4 10             	add    esp,0x10
c001e9ec:	83 ec 04             	sub    esp,0x4
c001e9ef:	68 18 d5 02 c0       	push   0xc002d518
c001e9f4:	68 68 1b 03 c0       	push   0xc0031b68
c001e9f9:	68 f0 8d 02 c0       	push   0xc0028df0
c001e9fe:	e8 a0 43 ff ff       	call   c0012da3 <__cxa_atexit>
c001ea03:	83 c4 10             	add    esp,0x10
c001ea06:	83 ec 0c             	sub    esp,0xc
c001ea09:	68 5c 1b 03 c0       	push   0xc0031b5c
c001ea0e:	e8 29 a4 00 00       	call   c0028e3c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea13:	83 c4 10             	add    esp,0x10
c001ea16:	83 ec 04             	sub    esp,0x4
c001ea19:	68 18 d5 02 c0       	push   0xc002d518
c001ea1e:	68 5c 1b 03 c0       	push   0xc0031b5c
c001ea23:	68 f0 8d 02 c0       	push   0xc0028df0
c001ea28:	e8 76 43 ff ff       	call   c0012da3 <__cxa_atexit>
c001ea2d:	83 c4 10             	add    esp,0x10
c001ea30:	83 ec 0c             	sub    esp,0xc
c001ea33:	68 50 1b 03 c0       	push   0xc0031b50
c001ea38:	e8 ff a3 00 00       	call   c0028e3c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea3d:	83 c4 10             	add    esp,0x10
c001ea40:	83 ec 04             	sub    esp,0x4
c001ea43:	68 18 d5 02 c0       	push   0xc002d518
c001ea48:	68 50 1b 03 c0       	push   0xc0031b50
c001ea4d:	68 f0 8d 02 c0       	push   0xc0028df0
c001ea52:	e8 4c 43 ff ff       	call   c0012da3 <__cxa_atexit>
c001ea57:	83 c4 10             	add    esp,0x10
c001ea5a:	90                   	nop
c001ea5b:	83 c4 0c             	add    esp,0xc
c001ea5e:	c3                   	ret    

c001ea5f <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea5f:	83 ec 0c             	sub    esp,0xc
c001ea62:	83 ec 08             	sub    esp,0x8
c001ea65:	68 ff ff 00 00       	push   0xffff
c001ea6a:	6a 01                	push   0x1
c001ea6c:	e8 53 ff ff ff       	call   c001e9c4 <__static_initialization_and_destruction_0(int, int)>
c001ea71:	83 c4 10             	add    esp,0x10
c001ea74:	83 c4 0c             	add    esp,0xc
c001ea77:	c3                   	ret    

c001ea78 <Vm::inbv(unsigned short)>:
c001ea78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea7c:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea81:	75 06                	jne    c001ea89 <Vm::inbv(unsigned short)+0x11>
c001ea83:	a0 ac 1b 03 c0       	mov    al,ds:0xc0031bac
c001ea88:	c3                   	ret    
c001ea89:	ec                   	in     al,dx
c001ea8a:	c3                   	ret    

c001ea8b <Vm::outbv(unsigned short, unsigned char)>:
c001ea8b:	53                   	push   ebx
c001ea8c:	83 ec 08             	sub    esp,0x8
c001ea8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea97:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea9c:	75 38                	jne    c001ead6 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea9e:	0f b6 c3             	movzx  eax,bl
c001eaa1:	51                   	push   ecx
c001eaa2:	51                   	push   ecx
c001eaa3:	50                   	push   eax
c001eaa4:	68 57 c7 02 c0       	push   0xc002c757
c001eaa9:	e8 5b 44 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001eaae:	8b 15 ac 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bac
c001eab4:	83 c4 10             	add    esp,0x10
c001eab7:	8d 42 01             	lea    eax,[edx+0x1]
c001eaba:	88 9a c0 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce440],bl
c001eac0:	a3 ac 1b 03 c0       	mov    ds:0xc0031bac,eax
c001eac5:	83 f8 20             	cmp    eax,0x20
c001eac8:	75 0f                	jne    c001ead9 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eaca:	c7 05 ac 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031bac,0x1f
c001ead4:	eb 03                	jmp    c001ead9 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ead6:	88 d8                	mov    al,bl
c001ead8:	ee                   	out    dx,al
c001ead9:	83 c4 08             	add    esp,0x8
c001eadc:	5b                   	pop    ebx
c001eadd:	c3                   	ret    

c001eade <Vm::realToLinear(unsigned short, unsigned short)>:
c001eade:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eae3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eae8:	c1 e0 04             	shl    eax,0x4
c001eaeb:	01 d0                	add    eax,edx
c001eaed:	c3                   	ret    

c001eaee <Vm::getSegment(unsigned int)>:
c001eaee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaf2:	c1 e8 10             	shr    eax,0x10
c001eaf5:	c3                   	ret    

c001eaf6 <Vm::getOffset(unsigned int)>:
c001eaf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eafa:	c3                   	ret    

c001eafb <Vm::mainloop2()>:
c001eafb:	83 ec 0c             	sub    esp,0xc
c001eafe:	e8 1f f3 ff ff       	call   c001de22 <lockScheduler()>
c001eb03:	83 ec 0c             	sub    esp,0xc
c001eb06:	c6 05 a5 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031ba5,0x1
c001eb0d:	6a 02                	push   0x2
c001eb0f:	e8 9c f7 ff ff       	call   c001e2b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb19:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb1d:	52                   	push   edx
c001eb1e:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb22:	52                   	push   edx
c001eb23:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb27:	52                   	push   edx
c001eb28:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb2c:	50                   	push   eax
c001eb2d:	e8 c8 17 fe ff       	call   c00002fa <goToVM86>
c001eb32:	83 c4 2c             	add    esp,0x2c
c001eb35:	c3                   	ret    

c001eb36 <Vm::mainVm8086Loop(void*)>:
c001eb36:	83 ec 0c             	sub    esp,0xc
c001eb39:	e8 e6 f2 ff ff       	call   c001de24 <unlockScheduler()>
c001eb3e:	83 c4 0c             	add    esp,0xc
c001eb41:	eb b8                	jmp    c001eafb <Vm::mainloop2()>

c001eb43 <Vm::mainloop3(unsigned long)>:
c001eb43:	53                   	push   ebx
c001eb44:	83 ec 08             	sub    esp,0x8
c001eb47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb4b:	e8 d2 f2 ff ff       	call   c001de22 <lockScheduler()>
c001eb50:	83 ec 0c             	sub    esp,0xc
c001eb53:	89 1d a0 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba0,ebx
c001eb59:	6a 02                	push   0x2
c001eb5b:	c6 05 a4 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031ba4,0x1
c001eb62:	e8 49 f7 ff ff       	call   c001e2b0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb67:	83 c4 18             	add    esp,0x18
c001eb6a:	5b                   	pop    ebx
c001eb6b:	eb 8e                	jmp    c001eafb <Vm::mainloop2()>

c001eb6d <Vm::initialise8086()>:
c001eb6d:	83 ec 0c             	sub    esp,0xc
c001eb70:	68 80 00 00 00       	push   0x80
c001eb75:	6a 00                	push   0x0
c001eb77:	68 36 eb 01 c0       	push   0xc001eb36
c001eb7c:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001eb82:	e8 cd f3 ff ff       	call   c001df54 <Process::createThread(void (*)(void*), void*, int)>
c001eb87:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb8e:	a3 a8 1b 03 c0       	mov    ds:0xc0031ba8,eax
c001eb93:	68 00 01 00 00       	push   0x100
c001eb98:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c001eb9d:	6a 00                	push   0x0
c001eb9f:	6a 00                	push   0x0
c001eba1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eba7:	e8 aa 3a ff ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ebac:	83 c4 2c             	add    esp,0x2c
c001ebaf:	c3                   	ret    

c001ebb0 <Vm::finish8086()>:
c001ebb0:	53                   	push   ebx
c001ebb1:	83 ec 08             	sub    esp,0x8
c001ebb4:	e8 69 f2 ff ff       	call   c001de22 <lockScheduler()>
c001ebb9:	80 3d a4 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031ba4,0x0
c001ebc0:	75 0c                	jne    c001ebce <Vm::finish8086()+0x1e>
c001ebc2:	e8 d1 f5 ff ff       	call   c001e198 <schedule()>
c001ebc7:	e8 58 f2 ff ff       	call   c001de24 <unlockScheduler()>
c001ebcc:	eb e6                	jmp    c001ebb4 <Vm::finish8086()+0x4>
c001ebce:	83 ec 0c             	sub    esp,0xc
c001ebd1:	8b 1d a0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ba0
c001ebd7:	ff 35 a8 1b 03 c0    	push   DWORD PTR ds:0xc0031ba8
c001ebdd:	c6 05 a4 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031ba4,0x0
c001ebe4:	e8 8b f8 ff ff       	call   c001e474 <unblockTask(ThreadControlBlock*)>
c001ebe9:	e8 36 f2 ff ff       	call   c001de24 <unlockScheduler()>
c001ebee:	89 d8                	mov    eax,ebx
c001ebf0:	83 c4 18             	add    esp,0x18
c001ebf3:	5b                   	pop    ebx
c001ebf4:	c3                   	ret    

c001ebf5 <Vm::getOutput8086(unsigned char*)>:
c001ebf5:	83 ec 10             	sub    esp,0x10
c001ebf8:	ff 35 ac 1b 03 c0    	push   DWORD PTR ds:0xc0031bac
c001ebfe:	68 c0 1b 03 c0       	push   0xc0031bc0
c001ec03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec07:	e8 40 1b fe ff       	call   c000074c <memcpy>
c001ec0c:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c001ec11:	c7 05 ac 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bac,0x0
c001ec1b:	83 c4 1c             	add    esp,0x1c
c001ec1e:	c3                   	ret    

c001ec1f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec1f:	55                   	push   ebp
c001ec20:	57                   	push   edi
c001ec21:	56                   	push   esi
c001ec22:	53                   	push   ebx
c001ec23:	83 ec 2c             	sub    esp,0x2c
c001ec26:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec2a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec2e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec32:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec36:	e8 e7 f1 ff ff       	call   c001de22 <lockScheduler()>
c001ec3b:	a0 a5 1b 03 c0       	mov    al,ds:0xc0031ba5
c001ec40:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec44:	84 c0                	test   al,al
c001ec46:	75 0c                	jne    c001ec54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec48:	e8 4b f5 ff ff       	call   c001e198 <schedule()>
c001ec4d:	e8 d2 f1 ff ff       	call   c001de24 <unlockScheduler()>
c001ec52:	eb e2                	jmp    c001ec36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec54:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c001ec59:	c7 05 ac 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bac,0x0
c001ec63:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec67:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec6b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec6f:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec73:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec77:	50                   	push   eax
c001ec78:	6a 20                	push   0x20
c001ec7a:	6a 00                	push   0x0
c001ec7c:	68 c0 1b 03 c0       	push   0xc0031bc0
c001ec81:	e8 fa 1a fe ff       	call   c0000780 <memset>
c001ec86:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec8d:	e8 b9 0b ff ff       	call   c000f84b <malloc>
c001ec92:	83 c4 0c             	add    esp,0xc
c001ec95:	89 c7                	mov    edi,eax
c001ec97:	ff 35 74 1b 03 c0    	push   DWORD PTR ds:0xc0031b74
c001ec9d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eca1:	50                   	push   eax
c001eca2:	e8 c1 47 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c001eca7:	83 c4 10             	add    esp,0x10
c001ecaa:	85 ff                	test   edi,edi
c001ecac:	75 0a                	jne    c001ecb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ecae:	83 ec 0c             	sub    esp,0xc
c001ecb1:	68 73 c7 02 c0       	push   0xc002c773
c001ecb6:	eb 27                	jmp    c001ecdf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ecb8:	50                   	push   eax
c001ecb9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ecbd:	50                   	push   eax
c001ecbe:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecc2:	50                   	push   eax
c001ecc3:	57                   	push   edi
c001ecc4:	e8 af 4a ff ff       	call   c0013778 <File::stat(unsigned long long*, bool*)>
c001ecc9:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ecce:	83 c4 10             	add    esp,0x10
c001ecd1:	89 e8                	mov    eax,ebp
c001ecd3:	84 c0                	test   al,al
c001ecd5:	74 19                	je     c001ecf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ecd7:	83 ec 0c             	sub    esp,0xc
c001ecda:	68 87 c7 02 c0       	push   0xc002c787
c001ecdf:	e8 63 b9 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001ece4:	31 ed                	xor    ebp,ebp
c001ece6:	e8 39 f1 ff ff       	call   c001de24 <unlockScheduler()>
c001eceb:	83 c4 10             	add    esp,0x10
c001ecee:	eb 75                	jmp    c001ed65 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecf0:	50                   	push   eax
c001ecf1:	50                   	push   eax
c001ecf2:	6a 01                	push   0x1
c001ecf4:	57                   	push   edi
c001ecf5:	e8 d2 47 ff ff       	call   c00134cc <File::open(FileOpenMode)>
c001ecfa:	83 c4 10             	add    esp,0x10
c001ecfd:	85 c0                	test   eax,eax
c001ecff:	74 17                	je     c001ed18 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed01:	83 ec 0c             	sub    esp,0xc
c001ed04:	68 a0 c7 02 c0       	push   0xc002c7a0
c001ed09:	e8 39 b9 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001ed0e:	e8 11 f1 ff ff       	call   c001de24 <unlockScheduler()>
c001ed13:	83 c4 10             	add    esp,0x10
c001ed16:	eb 4d                	jmp    c001ed65 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed18:	0f b7 f6             	movzx  esi,si
c001ed1b:	50                   	push   eax
c001ed1c:	0f b7 db             	movzx  ebx,bx
c001ed1f:	50                   	push   eax
c001ed20:	56                   	push   esi
c001ed21:	53                   	push   ebx
c001ed22:	e8 b7 fd ff ff       	call   c001eade <Vm::realToLinear(unsigned short, unsigned short)>
c001ed27:	5a                   	pop    edx
c001ed28:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed2a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed2e:	51                   	push   ecx
c001ed2f:	50                   	push   eax
c001ed30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed38:	57                   	push   edi
c001ed39:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed3c:	83 c4 14             	add    esp,0x14
c001ed3f:	57                   	push   edi
c001ed40:	e8 e5 47 ff ff       	call   c001352a <File::close()>
c001ed45:	c6 05 a5 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031ba5,0x0
c001ed4c:	e8 d3 f0 ff ff       	call   c001de24 <unlockScheduler()>
c001ed51:	59                   	pop    ecx
c001ed52:	ff 35 a8 1b 03 c0    	push   DWORD PTR ds:0xc0031ba8
c001ed58:	e8 17 f7 ff ff       	call   c001e474 <unblockTask(ThreadControlBlock*)>
c001ed5d:	83 c4 10             	add    esp,0x10
c001ed60:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed65:	83 c4 2c             	add    esp,0x2c
c001ed68:	89 e8                	mov    eax,ebp
c001ed6a:	5b                   	pop    ebx
c001ed6b:	5e                   	pop    esi
c001ed6c:	5f                   	pop    edi
c001ed6d:	5d                   	pop    ebp
c001ed6e:	c3                   	ret    

c001ed6f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed6f:	57                   	push   edi
c001ed70:	56                   	push   esi
c001ed71:	53                   	push   ebx
c001ed72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed7e:	83 e8 06             	sub    eax,0x6
c001ed81:	0f b7 c0             	movzx  eax,ax
c001ed84:	50                   	push   eax
c001ed85:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed8a:	50                   	push   eax
c001ed8b:	e8 4e fd ff ff       	call   c001eade <Vm::realToLinear(unsigned short, unsigned short)>
c001ed90:	5a                   	pop    edx
c001ed91:	5e                   	pop    esi
c001ed92:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed95:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed98:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed9e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eda1:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eda4:	83 c2 02             	add    edx,0x2
c001eda7:	66 89 10             	mov    WORD PTR [eax],dx
c001edaa:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001edad:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001edb1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001edb4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001edb8:	89 d6                	mov    esi,edx
c001edba:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edc0:	66 81 e6 ff fd       	and    si,0xfdff
c001edc5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001edc9:	74 07                	je     c001edd2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001edcb:	89 d6                	mov    esi,edx
c001edcd:	66 81 ce 00 02       	or     si,0x200
c001edd2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001edd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eddb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eddf:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ede7:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001edea:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edf2:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001edf5:	5b                   	pop    ebx
c001edf6:	5e                   	pop    esi
c001edf7:	5f                   	pop    edi
c001edf8:	c3                   	ret    

c001edf9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001edf9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edfe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee03:	c1 e0 04             	shl    eax,0x4
c001ee06:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee09:	c3                   	ret    

c001ee0a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee14:	c1 e0 04             	shl    eax,0x4
c001ee17:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee1b:	c3                   	ret    

c001ee1c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee26:	c1 e0 04             	shl    eax,0x4
c001ee29:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee2c:	c3                   	ret    

c001ee2d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee2d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee32:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee37:	c1 e0 04             	shl    eax,0x4
c001ee3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee3e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee41:	c3                   	ret    

c001ee42 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee4c:	c1 e0 04             	shl    eax,0x4
c001ee4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee53:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee57:	c3                   	ret    

c001ee58 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee62:	c1 e0 04             	shl    eax,0x4
c001ee65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee69:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee6c:	c3                   	ret    

c001ee6d <Vm::faultHandler(regs*)>:
c001ee6d:	55                   	push   ebp
c001ee6e:	57                   	push   edi
c001ee6f:	56                   	push   esi
c001ee70:	53                   	push   ebx
c001ee71:	83 ec 1c             	sub    esp,0x1c
c001ee74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee78:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee7b:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee7e:	0f b7 c1             	movzx  eax,cx
c001ee81:	50                   	push   eax
c001ee82:	0f b7 c3             	movzx  eax,bx
c001ee85:	c1 e3 04             	shl    ebx,0x4
c001ee88:	50                   	push   eax
c001ee89:	e8 50 fc ff ff       	call   c001eade <Vm::realToLinear(unsigned short, unsigned short)>
c001ee8e:	5a                   	pop    edx
c001ee8f:	89 c5                	mov    ebp,eax
c001ee91:	5e                   	pop    esi
c001ee92:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee96:	50                   	push   eax
c001ee97:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee9b:	50                   	push   eax
c001ee9c:	e8 3d fc ff ff       	call   c001eade <Vm::realToLinear(unsigned short, unsigned short)>
c001eea1:	01 cb                	add    ebx,ecx
c001eea3:	89 c6                	mov    esi,eax
c001eea5:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eea9:	50                   	push   eax
c001eeaa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeae:	50                   	push   eax
c001eeaf:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eeb3:	50                   	push   eax
c001eeb4:	55                   	push   ebp
c001eeb5:	53                   	push   ebx
c001eeb6:	b3 06                	mov    bl,0x6
c001eeb8:	68 b9 c7 02 c0       	push   0xc002c7b9
c001eebd:	e8 47 40 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001eec2:	83 c4 20             	add    esp,0x20
c001eec5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eeca:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eecf:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eed3:	3c 9d                	cmp    al,0x9d
c001eed5:	0f 84 d7 02 00 00    	je     c001f1b2 <Vm::faultHandler(regs*)+0x345>
c001eedb:	0f 87 a3 00 00 00    	ja     c001ef84 <Vm::faultHandler(regs*)+0x117>
c001eee1:	3c 66                	cmp    al,0x66
c001eee3:	0f 84 15 02 00 00    	je     c001f0fe <Vm::faultHandler(regs*)+0x291>
c001eee9:	77 5f                	ja     c001ef4a <Vm::faultHandler(regs*)+0xdd>
c001eeeb:	3c 36                	cmp    al,0x36
c001eeed:	0f 84 f1 01 00 00    	je     c001f0e4 <Vm::faultHandler(regs*)+0x277>
c001eef3:	77 28                	ja     c001ef1d <Vm::faultHandler(regs*)+0xb0>
c001eef5:	3c 26                	cmp    al,0x26
c001eef7:	0f 84 99 01 00 00    	je     c001f096 <Vm::faultHandler(regs*)+0x229>
c001eefd:	3c 2e                	cmp    al,0x2e
c001eeff:	0f 85 3b 07 00 00    	jne    c001f640 <Vm::faultHandler(regs*)+0x7d3>
c001ef05:	83 ec 0c             	sub    esp,0xc
c001ef08:	31 db                	xor    ebx,ebx
c001ef0a:	68 ce c7 02 c0       	push   0xc002c7ce
c001ef0f:	e8 f5 3f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001ef14:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef17:	83 c4 10             	add    esp,0x10
c001ef1a:	45                   	inc    ebp
c001ef1b:	eb b2                	jmp    c001eecf <Vm::faultHandler(regs*)+0x62>
c001ef1d:	3c 64                	cmp    al,0x64
c001ef1f:	0f 84 8b 01 00 00    	je     c001f0b0 <Vm::faultHandler(regs*)+0x243>
c001ef25:	0f 87 9f 01 00 00    	ja     c001f0ca <Vm::faultHandler(regs*)+0x25d>
c001ef2b:	3c 3e                	cmp    al,0x3e
c001ef2d:	0f 85 0d 07 00 00    	jne    c001f640 <Vm::faultHandler(regs*)+0x7d3>
c001ef33:	83 ec 0c             	sub    esp,0xc
c001ef36:	b3 01                	mov    bl,0x1
c001ef38:	68 d2 c7 02 c0       	push   0xc002c7d2
c001ef3d:	e8 c7 3f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001ef42:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef45:	83 c4 10             	add    esp,0x10
c001ef48:	eb d0                	jmp    c001ef1a <Vm::faultHandler(regs*)+0xad>
c001ef4a:	3c 6d                	cmp    al,0x6d
c001ef4c:	0f 84 af 03 00 00    	je     c001f301 <Vm::faultHandler(regs*)+0x494>
c001ef52:	77 15                	ja     c001ef69 <Vm::faultHandler(regs*)+0xfc>
c001ef54:	3c 67                	cmp    al,0x67
c001ef56:	0f 84 bf 01 00 00    	je     c001f11b <Vm::faultHandler(regs*)+0x2ae>
c001ef5c:	3c 6c                	cmp    al,0x6c
c001ef5e:	0f 84 3f 03 00 00    	je     c001f2a3 <Vm::faultHandler(regs*)+0x436>
c001ef64:	e9 d7 06 00 00       	jmp    c001f640 <Vm::faultHandler(regs*)+0x7d3>
c001ef69:	3c 6f                	cmp    al,0x6f
c001ef6b:	0f 84 a4 04 00 00    	je     c001f415 <Vm::faultHandler(regs*)+0x5a8>
c001ef71:	0f 82 11 04 00 00    	jb     c001f388 <Vm::faultHandler(regs*)+0x51b>
c001ef77:	3c 9c                	cmp    al,0x9c
c001ef79:	0f 84 ba 01 00 00    	je     c001f139 <Vm::faultHandler(regs*)+0x2cc>
c001ef7f:	e9 bc 06 00 00       	jmp    c001f640 <Vm::faultHandler(regs*)+0x7d3>
c001ef84:	3c ec                	cmp    al,0xec
c001ef86:	0f 84 24 06 00 00    	je     c001f5b0 <Vm::faultHandler(regs*)+0x743>
c001ef8c:	0f 87 93 00 00 00    	ja     c001f025 <Vm::faultHandler(regs*)+0x1b8>
c001ef92:	3c e4                	cmp    al,0xe4
c001ef94:	0f 84 5c 05 00 00    	je     c001f4f6 <Vm::faultHandler(regs*)+0x689>
c001ef9a:	77 6a                	ja     c001f006 <Vm::faultHandler(regs*)+0x199>
c001ef9c:	3c cd                	cmp    al,0xcd
c001ef9e:	0f 84 7e 02 00 00    	je     c001f222 <Vm::faultHandler(regs*)+0x3b5>
c001efa4:	3c cf                	cmp    al,0xcf
c001efa6:	0f 85 94 06 00 00    	jne    c001f640 <Vm::faultHandler(regs*)+0x7d3>
c001efac:	83 ec 0c             	sub    esp,0xc
c001efaf:	68 16 c8 02 c0       	push   0xc002c816
c001efb4:	e8 50 3f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001efb9:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001efbc:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001efbf:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001efc3:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001efc6:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001efca:	0d 00 02 02 00       	or     eax,0x20200
c001efcf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efd2:	56                   	push   esi
c001efd3:	53                   	push   ebx
c001efd4:	52                   	push   edx
c001efd5:	68 1c c8 02 c0       	push   0xc002c81c
c001efda:	e8 2a 3f ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001efdf:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efe3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efe9:	66 c1 e8 09          	shr    ax,0x9
c001efed:	83 e0 01             	and    eax,0x1
c001eff0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eff3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eff6:	83 c0 06             	add    eax,0x6
c001eff9:	25 ff ff 00 00       	and    eax,0xffff
c001effe:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f001:	e9 95 02 00 00       	jmp    c001f29b <Vm::faultHandler(regs*)+0x42e>
c001f006:	3c e6                	cmp    al,0xe6
c001f008:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f00c:	0f 84 4e 05 00 00    	je     c001f560 <Vm::faultHandler(regs*)+0x6f3>
c001f012:	0f 82 0a 05 00 00    	jb     c001f522 <Vm::faultHandler(regs*)+0x6b5>
c001f018:	3c e7                	cmp    al,0xe7
c001f01a:	0f 84 69 05 00 00    	je     c001f589 <Vm::faultHandler(regs*)+0x71c>
c001f020:	e9 1b 06 00 00       	jmp    c001f640 <Vm::faultHandler(regs*)+0x7d3>
c001f025:	3c ef                	cmp    al,0xef
c001f027:	0f 84 e6 05 00 00    	je     c001f613 <Vm::faultHandler(regs*)+0x7a6>
c001f02d:	77 37                	ja     c001f066 <Vm::faultHandler(regs*)+0x1f9>
c001f02f:	3c ed                	cmp    al,0xed
c001f031:	0f 84 a3 05 00 00    	je     c001f5da <Vm::faultHandler(regs*)+0x76d>
c001f037:	3c ee                	cmp    al,0xee
c001f039:	0f 85 01 06 00 00    	jne    c001f640 <Vm::faultHandler(regs*)+0x7d3>
c001f03f:	52                   	push   edx
c001f040:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f043:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f046:	68 b7 c8 02 c0       	push   0xc002c8b7
c001f04b:	e8 b9 3e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f050:	59                   	pop    ecx
c001f051:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f055:	5b                   	pop    ebx
c001f056:	50                   	push   eax
c001f057:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f05b:	50                   	push   eax
c001f05c:	e8 2a fa ff ff       	call   c001ea8b <Vm::outbv(unsigned short, unsigned char)>
c001f061:	e9 a5 05 00 00       	jmp    c001f60b <Vm::faultHandler(regs*)+0x79e>
c001f066:	3c fa                	cmp    al,0xfa
c001f068:	0f 84 f7 01 00 00    	je     c001f265 <Vm::faultHandler(regs*)+0x3f8>
c001f06e:	3c fb                	cmp    al,0xfb
c001f070:	0f 84 0a 02 00 00    	je     c001f280 <Vm::faultHandler(regs*)+0x413>
c001f076:	3c f3                	cmp    al,0xf3
c001f078:	0f 85 c2 05 00 00    	jne    c001f640 <Vm::faultHandler(regs*)+0x7d3>
c001f07e:	83 ec 0c             	sub    esp,0xc
c001f081:	68 ef c7 02 c0       	push   0xc002c7ef
c001f086:	e8 7e 3e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f08b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f08e:	83 c4 10             	add    esp,0x10
c001f091:	e9 84 fe ff ff       	jmp    c001ef1a <Vm::faultHandler(regs*)+0xad>
c001f096:	83 ec 0c             	sub    esp,0xc
c001f099:	b3 02                	mov    bl,0x2
c001f09b:	68 ca c7 02 c0       	push   0xc002c7ca
c001f0a0:	e8 64 3e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f0a5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0a8:	83 c4 10             	add    esp,0x10
c001f0ab:	e9 6a fe ff ff       	jmp    c001ef1a <Vm::faultHandler(regs*)+0xad>
c001f0b0:	83 ec 0c             	sub    esp,0xc
c001f0b3:	b3 03                	mov    bl,0x3
c001f0b5:	68 d6 c7 02 c0       	push   0xc002c7d6
c001f0ba:	e8 4a 3e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f0bf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c2:	83 c4 10             	add    esp,0x10
c001f0c5:	e9 50 fe ff ff       	jmp    c001ef1a <Vm::faultHandler(regs*)+0xad>
c001f0ca:	83 ec 0c             	sub    esp,0xc
c001f0cd:	b3 04                	mov    bl,0x4
c001f0cf:	68 da c7 02 c0       	push   0xc002c7da
c001f0d4:	e8 30 3e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f0d9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0dc:	83 c4 10             	add    esp,0x10
c001f0df:	e9 36 fe ff ff       	jmp    c001ef1a <Vm::faultHandler(regs*)+0xad>
c001f0e4:	83 ec 0c             	sub    esp,0xc
c001f0e7:	b3 05                	mov    bl,0x5
c001f0e9:	68 de c7 02 c0       	push   0xc002c7de
c001f0ee:	e8 16 3e ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f0f3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f6:	83 c4 10             	add    esp,0x10
c001f0f9:	e9 1c fe ff ff       	jmp    c001ef1a <Vm::faultHandler(regs*)+0xad>
c001f0fe:	83 ec 0c             	sub    esp,0xc
c001f101:	68 e2 c7 02 c0       	push   0xc002c7e2
c001f106:	e8 fe 3d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f10b:	83 c4 10             	add    esp,0x10
c001f10e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f111:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f116:	e9 ff fd ff ff       	jmp    c001ef1a <Vm::faultHandler(regs*)+0xad>
c001f11b:	50                   	push   eax
c001f11c:	50                   	push   eax
c001f11d:	6a 01                	push   0x1
c001f11f:	68 e7 c7 02 c0       	push   0xc002c7e7
c001f124:	e8 e0 3d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f129:	83 c4 10             	add    esp,0x10
c001f12c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f12f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f134:	e9 e1 fd ff ff       	jmp    c001ef1a <Vm::faultHandler(regs*)+0xad>
c001f139:	83 ec 0c             	sub    esp,0xc
c001f13c:	68 f5 c7 02 c0       	push   0xc002c7f5
c001f141:	e8 c3 3d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f146:	83 c4 10             	add    esp,0x10
c001f149:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f14c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f151:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f154:	74 2f                	je     c001f185 <Vm::faultHandler(regs*)+0x318>
c001f156:	83 ea 04             	sub    edx,0x4
c001f159:	25 ff 0d 00 00       	and    eax,0xdff
c001f15e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f164:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f167:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f16a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f170:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f174:	0f 84 bf 04 00 00    	je     c001f639 <Vm::faultHandler(regs*)+0x7cc>
c001f17a:	80 cc 02             	or     ah,0x2
c001f17d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f180:	e9 b4 04 00 00       	jmp    c001f639 <Vm::faultHandler(regs*)+0x7cc>
c001f185:	83 ea 02             	sub    edx,0x2
c001f188:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f18e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f191:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f195:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f19b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f19f:	74 05                	je     c001f1a6 <Vm::faultHandler(regs*)+0x339>
c001f1a1:	80 cc 02             	or     ah,0x2
c001f1a4:	eb 03                	jmp    c001f1a9 <Vm::faultHandler(regs*)+0x33c>
c001f1a6:	80 e4 fd             	and    ah,0xfd
c001f1a9:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1ad:	e9 87 04 00 00       	jmp    c001f639 <Vm::faultHandler(regs*)+0x7cc>
c001f1b2:	83 ec 0c             	sub    esp,0xc
c001f1b5:	68 fc c7 02 c0       	push   0xc002c7fc
c001f1ba:	e8 4a 3d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f1bf:	83 c4 10             	add    esp,0x10
c001f1c2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1c7:	74 28                	je     c001f1f1 <Vm::faultHandler(regs*)+0x384>
c001f1c9:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1cb:	25 ff 0d 00 00       	and    eax,0xdff
c001f1d0:	0d 00 02 02 00       	or     eax,0x20200
c001f1d5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1d8:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1e0:	c1 e8 09             	shr    eax,0x9
c001f1e3:	83 e0 01             	and    eax,0x1
c001f1e6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1e9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1ec:	83 c0 04             	add    eax,0x4
c001f1ef:	eb 24                	jmp    c001f215 <Vm::faultHandler(regs*)+0x3a8>
c001f1f1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1f4:	0d 00 02 02 00       	or     eax,0x20200
c001f1f9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1fc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f205:	66 c1 e8 09          	shr    ax,0x9
c001f209:	83 e0 01             	and    eax,0x1
c001f20c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f20f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f212:	83 c0 02             	add    eax,0x2
c001f215:	25 ff ff 00 00       	and    eax,0xffff
c001f21a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f21d:	e9 17 04 00 00       	jmp    c001f639 <Vm::faultHandler(regs*)+0x7cc>
c001f222:	53                   	push   ebx
c001f223:	53                   	push   ebx
c001f224:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f228:	50                   	push   eax
c001f229:	68 02 c8 02 c0       	push   0xc002c802
c001f22e:	e8 d6 3c ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f233:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f237:	83 c4 10             	add    esp,0x10
c001f23a:	3c ee                	cmp    al,0xee
c001f23c:	75 10                	jne    c001f24e <Vm::faultHandler(regs*)+0x3e1>
c001f23e:	83 ec 0c             	sub    esp,0xc
c001f241:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f244:	e8 fa f8 ff ff       	call   c001eb43 <Vm::mainloop3(unsigned long)>
c001f249:	e9 c0 03 00 00       	jmp    c001f60e <Vm::faultHandler(regs*)+0x7a1>
c001f24e:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f252:	83 ec 0c             	sub    esp,0xc
c001f255:	53                   	push   ebx
c001f256:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f25a:	53                   	push   ebx
c001f25b:	55                   	push   ebp
c001f25c:	50                   	push   eax
c001f25d:	57                   	push   edi
c001f25e:	e8 0c fb ff ff       	call   c001ed6f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f263:	eb 36                	jmp    c001f29b <Vm::faultHandler(regs*)+0x42e>
c001f265:	83 ec 0c             	sub    esp,0xc
c001f268:	68 0c c8 02 c0       	push   0xc002c80c
c001f26d:	e8 97 3c ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f272:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f277:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f27b:	e9 8b 03 00 00       	jmp    c001f60b <Vm::faultHandler(regs*)+0x79e>
c001f280:	83 ec 0c             	sub    esp,0xc
c001f283:	68 11 c8 02 c0       	push   0xc002c811
c001f288:	e8 7c 3c ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f28d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f292:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f296:	e9 70 03 00 00       	jmp    c001f60b <Vm::faultHandler(regs*)+0x79e>
c001f29b:	83 c4 20             	add    esp,0x20
c001f29e:	e9 99 03 00 00       	jmp    c001f63c <Vm::faultHandler(regs*)+0x7cf>
c001f2a3:	83 ec 0c             	sub    esp,0xc
c001f2a6:	68 4f c8 02 c0       	push   0xc002c84f
c001f2ab:	e8 59 3c ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f2b0:	83 c4 10             	add    esp,0x10
c001f2b3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2b6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2bb:	74 0d                	je     c001f2ca <Vm::faultHandler(regs*)+0x45d>
c001f2bd:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2c4:	0f 87 9e 01 00 00    	ja     c001f468 <Vm::faultHandler(regs*)+0x5fb>
c001f2ca:	83 ec 0c             	sub    esp,0xc
c001f2cd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2d1:	0f b7 db             	movzx  ebx,bx
c001f2d4:	50                   	push   eax
c001f2d5:	e8 9e f7 ff ff       	call   c001ea78 <Vm::inbv(unsigned short)>
c001f2da:	83 c4 0c             	add    esp,0xc
c001f2dd:	0f b6 c0             	movzx  eax,al
c001f2e0:	50                   	push   eax
c001f2e1:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2e5:	50                   	push   eax
c001f2e6:	53                   	push   ebx
c001f2e7:	e8 41 fb ff ff       	call   c001ee2d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2ec:	83 c4 10             	add    esp,0x10
c001f2ef:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2f2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2f6:	74 03                	je     c001f2fb <Vm::faultHandler(regs*)+0x48e>
c001f2f8:	48                   	dec    eax
c001f2f9:	eb 01                	jmp    c001f2fc <Vm::faultHandler(regs*)+0x48f>
c001f2fb:	40                   	inc    eax
c001f2fc:	0f b7 c0             	movzx  eax,ax
c001f2ff:	eb 7f                	jmp    c001f380 <Vm::faultHandler(regs*)+0x513>
c001f301:	83 ec 0c             	sub    esp,0xc
c001f304:	68 81 c8 02 c0       	push   0xc002c881
c001f309:	e8 fb 3b ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f30e:	83 c4 10             	add    esp,0x10
c001f311:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f314:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f319:	74 0d                	je     c001f328 <Vm::faultHandler(regs*)+0x4bb>
c001f31b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f322:	0f 87 40 01 00 00    	ja     c001f468 <Vm::faultHandler(regs*)+0x5fb>
c001f328:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f32b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f32f:	0f b7 db             	movzx  ebx,bx
c001f332:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f337:	74 20                	je     c001f359 <Vm::faultHandler(regs*)+0x4ec>
c001f339:	ed                   	in     eax,dx
c001f33a:	51                   	push   ecx
c001f33b:	50                   	push   eax
c001f33c:	56                   	push   esi
c001f33d:	53                   	push   ebx
c001f33e:	e8 15 fb ff ff       	call   c001ee58 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f343:	83 c4 10             	add    esp,0x10
c001f346:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f349:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f34d:	74 05                	je     c001f354 <Vm::faultHandler(regs*)+0x4e7>
c001f34f:	83 e8 04             	sub    eax,0x4
c001f352:	eb 27                	jmp    c001f37b <Vm::faultHandler(regs*)+0x50e>
c001f354:	83 c0 04             	add    eax,0x4
c001f357:	eb 22                	jmp    c001f37b <Vm::faultHandler(regs*)+0x50e>
c001f359:	66 ed                	in     ax,dx
c001f35b:	0f b7 c0             	movzx  eax,ax
c001f35e:	52                   	push   edx
c001f35f:	50                   	push   eax
c001f360:	56                   	push   esi
c001f361:	53                   	push   ebx
c001f362:	e8 db fa ff ff       	call   c001ee42 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f367:	83 c4 10             	add    esp,0x10
c001f36a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f36d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f371:	74 05                	je     c001f378 <Vm::faultHandler(regs*)+0x50b>
c001f373:	83 e8 02             	sub    eax,0x2
c001f376:	eb 03                	jmp    c001f37b <Vm::faultHandler(regs*)+0x50e>
c001f378:	83 c0 02             	add    eax,0x2
c001f37b:	25 ff ff 00 00       	and    eax,0xffff
c001f380:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f383:	e9 b1 02 00 00       	jmp    c001f639 <Vm::faultHandler(regs*)+0x7cc>
c001f388:	83 ec 0c             	sub    esp,0xc
c001f38b:	4b                   	dec    ebx
c001f38c:	68 87 c8 02 c0       	push   0xc002c887
c001f391:	e8 73 3b ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f396:	83 c4 10             	add    esp,0x10
c001f399:	80 fb 05             	cmp    bl,0x5
c001f39c:	77 0a                	ja     c001f3a8 <Vm::faultHandler(regs*)+0x53b>
c001f39e:	0f b6 db             	movzx  ebx,bl
c001f3a1:	ff 24 9d f8 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3708]
c001f3a8:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3ac:	eb 1b                	jmp    c001f3c9 <Vm::faultHandler(regs*)+0x55c>
c001f3ae:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3b2:	eb 15                	jmp    c001f3c9 <Vm::faultHandler(regs*)+0x55c>
c001f3b4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3b8:	eb 0f                	jmp    c001f3c9 <Vm::faultHandler(regs*)+0x55c>
c001f3ba:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3be:	eb 09                	jmp    c001f3c9 <Vm::faultHandler(regs*)+0x55c>
c001f3c0:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3c3:	eb 04                	jmp    c001f3c9 <Vm::faultHandler(regs*)+0x55c>
c001f3c5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3c9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3ce:	74 0d                	je     c001f3dd <Vm::faultHandler(regs*)+0x570>
c001f3d0:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f3d7:	0f 87 8b 00 00 00    	ja     c001f468 <Vm::faultHandler(regs*)+0x5fb>
c001f3dd:	53                   	push   ebx
c001f3de:	53                   	push   ebx
c001f3df:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3e3:	52                   	push   edx
c001f3e4:	50                   	push   eax
c001f3e5:	e8 0f fa ff ff       	call   c001edf9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3ea:	5e                   	pop    esi
c001f3eb:	0f b6 c0             	movzx  eax,al
c001f3ee:	5d                   	pop    ebp
c001f3ef:	50                   	push   eax
c001f3f0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3f4:	50                   	push   eax
c001f3f5:	e8 91 f6 ff ff       	call   c001ea8b <Vm::outbv(unsigned short, unsigned char)>
c001f3fa:	83 c4 10             	add    esp,0x10
c001f3fd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f400:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f404:	74 03                	je     c001f409 <Vm::faultHandler(regs*)+0x59c>
c001f406:	48                   	dec    eax
c001f407:	eb 01                	jmp    c001f40a <Vm::faultHandler(regs*)+0x59d>
c001f409:	40                   	inc    eax
c001f40a:	0f b7 c0             	movzx  eax,ax
c001f40d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f410:	e9 24 02 00 00       	jmp    c001f639 <Vm::faultHandler(regs*)+0x7cc>
c001f415:	83 ec 0c             	sub    esp,0xc
c001f418:	4b                   	dec    ebx
c001f419:	68 87 c8 02 c0       	push   0xc002c887
c001f41e:	e8 e6 3a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f423:	83 c4 10             	add    esp,0x10
c001f426:	80 fb 05             	cmp    bl,0x5
c001f429:	77 0a                	ja     c001f435 <Vm::faultHandler(regs*)+0x5c8>
c001f42b:	0f b6 db             	movzx  ebx,bl
c001f42e:	ff 24 9d 10 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd36f0]
c001f435:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f439:	eb 1b                	jmp    c001f456 <Vm::faultHandler(regs*)+0x5e9>
c001f43b:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f43f:	eb 15                	jmp    c001f456 <Vm::faultHandler(regs*)+0x5e9>
c001f441:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f445:	eb 0f                	jmp    c001f456 <Vm::faultHandler(regs*)+0x5e9>
c001f447:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f44b:	eb 09                	jmp    c001f456 <Vm::faultHandler(regs*)+0x5e9>
c001f44d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f450:	eb 04                	jmp    c001f456 <Vm::faultHandler(regs*)+0x5e9>
c001f452:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f456:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f459:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f45e:	74 39                	je     c001f499 <Vm::faultHandler(regs*)+0x62c>
c001f460:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f466:	76 31                	jbe    c001f499 <Vm::faultHandler(regs*)+0x62c>
c001f468:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f46c:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f470:	51                   	push   ecx
c001f471:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f475:	51                   	push   ecx
c001f476:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f47a:	51                   	push   ecx
c001f47b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f47f:	51                   	push   ecx
c001f480:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f484:	52                   	push   edx
c001f485:	50                   	push   eax
c001f486:	50                   	push   eax
c001f487:	68 54 c8 02 c0       	push   0xc002c854
c001f48c:	e8 78 3a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f491:	83 c4 20             	add    esp,0x20
c001f494:	e9 fb 01 00 00       	jmp    c001f694 <Vm::faultHandler(regs*)+0x827>
c001f499:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f49c:	0f b7 d3             	movzx  edx,bx
c001f49f:	81 e6 00 04 00 00    	and    esi,0x400
c001f4a5:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4a8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4ad:	74 1d                	je     c001f4cc <Vm::faultHandler(regs*)+0x65f>
c001f4af:	51                   	push   ecx
c001f4b0:	51                   	push   ecx
c001f4b1:	52                   	push   edx
c001f4b2:	50                   	push   eax
c001f4b3:	e8 64 f9 ff ff       	call   c001ee1c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4b8:	83 c4 10             	add    esp,0x10
c001f4bb:	89 ea                	mov    edx,ebp
c001f4bd:	ef                   	out    dx,eax
c001f4be:	85 f6                	test   esi,esi
c001f4c0:	74 05                	je     c001f4c7 <Vm::faultHandler(regs*)+0x65a>
c001f4c2:	83 eb 04             	sub    ebx,0x4
c001f4c5:	eb 21                	jmp    c001f4e8 <Vm::faultHandler(regs*)+0x67b>
c001f4c7:	83 c3 04             	add    ebx,0x4
c001f4ca:	eb 1c                	jmp    c001f4e8 <Vm::faultHandler(regs*)+0x67b>
c001f4cc:	51                   	push   ecx
c001f4cd:	51                   	push   ecx
c001f4ce:	52                   	push   edx
c001f4cf:	50                   	push   eax
c001f4d0:	e8 35 f9 ff ff       	call   c001ee0a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f4d5:	83 c4 10             	add    esp,0x10
c001f4d8:	89 ea                	mov    edx,ebp
c001f4da:	66 ef                	out    dx,ax
c001f4dc:	85 f6                	test   esi,esi
c001f4de:	74 05                	je     c001f4e5 <Vm::faultHandler(regs*)+0x678>
c001f4e0:	83 eb 02             	sub    ebx,0x2
c001f4e3:	eb 03                	jmp    c001f4e8 <Vm::faultHandler(regs*)+0x67b>
c001f4e5:	83 c3 02             	add    ebx,0x2
c001f4e8:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4ee:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4f1:	e9 43 01 00 00       	jmp    c001f639 <Vm::faultHandler(regs*)+0x7cc>
c001f4f6:	53                   	push   ebx
c001f4f7:	53                   	push   ebx
c001f4f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4fc:	50                   	push   eax
c001f4fd:	68 8d c8 02 c0       	push   0xc002c88d
c001f502:	e8 02 3a ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f507:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f50e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f512:	89 04 24             	mov    DWORD PTR [esp],eax
c001f515:	e8 5e f5 ff ff       	call   c001ea78 <Vm::inbv(unsigned short)>
c001f51a:	0f b6 c0             	movzx  eax,al
c001f51d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f520:	eb 5e                	jmp    c001f580 <Vm::faultHandler(regs*)+0x713>
c001f522:	51                   	push   ecx
c001f523:	51                   	push   ecx
c001f524:	53                   	push   ebx
c001f525:	68 93 c8 02 c0       	push   0xc002c893
c001f52a:	e8 da 39 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f52f:	83 c4 10             	add    esp,0x10
c001f532:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f537:	74 07                	je     c001f540 <Vm::faultHandler(regs*)+0x6d3>
c001f539:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f53d:	ed                   	in     eax,dx
c001f53e:	eb 14                	jmp    c001f554 <Vm::faultHandler(regs*)+0x6e7>
c001f540:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f543:	66 31 db             	xor    bx,bx
c001f546:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f549:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f54d:	66 ed                	in     ax,dx
c001f54f:	0f b7 c0             	movzx  eax,ax
c001f552:	09 d8                	or     eax,ebx
c001f554:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f557:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f55b:	e9 dc 00 00 00       	jmp    c001f63c <Vm::faultHandler(regs*)+0x7cf>
c001f560:	50                   	push   eax
c001f561:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f564:	53                   	push   ebx
c001f565:	68 99 c8 02 c0       	push   0xc002c899
c001f56a:	e8 9a 39 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f56f:	58                   	pop    eax
c001f570:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f574:	5a                   	pop    edx
c001f575:	50                   	push   eax
c001f576:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f57a:	50                   	push   eax
c001f57b:	e8 0b f5 ff ff       	call   c001ea8b <Vm::outbv(unsigned short, unsigned char)>
c001f580:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f584:	e9 85 00 00 00       	jmp    c001f60e <Vm::faultHandler(regs*)+0x7a1>
c001f589:	50                   	push   eax
c001f58a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f58d:	53                   	push   ebx
c001f58e:	68 a2 c8 02 c0       	push   0xc002c8a2
c001f593:	e8 71 39 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f598:	83 c4 10             	add    esp,0x10
c001f59b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f59f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5a4:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5a7:	74 03                	je     c001f5ac <Vm::faultHandler(regs*)+0x73f>
c001f5a9:	ef                   	out    dx,eax
c001f5aa:	eb ab                	jmp    c001f557 <Vm::faultHandler(regs*)+0x6ea>
c001f5ac:	66 ef                	out    dx,ax
c001f5ae:	eb a7                	jmp    c001f557 <Vm::faultHandler(regs*)+0x6ea>
c001f5b0:	55                   	push   ebp
c001f5b1:	55                   	push   ebp
c001f5b2:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5b5:	68 ab c8 02 c0       	push   0xc002c8ab
c001f5ba:	e8 4a 39 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f5bf:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5c6:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5ca:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5cd:	e8 a6 f4 ff ff       	call   c001ea78 <Vm::inbv(unsigned short)>
c001f5d2:	0f b6 c0             	movzx  eax,al
c001f5d5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5d8:	eb 31                	jmp    c001f60b <Vm::faultHandler(regs*)+0x79e>
c001f5da:	56                   	push   esi
c001f5db:	56                   	push   esi
c001f5dc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5df:	68 b1 c8 02 c0       	push   0xc002c8b1
c001f5e4:	e8 20 39 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f5e9:	83 c4 10             	add    esp,0x10
c001f5ec:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5ef:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5f4:	74 03                	je     c001f5f9 <Vm::faultHandler(regs*)+0x78c>
c001f5f6:	ed                   	in     eax,dx
c001f5f7:	eb 0d                	jmp    c001f606 <Vm::faultHandler(regs*)+0x799>
c001f5f9:	66 ed                	in     ax,dx
c001f5fb:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5fe:	0f b7 c0             	movzx  eax,ax
c001f601:	66 31 d2             	xor    dx,dx
c001f604:	09 d0                	or     eax,edx
c001f606:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f609:	eb 2e                	jmp    c001f639 <Vm::faultHandler(regs*)+0x7cc>
c001f60b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f60e:	83 c4 10             	add    esp,0x10
c001f611:	eb 29                	jmp    c001f63c <Vm::faultHandler(regs*)+0x7cf>
c001f613:	50                   	push   eax
c001f614:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f617:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f61a:	68 c0 c8 02 c0       	push   0xc002c8c0
c001f61f:	e8 e5 38 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f624:	83 c4 10             	add    esp,0x10
c001f627:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f62a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f62f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f632:	74 03                	je     c001f637 <Vm::faultHandler(regs*)+0x7ca>
c001f634:	ef                   	out    dx,eax
c001f635:	eb 02                	jmp    c001f639 <Vm::faultHandler(regs*)+0x7cc>
c001f637:	66 ef                	out    dx,ax
c001f639:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f63c:	b0 01                	mov    al,0x1
c001f63e:	eb 56                	jmp    c001f696 <Vm::faultHandler(regs*)+0x829>
c001f640:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f644:	51                   	push   ecx
c001f645:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f649:	51                   	push   ecx
c001f64a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f64e:	51                   	push   ecx
c001f64f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f653:	51                   	push   ecx
c001f654:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f658:	52                   	push   edx
c001f659:	50                   	push   eax
c001f65a:	50                   	push   eax
c001f65b:	68 c9 c8 02 c0       	push   0xc002c8c9
c001f660:	e8 a4 38 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c001f665:	83 c4 20             	add    esp,0x20
c001f668:	83 ec 0c             	sub    esp,0xc
c001f66b:	6a 60                	push   0x60
c001f66d:	e8 06 f4 ff ff       	call   c001ea78 <Vm::inbv(unsigned short)>
c001f672:	83 c4 10             	add    esp,0x10
c001f675:	3c 1c                	cmp    al,0x1c
c001f677:	74 04                	je     c001f67d <Vm::faultHandler(regs*)+0x810>
c001f679:	3c 5a                	cmp    al,0x5a
c001f67b:	75 eb                	jne    c001f668 <Vm::faultHandler(regs*)+0x7fb>
c001f67d:	3c 1c                	cmp    al,0x1c
c001f67f:	74 04                	je     c001f685 <Vm::faultHandler(regs*)+0x818>
c001f681:	3c 5a                	cmp    al,0x5a
c001f683:	75 0f                	jne    c001f694 <Vm::faultHandler(regs*)+0x827>
c001f685:	83 ec 0c             	sub    esp,0xc
c001f688:	6a 60                	push   0x60
c001f68a:	e8 e9 f3 ff ff       	call   c001ea78 <Vm::inbv(unsigned short)>
c001f68f:	83 c4 10             	add    esp,0x10
c001f692:	eb e9                	jmp    c001f67d <Vm::faultHandler(regs*)+0x810>
c001f694:	31 c0                	xor    eax,eax
c001f696:	83 c4 1c             	add    esp,0x1c
c001f699:	5b                   	pop    ebx
c001f69a:	5e                   	pop    esi
c001f69b:	5f                   	pop    edi
c001f69c:	5d                   	pop    ebp
c001f69d:	c3                   	ret    

c001f69e <Vm::fpuInternalTo32(unsigned long long)>:
c001f69e:	57                   	push   edi
c001f69f:	56                   	push   esi
c001f6a0:	53                   	push   ebx
c001f6a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a9:	89 d6                	mov    esi,edx
c001f6ab:	89 d7                	mov    edi,edx
c001f6ad:	89 c1                	mov    ecx,eax
c001f6af:	c1 ef 14             	shr    edi,0x14
c001f6b2:	89 d3                	mov    ebx,edx
c001f6b4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6ba:	31 d2                	xor    edx,edx
c001f6bc:	89 f8                	mov    eax,edi
c001f6be:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6c4:	bf ff 00 00 00       	mov    edi,0xff
c001f6c9:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f6ce:	83 d2 ff             	adc    edx,0xffffffff
c001f6d1:	39 c7                	cmp    edi,eax
c001f6d3:	bf 00 00 00 00       	mov    edi,0x0
c001f6d8:	19 d7                	sbb    edi,edx
c001f6da:	72 15                	jb     c001f6f1 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6dc:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6e0:	c1 e0 17             	shl    eax,0x17
c001f6e3:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6e9:	09 f1                	or     ecx,esi
c001f6eb:	09 c1                	or     ecx,eax
c001f6ed:	89 cf                	mov    edi,ecx
c001f6ef:	eb 02                	jmp    c001f6f3 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6f1:	31 ff                	xor    edi,edi
c001f6f3:	89 f8                	mov    eax,edi
c001f6f5:	5b                   	pop    ebx
c001f6f6:	5e                   	pop    esi
c001f6f7:	5f                   	pop    edi
c001f6f8:	c3                   	ret    

c001f6f9 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f701:	c3                   	ret    

c001f702 <Vm::fpu32ToInternal(unsigned int)>:
c001f702:	57                   	push   edi
c001f703:	31 ff                	xor    edi,edi
c001f705:	56                   	push   esi
c001f706:	53                   	push   ebx
c001f707:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f70b:	89 cb                	mov    ebx,ecx
c001f70d:	89 ce                	mov    esi,ecx
c001f70f:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f715:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f71b:	c1 e9 17             	shr    ecx,0x17
c001f71e:	89 f0                	mov    eax,esi
c001f720:	0f b6 d1             	movzx  edx,cl
c001f723:	81 c2 80 03 00 00    	add    edx,0x380
c001f729:	89 d1                	mov    ecx,edx
c001f72b:	89 fa                	mov    edx,edi
c001f72d:	c1 e1 14             	shl    ecx,0x14
c001f730:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f734:	c1 e0 1d             	shl    eax,0x1d
c001f737:	89 d7                	mov    edi,edx
c001f739:	89 c6                	mov    esi,eax
c001f73b:	89 ca                	mov    edx,ecx
c001f73d:	89 f0                	mov    eax,esi
c001f73f:	09 fa                	or     edx,edi
c001f741:	09 da                	or     edx,ebx
c001f743:	5b                   	pop    ebx
c001f744:	5e                   	pop    esi
c001f745:	5f                   	pop    edi
c001f746:	c3                   	ret    

c001f747 <Vm::fpu64ToInternal(unsigned long long)>:
c001f747:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f74b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f74f:	c3                   	ret    

c001f750 <Vm::fpuFloatToLong(unsigned long long)>:
c001f750:	57                   	push   edi
c001f751:	31 c0                	xor    eax,eax
c001f753:	56                   	push   esi
c001f754:	31 d2                	xor    edx,edx
c001f756:	53                   	push   ebx
c001f757:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f75b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f75f:	89 d9                	mov    ecx,ebx
c001f761:	c1 e9 14             	shr    ecx,0x14
c001f764:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f76a:	89 cf                	mov    edi,ecx
c001f76c:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f772:	78 33                	js     c001f7a7 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f774:	89 d9                	mov    ecx,ebx
c001f776:	89 f0                	mov    eax,esi
c001f778:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f77e:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f784:	89 ca                	mov    edx,ecx
c001f786:	b9 34 00 00 00       	mov    ecx,0x34
c001f78b:	29 f9                	sub    ecx,edi
c001f78d:	0f ad d0             	shrd   eax,edx,cl
c001f790:	d3 fa                	sar    edx,cl
c001f792:	f6 c1 20             	test   cl,0x20
c001f795:	74 05                	je     c001f79c <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f797:	89 d0                	mov    eax,edx
c001f799:	c1 fa 1f             	sar    edx,0x1f
c001f79c:	85 db                	test   ebx,ebx
c001f79e:	79 07                	jns    c001f7a7 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7a0:	f7 d8                	neg    eax
c001f7a2:	83 d2 00             	adc    edx,0x0
c001f7a5:	f7 da                	neg    edx
c001f7a7:	5b                   	pop    ebx
c001f7a8:	5e                   	pop    esi
c001f7a9:	5f                   	pop    edi
c001f7aa:	c3                   	ret    

c001f7ab <Vm::fpuULongToFloat(unsigned long long)>:
c001f7ab:	57                   	push   edi
c001f7ac:	31 c9                	xor    ecx,ecx
c001f7ae:	56                   	push   esi
c001f7af:	53                   	push   ebx
c001f7b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7b4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7b8:	0f ba e7 14          	bt     edi,0x14
c001f7bc:	72 07                	jb     c001f7c5 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7be:	01 f6                	add    esi,esi
c001f7c0:	11 ff                	adc    edi,edi
c001f7c2:	41                   	inc    ecx
c001f7c3:	eb f3                	jmp    c001f7b8 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7c5:	89 fa                	mov    edx,edi
c001f7c7:	89 f0                	mov    eax,esi
c001f7c9:	bb 33 04 00 00       	mov    ebx,0x433
c001f7ce:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f7d4:	29 cb                	sub    ebx,ecx
c001f7d6:	89 d9                	mov    ecx,ebx
c001f7d8:	5b                   	pop    ebx
c001f7d9:	c1 e1 14             	shl    ecx,0x14
c001f7dc:	5e                   	pop    esi
c001f7dd:	09 ca                	or     edx,ecx
c001f7df:	5f                   	pop    edi
c001f7e0:	c3                   	ret    

c001f7e1 <Vm::fpuLongToFloat(long long)>:
c001f7e1:	56                   	push   esi
c001f7e2:	31 c0                	xor    eax,eax
c001f7e4:	53                   	push   ebx
c001f7e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7ed:	39 c8                	cmp    eax,ecx
c001f7ef:	19 d8                	sbb    eax,ebx
c001f7f1:	7d 04                	jge    c001f7f7 <Vm::fpuLongToFloat(long long)+0x16>
c001f7f3:	31 f6                	xor    esi,esi
c001f7f5:	eb 0c                	jmp    c001f803 <Vm::fpuLongToFloat(long long)+0x22>
c001f7f7:	f7 d9                	neg    ecx
c001f7f9:	be 01 00 00 00       	mov    esi,0x1
c001f7fe:	83 d3 00             	adc    ebx,0x0
c001f801:	f7 db                	neg    ebx
c001f803:	31 c0                	xor    eax,eax
c001f805:	0f ba e3 14          	bt     ebx,0x14
c001f809:	72 07                	jb     c001f812 <Vm::fpuLongToFloat(long long)+0x31>
c001f80b:	01 c9                	add    ecx,ecx
c001f80d:	11 db                	adc    ebx,ebx
c001f80f:	40                   	inc    eax
c001f810:	eb f3                	jmp    c001f805 <Vm::fpuLongToFloat(long long)+0x24>
c001f812:	ba 33 04 00 00       	mov    edx,0x433
c001f817:	29 c2                	sub    edx,eax
c001f819:	89 c8                	mov    eax,ecx
c001f81b:	c1 e2 14             	shl    edx,0x14
c001f81e:	89 d9                	mov    ecx,ebx
c001f820:	89 f3                	mov    ebx,esi
c001f822:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f828:	09 ca                	or     edx,ecx
c001f82a:	84 db                	test   bl,bl
c001f82c:	74 06                	je     c001f834 <Vm::fpuLongToFloat(long long)+0x53>
c001f82e:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f834:	5b                   	pop    ebx
c001f835:	5e                   	pop    esi
c001f836:	c3                   	ret    

c001f837 <Vm::fpuGet0()>:
c001f837:	31 c0                	xor    eax,eax
c001f839:	31 d2                	xor    edx,edx
c001f83b:	c3                   	ret    

c001f83c <Vm::fpuGet1()>:
c001f83c:	b8 01 00 00 00       	mov    eax,0x1
c001f841:	31 d2                	xor    edx,edx
c001f843:	c3                   	ret    

c001f844 <Vm::fpuGetPi()>:
c001f844:	b8 03 00 00 00       	mov    eax,0x3
c001f849:	31 d2                	xor    edx,edx
c001f84b:	c3                   	ret    

c001f84c <Vm::fpuGetLog2E()>:
c001f84c:	83 ec 18             	sub    esp,0x18
c001f84f:	68 28 c9 02 c0       	push   0xc002c928
c001f854:	e8 ee ad ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001f859:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f85e:	31 d2                	xor    edx,edx
c001f860:	83 c4 1c             	add    esp,0x1c
c001f863:	c3                   	ret    

c001f864 <Vm::fpuGetLogE2()>:
c001f864:	83 ec 18             	sub    esp,0x18
c001f867:	68 34 c9 02 c0       	push   0xc002c934
c001f86c:	e8 d6 ad ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001f871:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f876:	31 d2                	xor    edx,edx
c001f878:	83 c4 1c             	add    esp,0x1c
c001f87b:	c3                   	ret    

c001f87c <Vm::fpuGetLog210()>:
c001f87c:	83 ec 18             	sub    esp,0x18
c001f87f:	68 40 c9 02 c0       	push   0xc002c940
c001f884:	e8 be ad ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001f889:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f88e:	31 d2                	xor    edx,edx
c001f890:	83 c4 1c             	add    esp,0x1c
c001f893:	c3                   	ret    

c001f894 <Vm::fpuGetLog102()>:
c001f894:	83 ec 18             	sub    esp,0x18
c001f897:	68 4d c9 02 c0       	push   0xc002c94d
c001f89c:	e8 a6 ad ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001f8a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8a6:	31 d2                	xor    edx,edx
c001f8a8:	83 c4 1c             	add    esp,0x1c
c001f8ab:	c3                   	ret    

c001f8ac <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8b0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8b8:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8bc:	0f 92 c0             	setb   al
c001f8bf:	c3                   	ret    

c001f8c0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c8:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f8cc:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f8d0:	09 c2                	or     edx,eax
c001f8d2:	0f 94 c0             	sete   al
c001f8d5:	c3                   	ret    

c001f8d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f8d6:	57                   	push   edi
c001f8d7:	56                   	push   esi
c001f8d8:	53                   	push   ebx
c001f8d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8e1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8e5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8e9:	57                   	push   edi
c001f8ea:	56                   	push   esi
c001f8eb:	53                   	push   ebx
c001f8ec:	51                   	push   ecx
c001f8ed:	e8 ce ff ff ff       	call   c001f8c0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8f2:	83 c4 10             	add    esp,0x10
c001f8f5:	88 c2                	mov    dl,al
c001f8f7:	31 c0                	xor    eax,eax
c001f8f9:	84 d2                	test   dl,dl
c001f8fb:	75 0c                	jne    c001f909 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8fd:	57                   	push   edi
c001f8fe:	56                   	push   esi
c001f8ff:	53                   	push   ebx
c001f900:	51                   	push   ecx
c001f901:	e8 a6 ff ff ff       	call   c001f8ac <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f906:	83 c4 10             	add    esp,0x10
c001f909:	83 e0 01             	and    eax,0x1
c001f90c:	5b                   	pop    ebx
c001f90d:	88 c1                	mov    cl,al
c001f90f:	83 e2 01             	and    edx,0x1
c001f912:	a0 e1 1b 03 c0       	mov    al,ds:0xc0031be1
c001f917:	c1 e2 06             	shl    edx,0x6
c001f91a:	83 e0 ba             	and    eax,0xffffffba
c001f91d:	5e                   	pop    esi
c001f91e:	09 c8                	or     eax,ecx
c001f920:	5f                   	pop    edi
c001f921:	09 d0                	or     eax,edx
c001f923:	a2 e1 1b 03 c0       	mov    ds:0xc0031be1,al
c001f928:	c3                   	ret    

c001f929 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f929:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f92d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f931:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f935:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f939:	c3                   	ret    

c001f93a <Vm::fpuAbs(unsigned long long)>:
c001f93a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f93e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f942:	c3                   	ret    

c001f943 <Vm::fpuChs(unsigned long long)>:
c001f943:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f947:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f94b:	f7 d8                	neg    eax
c001f94d:	83 d2 00             	adc    edx,0x0
c001f950:	f7 da                	neg    edx
c001f952:	c3                   	ret    

c001f953 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f953:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f957:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f95c:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f960:	eb c7                	jmp    c001f929 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f962 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f962:	53                   	push   ebx
c001f963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f967:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f96b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f96f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f973:	0f af ca             	imul   ecx,edx
c001f976:	0f af d8             	imul   ebx,eax
c001f979:	f7 e2                	mul    edx
c001f97b:	01 d9                	add    ecx,ebx
c001f97d:	5b                   	pop    ebx
c001f97e:	01 ca                	add    edx,ecx
c001f980:	c3                   	ret    

c001f981 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f981:	83 ec 0c             	sub    esp,0xc
c001f984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f98c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f994:	e8 9b 71 00 00       	call   c0026b34 <__udivdi3>
c001f999:	83 c4 1c             	add    esp,0x1c
c001f99c:	c3                   	ret    

c001f99d <Vm::fpuSquare(unsigned long long)>:
c001f99d:	50                   	push   eax
c001f99e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9a6:	52                   	push   edx
c001f9a7:	50                   	push   eax
c001f9a8:	52                   	push   edx
c001f9a9:	50                   	push   eax
c001f9aa:	e8 b3 ff ff ff       	call   c001f962 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9af:	83 c4 14             	add    esp,0x14
c001f9b2:	c3                   	ret    

c001f9b3 <Vm::fpuGetReg(int)>:
c001f9b3:	83 ec 0c             	sub    esp,0xc
c001f9b6:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9bb:	76 10                	jbe    c001f9cd <Vm::fpuGetReg(int)+0x1a>
c001f9bd:	83 ec 0c             	sub    esp,0xc
c001f9c0:	68 5a c9 02 c0       	push   0xc002c95a
c001f9c5:	e8 7d ac ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001f9ca:	83 c4 10             	add    esp,0x10
c001f9cd:	a0 e1 1b 03 c0       	mov    al,ds:0xc0031be1
c001f9d2:	b9 08 00 00 00       	mov    ecx,0x8
c001f9d7:	c0 e8 03             	shr    al,0x3
c001f9da:	83 e0 07             	and    eax,0x7
c001f9dd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9e1:	99                   	cdq    
c001f9e2:	f7 f9                	idiv   ecx
c001f9e4:	8b 04 d5 e4 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce41c]
c001f9eb:	8b 14 d5 e8 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce418]
c001f9f2:	83 c4 0c             	add    esp,0xc
c001f9f5:	c3                   	ret    

c001f9f6 <Vm::fpuSetReg(int, unsigned long long)>:
c001f9f6:	57                   	push   edi
c001f9f7:	56                   	push   esi
c001f9f8:	52                   	push   edx
c001f9f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa01:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa06:	76 10                	jbe    c001fa18 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa08:	83 ec 0c             	sub    esp,0xc
c001fa0b:	68 6d c9 02 c0       	push   0xc002c96d
c001fa10:	e8 32 ac ff ff       	call   c001a647 <Krnl::panic(char const*)>
c001fa15:	83 c4 10             	add    esp,0x10
c001fa18:	a0 e1 1b 03 c0       	mov    al,ds:0xc0031be1
c001fa1d:	b9 08 00 00 00       	mov    ecx,0x8
c001fa22:	c0 e8 03             	shr    al,0x3
c001fa25:	83 e0 07             	and    eax,0x7
c001fa28:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa2c:	99                   	cdq    
c001fa2d:	f7 f9                	idiv   ecx
c001fa2f:	89 34 d5 e4 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce41c],esi
c001fa36:	89 3c d5 e8 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce418],edi
c001fa3d:	58                   	pop    eax
c001fa3e:	5e                   	pop    esi
c001fa3f:	5f                   	pop    edi
c001fa40:	c3                   	ret    

c001fa41 <Vm::fpuPush(unsigned long long)>:
c001fa41:	a0 e1 1b 03 c0       	mov    al,ds:0xc0031be1
c001fa46:	c0 e8 03             	shr    al,0x3
c001fa49:	83 e0 07             	and    eax,0x7
c001fa4c:	83 c0 07             	add    eax,0x7
c001fa4f:	88 c2                	mov    dl,al
c001fa51:	83 e0 07             	and    eax,0x7
c001fa54:	83 e2 07             	and    edx,0x7
c001fa57:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa5e:	8a 15 e1 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031be1
c001fa64:	83 e2 c7             	and    edx,0xffffffc7
c001fa67:	09 ca                	or     edx,ecx
c001fa69:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa6d:	88 15 e1 1b 03 c0    	mov    BYTE PTR ds:0xc0031be1,dl
c001fa73:	89 0c c5 e8 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce418],ecx
c001fa7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa7e:	89 14 c5 e4 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce41c],edx
c001fa85:	a1 24 1c 03 c0       	mov    eax,ds:0xc0031c24
c001fa8a:	83 f8 08             	cmp    eax,0x8
c001fa8d:	75 08                	jne    c001fa97 <Vm::fpuPush(unsigned long long)+0x56>
c001fa8f:	80 0d e0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031be0,0x40
c001fa96:	c3                   	ret    
c001fa97:	40                   	inc    eax
c001fa98:	a3 24 1c 03 c0       	mov    ds:0xc0031c24,eax
c001fa9d:	c3                   	ret    

c001fa9e <Vm::fpuPop()>:
c001fa9e:	8a 0d e1 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031be1
c001faa4:	53                   	push   ebx
c001faa5:	c0 e9 03             	shr    cl,0x3
c001faa8:	8a 1d e1 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031be1
c001faae:	83 e1 07             	and    ecx,0x7
c001fab1:	83 e3 c7             	and    ebx,0xffffffc7
c001fab4:	8b 04 cd e4 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce41c]
c001fabb:	8b 14 cd e8 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce418]
c001fac2:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fac9:	83 e1 38             	and    ecx,0x38
c001facc:	09 d9                	or     ecx,ebx
c001face:	88 0d e1 1b 03 c0    	mov    BYTE PTR ds:0xc0031be1,cl
c001fad4:	8b 0d 24 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c24
c001fada:	85 c9                	test   ecx,ecx
c001fadc:	74 09                	je     c001fae7 <Vm::fpuPop()+0x49>
c001fade:	49                   	dec    ecx
c001fadf:	89 0d 24 1c 03 c0    	mov    DWORD PTR ds:0xc0031c24,ecx
c001fae5:	eb 07                	jmp    c001faee <Vm::fpuPop()+0x50>
c001fae7:	80 0d e0 1b 03 c0 40 	or     BYTE PTR ds:0xc0031be0,0x40
c001faee:	5b                   	pop    ebx
c001faef:	c3                   	ret    

c001faf0 <Vm::x87Handler(regs*)>:
c001faf0:	55                   	push   ebp
c001faf1:	57                   	push   edi
c001faf2:	56                   	push   esi
c001faf3:	53                   	push   ebx
c001faf4:	83 ec 1c             	sub    esp,0x1c
c001faf7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fafb:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb00:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb03:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb0b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb0f:	50                   	push   eax
c001fb10:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb14:	50                   	push   eax
c001fb15:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb19:	50                   	push   eax
c001fb1a:	53                   	push   ebx
c001fb1b:	e8 ee a1 ff ff       	call   c0019d0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb20:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb23:	83 c4 10             	add    esp,0x10
c001fb26:	89 c6                	mov    esi,eax
c001fb28:	80 fa d9             	cmp    dl,0xd9
c001fb2b:	0f 85 52 01 00 00    	jne    c001fc83 <Vm::x87Handler(regs*)+0x193>
c001fb31:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb35:	8d 50 20             	lea    edx,[eax+0x20]
c001fb38:	80 fa 0e             	cmp    dl,0xe
c001fb3b:	0f 87 86 00 00 00    	ja     c001fbc7 <Vm::x87Handler(regs*)+0xd7>
c001fb41:	0f b6 d2             	movzx  edx,dl
c001fb44:	ff 24 95 80 c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3680]
c001fb4b:	e8 e7 fc ff ff       	call   c001f837 <Vm::fpuGet0()>
c001fb50:	eb 05                	jmp    c001fb57 <Vm::x87Handler(regs*)+0x67>
c001fb52:	e8 e5 fc ff ff       	call   c001f83c <Vm::fpuGet1()>
c001fb57:	57                   	push   edi
c001fb58:	57                   	push   edi
c001fb59:	52                   	push   edx
c001fb5a:	50                   	push   eax
c001fb5b:	e8 e1 fe ff ff       	call   c001fa41 <Vm::fpuPush(unsigned long long)>
c001fb60:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb64:	83 c4 10             	add    esp,0x10
c001fb67:	b0 01                	mov    al,0x1
c001fb69:	e9 e3 09 00 00       	jmp    c0020551 <Vm::x87Handler(regs*)+0xa61>
c001fb6e:	83 ec 0c             	sub    esp,0xc
c001fb71:	6a 00                	push   0x0
c001fb73:	e8 3b fe ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fb78:	59                   	pop    ecx
c001fb79:	5e                   	pop    esi
c001fb7a:	52                   	push   edx
c001fb7b:	50                   	push   eax
c001fb7c:	e8 c2 fd ff ff       	call   c001f943 <Vm::fpuChs(unsigned long long)>
c001fb81:	eb 13                	jmp    c001fb96 <Vm::x87Handler(regs*)+0xa6>
c001fb83:	83 ec 0c             	sub    esp,0xc
c001fb86:	6a 00                	push   0x0
c001fb88:	e8 26 fe ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fb8d:	5f                   	pop    edi
c001fb8e:	5d                   	pop    ebp
c001fb8f:	52                   	push   edx
c001fb90:	50                   	push   eax
c001fb91:	e8 a4 fd ff ff       	call   c001f93a <Vm::fpuAbs(unsigned long long)>
c001fb96:	83 c4 0c             	add    esp,0xc
c001fb99:	52                   	push   edx
c001fb9a:	50                   	push   eax
c001fb9b:	6a 00                	push   0x0
c001fb9d:	e8 54 fe ff ff       	call   c001f9f6 <Vm::fpuSetReg(int, unsigned long long)>
c001fba2:	eb bc                	jmp    c001fb60 <Vm::x87Handler(regs*)+0x70>
c001fba4:	e8 d3 fc ff ff       	call   c001f87c <Vm::fpuGetLog210()>
c001fba9:	eb ac                	jmp    c001fb57 <Vm::x87Handler(regs*)+0x67>
c001fbab:	e8 9c fc ff ff       	call   c001f84c <Vm::fpuGetLog2E()>
c001fbb0:	eb a5                	jmp    c001fb57 <Vm::x87Handler(regs*)+0x67>
c001fbb2:	e8 8d fc ff ff       	call   c001f844 <Vm::fpuGetPi()>
c001fbb7:	eb 9e                	jmp    c001fb57 <Vm::x87Handler(regs*)+0x67>
c001fbb9:	e8 d6 fc ff ff       	call   c001f894 <Vm::fpuGetLog102()>
c001fbbe:	eb 97                	jmp    c001fb57 <Vm::x87Handler(regs*)+0x67>
c001fbc0:	e8 9f fc ff ff       	call   c001f864 <Vm::fpuGetLogE2()>
c001fbc5:	eb 90                	jmp    c001fb57 <Vm::x87Handler(regs*)+0x67>
c001fbc7:	8d 50 40             	lea    edx,[eax+0x40]
c001fbca:	80 fa 07             	cmp    dl,0x7
c001fbcd:	77 15                	ja     c001fbe4 <Vm::x87Handler(regs*)+0xf4>
c001fbcf:	83 ec 0c             	sub    esp,0xc
c001fbd2:	2d c0 00 00 00       	sub    eax,0xc0
c001fbd7:	50                   	push   eax
c001fbd8:	e8 d6 fd ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fbdd:	59                   	pop    ecx
c001fbde:	5e                   	pop    esi
c001fbdf:	e9 75 ff ff ff       	jmp    c001fb59 <Vm::x87Handler(regs*)+0x69>
c001fbe4:	8d 50 38             	lea    edx,[eax+0x38]
c001fbe7:	80 fa 07             	cmp    dl,0x7
c001fbea:	77 3c                	ja     c001fc28 <Vm::x87Handler(regs*)+0x138>
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	2d c8 00 00 00       	sub    eax,0xc8
c001fbf4:	50                   	push   eax
c001fbf5:	e8 b9 fd ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fbfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc01:	89 c6                	mov    esi,eax
c001fc03:	89 d7                	mov    edi,edx
c001fc05:	e8 a9 fd ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fc0a:	83 c4 0c             	add    esp,0xc
c001fc0d:	52                   	push   edx
c001fc0e:	50                   	push   eax
c001fc0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc13:	2d c8 00 00 00       	sub    eax,0xc8
c001fc18:	50                   	push   eax
c001fc19:	e8 d8 fd ff ff       	call   c001f9f6 <Vm::fpuSetReg(int, unsigned long long)>
c001fc1e:	83 c4 0c             	add    esp,0xc
c001fc21:	57                   	push   edi
c001fc22:	56                   	push   esi
c001fc23:	e9 73 ff ff ff       	jmp    c001fb9b <Vm::x87Handler(regs*)+0xab>
c001fc28:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc2c:	84 d2                	test   dl,dl
c001fc2e:	75 0f                	jne    c001fc3f <Vm::x87Handler(regs*)+0x14f>
c001fc30:	83 ec 0c             	sub    esp,0xc
c001fc33:	ff 36                	push   DWORD PTR [esi]
c001fc35:	e8 c8 fa ff ff       	call   c001f702 <Vm::fpu32ToInternal(unsigned int)>
c001fc3a:	e9 bf 00 00 00       	jmp    c001fcfe <Vm::x87Handler(regs*)+0x20e>
c001fc3f:	80 fa 03             	cmp    dl,0x3
c001fc42:	75 13                	jne    c001fc57 <Vm::x87Handler(regs*)+0x167>
c001fc44:	e8 55 fe ff ff       	call   c001fa9e <Vm::fpuPop()>
c001fc49:	55                   	push   ebp
c001fc4a:	55                   	push   ebp
c001fc4b:	52                   	push   edx
c001fc4c:	50                   	push   eax
c001fc4d:	e8 4c fa ff ff       	call   c001f69e <Vm::fpuInternalTo32(unsigned long long)>
c001fc52:	e9 88 00 00 00       	jmp    c001fcdf <Vm::x87Handler(regs*)+0x1ef>
c001fc57:	80 fa 05             	cmp    dl,0x5
c001fc5a:	75 0e                	jne    c001fc6a <Vm::x87Handler(regs*)+0x17a>
c001fc5c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc5f:	66 a3 e2 1b 03 c0    	mov    ds:0xc0031be2,ax
c001fc65:	e9 df 00 00 00       	jmp    c001fd49 <Vm::x87Handler(regs*)+0x259>
c001fc6a:	31 c0                	xor    eax,eax
c001fc6c:	80 fa 07             	cmp    dl,0x7
c001fc6f:	0f 85 dc 08 00 00    	jne    c0020551 <Vm::x87Handler(regs*)+0xa61>
c001fc75:	66 a1 e2 1b 03 c0    	mov    ax,ds:0xc0031be2
c001fc7b:	66 89 06             	mov    WORD PTR [esi],ax
c001fc7e:	e9 c6 00 00 00       	jmp    c001fd49 <Vm::x87Handler(regs*)+0x259>
c001fc83:	80 fa d8             	cmp    dl,0xd8
c001fc86:	0f 84 c9 00 00 00    	je     c001fd55 <Vm::x87Handler(regs*)+0x265>
c001fc8c:	80 fa dc             	cmp    dl,0xdc
c001fc8f:	0f 84 0d 02 00 00    	je     c001fea2 <Vm::x87Handler(regs*)+0x3b2>
c001fc95:	80 fa de             	cmp    dl,0xde
c001fc98:	0f 84 cd 02 00 00    	je     c001ff6b <Vm::x87Handler(regs*)+0x47b>
c001fc9e:	80 fa dd             	cmp    dl,0xdd
c001fca1:	0f 84 5f 04 00 00    	je     c0020106 <Vm::x87Handler(regs*)+0x616>
c001fca7:	80 fa da             	cmp    dl,0xda
c001fcaa:	0f 84 24 05 00 00    	je     c00201d4 <Vm::x87Handler(regs*)+0x6e4>
c001fcb0:	80 fa df             	cmp    dl,0xdf
c001fcb3:	0f 84 68 05 00 00    	je     c0020221 <Vm::x87Handler(regs*)+0x731>
c001fcb9:	31 c0                	xor    eax,eax
c001fcbb:	80 fa db             	cmp    dl,0xdb
c001fcbe:	0f 85 8d 08 00 00    	jne    c0020551 <Vm::x87Handler(regs*)+0xa61>
c001fcc4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcc8:	80 fa 03             	cmp    dl,0x3
c001fccb:	0f 85 70 06 00 00    	jne    c0020341 <Vm::x87Handler(regs*)+0x851>
c001fcd1:	e8 c8 fd ff ff       	call   c001fa9e <Vm::fpuPop()>
c001fcd6:	55                   	push   ebp
c001fcd7:	55                   	push   ebp
c001fcd8:	52                   	push   edx
c001fcd9:	50                   	push   eax
c001fcda:	e8 71 fa ff ff       	call   c001f750 <Vm::fpuFloatToLong(unsigned long long)>
c001fcdf:	83 c4 10             	add    esp,0x10
c001fce2:	89 06                	mov    DWORD PTR [esi],eax
c001fce4:	eb 63                	jmp    c001fd49 <Vm::x87Handler(regs*)+0x259>
c001fce6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcea:	84 d2                	test   dl,dl
c001fcec:	0f 85 e6 05 00 00    	jne    c00202d8 <Vm::x87Handler(regs*)+0x7e8>
c001fcf2:	57                   	push   edi
c001fcf3:	57                   	push   edi
c001fcf4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcf7:	ff 36                	push   DWORD PTR [esi]
c001fcf9:	e8 49 fa ff ff       	call   c001f747 <Vm::fpu64ToInternal(unsigned long long)>
c001fcfe:	5e                   	pop    esi
c001fcff:	5f                   	pop    edi
c001fd00:	52                   	push   edx
c001fd01:	50                   	push   eax
c001fd02:	e8 3a fd ff ff       	call   c001fa41 <Vm::fpuPush(unsigned long long)>
c001fd07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd0b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd0e:	e9 51 fe ff ff       	jmp    c001fb64 <Vm::x87Handler(regs*)+0x74>
c001fd13:	80 fa 03             	cmp    dl,0x3
c001fd16:	0f 85 d7 06 00 00    	jne    c00203f3 <Vm::x87Handler(regs*)+0x903>
c001fd1c:	57                   	push   edi
c001fd1d:	57                   	push   edi
c001fd1e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd21:	ff 36                	push   DWORD PTR [esi]
c001fd23:	e8 1f fa ff ff       	call   c001f747 <Vm::fpu64ToInternal(unsigned long long)>
c001fd28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd2f:	89 c6                	mov    esi,eax
c001fd31:	89 d7                	mov    edi,edx
c001fd33:	e8 7b fc ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fd38:	57                   	push   edi
c001fd39:	56                   	push   esi
c001fd3a:	52                   	push   edx
c001fd3b:	50                   	push   eax
c001fd3c:	e8 95 fb ff ff       	call   c001f8d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd41:	83 c4 20             	add    esp,0x20
c001fd44:	e8 55 fd ff ff       	call   c001fa9e <Vm::fpuPop()>
c001fd49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd4d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd50:	e9 12 fe ff ff       	jmp    c001fb67 <Vm::x87Handler(regs*)+0x77>
c001fd55:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd59:	8d 50 40             	lea    edx,[eax+0x40]
c001fd5c:	80 fa 07             	cmp    dl,0x7
c001fd5f:	77 29                	ja     c001fd8a <Vm::x87Handler(regs*)+0x29a>
c001fd61:	83 ec 0c             	sub    esp,0xc
c001fd64:	2d c0 00 00 00       	sub    eax,0xc0
c001fd69:	50                   	push   eax
c001fd6a:	e8 44 fc ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fd6f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd76:	89 c6                	mov    esi,eax
c001fd78:	89 d7                	mov    edi,edx
c001fd7a:	e8 34 fc ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fd7f:	57                   	push   edi
c001fd80:	56                   	push   esi
c001fd81:	52                   	push   edx
c001fd82:	50                   	push   eax
c001fd83:	e8 a1 fb ff ff       	call   c001f929 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd88:	eb 2f                	jmp    c001fdb9 <Vm::x87Handler(regs*)+0x2c9>
c001fd8a:	8d 50 38             	lea    edx,[eax+0x38]
c001fd8d:	80 fa 07             	cmp    dl,0x7
c001fd90:	77 2f                	ja     c001fdc1 <Vm::x87Handler(regs*)+0x2d1>
c001fd92:	83 ec 0c             	sub    esp,0xc
c001fd95:	2d c8 00 00 00       	sub    eax,0xc8
c001fd9a:	50                   	push   eax
c001fd9b:	e8 13 fc ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fda0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda7:	89 c6                	mov    esi,eax
c001fda9:	89 d7                	mov    edi,edx
c001fdab:	e8 03 fc ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fdb0:	57                   	push   edi
c001fdb1:	56                   	push   esi
c001fdb2:	52                   	push   edx
c001fdb3:	50                   	push   eax
c001fdb4:	e8 a9 fb ff ff       	call   c001f962 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdb9:	83 c4 1c             	add    esp,0x1c
c001fdbc:	e9 d8 fd ff ff       	jmp    c001fb99 <Vm::x87Handler(regs*)+0xa9>
c001fdc1:	8d 50 30             	lea    edx,[eax+0x30]
c001fdc4:	80 fa 07             	cmp    dl,0x7
c001fdc7:	77 0d                	ja     c001fdd6 <Vm::x87Handler(regs*)+0x2e6>
c001fdc9:	83 ec 0c             	sub    esp,0xc
c001fdcc:	2d d0 00 00 00       	sub    eax,0xd0
c001fdd1:	e9 99 03 00 00       	jmp    c002016f <Vm::x87Handler(regs*)+0x67f>
c001fdd6:	8d 50 28             	lea    edx,[eax+0x28]
c001fdd9:	80 fa 07             	cmp    dl,0x7
c001fddc:	77 0d                	ja     c001fdeb <Vm::x87Handler(regs*)+0x2fb>
c001fdde:	83 ec 0c             	sub    esp,0xc
c001fde1:	2d d8 00 00 00       	sub    eax,0xd8
c001fde6:	e9 c0 03 00 00       	jmp    c00201ab <Vm::x87Handler(regs*)+0x6bb>
c001fdeb:	8d 50 20             	lea    edx,[eax+0x20]
c001fdee:	80 fa 07             	cmp    dl,0x7
c001fdf1:	77 1b                	ja     c001fe0e <Vm::x87Handler(regs*)+0x31e>
c001fdf3:	83 ec 0c             	sub    esp,0xc
c001fdf6:	2d e0 00 00 00       	sub    eax,0xe0
c001fdfb:	50                   	push   eax
c001fdfc:	e8 b2 fb ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fe01:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe08:	89 c6                	mov    esi,eax
c001fe0a:	89 d7                	mov    edi,edx
c001fe0c:	eb 22                	jmp    c001fe30 <Vm::x87Handler(regs*)+0x340>
c001fe0e:	8d 50 18             	lea    edx,[eax+0x18]
c001fe11:	80 fa 07             	cmp    dl,0x7
c001fe14:	77 2d                	ja     c001fe43 <Vm::x87Handler(regs*)+0x353>
c001fe16:	83 ec 0c             	sub    esp,0xc
c001fe19:	6a 00                	push   0x0
c001fe1b:	e8 93 fb ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fe20:	89 c6                	mov    esi,eax
c001fe22:	89 d7                	mov    edi,edx
c001fe24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe28:	2d e8 00 00 00       	sub    eax,0xe8
c001fe2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe30:	e8 7e fb ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fe35:	57                   	push   edi
c001fe36:	56                   	push   esi
c001fe37:	52                   	push   edx
c001fe38:	50                   	push   eax
c001fe39:	e8 15 fb ff ff       	call   c001f953 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe3e:	e9 76 ff ff ff       	jmp    c001fdb9 <Vm::x87Handler(regs*)+0x2c9>
c001fe43:	8d 50 10             	lea    edx,[eax+0x10]
c001fe46:	80 fa 07             	cmp    dl,0x7
c001fe49:	77 1b                	ja     c001fe66 <Vm::x87Handler(regs*)+0x376>
c001fe4b:	83 ec 0c             	sub    esp,0xc
c001fe4e:	2d f0 00 00 00       	sub    eax,0xf0
c001fe53:	50                   	push   eax
c001fe54:	e8 5a fb ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fe59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe60:	89 c6                	mov    esi,eax
c001fe62:	89 d7                	mov    edi,edx
c001fe64:	eb 22                	jmp    c001fe88 <Vm::x87Handler(regs*)+0x398>
c001fe66:	3c f7                	cmp    al,0xf7
c001fe68:	0f 86 d1 03 00 00    	jbe    c002023f <Vm::x87Handler(regs*)+0x74f>
c001fe6e:	83 ec 0c             	sub    esp,0xc
c001fe71:	6a 00                	push   0x0
c001fe73:	e8 3b fb ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fe78:	89 c6                	mov    esi,eax
c001fe7a:	89 d7                	mov    edi,edx
c001fe7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe80:	2d f8 00 00 00       	sub    eax,0xf8
c001fe85:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe88:	e8 26 fb ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fe8d:	57                   	push   edi
c001fe8e:	56                   	push   esi
c001fe8f:	52                   	push   edx
c001fe90:	50                   	push   eax
c001fe91:	e8 eb fa ff ff       	call   c001f981 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe96:	83 c4 1c             	add    esp,0x1c
c001fe99:	52                   	push   edx
c001fe9a:	50                   	push   eax
c001fe9b:	6a 00                	push   0x0
c001fe9d:	e9 51 02 00 00       	jmp    c00200f3 <Vm::x87Handler(regs*)+0x603>
c001fea2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea6:	8d 50 40             	lea    edx,[eax+0x40]
c001fea9:	80 fa 07             	cmp    dl,0x7
c001feac:	77 37                	ja     c001fee5 <Vm::x87Handler(regs*)+0x3f5>
c001feae:	83 ec 0c             	sub    esp,0xc
c001feb1:	2d c0 00 00 00       	sub    eax,0xc0
c001feb6:	50                   	push   eax
c001feb7:	e8 f7 fa ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001febc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec3:	89 c6                	mov    esi,eax
c001fec5:	89 d7                	mov    edi,edx
c001fec7:	e8 e7 fa ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fecc:	57                   	push   edi
c001fecd:	56                   	push   esi
c001fece:	52                   	push   edx
c001fecf:	50                   	push   eax
c001fed0:	e8 54 fa ff ff       	call   c001f929 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fed5:	83 c4 1c             	add    esp,0x1c
c001fed8:	52                   	push   edx
c001fed9:	50                   	push   eax
c001feda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fede:	2d c0 00 00 00       	sub    eax,0xc0
c001fee3:	eb 3d                	jmp    c001ff22 <Vm::x87Handler(regs*)+0x432>
c001fee5:	8d 50 38             	lea    edx,[eax+0x38]
c001fee8:	80 fa 07             	cmp    dl,0x7
c001feeb:	77 3b                	ja     c001ff28 <Vm::x87Handler(regs*)+0x438>
c001feed:	83 ec 0c             	sub    esp,0xc
c001fef0:	2d c8 00 00 00       	sub    eax,0xc8
c001fef5:	50                   	push   eax
c001fef6:	e8 b8 fa ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001fefb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff02:	89 c6                	mov    esi,eax
c001ff04:	89 d7                	mov    edi,edx
c001ff06:	e8 a8 fa ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001ff0b:	57                   	push   edi
c001ff0c:	56                   	push   esi
c001ff0d:	52                   	push   edx
c001ff0e:	50                   	push   eax
c001ff0f:	e8 4e fa ff ff       	call   c001f962 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff14:	83 c4 1c             	add    esp,0x1c
c001ff17:	52                   	push   edx
c001ff18:	50                   	push   eax
c001ff19:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff1d:	2d c8 00 00 00       	sub    eax,0xc8
c001ff22:	50                   	push   eax
c001ff23:	e9 75 fc ff ff       	jmp    c001fb9d <Vm::x87Handler(regs*)+0xad>
c001ff28:	83 c0 18             	add    eax,0x18
c001ff2b:	3c 07                	cmp    al,0x7
c001ff2d:	0f 87 3b 04 00 00    	ja     c002036e <Vm::x87Handler(regs*)+0x87e>
c001ff33:	83 ec 0c             	sub    esp,0xc
c001ff36:	6a 00                	push   0x0
c001ff38:	e8 76 fa ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001ff3d:	89 c6                	mov    esi,eax
c001ff3f:	89 d7                	mov    edi,edx
c001ff41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff45:	2d e8 00 00 00       	sub    eax,0xe8
c001ff4a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff4d:	e8 61 fa ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001ff52:	57                   	push   edi
c001ff53:	56                   	push   esi
c001ff54:	52                   	push   edx
c001ff55:	50                   	push   eax
c001ff56:	e8 f8 f9 ff ff       	call   c001f953 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff5b:	83 c4 1c             	add    esp,0x1c
c001ff5e:	52                   	push   edx
c001ff5f:	50                   	push   eax
c001ff60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff64:	2d e8 00 00 00       	sub    eax,0xe8
c001ff69:	eb b7                	jmp    c001ff22 <Vm::x87Handler(regs*)+0x432>
c001ff6b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6f:	8d 50 40             	lea    edx,[eax+0x40]
c001ff72:	80 fa 07             	cmp    dl,0x7
c001ff75:	77 3a                	ja     c001ffb1 <Vm::x87Handler(regs*)+0x4c1>
c001ff77:	83 ec 0c             	sub    esp,0xc
c001ff7a:	2d c0 00 00 00       	sub    eax,0xc0
c001ff7f:	50                   	push   eax
c001ff80:	e8 2e fa ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001ff85:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff8c:	89 c6                	mov    esi,eax
c001ff8e:	89 d7                	mov    edi,edx
c001ff90:	e8 1e fa ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001ff95:	57                   	push   edi
c001ff96:	56                   	push   esi
c001ff97:	52                   	push   edx
c001ff98:	50                   	push   eax
c001ff99:	e8 8b f9 ff ff       	call   c001f929 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff9e:	83 c4 1c             	add    esp,0x1c
c001ffa1:	52                   	push   edx
c001ffa2:	50                   	push   eax
c001ffa3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa7:	2d c0 00 00 00       	sub    eax,0xc0
c001ffac:	e9 9e 01 00 00       	jmp    c002014f <Vm::x87Handler(regs*)+0x65f>
c001ffb1:	8d 50 20             	lea    edx,[eax+0x20]
c001ffb4:	80 fa 07             	cmp    dl,0x7
c001ffb7:	77 3a                	ja     c001fff3 <Vm::x87Handler(regs*)+0x503>
c001ffb9:	83 ec 0c             	sub    esp,0xc
c001ffbc:	2d e0 00 00 00       	sub    eax,0xe0
c001ffc1:	50                   	push   eax
c001ffc2:	e8 ec f9 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001ffc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffce:	89 c6                	mov    esi,eax
c001ffd0:	89 d7                	mov    edi,edx
c001ffd2:	e8 dc f9 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c001ffd7:	57                   	push   edi
c001ffd8:	56                   	push   esi
c001ffd9:	52                   	push   edx
c001ffda:	50                   	push   eax
c001ffdb:	e8 73 f9 ff ff       	call   c001f953 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffe0:	83 c4 1c             	add    esp,0x1c
c001ffe3:	52                   	push   edx
c001ffe4:	50                   	push   eax
c001ffe5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe9:	2d e0 00 00 00       	sub    eax,0xe0
c001ffee:	e9 5c 01 00 00       	jmp    c002014f <Vm::x87Handler(regs*)+0x65f>
c001fff3:	8d 50 18             	lea    edx,[eax+0x18]
c001fff6:	80 fa 07             	cmp    dl,0x7
c001fff9:	77 3b                	ja     c0020036 <Vm::x87Handler(regs*)+0x546>
c001fffb:	83 ec 0c             	sub    esp,0xc
c001fffe:	6a 00                	push   0x0
c0020000:	e8 ae f9 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020005:	89 c6                	mov    esi,eax
c0020007:	89 d7                	mov    edi,edx
c0020009:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000d:	2d e8 00 00 00       	sub    eax,0xe8
c0020012:	89 04 24             	mov    DWORD PTR [esp],eax
c0020015:	e8 99 f9 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c002001a:	57                   	push   edi
c002001b:	56                   	push   esi
c002001c:	52                   	push   edx
c002001d:	50                   	push   eax
c002001e:	e8 30 f9 ff ff       	call   c001f953 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020023:	83 c4 1c             	add    esp,0x1c
c0020026:	52                   	push   edx
c0020027:	50                   	push   eax
c0020028:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002002c:	2d e8 00 00 00       	sub    eax,0xe8
c0020031:	e9 19 01 00 00       	jmp    c002014f <Vm::x87Handler(regs*)+0x65f>
c0020036:	8d 50 38             	lea    edx,[eax+0x38]
c0020039:	80 fa 07             	cmp    dl,0x7
c002003c:	77 37                	ja     c0020075 <Vm::x87Handler(regs*)+0x585>
c002003e:	83 ec 0c             	sub    esp,0xc
c0020041:	2d c8 00 00 00       	sub    eax,0xc8
c0020046:	50                   	push   eax
c0020047:	e8 67 f9 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c002004c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020053:	89 c6                	mov    esi,eax
c0020055:	89 d7                	mov    edi,edx
c0020057:	e8 57 f9 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c002005c:	57                   	push   edi
c002005d:	56                   	push   esi
c002005e:	52                   	push   edx
c002005f:	50                   	push   eax
c0020060:	e8 fd f8 ff ff       	call   c001f962 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020065:	83 c4 1c             	add    esp,0x1c
c0020068:	52                   	push   edx
c0020069:	50                   	push   eax
c002006a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006e:	2d c8 00 00 00       	sub    eax,0xc8
c0020073:	eb 7d                	jmp    c00200f2 <Vm::x87Handler(regs*)+0x602>
c0020075:	3c f7                	cmp    al,0xf7
c0020077:	76 38                	jbe    c00200b1 <Vm::x87Handler(regs*)+0x5c1>
c0020079:	83 ec 0c             	sub    esp,0xc
c002007c:	6a 00                	push   0x0
c002007e:	e8 30 f9 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020083:	89 c6                	mov    esi,eax
c0020085:	89 d7                	mov    edi,edx
c0020087:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002008b:	2d f8 00 00 00       	sub    eax,0xf8
c0020090:	89 04 24             	mov    DWORD PTR [esp],eax
c0020093:	e8 1b f9 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020098:	57                   	push   edi
c0020099:	56                   	push   esi
c002009a:	52                   	push   edx
c002009b:	50                   	push   eax
c002009c:	e8 e0 f8 ff ff       	call   c001f981 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200a1:	83 c4 1c             	add    esp,0x1c
c00200a4:	52                   	push   edx
c00200a5:	50                   	push   eax
c00200a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200aa:	2d f8 00 00 00       	sub    eax,0xf8
c00200af:	eb 41                	jmp    c00200f2 <Vm::x87Handler(regs*)+0x602>
c00200b1:	8d 50 10             	lea    edx,[eax+0x10]
c00200b4:	80 fa 07             	cmp    dl,0x7
c00200b7:	0f 87 5a 01 00 00    	ja     c0020217 <Vm::x87Handler(regs*)+0x727>
c00200bd:	83 ec 0c             	sub    esp,0xc
c00200c0:	2d f0 00 00 00       	sub    eax,0xf0
c00200c5:	50                   	push   eax
c00200c6:	e8 e8 f8 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00200cb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200d2:	89 c6                	mov    esi,eax
c00200d4:	89 d7                	mov    edi,edx
c00200d6:	e8 d8 f8 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00200db:	57                   	push   edi
c00200dc:	56                   	push   esi
c00200dd:	52                   	push   edx
c00200de:	50                   	push   eax
c00200df:	e8 9d f8 ff ff       	call   c001f981 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200e4:	83 c4 1c             	add    esp,0x1c
c00200e7:	52                   	push   edx
c00200e8:	50                   	push   eax
c00200e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ed:	2d f0 00 00 00       	sub    eax,0xf0
c00200f2:	50                   	push   eax
c00200f3:	e8 fe f8 ff ff       	call   c001f9f6 <Vm::fpuSetReg(int, unsigned long long)>
c00200f8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200fc:	e8 9d f9 ff ff       	call   c001fa9e <Vm::fpuPop()>
c0020101:	e9 5e fa ff ff       	jmp    c001fb64 <Vm::x87Handler(regs*)+0x74>
c0020106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002010a:	8d 50 30             	lea    edx,[eax+0x30]
c002010d:	80 fa 07             	cmp    dl,0x7
c0020110:	77 1d                	ja     c002012f <Vm::x87Handler(regs*)+0x63f>
c0020112:	83 ec 0c             	sub    esp,0xc
c0020115:	6a 00                	push   0x0
c0020117:	e8 97 f8 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c002011c:	83 c4 0c             	add    esp,0xc
c002011f:	52                   	push   edx
c0020120:	50                   	push   eax
c0020121:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020125:	2d d0 00 00 00       	sub    eax,0xd0
c002012a:	e9 f3 fd ff ff       	jmp    c001ff22 <Vm::x87Handler(regs*)+0x432>
c002012f:	8d 50 28             	lea    edx,[eax+0x28]
c0020132:	80 fa 07             	cmp    dl,0x7
c0020135:	77 28                	ja     c002015f <Vm::x87Handler(regs*)+0x66f>
c0020137:	83 ec 0c             	sub    esp,0xc
c002013a:	6a 00                	push   0x0
c002013c:	e8 72 f8 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020141:	83 c4 0c             	add    esp,0xc
c0020144:	52                   	push   edx
c0020145:	50                   	push   eax
c0020146:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002014a:	2d d8 00 00 00       	sub    eax,0xd8
c002014f:	50                   	push   eax
c0020150:	e8 a1 f8 ff ff       	call   c001f9f6 <Vm::fpuSetReg(int, unsigned long long)>
c0020155:	e8 44 f9 ff ff       	call   c001fa9e <Vm::fpuPop()>
c002015a:	e9 01 fa ff ff       	jmp    c001fb60 <Vm::x87Handler(regs*)+0x70>
c002015f:	8d 50 20             	lea    edx,[eax+0x20]
c0020162:	80 fa 07             	cmp    dl,0x7
c0020165:	77 30                	ja     c0020197 <Vm::x87Handler(regs*)+0x6a7>
c0020167:	83 ec 0c             	sub    esp,0xc
c002016a:	2d e0 00 00 00       	sub    eax,0xe0
c002016f:	50                   	push   eax
c0020170:	e8 3e f8 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020175:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002017c:	89 c6                	mov    esi,eax
c002017e:	89 d7                	mov    edi,edx
c0020180:	e8 2e f8 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020185:	57                   	push   edi
c0020186:	56                   	push   esi
c0020187:	52                   	push   edx
c0020188:	50                   	push   eax
c0020189:	e8 48 f7 ff ff       	call   c001f8d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002018e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020192:	e9 54 02 00 00       	jmp    c00203eb <Vm::x87Handler(regs*)+0x8fb>
c0020197:	8d 50 18             	lea    edx,[eax+0x18]
c002019a:	80 fa 07             	cmp    dl,0x7
c002019d:	0f 87 43 fb ff ff    	ja     c001fce6 <Vm::x87Handler(regs*)+0x1f6>
c00201a3:	83 ec 0c             	sub    esp,0xc
c00201a6:	2d e8 00 00 00       	sub    eax,0xe8
c00201ab:	50                   	push   eax
c00201ac:	e8 02 f8 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00201b1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b8:	89 c6                	mov    esi,eax
c00201ba:	89 d7                	mov    edi,edx
c00201bc:	e8 f2 f7 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00201c1:	57                   	push   edi
c00201c2:	56                   	push   esi
c00201c3:	52                   	push   edx
c00201c4:	50                   	push   eax
c00201c5:	e8 0c f7 ff ff       	call   c001f8d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ca:	83 c4 20             	add    esp,0x20
c00201cd:	e8 cc f8 ff ff       	call   c001fa9e <Vm::fpuPop()>
c00201d2:	eb 62                	jmp    c0020236 <Vm::x87Handler(regs*)+0x746>
c00201d4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00201d8:	0f 85 0f 01 00 00    	jne    c00202ed <Vm::x87Handler(regs*)+0x7fd>
c00201de:	83 ec 0c             	sub    esp,0xc
c00201e1:	6a 01                	push   0x1
c00201e3:	e8 cb f7 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00201e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201ef:	89 c6                	mov    esi,eax
c00201f1:	89 d7                	mov    edi,edx
c00201f3:	e8 bb f7 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00201f8:	57                   	push   edi
c00201f9:	56                   	push   esi
c00201fa:	52                   	push   edx
c00201fb:	50                   	push   eax
c00201fc:	e8 d5 f6 ff ff       	call   c001f8d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020201:	83 c4 20             	add    esp,0x20
c0020204:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020208:	e8 91 f8 ff ff       	call   c001fa9e <Vm::fpuPop()>
c002020d:	e8 8c f8 ff ff       	call   c001fa9e <Vm::fpuPop()>
c0020212:	e9 50 f9 ff ff       	jmp    c001fb67 <Vm::x87Handler(regs*)+0x77>
c0020217:	3c d9                	cmp    al,0xd9
c0020219:	0f 85 b5 02 00 00    	jne    c00204d4 <Vm::x87Handler(regs*)+0x9e4>
c002021f:	eb bd                	jmp    c00201de <Vm::x87Handler(regs*)+0x6ee>
c0020221:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020225:	0f 85 ea 02 00 00    	jne    c0020515 <Vm::x87Handler(regs*)+0xa25>
c002022b:	0f b7 05 e0 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031be0
c0020232:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020236:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002023a:	e9 28 f9 ff ff       	jmp    c001fb67 <Vm::x87Handler(regs*)+0x77>
c002023f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020243:	84 d2                	test   dl,dl
c0020245:	75 0f                	jne    c0020256 <Vm::x87Handler(regs*)+0x766>
c0020247:	83 ec 0c             	sub    esp,0xc
c002024a:	ff 36                	push   DWORD PTR [esi]
c002024c:	e8 b1 f4 ff ff       	call   c001f702 <Vm::fpu32ToInternal(unsigned int)>
c0020251:	e9 2c 01 00 00       	jmp    c0020382 <Vm::x87Handler(regs*)+0x892>
c0020256:	80 fa 01             	cmp    dl,0x1
c0020259:	75 0f                	jne    c002026a <Vm::x87Handler(regs*)+0x77a>
c002025b:	83 ec 0c             	sub    esp,0xc
c002025e:	ff 36                	push   DWORD PTR [esi]
c0020260:	e8 9d f4 ff ff       	call   c001f702 <Vm::fpu32ToInternal(unsigned int)>
c0020265:	e9 81 02 00 00       	jmp    c00204eb <Vm::x87Handler(regs*)+0x9fb>
c002026a:	80 fa 04             	cmp    dl,0x4
c002026d:	75 0f                	jne    c002027e <Vm::x87Handler(regs*)+0x78e>
c002026f:	83 ec 0c             	sub    esp,0xc
c0020272:	ff 36                	push   DWORD PTR [esi]
c0020274:	e8 89 f4 ff ff       	call   c001f702 <Vm::fpu32ToInternal(unsigned int)>
c0020279:	e9 86 01 00 00       	jmp    c0020404 <Vm::x87Handler(regs*)+0x914>
c002027e:	80 fa 05             	cmp    dl,0x5
c0020281:	75 1b                	jne    c002029e <Vm::x87Handler(regs*)+0x7ae>
c0020283:	83 ec 0c             	sub    esp,0xc
c0020286:	6a 00                	push   0x0
c0020288:	e8 26 f7 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c002028d:	89 c7                	mov    edi,eax
c002028f:	89 d5                	mov    ebp,edx
c0020291:	58                   	pop    eax
c0020292:	ff 36                	push   DWORD PTR [esi]
c0020294:	e8 69 f4 ff ff       	call   c001f702 <Vm::fpu32ToInternal(unsigned int)>
c0020299:	e9 a3 01 00 00       	jmp    c0020441 <Vm::x87Handler(regs*)+0x951>
c002029e:	80 fa 06             	cmp    dl,0x6
c00202a1:	75 0f                	jne    c00202b2 <Vm::x87Handler(regs*)+0x7c2>
c00202a3:	83 ec 0c             	sub    esp,0xc
c00202a6:	ff 36                	push   DWORD PTR [esi]
c00202a8:	e8 55 f4 ff ff       	call   c001f702 <Vm::fpu32ToInternal(unsigned int)>
c00202ad:	e9 ae 01 00 00       	jmp    c0020460 <Vm::x87Handler(regs*)+0x970>
c00202b2:	31 c0                	xor    eax,eax
c00202b4:	80 fa 07             	cmp    dl,0x7
c00202b7:	0f 85 94 02 00 00    	jne    c0020551 <Vm::x87Handler(regs*)+0xa61>
c00202bd:	83 ec 0c             	sub    esp,0xc
c00202c0:	6a 00                	push   0x0
c00202c2:	e8 ec f6 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00202c7:	89 c7                	mov    edi,eax
c00202c9:	89 d5                	mov    ebp,edx
c00202cb:	58                   	pop    eax
c00202cc:	ff 36                	push   DWORD PTR [esi]
c00202ce:	e8 2f f4 ff ff       	call   c001f702 <Vm::fpu32ToInternal(unsigned int)>
c00202d3:	e9 cb 01 00 00       	jmp    c00204a3 <Vm::x87Handler(regs*)+0x9b3>
c00202d8:	80 fa 03             	cmp    dl,0x3
c00202db:	0f 85 d3 01 00 00    	jne    c00204b4 <Vm::x87Handler(regs*)+0x9c4>
c00202e1:	e8 b8 f7 ff ff       	call   c001fa9e <Vm::fpuPop()>
c00202e6:	51                   	push   ecx
c00202e7:	51                   	push   ecx
c00202e8:	e9 de 01 00 00       	jmp    c00204cb <Vm::x87Handler(regs*)+0x9db>
c00202ed:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202f1:	80 fa 01             	cmp    dl,0x1
c00202f4:	75 09                	jne    c00202ff <Vm::x87Handler(regs*)+0x80f>
c00202f6:	57                   	push   edi
c00202f7:	57                   	push   edi
c00202f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00202fa:	e9 e3 01 00 00       	jmp    c00204e2 <Vm::x87Handler(regs*)+0x9f2>
c00202ff:	80 fa 04             	cmp    dl,0x4
c0020302:	75 12                	jne    c0020316 <Vm::x87Handler(regs*)+0x826>
c0020304:	31 d2                	xor    edx,edx
c0020306:	51                   	push   ecx
c0020307:	51                   	push   ecx
c0020308:	8b 06                	mov    eax,DWORD PTR [esi]
c002030a:	52                   	push   edx
c002030b:	50                   	push   eax
c002030c:	e8 d0 f4 ff ff       	call   c001f7e1 <Vm::fpuLongToFloat(long long)>
c0020311:	e9 ee 00 00 00       	jmp    c0020404 <Vm::x87Handler(regs*)+0x914>
c0020316:	31 c0                	xor    eax,eax
c0020318:	80 fa 07             	cmp    dl,0x7
c002031b:	0f 85 30 02 00 00    	jne    c0020551 <Vm::x87Handler(regs*)+0xa61>
c0020321:	83 ec 0c             	sub    esp,0xc
c0020324:	6a 00                	push   0x0
c0020326:	e8 88 f6 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c002032b:	89 c7                	mov    edi,eax
c002032d:	89 d5                	mov    ebp,edx
c002032f:	58                   	pop    eax
c0020330:	8b 06                	mov    eax,DWORD PTR [esi]
c0020332:	5a                   	pop    edx
c0020333:	31 d2                	xor    edx,edx
c0020335:	52                   	push   edx
c0020336:	50                   	push   eax
c0020337:	e8 a5 f4 ff ff       	call   c001f7e1 <Vm::fpuLongToFloat(long long)>
c002033c:	e9 62 01 00 00       	jmp    c00204a3 <Vm::x87Handler(regs*)+0x9b3>
c0020341:	84 d2                	test   dl,dl
c0020343:	75 0d                	jne    c0020352 <Vm::x87Handler(regs*)+0x862>
c0020345:	31 d2                	xor    edx,edx
c0020347:	55                   	push   ebp
c0020348:	55                   	push   ebp
c0020349:	8b 06                	mov    eax,DWORD PTR [esi]
c002034b:	52                   	push   edx
c002034c:	50                   	push   eax
c002034d:	e9 d3 01 00 00       	jmp    c0020525 <Vm::x87Handler(regs*)+0xa35>
c0020352:	31 c0                	xor    eax,eax
c0020354:	80 fa 02             	cmp    dl,0x2
c0020357:	0f 85 f4 01 00 00    	jne    c0020551 <Vm::x87Handler(regs*)+0xa61>
c002035d:	83 ec 0c             	sub    esp,0xc
c0020360:	6a 00                	push   0x0
c0020362:	e8 4c f6 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020367:	59                   	pop    ecx
c0020368:	5f                   	pop    edi
c0020369:	e9 6a f9 ff ff       	jmp    c001fcd8 <Vm::x87Handler(regs*)+0x1e8>
c002036e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020372:	84 d2                	test   dl,dl
c0020374:	75 2a                	jne    c00203a0 <Vm::x87Handler(regs*)+0x8b0>
c0020376:	50                   	push   eax
c0020377:	50                   	push   eax
c0020378:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002037b:	ff 36                	push   DWORD PTR [esi]
c002037d:	e8 c5 f3 ff ff       	call   c001f747 <Vm::fpu64ToInternal(unsigned long long)>
c0020382:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020389:	89 c6                	mov    esi,eax
c002038b:	89 d7                	mov    edi,edx
c002038d:	e8 21 f6 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020392:	57                   	push   edi
c0020393:	56                   	push   esi
c0020394:	52                   	push   edx
c0020395:	50                   	push   eax
c0020396:	e8 8e f5 ff ff       	call   c001f929 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002039b:	e9 64 01 00 00       	jmp    c0020504 <Vm::x87Handler(regs*)+0xa14>
c00203a0:	80 fa 01             	cmp    dl,0x1
c00203a3:	75 11                	jne    c00203b6 <Vm::x87Handler(regs*)+0x8c6>
c00203a5:	50                   	push   eax
c00203a6:	50                   	push   eax
c00203a7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203aa:	ff 36                	push   DWORD PTR [esi]
c00203ac:	e8 96 f3 ff ff       	call   c001f747 <Vm::fpu64ToInternal(unsigned long long)>
c00203b1:	e9 35 01 00 00       	jmp    c00204eb <Vm::x87Handler(regs*)+0x9fb>
c00203b6:	80 fa 02             	cmp    dl,0x2
c00203b9:	0f 85 54 f9 ff ff    	jne    c001fd13 <Vm::x87Handler(regs*)+0x223>
c00203bf:	55                   	push   ebp
c00203c0:	55                   	push   ebp
c00203c1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203c4:	ff 36                	push   DWORD PTR [esi]
c00203c6:	e8 7c f3 ff ff       	call   c001f747 <Vm::fpu64ToInternal(unsigned long long)>
c00203cb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203d2:	89 c6                	mov    esi,eax
c00203d4:	89 d7                	mov    edi,edx
c00203d6:	e8 d8 f5 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00203db:	57                   	push   edi
c00203dc:	56                   	push   esi
c00203dd:	52                   	push   edx
c00203de:	50                   	push   eax
c00203df:	e8 f2 f4 ff ff       	call   c001f8d6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203e8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203eb:	83 c4 20             	add    esp,0x20
c00203ee:	e9 74 f7 ff ff       	jmp    c001fb67 <Vm::x87Handler(regs*)+0x77>
c00203f3:	80 fa 04             	cmp    dl,0x4
c00203f6:	75 2a                	jne    c0020422 <Vm::x87Handler(regs*)+0x932>
c00203f8:	51                   	push   ecx
c00203f9:	51                   	push   ecx
c00203fa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203fd:	ff 36                	push   DWORD PTR [esi]
c00203ff:	e8 43 f3 ff ff       	call   c001f747 <Vm::fpu64ToInternal(unsigned long long)>
c0020404:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002040b:	89 c6                	mov    esi,eax
c002040d:	89 d7                	mov    edi,edx
c002040f:	e8 9f f5 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020414:	57                   	push   edi
c0020415:	56                   	push   esi
c0020416:	52                   	push   edx
c0020417:	50                   	push   eax
c0020418:	e8 36 f5 ff ff       	call   c001f953 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002041d:	e9 e2 00 00 00       	jmp    c0020504 <Vm::x87Handler(regs*)+0xa14>
c0020422:	80 fa 05             	cmp    dl,0x5
c0020425:	75 28                	jne    c002044f <Vm::x87Handler(regs*)+0x95f>
c0020427:	83 ec 0c             	sub    esp,0xc
c002042a:	6a 00                	push   0x0
c002042c:	e8 82 f5 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020431:	89 c7                	mov    edi,eax
c0020433:	89 d5                	mov    ebp,edx
c0020435:	58                   	pop    eax
c0020436:	5a                   	pop    edx
c0020437:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002043a:	ff 36                	push   DWORD PTR [esi]
c002043c:	e8 06 f3 ff ff       	call   c001f747 <Vm::fpu64ToInternal(unsigned long long)>
c0020441:	83 c4 10             	add    esp,0x10
c0020444:	55                   	push   ebp
c0020445:	57                   	push   edi
c0020446:	52                   	push   edx
c0020447:	50                   	push   eax
c0020448:	e8 06 f5 ff ff       	call   c001f953 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002044d:	eb 60                	jmp    c00204af <Vm::x87Handler(regs*)+0x9bf>
c002044f:	80 fa 06             	cmp    dl,0x6
c0020452:	75 2a                	jne    c002047e <Vm::x87Handler(regs*)+0x98e>
c0020454:	51                   	push   ecx
c0020455:	51                   	push   ecx
c0020456:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020459:	ff 36                	push   DWORD PTR [esi]
c002045b:	e8 e7 f2 ff ff       	call   c001f747 <Vm::fpu64ToInternal(unsigned long long)>
c0020460:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020467:	89 c6                	mov    esi,eax
c0020469:	89 d7                	mov    edi,edx
c002046b:	e8 43 f5 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020470:	57                   	push   edi
c0020471:	56                   	push   esi
c0020472:	52                   	push   edx
c0020473:	50                   	push   eax
c0020474:	e8 08 f5 ff ff       	call   c001f981 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020479:	e9 86 00 00 00       	jmp    c0020504 <Vm::x87Handler(regs*)+0xa14>
c002047e:	31 c0                	xor    eax,eax
c0020480:	80 fa 07             	cmp    dl,0x7
c0020483:	0f 85 c8 00 00 00    	jne    c0020551 <Vm::x87Handler(regs*)+0xa61>
c0020489:	83 ec 0c             	sub    esp,0xc
c002048c:	6a 00                	push   0x0
c002048e:	e8 20 f5 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c0020493:	89 c7                	mov    edi,eax
c0020495:	89 d5                	mov    ebp,edx
c0020497:	58                   	pop    eax
c0020498:	5a                   	pop    edx
c0020499:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002049c:	ff 36                	push   DWORD PTR [esi]
c002049e:	e8 a4 f2 ff ff       	call   c001f747 <Vm::fpu64ToInternal(unsigned long long)>
c00204a3:	83 c4 10             	add    esp,0x10
c00204a6:	55                   	push   ebp
c00204a7:	57                   	push   edi
c00204a8:	52                   	push   edx
c00204a9:	50                   	push   eax
c00204aa:	e8 d2 f4 ff ff       	call   c001f981 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204af:	83 c4 0c             	add    esp,0xc
c00204b2:	eb 53                	jmp    c0020507 <Vm::x87Handler(regs*)+0xa17>
c00204b4:	31 c0                	xor    eax,eax
c00204b6:	80 fa 02             	cmp    dl,0x2
c00204b9:	0f 85 92 00 00 00    	jne    c0020551 <Vm::x87Handler(regs*)+0xa61>
c00204bf:	83 ec 0c             	sub    esp,0xc
c00204c2:	6a 00                	push   0x0
c00204c4:	e8 ea f4 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00204c9:	59                   	pop    ecx
c00204ca:	5f                   	pop    edi
c00204cb:	52                   	push   edx
c00204cc:	50                   	push   eax
c00204cd:	e8 27 f2 ff ff       	call   c001f6f9 <Vm::fpuInternalTo64(unsigned long long)>
c00204d2:	eb 70                	jmp    c0020544 <Vm::x87Handler(regs*)+0xa54>
c00204d4:	31 c0                	xor    eax,eax
c00204d6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00204db:	75 74                	jne    c0020551 <Vm::x87Handler(regs*)+0xa61>
c00204dd:	50                   	push   eax
c00204de:	50                   	push   eax
c00204df:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204e2:	31 d2                	xor    edx,edx
c00204e4:	52                   	push   edx
c00204e5:	50                   	push   eax
c00204e6:	e8 f6 f2 ff ff       	call   c001f7e1 <Vm::fpuLongToFloat(long long)>
c00204eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f2:	89 c6                	mov    esi,eax
c00204f4:	89 d7                	mov    edi,edx
c00204f6:	e8 b8 f4 ff ff       	call   c001f9b3 <Vm::fpuGetReg(int)>
c00204fb:	57                   	push   edi
c00204fc:	56                   	push   esi
c00204fd:	52                   	push   edx
c00204fe:	50                   	push   eax
c00204ff:	e8 5e f4 ff ff       	call   c001f962 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020504:	83 c4 1c             	add    esp,0x1c
c0020507:	52                   	push   edx
c0020508:	50                   	push   eax
c0020509:	6a 00                	push   0x0
c002050b:	e8 e6 f4 ff ff       	call   c001f9f6 <Vm::fpuSetReg(int, unsigned long long)>
c0020510:	e9 f2 f7 ff ff       	jmp    c001fd07 <Vm::x87Handler(regs*)+0x217>
c0020515:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020519:	80 fa 05             	cmp    dl,0x5
c002051c:	75 11                	jne    c002052f <Vm::x87Handler(regs*)+0xa3f>
c002051e:	55                   	push   ebp
c002051f:	55                   	push   ebp
c0020520:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020523:	ff 36                	push   DWORD PTR [esi]
c0020525:	e8 81 f2 ff ff       	call   c001f7ab <Vm::fpuULongToFloat(unsigned long long)>
c002052a:	e9 cf f7 ff ff       	jmp    c001fcfe <Vm::x87Handler(regs*)+0x20e>
c002052f:	31 c0                	xor    eax,eax
c0020531:	80 fa 07             	cmp    dl,0x7
c0020534:	75 1b                	jne    c0020551 <Vm::x87Handler(regs*)+0xa61>
c0020536:	e8 63 f5 ff ff       	call   c001fa9e <Vm::fpuPop()>
c002053b:	51                   	push   ecx
c002053c:	51                   	push   ecx
c002053d:	52                   	push   edx
c002053e:	50                   	push   eax
c002053f:	e8 0c f2 ff ff       	call   c001f750 <Vm::fpuFloatToLong(unsigned long long)>
c0020544:	83 c4 10             	add    esp,0x10
c0020547:	89 06                	mov    DWORD PTR [esi],eax
c0020549:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002054c:	e9 f8 f7 ff ff       	jmp    c001fd49 <Vm::x87Handler(regs*)+0x259>
c0020551:	83 c4 1c             	add    esp,0x1c
c0020554:	5b                   	pop    ebx
c0020555:	5e                   	pop    esi
c0020556:	5f                   	pop    edi
c0020557:	5d                   	pop    ebp
c0020558:	c3                   	ret    

c0020559 <__static_initialization_and_destruction_0(int, int)>:
c0020559:	83 ec 0c             	sub    esp,0xc
c002055c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020561:	75 1a                	jne    c002057d <__static_initialization_and_destruction_0(int, int)+0x24>
c0020563:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002056b:	75 10                	jne    c002057d <__static_initialization_and_destruction_0(int, int)+0x24>
c002056d:	83 ec 0c             	sub    esp,0xc
c0020570:	68 e0 1b 03 c0       	push   0xc0031be0
c0020575:	e8 22 89 00 00       	call   c0028e9c <Vm::_FPUState::_FPUState()>
c002057a:	83 c4 10             	add    esp,0x10
c002057d:	90                   	nop
c002057e:	83 c4 0c             	add    esp,0xc
c0020581:	c3                   	ret    

c0020582 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020582:	83 ec 0c             	sub    esp,0xc
c0020585:	83 ec 08             	sub    esp,0x8
c0020588:	68 ff ff 00 00       	push   0xffff
c002058d:	6a 01                	push   0x1
c002058f:	e8 c5 ff ff ff       	call   c0020559 <__static_initialization_and_destruction_0(int, int)>
c0020594:	83 c4 10             	add    esp,0x10
c0020597:	83 c4 0c             	add    esp,0xc
c002059a:	c3                   	ret    
c002059b:	90                   	nop

c002059c <FAT::getName()>:
c002059c:	b8 bc c9 02 c0       	mov    eax,0xc002c9bc
c00205a1:	c3                   	ret    

c00205a2 <FAT::tell(void*, unsigned long long*)>:
c00205a2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205a7:	75 06                	jne    c00205af <FAT::tell(void*, unsigned long long*)+0xd>
c00205a9:	b8 04 00 00 00       	mov    eax,0x4
c00205ae:	c3                   	ret    
c00205af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205b4:	75 06                	jne    c00205bc <FAT::tell(void*, unsigned long long*)+0x1a>
c00205b6:	b8 04 00 00 00       	mov    eax,0x4
c00205bb:	c3                   	ret    
c00205bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205c0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205c3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205ca:	89 01                	mov    DWORD PTR [ecx],eax
c00205cc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205cf:	b8 00 00 00 00       	mov    eax,0x0
c00205d4:	c3                   	ret    
c00205d5:	90                   	nop

c00205d6 <FAT::stat(void*, unsigned long long*)>:
c00205d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205db:	75 06                	jne    c00205e3 <FAT::stat(void*, unsigned long long*)+0xd>
c00205dd:	b8 04 00 00 00       	mov    eax,0x4
c00205e2:	c3                   	ret    
c00205e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205e8:	75 06                	jne    c00205f0 <FAT::stat(void*, unsigned long long*)+0x1a>
c00205ea:	b8 04 00 00 00       	mov    eax,0x4
c00205ef:	c3                   	ret    
c00205f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205f4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205fe:	89 01                	mov    DWORD PTR [ecx],eax
c0020600:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020603:	b8 00 00 00 00       	mov    eax,0x0
c0020608:	c3                   	ret    
c0020609:	90                   	nop

c002060a <FAT::~FAT()>:
c002060a:	83 ec 0c             	sub    esp,0xc
c002060d:	ba 60 ca 02 c0       	mov    edx,0xc002ca60
c0020612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020616:	89 10                	mov    DWORD PTR [eax],edx
c0020618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002061c:	83 ec 0c             	sub    esp,0xc
c002061f:	50                   	push   eax
c0020620:	e8 13 2c ff ff       	call   c0013238 <Filesystem::~Filesystem()>
c0020625:	83 c4 10             	add    esp,0x10
c0020628:	90                   	nop
c0020629:	83 c4 0c             	add    esp,0xc
c002062c:	c3                   	ret    
c002062d:	90                   	nop

c002062e <FAT::~FAT()>:
c002062e:	83 ec 0c             	sub    esp,0xc
c0020631:	83 ec 0c             	sub    esp,0xc
c0020634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020638:	e8 cd ff ff ff       	call   c002060a <FAT::~FAT()>
c002063d:	83 c4 10             	add    esp,0x10
c0020640:	83 ec 08             	sub    esp,0x8
c0020643:	6a 08                	push   0x8
c0020645:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020649:	e8 db 27 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c002064e:	83 c4 10             	add    esp,0x10
c0020651:	83 c4 0c             	add    esp,0xc
c0020654:	c3                   	ret    
c0020655:	90                   	nop

c0020656 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020656:	83 ec 1c             	sub    esp,0x1c
c0020659:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020660:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020665:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020669:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c0020670:	83 f8 ff             	cmp    eax,0xffffffff
c0020673:	75 34                	jne    c00206a9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020675:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020679:	88 c2                	mov    dl,al
c002067b:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020680:	01 d0                	add    eax,edx
c0020682:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020686:	8b 15 40 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c40
c002068c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020690:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0020697:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c002069c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00206a0:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c00206a7:	eb 17                	jmp    c00206c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206a9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206ad:	88 c2                	mov    dl,al
c00206af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206b3:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c00206ba:	01 d0                	add    eax,edx
c00206bc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206c0:	83 ec 04             	sub    esp,0x4
c00206c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206cb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00206cf:	50                   	push   eax
c00206d0:	e8 6b 66 fe ff       	call   c0006d40 <f_getlabel>
c00206d5:	83 c4 10             	add    esp,0x10
c00206d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206e1:	75 07                	jne    c00206ea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206e3:	b8 00 00 00 00       	mov    eax,0x0
c00206e8:	eb 05                	jmp    c00206ef <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206ea:	b8 01 00 00 00       	mov    eax,0x1
c00206ef:	83 c4 1c             	add    esp,0x1c
c00206f2:	c3                   	ret    
c00206f3:	90                   	nop

c00206f4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206f4:	57                   	push   edi
c00206f5:	83 ec 58             	sub    esp,0x58
c00206f8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020700:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020704:	b9 0f 00 00 00       	mov    ecx,0xf
c0020709:	b8 00 00 00 00       	mov    eax,0x0
c002070e:	fc                   	cld    
c002070f:	89 d7                	mov    edi,edx
c0020711:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020713:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020717:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c002071e:	83 f8 ff             	cmp    eax,0xffffffff
c0020721:	75 34                	jne    c0020757 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020723:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020727:	88 c2                	mov    dl,al
c0020729:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c002072e:	01 d0                	add    eax,edx
c0020730:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020734:	8b 15 40 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c40
c002073a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002073e:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0020745:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c002074a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002074e:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c0020755:	eb 17                	jmp    c002076e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020757:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002075b:	88 c2                	mov    dl,al
c002075d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020761:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c0020768:	01 d0                	add    eax,edx
c002076a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002076e:	83 ec 08             	sub    esp,0x8
c0020771:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020775:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020779:	50                   	push   eax
c002077a:	e8 fd 01 fe ff       	call   c000097c <strcat>
c002077f:	83 c4 10             	add    esp,0x10
c0020782:	83 ec 0c             	sub    esp,0xc
c0020785:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020789:	50                   	push   eax
c002078a:	e8 9f 67 fe ff       	call   c0006f2e <f_setlabel>
c002078f:	83 c4 10             	add    esp,0x10
c0020792:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020796:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002079b:	75 07                	jne    c00207a4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002079d:	b8 00 00 00 00       	mov    eax,0x0
c00207a2:	eb 05                	jmp    c00207a9 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207a4:	b8 01 00 00 00       	mov    eax,0x1
c00207a9:	83 c4 58             	add    esp,0x58
c00207ac:	5f                   	pop    edi
c00207ad:	c3                   	ret    

c00207ae <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207ae:	83 ec 2c             	sub    esp,0x2c
c00207b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207b9:	83 ec 08             	sub    esp,0x8
c00207bc:	68 e0 c9 02 c0       	push   0xc002c9e0
c00207c1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207c5:	e8 fe 00 fe ff       	call   c00008c8 <strcmp>
c00207ca:	83 c4 10             	add    esp,0x10
c00207cd:	85 c0                	test   eax,eax
c00207cf:	0f 94 c0             	sete   al
c00207d2:	84 c0                	test   al,al
c00207d4:	74 0d                	je     c00207e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00207d6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207de:	e9 a6 00 00 00       	jmp    c0020889 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207e3:	83 ec 08             	sub    esp,0x8
c00207e6:	68 d2 c9 02 c0       	push   0xc002c9d2
c00207eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ef:	e8 d4 00 fe ff       	call   c00008c8 <strcmp>
c00207f4:	83 c4 10             	add    esp,0x10
c00207f7:	85 c0                	test   eax,eax
c00207f9:	0f 94 c0             	sete   al
c00207fc:	84 c0                	test   al,al
c00207fe:	74 0a                	je     c002080a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020800:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020808:	eb 7f                	jmp    c0020889 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002080a:	83 ec 08             	sub    esp,0x8
c002080d:	68 d8 c9 02 c0       	push   0xc002c9d8
c0020812:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020816:	e8 ad 00 fe ff       	call   c00008c8 <strcmp>
c002081b:	83 c4 10             	add    esp,0x10
c002081e:	85 c0                	test   eax,eax
c0020820:	0f 94 c0             	sete   al
c0020823:	84 c0                	test   al,al
c0020825:	74 0a                	je     c0020831 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020827:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002082f:	eb 58                	jmp    c0020889 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020831:	83 ec 08             	sub    esp,0x8
c0020834:	68 0c 96 02 c0       	push   0xc002960c
c0020839:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002083d:	e8 86 00 fe ff       	call   c00008c8 <strcmp>
c0020842:	83 c4 10             	add    esp,0x10
c0020845:	85 c0                	test   eax,eax
c0020847:	0f 94 c0             	sete   al
c002084a:	84 c0                	test   al,al
c002084c:	74 0a                	je     c0020858 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002084e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020856:	eb 31                	jmp    c0020889 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020858:	83 ec 08             	sub    esp,0x8
c002085b:	68 de c9 02 c0       	push   0xc002c9de
c0020860:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020864:	e8 5f 00 fe ff       	call   c00008c8 <strcmp>
c0020869:	83 c4 10             	add    esp,0x10
c002086c:	85 c0                	test   eax,eax
c002086e:	0f 94 c0             	sete   al
c0020871:	84 c0                	test   al,al
c0020873:	74 0a                	je     c002087f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020875:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002087d:	eb 0a                	jmp    c0020889 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002087f:	b8 08 00 00 00       	mov    eax,0x8
c0020884:	e9 04 01 00 00       	jmp    c002098d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020889:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020890:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020895:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020899:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c00208a0:	83 f8 ff             	cmp    eax,0xffffffff
c00208a3:	75 34                	jne    c00208d9 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208a5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208a9:	88 c2                	mov    dl,al
c00208ab:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c00208b0:	01 d0                	add    eax,edx
c00208b2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208b6:	8b 15 40 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c40
c00208bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208c0:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c00208c7:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c00208cc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00208d0:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c00208d7:	eb 17                	jmp    c00208f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00208d9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208dd:	88 c2                	mov    dl,al
c00208df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208e3:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c00208ea:	01 d0                	add    eax,edx
c00208ec:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208f4:	88 04 24             	mov    BYTE PTR [esp],al
c00208f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208ff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020907:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002090c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020914:	83 ec 0c             	sub    esp,0xc
c0020917:	68 00 20 00 00       	push   0x2000
c002091c:	e8 2a ef fe ff       	call   c000f84b <malloc>
c0020921:	83 c4 10             	add    esp,0x10
c0020924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020928:	68 00 20 00 00       	push   0x2000
c002092d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020931:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020935:	50                   	push   eax
c0020936:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002093a:	50                   	push   eax
c002093b:	e8 39 6a fe ff       	call   c0007379 <f_mkfs>
c0020940:	83 c4 10             	add    esp,0x10
c0020943:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020947:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002094c:	75 07                	jne    c0020955 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002094e:	b8 00 00 00 00       	mov    eax,0x0
c0020953:	eb 38                	jmp    c002098d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020955:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002095a:	75 17                	jne    c0020973 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002095c:	83 ec 0c             	sub    esp,0xc
c002095f:	68 30 ca 02 c0       	push   0xc002ca30
c0020964:	e8 a0 25 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0020969:	83 c4 10             	add    esp,0x10
c002096c:	b8 09 00 00 00       	mov    eax,0x9
c0020971:	eb 1a                	jmp    c002098d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020973:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020977:	83 ec 08             	sub    esp,0x8
c002097a:	50                   	push   eax
c002097b:	68 e4 c9 02 c0       	push   0xc002c9e4
c0020980:	e8 84 25 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0020985:	83 c4 10             	add    esp,0x10
c0020988:	b8 01 00 00 00       	mov    eax,0x1
c002098d:	83 c4 2c             	add    esp,0x2c
c0020990:	c3                   	ret    
c0020991:	90                   	nop

c0020992 <FAT::tryMount(LogicalDisk*, int)>:
c0020992:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020998:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c002099d:	83 f8 14             	cmp    eax,0x14
c00209a0:	75 17                	jne    c00209b9 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209a2:	83 ec 0c             	sub    esp,0xc
c00209a5:	68 f6 c9 02 c0       	push   0xc002c9f6
c00209aa:	e8 98 9c ff ff       	call   c001a647 <Krnl::panic(char const*)>
c00209af:	83 c4 10             	add    esp,0x10
c00209b2:	b0 00                	mov    al,0x0
c00209b4:	e9 d7 01 00 00       	jmp    c0020b90 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209b9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209c0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209cc:	3d 00 02 00 00       	cmp    eax,0x200
c00209d1:	74 07                	je     c00209da <FAT::tryMount(LogicalDisk*, int)+0x48>
c00209d3:	b0 00                	mov    al,0x0
c00209d5:	e9 b6 01 00 00       	jmp    c0020b90 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209da:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209e2:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209e9:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c00209f0:	83 f8 ff             	cmp    eax,0xffffffff
c00209f3:	74 07                	je     c00209fc <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209f5:	b0 01                	mov    al,0x1
c00209f7:	e9 94 01 00 00       	jmp    c0020b90 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209fc:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a06:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a0e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a15:	88 c2                	mov    dl,al
c0020a17:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020a1c:	01 d0                	add    eax,edx
c0020a1e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a25:	8b 15 40 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c40
c0020a2b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a32:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0020a39:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020a3e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a45:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c0020a4c:	83 ec 0c             	sub    esp,0xc
c0020a4f:	68 54 02 00 00       	push   0x254
c0020a54:	e8 f2 ed fe ff       	call   c000f84b <malloc>
c0020a59:	83 c4 10             	add    esp,0x10
c0020a5c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a63:	83 ec 04             	sub    esp,0x4
c0020a66:	6a 00                	push   0x0
c0020a68:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a6f:	50                   	push   eax
c0020a70:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a77:	e8 bb 44 fe ff       	call   c0004f37 <f_mount>
c0020a7c:	83 c4 10             	add    esp,0x10
c0020a7f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a86:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a8e:	74 19                	je     c0020aa9 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a90:	83 ec 0c             	sub    esp,0xc
c0020a93:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a9a:	e8 cc ed fe ff       	call   c000f86b <rfree>
c0020a9f:	83 c4 10             	add    esp,0x10
c0020aa2:	b0 00                	mov    al,0x0
c0020aa4:	e9 e7 00 00 00       	jmp    c0020b90 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020aa9:	83 ec 04             	sub    esp,0x4
c0020aac:	68 00 01 00 00       	push   0x100
c0020ab1:	6a 00                	push   0x0
c0020ab3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020aba:	50                   	push   eax
c0020abb:	e8 c0 fc fd ff       	call   c0000780 <memset>
c0020ac0:	83 c4 10             	add    esp,0x10
c0020ac3:	83 ec 08             	sub    esp,0x8
c0020ac6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020acd:	50                   	push   eax
c0020ace:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ad5:	50                   	push   eax
c0020ad6:	e8 a1 fe fd ff       	call   c000097c <strcat>
c0020adb:	83 c4 10             	add    esp,0x10
c0020ade:	83 ec 08             	sub    esp,0x8
c0020ae1:	68 04 ca 02 c0       	push   0xc002ca04
c0020ae6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020aed:	50                   	push   eax
c0020aee:	e8 89 fe fd ff       	call   c000097c <strcat>
c0020af3:	83 c4 10             	add    esp,0x10
c0020af6:	83 ec 04             	sub    esp,0x4
c0020af9:	6a 01                	push   0x1
c0020afb:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b02:	50                   	push   eax
c0020b03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b07:	50                   	push   eax
c0020b08:	e8 8c 44 fe ff       	call   c0004f99 <f_open>
c0020b0d:	83 c4 10             	add    esp,0x10
c0020b10:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b17:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b1e:	85 c0                	test   eax,eax
c0020b20:	74 0a                	je     c0020b2c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b22:	78 2d                	js     c0020b51 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b24:	83 e8 04             	sub    eax,0x4
c0020b27:	83 f8 01             	cmp    eax,0x1
c0020b2a:	77 25                	ja     c0020b51 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b2c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b34:	83 ec 0c             	sub    esp,0xc
c0020b37:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b3b:	50                   	push   eax
c0020b3c:	e8 aa 4f fe ff       	call   c0005aeb <f_close>
c0020b41:	83 c4 10             	add    esp,0x10
c0020b44:	90                   	nop
c0020b45:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b4d:	74 3a                	je     c0020b89 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b4f:	eb 2d                	jmp    c0020b7e <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b51:	83 ec 0c             	sub    esp,0xc
c0020b54:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b5b:	e8 0b ed fe ff       	call   c000f86b <rfree>
c0020b60:	83 c4 10             	add    esp,0x10
c0020b63:	83 ec 04             	sub    esp,0x4
c0020b66:	6a 00                	push   0x0
c0020b68:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b6f:	50                   	push   eax
c0020b70:	6a 00                	push   0x0
c0020b72:	e8 c0 43 fe ff       	call   c0004f37 <f_mount>
c0020b77:	83 c4 10             	add    esp,0x10
c0020b7a:	b0 00                	mov    al,0x0
c0020b7c:	eb 12                	jmp    c0020b90 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b7e:	a1 40 1c 03 c0       	mov    eax,ds:0xc0031c40
c0020b83:	40                   	inc    eax
c0020b84:	a3 40 1c 03 c0       	mov    ds:0xc0031c40,eax
c0020b89:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b90:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b96:	c3                   	ret    
c0020b97:	90                   	nop

c0020b98 <FAT::getFileFirstSector(char const*)>:
c0020b98:	53                   	push   ebx
c0020b99:	83 ec 28             	sub    esp,0x28
c0020b9c:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020ba4:	83 ec 0c             	sub    esp,0xc
c0020ba7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bab:	e8 9b ec fe ff       	call   c000f84b <malloc>
c0020bb0:	83 c4 10             	add    esp,0x10
c0020bb3:	89 c3                	mov    ebx,eax
c0020bb5:	a1 74 1b 03 c0       	mov    eax,ds:0xc0031b74
c0020bba:	83 ec 04             	sub    esp,0x4
c0020bbd:	50                   	push   eax
c0020bbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020bc2:	53                   	push   ebx
c0020bc3:	e8 a0 28 ff ff       	call   c0013468 <File::File(char const*, Process*)>
c0020bc8:	83 c4 10             	add    esp,0x10
c0020bcb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020bcf:	83 ec 08             	sub    esp,0x8
c0020bd2:	6a 01                	push   0x1
c0020bd4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020bd8:	e8 ef 28 ff ff       	call   c00134cc <File::open(FileOpenMode)>
c0020bdd:	83 c4 10             	add    esp,0x10
c0020be0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0020be6:	83 c0 0c             	add    eax,0xc
c0020be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0020beb:	83 ec 0c             	sub    esp,0xc
c0020bee:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020bf2:	52                   	push   edx
c0020bf3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020bf7:	52                   	push   edx
c0020bf8:	6a 00                	push   0x0
c0020bfa:	6a 04                	push   0x4
c0020bfc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020c00:	ff d0                	call   eax
c0020c02:	83 c4 20             	add    esp,0x20
c0020c05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c09:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020c0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c17:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020c1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020c1d:	83 ec 04             	sub    esp,0x4
c0020c20:	52                   	push   edx
c0020c21:	50                   	push   eax
c0020c22:	68 21 ca 02 c0       	push   0xc002ca21
c0020c27:	e8 dd 22 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0020c2c:	83 c4 10             	add    esp,0x10
c0020c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c33:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0020c36:	83 ec 08             	sub    esp,0x8
c0020c39:	50                   	push   eax
c0020c3a:	68 0f ca 02 c0       	push   0xc002ca0f
c0020c3f:	e8 c5 22 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0020c44:	83 c4 10             	add    esp,0x10
c0020c47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c4b:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c0020c4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0020c51:	83 ec 04             	sub    esp,0x4
c0020c54:	52                   	push   edx
c0020c55:	50                   	push   eax
c0020c56:	68 1d ca 02 c0       	push   0xc002ca1d
c0020c5b:	e8 a9 22 ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0020c60:	83 c4 10             	add    esp,0x10
c0020c63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0020c6b:	83 ec 0c             	sub    esp,0xc
c0020c6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c72:	e8 b3 28 ff ff       	call   c001352a <File::close()>
c0020c77:	83 c4 10             	add    esp,0x10
c0020c7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c7e:	ba 00 00 00 00       	mov    edx,0x0
c0020c83:	83 c4 28             	add    esp,0x28
c0020c86:	5b                   	pop    ebx
c0020c87:	c3                   	ret    

c0020c88 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020c88:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020c8e:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020c96:	74 0a                	je     c0020ca2 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020c98:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020ca0:	75 0a                	jne    c0020cac <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020ca2:	b8 04 00 00 00       	mov    eax,0x4
c0020ca7:	e9 db 00 00 00       	jmp    c0020d87 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cac:	83 ec 08             	sub    esp,0x8
c0020caf:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020cb6:	50                   	push   eax
c0020cb7:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020cbe:	e8 32 54 fe ff       	call   c00060f5 <f_readdir>
c0020cc3:	83 c4 10             	add    esp,0x10
c0020cc6:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020ccd:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020cd3:	83 ec 0c             	sub    esp,0xc
c0020cd6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020cdd:	83 c0 1a             	add    eax,0x1a
c0020ce0:	50                   	push   eax
c0020ce1:	e8 b6 fa fd ff       	call   c000079c <strlen>
c0020ce6:	83 c4 10             	add    esp,0x10
c0020ce9:	ba 00 00 00 00       	mov    edx,0x0
c0020cee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cf2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020cf6:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020cfd:	0f b6 c0             	movzx  eax,al
c0020d00:	83 e0 10             	and    eax,0x10
c0020d03:	74 07                	je     c0020d0c <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020d05:	b8 02 00 00 00       	mov    eax,0x2
c0020d0a:	eb 05                	jmp    c0020d11 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020d0c:	b8 01 00 00 00       	mov    eax,0x1
c0020d11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d15:	83 ec 08             	sub    esp,0x8
c0020d18:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d1f:	83 c0 1a             	add    eax,0x1a
c0020d22:	50                   	push   eax
c0020d23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020d27:	83 c0 10             	add    eax,0x10
c0020d2a:	50                   	push   eax
c0020d2b:	e8 0c fb fd ff       	call   c000083c <strcpy>
c0020d30:	83 c4 10             	add    esp,0x10
c0020d33:	83 ec 04             	sub    esp,0x4
c0020d36:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020d3d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d41:	50                   	push   eax
c0020d42:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020d49:	e8 fe f9 fd ff       	call   c000074c <memcpy>
c0020d4e:	83 c4 10             	add    esp,0x10
c0020d51:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020d58:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020d5e:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020d65:	84 c0                	test   al,al
c0020d67:	75 07                	jne    c0020d70 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020d69:	b8 07 00 00 00       	mov    eax,0x7
c0020d6e:	eb 17                	jmp    c0020d87 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020d70:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020d77:	85 c0                	test   eax,eax
c0020d79:	75 07                	jne    c0020d82 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020d7b:	b8 00 00 00 00       	mov    eax,0x0
c0020d80:	eb 05                	jmp    c0020d87 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020d82:	b8 01 00 00 00       	mov    eax,0x1
c0020d87:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020d8d:	c3                   	ret    

c0020d8e <FAT::read(void*, unsigned long, void*, int*)>:
c0020d8e:	83 ec 1c             	sub    esp,0x1c
c0020d91:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d96:	74 07                	je     c0020d9f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020d98:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d9d:	75 07                	jne    c0020da6 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020d9f:	b8 04 00 00 00       	mov    eax,0x4
c0020da4:	eb 3d                	jmp    c0020de3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020da6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020daa:	50                   	push   eax
c0020dab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020daf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020db3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020db7:	e8 19 46 fe ff       	call   c00053d5 <f_read>
c0020dbc:	83 c4 10             	add    esp,0x10
c0020dbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020dc7:	89 c2                	mov    edx,eax
c0020dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020dcd:	89 10                	mov    DWORD PTR [eax],edx
c0020dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dd3:	85 c0                	test   eax,eax
c0020dd5:	75 07                	jne    c0020dde <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020dd7:	b8 00 00 00 00       	mov    eax,0x0
c0020ddc:	eb 05                	jmp    c0020de3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020dde:	b8 01 00 00 00       	mov    eax,0x1
c0020de3:	83 c4 1c             	add    esp,0x1c
c0020de6:	c3                   	ret    
c0020de7:	90                   	nop

c0020de8 <FAT::write(void*, unsigned long, void*, int*)>:
c0020de8:	83 ec 1c             	sub    esp,0x1c
c0020deb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020df0:	74 07                	je     c0020df9 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020df2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020df7:	75 07                	jne    c0020e00 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020df9:	b8 04 00 00 00       	mov    eax,0x4
c0020dfe:	eb 3d                	jmp    c0020e3d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020e00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e04:	50                   	push   eax
c0020e05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e11:	e8 3f 48 fe ff       	call   c0005655 <f_write>
c0020e16:	83 c4 10             	add    esp,0x10
c0020e19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e21:	89 c2                	mov    edx,eax
c0020e23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020e27:	89 10                	mov    DWORD PTR [eax],edx
c0020e29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e2d:	85 c0                	test   eax,eax
c0020e2f:	75 07                	jne    c0020e38 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020e31:	b8 00 00 00 00       	mov    eax,0x0
c0020e36:	eb 05                	jmp    c0020e3d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020e38:	b8 01 00 00 00       	mov    eax,0x1
c0020e3d:	83 c4 1c             	add    esp,0x1c
c0020e40:	c3                   	ret    
c0020e41:	90                   	nop

c0020e42 <FAT::close(void*)>:
c0020e42:	83 ec 1c             	sub    esp,0x1c
c0020e45:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e4a:	75 07                	jne    c0020e53 <FAT::close(void*)+0x11>
c0020e4c:	b8 04 00 00 00       	mov    eax,0x4
c0020e51:	eb 36                	jmp    c0020e89 <FAT::close(void*)+0x47>
c0020e53:	83 ec 0c             	sub    esp,0xc
c0020e56:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e5a:	e8 8c 4c fe ff       	call   c0005aeb <f_close>
c0020e5f:	83 c4 10             	add    esp,0x10
c0020e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e66:	83 ec 0c             	sub    esp,0xc
c0020e69:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e6d:	e8 e9 e9 fe ff       	call   c000f85b <free>
c0020e72:	83 c4 10             	add    esp,0x10
c0020e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e79:	85 c0                	test   eax,eax
c0020e7b:	75 07                	jne    c0020e84 <FAT::close(void*)+0x42>
c0020e7d:	b8 00 00 00 00       	mov    eax,0x0
c0020e82:	eb 05                	jmp    c0020e89 <FAT::close(void*)+0x47>
c0020e84:	b8 01 00 00 00       	mov    eax,0x1
c0020e89:	83 c4 1c             	add    esp,0x1c
c0020e8c:	c3                   	ret    
c0020e8d:	90                   	nop

c0020e8e <FAT::closeDir(void*)>:
c0020e8e:	83 ec 1c             	sub    esp,0x1c
c0020e91:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e96:	75 07                	jne    c0020e9f <FAT::closeDir(void*)+0x11>
c0020e98:	b8 04 00 00 00       	mov    eax,0x4
c0020e9d:	eb 36                	jmp    c0020ed5 <FAT::closeDir(void*)+0x47>
c0020e9f:	83 ec 0c             	sub    esp,0xc
c0020ea2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ea6:	e8 28 52 fe ff       	call   c00060d3 <f_closedir>
c0020eab:	83 c4 10             	add    esp,0x10
c0020eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020eb2:	83 ec 0c             	sub    esp,0xc
c0020eb5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eb9:	e8 9d e9 fe ff       	call   c000f85b <free>
c0020ebe:	83 c4 10             	add    esp,0x10
c0020ec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ec5:	85 c0                	test   eax,eax
c0020ec7:	75 07                	jne    c0020ed0 <FAT::closeDir(void*)+0x42>
c0020ec9:	b8 00 00 00 00       	mov    eax,0x0
c0020ece:	eb 05                	jmp    c0020ed5 <FAT::closeDir(void*)+0x47>
c0020ed0:	b8 01 00 00 00       	mov    eax,0x1
c0020ed5:	83 c4 1c             	add    esp,0x1c
c0020ed8:	c3                   	ret    
c0020ed9:	90                   	nop

c0020eda <FAT::seek(void*, unsigned long long)>:
c0020eda:	83 ec 2c             	sub    esp,0x2c
c0020edd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ee1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020ee5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020ee9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020eed:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020ef2:	75 07                	jne    c0020efb <FAT::seek(void*, unsigned long long)+0x21>
c0020ef4:	b8 04 00 00 00       	mov    eax,0x4
c0020ef9:	eb 2f                	jmp    c0020f2a <FAT::seek(void*, unsigned long long)+0x50>
c0020efb:	83 ec 04             	sub    esp,0x4
c0020efe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020f02:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020f06:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020f0a:	e8 0b 4c fe ff       	call   c0005b1a <f_lseek>
c0020f0f:	83 c4 10             	add    esp,0x10
c0020f12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f1a:	85 c0                	test   eax,eax
c0020f1c:	75 07                	jne    c0020f25 <FAT::seek(void*, unsigned long long)+0x4b>
c0020f1e:	b8 00 00 00 00       	mov    eax,0x0
c0020f23:	eb 05                	jmp    c0020f2a <FAT::seek(void*, unsigned long long)+0x50>
c0020f25:	b8 01 00 00 00       	mov    eax,0x1
c0020f2a:	83 c4 2c             	add    esp,0x2c
c0020f2d:	c3                   	ret    

c0020f2e <fatWrapperReadDisk>:
c0020f2e:	83 ec 1c             	sub    esp,0x1c
c0020f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f35:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020f44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020f48:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f4d:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0020f54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f58:	83 ec 0c             	sub    esp,0xc
c0020f5b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f5f:	52                   	push   edx
c0020f60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f68:	50                   	push   eax
c0020f69:	e8 2c 58 ff ff       	call   c001679a <LogicalDisk::read(unsigned long long, int, void*)>
c0020f6e:	83 c4 20             	add    esp,0x20
c0020f71:	83 c4 1c             	add    esp,0x1c
c0020f74:	c3                   	ret    

c0020f75 <fatWrapperWriteDisk>:
c0020f75:	83 ec 1c             	sub    esp,0x1c
c0020f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f7c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f84:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020f8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020f8f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f94:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0020f9b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f9f:	83 ec 0c             	sub    esp,0xc
c0020fa2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020fa6:	52                   	push   edx
c0020fa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020fab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020faf:	50                   	push   eax
c0020fb0:	e8 51 58 ff ff       	call   c0016806 <LogicalDisk::write(unsigned long long, int, void*)>
c0020fb5:	83 c4 20             	add    esp,0x20
c0020fb8:	83 c4 1c             	add    esp,0x1c
c0020fbb:	c3                   	ret    

c0020fbc <fatWrapperIoctl>:
c0020fbc:	53                   	push   ebx
c0020fbd:	83 ec 28             	sub    esp,0x28
c0020fc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020fc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020fc8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020fcc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020fd0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020fd5:	75 31                	jne    c0021008 <fatWrapperIoctl+0x4c>
c0020fd7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020fdf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020fe4:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0020feb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ff1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ff7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ffb:	66 89 02             	mov    WORD PTR [edx],ax
c0020ffe:	b8 00 00 00 00       	mov    eax,0x0
c0021003:	e9 b2 00 00 00       	jmp    c00210ba <fatWrapperIoctl+0xfe>
c0021008:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002100d:	75 6a                	jne    c0021079 <fatWrapperIoctl+0xbd>
c002100f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021013:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021017:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002101c:	8b 04 85 20 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13e0]
c0021023:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021029:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002102f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021035:	89 c8                	mov    eax,ecx
c0021037:	89 da                	mov    edx,ebx
c0021039:	0f a4 c2 0a          	shld   edx,eax,0xa
c002103d:	c1 e0 0a             	shl    eax,0xa
c0021040:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021045:	8b 0c 8d 20 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13e0]
c002104c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021052:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021058:	89 cb                	mov    ebx,ecx
c002105a:	c1 fb 1f             	sar    ebx,0x1f
c002105d:	53                   	push   ebx
c002105e:	51                   	push   ecx
c002105f:	52                   	push   edx
c0021060:	50                   	push   eax
c0021061:	e8 ce 5a 00 00       	call   c0026b34 <__udivdi3>
c0021066:	83 c4 10             	add    esp,0x10
c0021069:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002106d:	89 01                	mov    DWORD PTR [ecx],eax
c002106f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021072:	b8 00 00 00 00       	mov    eax,0x0
c0021077:	eb 41                	jmp    c00210ba <fatWrapperIoctl+0xfe>
c0021079:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002107e:	75 07                	jne    c0021087 <fatWrapperIoctl+0xcb>
c0021080:	b8 00 00 00 00       	mov    eax,0x0
c0021085:	eb 33                	jmp    c00210ba <fatWrapperIoctl+0xfe>
c0021087:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002108c:	75 19                	jne    c00210a7 <fatWrapperIoctl+0xeb>
c002108e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021092:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021096:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002109a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00210a0:	b8 00 00 00 00       	mov    eax,0x0
c00210a5:	eb 13                	jmp    c00210ba <fatWrapperIoctl+0xfe>
c00210a7:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00210ac:	75 07                	jne    c00210b5 <fatWrapperIoctl+0xf9>
c00210ae:	b8 00 00 00 00       	mov    eax,0x0
c00210b3:	eb 05                	jmp    c00210ba <fatWrapperIoctl+0xfe>
c00210b5:	b8 04 00 00 00       	mov    eax,0x4
c00210ba:	83 c4 28             	add    esp,0x28
c00210bd:	5b                   	pop    ebx
c00210be:	c3                   	ret    
c00210bf:	90                   	nop

c00210c0 <FAT::FAT()>:
c00210c0:	83 ec 1c             	sub    esp,0x1c
c00210c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210c7:	83 ec 0c             	sub    esp,0xc
c00210ca:	50                   	push   eax
c00210cb:	e8 44 21 ff ff       	call   c0013214 <Filesystem::Filesystem()>
c00210d0:	83 c4 10             	add    esp,0x10
c00210d3:	ba 60 ca 02 c0       	mov    edx,0xc002ca60
c00210d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210dc:	89 10                	mov    DWORD PTR [eax],edx
c00210de:	c7 05 40 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c40,0x0
c00210e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00210f0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00210f5:	7f 15                	jg     c002110c <FAT::FAT()+0x4c>
c00210f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210fb:	c7 04 85 60 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce3a0],0xffffffff
c0021106:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002110a:	eb e4                	jmp    c00210f0 <FAT::FAT()+0x30>
c002110c:	90                   	nop
c002110d:	83 c4 1c             	add    esp,0x1c
c0021110:	c3                   	ret    
c0021111:	90                   	nop

c0021112 <FAT::fixFilepath(char*)>:
c0021112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021116:	8a 00                	mov    al,BYTE PTR [eax]
c0021118:	3c 40                	cmp    al,0x40
c002111a:	7e 2c                	jle    c0021148 <FAT::fixFilepath(char*)+0x36>
c002111c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021120:	8a 00                	mov    al,BYTE PTR [eax]
c0021122:	83 e8 41             	sub    eax,0x41
c0021125:	88 c2                	mov    dl,al
c0021127:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002112b:	88 10                	mov    BYTE PTR [eax],dl
c002112d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021131:	8a 00                	mov    al,BYTE PTR [eax]
c0021133:	0f be c0             	movsx  eax,al
c0021136:	8b 04 85 60 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce3a0]
c002113d:	83 c0 30             	add    eax,0x30
c0021140:	88 c2                	mov    dl,al
c0021142:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021146:	88 10                	mov    BYTE PTR [eax],dl
c0021148:	90                   	nop
c0021149:	c3                   	ret    

c002114a <FAT::open(char const*, void**, FileOpenMode)>:
c002114a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021150:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021158:	74 0a                	je     c0021164 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002115a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021162:	75 0a                	jne    c002116e <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021164:	b8 04 00 00 00       	mov    eax,0x4
c0021169:	e9 fd 00 00 00       	jmp    c002126b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002116e:	83 ec 08             	sub    esp,0x8
c0021171:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021178:	8d 44 24 14          	lea    eax,[esp+0x14]
c002117c:	50                   	push   eax
c002117d:	e8 ba f6 fd ff       	call   c000083c <strcpy>
c0021182:	83 c4 10             	add    esp,0x10
c0021185:	83 ec 08             	sub    esp,0x8
c0021188:	8d 44 24 10          	lea    eax,[esp+0x10]
c002118c:	50                   	push   eax
c002118d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021194:	e8 79 ff ff ff       	call   c0021112 <FAT::fixFilepath(char*)>
c0021199:	83 c4 10             	add    esp,0x10
c002119c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00211a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00211ab:	83 e0 01             	and    eax,0x1
c00211ae:	74 08                	je     c00211b8 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00211b0:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00211b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00211bf:	83 e0 04             	and    eax,0x4
c00211c2:	74 10                	je     c00211d4 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00211c4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00211cc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00211d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00211db:	83 e0 02             	and    eax,0x2
c00211de:	74 08                	je     c00211e8 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00211e0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00211e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00211ef:	83 e0 08             	and    eax,0x8
c00211f2:	74 08                	je     c00211fc <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00211f4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00211fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021203:	83 e0 10             	and    eax,0x10
c0021206:	74 08                	je     c0021210 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021208:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021210:	83 ec 0c             	sub    esp,0xc
c0021213:	68 50 02 00 00       	push   0x250
c0021218:	e8 2e e6 fe ff       	call   c000f84b <malloc>
c002121d:	83 c4 10             	add    esp,0x10
c0021220:	89 c2                	mov    edx,eax
c0021222:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021229:	89 10                	mov    DWORD PTR [eax],edx
c002122b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021233:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002123a:	8b 00                	mov    eax,DWORD PTR [eax]
c002123c:	83 ec 04             	sub    esp,0x4
c002123f:	52                   	push   edx
c0021240:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021244:	52                   	push   edx
c0021245:	50                   	push   eax
c0021246:	e8 4e 3d fe ff       	call   c0004f99 <f_open>
c002124b:	83 c4 10             	add    esp,0x10
c002124e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021255:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002125d:	74 07                	je     c0021266 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002125f:	b8 01 00 00 00       	mov    eax,0x1
c0021264:	eb 05                	jmp    c002126b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021266:	b8 00 00 00 00       	mov    eax,0x0
c002126b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021271:	c3                   	ret    

c0021272 <FAT::openDir(char const*, void**)>:
c0021272:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021278:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021280:	74 0a                	je     c002128c <FAT::openDir(char const*, void**)+0x1a>
c0021282:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002128a:	75 07                	jne    c0021293 <FAT::openDir(char const*, void**)+0x21>
c002128c:	b8 04 00 00 00       	mov    eax,0x4
c0021291:	eb 7d                	jmp    c0021310 <FAT::openDir(char const*, void**)+0x9e>
c0021293:	83 ec 08             	sub    esp,0x8
c0021296:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002129d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212a1:	50                   	push   eax
c00212a2:	e8 95 f5 fd ff       	call   c000083c <strcpy>
c00212a7:	83 c4 10             	add    esp,0x10
c00212aa:	83 ec 08             	sub    esp,0x8
c00212ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212b1:	50                   	push   eax
c00212b2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212b9:	e8 54 fe ff ff       	call   c0021112 <FAT::fixFilepath(char*)>
c00212be:	83 c4 10             	add    esp,0x10
c00212c1:	83 ec 0c             	sub    esp,0xc
c00212c4:	6a 4c                	push   0x4c
c00212c6:	e8 80 e5 fe ff       	call   c000f84b <malloc>
c00212cb:	83 c4 10             	add    esp,0x10
c00212ce:	89 c2                	mov    edx,eax
c00212d0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212d7:	89 10                	mov    DWORD PTR [eax],edx
c00212d9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00212e2:	83 ec 08             	sub    esp,0x8
c00212e5:	8d 54 24 14          	lea    edx,[esp+0x14]
c00212e9:	52                   	push   edx
c00212ea:	50                   	push   eax
c00212eb:	e8 e1 4c fe ff       	call   c0005fd1 <f_opendir>
c00212f0:	83 c4 10             	add    esp,0x10
c00212f3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00212fa:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021302:	74 07                	je     c002130b <FAT::openDir(char const*, void**)+0x99>
c0021304:	b8 01 00 00 00       	mov    eax,0x1
c0021309:	eb 05                	jmp    c0021310 <FAT::openDir(char const*, void**)+0x9e>
c002130b:	b8 00 00 00 00       	mov    eax,0x0
c0021310:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021316:	c3                   	ret    
c0021317:	90                   	nop

c0021318 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021318:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002131e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021326:	75 0a                	jne    c0021332 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021328:	b8 04 00 00 00       	mov    eax,0x4
c002132d:	e9 c9 00 00 00       	jmp    c00213fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021332:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002133a:	75 0a                	jne    c0021346 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002133c:	b8 04 00 00 00       	mov    eax,0x4
c0021341:	e9 b5 00 00 00       	jmp    c00213fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021346:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002134e:	75 0a                	jne    c002135a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021350:	b8 04 00 00 00       	mov    eax,0x4
c0021355:	e9 a1 00 00 00       	jmp    c00213fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002135a:	83 ec 08             	sub    esp,0x8
c002135d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021364:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002136b:	50                   	push   eax
c002136c:	e8 cb f4 fd ff       	call   c000083c <strcpy>
c0021371:	83 c4 10             	add    esp,0x10
c0021374:	83 ec 08             	sub    esp,0x8
c0021377:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002137e:	50                   	push   eax
c002137f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021386:	e8 87 fd ff ff       	call   c0021112 <FAT::fixFilepath(char*)>
c002138b:	83 c4 10             	add    esp,0x10
c002138e:	83 ec 08             	sub    esp,0x8
c0021391:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021395:	50                   	push   eax
c0021396:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002139d:	50                   	push   eax
c002139e:	e8 ed 4d fe ff       	call   c0006190 <f_stat>
c00213a3:	83 c4 10             	add    esp,0x10
c00213a6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00213ad:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00213b4:	85 c0                	test   eax,eax
c00213b6:	74 07                	je     c00213bf <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00213b8:	83 f8 04             	cmp    eax,0x4
c00213bb:	74 32                	je     c00213ef <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00213bd:	eb 37                	jmp    c00213f6 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00213bf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00213c3:	0f b6 c0             	movzx  eax,al
c00213c6:	83 e0 10             	and    eax,0x10
c00213c9:	0f 95 c2             	setne  dl
c00213cc:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00213d3:	88 10                	mov    BYTE PTR [eax],dl
c00213d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00213d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00213dc:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00213e3:	89 01                	mov    DWORD PTR [ecx],eax
c00213e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00213e8:	b8 00 00 00 00       	mov    eax,0x0
c00213ed:	eb 0c                	jmp    c00213fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213ef:	b8 02 00 00 00       	mov    eax,0x2
c00213f4:	eb 05                	jmp    c00213fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213f6:	b8 01 00 00 00       	mov    eax,0x1
c00213fb:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021401:	c3                   	ret    

c0021402 <FAT::unlink(char const*)>:
c0021402:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021408:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021410:	75 07                	jne    c0021419 <FAT::unlink(char const*)+0x17>
c0021412:	b8 04 00 00 00       	mov    eax,0x4
c0021417:	eb 5c                	jmp    c0021475 <FAT::unlink(char const*)+0x73>
c0021419:	83 ec 08             	sub    esp,0x8
c002141c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021423:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021427:	50                   	push   eax
c0021428:	e8 0f f4 fd ff       	call   c000083c <strcpy>
c002142d:	83 c4 10             	add    esp,0x10
c0021430:	83 ec 08             	sub    esp,0x8
c0021433:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021437:	50                   	push   eax
c0021438:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002143f:	e8 ce fc ff ff       	call   c0021112 <FAT::fixFilepath(char*)>
c0021444:	83 c4 10             	add    esp,0x10
c0021447:	83 ec 0c             	sub    esp,0xc
c002144a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002144e:	50                   	push   eax
c002144f:	e8 8e 50 fe ff       	call   c00064e2 <f_unlink>
c0021454:	83 c4 10             	add    esp,0x10
c0021457:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002145e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021465:	85 c0                	test   eax,eax
c0021467:	75 07                	jne    c0021470 <FAT::unlink(char const*)+0x6e>
c0021469:	b8 00 00 00 00       	mov    eax,0x0
c002146e:	eb 05                	jmp    c0021475 <FAT::unlink(char const*)+0x73>
c0021470:	b8 01 00 00 00       	mov    eax,0x1
c0021475:	81 c4 1c 01 00 00    	add    esp,0x11c
c002147b:	c3                   	ret    

c002147c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002147c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021482:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021489:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021490:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021494:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021498:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00214a0:	75 0a                	jne    c00214ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00214a2:	b8 04 00 00 00       	mov    eax,0x4
c00214a7:	e9 1c 01 00 00       	jmp    c00215c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00214ac:	83 ec 08             	sub    esp,0x8
c00214af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00214b6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214ba:	50                   	push   eax
c00214bb:	e8 7c f3 fd ff       	call   c000083c <strcpy>
c00214c0:	83 c4 10             	add    esp,0x10
c00214c3:	83 ec 08             	sub    esp,0x8
c00214c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00214ca:	50                   	push   eax
c00214cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00214d2:	e8 3b fc ff ff       	call   c0021112 <FAT::fixFilepath(char*)>
c00214d7:	83 c4 10             	add    esp,0x10
c00214da:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00214e2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00214ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00214ef:	83 e0 01             	and    eax,0x1
c00214f2:	74 08                	je     c00214fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00214f4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00214fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021501:	83 e0 02             	and    eax,0x2
c0021504:	74 08                	je     c002150e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021506:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002150e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021513:	83 e0 04             	and    eax,0x4
c0021516:	74 08                	je     c0021520 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021518:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021520:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021525:	83 e0 08             	and    eax,0x8
c0021528:	74 08                	je     c0021532 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002152a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021532:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021537:	83 e0 01             	and    eax,0x1
c002153a:	74 08                	je     c0021544 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002153c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021544:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021549:	83 e0 02             	and    eax,0x2
c002154c:	74 08                	je     c0021556 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002154e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021556:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002155b:	83 e0 04             	and    eax,0x4
c002155e:	74 08                	je     c0021568 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021560:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021568:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002156d:	83 e0 08             	and    eax,0x8
c0021570:	74 08                	je     c002157a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021572:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002157a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021581:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021588:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021590:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021598:	83 ec 04             	sub    esp,0x4
c002159b:	52                   	push   edx
c002159c:	50                   	push   eax
c002159d:	8d 44 24 24          	lea    eax,[esp+0x24]
c00215a1:	50                   	push   eax
c00215a2:	e8 dd 55 fe ff       	call   c0006b84 <f_chmod>
c00215a7:	83 c4 10             	add    esp,0x10
c00215aa:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00215b1:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00215b8:	85 c0                	test   eax,eax
c00215ba:	75 07                	jne    c00215c3 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00215bc:	b8 00 00 00 00       	mov    eax,0x0
c00215c1:	eb 05                	jmp    c00215c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00215c3:	b8 01 00 00 00       	mov    eax,0x1
c00215c8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00215ce:	c3                   	ret    
c00215cf:	90                   	nop

c00215d0 <FAT::rename(char const*, char const*)>:
c00215d0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00215d6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00215de:	74 0a                	je     c00215ea <FAT::rename(char const*, char const*)+0x1a>
c00215e0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00215e8:	75 0a                	jne    c00215f4 <FAT::rename(char const*, char const*)+0x24>
c00215ea:	b8 04 00 00 00       	mov    eax,0x4
c00215ef:	e9 98 00 00 00       	jmp    c002168c <FAT::rename(char const*, char const*)+0xbc>
c00215f4:	83 ec 08             	sub    esp,0x8
c00215f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215fe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021605:	50                   	push   eax
c0021606:	e8 31 f2 fd ff       	call   c000083c <strcpy>
c002160b:	83 c4 10             	add    esp,0x10
c002160e:	83 ec 08             	sub    esp,0x8
c0021611:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021618:	50                   	push   eax
c0021619:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021620:	e8 ed fa ff ff       	call   c0021112 <FAT::fixFilepath(char*)>
c0021625:	83 c4 10             	add    esp,0x10
c0021628:	83 ec 08             	sub    esp,0x8
c002162b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021632:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021636:	50                   	push   eax
c0021637:	e8 00 f2 fd ff       	call   c000083c <strcpy>
c002163c:	83 c4 10             	add    esp,0x10
c002163f:	83 ec 08             	sub    esp,0x8
c0021642:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021646:	50                   	push   eax
c0021647:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002164e:	e8 bf fa ff ff       	call   c0021112 <FAT::fixFilepath(char*)>
c0021653:	83 c4 10             	add    esp,0x10
c0021656:	83 ec 08             	sub    esp,0x8
c0021659:	8d 44 24 14          	lea    eax,[esp+0x14]
c002165d:	50                   	push   eax
c002165e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021665:	50                   	push   eax
c0021666:	e8 26 52 fe ff       	call   c0006891 <f_rename>
c002166b:	83 c4 10             	add    esp,0x10
c002166e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021675:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002167c:	85 c0                	test   eax,eax
c002167e:	75 07                	jne    c0021687 <FAT::rename(char const*, char const*)+0xb7>
c0021680:	b8 00 00 00 00       	mov    eax,0x0
c0021685:	eb 05                	jmp    c002168c <FAT::rename(char const*, char const*)+0xbc>
c0021687:	b8 01 00 00 00       	mov    eax,0x1
c002168c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021692:	c3                   	ret    
c0021693:	90                   	nop

c0021694 <FAT::mkdir(char const*)>:
c0021694:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002169a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00216a2:	75 07                	jne    c00216ab <FAT::mkdir(char const*)+0x17>
c00216a4:	b8 04 00 00 00       	mov    eax,0x4
c00216a9:	eb 5c                	jmp    c0021707 <FAT::mkdir(char const*)+0x73>
c00216ab:	83 ec 08             	sub    esp,0x8
c00216ae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216b9:	50                   	push   eax
c00216ba:	e8 7d f1 fd ff       	call   c000083c <strcpy>
c00216bf:	83 c4 10             	add    esp,0x10
c00216c2:	83 ec 08             	sub    esp,0x8
c00216c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216c9:	50                   	push   eax
c00216ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216d1:	e8 3c fa ff ff       	call   c0021112 <FAT::fixFilepath(char*)>
c00216d6:	83 c4 10             	add    esp,0x10
c00216d9:	83 ec 0c             	sub    esp,0xc
c00216dc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216e0:	50                   	push   eax
c00216e1:	e8 7f 4f fe ff       	call   c0006665 <f_mkdir>
c00216e6:	83 c4 10             	add    esp,0x10
c00216e9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00216f0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00216f7:	85 c0                	test   eax,eax
c00216f9:	75 07                	jne    c0021702 <FAT::mkdir(char const*)+0x6e>
c00216fb:	b8 00 00 00 00       	mov    eax,0x0
c0021700:	eb 05                	jmp    c0021707 <FAT::mkdir(char const*)+0x73>
c0021702:	b8 01 00 00 00       	mov    eax,0x1
c0021707:	81 c4 1c 01 00 00    	add    esp,0x11c
c002170d:	c3                   	ret    

c002170e <FAT::exists(char const*)>:
c002170e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021714:	83 ec 08             	sub    esp,0x8
c0021717:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002171e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021722:	50                   	push   eax
c0021723:	e8 14 f1 fd ff       	call   c000083c <strcpy>
c0021728:	83 c4 10             	add    esp,0x10
c002172b:	83 ec 08             	sub    esp,0x8
c002172e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021732:	50                   	push   eax
c0021733:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002173a:	e8 d3 f9 ff ff       	call   c0021112 <FAT::fixFilepath(char*)>
c002173f:	83 c4 10             	add    esp,0x10
c0021742:	83 ec 08             	sub    esp,0x8
c0021745:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002174c:	50                   	push   eax
c002174d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021751:	50                   	push   eax
c0021752:	e8 39 4a fe ff       	call   c0006190 <f_stat>
c0021757:	83 c4 10             	add    esp,0x10
c002175a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021761:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021768:	85 c0                	test   eax,eax
c002176a:	75 04                	jne    c0021770 <FAT::exists(char const*)+0x62>
c002176c:	b0 01                	mov    al,0x1
c002176e:	eb 02                	jmp    c0021772 <FAT::exists(char const*)+0x64>
c0021770:	b0 00                	mov    al,0x0
c0021772:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021778:	c3                   	ret    
c0021779:	90                   	nop

c002177a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002177a:	b8 08 00 00 00       	mov    eax,0x8
c002177f:	c3                   	ret    

c0021780 <ISO9660::seek(void*, unsigned long long)>:
c0021780:	53                   	push   ebx
c0021781:	b8 04 00 00 00       	mov    eax,0x4
c0021786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002178a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002178e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021792:	85 d2                	test   edx,edx
c0021794:	74 17                	je     c00217ad <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021796:	89 c8                	mov    eax,ecx
c0021798:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002179b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002179e:	b8 01 00 00 00       	mov    eax,0x1
c00217a3:	73 08                	jae    c00217ad <ISO9660::seek(void*, unsigned long long)+0x2d>
c00217a5:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00217a8:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00217ab:	31 c0                	xor    eax,eax
c00217ad:	5b                   	pop    ebx
c00217ae:	c3                   	ret    
c00217af:	90                   	nop

c00217b0 <ISO9660::tell(void*, unsigned long long*)>:
c00217b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00217b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217b8:	85 d2                	test   edx,edx
c00217ba:	74 12                	je     c00217ce <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00217bc:	85 c0                	test   eax,eax
c00217be:	74 0e                	je     c00217ce <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00217c0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00217c3:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00217c6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00217c9:	89 10                	mov    DWORD PTR [eax],edx
c00217cb:	31 c0                	xor    eax,eax
c00217cd:	c3                   	ret    
c00217ce:	b8 04 00 00 00       	mov    eax,0x4
c00217d3:	c3                   	ret    

c00217d4 <ISO9660::getName()>:
c00217d4:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c00217d9:	c3                   	ret    

c00217da <ISO9660::stat(void*, unsigned long long*)>:
c00217da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00217de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217e2:	85 d2                	test   edx,edx
c00217e4:	74 12                	je     c00217f8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00217e6:	85 c0                	test   eax,eax
c00217e8:	74 0e                	je     c00217f8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00217ea:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00217ed:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00217f0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00217f3:	89 10                	mov    DWORD PTR [eax],edx
c00217f5:	31 c0                	xor    eax,eax
c00217f7:	c3                   	ret    
c00217f8:	b8 04 00 00 00       	mov    eax,0x4
c00217fd:	c3                   	ret    

c00217fe <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00217fe:	b8 01 00 00 00       	mov    eax,0x1
c0021803:	c3                   	ret    

c0021804 <ISO9660::unlink(char const*)>:
c0021804:	b8 01 00 00 00       	mov    eax,0x1
c0021809:	c3                   	ret    

c002180a <ISO9660::write(void*, unsigned long, void*, int*)>:
c002180a:	b8 01 00 00 00       	mov    eax,0x1
c002180f:	c3                   	ret    

c0021810 <ISO9660::rename(char const*, char const*)>:
c0021810:	b8 01 00 00 00       	mov    eax,0x1
c0021815:	c3                   	ret    

c0021816 <ISO9660::mkdir(char const*)>:
c0021816:	b8 01 00 00 00       	mov    eax,0x1
c002181b:	c3                   	ret    

c002181c <ISO9660::close(void*)>:
c002181c:	83 ec 0c             	sub    esp,0xc
c002181f:	b8 04 00 00 00       	mov    eax,0x4
c0021824:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021828:	85 d2                	test   edx,edx
c002182a:	74 0e                	je     c002183a <ISO9660::close(void*)+0x1e>
c002182c:	83 ec 0c             	sub    esp,0xc
c002182f:	52                   	push   edx
c0021830:	e8 26 e0 fe ff       	call   c000f85b <free>
c0021835:	83 c4 10             	add    esp,0x10
c0021838:	31 c0                	xor    eax,eax
c002183a:	83 c4 0c             	add    esp,0xc
c002183d:	c3                   	ret    

c002183e <ISO9660::closeDir(void*)>:
c002183e:	83 ec 0c             	sub    esp,0xc
c0021841:	b8 04 00 00 00       	mov    eax,0x4
c0021846:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002184a:	85 d2                	test   edx,edx
c002184c:	74 0e                	je     c002185c <ISO9660::closeDir(void*)+0x1e>
c002184e:	83 ec 0c             	sub    esp,0xc
c0021851:	52                   	push   edx
c0021852:	e8 04 e0 fe ff       	call   c000f85b <free>
c0021857:	83 c4 10             	add    esp,0x10
c002185a:	31 c0                	xor    eax,eax
c002185c:	83 c4 0c             	add    esp,0xc
c002185f:	c3                   	ret    

c0021860 <ISO9660::~ISO9660()>:
c0021860:	83 ec 0c             	sub    esp,0xc
c0021863:	ba 24 cb 02 c0       	mov    edx,0xc002cb24
c0021868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002186c:	89 10                	mov    DWORD PTR [eax],edx
c002186e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021872:	83 ec 0c             	sub    esp,0xc
c0021875:	50                   	push   eax
c0021876:	e8 bd 19 ff ff       	call   c0013238 <Filesystem::~Filesystem()>
c002187b:	83 c4 10             	add    esp,0x10
c002187e:	90                   	nop
c002187f:	83 c4 0c             	add    esp,0xc
c0021882:	c3                   	ret    
c0021883:	90                   	nop

c0021884 <ISO9660::~ISO9660()>:
c0021884:	83 ec 0c             	sub    esp,0xc
c0021887:	83 ec 0c             	sub    esp,0xc
c002188a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002188e:	e8 cd ff ff ff       	call   c0021860 <ISO9660::~ISO9660()>
c0021893:	83 c4 10             	add    esp,0x10
c0021896:	83 ec 08             	sub    esp,0x8
c0021899:	6a 08                	push   0x8
c002189b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002189f:	e8 85 15 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00218a4:	83 c4 10             	add    esp,0x10
c00218a7:	83 c4 0c             	add    esp,0xc
c00218aa:	c3                   	ret    

c00218ab <__memmem(unsigned char*, int, unsigned char*, int)>:
c00218ab:	55                   	push   ebp
c00218ac:	31 c9                	xor    ecx,ecx
c00218ae:	57                   	push   edi
c00218af:	56                   	push   esi
c00218b0:	53                   	push   ebx
c00218b1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00218b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00218b9:	89 eb                	mov    ebx,ebp
c00218bb:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00218bf:	39 ce                	cmp    esi,ecx
c00218c1:	7e 17                	jle    c00218da <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00218c3:	31 d2                	xor    edx,edx
c00218c5:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00218c9:	7d 13                	jge    c00218de <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00218cb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00218cf:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00218d2:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00218d5:	75 0d                	jne    c00218e4 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00218d7:	42                   	inc    edx
c00218d8:	eb eb                	jmp    c00218c5 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00218da:	31 c0                	xor    eax,eax
c00218dc:	eb 0a                	jmp    c00218e8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00218de:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00218e2:	eb 04                	jmp    c00218e8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00218e4:	41                   	inc    ecx
c00218e5:	43                   	inc    ebx
c00218e6:	eb d7                	jmp    c00218bf <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00218e8:	5b                   	pop    ebx
c00218e9:	5e                   	pop    esi
c00218ea:	5f                   	pop    edi
c00218eb:	5d                   	pop    ebp
c00218ec:	c3                   	ret    

c00218ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00218ed:	56                   	push   esi
c00218ee:	53                   	push   ebx
c00218ef:	52                   	push   edx
c00218f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218f4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00218f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00218fc:	39 0d 40 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d40,ecx
c0021902:	75 08                	jne    c002190c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021904:	38 05 94 db 02 c0    	cmp    BYTE PTR ds:0xc002db94,al
c002190a:	74 2b                	je     c0021937 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002190c:	83 ec 0c             	sub    esp,0xc
c002190f:	a2 94 db 02 c0       	mov    ds:0xc002db94,al
c0021914:	68 60 1d 03 c0       	push   0xc0031d60
c0021919:	0f be c0             	movsx  eax,al
c002191c:	6a 01                	push   0x1
c002191e:	89 0d 40 1d 03 c0    	mov    DWORD PTR ds:0xc0031d40,ecx
c0021924:	31 db                	xor    ebx,ebx
c0021926:	53                   	push   ebx
c0021927:	51                   	push   ecx
c0021928:	ff 34 85 1c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14e4]
c002192f:	e8 66 4e ff ff       	call   c001679a <LogicalDisk::read(unsigned long long, int, void*)>
c0021934:	83 c4 20             	add    esp,0x20
c0021937:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002193f:	c7 44 24 14 60 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031d60
c0021947:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002194b:	58                   	pop    eax
c002194c:	5b                   	pop    ebx
c002194d:	5e                   	pop    esi
c002194e:	e9 f9 ed fd ff       	jmp    c000074c <memcpy>
c0021953:	90                   	nop

c0021954 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021954:	81 ec 10 08 00 00    	sub    esp,0x810
c002195a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021961:	83 c0 41             	add    eax,0x41
c0021964:	0f be c0             	movsx  eax,al
c0021967:	50                   	push   eax
c0021968:	8d 44 24 08          	lea    eax,[esp+0x8]
c002196c:	50                   	push   eax
c002196d:	6a 10                	push   0x10
c002196f:	e8 79 ff ff ff       	call   c00218ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021974:	83 c4 10             	add    esp,0x10
c0021977:	31 c0                	xor    eax,eax
c0021979:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002197e:	75 1d                	jne    c002199d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021980:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021985:	75 16                	jne    c002199d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021987:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002198c:	75 0f                	jne    c002199d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002198e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021993:	75 08                	jne    c002199d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021995:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002199a:	0f 94 c0             	sete   al
c002199d:	81 c4 0c 08 00 00    	add    esp,0x80c
c00219a3:	c3                   	ret    

c00219a4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00219a4:	55                   	push   ebp
c00219a5:	57                   	push   edi
c00219a6:	56                   	push   esi
c00219a7:	53                   	push   ebx
c00219a8:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00219ae:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00219b5:	85 ed                	test   ebp,ebp
c00219b7:	0f 84 d6 01 00 00    	je     c0021b93 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00219bd:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00219c5:	0f 84 c8 01 00 00    	je     c0021b93 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00219cb:	b8 01 00 00 00       	mov    eax,0x1
c00219d0:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00219d4:	0f 85 be 01 00 00    	jne    c0021b98 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00219da:	31 d2                	xor    edx,edx
c00219dc:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00219e3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00219e6:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00219e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00219ed:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00219f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00219f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00219f7:	01 f0                	add    eax,esi
c00219f9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00219fc:	11 fa                	adc    edx,edi
c00219fe:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021a02:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021a06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021a0a:	19 d1                	sbb    ecx,edx
c0021a0c:	72 0a                	jb     c0021a18 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021a0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a16:	eb 13                	jmp    c0021a2b <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a20:	29 f0                	sub    eax,esi
c0021a22:	19 fa                	sbb    edx,edi
c0021a24:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a2b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a2e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021a31:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021a35:	51                   	push   ecx
c0021a36:	c1 e0 0b             	shl    eax,0xb
c0021a39:	01 c6                	add    esi,eax
c0021a3b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a3f:	11 d7                	adc    edi,edx
c0021a41:	50                   	push   eax
c0021a42:	89 fa                	mov    edx,edi
c0021a44:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021a48:	89 f0                	mov    eax,esi
c0021a4a:	53                   	push   ebx
c0021a4b:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a4f:	50                   	push   eax
c0021a50:	e8 98 fe ff ff       	call   c00218ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a55:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a59:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021a5c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021a60:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021a66:	83 c4 10             	add    esp,0x10
c0021a69:	b8 00 08 00 00       	mov    eax,0x800
c0021a6e:	29 d0                	sub    eax,edx
c0021a70:	39 c1                	cmp    ecx,eax
c0021a72:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021a76:	83 d9 00             	sbb    ecx,0x0
c0021a79:	7d 1c                	jge    c0021a97 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021a7b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021a80:	75 12                	jne    c0021a94 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021a82:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a8f:	e9 fb 00 00 00       	jmp    c0021b8f <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021a94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a97:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021a9a:	31 d2                	xor    edx,edx
c0021a9c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021aa0:	39 c2                	cmp    edx,eax
c0021aa2:	7d 14                	jge    c0021ab8 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021aa4:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021aab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021aaf:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021ab2:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021ab5:	42                   	inc    edx
c0021ab6:	eb e8                	jmp    c0021aa0 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021ab8:	89 c3                	mov    ebx,eax
c0021aba:	85 c0                	test   eax,eax
c0021abc:	79 02                	jns    c0021ac0 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021abe:	31 db                	xor    ebx,ebx
c0021ac0:	99                   	cdq    
c0021ac1:	01 c3                	add    ebx,eax
c0021ac3:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021aca:	01 c6                	add    esi,eax
c0021acc:	11 d7                	adc    edi,edx
c0021ace:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021ad2:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021ad6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021ad9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021add:	29 c6                	sub    esi,eax
c0021adf:	19 d7                	sbb    edi,edx
c0021ae1:	89 34 24             	mov    DWORD PTR [esp],esi
c0021ae4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021ae8:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021aed:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021af0:	b8 00 00 00 00       	mov    eax,0x0
c0021af5:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021af9:	7d 3e                	jge    c0021b39 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021afb:	52                   	push   edx
c0021afc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b00:	50                   	push   eax
c0021b01:	53                   	push   ebx
c0021b02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021b06:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021b0a:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021b0e:	50                   	push   eax
c0021b0f:	e8 d9 fd ff ff       	call   c00218ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b14:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021b1c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021b21:	81 c3 00 08 00 00    	add    ebx,0x800
c0021b27:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021b2f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021b34:	83 c4 10             	add    esp,0x10
c0021b37:	eb af                	jmp    c0021ae8 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021b39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b3d:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021b40:	74 32                	je     c0021b74 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021b42:	50                   	push   eax
c0021b43:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b47:	50                   	push   eax
c0021b48:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021b4c:	50                   	push   eax
c0021b4d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021b51:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021b55:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021b59:	56                   	push   esi
c0021b5a:	e8 8e fd ff ff       	call   c00218ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b5f:	83 c4 0c             	add    esp,0xc
c0021b62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021b66:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021b6a:	50                   	push   eax
c0021b6b:	53                   	push   ebx
c0021b6c:	e8 db eb fd ff       	call   c000074c <memcpy>
c0021b71:	83 c4 10             	add    esp,0x10
c0021b74:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b7b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021b83:	89 38                	mov    DWORD PTR [eax],edi
c0021b85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b89:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021b8c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021b8f:	31 c0                	xor    eax,eax
c0021b91:	eb 05                	jmp    c0021b98 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021b93:	b8 04 00 00 00       	mov    eax,0x4
c0021b98:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021b9e:	5b                   	pop    ebx
c0021b9f:	5e                   	pop    esi
c0021ba0:	5f                   	pop    edi
c0021ba1:	5d                   	pop    ebp
c0021ba2:	c3                   	ret    
c0021ba3:	90                   	nop

c0021ba4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021ba4:	55                   	push   ebp
c0021ba5:	57                   	push   edi
c0021ba6:	56                   	push   esi
c0021ba7:	53                   	push   ebx
c0021ba8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021bae:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021bb5:	85 f6                	test   esi,esi
c0021bb7:	0f 84 64 02 00 00    	je     c0021e21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021bbd:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021bc5:	0f 84 56 02 00 00    	je     c0021e21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021bcb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021bce:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021bd1:	75 0a                	jne    c0021bdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021bd3:	b8 07 00 00 00       	mov    eax,0x7
c0021bd8:	e9 49 02 00 00       	jmp    c0021e26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021bdd:	50                   	push   eax
c0021bde:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021be2:	50                   	push   eax
c0021be3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bea:	53                   	push   ebx
c0021beb:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bed:	c1 e0 0b             	shl    eax,0xb
c0021bf0:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021bf3:	c1 e8 0b             	shr    eax,0xb
c0021bf6:	50                   	push   eax
c0021bf7:	e8 f1 fc ff ff       	call   c00218ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bfc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021bff:	83 c4 10             	add    esp,0x10
c0021c02:	89 c1                	mov    ecx,eax
c0021c04:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021c07:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021c0d:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021c10:	84 db                	test   bl,bl
c0021c12:	0f 85 90 00 00 00    	jne    c0021ca8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021c18:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021c1e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c24:	29 c7                	sub    edi,eax
c0021c26:	89 fb                	mov    ebx,edi
c0021c28:	c1 fb 1f             	sar    ebx,0x1f
c0021c2b:	01 f8                	add    eax,edi
c0021c2d:	11 da                	adc    edx,ebx
c0021c2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021c37:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021c3a:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021c3d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c40:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c43:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c46:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021c4a:	89 d8                	mov    eax,ebx
c0021c4c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021c4f:	ba 00 00 00 00       	mov    edx,0x0
c0021c54:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021c58:	b8 00 00 00 00       	mov    eax,0x0
c0021c5d:	73 0b                	jae    c0021c6a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021c5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021c62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021c66:	29 f8                	sub    eax,edi
c0021c68:	19 da                	sbb    edx,ebx
c0021c6a:	89 d3                	mov    ebx,edx
c0021c6c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c6f:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c72:	09 c3                	or     ebx,eax
c0021c74:	0f 84 59 ff ff ff    	je     c0021bd3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021c7a:	55                   	push   ebp
c0021c7b:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021c7f:	50                   	push   eax
c0021c80:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021c87:	53                   	push   ebx
c0021c88:	8b 06                	mov    eax,DWORD PTR [esi]
c0021c8a:	c1 e0 0b             	shl    eax,0xb
c0021c8d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021c91:	c1 e8 0b             	shr    eax,0xb
c0021c94:	50                   	push   eax
c0021c95:	e8 53 fc ff ff       	call   c00218ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c9a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c9d:	83 c4 10             	add    esp,0x10
c0021ca0:	25 ff 07 00 00       	and    eax,0x7ff
c0021ca5:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021ca8:	57                   	push   edi
c0021ca9:	6a 28                	push   0x28
c0021cab:	6a 00                	push   0x0
c0021cad:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021cb1:	50                   	push   eax
c0021cb2:	e8 c9 ea fd ff       	call   c0000780 <memset>
c0021cb7:	31 d2                	xor    edx,edx
c0021cb9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021cbc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021cc2:	89 f8                	mov    eax,edi
c0021cc4:	83 c0 21             	add    eax,0x21
c0021cc7:	83 d2 00             	adc    edx,0x0
c0021cca:	89 c7                	mov    edi,eax
c0021ccc:	89 d5                	mov    ebp,edx
c0021cce:	83 c4 10             	add    esp,0x10
c0021cd1:	31 c9                	xor    ecx,ecx
c0021cd3:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021cda:	83 f9 28             	cmp    ecx,0x28
c0021cdd:	88 04 24             	mov    BYTE PTR [esp],al
c0021ce0:	0f 94 c2             	sete   dl
c0021ce3:	88 d0                	mov    al,dl
c0021ce5:	ba ff 07 00 00       	mov    edx,0x7ff
c0021cea:	39 fa                	cmp    edx,edi
c0021cec:	ba 00 00 00 00       	mov    edx,0x0
c0021cf1:	19 ea                	sbb    edx,ebp
c0021cf3:	0f 92 c2             	setb   dl
c0021cf6:	09 c2                	or     edx,eax
c0021cf8:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021cfc:	0f 94 c0             	sete   al
c0021cff:	08 d0                	or     al,dl
c0021d01:	75 16                	jne    c0021d19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021d03:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021d07:	74 10                	je     c0021d19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021d09:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021d0c:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021d10:	41                   	inc    ecx
c0021d11:	83 c7 01             	add    edi,0x1
c0021d14:	83 d5 00             	adc    ebp,0x0
c0021d17:	eb ba                	jmp    c0021cd3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021d19:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021d20:	83 ec 0c             	sub    esp,0xc
c0021d23:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021d27:	57                   	push   edi
c0021d28:	e8 6f ea fd ff       	call   c000079c <strlen>
c0021d2d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021d35:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021d39:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021d40:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021d43:	5a                   	pop    edx
c0021d44:	25 ff 07 00 00       	and    eax,0x7ff
c0021d49:	01 c8                	add    eax,ecx
c0021d4b:	59                   	pop    ecx
c0021d4c:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021d52:	83 e0 02             	and    eax,0x2
c0021d55:	3c 01                	cmp    al,0x1
c0021d57:	19 c0                	sbb    eax,eax
c0021d59:	83 c0 02             	add    eax,0x2
c0021d5c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021d60:	57                   	push   edi
c0021d61:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021d65:	50                   	push   eax
c0021d66:	e8 d1 ea fd ff       	call   c000083c <strcpy>
c0021d6b:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021d6f:	83 c4 10             	add    esp,0x10
c0021d72:	84 c0                	test   al,al
c0021d74:	75 21                	jne    c0021d97 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021d76:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021d7e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d86:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d8e:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021d95:	eb 28                	jmp    c0021dbf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d97:	fe c8                	dec    al
c0021d99:	75 24                	jne    c0021dbf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d9b:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021da3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021dab:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021db3:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021dba:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021dbf:	0f b6 fb             	movzx  edi,bl
c0021dc2:	31 db                	xor    ebx,ebx
c0021dc4:	50                   	push   eax
c0021dc5:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021dcc:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021dd0:	50                   	push   eax
c0021dd1:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021dd8:	e8 6f e9 fd ff       	call   c000074c <memcpy>
c0021ddd:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021de4:	89 f9                	mov    ecx,edi
c0021de6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021dec:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021def:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021df2:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021df5:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021df8:	83 c4 10             	add    esp,0x10
c0021dfb:	39 c7                	cmp    edi,eax
c0021dfd:	89 df                	mov    edi,ebx
c0021dff:	19 d7                	sbb    edi,edx
c0021e01:	72 10                	jb     c0021e13 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021e03:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021e0a:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021e11:	eb 0a                	jmp    c0021e1d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021e13:	29 c8                	sub    eax,ecx
c0021e15:	19 da                	sbb    edx,ebx
c0021e17:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021e1a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021e1d:	31 c0                	xor    eax,eax
c0021e1f:	eb 05                	jmp    c0021e26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021e21:	b8 04 00 00 00       	mov    eax,0x4
c0021e26:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021e2c:	5b                   	pop    ebx
c0021e2d:	5e                   	pop    esi
c0021e2e:	5f                   	pop    edi
c0021e2f:	5d                   	pop    ebp
c0021e30:	c3                   	ret    

c0021e31 <readRoot(unsigned int*, unsigned int*, char)>:
c0021e31:	81 ec 40 08 00 00    	sub    esp,0x840
c0021e37:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021e3f:	50                   	push   eax
c0021e40:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021e44:	50                   	push   eax
c0021e45:	6a 10                	push   0x10
c0021e47:	e8 a1 fa ff ff       	call   c00218ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e4c:	83 c4 0c             	add    esp,0xc
c0021e4f:	6a 22                	push   0x22
c0021e51:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021e58:	50                   	push   eax
c0021e59:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021e5d:	50                   	push   eax
c0021e5e:	e8 e9 e8 fd ff       	call   c000074c <memcpy>
c0021e63:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021e6a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021e6e:	89 10                	mov    DWORD PTR [eax],edx
c0021e70:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021e77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021e7b:	89 10                	mov    DWORD PTR [eax],edx
c0021e7d:	b0 01                	mov    al,0x1
c0021e7f:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021e85:	c3                   	ret    

c0021e86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021e86:	55                   	push   ebp
c0021e87:	57                   	push   edi
c0021e88:	56                   	push   esi
c0021e89:	53                   	push   ebx
c0021e8a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021e90:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021e97:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021e9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ea2:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021ea6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021eaa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021eae:	75 03                	jne    c0021eb3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021eb0:	83 c3 02             	add    ebx,0x2
c0021eb3:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021eb6:	75 03                	jne    c0021ebb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021eb8:	43                   	inc    ebx
c0021eb9:	eb f8                	jmp    c0021eb3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021ebb:	51                   	push   ecx
c0021ebc:	68 00 01 00 00       	push   0x100
c0021ec1:	6a 00                	push   0x0
c0021ec3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ec7:	50                   	push   eax
c0021ec8:	e8 b3 e8 fd ff       	call   c0000780 <memset>
c0021ecd:	83 c4 10             	add    esp,0x10
c0021ed0:	31 d2                	xor    edx,edx
c0021ed2:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021ed5:	84 c0                	test   al,al
c0021ed7:	74 21                	je     c0021efa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021ed9:	3c 2f                	cmp    al,0x2f
c0021edb:	75 0b                	jne    c0021ee8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021edd:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021ee1:	bd 01 00 00 00       	mov    ebp,0x1
c0021ee6:	eb 14                	jmp    c0021efc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021ee8:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021eeb:	80 f9 19             	cmp    cl,0x19
c0021eee:	77 03                	ja     c0021ef3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ef0:	83 e8 20             	sub    eax,0x20
c0021ef3:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021ef7:	42                   	inc    edx
c0021ef8:	eb d8                	jmp    c0021ed2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021efa:	31 ed                	xor    ebp,ebp
c0021efc:	83 ec 0c             	sub    esp,0xc
c0021eff:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021f06:	e8 40 d9 fe ff       	call   c000f84b <malloc>
c0021f0b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021f12:	89 c6                	mov    esi,eax
c0021f14:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021f1a:	c1 ef 0b             	shr    edi,0xb
c0021f1d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021f24:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021f28:	83 c4 10             	add    esp,0x10
c0021f2b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021f30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021f34:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021f3b:	74 28                	je     c0021f65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021f3d:	52                   	push   edx
c0021f3e:	57                   	push   edi
c0021f3f:	50                   	push   eax
c0021f40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021f44:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021f4b:	e8 9d f9 ff ff       	call   c00218ed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f54:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021f5b:	05 00 08 00 00       	add    eax,0x800
c0021f60:	83 c4 10             	add    esp,0x10
c0021f63:	eb cb                	jmp    c0021f30 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021f65:	83 ec 0c             	sub    esp,0xc
c0021f68:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021f6c:	57                   	push   edi
c0021f6d:	e8 2a e8 fd ff       	call   c000079c <strlen>
c0021f72:	50                   	push   eax
c0021f73:	57                   	push   edi
c0021f74:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021f7b:	56                   	push   esi
c0021f7c:	e8 2a f9 ff ff       	call   c00218ab <__memmem(unsigned char*, int, unsigned char*, int)>
c0021f81:	83 c4 20             	add    esp,0x20
c0021f84:	85 c0                	test   eax,eax
c0021f86:	75 13                	jne    c0021f9b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021f88:	83 ec 0c             	sub    esp,0xc
c0021f8b:	56                   	push   esi
c0021f8c:	e8 ca d8 fe ff       	call   c000f85b <free>
c0021f91:	83 c4 10             	add    esp,0x10
c0021f94:	31 c0                	xor    eax,eax
c0021f96:	e9 b3 00 00 00       	jmp    c002204e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f9b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021f9f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021fa3:	c1 e7 08             	shl    edi,0x8
c0021fa6:	c1 e2 10             	shl    edx,0x10
c0021fa9:	09 d7                	or     edi,edx
c0021fab:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021faf:	09 d7                	or     edi,edx
c0021fb1:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021fb5:	c1 e2 18             	shl    edx,0x18
c0021fb8:	09 d7                	or     edi,edx
c0021fba:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021fbe:	89 d1                	mov    ecx,edx
c0021fc0:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021fc4:	c1 e1 08             	shl    ecx,0x8
c0021fc7:	c1 e2 10             	shl    edx,0x10
c0021fca:	09 ca                	or     edx,ecx
c0021fcc:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021fd0:	09 ca                	or     edx,ecx
c0021fd2:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021fd6:	c1 e1 18             	shl    ecx,0x18
c0021fd9:	09 ca                	or     edx,ecx
c0021fdb:	89 e9                	mov    ecx,ebp
c0021fdd:	84 c9                	test   cl,cl
c0021fdf:	74 3c                	je     c002201d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021fe5:	83 ec 0c             	sub    esp,0xc
c0021fe8:	56                   	push   esi
c0021fe9:	e8 6d d8 fe ff       	call   c000f85b <free>
c0021fee:	83 c4 0c             	add    esp,0xc
c0021ff1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ff8:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ffd:	50                   	push   eax
c0021ffe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022005:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002200c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022010:	52                   	push   edx
c0022011:	57                   	push   edi
c0022012:	53                   	push   ebx
c0022013:	e8 6e fe ff ff       	call   c0021e86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022018:	83 c4 20             	add    esp,0x20
c002201b:	eb 31                	jmp    c002204e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002201d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022020:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022027:	d0 e8                	shr    al,1
c0022029:	89 3b                	mov    DWORD PTR [ebx],edi
c002202b:	83 e0 01             	and    eax,0x1
c002202e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022035:	83 ec 0c             	sub    esp,0xc
c0022038:	89 13                	mov    DWORD PTR [ebx],edx
c002203a:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022041:	89 03                	mov    DWORD PTR [ebx],eax
c0022043:	56                   	push   esi
c0022044:	e8 12 d8 fe ff       	call   c000f85b <free>
c0022049:	83 c4 10             	add    esp,0x10
c002204c:	b0 01                	mov    al,0x1
c002204e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022054:	5b                   	pop    ebx
c0022055:	5e                   	pop    esi
c0022056:	5f                   	pop    edi
c0022057:	5d                   	pop    ebp
c0022058:	c3                   	ret    

c0022059 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022059:	55                   	push   ebp
c002205a:	57                   	push   edi
c002205b:	56                   	push   esi
c002205c:	53                   	push   ebx
c002205d:	83 ec 20             	sub    esp,0x20
c0022060:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022064:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022068:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002206c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022074:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002207c:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022081:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022087:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002208d:	57                   	push   edi
c002208e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022092:	50                   	push   eax
c0022093:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022097:	50                   	push   eax
c0022098:	e8 94 fd ff ff       	call   c0021e31 <readRoot(unsigned int*, unsigned int*, char)>
c002209d:	5a                   	pop    edx
c002209e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00220a2:	e8 f5 e6 fd ff       	call   c000079c <strlen>
c00220a7:	83 c4 10             	add    esp,0x10
c00220aa:	83 f8 03             	cmp    eax,0x3
c00220ad:	77 17                	ja     c00220c6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00220af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220b3:	89 03                	mov    DWORD PTR [ebx],eax
c00220b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220b9:	89 06                	mov    DWORD PTR [esi],eax
c00220bb:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00220c2:	b0 01                	mov    al,0x1
c00220c4:	eb 19                	jmp    c00220df <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00220c6:	50                   	push   eax
c00220c7:	55                   	push   ebp
c00220c8:	57                   	push   edi
c00220c9:	56                   	push   esi
c00220ca:	53                   	push   ebx
c00220cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00220d7:	e8 aa fd ff ff       	call   c0021e86 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00220dc:	83 c4 20             	add    esp,0x20
c00220df:	83 c4 1c             	add    esp,0x1c
c00220e2:	5b                   	pop    ebx
c00220e3:	5e                   	pop    esi
c00220e4:	5f                   	pop    edi
c00220e5:	5d                   	pop    ebp
c00220e6:	c3                   	ret    
c00220e7:	90                   	nop

c00220e8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00220e8:	57                   	push   edi
c00220e9:	56                   	push   esi
c00220ea:	53                   	push   ebx
c00220eb:	83 ec 10             	sub    esp,0x10
c00220ee:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00220f2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00220f6:	85 ff                	test   edi,edi
c00220f8:	0f 84 9d 00 00 00    	je     c002219b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00220fe:	85 f6                	test   esi,esi
c0022100:	0f 84 95 00 00 00    	je     c002219b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022106:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002210b:	74 17                	je     c0022124 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002210d:	83 ec 0c             	sub    esp,0xc
c0022110:	68 db ca 02 c0       	push   0xc002cadb
c0022115:	e8 ef 0d ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c002211a:	83 c4 10             	add    esp,0x10
c002211d:	b8 03 00 00 00       	mov    eax,0x3
c0022122:	eb 7c                	jmp    c00221a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022124:	83 ec 0c             	sub    esp,0xc
c0022127:	6a 1c                	push   0x1c
c0022129:	e8 1d d7 fe ff       	call   c000f84b <malloc>
c002212e:	89 07                	mov    DWORD PTR [edi],eax
c0022130:	89 c3                	mov    ebx,eax
c0022132:	58                   	pop    eax
c0022133:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022137:	50                   	push   eax
c0022138:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002213b:	50                   	push   eax
c002213c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022140:	50                   	push   eax
c0022141:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022145:	50                   	push   eax
c0022146:	56                   	push   esi
c0022147:	e8 0d ff ff ff       	call   c0022059 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002214c:	83 c4 20             	add    esp,0x20
c002214f:	84 c0                	test   al,al
c0022151:	74 07                	je     c002215a <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022153:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022158:	74 0b                	je     c0022165 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002215a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002215e:	b8 01 00 00 00       	mov    eax,0x1
c0022163:	eb 3b                	jmp    c00221a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022165:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022169:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002216d:	89 03                	mov    DWORD PTR [ebx],eax
c002216f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022176:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002217a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022181:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022188:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002218b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022192:	8a 06                	mov    al,BYTE PTR [esi]
c0022194:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022197:	31 c0                	xor    eax,eax
c0022199:	eb 05                	jmp    c00221a0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002219b:	b8 04 00 00 00       	mov    eax,0x4
c00221a0:	83 c4 10             	add    esp,0x10
c00221a3:	5b                   	pop    ebx
c00221a4:	5e                   	pop    esi
c00221a5:	5f                   	pop    edi
c00221a6:	c3                   	ret    
c00221a7:	90                   	nop

c00221a8 <ISO9660::exists(char const*)>:
c00221a8:	83 ec 28             	sub    esp,0x28
c00221ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221af:	8d 54 24 18          	lea    edx,[esp+0x18]
c00221b3:	52                   	push   edx
c00221b4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00221b7:	52                   	push   edx
c00221b8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00221bc:	52                   	push   edx
c00221bd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00221c1:	52                   	push   edx
c00221c2:	50                   	push   eax
c00221c3:	e8 91 fe ff ff       	call   c0022059 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221c8:	83 c4 3c             	add    esp,0x3c
c00221cb:	c3                   	ret    

c00221cc <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00221cc:	56                   	push   esi
c00221cd:	53                   	push   ebx
c00221ce:	83 ec 14             	sub    esp,0x14
c00221d1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00221d5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00221d9:	85 db                	test   ebx,ebx
c00221db:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00221df:	0f 94 c2             	sete   dl
c00221e2:	85 f6                	test   esi,esi
c00221e4:	0f 94 c0             	sete   al
c00221e7:	08 c2                	or     dl,al
c00221e9:	75 68                	jne    c0022253 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00221eb:	85 c9                	test   ecx,ecx
c00221ed:	74 64                	je     c0022253 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00221ef:	83 ec 0c             	sub    esp,0xc
c00221f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00221f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00221ff:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022206:	50                   	push   eax
c0022207:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002220a:	50                   	push   eax
c002220b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002220f:	50                   	push   eax
c0022210:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022214:	50                   	push   eax
c0022215:	51                   	push   ecx
c0022216:	e8 3e fe ff ff       	call   c0022059 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002221b:	83 c4 20             	add    esp,0x20
c002221e:	ba 01 00 00 00       	mov    edx,0x1
c0022223:	84 c0                	test   al,al
c0022225:	74 31                	je     c0022258 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002222b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022232:	89 03                	mov    DWORD PTR [ebx],eax
c0022234:	ba 00 00 00 00       	mov    edx,0x0
c0022239:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002223d:	85 c0                	test   eax,eax
c002223f:	0f 95 06             	setne  BYTE PTR [esi]
c0022242:	74 14                	je     c0022258 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022244:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002224a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022251:	eb 05                	jmp    c0022258 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022253:	ba 04 00 00 00       	mov    edx,0x4
c0022258:	83 c4 14             	add    esp,0x14
c002225b:	89 d0                	mov    eax,edx
c002225d:	5b                   	pop    ebx
c002225e:	5e                   	pop    esi
c002225f:	c3                   	ret    

c0022260 <ISO9660::openDir(char const*, void**)>:
c0022260:	57                   	push   edi
c0022261:	56                   	push   esi
c0022262:	53                   	push   ebx
c0022263:	83 ec 10             	sub    esp,0x10
c0022266:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002226a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002226e:	85 ff                	test   edi,edi
c0022270:	0f 84 95 00 00 00    	je     c002230b <ISO9660::openDir(char const*, void**)+0xab>
c0022276:	85 f6                	test   esi,esi
c0022278:	0f 84 8d 00 00 00    	je     c002230b <ISO9660::openDir(char const*, void**)+0xab>
c002227e:	83 ec 0c             	sub    esp,0xc
c0022281:	6a 1c                	push   0x1c
c0022283:	e8 c3 d5 fe ff       	call   c000f84b <malloc>
c0022288:	89 07                	mov    DWORD PTR [edi],eax
c002228a:	89 c3                	mov    ebx,eax
c002228c:	59                   	pop    ecx
c002228d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022291:	50                   	push   eax
c0022292:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022295:	50                   	push   eax
c0022296:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002229a:	50                   	push   eax
c002229b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002229f:	50                   	push   eax
c00222a0:	56                   	push   esi
c00222a1:	e8 b3 fd ff ff       	call   c0022059 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00222a6:	83 c4 20             	add    esp,0x20
c00222a9:	84 c0                	test   al,al
c00222ab:	74 07                	je     c00222b4 <ISO9660::openDir(char const*, void**)+0x54>
c00222ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00222b2:	75 21                	jne    c00222d5 <ISO9660::openDir(char const*, void**)+0x75>
c00222b4:	0f b6 c0             	movzx  eax,al
c00222b7:	52                   	push   edx
c00222b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00222bc:	50                   	push   eax
c00222bd:	68 01 cb 02 c0       	push   0xc002cb01
c00222c2:	e8 42 0c ff ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00222c7:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00222cb:	83 c4 10             	add    esp,0x10
c00222ce:	b8 01 00 00 00       	mov    eax,0x1
c00222d3:	eb 3b                	jmp    c0022310 <ISO9660::openDir(char const*, void**)+0xb0>
c00222d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00222dd:	89 03                	mov    DWORD PTR [ebx],eax
c00222df:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00222e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222ea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00222f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222f8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00222fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022302:	8a 06                	mov    al,BYTE PTR [esi]
c0022304:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022307:	31 c0                	xor    eax,eax
c0022309:	eb 05                	jmp    c0022310 <ISO9660::openDir(char const*, void**)+0xb0>
c002230b:	b8 04 00 00 00       	mov    eax,0x4
c0022310:	83 c4 10             	add    esp,0x10
c0022313:	5b                   	pop    ebx
c0022314:	5e                   	pop    esi
c0022315:	5f                   	pop    edi
c0022316:	c3                   	ret    
c0022317:	90                   	nop

c0022318 <ISO9660::ISO9660()>:
c0022318:	83 ec 0c             	sub    esp,0xc
c002231b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002231f:	83 ec 0c             	sub    esp,0xc
c0022322:	50                   	push   eax
c0022323:	e8 ec 0e ff ff       	call   c0013214 <Filesystem::Filesystem()>
c0022328:	83 c4 10             	add    esp,0x10
c002232b:	ba 24 cb 02 c0       	mov    edx,0xc002cb24
c0022330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022334:	89 10                	mov    DWORD PTR [eax],edx
c0022336:	90                   	nop
c0022337:	83 c4 0c             	add    esp,0xc
c002233a:	c3                   	ret    
c002233b:	90                   	nop

c002233c <SoundChannel::~SoundChannel()>:
c002233c:	83 ec 0c             	sub    esp,0xc
c002233f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022343:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022346:	83 ec 0c             	sub    esp,0xc
c0022349:	50                   	push   eax
c002234a:	e8 0c d5 fe ff       	call   c000f85b <free>
c002234f:	83 c4 10             	add    esp,0x10
c0022352:	90                   	nop
c0022353:	83 c4 0c             	add    esp,0xc
c0022356:	c3                   	ret    
c0022357:	90                   	nop

c0022358 <SoundChannel::setSpeed(float)>:
c0022358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002235c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022360:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022363:	c3                   	ret    

c0022364 <SoundChannel::getSpeed()>:
c0022364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022368:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002236b:	c3                   	ret    

c002236c <SoundChannel::setVolume(int)>:
c002236c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022370:	83 f8 64             	cmp    eax,0x64
c0022373:	7e 05                	jle    c002237a <SoundChannel::setVolume(int)+0xe>
c0022375:	b8 64 00 00 00       	mov    eax,0x64
c002237a:	85 c0                	test   eax,eax
c002237c:	79 02                	jns    c0022380 <SoundChannel::setVolume(int)+0x14>
c002237e:	31 c0                	xor    eax,eax
c0022380:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022384:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022387:	c3                   	ret    

c0022388 <SoundChannel::getVolume()>:
c0022388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002238f:	c3                   	ret    

c0022390 <SoundChannel::pause()>:
c0022390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022394:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022398:	c3                   	ret    
c0022399:	90                   	nop

c002239a <SoundChannel::SoundChannel(int, int, int, int)>:
c002239a:	83 ec 1c             	sub    esp,0x1c
c002239d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00223a1:	e8 ea ff ff ff       	call   c0022390 <SoundChannel::pause()>
c00223a6:	83 c4 04             	add    esp,0x4
c00223a9:	6a 50                	push   0x50
c00223ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00223af:	e8 b8 ff ff ff       	call   c002236c <SoundChannel::setVolume(int)>
c00223b4:	83 c4 08             	add    esp,0x8
c00223b7:	a1 a0 cb 02 c0       	mov    eax,ds:0xc002cba0
c00223bc:	50                   	push   eax
c00223bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00223c1:	e8 92 ff ff ff       	call   c0022358 <SoundChannel::setSpeed(float)>
c00223c6:	83 c4 08             	add    esp,0x8
c00223c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00223d1:	89 10                	mov    DWORD PTR [eax],edx
c00223d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00223db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00223de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00223e9:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00223ee:	75 23                	jne    c0022413 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00223f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00223f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223fd:	0f af c2             	imul   eax,edx
c0022400:	85 c0                	test   eax,eax
c0022402:	79 03                	jns    c0022407 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022404:	83 c0 03             	add    eax,0x3
c0022407:	c1 f8 02             	sar    eax,0x2
c002240a:	05 a0 0f 00 00       	add    eax,0xfa0
c002240f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022417:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002241b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002241e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022422:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002242d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022438:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002243b:	c1 e0 02             	shl    eax,0x2
c002243e:	83 ec 0c             	sub    esp,0xc
c0022441:	50                   	push   eax
c0022442:	e8 04 d4 fe ff       	call   c000f84b <malloc>
c0022447:	83 c4 10             	add    esp,0x10
c002244a:	89 c2                	mov    edx,eax
c002244c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022450:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022453:	83 ec 04             	sub    esp,0x4
c0022456:	8d 44 24 08          	lea    eax,[esp+0x8]
c002245a:	50                   	push   eax
c002245b:	6a 01                	push   0x1
c002245d:	6a 04                	push   0x4
c002245f:	e8 43 67 fe ff       	call   c0008ba7 <src_new>
c0022464:	83 c4 10             	add    esp,0x10
c0022467:	89 c2                	mov    edx,eax
c0022469:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002246d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022474:	85 c0                	test   eax,eax
c0022476:	74 10                	je     c0022488 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022478:	83 ec 0c             	sub    esp,0xc
c002247b:	68 84 cb 02 c0       	push   0xc002cb84
c0022480:	e8 c2 81 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0022485:	83 c4 10             	add    esp,0x10
c0022488:	a0 60 29 03 c0       	mov    al,ds:0xc0032960
c002248d:	83 f0 01             	xor    eax,0x1
c0022490:	84 c0                	test   al,al
c0022492:	74 57                	je     c00224eb <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022494:	a1 a4 cb 02 c0       	mov    eax,ds:0xc002cba4
c0022499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002249d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224a5:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00224ad:	7f 35                	jg     c00224e4 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00224af:	83 ec 0c             	sub    esp,0xc
c00224b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00224b6:	e8 a4 4f 00 00       	call   c002745f <__floatsisf>
c00224bb:	83 c4 10             	add    esp,0x10
c00224be:	8b 15 a4 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cba4
c00224c4:	83 ec 08             	sub    esp,0x8
c00224c7:	52                   	push   edx
c00224c8:	50                   	push   eax
c00224c9:	e8 a3 4b 00 00       	call   c0027071 <__mulsf3>
c00224ce:	83 c4 10             	add    esp,0x10
c00224d1:	89 c2                	mov    edx,eax
c00224d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224d7:	89 14 85 60 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdaa0],edx
c00224de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00224e2:	eb c1                	jmp    c00224a5 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00224e4:	c6 05 60 29 03 c0 01 	mov    BYTE PTR ds:0xc0032960,0x1
c00224eb:	90                   	nop
c00224ec:	83 c4 1c             	add    esp,0x1c
c00224ef:	c3                   	ret    

c00224f0 <SoundChannel::play()>:
c00224f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224f4:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00224f8:	c3                   	ret    
c00224f9:	90                   	nop

c00224fa <SoundChannel::paused()>:
c00224fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224fe:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022501:	c3                   	ret    

c0022502 <SoundChannel::getSampleRate()>:
c0022502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022506:	8b 00                	mov    eax,DWORD PTR [eax]
c0022508:	c3                   	ret    
c0022509:	90                   	nop

c002250a <SoundChannel::getBits()>:
c002250a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002250e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022511:	c3                   	ret    

c0022512 <SoundChannel::getBufferUsed()>:
c0022512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022516:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022519:	c3                   	ret    

c002251a <SoundChannel::getBufferSize()>:
c002251a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002251e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022521:	c3                   	ret    

c0022522 <SoundChannel::unbuffer(float*, int, int)>:
c0022522:	56                   	push   esi
c0022523:	53                   	push   ebx
c0022524:	83 ec 40             	sub    esp,0x40
c0022527:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002252b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002252e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022532:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022535:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022539:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002253d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022541:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022545:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022549:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002254d:	e8 0d 4f 00 00       	call   c002745f <__floatsisf>
c0022552:	5a                   	pop    edx
c0022553:	89 c6                	mov    esi,eax
c0022555:	ff 33                	push   DWORD PTR [ebx]
c0022557:	e8 03 4f 00 00       	call   c002745f <__floatsisf>
c002255c:	59                   	pop    ecx
c002255d:	5a                   	pop    edx
c002255e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022561:	50                   	push   eax
c0022562:	e8 0a 4b 00 00       	call   c0027071 <__mulsf3>
c0022567:	59                   	pop    ecx
c0022568:	5a                   	pop    edx
c0022569:	50                   	push   eax
c002256a:	56                   	push   esi
c002256b:	e8 c4 4c 00 00       	call   c0027234 <__divsf3>
c0022570:	89 04 24             	mov    DWORD PTR [esp],eax
c0022573:	e8 b7 61 00 00       	call   c002872f <__extendsfdf2>
c0022578:	59                   	pop    ecx
c0022579:	5e                   	pop    esi
c002257a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002257e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022582:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002258a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002258e:	50                   	push   eax
c002258f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022592:	e8 05 62 fe ff       	call   c000879c <src_process>
c0022597:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002259b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002259e:	83 c4 0c             	add    esp,0xc
c00225a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00225a4:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00225a7:	29 d0                	sub    eax,edx
c00225a9:	c1 e0 02             	shl    eax,0x2
c00225ac:	50                   	push   eax
c00225ad:	8d 04 91             	lea    eax,[ecx+edx*4]
c00225b0:	50                   	push   eax
c00225b1:	51                   	push   ecx
c00225b2:	e8 cd e0 fd ff       	call   c0000684 <memmove>
c00225b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225bb:	83 c4 44             	add    esp,0x44
c00225be:	5b                   	pop    ebx
c00225bf:	5e                   	pop    esi
c00225c0:	c3                   	ret    
c00225c1:	90                   	nop

c00225c2 <SoundChannel::buffer8(unsigned char*, int)>:
c00225c2:	55                   	push   ebp
c00225c3:	57                   	push   edi
c00225c4:	56                   	push   esi
c00225c5:	53                   	push   ebx
c00225c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00225ca:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00225ce:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00225d1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00225d5:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00225d8:	74 7a                	je     c0022654 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00225da:	85 ff                	test   edi,edi
c00225dc:	7e 76                	jle    c0022654 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00225de:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00225e2:	8d 70 01             	lea    esi,[eax+0x1]
c00225e5:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00225e8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00225eb:	8b 1c 9d 60 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdaa0]
c00225f2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00225f5:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00225f8:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00225fb:	74 5e                	je     c002265b <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00225fd:	83 ff 01             	cmp    edi,0x1
c0022600:	74 4b                	je     c002264d <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022602:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022606:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022609:	8d 70 01             	lea    esi,[eax+0x1]
c002260c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002260f:	8b 1c 9d 60 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdaa0]
c0022616:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022619:	b8 02 00 00 00       	mov    eax,0x2
c002261e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022621:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022624:	75 23                	jne    c0022649 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022626:	eb 27                	jmp    c002264f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022628:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002262d:	8d 71 01             	lea    esi,[ecx+0x1]
c0022630:	40                   	inc    eax
c0022631:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022634:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022637:	8b 1c 9d 60 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdaa0]
c002263e:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022641:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022644:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022647:	74 06                	je     c002264f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022649:	39 c7                	cmp    edi,eax
c002264b:	75 db                	jne    c0022628 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002264d:	89 f8                	mov    eax,edi
c002264f:	5b                   	pop    ebx
c0022650:	5e                   	pop    esi
c0022651:	5f                   	pop    edi
c0022652:	5d                   	pop    ebp
c0022653:	c3                   	ret    
c0022654:	5b                   	pop    ebx
c0022655:	31 c0                	xor    eax,eax
c0022657:	5e                   	pop    esi
c0022658:	5f                   	pop    edi
c0022659:	5d                   	pop    ebp
c002265a:	c3                   	ret    
c002265b:	b8 01 00 00 00       	mov    eax,0x1
c0022660:	eb ed                	jmp    c002264f <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022662 <SoundDevice::SoundDevice(char const*)>:
c0022662:	83 ec 1c             	sub    esp,0x1c
c0022665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022669:	83 ec 08             	sub    esp,0x8
c002266c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022670:	50                   	push   eax
c0022671:	e8 b0 1e ff ff       	call   c0014526 <Device::Device(char const*)>
c0022676:	83 c4 10             	add    esp,0x10
c0022679:	ba b0 cb 02 c0       	mov    edx,0xc002cbb0
c002267e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022682:	89 10                	mov    DWORD PTR [eax],edx
c0022684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022688:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022696:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00226a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00226a8:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00226ad:	7f 19                	jg     c00226c8 <SoundDevice::SoundDevice(char const*)+0x66>
c00226af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00226b7:	83 c2 54             	add    edx,0x54
c00226ba:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00226c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00226c6:	eb e0                	jmp    c00226a8 <SoundDevice::SoundDevice(char const*)+0x46>
c00226c8:	90                   	nop
c00226c9:	83 c4 1c             	add    esp,0x1c
c00226cc:	c3                   	ret    
c00226cd:	90                   	nop

c00226ce <SoundDevice::~SoundDevice()>:
c00226ce:	53                   	push   ebx
c00226cf:	83 ec 18             	sub    esp,0x18
c00226d2:	ba b0 cb 02 c0       	mov    edx,0xc002cbb0
c00226d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226db:	89 10                	mov    DWORD PTR [eax],edx
c00226dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00226e5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00226ea:	7f 46                	jg     c0022732 <SoundDevice::~SoundDevice()+0x64>
c00226ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00226f4:	83 c2 54             	add    edx,0x54
c00226f7:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00226fb:	85 c0                	test   eax,eax
c00226fd:	74 2d                	je     c002272c <SoundDevice::~SoundDevice()+0x5e>
c00226ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022703:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022707:	83 c2 54             	add    edx,0x54
c002270a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002270e:	85 db                	test   ebx,ebx
c0022710:	74 1a                	je     c002272c <SoundDevice::~SoundDevice()+0x5e>
c0022712:	83 ec 0c             	sub    esp,0xc
c0022715:	53                   	push   ebx
c0022716:	e8 21 fc ff ff       	call   c002233c <SoundChannel::~SoundChannel()>
c002271b:	83 c4 10             	add    esp,0x10
c002271e:	83 ec 08             	sub    esp,0x8
c0022721:	6a 2c                	push   0x2c
c0022723:	53                   	push   ebx
c0022724:	e8 00 07 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0022729:	83 c4 10             	add    esp,0x10
c002272c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022730:	eb b3                	jmp    c00226e5 <SoundDevice::~SoundDevice()+0x17>
c0022732:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022736:	83 ec 0c             	sub    esp,0xc
c0022739:	50                   	push   eax
c002273a:	e8 c9 1a ff ff       	call   c0014208 <Device::~Device()>
c002273f:	83 c4 10             	add    esp,0x10
c0022742:	90                   	nop
c0022743:	83 c4 18             	add    esp,0x18
c0022746:	5b                   	pop    ebx
c0022747:	c3                   	ret    

c0022748 <SoundDevice::~SoundDevice()>:
c0022748:	83 ec 0c             	sub    esp,0xc
c002274b:	83 ec 0c             	sub    esp,0xc
c002274e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022752:	e8 77 ff ff ff       	call   c00226ce <SoundDevice::~SoundDevice()>
c0022757:	83 c4 10             	add    esp,0x10
c002275a:	83 ec 08             	sub    esp,0x8
c002275d:	68 e4 01 00 00       	push   0x1e4
c0022762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022766:	e8 be 06 ff ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c002276b:	83 c4 10             	add    esp,0x10
c002276e:	83 c4 0c             	add    esp,0xc
c0022771:	c3                   	ret    

c0022772 <SoundDevice::getFreeChannelNum()>:
c0022772:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022776:	31 c0                	xor    eax,eax
c0022778:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022780:	74 09                	je     c002278b <SoundDevice::getFreeChannelNum()+0x19>
c0022782:	40                   	inc    eax
c0022783:	83 f8 20             	cmp    eax,0x20
c0022786:	75 f0                	jne    c0022778 <SoundDevice::getFreeChannelNum()+0x6>
c0022788:	83 c8 ff             	or     eax,0xffffffff
c002278b:	c3                   	ret    

c002278c <SoundDevice::addChannel(SoundChannel*)>:
c002278c:	56                   	push   esi
c002278d:	53                   	push   ebx
c002278e:	51                   	push   ecx
c002278f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022793:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022797:	53                   	push   ebx
c0022798:	e8 d5 ff ff ff       	call   c0022772 <SoundDevice::getFreeChannelNum()>
c002279d:	5a                   	pop    edx
c002279e:	83 f8 ff             	cmp    eax,0xffffffff
c00227a1:	74 51                	je     c00227f4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00227a3:	85 f6                	test   esi,esi
c00227a5:	74 4d                	je     c00227f4 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00227a7:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00227ae:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00227b5:	75 30                	jne    c00227e7 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00227b7:	83 ec 0c             	sub    esp,0xc
c00227ba:	56                   	push   esi
c00227bb:	e8 42 fd ff ff       	call   c0022502 <SoundChannel::getSampleRate()>
c00227c0:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00227c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00227c9:	e8 3c fd ff ff       	call   c002250a <SoundChannel::getBits()>
c00227ce:	83 c4 0c             	add    esp,0xc
c00227d1:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00227d7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00227d9:	50                   	push   eax
c00227da:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00227e0:	53                   	push   ebx
c00227e1:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00227e4:	83 c4 10             	add    esp,0x10
c00227e7:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00227ed:	b8 01 00 00 00       	mov    eax,0x1
c00227f2:	eb 03                	jmp    c00227f7 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00227f4:	83 c8 ff             	or     eax,0xffffffff
c00227f7:	5a                   	pop    edx
c00227f8:	5b                   	pop    ebx
c00227f9:	5e                   	pop    esi
c00227fa:	c3                   	ret    
c00227fb:	90                   	nop

c00227fc <SoundDevice::removeChannel(int)>:
c00227fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022804:	83 fa 1f             	cmp    edx,0x1f
c0022807:	77 23                	ja     c002282c <SoundDevice::removeChannel(int)+0x30>
c0022809:	8d 14 90             	lea    edx,[eax+edx*4]
c002280c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022813:	74 17                	je     c002282c <SoundDevice::removeChannel(int)+0x30>
c0022815:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002281f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022825:	75 05                	jne    c002282c <SoundDevice::removeChannel(int)+0x30>
c0022827:	8b 00                	mov    eax,DWORD PTR [eax]
c0022829:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002282c:	c3                   	ret    
c002282d:	90                   	nop

c002282e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002282e:	57                   	push   edi
c002282f:	56                   	push   esi
c0022830:	53                   	push   ebx
c0022831:	31 db                	xor    ebx,ebx
c0022833:	83 ec 10             	sub    esp,0x10
c0022836:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002283a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002283e:	0f 8d cb 00 00 00    	jge    c002290f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022844:	83 ec 0c             	sub    esp,0xc
c0022847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002284b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002284e:	e8 dc 5e 00 00       	call   c002872f <__extendsfdf2>
c0022853:	83 c4 10             	add    esp,0x10
c0022856:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002285a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002285e:	68 00 00 f0 3f       	push   0x3ff00000
c0022863:	6a 00                	push   0x0
c0022865:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022869:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002286d:	e8 49 4e 00 00       	call   c00276bb <__adddf3>
c0022872:	83 c4 10             	add    esp,0x10
c0022875:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022879:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002287d:	68 00 00 e0 3f       	push   0x3fe00000
c0022882:	6a 00                	push   0x0
c0022884:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002288c:	e8 a7 54 00 00       	call   c0027d38 <__muldf3>
c0022891:	83 c4 10             	add    esp,0x10
c0022894:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022898:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002289c:	68 00 00 60 40       	push   0x40600000
c00228a1:	6a 00                	push   0x0
c00228a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228ab:	e8 88 54 00 00       	call   c0027d38 <__muldf3>
c00228b0:	59                   	pop    ecx
c00228b1:	5f                   	pop    edi
c00228b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00228b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00228ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228c2:	e8 44 5d 00 00       	call   c002860b <__truncdfsf2>
c00228c7:	5a                   	pop    edx
c00228c8:	89 c7                	mov    edi,eax
c00228ca:	59                   	pop    ecx
c00228cb:	68 00 00 fe 42       	push   0x42fe0000
c00228d0:	50                   	push   eax
c00228d1:	e8 df 4d 00 00       	call   c00276b5 <__gesf2>
c00228d6:	83 c4 10             	add    esp,0x10
c00228d9:	85 c0                	test   eax,eax
c00228db:	78 06                	js     c00228e3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00228dd:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00228e1:	eb 26                	jmp    c0022909 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00228e3:	50                   	push   eax
c00228e4:	50                   	push   eax
c00228e5:	6a 00                	push   0x0
c00228e7:	57                   	push   edi
c00228e8:	e8 cc 4d 00 00       	call   c00276b9 <__lesf2>
c00228ed:	83 c4 10             	add    esp,0x10
c00228f0:	85 c0                	test   eax,eax
c00228f2:	7f 06                	jg     c00228fa <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00228f4:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00228f8:	eb 0f                	jmp    c0022909 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00228fa:	83 ec 0c             	sub    esp,0xc
c00228fd:	57                   	push   edi
c00228fe:	e8 c9 5e 00 00       	call   c00287cc <lrintf>
c0022903:	83 c4 10             	add    esp,0x10
c0022906:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022909:	43                   	inc    ebx
c002290a:	e9 2b ff ff ff       	jmp    c002283a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002290f:	83 c4 10             	add    esp,0x10
c0022912:	5b                   	pop    ebx
c0022913:	5e                   	pop    esi
c0022914:	5f                   	pop    edi
c0022915:	c3                   	ret    

c0022916 <SoundDevice::getAudio(int, float*, float*)>:
c0022916:	55                   	push   ebp
c0022917:	57                   	push   edi
c0022918:	56                   	push   esi
c0022919:	53                   	push   ebx
c002291a:	31 db                	xor    ebx,ebx
c002291c:	83 ec 20             	sub    esp,0x20
c002291f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022923:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022927:	c1 e0 02             	shl    eax,0x2
c002292a:	50                   	push   eax
c002292b:	6a 00                	push   0x0
c002292d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022931:	e8 4a de fd ff       	call   c0000780 <memset>
c0022936:	83 c4 10             	add    esp,0x10
c0022939:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002293d:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022944:	85 c0                	test   eax,eax
c0022946:	0f 84 d7 00 00 00    	je     c0022a23 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002294c:	83 ec 0c             	sub    esp,0xc
c002294f:	50                   	push   eax
c0022950:	e8 a5 fb ff ff       	call   c00224fa <SoundChannel::paused()>
c0022955:	83 c4 10             	add    esp,0x10
c0022958:	84 c0                	test   al,al
c002295a:	0f 85 c3 00 00 00    	jne    c0022a23 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022960:	83 ec 0c             	sub    esp,0xc
c0022963:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002296a:	e8 19 fa ff ff       	call   c0022388 <SoundChannel::getVolume()>
c002296f:	83 c4 10             	add    esp,0x10
c0022972:	85 c0                	test   eax,eax
c0022974:	0f 84 a9 00 00 00    	je     c0022a23 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002297a:	83 ec 0c             	sub    esp,0xc
c002297d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022984:	e8 ff f9 ff ff       	call   c0022388 <SoundChannel::getVolume()>
c0022989:	83 ec 0c             	sub    esp,0xc
c002298c:	50                   	push   eax
c002298d:	e8 cd 4a 00 00       	call   c002745f <__floatsisf>
c0022992:	59                   	pop    ecx
c0022993:	5d                   	pop    ebp
c0022994:	31 ed                	xor    ebp,ebp
c0022996:	68 00 00 c8 42       	push   0x42c80000
c002299b:	50                   	push   eax
c002299c:	e8 93 48 00 00       	call   c0027234 <__divsf3>
c00229a1:	83 c4 10             	add    esp,0x10
c00229a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00229a8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00229ac:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00229b2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00229b6:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00229bd:	e8 60 fb ff ff       	call   c0022522 <SoundChannel::unbuffer(float*, int, int)>
c00229c2:	83 c4 20             	add    esp,0x20
c00229c5:	89 c1                	mov    ecx,eax
c00229c7:	39 cd                	cmp    ebp,ecx
c00229c9:	7d 52                	jge    c0022a1d <SoundDevice::getAudio(int, float*, float*)+0x107>
c00229cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00229cf:	50                   	push   eax
c00229d0:	50                   	push   eax
c00229d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00229d5:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00229d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00229dc:	e8 90 46 00 00       	call   c0027071 <__mulsf3>
c00229e1:	5a                   	pop    edx
c00229e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00229e6:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00229ec:	e8 6e 4a 00 00       	call   c002745f <__floatsisf>
c00229f1:	59                   	pop    ecx
c00229f2:	5a                   	pop    edx
c00229f3:	50                   	push   eax
c00229f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229f8:	e8 37 48 00 00       	call   c0027234 <__divsf3>
c00229fd:	59                   	pop    ecx
c00229fe:	5a                   	pop    edx
c00229ff:	50                   	push   eax
c0022a00:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022a04:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022a07:	e8 42 43 00 00       	call   c0026d4e <__addsf3>
c0022a0c:	83 c4 10             	add    esp,0x10
c0022a0f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022a13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022a17:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022a1a:	45                   	inc    ebp
c0022a1b:	eb aa                	jmp    c00229c7 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022a1d:	39 cf                	cmp    edi,ecx
c0022a1f:	7e 02                	jle    c0022a23 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022a21:	89 cf                	mov    edi,ecx
c0022a23:	43                   	inc    ebx
c0022a24:	83 fb 20             	cmp    ebx,0x20
c0022a27:	0f 85 10 ff ff ff    	jne    c002293d <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022a2d:	83 c4 1c             	add    esp,0x1c
c0022a30:	89 f8                	mov    eax,edi
c0022a32:	5b                   	pop    ebx
c0022a33:	5e                   	pop    esi
c0022a34:	5f                   	pop    edi
c0022a35:	5d                   	pop    ebp
c0022a36:	c3                   	ret    
c0022a37:	90                   	nop

c0022a38 <PCI::open(int, int, void*)>:
c0022a38:	83 ec 18             	sub    esp,0x18
c0022a3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022a3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022a41:	50                   	push   eax
c0022a42:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022a45:	31 c0                	xor    eax,eax
c0022a47:	83 c4 1c             	add    esp,0x1c
c0022a4a:	c3                   	ret    
c0022a4b:	90                   	nop

c0022a4c <PCI::close(int, int, void*)>:
c0022a4c:	31 c0                	xor    eax,eax
c0022a4e:	c3                   	ret    
c0022a4f:	90                   	nop

c0022a50 <PCI::PCI()>:
c0022a50:	83 ec 0c             	sub    esp,0xc
c0022a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a57:	83 ec 08             	sub    esp,0x8
c0022a5a:	68 e0 cb 02 c0       	push   0xc002cbe0
c0022a5f:	50                   	push   eax
c0022a60:	e8 45 11 ff ff       	call   c0013baa <Bus::Bus(char const*)>
c0022a65:	83 c4 10             	add    esp,0x10
c0022a68:	ba 4c cc 02 c0       	mov    edx,0xc002cc4c
c0022a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a71:	89 10                	mov    DWORD PTR [eax],edx
c0022a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a77:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a7d:	0f b6 d0             	movzx  edx,al
c0022a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a84:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a95:	0f b6 d0             	movzx  edx,al
c0022a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a9c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022aab:	8d 50 01             	lea    edx,[eax+0x1]
c0022aae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ab2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022ab8:	0f b6 d0             	movzx  edx,al
c0022abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022abf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022ac3:	83 c9 c0             	or     ecx,0xffffffc0
c0022ac6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022aca:	90                   	nop
c0022acb:	83 c4 0c             	add    esp,0xc
c0022ace:	c3                   	ret    
c0022acf:	90                   	nop

c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ad0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022ad4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ad9:	89 ca                	mov    edx,ecx
c0022adb:	c1 e0 10             	shl    eax,0x10
c0022ade:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022ae4:	09 d0                	or     eax,edx
c0022ae6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022aeb:	c1 e2 08             	shl    edx,0x8
c0022aee:	09 d0                	or     eax,edx
c0022af0:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022af5:	c1 e2 0b             	shl    edx,0xb
c0022af8:	09 d0                	or     eax,edx
c0022afa:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022aff:	0d 00 00 00 80       	or     eax,0x80000000
c0022b04:	ef                   	out    dx,eax
c0022b05:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b0a:	ed                   	in     eax,dx
c0022b0b:	83 e1 02             	and    ecx,0x2
c0022b0e:	0f b6 c9             	movzx  ecx,cl
c0022b11:	c1 e1 03             	shl    ecx,0x3
c0022b14:	d3 e8                	shr    eax,cl
c0022b16:	c3                   	ret    
c0022b17:	90                   	nop

c0022b18 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022b18:	6a 00                	push   0x0
c0022b1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1f:	50                   	push   eax
c0022b20:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b25:	50                   	push   eax
c0022b26:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b2b:	50                   	push   eax
c0022b2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b30:	e8 9b ff ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b35:	83 c4 14             	add    esp,0x14
c0022b38:	c3                   	ret    
c0022b39:	90                   	nop

c0022b3a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022b3a:	6a 0e                	push   0xe
c0022b3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b41:	50                   	push   eax
c0022b42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b47:	50                   	push   eax
c0022b48:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b4d:	50                   	push   eax
c0022b4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b52:	e8 79 ff ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b57:	83 c4 14             	add    esp,0x14
c0022b5a:	0f b6 c0             	movzx  eax,al
c0022b5d:	c3                   	ret    

c0022b5e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022b5e:	55                   	push   ebp
c0022b5f:	57                   	push   edi
c0022b60:	56                   	push   esi
c0022b61:	53                   	push   ebx
c0022b62:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022b67:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022b6c:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022b71:	6a 0a                	push   0xa
c0022b73:	56                   	push   esi
c0022b74:	55                   	push   ebp
c0022b75:	57                   	push   edi
c0022b76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b7a:	e8 51 ff ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b7f:	6a 0a                	push   0xa
c0022b81:	89 c3                	mov    ebx,eax
c0022b83:	56                   	push   esi
c0022b84:	0f b6 db             	movzx  ebx,bl
c0022b87:	55                   	push   ebp
c0022b88:	57                   	push   edi
c0022b89:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022b8d:	e8 3e ff ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b92:	83 c4 28             	add    esp,0x28
c0022b95:	25 00 ff 00 00       	and    eax,0xff00
c0022b9a:	09 d8                	or     eax,ebx
c0022b9c:	5b                   	pop    ebx
c0022b9d:	5e                   	pop    esi
c0022b9e:	5f                   	pop    edi
c0022b9f:	5d                   	pop    ebp
c0022ba0:	c3                   	ret    
c0022ba1:	90                   	nop

c0022ba2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022ba2:	6a 08                	push   0x8
c0022ba4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ba9:	50                   	push   eax
c0022baa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022baf:	50                   	push   eax
c0022bb0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bb5:	50                   	push   eax
c0022bb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bba:	e8 11 ff ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bbf:	83 c4 14             	add    esp,0x14
c0022bc2:	0f b6 c4             	movzx  eax,ah
c0022bc5:	c3                   	ret    

c0022bc6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022bc6:	6a 08                	push   0x8
c0022bc8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bcd:	50                   	push   eax
c0022bce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bd3:	50                   	push   eax
c0022bd4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bd9:	50                   	push   eax
c0022bda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bde:	e8 ed fe ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022be3:	83 c4 14             	add    esp,0x14
c0022be6:	c3                   	ret    
c0022be7:	90                   	nop

c0022be8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022be8:	6a 3c                	push   0x3c
c0022bea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bef:	50                   	push   eax
c0022bf0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bf5:	50                   	push   eax
c0022bf6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bfb:	50                   	push   eax
c0022bfc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c00:	e8 cb fe ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c05:	83 c4 14             	add    esp,0x14
c0022c08:	c3                   	ret    
c0022c09:	90                   	nop

c0022c0a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022c0a:	6a 18                	push   0x18
c0022c0c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c11:	50                   	push   eax
c0022c12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c17:	50                   	push   eax
c0022c18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c1d:	50                   	push   eax
c0022c1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022c22:	e8 a9 fe ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c27:	83 c4 14             	add    esp,0x14
c0022c2a:	0f b6 c4             	movzx  eax,ah
c0022c2d:	c3                   	ret    

c0022c2e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022c2e:	55                   	push   ebp
c0022c2f:	57                   	push   edi
c0022c30:	56                   	push   esi
c0022c31:	53                   	push   ebx
c0022c32:	50                   	push   eax
c0022c33:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022c37:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022c3c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022c41:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022c46:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022c4d:	8d 43 12             	lea    eax,[ebx+0x12]
c0022c50:	83 c3 10             	add    ebx,0x10
c0022c53:	0f b6 c0             	movzx  eax,al
c0022c56:	0f b6 db             	movzx  ebx,bl
c0022c59:	50                   	push   eax
c0022c5a:	51                   	push   ecx
c0022c5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022c5f:	57                   	push   edi
c0022c60:	55                   	push   ebp
c0022c61:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022c65:	e8 66 fe ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c6a:	53                   	push   ebx
c0022c6b:	89 c6                	mov    esi,eax
c0022c6d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022c71:	c1 e6 10             	shl    esi,0x10
c0022c74:	51                   	push   ecx
c0022c75:	57                   	push   edi
c0022c76:	55                   	push   ebp
c0022c77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c7b:	e8 50 fe ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c80:	83 c4 2c             	add    esp,0x2c
c0022c83:	0f b7 c0             	movzx  eax,ax
c0022c86:	5b                   	pop    ebx
c0022c87:	09 f0                	or     eax,esi
c0022c89:	5e                   	pop    esi
c0022c8a:	5f                   	pop    edi
c0022c8b:	5d                   	pop    ebp
c0022c8c:	c3                   	ret    
c0022c8d:	90                   	nop

c0022c8e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022c8e:	53                   	push   ebx
c0022c8f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c94:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c9d:	c1 e1 10             	shl    ecx,0x10
c0022ca0:	25 fc 00 00 00       	and    eax,0xfc
c0022ca5:	09 c1                	or     ecx,eax
c0022ca7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022cac:	c1 e0 08             	shl    eax,0x8
c0022caf:	09 c1                	or     ecx,eax
c0022cb1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022cb6:	c1 e0 0b             	shl    eax,0xb
c0022cb9:	09 c1                	or     ecx,eax
c0022cbb:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022cc1:	89 c8                	mov    eax,ecx
c0022cc3:	ef                   	out    dx,eax
c0022cc4:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022cc9:	ed                   	in     eax,dx
c0022cca:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022ccf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022cd4:	74 0a                	je     c0022ce0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022cd6:	0f b7 d8             	movzx  ebx,ax
c0022cd9:	89 d0                	mov    eax,edx
c0022cdb:	c1 e0 10             	shl    eax,0x10
c0022cde:	eb 05                	jmp    c0022ce5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022ce0:	66 31 c0             	xor    ax,ax
c0022ce3:	89 d3                	mov    ebx,edx
c0022ce5:	09 c3                	or     ebx,eax
c0022ce7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022cec:	89 c8                	mov    eax,ecx
c0022cee:	ef                   	out    dx,eax
c0022cef:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022cf4:	89 d8                	mov    eax,ebx
c0022cf6:	ef                   	out    dx,eax
c0022cf7:	5b                   	pop    ebx
c0022cf8:	c3                   	ret    
c0022cf9:	90                   	nop

c0022cfa <PCI::checkBus(unsigned char)>:
c0022cfa:	56                   	push   esi
c0022cfb:	53                   	push   ebx
c0022cfc:	31 db                	xor    ebx,ebx
c0022cfe:	51                   	push   ecx
c0022cff:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022d04:	52                   	push   edx
c0022d05:	53                   	push   ebx
c0022d06:	43                   	inc    ebx
c0022d07:	56                   	push   esi
c0022d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d0c:	e8 2b 03 00 00       	call   c002303c <PCI::checkDevice(unsigned char, unsigned char)>
c0022d11:	83 c4 10             	add    esp,0x10
c0022d14:	83 fb 20             	cmp    ebx,0x20
c0022d17:	75 eb                	jne    c0022d04 <PCI::checkBus(unsigned char)+0xa>
c0022d19:	58                   	pop    eax
c0022d1a:	5b                   	pop    ebx
c0022d1b:	5e                   	pop    esi
c0022d1c:	c3                   	ret    
c0022d1d:	90                   	nop

c0022d1e <PCI::foundDevice(PCIDeviceInfo)>:
c0022d1e:	55                   	push   ebp
c0022d1f:	57                   	push   edi
c0022d20:	56                   	push   esi
c0022d21:	53                   	push   ebx
c0022d22:	83 ec 1c             	sub    esp,0x1c
c0022d25:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d29:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022d2f:	0f 84 52 01 00 00    	je     c0022e87 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d35:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022d39:	66 81 f9 06 04       	cmp    cx,0x406
c0022d3e:	75 2c                	jne    c0022d6c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022d40:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022d45:	50                   	push   eax
c0022d46:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022d4b:	50                   	push   eax
c0022d4c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022d51:	50                   	push   eax
c0022d52:	56                   	push   esi
c0022d53:	e8 b2 fe ff ff       	call   c0022c0a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022d58:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022d5c:	0f b6 c0             	movzx  eax,al
c0022d5f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022d63:	83 c4 2c             	add    esp,0x2c
c0022d66:	5b                   	pop    ebx
c0022d67:	5e                   	pop    esi
c0022d68:	5f                   	pop    edi
c0022d69:	5d                   	pop    ebp
c0022d6a:	eb 8e                	jmp    c0022cfa <PCI::checkBus(unsigned char)>
c0022d6c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022d70:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022d76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d7a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022d7e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022d82:	88 d3                	mov    bl,dl
c0022d84:	85 c0                	test   eax,eax
c0022d86:	74 33                	je     c0022dbb <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022d88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022d8b:	85 d2                	test   edx,edx
c0022d8d:	74 28                	je     c0022db7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d8f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022d95:	31 ef                	xor    edi,ebp
c0022d97:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022d9d:	75 18                	jne    c0022db7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d9f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022da3:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022da9:	75 0c                	jne    c0022db7 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022dab:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022db1:	0f 84 d0 00 00 00    	je     c0022e87 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022db7:	8b 00                	mov    eax,DWORD PTR [eax]
c0022db9:	eb c9                	jmp    c0022d84 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022dbb:	66 81 f9 01 06       	cmp    cx,0x601
c0022dc0:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022dc4:	75 19                	jne    c0022ddf <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022dc6:	83 ec 0c             	sub    esp,0xc
c0022dc9:	68 64 01 00 00       	push   0x164
c0022dce:	e8 78 ca fe ff       	call   c000f84b <malloc>
c0022dd3:	89 c5                	mov    ebp,eax
c0022dd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0022dd8:	e8 95 0f 00 00       	call   c0023d72 <SATABus::SATABus()>
c0022ddd:	eb 1e                	jmp    c0022dfd <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022ddf:	66 81 f9 01 01       	cmp    cx,0x101
c0022de4:	75 60                	jne    c0022e46 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022de6:	83 ec 0c             	sub    esp,0xc
c0022de9:	68 70 02 00 00       	push   0x270
c0022dee:	e8 58 ca fe ff       	call   c000f84b <malloc>
c0022df3:	89 c5                	mov    ebp,eax
c0022df5:	89 04 24             	mov    DWORD PTR [esp],eax
c0022df8:	e8 03 03 00 00       	call   c0023100 <IDE::IDE()>
c0022dfd:	58                   	pop    eax
c0022dfe:	5a                   	pop    edx
c0022dff:	55                   	push   ebp
c0022e00:	56                   	push   esi
c0022e01:	e8 30 15 ff ff       	call   c0014336 <Device::addChild(Device*)>
c0022e06:	83 ec 1c             	sub    esp,0x1c
c0022e09:	b9 09 00 00 00       	mov    ecx,0x9
c0022e0e:	fc                   	cld    
c0022e0f:	89 e7                	mov    edi,esp
c0022e11:	89 de                	mov    esi,ebx
c0022e13:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e15:	55                   	push   ebp
c0022e16:	e8 25 14 ff ff       	call   c0014240 <Device::preOpenPCI(PCIDeviceInfo)>
c0022e1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022e1e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022e22:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022e2a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022e32:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022e3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e3d:	83 c4 4c             	add    esp,0x4c
c0022e40:	5b                   	pop    ebx
c0022e41:	5e                   	pop    esi
c0022e42:	5f                   	pop    edi
c0022e43:	5d                   	pop    ebp
c0022e44:	ff e0                	jmp    eax
c0022e46:	83 ec 0c             	sub    esp,0xc
c0022e49:	68 58 01 00 00       	push   0x158
c0022e4e:	e8 f8 c9 fe ff       	call   c000f84b <malloc>
c0022e53:	89 c5                	mov    ebp,eax
c0022e55:	58                   	pop    eax
c0022e56:	5a                   	pop    edx
c0022e57:	68 e8 cb 02 c0       	push   0xc002cbe8
c0022e5c:	55                   	push   ebp
c0022e5d:	e8 ca 17 ff ff       	call   c001462c <DriverlessDevice::DriverlessDevice(char const*)>
c0022e62:	59                   	pop    ecx
c0022e63:	5f                   	pop    edi
c0022e64:	55                   	push   ebp
c0022e65:	56                   	push   esi
c0022e66:	e8 cb 14 ff ff       	call   c0014336 <Device::addChild(Device*)>
c0022e6b:	b9 09 00 00 00       	mov    ecx,0x9
c0022e70:	fc                   	cld    
c0022e71:	89 df                	mov    edi,ebx
c0022e73:	89 de                	mov    esi,ebx
c0022e75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e77:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022e7b:	83 c4 2c             	add    esp,0x2c
c0022e7e:	5b                   	pop    ebx
c0022e7f:	5e                   	pop    esi
c0022e80:	5f                   	pop    edi
c0022e81:	5d                   	pop    ebp
c0022e82:	e9 b9 13 ff ff       	jmp    c0014240 <Device::preOpenPCI(PCIDeviceInfo)>
c0022e87:	83 c4 1c             	add    esp,0x1c
c0022e8a:	5b                   	pop    ebx
c0022e8b:	5e                   	pop    esi
c0022e8c:	5f                   	pop    edi
c0022e8d:	5d                   	pop    ebp
c0022e8e:	c3                   	ret    
c0022e8f:	90                   	nop

c0022e90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022e90:	55                   	push   ebp
c0022e91:	57                   	push   edi
c0022e92:	56                   	push   esi
c0022e93:	53                   	push   ebx
c0022e94:	83 ec 5c             	sub    esp,0x5c
c0022e97:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022e9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e9f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022ea3:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022ea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022eac:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022eb0:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022eb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022eb9:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022ebe:	6a 0c                	push   0xc
c0022ec0:	55                   	push   ebp
c0022ec1:	53                   	push   ebx
c0022ec2:	57                   	push   edi
c0022ec3:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022eca:	e8 01 fc ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ecf:	55                   	push   ebp
c0022ed0:	53                   	push   ebx
c0022ed1:	57                   	push   edi
c0022ed2:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022ed9:	e8 80 fc ff ff       	call   c0022b5e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022ede:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022ee3:	83 c4 24             	add    esp,0x24
c0022ee6:	55                   	push   ebp
c0022ee7:	53                   	push   ebx
c0022ee8:	57                   	push   edi
c0022ee9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022eed:	e8 f6 fc ff ff       	call   c0022be8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022ef2:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022ef6:	6a 3c                	push   0x3c
c0022ef8:	55                   	push   ebp
c0022ef9:	53                   	push   ebx
c0022efa:	57                   	push   edi
c0022efb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022f02:	e8 c9 fb ff ff       	call   c0022ad0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f07:	0f b6 c4             	movzx  eax,ah
c0022f0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022f0e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022f12:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022f16:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0022f1b:	83 c4 24             	add    esp,0x24
c0022f1e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022f24:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022f2b:	74 6c                	je     c0022f99 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022f2d:	31 f6                	xor    esi,esi
c0022f2f:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0022f35:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022f3b:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022f41:	7e 56                	jle    c0022f99 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022f43:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022f46:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022f4d:	39 cb                	cmp    ebx,ecx
c0022f4f:	75 45                	jne    c0022f96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022f51:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022f58:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022f5c:	75 38                	jne    c0022f96 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022f5e:	83 ec 0c             	sub    esp,0xc
c0022f61:	68 02 cc 02 c0       	push   0xc002cc02
c0022f66:	e8 9e ff fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0022f6b:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c0022f71:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022f77:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022f7f:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022f83:	52                   	push   edx
c0022f84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022f88:	53                   	push   ebx
c0022f89:	68 27 cc 02 c0       	push   0xc002cc27
c0022f8e:	e8 76 ff fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0022f93:	83 c4 20             	add    esp,0x20
c0022f96:	46                   	inc    esi
c0022f97:	eb 96                	jmp    c0022f2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f99:	31 d2                	xor    edx,edx
c0022f9b:	83 ec 0c             	sub    esp,0xc
c0022f9e:	55                   	push   ebp
c0022f9f:	53                   	push   ebx
c0022fa0:	57                   	push   edi
c0022fa1:	52                   	push   edx
c0022fa2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022fa6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022fad:	e8 7c fc ff ff       	call   c0022c2e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fb2:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022fb6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022fba:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022fbe:	42                   	inc    edx
c0022fbf:	83 c4 20             	add    esp,0x20
c0022fc2:	83 fa 06             	cmp    edx,0x6
c0022fc5:	75 d4                	jne    c0022f9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022fc7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022fcb:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022fcf:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022fd3:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022fd7:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022fdb:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022fdf:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022fe4:	86 e0                	xchg   al,ah
c0022fe6:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022feb:	55                   	push   ebp
c0022fec:	53                   	push   ebx
c0022fed:	57                   	push   edi
c0022fee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022ff2:	e8 ab fb ff ff       	call   c0022ba2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ff7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ffb:	55                   	push   ebp
c0022ffc:	53                   	push   ebx
c0022ffd:	57                   	push   edi
c0022ffe:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023005:	e8 0e fb ff ff       	call   c0022b18 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002300a:	83 ec 0c             	sub    esp,0xc
c002300d:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023012:	b9 09 00 00 00       	mov    ecx,0x9
c0023017:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002301b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002301f:	fc                   	cld    
c0023020:	89 e7                	mov    edi,esp
c0023022:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023024:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002302b:	e8 ee fc ff ff       	call   c0022d1e <PCI::foundDevice(PCIDeviceInfo)>
c0023030:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023036:	5b                   	pop    ebx
c0023037:	5e                   	pop    esi
c0023038:	5f                   	pop    edi
c0023039:	5d                   	pop    ebp
c002303a:	c3                   	ret    
c002303b:	90                   	nop

c002303c <PCI::checkDevice(unsigned char, unsigned char)>:
c002303c:	55                   	push   ebp
c002303d:	57                   	push   edi
c002303e:	56                   	push   esi
c002303f:	53                   	push   ebx
c0023040:	83 ec 0c             	sub    esp,0xc
c0023043:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023047:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002304c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023051:	6a 00                	push   0x0
c0023053:	56                   	push   esi
c0023054:	57                   	push   edi
c0023055:	55                   	push   ebp
c0023056:	e8 bd fa ff ff       	call   c0022b18 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002305b:	6a 00                	push   0x0
c002305d:	56                   	push   esi
c002305e:	57                   	push   edi
c002305f:	55                   	push   ebp
c0023060:	e8 2b fe ff ff       	call   c0022e90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023065:	83 c4 20             	add    esp,0x20
c0023068:	6a 00                	push   0x0
c002306a:	56                   	push   esi
c002306b:	57                   	push   edi
c002306c:	55                   	push   ebp
c002306d:	e8 c8 fa ff ff       	call   c0022b3a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023072:	83 c4 10             	add    esp,0x10
c0023075:	84 c0                	test   al,al
c0023077:	79 27                	jns    c00230a0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023079:	bb 01 00 00 00       	mov    ebx,0x1
c002307e:	53                   	push   ebx
c002307f:	56                   	push   esi
c0023080:	57                   	push   edi
c0023081:	55                   	push   ebp
c0023082:	e8 91 fa ff ff       	call   c0022b18 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023087:	83 c4 10             	add    esp,0x10
c002308a:	66 40                	inc    ax
c002308c:	74 0c                	je     c002309a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002308e:	53                   	push   ebx
c002308f:	56                   	push   esi
c0023090:	57                   	push   edi
c0023091:	55                   	push   ebp
c0023092:	e8 f9 fd ff ff       	call   c0022e90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023097:	83 c4 10             	add    esp,0x10
c002309a:	43                   	inc    ebx
c002309b:	83 fb 08             	cmp    ebx,0x8
c002309e:	75 de                	jne    c002307e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00230a0:	83 c4 0c             	add    esp,0xc
c00230a3:	5b                   	pop    ebx
c00230a4:	5e                   	pop    esi
c00230a5:	5f                   	pop    edi
c00230a6:	5d                   	pop    ebp
c00230a7:	c3                   	ret    

c00230a8 <PCI::detect()>:
c00230a8:	56                   	push   esi
c00230a9:	53                   	push   ebx
c00230aa:	53                   	push   ebx
c00230ab:	31 db                	xor    ebx,ebx
c00230ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00230b1:	6a 00                	push   0x0
c00230b3:	6a 00                	push   0x0
c00230b5:	6a 00                	push   0x0
c00230b7:	56                   	push   esi
c00230b8:	e8 7d fa ff ff       	call   c0022b3a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00230bd:	83 c4 10             	add    esp,0x10
c00230c0:	a8 80                	test   al,0x80
c00230c2:	75 21                	jne    c00230e5 <PCI::detect()+0x3d>
c00230c4:	51                   	push   ecx
c00230c5:	51                   	push   ecx
c00230c6:	6a 00                	push   0x0
c00230c8:	56                   	push   esi
c00230c9:	e8 2c fc ff ff       	call   c0022cfa <PCI::checkBus(unsigned char)>
c00230ce:	83 c4 10             	add    esp,0x10
c00230d1:	eb 24                	jmp    c00230f7 <PCI::detect()+0x4f>
c00230d3:	52                   	push   edx
c00230d4:	52                   	push   edx
c00230d5:	53                   	push   ebx
c00230d6:	43                   	inc    ebx
c00230d7:	56                   	push   esi
c00230d8:	e8 1d fc ff ff       	call   c0022cfa <PCI::checkBus(unsigned char)>
c00230dd:	83 c4 10             	add    esp,0x10
c00230e0:	83 fb 08             	cmp    ebx,0x8
c00230e3:	74 12                	je     c00230f7 <PCI::detect()+0x4f>
c00230e5:	53                   	push   ebx
c00230e6:	6a 00                	push   0x0
c00230e8:	6a 00                	push   0x0
c00230ea:	56                   	push   esi
c00230eb:	e8 28 fa ff ff       	call   c0022b18 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00230f0:	83 c4 10             	add    esp,0x10
c00230f3:	66 40                	inc    ax
c00230f5:	74 dc                	je     c00230d3 <PCI::detect()+0x2b>
c00230f7:	58                   	pop    eax
c00230f8:	5b                   	pop    ebx
c00230f9:	5e                   	pop    esi
c00230fa:	c3                   	ret    
c00230fb:	90                   	nop

c00230fc <IDE::close(int, int, void*)>:
c00230fc:	83 c8 ff             	or     eax,0xffffffff
c00230ff:	c3                   	ret    

c0023100 <IDE::IDE()>:
c0023100:	83 ec 0c             	sub    esp,0xc
c0023103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023107:	83 ec 08             	sub    esp,0x8
c002310a:	68 70 cc 02 c0       	push   0xc002cc70
c002310f:	50                   	push   eax
c0023110:	e8 ad 15 ff ff       	call   c00146c2 <HardDiskController::HardDiskController(char const*)>
c0023115:	83 c4 10             	add    esp,0x10
c0023118:	ba b0 ce 02 c0       	mov    edx,0xc002ceb0
c002311d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023121:	89 10                	mov    DWORD PTR [eax],edx
c0023123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023127:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002312e:	90                   	nop
c002312f:	83 c4 0c             	add    esp,0xc
c0023132:	c3                   	ret    
c0023133:	90                   	nop

c0023134 <IDE::prepareInterrupt(unsigned char)>:
c0023134:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023139:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002313d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023145:	c3                   	ret    

c0023146 <selectDrive(unsigned char, unsigned char)>:
c0023146:	c3                   	ret    
c0023147:	90                   	nop

c0023148 <IDE::getBase(unsigned char)>:
c0023148:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002314d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023151:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023159:	c3                   	ret    

c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002315a:	55                   	push   ebp
c002315b:	57                   	push   edi
c002315c:	56                   	push   esi
c002315d:	53                   	push   ebx
c002315e:	83 ec 1c             	sub    esp,0x1c
c0023161:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023165:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023169:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002316c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023170:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023174:	80 f9 03             	cmp    cl,0x3
c0023177:	77 51                	ja     c00231ca <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023179:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002317d:	0f b6 f2             	movzx  esi,dl
c0023180:	0f b6 db             	movzx  ebx,bl
c0023183:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023186:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002318a:	83 ca 80             	or     edx,0xffffff80
c002318d:	0f b6 d2             	movzx  edx,dl
c0023190:	52                   	push   edx
c0023191:	6a 0c                	push   0xc
c0023193:	56                   	push   esi
c0023194:	57                   	push   edi
c0023195:	e8 c0 ff ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002319a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002319f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00231a3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00231a7:	ee                   	out    dx,al
c00231a8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00231ad:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00231b1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00231b5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00231b9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00231c1:	83 c4 2c             	add    esp,0x2c
c00231c4:	5b                   	pop    ebx
c00231c5:	5e                   	pop    esi
c00231c6:	5f                   	pop    edi
c00231c7:	5d                   	pop    ebp
c00231c8:	eb 90                	jmp    c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231ca:	80 fb 07             	cmp    bl,0x7
c00231cd:	77 12                	ja     c00231e1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00231cf:	0f b6 d2             	movzx  edx,dl
c00231d2:	0f b6 db             	movzx  ebx,bl
c00231d5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00231dd:	89 da                	mov    edx,ebx
c00231df:	eb 2f                	jmp    c0023210 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00231e1:	80 fb 0d             	cmp    bl,0xd
c00231e4:	77 13                	ja     c00231f9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00231e6:	0f b6 d2             	movzx  edx,dl
c00231e9:	0f b6 db             	movzx  ebx,bl
c00231ec:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00231f3:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00231f7:	eb 17                	jmp    c0023210 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00231f9:	80 fb 15             	cmp    bl,0x15
c00231fc:	77 13                	ja     c0023211 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00231fe:	0f b6 d2             	movzx  edx,dl
c0023201:	0f b6 db             	movzx  ebx,bl
c0023204:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002320c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023210:	ee                   	out    dx,al
c0023211:	83 c4 1c             	add    esp,0x1c
c0023214:	5b                   	pop    ebx
c0023215:	5e                   	pop    esi
c0023216:	5f                   	pop    edi
c0023217:	5d                   	pop    ebp
c0023218:	c3                   	ret    
c0023219:	90                   	nop

c002321a <IDE::read(unsigned char, unsigned char)>:
c002321a:	55                   	push   ebp
c002321b:	57                   	push   edi
c002321c:	56                   	push   esi
c002321d:	53                   	push   ebx
c002321e:	83 ec 1c             	sub    esp,0x1c
c0023221:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023225:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023229:	8d 43 f8             	lea    eax,[ebx-0x8]
c002322c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023230:	3c 03                	cmp    al,0x3
c0023232:	77 43                	ja     c0023277 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023234:	0f b6 f2             	movzx  esi,dl
c0023237:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002323a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002323e:	83 c8 80             	or     eax,0xffffff80
c0023241:	0f b6 c0             	movzx  eax,al
c0023244:	50                   	push   eax
c0023245:	6a 0c                	push   0xc
c0023247:	56                   	push   esi
c0023248:	57                   	push   edi
c0023249:	e8 0c ff ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002324e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023253:	0f b6 c3             	movzx  eax,bl
c0023256:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002325a:	ec                   	in     al,dx
c002325b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002325f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023264:	52                   	push   edx
c0023265:	6a 0c                	push   0xc
c0023267:	56                   	push   esi
c0023268:	57                   	push   edi
c0023269:	e8 ec fe ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002326e:	83 c4 20             	add    esp,0x20
c0023271:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023275:	eb 49                	jmp    c00232c0 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023277:	80 fb 07             	cmp    bl,0x7
c002327a:	77 12                	ja     c002328e <IDE::read(unsigned char, unsigned char)+0x74>
c002327c:	0f b6 d2             	movzx  edx,dl
c002327f:	0f b6 c3             	movzx  eax,bl
c0023282:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002328a:	89 c2                	mov    edx,eax
c002328c:	eb 31                	jmp    c00232bf <IDE::read(unsigned char, unsigned char)+0xa5>
c002328e:	80 fb 0d             	cmp    bl,0xd
c0023291:	77 13                	ja     c00232a6 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023293:	0f b6 d2             	movzx  edx,dl
c0023296:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002329d:	0f b6 d3             	movzx  edx,bl
c00232a0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00232a4:	eb 19                	jmp    c00232bf <IDE::read(unsigned char, unsigned char)+0xa5>
c00232a6:	31 c0                	xor    eax,eax
c00232a8:	80 fb 15             	cmp    bl,0x15
c00232ab:	77 13                	ja     c00232c0 <IDE::read(unsigned char, unsigned char)+0xa6>
c00232ad:	0f b6 d2             	movzx  edx,dl
c00232b0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00232b8:	0f b6 d3             	movzx  edx,bl
c00232bb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00232bf:	ec                   	in     al,dx
c00232c0:	83 c4 1c             	add    esp,0x1c
c00232c3:	5b                   	pop    ebx
c00232c4:	5e                   	pop    esi
c00232c5:	5f                   	pop    edi
c00232c6:	5d                   	pop    ebp
c00232c7:	c3                   	ret    

c00232c8 <IDE::waitInterrupt(unsigned char)>:
c00232c8:	55                   	push   ebp
c00232c9:	57                   	push   edi
c00232ca:	56                   	push   esi
c00232cb:	53                   	push   ebx
c00232cc:	31 db                	xor    ebx,ebx
c00232ce:	83 ec 0c             	sub    esp,0xc
c00232d1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00232d5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00232da:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00232e2:	89 e8                	mov    eax,ebp
c00232e4:	84 c0                	test   al,al
c00232e6:	75 34                	jne    c002331c <IDE::waitInterrupt(unsigned char)+0x54>
c00232e8:	52                   	push   edx
c00232e9:	6a 0c                	push   0xc
c00232eb:	56                   	push   esi
c00232ec:	57                   	push   edi
c00232ed:	e8 28 ff ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c00232f2:	83 c4 10             	add    esp,0x10
c00232f5:	a8 01                	test   al,0x1
c00232f7:	75 2b                	jne    c0023324 <IDE::waitInterrupt(unsigned char)+0x5c>
c00232f9:	f6 c3 04             	test   bl,0x4
c00232fc:	75 16                	jne    c0023314 <IDE::waitInterrupt(unsigned char)+0x4c>
c00232fe:	83 fb 32             	cmp    ebx,0x32
c0023301:	7e 11                	jle    c0023314 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023303:	50                   	push   eax
c0023304:	50                   	push   eax
c0023305:	6a 00                	push   0x0
c0023307:	68 80 96 98 00       	push   0x989680
c002330c:	e8 9b b0 ff ff       	call   c001e3ac <nanoSleep(unsigned long long)>
c0023311:	83 c4 10             	add    esp,0x10
c0023314:	83 fb 3c             	cmp    ebx,0x3c
c0023317:	74 0b                	je     c0023324 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023319:	43                   	inc    ebx
c002331a:	eb be                	jmp    c00232da <IDE::waitInterrupt(unsigned char)+0x12>
c002331c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023324:	83 c4 0c             	add    esp,0xc
c0023327:	89 e8                	mov    eax,ebp
c0023329:	5b                   	pop    ebx
c002332a:	5e                   	pop    esi
c002332b:	5f                   	pop    edi
c002332c:	5d                   	pop    ebp
c002332d:	c3                   	ret    

c002332e <ideChannel0IRQHandler(regs*, void*)>:
c002332e:	83 ec 10             	sub    esp,0x10
c0023331:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023335:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002333c:	6a 07                	push   0x7
c002333e:	6a 00                	push   0x0
c0023340:	50                   	push   eax
c0023341:	e8 d4 fe ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023346:	83 c4 1c             	add    esp,0x1c
c0023349:	c3                   	ret    

c002334a <ideChannel1IRQHandler(regs*, void*)>:
c002334a:	83 ec 10             	sub    esp,0x10
c002334d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023351:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023358:	6a 07                	push   0x7
c002335a:	6a 01                	push   0x1
c002335c:	50                   	push   eax
c002335d:	e8 b8 fe ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023362:	83 c4 1c             	add    esp,0x1c
c0023365:	c3                   	ret    

c0023366 <IDE::enableIRQs(unsigned char, bool)>:
c0023366:	57                   	push   edi
c0023367:	56                   	push   esi
c0023368:	be 04 00 00 00       	mov    esi,0x4
c002336d:	53                   	push   ebx
c002336e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023373:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023377:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002337c:	0f 94 c0             	sete   al
c002337f:	d1 e0                	shl    eax,1
c0023381:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023388:	0f b6 c0             	movzx  eax,al
c002338b:	50                   	push   eax
c002338c:	6a 0c                	push   0xc
c002338e:	57                   	push   edi
c002338f:	53                   	push   ebx
c0023390:	e8 c5 fd ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023395:	83 c4 10             	add    esp,0x10
c0023398:	50                   	push   eax
c0023399:	6a 0c                	push   0xc
c002339b:	57                   	push   edi
c002339c:	53                   	push   ebx
c002339d:	e8 78 fe ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c00233a2:	83 c4 10             	add    esp,0x10
c00233a5:	4e                   	dec    esi
c00233a6:	75 f0                	jne    c0023398 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00233a8:	5b                   	pop    ebx
c00233a9:	5e                   	pop    esi
c00233aa:	5f                   	pop    edi
c00233ab:	c3                   	ret    

c00233ac <IDE::open(int, int, void*)>:
c00233ac:	55                   	push   ebp
c00233ad:	57                   	push   edi
c00233ae:	56                   	push   esi
c00233af:	53                   	push   ebx
c00233b0:	83 ec 1c             	sub    esp,0x1c
c00233b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00233b7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00233c0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00233c9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00233d0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00233d7:	0f 85 b0 02 00 00    	jne    c002368d <IDE::open(int, int, void*)+0x2e1>
c00233dd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00233e3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00233e7:	83 e0 7f             	and    eax,0x7f
c00233ea:	3c 05                	cmp    al,0x5
c00233ec:	74 04                	je     c00233f2 <IDE::open(int, int, void*)+0x46>
c00233ee:	3c 0f                	cmp    al,0xf
c00233f0:	75 32                	jne    c0023424 <IDE::open(int, int, void*)+0x78>
c00233f2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00233f8:	83 e0 fc             	and    eax,0xfffffffc
c00233fb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023402:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023408:	83 e0 fc             	and    eax,0xfffffffc
c002340b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023412:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023418:	83 e0 fc             	and    eax,0xfffffffc
c002341b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023422:	eb 14                	jmp    c0023438 <IDE::open(int, int, void*)+0x8c>
c0023424:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002342e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023438:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002343f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023446:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002344a:	89 c6                	mov    esi,eax
c002344c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023451:	c1 e6 10             	shl    esi,0x10
c0023454:	89 e8                	mov    eax,ebp
c0023456:	89 fa                	mov    edx,edi
c0023458:	c1 e0 0b             	shl    eax,0xb
c002345b:	09 f0                	or     eax,esi
c002345d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023464:	c1 e6 08             	shl    esi,0x8
c0023467:	09 c6                	or     esi,eax
c0023469:	89 f0                	mov    eax,esi
c002346b:	0d 08 00 00 80       	or     eax,0x80000008
c0023470:	ef                   	out    dx,eax
c0023471:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023476:	89 ca                	mov    edx,ecx
c0023478:	ed                   	in     eax,dx
c0023479:	c1 e8 10             	shr    eax,0x10
c002347c:	3d ff ff 00 00       	cmp    eax,0xffff
c0023481:	0f 84 f5 00 00 00    	je     c002357c <IDE::open(int, int, void*)+0x1d0>
c0023487:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002348d:	89 fa                	mov    edx,edi
c002348f:	89 f0                	mov    eax,esi
c0023491:	ef                   	out    dx,eax
c0023492:	b0 fe                	mov    al,0xfe
c0023494:	89 ca                	mov    edx,ecx
c0023496:	ee                   	out    dx,al
c0023497:	89 f0                	mov    eax,esi
c0023499:	89 fa                	mov    edx,edi
c002349b:	ef                   	out    dx,eax
c002349c:	89 ca                	mov    edx,ecx
c002349e:	ed                   	in     eax,dx
c002349f:	3c fe                	cmp    al,0xfe
c00234a1:	0f 85 a9 00 00 00    	jne    c0023550 <IDE::open(int, int, void*)+0x1a4>
c00234a7:	8b 15 08 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e608
c00234ad:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00234b4:	74 33                	je     c00234e9 <IDE::open(int, int, void*)+0x13d>
c00234b6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00234bc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00234c0:	40                   	inc    eax
c00234c1:	83 ec 0c             	sub    esp,0xc
c00234c4:	0f b6 c0             	movzx  eax,al
c00234c7:	50                   	push   eax
c00234c8:	55                   	push   ebp
c00234c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00234cd:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00234d3:	51                   	push   ecx
c00234d4:	e8 bb 4d ff ff       	call   c0018294 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00234d9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00234de:	83 c4 1c             	add    esp,0x1c
c00234e1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234e7:	eb 0a                	jmp    c00234f3 <IDE::open(int, int, void*)+0x147>
c00234e9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00234f3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00234fa:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023501:	c1 e1 10             	shl    ecx,0x10
c0023504:	c1 e0 08             	shl    eax,0x8
c0023507:	bf f8 0c 00 00       	mov    edi,0xcf8
c002350c:	09 c1                	or     ecx,eax
c002350e:	89 fa                	mov    edx,edi
c0023510:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023517:	c1 e0 0b             	shl    eax,0xb
c002351a:	09 c1                	or     ecx,eax
c002351c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023522:	89 c8                	mov    eax,ecx
c0023524:	ef                   	out    dx,eax
c0023525:	be fc 0c 00 00       	mov    esi,0xcfc
c002352a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023530:	89 f2                	mov    edx,esi
c0023532:	ee                   	out    dx,al
c0023533:	89 c8                	mov    eax,ecx
c0023535:	89 fa                	mov    edx,edi
c0023537:	ef                   	out    dx,eax
c0023538:	89 f2                	mov    edx,esi
c002353a:	ed                   	in     eax,dx
c002353b:	0f b6 c0             	movzx  eax,al
c002353e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023544:	74 46                	je     c002358c <IDE::open(int, int, void*)+0x1e0>
c0023546:	83 ec 0c             	sub    esp,0xc
c0023549:	68 88 cc 02 c0       	push   0xc002cc88
c002354e:	eb 34                	jmp    c0023584 <IDE::open(int, int, void*)+0x1d8>
c0023550:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023559:	75 17                	jne    c0023572 <IDE::open(int, int, void*)+0x1c6>
c002355b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023560:	74 07                	je     c0023569 <IDE::open(int, int, void*)+0x1bd>
c0023562:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023567:	75 09                	jne    c0023572 <IDE::open(int, int, void*)+0x1c6>
c0023569:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023570:	eb 1a                	jmp    c002358c <IDE::open(int, int, void*)+0x1e0>
c0023572:	83 ec 0c             	sub    esp,0xc
c0023575:	68 90 cc 02 c0       	push   0xc002cc90
c002357a:	eb 08                	jmp    c0023584 <IDE::open(int, int, void*)+0x1d8>
c002357c:	83 ec 0c             	sub    esp,0xc
c002357f:	68 c1 cc 02 c0       	push   0xc002ccc1
c0023584:	e8 be 70 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0023589:	83 c4 10             	add    esp,0x10
c002358c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023593:	79 1a                	jns    c00235af <IDE::open(int, int, void*)+0x203>
c0023595:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002359b:	83 e0 fc             	and    eax,0xfffffffc
c002359e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00235a5:	83 c0 08             	add    eax,0x8
c00235a8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00235af:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00235b5:	89 c2                	mov    edx,eax
c00235b7:	83 e2 0f             	and    edx,0xf
c00235ba:	66 83 fa 08          	cmp    dx,0x8
c00235be:	75 0a                	jne    c00235ca <IDE::open(int, int, void*)+0x21e>
c00235c0:	83 e8 02             	sub    eax,0x2
c00235c3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00235ca:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00235d0:	89 c2                	mov    edx,eax
c00235d2:	83 e2 0f             	and    edx,0xf
c00235d5:	66 83 fa 08          	cmp    dx,0x8
c00235d9:	75 0a                	jne    c00235e5 <IDE::open(int, int, void*)+0x239>
c00235db:	83 e8 02             	sub    eax,0x2
c00235de:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00235e5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00235ec:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00235f3:	89 d0                	mov    eax,edx
c00235f5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235f8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235fc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023600:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023603:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023608:	0f b6 c9             	movzx  ecx,cl
c002360b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023612:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023615:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023619:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002361d:	8d 50 02             	lea    edx,[eax+0x2]
c0023620:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023625:	0f b6 d2             	movzx  edx,dl
c0023628:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002362e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023631:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023635:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023639:	8d 48 03             	lea    ecx,[eax+0x3]
c002363c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023641:	0f b6 c9             	movzx  ecx,cl
c0023644:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002364a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002364d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023651:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023655:	8d 50 04             	lea    edx,[eax+0x4]
c0023658:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002365e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023663:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002366a:	66 85 f6             	test   si,si
c002366d:	74 3e                	je     c00236ad <IDE::open(int, int, void*)+0x301>
c002366f:	0f b6 d2             	movzx  edx,dl
c0023672:	83 c0 05             	add    eax,0x5
c0023675:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023678:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002367c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023680:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023686:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002368b:	eb 20                	jmp    c00236ad <IDE::open(int, int, void*)+0x301>
c002368d:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023697:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00236a1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00236a8:	e9 02 ff ff ff       	jmp    c00235af <IDE::open(int, int, void*)+0x203>
c00236ad:	52                   	push   edx
c00236ae:	52                   	push   edx
c00236af:	6a 00                	push   0x0
c00236b1:	53                   	push   ebx
c00236b2:	e8 7d fa ff ff       	call   c0023134 <IDE::prepareInterrupt(unsigned char)>
c00236b7:	59                   	pop    ecx
c00236b8:	5e                   	pop    esi
c00236b9:	6a 01                	push   0x1
c00236bb:	53                   	push   ebx
c00236bc:	e8 73 fa ff ff       	call   c0023134 <IDE::prepareInterrupt(unsigned char)>
c00236c1:	83 c4 0c             	add    esp,0xc
c00236c4:	6a 00                	push   0x0
c00236c6:	6a 00                	push   0x0
c00236c8:	53                   	push   ebx
c00236c9:	e8 98 fc ff ff       	call   c0023366 <IDE::enableIRQs(unsigned char, bool)>
c00236ce:	83 c4 0c             	add    esp,0xc
c00236d1:	6a 00                	push   0x0
c00236d3:	6a 01                	push   0x1
c00236d5:	53                   	push   ebx
c00236d6:	e8 8b fc ff ff       	call   c0023366 <IDE::enableIRQs(unsigned char, bool)>
c00236db:	83 c4 10             	add    esp,0x10
c00236de:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00236e5:	74 40                	je     c0023727 <IDE::open(int, int, void*)+0x37b>
c00236e7:	83 ec 0c             	sub    esp,0xc
c00236ea:	68 eb cc 02 c0       	push   0xc002cceb
c00236ef:	e8 15 f8 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00236f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00236f7:	6a 01                	push   0x1
c00236f9:	68 2e 33 02 c0       	push   0xc002332e
c00236fe:	6a 0e                	push   0xe
c0023700:	53                   	push   ebx
c0023701:	e8 b4 0b ff ff       	call   c00142ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023706:	83 c4 14             	add    esp,0x14
c0023709:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002370f:	53                   	push   ebx
c0023710:	6a 01                	push   0x1
c0023712:	68 4a 33 02 c0       	push   0xc002334a
c0023717:	6a 0f                	push   0xf
c0023719:	53                   	push   ebx
c002371a:	e8 9b 0b ff ff       	call   c00142ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002371f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023725:	eb 4a                	jmp    c0023771 <IDE::open(int, int, void*)+0x3c5>
c0023727:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023731:	50                   	push   eax
c0023732:	6a 0f                	push   0xf
c0023734:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002373a:	68 07 cd 02 c0       	push   0xc002cd07
c002373f:	e8 c5 f7 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023744:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023747:	6a 00                	push   0x0
c0023749:	68 2e 33 02 c0       	push   0xc002332e
c002374e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023754:	53                   	push   ebx
c0023755:	e8 60 0b ff ff       	call   c00142ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002375a:	83 c4 14             	add    esp,0x14
c002375d:	53                   	push   ebx
c002375e:	6a 00                	push   0x0
c0023760:	68 4a 33 02 c0       	push   0xc002334a
c0023765:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002376b:	53                   	push   ebx
c002376c:	e8 49 0b ff ff       	call   c00142ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023771:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023773:	83 c4 20             	add    esp,0x20
c0023776:	83 ec 0c             	sub    esp,0xc
c0023779:	53                   	push   ebx
c002377a:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002377d:	83 c4 0c             	add    esp,0xc
c0023780:	6a 07                	push   0x7
c0023782:	6a 00                	push   0x0
c0023784:	53                   	push   ebx
c0023785:	e8 90 fa ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c002378a:	83 c4 0c             	add    esp,0xc
c002378d:	6a 07                	push   0x7
c002378f:	6a 01                	push   0x1
c0023791:	53                   	push   ebx
c0023792:	e8 83 fa ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023797:	83 c4 0c             	add    esp,0xc
c002379a:	6a 01                	push   0x1
c002379c:	6a 00                	push   0x0
c002379e:	53                   	push   ebx
c002379f:	e8 c2 fb ff ff       	call   c0023366 <IDE::enableIRQs(unsigned char, bool)>
c00237a4:	83 c4 0c             	add    esp,0xc
c00237a7:	6a 01                	push   0x1
c00237a9:	6a 01                	push   0x1
c00237ab:	53                   	push   ebx
c00237ac:	e8 b5 fb ff ff       	call   c0023366 <IDE::enableIRQs(unsigned char, bool)>
c00237b1:	83 c4 2c             	add    esp,0x2c
c00237b4:	31 c0                	xor    eax,eax
c00237b6:	5b                   	pop    ebx
c00237b7:	5e                   	pop    esi
c00237b8:	5f                   	pop    edi
c00237b9:	5d                   	pop    ebp
c00237ba:	c3                   	ret    
c00237bb:	90                   	nop

c00237bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00237bc:	55                   	push   ebp
c00237bd:	57                   	push   edi
c00237be:	56                   	push   esi
c00237bf:	53                   	push   ebx
c00237c0:	83 ec 1c             	sub    esp,0x1c
c00237c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00237c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00237cb:	8d 50 f8             	lea    edx,[eax-0x8]
c00237ce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00237d2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00237d6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00237da:	80 fa 03             	cmp    dl,0x3
c00237dd:	77 5d                	ja     c002383c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00237df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00237e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00237e7:	0f b6 db             	movzx  ebx,bl
c00237ea:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00237ed:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00237f1:	83 ca 80             	or     edx,0xffffff80
c00237f4:	0f b6 d2             	movzx  edx,dl
c00237f7:	52                   	push   edx
c00237f8:	6a 0c                	push   0xc
c00237fa:	53                   	push   ebx
c00237fb:	56                   	push   esi
c00237fc:	e8 59 f9 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023801:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023806:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002380a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002380e:	0f b6 c0             	movzx  eax,al
c0023811:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023815:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023817:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002381c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023820:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023824:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023828:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023830:	83 c4 2c             	add    esp,0x2c
c0023833:	5b                   	pop    ebx
c0023834:	5e                   	pop    esi
c0023835:	5f                   	pop    edi
c0023836:	5d                   	pop    ebp
c0023837:	e9 1e f9 ff ff       	jmp    c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002383c:	3c 07                	cmp    al,0x7
c002383e:	77 10                	ja     c0023850 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023840:	0f b6 db             	movzx  ebx,bl
c0023843:	0f b6 d0             	movzx  edx,al
c0023846:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002384e:	eb 2d                	jmp    c002387d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023850:	3c 0d                	cmp    al,0xd
c0023852:	77 13                	ja     c0023867 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023854:	0f b6 db             	movzx  ebx,bl
c0023857:	0f b6 c0             	movzx  eax,al
c002385a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023861:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023865:	eb 16                	jmp    c002387d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023867:	3c 15                	cmp    al,0x15
c0023869:	77 14                	ja     c002387f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002386b:	0f b6 db             	movzx  ebx,bl
c002386e:	0f b6 c0             	movzx  eax,al
c0023871:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023879:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002387d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002387f:	83 c4 1c             	add    esp,0x1c
c0023882:	5b                   	pop    ebx
c0023883:	5e                   	pop    esi
c0023884:	5f                   	pop    edi
c0023885:	5d                   	pop    ebp
c0023886:	c3                   	ret    
c0023887:	90                   	nop

c0023888 <IDE::detect()>:
c0023888:	55                   	push   ebp
c0023889:	57                   	push   edi
c002388a:	56                   	push   esi
c002388b:	53                   	push   ebx
c002388c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023892:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023899:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00238a0:	0f 85 be 02 00 00    	jne    c0023b64 <IDE::detect()+0x2dc>
c00238a6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00238ad:	31 f6                	xor    esi,esi
c00238af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00238b7:	31 ed                	xor    ebp,ebp
c00238b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238bd:	c1 e0 06             	shl    eax,0x6
c00238c0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00238c8:	89 e8                	mov    eax,ebp
c00238ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00238ce:	c1 e0 04             	shl    eax,0x4
c00238d1:	83 c8 a0             	or     eax,0xffffffa0
c00238d4:	0f b6 c0             	movzx  eax,al
c00238d7:	50                   	push   eax
c00238d8:	6a 06                	push   0x6
c00238da:	56                   	push   esi
c00238db:	53                   	push   ebx
c00238dc:	e8 79 f8 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238e1:	83 c4 0c             	add    esp,0xc
c00238e4:	6a 0c                	push   0xc
c00238e6:	56                   	push   esi
c00238e7:	53                   	push   ebx
c00238e8:	e8 2d f9 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c00238ed:	83 c4 0c             	add    esp,0xc
c00238f0:	6a 0c                	push   0xc
c00238f2:	56                   	push   esi
c00238f3:	53                   	push   ebx
c00238f4:	e8 21 f9 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c00238f9:	83 c4 0c             	add    esp,0xc
c00238fc:	6a 0c                	push   0xc
c00238fe:	56                   	push   esi
c00238ff:	53                   	push   ebx
c0023900:	e8 15 f9 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023905:	83 c4 0c             	add    esp,0xc
c0023908:	6a 0c                	push   0xc
c002390a:	56                   	push   esi
c002390b:	53                   	push   ebx
c002390c:	e8 09 f9 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023911:	68 ec 00 00 00       	push   0xec
c0023916:	6a 07                	push   0x7
c0023918:	56                   	push   esi
c0023919:	53                   	push   ebx
c002391a:	e8 3b f8 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002391f:	83 c4 1c             	add    esp,0x1c
c0023922:	6a 0c                	push   0xc
c0023924:	56                   	push   esi
c0023925:	53                   	push   ebx
c0023926:	e8 ef f8 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c002392b:	83 c4 0c             	add    esp,0xc
c002392e:	6a 0c                	push   0xc
c0023930:	56                   	push   esi
c0023931:	53                   	push   ebx
c0023932:	e8 e3 f8 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023937:	83 c4 0c             	add    esp,0xc
c002393a:	6a 0c                	push   0xc
c002393c:	56                   	push   esi
c002393d:	53                   	push   ebx
c002393e:	e8 d7 f8 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023943:	83 c4 0c             	add    esp,0xc
c0023946:	6a 0c                	push   0xc
c0023948:	56                   	push   esi
c0023949:	53                   	push   ebx
c002394a:	e8 cb f8 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c002394f:	83 c4 0c             	add    esp,0xc
c0023952:	6a 0c                	push   0xc
c0023954:	56                   	push   esi
c0023955:	53                   	push   ebx
c0023956:	e8 bf f8 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c002395b:	83 c4 10             	add    esp,0x10
c002395e:	84 c0                	test   al,al
c0023960:	0f 84 8b 01 00 00    	je     c0023af1 <IDE::detect()+0x269>
c0023966:	31 ff                	xor    edi,edi
c0023968:	50                   	push   eax
c0023969:	6a 0c                	push   0xc
c002396b:	56                   	push   esi
c002396c:	53                   	push   ebx
c002396d:	e8 a8 f8 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023972:	83 c4 10             	add    esp,0x10
c0023975:	a8 01                	test   al,0x1
c0023977:	0f 85 8e 01 00 00    	jne    c0023b0b <IDE::detect()+0x283>
c002397d:	84 c0                	test   al,al
c002397f:	78 04                	js     c0023985 <IDE::detect()+0xfd>
c0023981:	a8 08                	test   al,0x8
c0023983:	75 27                	jne    c00239ac <IDE::detect()+0x124>
c0023985:	47                   	inc    edi
c0023986:	81 ff 17 01 00 00    	cmp    edi,0x117
c002398c:	7e da                	jle    c0023968 <IDE::detect()+0xe0>
c002398e:	50                   	push   eax
c002398f:	50                   	push   eax
c0023990:	6a 00                	push   0x0
c0023992:	68 40 4b 4c 00       	push   0x4c4b40
c0023997:	e8 10 aa ff ff       	call   c001e3ac <nanoSleep(unsigned long long)>
c002399c:	83 c4 10             	add    esp,0x10
c002399f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00239a5:	75 c1                	jne    c0023968 <IDE::detect()+0xe0>
c00239a7:	e9 5f 01 00 00       	jmp    c0023b0b <IDE::detect()+0x283>
c00239ac:	31 c9                	xor    ecx,ecx
c00239ae:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00239b2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00239b6:	83 ec 0c             	sub    esp,0xc
c00239b9:	68 80 00 00 00       	push   0x80
c00239be:	57                   	push   edi
c00239bf:	6a 00                	push   0x0
c00239c1:	56                   	push   esi
c00239c2:	53                   	push   ebx
c00239c3:	e8 f4 fd ff ff       	call   c00237bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00239c8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00239cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00239d1:	89 d1                	mov    ecx,edx
c00239d3:	c1 e0 06             	shl    eax,0x6
c00239d6:	01 d8                	add    eax,ebx
c00239d8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00239df:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00239e6:	89 f2                	mov    edx,esi
c00239e8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00239ee:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00239f2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00239f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00239fc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023a03:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023a0b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023a12:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023a1a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023a20:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023a27:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023a2d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023a31:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023a35:	83 c4 20             	add    esp,0x20
c0023a38:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023a3b:	83 c0 02             	add    eax,0x2
c0023a3e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023a44:	83 c7 02             	add    edi,0x2
c0023a47:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023a4a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023a50:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023a54:	75 e2                	jne    c0023a38 <IDE::detect()+0x1b0>
c0023a56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a5a:	c1 e0 06             	shl    eax,0x6
c0023a5d:	01 d8                	add    eax,ebx
c0023a5f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023a65:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023a6c:	66 c1 ea 09          	shr    dx,0x9
c0023a70:	83 e2 01             	and    edx,0x1
c0023a73:	84 c9                	test   cl,cl
c0023a75:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023a7b:	75 2f                	jne    c0023aac <IDE::detect()+0x224>
c0023a7d:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023a83:	85 c0                	test   eax,eax
c0023a85:	74 66                	je     c0023aed <IDE::detect()+0x265>
c0023a87:	50                   	push   eax
c0023a88:	55                   	push   ebp
c0023a89:	56                   	push   esi
c0023a8a:	68 23 cd 02 c0       	push   0xc002cd23
c0023a8f:	e8 75 f4 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023a94:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023a9b:	e8 ab bd fe ff       	call   c000f84b <malloc>
c0023aa0:	89 c7                	mov    edi,eax
c0023aa2:	89 04 24             	mov    DWORD PTR [esp],eax
c0023aa5:	e8 78 06 00 00       	call   c0024122 <ATA::ATA()>
c0023aaa:	eb 28                	jmp    c0023ad4 <IDE::detect()+0x24c>
c0023aac:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023ab2:	55                   	push   ebp
c0023ab3:	56                   	push   esi
c0023ab4:	68 52 cd 02 c0       	push   0xc002cd52
c0023ab9:	e8 4b f4 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023abe:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ac5:	e8 81 bd fe ff       	call   c000f84b <malloc>
c0023aca:	89 c7                	mov    edi,eax
c0023acc:	89 04 24             	mov    DWORD PTR [esp],eax
c0023acf:	e8 8e 0c 00 00       	call   c0024762 <ATAPI::ATAPI()>
c0023ad4:	5a                   	pop    edx
c0023ad5:	59                   	pop    ecx
c0023ad6:	57                   	push   edi
c0023ad7:	53                   	push   ebx
c0023ad8:	e8 59 08 ff ff       	call   c0014336 <Device::addChild(Device*)>
c0023add:	8b 07                	mov    eax,DWORD PTR [edi]
c0023adf:	53                   	push   ebx
c0023ae0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023ae4:	6a 00                	push   0x0
c0023ae6:	57                   	push   edi
c0023ae7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023aea:	83 c4 20             	add    esp,0x20
c0023aed:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023af1:	4d                   	dec    ebp
c0023af2:	74 0a                	je     c0023afe <IDE::detect()+0x276>
c0023af4:	bd 01 00 00 00       	mov    ebp,0x1
c0023af9:	e9 bb fd ff ff       	jmp    c00238b9 <IDE::detect()+0x31>
c0023afe:	4e                   	dec    esi
c0023aff:	74 63                	je     c0023b64 <IDE::detect()+0x2dc>
c0023b01:	be 01 00 00 00       	mov    esi,0x1
c0023b06:	e9 ac fd ff ff       	jmp    c00238b7 <IDE::detect()+0x2f>
c0023b0b:	50                   	push   eax
c0023b0c:	6a 04                	push   0x4
c0023b0e:	56                   	push   esi
c0023b0f:	53                   	push   ebx
c0023b10:	e8 05 f7 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023b15:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023b19:	83 c4 0c             	add    esp,0xc
c0023b1c:	6a 05                	push   0x5
c0023b1e:	56                   	push   esi
c0023b1f:	53                   	push   ebx
c0023b20:	e8 f5 f6 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023b25:	83 c4 10             	add    esp,0x10
c0023b28:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023b2c:	80 fa 14             	cmp    dl,0x14
c0023b2f:	75 04                	jne    c0023b35 <IDE::detect()+0x2ad>
c0023b31:	3c eb                	cmp    al,0xeb
c0023b33:	eb 07                	jmp    c0023b3c <IDE::detect()+0x2b4>
c0023b35:	3c 96                	cmp    al,0x96
c0023b37:	75 b8                	jne    c0023af1 <IDE::detect()+0x269>
c0023b39:	80 fa 69             	cmp    dl,0x69
c0023b3c:	75 b3                	jne    c0023af1 <IDE::detect()+0x269>
c0023b3e:	68 a1 00 00 00       	push   0xa1
c0023b43:	6a 07                	push   0x7
c0023b45:	56                   	push   esi
c0023b46:	53                   	push   ebx
c0023b47:	e8 0e f6 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b4c:	5f                   	pop    edi
c0023b4d:	58                   	pop    eax
c0023b4e:	6a 00                	push   0x0
c0023b50:	68 40 42 0f 00       	push   0xf4240
c0023b55:	e8 52 a8 ff ff       	call   c001e3ac <nanoSleep(unsigned long long)>
c0023b5a:	83 c4 10             	add    esp,0x10
c0023b5d:	b1 01                	mov    cl,0x1
c0023b5f:	e9 4a fe ff ff       	jmp    c00239ae <IDE::detect()+0x126>
c0023b64:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023b6a:	5b                   	pop    ebx
c0023b6b:	5e                   	pop    esi
c0023b6c:	5f                   	pop    edi
c0023b6d:	5d                   	pop    ebp
c0023b6e:	c3                   	ret    
c0023b6f:	90                   	nop

c0023b70 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023b70:	55                   	push   ebp
c0023b71:	57                   	push   edi
c0023b72:	56                   	push   esi
c0023b73:	53                   	push   ebx
c0023b74:	83 ec 1c             	sub    esp,0x1c
c0023b77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023b7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023b7f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023b83:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023b87:	88 c3                	mov    bl,al
c0023b89:	84 c0                	test   al,al
c0023b8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023b8f:	0f 84 67 01 00 00    	je     c0023cfc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023b95:	83 ec 0c             	sub    esp,0xc
c0023b98:	68 83 cd 02 c0       	push   0xc002cd83
c0023b9d:	e8 67 f3 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023ba2:	83 c4 10             	add    esp,0x10
c0023ba5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ba9:	3c 01                	cmp    al,0x1
c0023bab:	75 17                	jne    c0023bc4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023bad:	83 ec 0c             	sub    esp,0xc
c0023bb0:	b3 13                	mov    bl,0x13
c0023bb2:	68 8f cd 02 c0       	push   0xc002cd8f
c0023bb7:	e8 4d f3 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023bbc:	83 c4 10             	add    esp,0x10
c0023bbf:	e9 25 01 00 00       	jmp    c0023ce9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bc4:	3c 02                	cmp    al,0x2
c0023bc6:	0f 85 ef 00 00 00    	jne    c0023cbb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023bcc:	d1 e6                	shl    esi,1
c0023bce:	09 ee                	or     esi,ebp
c0023bd0:	52                   	push   edx
c0023bd1:	89 f0                	mov    eax,esi
c0023bd3:	6a 01                	push   0x1
c0023bd5:	0f b6 f0             	movzx  esi,al
c0023bd8:	c1 e6 06             	shl    esi,0x6
c0023bdb:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023be3:	50                   	push   eax
c0023be4:	57                   	push   edi
c0023be5:	e8 30 f6 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023bea:	83 c4 10             	add    esp,0x10
c0023bed:	89 c6                	mov    esi,eax
c0023bef:	a8 01                	test   al,0x1
c0023bf1:	74 12                	je     c0023c05 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023bf3:	83 ec 0c             	sub    esp,0xc
c0023bf6:	b3 07                	mov    bl,0x7
c0023bf8:	68 a4 cd 02 c0       	push   0xc002cda4
c0023bfd:	e8 07 f3 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023c02:	83 c4 10             	add    esp,0x10
c0023c05:	f7 c6 02 00 00 00    	test   esi,0x2
c0023c0b:	74 12                	je     c0023c1f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023c0d:	83 ec 0c             	sub    esp,0xc
c0023c10:	b3 03                	mov    bl,0x3
c0023c12:	68 c2 cd 02 c0       	push   0xc002cdc2
c0023c17:	e8 ed f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023c1c:	83 c4 10             	add    esp,0x10
c0023c1f:	f7 c6 04 00 00 00    	test   esi,0x4
c0023c25:	74 12                	je     c0023c39 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023c27:	83 ec 0c             	sub    esp,0xc
c0023c2a:	b3 14                	mov    bl,0x14
c0023c2c:	68 e2 cd 02 c0       	push   0xc002cde2
c0023c31:	e8 d3 f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023c36:	83 c4 10             	add    esp,0x10
c0023c39:	f7 c6 08 00 00 00    	test   esi,0x8
c0023c3f:	74 12                	je     c0023c53 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023c41:	83 ec 0c             	sub    esp,0xc
c0023c44:	b3 03                	mov    bl,0x3
c0023c46:	68 c2 cd 02 c0       	push   0xc002cdc2
c0023c4b:	e8 b9 f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023c50:	83 c4 10             	add    esp,0x10
c0023c53:	f7 c6 10 00 00 00    	test   esi,0x10
c0023c59:	74 12                	je     c0023c6d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023c5b:	83 ec 0c             	sub    esp,0xc
c0023c5e:	b3 15                	mov    bl,0x15
c0023c60:	68 fa cd 02 c0       	push   0xc002cdfa
c0023c65:	e8 9f f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023c6a:	83 c4 10             	add    esp,0x10
c0023c6d:	f7 c6 20 00 00 00    	test   esi,0x20
c0023c73:	74 12                	je     c0023c87 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023c75:	83 ec 0c             	sub    esp,0xc
c0023c78:	b3 03                	mov    bl,0x3
c0023c7a:	68 c2 cd 02 c0       	push   0xc002cdc2
c0023c7f:	e8 85 f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023c84:	83 c4 10             	add    esp,0x10
c0023c87:	f7 c6 40 00 00 00    	test   esi,0x40
c0023c8d:	74 12                	je     c0023ca1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023c8f:	83 ec 0c             	sub    esp,0xc
c0023c92:	b3 16                	mov    bl,0x16
c0023c94:	68 14 ce 02 c0       	push   0xc002ce14
c0023c99:	e8 6b f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023c9e:	83 c4 10             	add    esp,0x10
c0023ca1:	89 f0                	mov    eax,esi
c0023ca3:	84 c0                	test   al,al
c0023ca5:	79 42                	jns    c0023ce9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ca7:	83 ec 0c             	sub    esp,0xc
c0023caa:	b3 0d                	mov    bl,0xd
c0023cac:	68 35 ce 02 c0       	push   0xc002ce35
c0023cb1:	e8 53 f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023cb6:	83 c4 10             	add    esp,0x10
c0023cb9:	eb 2e                	jmp    c0023ce9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023cbb:	3c 03                	cmp    al,0x3
c0023cbd:	75 14                	jne    c0023cd3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023cbf:	83 ec 0c             	sub    esp,0xc
c0023cc2:	b3 17                	mov    bl,0x17
c0023cc4:	68 49 ce 02 c0       	push   0xc002ce49
c0023cc9:	e8 3b f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023cce:	83 c4 10             	add    esp,0x10
c0023cd1:	eb 16                	jmp    c0023ce9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023cd3:	3c 04                	cmp    al,0x4
c0023cd5:	75 12                	jne    c0023ce9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023cd7:	83 ec 0c             	sub    esp,0xc
c0023cda:	b3 08                	mov    bl,0x8
c0023cdc:	68 5f ce 02 c0       	push   0xc002ce5f
c0023ce1:	e8 23 f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023ce6:	83 c4 10             	add    esp,0x10
c0023ce9:	50                   	push   eax
c0023cea:	50                   	push   eax
c0023ceb:	0f b6 c3             	movzx  eax,bl
c0023cee:	50                   	push   eax
c0023cef:	68 77 ce 02 c0       	push   0xc002ce77
c0023cf4:	e8 10 f2 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023cf9:	83 c4 10             	add    esp,0x10
c0023cfc:	83 c4 1c             	add    esp,0x1c
c0023cff:	88 d8                	mov    al,bl
c0023d01:	5b                   	pop    ebx
c0023d02:	5e                   	pop    esi
c0023d03:	5f                   	pop    edi
c0023d04:	5d                   	pop    ebp
c0023d05:	c3                   	ret    

c0023d06 <IDE::polling(unsigned char, unsigned int)>:
c0023d06:	57                   	push   edi
c0023d07:	56                   	push   esi
c0023d08:	53                   	push   ebx
c0023d09:	bb 04 00 00 00       	mov    ebx,0x4
c0023d0e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023d12:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023d17:	52                   	push   edx
c0023d18:	6a 0c                	push   0xc
c0023d1a:	56                   	push   esi
c0023d1b:	57                   	push   edi
c0023d1c:	e8 f9 f4 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023d21:	83 c4 10             	add    esp,0x10
c0023d24:	4b                   	dec    ebx
c0023d25:	75 f0                	jne    c0023d17 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023d27:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023d2c:	50                   	push   eax
c0023d2d:	6a 0c                	push   0xc
c0023d2f:	56                   	push   esi
c0023d30:	57                   	push   edi
c0023d31:	e8 e4 f4 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c0023d36:	83 c4 10             	add    esp,0x10
c0023d39:	a8 01                	test   al,0x1
c0023d3b:	74 12                	je     c0023d4f <IDE::polling(unsigned char, unsigned int)+0x49>
c0023d3d:	83 ec 0c             	sub    esp,0xc
c0023d40:	68 91 ce 02 c0       	push   0xc002ce91
c0023d45:	e8 bf f1 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023d4a:	83 c4 10             	add    esp,0x10
c0023d4d:	eb 17                	jmp    c0023d66 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023d4f:	a8 20                	test   al,0x20
c0023d51:	75 0f                	jne    c0023d62 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023d53:	4b                   	dec    ebx
c0023d54:	74 10                	je     c0023d66 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023d56:	84 c0                	test   al,al
c0023d58:	78 d2                	js     c0023d2c <IDE::polling(unsigned char, unsigned int)+0x26>
c0023d5a:	a8 08                	test   al,0x8
c0023d5c:	74 ce                	je     c0023d2c <IDE::polling(unsigned char, unsigned int)+0x26>
c0023d5e:	31 c0                	xor    eax,eax
c0023d60:	eb 06                	jmp    c0023d68 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023d62:	b0 01                	mov    al,0x1
c0023d64:	eb 02                	jmp    c0023d68 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023d66:	b0 02                	mov    al,0x2
c0023d68:	5b                   	pop    ebx
c0023d69:	5e                   	pop    esi
c0023d6a:	5f                   	pop    edi
c0023d6b:	c3                   	ret    

c0023d6c <SATABus::close(int, int, void*)>:
c0023d6c:	31 c0                	xor    eax,eax
c0023d6e:	c3                   	ret    
c0023d6f:	90                   	nop

c0023d70 <SATABus::detect()>:
c0023d70:	c3                   	ret    
c0023d71:	90                   	nop

c0023d72 <SATABus::SATABus()>:
c0023d72:	83 ec 0c             	sub    esp,0xc
c0023d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d79:	83 ec 08             	sub    esp,0x8
c0023d7c:	68 d4 ce 02 c0       	push   0xc002ced4
c0023d81:	50                   	push   eax
c0023d82:	e8 3b 09 ff ff       	call   c00146c2 <HardDiskController::HardDiskController(char const*)>
c0023d87:	83 c4 10             	add    esp,0x10
c0023d8a:	ba 90 cf 02 c0       	mov    edx,0xc002cf90
c0023d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d93:	89 10                	mov    DWORD PTR [eax],edx
c0023d95:	83 ec 0c             	sub    esp,0xc
c0023d98:	6a 50                	push   0x50
c0023d9a:	e8 33 c2 fe ff       	call   c000ffd2 <Phys::allocateContiguousPages(int)>
c0023d9f:	83 c4 10             	add    esp,0x10
c0023da2:	89 c2                	mov    edx,eax
c0023da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023da8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023dae:	83 ec 0c             	sub    esp,0xc
c0023db1:	6a 50                	push   0x50
c0023db3:	e8 93 dd fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0023db8:	83 c4 10             	add    esp,0x10
c0023dbb:	89 c2                	mov    edx,eax
c0023dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dc1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023dc7:	e8 1a e0 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0023dcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023dd0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023dd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023dda:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023de0:	83 ec 0c             	sub    esp,0xc
c0023de3:	6a 03                	push   0x3
c0023de5:	6a 50                	push   0x50
c0023de7:	51                   	push   ecx
c0023de8:	52                   	push   edx
c0023de9:	50                   	push   eax
c0023dea:	e8 67 e8 fe ff       	call   c0012656 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023def:	83 c4 20             	add    esp,0x20
c0023df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023df6:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e00:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023e06:	83 ec 04             	sub    esp,0x4
c0023e09:	52                   	push   edx
c0023e0a:	50                   	push   eax
c0023e0b:	68 f8 ce 02 c0       	push   0xc002cef8
c0023e10:	e8 f4 f0 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0023e15:	83 c4 10             	add    esp,0x10
c0023e18:	90                   	nop
c0023e19:	83 c4 0c             	add    esp,0xc
c0023e1c:	c3                   	ret    
c0023e1d:	90                   	nop

c0023e1e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023e1e:	83 ec 0c             	sub    esp,0xc
c0023e21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023e25:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023e28:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023e2b:	09 c2                	or     edx,eax
c0023e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e31:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023e37:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023e39:	31 c0                	xor    eax,eax
c0023e3b:	c1 e9 08             	shr    ecx,0x8
c0023e3e:	83 e1 0f             	and    ecx,0xf
c0023e41:	39 c8                	cmp    eax,ecx
c0023e43:	74 0a                	je     c0023e4f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023e45:	f6 c2 01             	test   dl,0x1
c0023e48:	74 18                	je     c0023e62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e4a:	d1 ea                	shr    edx,1
c0023e4c:	40                   	inc    eax
c0023e4d:	eb f2                	jmp    c0023e41 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023e4f:	83 ec 0c             	sub    esp,0xc
c0023e52:	68 1c cf 02 c0       	push   0xc002cf1c
c0023e57:	e8 eb 67 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0023e5c:	83 c4 10             	add    esp,0x10
c0023e5f:	83 c8 ff             	or     eax,0xffffffff
c0023e62:	83 c4 0c             	add    esp,0xc
c0023e65:	c3                   	ret    

c0023e66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023e66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e6a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023e6d:	89 c2                	mov    edx,eax
c0023e6f:	c1 ea 08             	shr    edx,0x8
c0023e72:	83 e2 0f             	and    edx,0xf
c0023e75:	fe ca                	dec    dl
c0023e77:	75 31                	jne    c0023eaa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e79:	83 e0 0f             	and    eax,0xf
c0023e7c:	3c 03                	cmp    al,0x3
c0023e7e:	75 2a                	jne    c0023eaa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e80:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023e83:	b8 02 00 00 00       	mov    eax,0x2
c0023e88:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023e8e:	74 1c                	je     c0023eac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e90:	b8 04 00 00 00       	mov    eax,0x4
c0023e95:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023e9b:	74 0f                	je     c0023eac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e9d:	31 c0                	xor    eax,eax
c0023e9f:	83 fa 03             	cmp    edx,0x3
c0023ea2:	0f 94 c0             	sete   al
c0023ea5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023ea9:	c3                   	ret    
c0023eaa:	31 c0                	xor    eax,eax
c0023eac:	c3                   	ret    
c0023ead:	90                   	nop

c0023eae <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023eb2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023eb5:	0f ba e2 0f          	bt     edx,0xf
c0023eb9:	72 f7                	jb     c0023eb2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023ebb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ebe:	83 ca 10             	or     edx,0x10
c0023ec1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ec4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ec7:	83 ca 01             	or     edx,0x1
c0023eca:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ecd:	c3                   	ret    

c0023ece <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ece:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ed2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ed5:	83 e2 fe             	and    edx,0xfffffffe
c0023ed8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023edb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ede:	83 e2 ef             	and    edx,0xffffffef
c0023ee1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ee4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ee7:	0f ba e2 0e          	bt     edx,0xe
c0023eeb:	72 f7                	jb     c0023ee4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023eed:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ef0:	0f ba e2 0f          	bt     edx,0xf
c0023ef4:	72 ee                	jb     c0023ee4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023ef6:	c3                   	ret    
c0023ef7:	90                   	nop

c0023ef8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023ef8:	55                   	push   ebp
c0023ef9:	57                   	push   edi
c0023efa:	56                   	push   esi
c0023efb:	53                   	push   ebx
c0023efc:	83 ec 1c             	sub    esp,0x1c
c0023eff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f03:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f07:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023f0b:	53                   	push   ebx
c0023f0c:	89 fd                	mov    ebp,edi
c0023f0e:	56                   	push   esi
c0023f0f:	c1 e5 0a             	shl    ebp,0xa
c0023f12:	e8 b7 ff ff ff       	call   c0023ece <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023f17:	83 ec 0c             	sub    esp,0xc
c0023f1a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023f20:	01 e8                	add    eax,ebp
c0023f22:	89 03                	mov    DWORD PTR [ebx],eax
c0023f24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f26:	68 00 04 00 00       	push   0x400
c0023f2b:	6a 00                	push   0x0
c0023f2d:	50                   	push   eax
c0023f2e:	e8 4d c8 fd ff       	call   c0000780 <memset>
c0023f33:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023f39:	89 fa                	mov    edx,edi
c0023f3b:	01 e8                	add    eax,ebp
c0023f3d:	c1 e7 0d             	shl    edi,0xd
c0023f40:	89 03                	mov    DWORD PTR [ebx],eax
c0023f42:	c1 e2 08             	shl    edx,0x8
c0023f45:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023f4c:	81 c2 00 80 00 00    	add    edx,0x8000
c0023f52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023f56:	89 d0                	mov    eax,edx
c0023f58:	83 c4 1c             	add    esp,0x1c
c0023f5b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f61:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023f64:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023f67:	68 00 01 00 00       	push   0x100
c0023f6c:	6a 00                	push   0x0
c0023f6e:	50                   	push   eax
c0023f6f:	e8 0c c8 fd ff       	call   c0000780 <memset>
c0023f74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f78:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023f7e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023f84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f88:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023f8b:	83 c4 10             	add    esp,0x10
c0023f8e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023f95:	31 ff                	xor    edi,edi
c0023f97:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023f9d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023fa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023fa7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023fad:	83 c5 20             	add    ebp,0x20
c0023fb0:	01 f8                	add    eax,edi
c0023fb2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023fb5:	52                   	push   edx
c0023fb6:	68 00 01 00 00       	push   0x100
c0023fbb:	6a 00                	push   0x0
c0023fbd:	50                   	push   eax
c0023fbe:	e8 bd c7 fd ff       	call   c0000780 <memset>
c0023fc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023fc7:	83 c4 10             	add    esp,0x10
c0023fca:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023fd0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023fd7:	01 f8                	add    eax,edi
c0023fd9:	81 c7 00 01 00 00    	add    edi,0x100
c0023fdf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023fe2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023fe8:	75 b3                	jne    c0023f9d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023fea:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023fee:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ff2:	83 c4 1c             	add    esp,0x1c
c0023ff5:	5b                   	pop    ebx
c0023ff6:	5e                   	pop    esi
c0023ff7:	5f                   	pop    edi
c0023ff8:	5d                   	pop    ebp
c0023ff9:	e9 b0 fe ff ff       	jmp    c0023eae <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ffe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ffe:	55                   	push   ebp
c0023fff:	57                   	push   edi
c0024000:	56                   	push   esi
c0024001:	53                   	push   ebx
c0024002:	31 db                	xor    ebx,ebx
c0024004:	83 ec 0c             	sub    esp,0xc
c0024007:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002400b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002400f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024012:	f7 c7 01 00 00 00    	test   edi,0x1
c0024018:	0f 84 aa 00 00 00    	je     c00240c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002401e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024022:	89 d8                	mov    eax,ebx
c0024024:	c1 e0 07             	shl    eax,0x7
c0024027:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c002402e:	55                   	push   ebp
c002402f:	56                   	push   esi
c0024030:	e8 31 fe ff ff       	call   c0023e66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024035:	5a                   	pop    edx
c0024036:	83 f8 01             	cmp    eax,0x1
c0024039:	59                   	pop    ecx
c002403a:	75 30                	jne    c002406c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c002403c:	50                   	push   eax
c002403d:	50                   	push   eax
c002403e:	53                   	push   ebx
c002403f:	68 41 cf 02 c0       	push   0xc002cf41
c0024044:	e8 c0 ee fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0024049:	83 c4 0c             	add    esp,0xc
c002404c:	53                   	push   ebx
c002404d:	55                   	push   ebp
c002404e:	56                   	push   esi
c002404f:	e8 a4 fe ff ff       	call   c0023ef8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024054:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002405b:	e8 eb b7 fe ff       	call   c000f84b <malloc>
c0024060:	89 c5                	mov    ebp,eax
c0024062:	89 04 24             	mov    DWORD PTR [esp],eax
c0024065:	e8 60 0d 00 00       	call   c0024dca <SATA::SATA()>
c002406a:	eb 33                	jmp    c002409f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c002406c:	83 f8 04             	cmp    eax,0x4
c002406f:	75 47                	jne    c00240b8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024071:	50                   	push   eax
c0024072:	50                   	push   eax
c0024073:	53                   	push   ebx
c0024074:	68 58 cf 02 c0       	push   0xc002cf58
c0024079:	e8 8b ee fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c002407e:	83 c4 0c             	add    esp,0xc
c0024081:	53                   	push   ebx
c0024082:	55                   	push   ebp
c0024083:	56                   	push   esi
c0024084:	e8 6f fe ff ff       	call   c0023ef8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024089:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024090:	e8 b6 b7 fe ff       	call   c000f84b <malloc>
c0024095:	89 c5                	mov    ebp,eax
c0024097:	89 04 24             	mov    DWORD PTR [esp],eax
c002409a:	e8 d7 10 00 00       	call   c0025176 <SATAPI::SATAPI()>
c002409f:	5a                   	pop    edx
c00240a0:	59                   	pop    ecx
c00240a1:	55                   	push   ebp
c00240a2:	56                   	push   esi
c00240a3:	e8 8e 02 ff ff       	call   c0014336 <Device::addChild(Device*)>
c00240a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00240ab:	56                   	push   esi
c00240ac:	6a 00                	push   0x0
c00240ae:	53                   	push   ebx
c00240af:	55                   	push   ebp
c00240b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00240b3:	83 c4 20             	add    esp,0x20
c00240b6:	eb 10                	jmp    c00240c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00240b8:	50                   	push   eax
c00240b9:	50                   	push   eax
c00240ba:	53                   	push   ebx
c00240bb:	68 71 cf 02 c0       	push   0xc002cf71
c00240c0:	e8 44 ee fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00240c5:	83 c4 10             	add    esp,0x10
c00240c8:	d1 ef                	shr    edi,1
c00240ca:	43                   	inc    ebx
c00240cb:	83 fb 20             	cmp    ebx,0x20
c00240ce:	0f 85 3e ff ff ff    	jne    c0024012 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00240d4:	83 c4 0c             	add    esp,0xc
c00240d7:	5b                   	pop    ebx
c00240d8:	5e                   	pop    esi
c00240d9:	5f                   	pop    edi
c00240da:	5d                   	pop    ebp
c00240db:	c3                   	ret    

c00240dc <SATABus::open(int, int, void*)>:
c00240dc:	83 ec 14             	sub    esp,0x14
c00240df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00240e3:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00240e9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00240ef:	52                   	push   edx
c00240f0:	50                   	push   eax
c00240f1:	e8 08 ff ff ff       	call   c0023ffe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00240f6:	31 c0                	xor    eax,eax
c00240f8:	83 c4 1c             	add    esp,0x1c
c00240fb:	c3                   	ret    

c00240fc <ATA::close(int, int, void*)>:
c00240fc:	83 ec 0c             	sub    esp,0xc
c00240ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024103:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024109:	85 c0                	test   eax,eax
c002410b:	74 0c                	je     c0024119 <ATA::close(int, int, void*)+0x1d>
c002410d:	83 ec 0c             	sub    esp,0xc
c0024110:	8b 10                	mov    edx,DWORD PTR [eax]
c0024112:	50                   	push   eax
c0024113:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024116:	83 c4 10             	add    esp,0x10
c0024119:	31 c0                	xor    eax,eax
c002411b:	83 c4 0c             	add    esp,0xc
c002411e:	c3                   	ret    
c002411f:	90                   	nop

c0024120 <ATA::powerSaving(PowerSavingLevel)>:
c0024120:	c3                   	ret    
c0024121:	90                   	nop

c0024122 <ATA::ATA()>:
c0024122:	83 ec 0c             	sub    esp,0xc
c0024125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024129:	83 ec 04             	sub    esp,0x4
c002412c:	68 00 02 00 00       	push   0x200
c0024131:	68 59 d0 02 c0       	push   0xc002d059
c0024136:	50                   	push   eax
c0024137:	e8 1e 06 ff ff       	call   c001475a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002413c:	83 c4 10             	add    esp,0x10
c002413f:	ba dc cf 02 c0       	mov    edx,0xc002cfdc
c0024144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024148:	89 10                	mov    DWORD PTR [eax],edx
c002414a:	90                   	nop
c002414b:	83 c4 0c             	add    esp,0xc
c002414e:	c3                   	ret    
c002414f:	90                   	nop

c0024150 <ATA::flush(bool)>:
c0024150:	53                   	push   ebx
c0024151:	83 ec 08             	sub    esp,0x8
c0024154:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002415d:	19 c0                	sbb    eax,eax
c002415f:	83 e0 fd             	and    eax,0xfffffffd
c0024162:	05 ea 00 00 00       	add    eax,0xea
c0024167:	50                   	push   eax
c0024168:	6a 07                	push   0x7
c002416a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024171:	50                   	push   eax
c0024172:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024178:	e8 dd ef ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002417d:	83 c4 0c             	add    esp,0xc
c0024180:	6a 00                	push   0x0
c0024182:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024189:	50                   	push   eax
c002418a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024190:	e8 71 fb ff ff       	call   c0023d06 <IDE::polling(unsigned char, unsigned int)>
c0024195:	83 c4 18             	add    esp,0x18
c0024198:	5b                   	pop    ebx
c0024199:	c3                   	ret    

c002419a <ATA::readyForCommand()>:
c002419a:	56                   	push   esi
c002419b:	53                   	push   ebx
c002419c:	31 db                	xor    ebx,ebx
c002419e:	50                   	push   eax
c002419f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00241a3:	50                   	push   eax
c00241a4:	6a 0c                	push   0xc
c00241a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00241ad:	50                   	push   eax
c00241ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00241b4:	e8 61 f0 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c00241b9:	83 c4 10             	add    esp,0x10
c00241bc:	a8 88                	test   al,0x88
c00241be:	74 23                	je     c00241e3 <ATA::readyForCommand()+0x49>
c00241c0:	43                   	inc    ebx
c00241c1:	83 fb 63             	cmp    ebx,0x63
c00241c4:	7e dd                	jle    c00241a3 <ATA::readyForCommand()+0x9>
c00241c6:	51                   	push   ecx
c00241c7:	51                   	push   ecx
c00241c8:	6a 00                	push   0x0
c00241ca:	68 40 42 0f 00       	push   0xf4240
c00241cf:	e8 d8 a1 ff ff       	call   c001e3ac <nanoSleep(unsigned long long)>
c00241d4:	83 c4 10             	add    esp,0x10
c00241d7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00241dd:	75 c4                	jne    c00241a3 <ATA::readyForCommand()+0x9>
c00241df:	31 c0                	xor    eax,eax
c00241e1:	eb 02                	jmp    c00241e5 <ATA::readyForCommand()+0x4b>
c00241e3:	b0 01                	mov    al,0x1
c00241e5:	5a                   	pop    edx
c00241e6:	5b                   	pop    ebx
c00241e7:	5e                   	pop    esi
c00241e8:	c3                   	ret    
c00241e9:	90                   	nop

c00241ea <ATA::access(unsigned long long, int, void*, bool)>:
c00241ea:	55                   	push   ebp
c00241eb:	57                   	push   edi
c00241ec:	56                   	push   esi
c00241ed:	53                   	push   ebx
c00241ee:	83 ec 2c             	sub    esp,0x2c
c00241f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00241f5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00241f9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00241fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024201:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024205:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024209:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002420d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024213:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024217:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024221:	c1 e0 06             	shl    eax,0x6
c0024224:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002422c:	74 5d                	je     c002428b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002422e:	89 fa                	mov    edx,edi
c0024230:	89 f0                	mov    eax,esi
c0024232:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024236:	c1 ea 1c             	shr    edx,0x1c
c0024239:	89 d1                	mov    ecx,edx
c002423b:	09 c1                	or     ecx,eax
c002423d:	74 25                	je     c0024264 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002423f:	31 ed                	xor    ebp,ebp
c0024241:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024248:	89 fa                	mov    edx,edi
c002424a:	89 f0                	mov    eax,esi
c002424c:	0f ad d0             	shrd   eax,edx,cl
c002424f:	d3 ea                	shr    edx,cl
c0024251:	f6 c1 20             	test   cl,0x20
c0024254:	74 02                	je     c0024258 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024256:	89 d0                	mov    eax,edx
c0024258:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002425c:	45                   	inc    ebp
c002425d:	83 fd 06             	cmp    ebp,0x6
c0024260:	75 df                	jne    c0024241 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024262:	eb 76                	jmp    c00242da <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024264:	89 f0                	mov    eax,esi
c0024266:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002426b:	89 fa                	mov    edx,edi
c002426d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024274:	0f ac d0 10          	shrd   eax,edx,0x10
c0024278:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002427d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024281:	c1 ee 18             	shr    esi,0x18
c0024284:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024289:	eb 56                	jmp    c00242e1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002428b:	6a 00                	push   0x0
c002428d:	6a 3f                	push   0x3f
c002428f:	57                   	push   edi
c0024290:	56                   	push   esi
c0024291:	e8 9e 29 00 00       	call   c0026c34 <__umoddi3>
c0024296:	83 c4 10             	add    esp,0x10
c0024299:	40                   	inc    eax
c002429a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002429e:	6a 00                	push   0x0
c00242a0:	68 f0 03 00 00       	push   0x3f0
c00242a5:	57                   	push   edi
c00242a6:	56                   	push   esi
c00242a7:	e8 88 28 00 00       	call   c0026b34 <__udivdi3>
c00242ac:	83 c4 10             	add    esp,0x10
c00242af:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00242b4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00242bb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00242c0:	6a 00                	push   0x0
c00242c2:	6a 3f                	push   0x3f
c00242c4:	57                   	push   edi
c00242c5:	56                   	push   esi
c00242c6:	e8 69 28 00 00       	call   c0026b34 <__udivdi3>
c00242cb:	83 c4 10             	add    esp,0x10
c00242ce:	89 c6                	mov    esi,eax
c00242d0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00242d5:	83 e6 0f             	and    esi,0xf
c00242d8:	eb 07                	jmp    c00242e1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00242da:	31 f6                	xor    esi,esi
c00242dc:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00242e1:	bf 01 00 00 00       	mov    edi,0x1
c00242e6:	50                   	push   eax
c00242e7:	6a 00                	push   0x0
c00242e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f0:	50                   	push   eax
c00242f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00242f5:	e8 6c f0 ff ff       	call   c0023366 <IDE::enableIRQs(unsigned char, bool)>
c00242fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00242fd:	e8 98 fe ff ff       	call   c002419a <ATA::readyForCommand()>
c0024302:	83 c4 10             	add    esp,0x10
c0024305:	84 c0                	test   al,al
c0024307:	0f 84 5a 02 00 00    	je     c0024567 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002430d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024313:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024319:	c1 e0 04             	shl    eax,0x4
c002431c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024323:	09 c6                	or     esi,eax
c0024325:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002432a:	75 05                	jne    c0024331 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002432c:	83 ce a0             	or     esi,0xffffffa0
c002432f:	eb 03                	jmp    c0024334 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024331:	83 ce e0             	or     esi,0xffffffe0
c0024334:	89 f0                	mov    eax,esi
c0024336:	0f b6 f0             	movzx  esi,al
c0024339:	56                   	push   esi
c002433a:	6a 06                	push   0x6
c002433c:	51                   	push   ecx
c002433d:	52                   	push   edx
c002433e:	e8 17 ee ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024343:	83 c4 10             	add    esp,0x10
c0024346:	6a 00                	push   0x0
c0024348:	6a 01                	push   0x1
c002434a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024351:	50                   	push   eax
c0024352:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024358:	e8 fd ed ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002435d:	83 c4 10             	add    esp,0x10
c0024360:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024365:	75 6e                	jne    c00243d5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024367:	6a 00                	push   0x0
c0024369:	6a 08                	push   0x8
c002436b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024372:	50                   	push   eax
c0024373:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024379:	e8 dc ed ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002437e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024383:	50                   	push   eax
c0024384:	6a 09                	push   0x9
c0024386:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002438d:	50                   	push   eax
c002438e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024394:	e8 c1 ed ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024399:	83 c4 20             	add    esp,0x20
c002439c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00243a1:	50                   	push   eax
c00243a2:	6a 0a                	push   0xa
c00243a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ab:	50                   	push   eax
c00243ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b2:	e8 a3 ed ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00243bc:	50                   	push   eax
c00243bd:	6a 0b                	push   0xb
c00243bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243c6:	50                   	push   eax
c00243c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243cd:	e8 88 ed ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d2:	83 c4 20             	add    esp,0x20
c00243d5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00243da:	50                   	push   eax
c00243db:	6a 02                	push   0x2
c00243dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e4:	50                   	push   eax
c00243e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243eb:	e8 6a ed ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243f0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00243f5:	50                   	push   eax
c00243f6:	6a 03                	push   0x3
c00243f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ff:	50                   	push   eax
c0024400:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024406:	e8 4f ed ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002440b:	83 c4 20             	add    esp,0x20
c002440e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024413:	50                   	push   eax
c0024414:	6a 04                	push   0x4
c0024416:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002441d:	50                   	push   eax
c002441e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024424:	e8 31 ed ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024429:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002442e:	50                   	push   eax
c002442f:	6a 05                	push   0x5
c0024431:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024438:	50                   	push   eax
c0024439:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002443f:	e8 16 ed ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024444:	83 c4 20             	add    esp,0x20
c0024447:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002444c:	0f 94 c0             	sete   al
c002444f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024454:	74 09                	je     c002445f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024456:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002445d:	eb 07                	jmp    c0024466 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002445f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024466:	0f b6 c0             	movzx  eax,al
c0024469:	50                   	push   eax
c002446a:	6a 07                	push   0x7
c002446c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024473:	50                   	push   eax
c0024474:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002447a:	e8 db ec ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002447f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024483:	83 c4 10             	add    esp,0x10
c0024486:	85 f6                	test   esi,esi
c0024488:	0f 84 ba 00 00 00    	je     c0024548 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002448e:	50                   	push   eax
c002448f:	6a 01                	push   0x1
c0024491:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024498:	50                   	push   eax
c0024499:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002449f:	e8 62 f8 ff ff       	call   c0023d06 <IDE::polling(unsigned char, unsigned int)>
c00244a4:	83 c4 10             	add    esp,0x10
c00244a7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00244ad:	84 c0                	test   al,al
c00244af:	74 2c                	je     c00244dd <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00244b1:	0f b6 f8             	movzx  edi,al
c00244b4:	0f b6 d2             	movzx  edx,dl
c00244b7:	57                   	push   edi
c00244b8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00244bf:	50                   	push   eax
c00244c0:	52                   	push   edx
c00244c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244c7:	e8 a4 f6 ff ff       	call   c0023b70 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00244cc:	c7 04 24 b4 cf 02 c0 	mov    DWORD PTR [esp],0xc002cfb4
c00244d3:	e8 31 ea fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00244d8:	e9 87 00 00 00       	jmp    c0024564 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00244dd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00244e2:	74 33                	je     c0024517 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00244e4:	31 ed                	xor    ebp,ebp
c00244e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00244ea:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00244ee:	50                   	push   eax
c00244ef:	50                   	push   eax
c00244f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00244f7:	50                   	push   eax
c00244f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244fe:	e8 45 ec ff ff       	call   c0023148 <IDE::getBase(unsigned char)>
c0024503:	89 c2                	mov    edx,eax
c0024505:	89 f8                	mov    eax,edi
c0024507:	66 ef                	out    dx,ax
c0024509:	45                   	inc    ebp
c002450a:	83 c4 10             	add    esp,0x10
c002450d:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024513:	75 d1                	jne    c00244e6 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024515:	eb 23                	jmp    c002453a <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024517:	0f b6 d2             	movzx  edx,dl
c002451a:	51                   	push   ecx
c002451b:	51                   	push   ecx
c002451c:	52                   	push   edx
c002451d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024523:	e8 20 ec ff ff       	call   c0023148 <IDE::getBase(unsigned char)>
c0024528:	b9 00 01 00 00       	mov    ecx,0x100
c002452d:	89 c2                	mov    edx,eax
c002452f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024533:	fc                   	cld    
c0024534:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024537:	83 c4 10             	add    esp,0x10
c002453a:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024542:	4e                   	dec    esi
c0024543:	e9 3e ff ff ff       	jmp    c0024486 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024548:	31 ff                	xor    edi,edi
c002454a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002454f:	74 16                	je     c0024567 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024551:	50                   	push   eax
c0024552:	50                   	push   eax
c0024553:	31 c0                	xor    eax,eax
c0024555:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002455a:	0f 94 c0             	sete   al
c002455d:	50                   	push   eax
c002455e:	53                   	push   ebx
c002455f:	e8 ec fb ff ff       	call   c0024150 <ATA::flush(bool)>
c0024564:	83 c4 10             	add    esp,0x10
c0024567:	83 c4 2c             	add    esp,0x2c
c002456a:	89 f8                	mov    eax,edi
c002456c:	5b                   	pop    ebx
c002456d:	5e                   	pop    esi
c002456e:	5f                   	pop    edi
c002456f:	5d                   	pop    ebp
c0024570:	c3                   	ret    
c0024571:	90                   	nop

c0024572 <ATA::read(unsigned long long, int, void*)>:
c0024572:	57                   	push   edi
c0024573:	b8 04 00 00 00       	mov    eax,0x4
c0024578:	56                   	push   esi
c0024579:	53                   	push   ebx
c002457a:	83 ec 10             	sub    esp,0x10
c002457d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024581:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024585:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024588:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002458c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024590:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024596:	77 3b                	ja     c00245d3 <ATA::read(unsigned long long, int, void*)+0x61>
c0024598:	b8 06 00 00 00       	mov    eax,0x6
c002459d:	85 d2                	test   edx,edx
c002459f:	74 32                	je     c00245d3 <ATA::read(unsigned long long, int, void*)+0x61>
c00245a1:	50                   	push   eax
c00245a2:	50                   	push   eax
c00245a3:	6a 00                	push   0x0
c00245a5:	52                   	push   edx
c00245a6:	53                   	push   ebx
c00245a7:	57                   	push   edi
c00245a8:	56                   	push   esi
c00245a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00245ad:	e8 38 fc ff ff       	call   c00241ea <ATA::access(unsigned long long, int, void*, bool)>
c00245b2:	83 c4 20             	add    esp,0x20
c00245b5:	85 c0                	test   eax,eax
c00245b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245bb:	75 11                	jne    c00245ce <ATA::read(unsigned long long, int, void*)+0x5c>
c00245bd:	01 1d 68 29 03 c0    	add    DWORD PTR ds:0xc0032968,ebx
c00245c3:	e8 d8 c3 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c00245c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245cc:	eb 05                	jmp    c00245d3 <ATA::read(unsigned long long, int, void*)+0x61>
c00245ce:	b8 01 00 00 00       	mov    eax,0x1
c00245d3:	83 c4 10             	add    esp,0x10
c00245d6:	5b                   	pop    ebx
c00245d7:	5e                   	pop    esi
c00245d8:	5f                   	pop    edi
c00245d9:	c3                   	ret    

c00245da <ATA::write(unsigned long long, int, void*)>:
c00245da:	57                   	push   edi
c00245db:	b8 04 00 00 00       	mov    eax,0x4
c00245e0:	56                   	push   esi
c00245e1:	53                   	push   ebx
c00245e2:	83 ec 10             	sub    esp,0x10
c00245e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00245e9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00245ed:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00245f0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00245f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00245f8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00245fe:	77 3b                	ja     c002463b <ATA::write(unsigned long long, int, void*)+0x61>
c0024600:	b8 06 00 00 00       	mov    eax,0x6
c0024605:	85 d2                	test   edx,edx
c0024607:	74 32                	je     c002463b <ATA::write(unsigned long long, int, void*)+0x61>
c0024609:	50                   	push   eax
c002460a:	50                   	push   eax
c002460b:	6a 01                	push   0x1
c002460d:	52                   	push   edx
c002460e:	53                   	push   ebx
c002460f:	57                   	push   edi
c0024610:	56                   	push   esi
c0024611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024615:	e8 d0 fb ff ff       	call   c00241ea <ATA::access(unsigned long long, int, void*, bool)>
c002461a:	83 c4 20             	add    esp,0x20
c002461d:	85 c0                	test   eax,eax
c002461f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024623:	75 11                	jne    c0024636 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024625:	01 1d 64 29 03 c0    	add    DWORD PTR ds:0xc0032964,ebx
c002462b:	e8 70 c3 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0024630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024634:	eb 05                	jmp    c002463b <ATA::write(unsigned long long, int, void*)+0x61>
c0024636:	b8 01 00 00 00       	mov    eax,0x1
c002463b:	83 c4 10             	add    esp,0x10
c002463e:	5b                   	pop    ebx
c002463f:	5e                   	pop    esi
c0024640:	5f                   	pop    edi
c0024641:	c3                   	ret    

c0024642 <ATA::detectCHS()>:
c0024642:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024646:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002464c:	c1 e0 06             	shl    eax,0x6
c002464f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024655:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002465f:	c7 44 24 04 bf cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cfbf
c0024667:	e9 db 5f ff ff       	jmp    c001a647 <Krnl::panic(char const*)>

c002466c <ATA::open(int, int, void*)>:
c002466c:	53                   	push   ebx
c002466d:	83 ec 08             	sub    esp,0x8
c0024670:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024674:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024678:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002467c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024682:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024688:	c1 e0 06             	shl    eax,0x6
c002468b:	01 d0                	add    eax,edx
c002468d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024694:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002469a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00246a1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00246ab:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00246b1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00246b8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00246bf:	75 0c                	jne    c00246cd <ATA::open(int, int, void*)+0x61>
c00246c1:	83 ec 0c             	sub    esp,0xc
c00246c4:	53                   	push   ebx
c00246c5:	e8 78 ff ff ff       	call   c0024642 <ATA::detectCHS()>
c00246ca:	83 c4 10             	add    esp,0x10
c00246cd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00246d3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00246d9:	c1 e0 06             	shl    eax,0x6
c00246dc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00246e3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00246ed:	d1 e8                	shr    eax,1
c00246ef:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00246f5:	6a 04                	push   0x4
c00246f7:	6a 0c                	push   0xc
c00246f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024700:	50                   	push   eax
c0024701:	52                   	push   edx
c0024702:	e8 53 ea ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024707:	90                   	nop
c0024708:	90                   	nop
c0024709:	6a 00                	push   0x0
c002470b:	6a 0c                	push   0xc
c002470d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024714:	50                   	push   eax
c0024715:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002471b:	e8 3a ea ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024720:	83 c4 14             	add    esp,0x14
c0024723:	53                   	push   ebx
c0024724:	e8 99 00 ff ff       	call   c00147c2 <PhysicalDisk::startCache()>
c0024729:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002472c:	e8 81 22 ff ff       	call   c00169b2 <createPartitionsForDisk(PhysicalDisk*)>
c0024731:	31 c0                	xor    eax,eax
c0024733:	83 c4 18             	add    esp,0x18
c0024736:	5b                   	pop    ebx
c0024737:	c3                   	ret    

c0024738 <ATAPI::write(unsigned long long, int, void*)>:
c0024738:	b8 03 00 00 00       	mov    eax,0x3
c002473d:	c3                   	ret    

c002473e <ATAPI::close(int, int, void*)>:
c002473e:	83 ec 0c             	sub    esp,0xc
c0024741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024745:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002474b:	85 c0                	test   eax,eax
c002474d:	74 0c                	je     c002475b <ATAPI::close(int, int, void*)+0x1d>
c002474f:	83 ec 0c             	sub    esp,0xc
c0024752:	8b 10                	mov    edx,DWORD PTR [eax]
c0024754:	50                   	push   eax
c0024755:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024758:	83 c4 10             	add    esp,0x10
c002475b:	31 c0                	xor    eax,eax
c002475d:	83 c4 0c             	add    esp,0xc
c0024760:	c3                   	ret    
c0024761:	90                   	nop

c0024762 <ATAPI::ATAPI()>:
c0024762:	83 ec 0c             	sub    esp,0xc
c0024765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024769:	83 ec 04             	sub    esp,0x4
c002476c:	68 00 08 00 00       	push   0x800
c0024771:	68 f9 d0 02 c0       	push   0xc002d0f9
c0024776:	50                   	push   eax
c0024777:	e8 de ff fe ff       	call   c001475a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002477c:	83 c4 10             	add    esp,0x10
c002477f:	ba 14 d0 02 c0       	mov    edx,0xc002d014
c0024784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024788:	89 10                	mov    DWORD PTR [eax],edx
c002478a:	90                   	nop
c002478b:	83 c4 0c             	add    esp,0xc
c002478e:	c3                   	ret    
c002478f:	90                   	nop

c0024790 <ATAPI::readyForCommand()>:
c0024790:	56                   	push   esi
c0024791:	53                   	push   ebx
c0024792:	31 db                	xor    ebx,ebx
c0024794:	50                   	push   eax
c0024795:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024799:	50                   	push   eax
c002479a:	6a 0c                	push   0xc
c002479c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00247a3:	50                   	push   eax
c00247a4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00247aa:	e8 6b ea ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c00247af:	83 c4 10             	add    esp,0x10
c00247b2:	a8 88                	test   al,0x88
c00247b4:	74 23                	je     c00247d9 <ATAPI::readyForCommand()+0x49>
c00247b6:	43                   	inc    ebx
c00247b7:	83 fb 63             	cmp    ebx,0x63
c00247ba:	7e dd                	jle    c0024799 <ATAPI::readyForCommand()+0x9>
c00247bc:	51                   	push   ecx
c00247bd:	51                   	push   ecx
c00247be:	6a 00                	push   0x0
c00247c0:	68 40 42 0f 00       	push   0xf4240
c00247c5:	e8 e2 9b ff ff       	call   c001e3ac <nanoSleep(unsigned long long)>
c00247ca:	83 c4 10             	add    esp,0x10
c00247cd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00247d3:	75 c4                	jne    c0024799 <ATAPI::readyForCommand()+0x9>
c00247d5:	31 c0                	xor    eax,eax
c00247d7:	eb 02                	jmp    c00247db <ATAPI::readyForCommand()+0x4b>
c00247d9:	b0 01                	mov    al,0x1
c00247db:	5a                   	pop    edx
c00247dc:	5b                   	pop    ebx
c00247dd:	5e                   	pop    esi
c00247de:	c3                   	ret    
c00247df:	90                   	nop

c00247e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00247e0:	55                   	push   ebp
c00247e1:	57                   	push   edi
c00247e2:	56                   	push   esi
c00247e3:	53                   	push   ebx
c00247e4:	83 ec 20             	sub    esp,0x20
c00247e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00247eb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00247ef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00247f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00247f7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00247fb:	6a 01                	push   0x1
c00247fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024804:	50                   	push   eax
c0024805:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002480b:	e8 56 eb ff ff       	call   c0023366 <IDE::enableIRQs(unsigned char, bool)>
c0024810:	5e                   	pop    esi
c0024811:	58                   	pop    eax
c0024812:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024819:	50                   	push   eax
c002481a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024820:	e8 0f e9 ff ff       	call   c0023134 <IDE::prepareInterrupt(unsigned char)>
c0024825:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024828:	e8 63 ff ff ff       	call   c0024790 <ATAPI::readyForCommand()>
c002482d:	83 c4 10             	add    esp,0x10
c0024830:	84 c0                	test   al,al
c0024832:	75 0a                	jne    c002483e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024834:	bb 01 00 00 00       	mov    ebx,0x1
c0024839:	e9 57 02 00 00       	jmp    c0024a95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002483e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024844:	c1 e0 04             	shl    eax,0x4
c0024847:	0f b6 c0             	movzx  eax,al
c002484a:	50                   	push   eax
c002484b:	6a 06                	push   0x6
c002484d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024854:	50                   	push   eax
c0024855:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002485b:	e8 fa e8 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024860:	6a 00                	push   0x0
c0024862:	6a 01                	push   0x1
c0024864:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002486b:	50                   	push   eax
c002486c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024872:	e8 e3 e8 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024877:	83 c4 20             	add    esp,0x20
c002487a:	0f b6 c3             	movzx  eax,bl
c002487d:	0f b6 df             	movzx  ebx,bh
c0024880:	50                   	push   eax
c0024881:	6a 04                	push   0x4
c0024883:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002488a:	50                   	push   eax
c002488b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024891:	e8 c4 e8 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024896:	53                   	push   ebx
c0024897:	6a 05                	push   0x5
c0024899:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248a0:	50                   	push   eax
c00248a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248a7:	e8 ae e8 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248ac:	83 c4 20             	add    esp,0x20
c00248af:	68 a0 00 00 00       	push   0xa0
c00248b4:	6a 07                	push   0x7
c00248b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248bd:	50                   	push   eax
c00248be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248c4:	e8 91 e8 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248c9:	83 c4 0c             	add    esp,0xc
c00248cc:	6a 01                	push   0x1
c00248ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248d5:	50                   	push   eax
c00248d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248dc:	e8 25 f4 ff ff       	call   c0023d06 <IDE::polling(unsigned char, unsigned int)>
c00248e1:	83 c4 10             	add    esp,0x10
c00248e4:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00248ea:	84 c0                	test   al,al
c00248ec:	74 23                	je     c0024911 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00248ee:	0f b6 d8             	movzx  ebx,al
c00248f1:	0f b6 d2             	movzx  edx,dl
c00248f4:	53                   	push   ebx
c00248f5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00248fc:	50                   	push   eax
c00248fd:	52                   	push   edx
c00248fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024904:	e8 67 f2 ff ff       	call   c0023b70 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024909:	83 c4 10             	add    esp,0x10
c002490c:	e9 84 01 00 00       	jmp    c0024a95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024911:	0f b6 d2             	movzx  edx,dl
c0024914:	53                   	push   ebx
c0024915:	53                   	push   ebx
c0024916:	52                   	push   edx
c0024917:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002491d:	e8 26 e8 ff ff       	call   c0023148 <IDE::getBase(unsigned char)>
c0024922:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024926:	b9 06 00 00 00       	mov    ecx,0x6
c002492b:	89 c2                	mov    edx,eax
c002492d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024930:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024934:	83 c4 10             	add    esp,0x10
c0024937:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002493d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024944:	85 db                	test   ebx,ebx
c0024946:	0f 84 ec 00 00 00    	je     c0024a38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002494c:	51                   	push   ecx
c002494d:	51                   	push   ecx
c002494e:	52                   	push   edx
c002494f:	50                   	push   eax
c0024950:	e8 73 e9 ff ff       	call   c00232c8 <IDE::waitInterrupt(unsigned char)>
c0024955:	83 c4 10             	add    esp,0x10
c0024958:	84 c0                	test   al,al
c002495a:	0f 84 d4 fe ff ff    	je     c0024834 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024960:	56                   	push   esi
c0024961:	56                   	push   esi
c0024962:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024969:	50                   	push   eax
c002496a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024970:	e8 bf e7 ff ff       	call   c0023134 <IDE::prepareInterrupt(unsigned char)>
c0024975:	83 c4 0c             	add    esp,0xc
c0024978:	6a 04                	push   0x4
c002497a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024981:	50                   	push   eax
c0024982:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024988:	e8 8d e8 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c002498d:	83 c4 0c             	add    esp,0xc
c0024990:	89 c6                	mov    esi,eax
c0024992:	6a 05                	push   0x5
c0024994:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002499b:	50                   	push   eax
c002499c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249a2:	e8 73 e8 ff ff       	call   c002321a <IDE::read(unsigned char, unsigned char)>
c00249a7:	89 f1                	mov    ecx,esi
c00249a9:	0f b6 c0             	movzx  eax,al
c00249ac:	0f b6 f1             	movzx  esi,cl
c00249af:	c1 e0 08             	shl    eax,0x8
c00249b2:	09 c6                	or     esi,eax
c00249b4:	d1 fe                	sar    esi,1
c00249b6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00249ba:	83 c4 10             	add    esp,0x10
c00249bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00249c2:	74 41                	je     c0024a05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00249c4:	31 c9                	xor    ecx,ecx
c00249c6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00249cc:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00249d3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00249d7:	75 0a                	jne    c00249e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00249d9:	01 c9                	add    ecx,ecx
c00249db:	01 cd                	add    ebp,ecx
c00249dd:	4b                   	dec    ebx
c00249de:	e9 54 ff ff ff       	jmp    c0024937 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00249e3:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00249e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00249ec:	51                   	push   ecx
c00249ed:	51                   	push   ecx
c00249ee:	52                   	push   edx
c00249ef:	50                   	push   eax
c00249f0:	e8 53 e7 ff ff       	call   c0023148 <IDE::getBase(unsigned char)>
c00249f5:	89 c2                	mov    edx,eax
c00249f7:	89 f0                	mov    eax,esi
c00249f9:	66 ef                	out    dx,ax
c00249fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00249ff:	83 c4 10             	add    esp,0x10
c0024a02:	41                   	inc    ecx
c0024a03:	eb c1                	jmp    c00249c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024a05:	31 f6                	xor    esi,esi
c0024a07:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024a0d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024a14:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024a18:	75 06                	jne    c0024a20 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024a1a:	01 f6                	add    esi,esi
c0024a1c:	01 f5                	add    ebp,esi
c0024a1e:	eb bd                	jmp    c00249dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024a20:	51                   	push   ecx
c0024a21:	51                   	push   ecx
c0024a22:	52                   	push   edx
c0024a23:	50                   	push   eax
c0024a24:	e8 1f e7 ff ff       	call   c0023148 <IDE::getBase(unsigned char)>
c0024a29:	89 c2                	mov    edx,eax
c0024a2b:	66 ed                	in     ax,dx
c0024a2d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024a32:	83 c4 10             	add    esp,0x10
c0024a35:	46                   	inc    esi
c0024a36:	eb cf                	jmp    c0024a07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024a38:	51                   	push   ecx
c0024a39:	51                   	push   ecx
c0024a3a:	52                   	push   edx
c0024a3b:	50                   	push   eax
c0024a3c:	e8 87 e8 ff ff       	call   c00232c8 <IDE::waitInterrupt(unsigned char)>
c0024a41:	83 c4 10             	add    esp,0x10
c0024a44:	84 c0                	test   al,al
c0024a46:	0f 84 e8 fd ff ff    	je     c0024834 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024a4c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024a51:	52                   	push   edx
c0024a52:	52                   	push   edx
c0024a53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a5a:	50                   	push   eax
c0024a5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a61:	e8 ce e6 ff ff       	call   c0023134 <IDE::prepareInterrupt(unsigned char)>
c0024a66:	83 c4 10             	add    esp,0x10
c0024a69:	50                   	push   eax
c0024a6a:	50                   	push   eax
c0024a6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a72:	50                   	push   eax
c0024a73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a79:	e8 ca e6 ff ff       	call   c0023148 <IDE::getBase(unsigned char)>
c0024a7e:	8d 50 07             	lea    edx,[eax+0x7]
c0024a81:	ec                   	in     al,dx
c0024a82:	83 c4 10             	add    esp,0x10
c0024a85:	a8 88                	test   al,0x88
c0024a87:	74 0a                	je     c0024a93 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024a89:	4b                   	dec    ebx
c0024a8a:	75 dd                	jne    c0024a69 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024a8c:	bb 02 00 00 00       	mov    ebx,0x2
c0024a91:	eb 02                	jmp    c0024a95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a93:	31 db                	xor    ebx,ebx
c0024a95:	83 c4 1c             	add    esp,0x1c
c0024a98:	89 d8                	mov    eax,ebx
c0024a9a:	5b                   	pop    ebx
c0024a9b:	5e                   	pop    esi
c0024a9c:	5f                   	pop    edi
c0024a9d:	5d                   	pop    ebp
c0024a9e:	c3                   	ret    
c0024a9f:	90                   	nop

c0024aa0 <ATAPI::diskRemoved()>:
c0024aa0:	83 ec 18             	sub    esp,0x18
c0024aa3:	68 05 d1 02 c0       	push   0xc002d105
c0024aa8:	e8 5c e4 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0024aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ab1:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024ab8:	83 c4 1c             	add    esp,0x1c
c0024abb:	c3                   	ret    

c0024abc <ATAPI::eject()>:
c0024abc:	57                   	push   edi
c0024abd:	b9 03 00 00 00       	mov    ecx,0x3
c0024ac2:	53                   	push   ebx
c0024ac3:	83 ec 14             	sub    esp,0x14
c0024ac6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024aca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ace:	fc                   	cld    
c0024acf:	31 c0                	xor    eax,eax
c0024ad1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ad3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024ad8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024add:	50                   	push   eax
c0024ade:	50                   	push   eax
c0024adf:	6a 00                	push   0x0
c0024ae1:	6a 00                	push   0x0
c0024ae3:	6a 00                	push   0x0
c0024ae5:	6a 02                	push   0x2
c0024ae7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024aeb:	50                   	push   eax
c0024aec:	53                   	push   ebx
c0024aed:	e8 ee fc ff ff       	call   c00247e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024af2:	83 c4 14             	add    esp,0x14
c0024af5:	53                   	push   ebx
c0024af6:	e8 a5 ff ff ff       	call   c0024aa0 <ATAPI::diskRemoved()>
c0024afb:	83 c4 24             	add    esp,0x24
c0024afe:	31 c0                	xor    eax,eax
c0024b00:	5b                   	pop    ebx
c0024b01:	5f                   	pop    edi
c0024b02:	c3                   	ret    
c0024b03:	90                   	nop

c0024b04 <ATAPI::diskInserted()>:
c0024b04:	53                   	push   ebx
c0024b05:	83 ec 14             	sub    esp,0x14
c0024b08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024b0c:	68 1c d1 02 c0       	push   0xc002d11c
c0024b11:	e8 f3 e3 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0024b16:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024b1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b20:	e8 9d fc fe ff       	call   c00147c2 <PhysicalDisk::startCache()>
c0024b25:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024b29:	83 c4 18             	add    esp,0x18
c0024b2c:	5b                   	pop    ebx
c0024b2d:	e9 80 1e ff ff       	jmp    c00169b2 <createPartitionsForDisk(PhysicalDisk*)>

c0024b32 <ATAPI::detectMedia()>:
c0024b32:	56                   	push   esi
c0024b33:	53                   	push   ebx
c0024b34:	83 ec 28             	sub    esp,0x28
c0024b37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b3b:	6a 0c                	push   0xc
c0024b3d:	6a 00                	push   0x0
c0024b3f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024b43:	56                   	push   esi
c0024b44:	e8 37 bc fd ff       	call   c0000780 <memset>
c0024b49:	58                   	pop    eax
c0024b4a:	5a                   	pop    edx
c0024b4b:	6a 00                	push   0x0
c0024b4d:	6a 00                	push   0x0
c0024b4f:	6a 00                	push   0x0
c0024b51:	6a 00                	push   0x0
c0024b53:	56                   	push   esi
c0024b54:	53                   	push   ebx
c0024b55:	e8 86 fc ff ff       	call   c00247e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b5a:	83 c4 1c             	add    esp,0x1c
c0024b5d:	6a 0c                	push   0xc
c0024b5f:	6a 00                	push   0x0
c0024b61:	56                   	push   esi
c0024b62:	e8 19 bc fd ff       	call   c0000780 <memset>
c0024b67:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024b6c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024b71:	59                   	pop    ecx
c0024b72:	58                   	pop    eax
c0024b73:	6a 01                	push   0x1
c0024b75:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024b79:	50                   	push   eax
c0024b7a:	6a 00                	push   0x0
c0024b7c:	6a 12                	push   0x12
c0024b7e:	56                   	push   esi
c0024b7f:	53                   	push   ebx
c0024b80:	e8 5b fc ff ff       	call   c00247e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b85:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024b89:	83 c4 20             	add    esp,0x20
c0024b8c:	83 e0 7f             	and    eax,0x7f
c0024b8f:	3c 70                	cmp    al,0x70
c0024b91:	74 15                	je     c0024ba8 <ATAPI::detectMedia()+0x76>
c0024b93:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b9a:	75 0c                	jne    c0024ba8 <ATAPI::detectMedia()+0x76>
c0024b9c:	83 ec 0c             	sub    esp,0xc
c0024b9f:	53                   	push   ebx
c0024ba0:	e8 5f ff ff ff       	call   c0024b04 <ATAPI::diskInserted()>
c0024ba5:	83 c4 10             	add    esp,0x10
c0024ba8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024bac:	83 e0 0f             	and    eax,0xf
c0024baf:	3c 02                	cmp    al,0x2
c0024bb1:	75 1b                	jne    c0024bce <ATAPI::detectMedia()+0x9c>
c0024bb3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024bb8:	75 2d                	jne    c0024be7 <ATAPI::detectMedia()+0xb5>
c0024bba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024bc1:	74 24                	je     c0024be7 <ATAPI::detectMedia()+0xb5>
c0024bc3:	83 ec 0c             	sub    esp,0xc
c0024bc6:	53                   	push   ebx
c0024bc7:	e8 d4 fe ff ff       	call   c0024aa0 <ATAPI::diskRemoved()>
c0024bcc:	eb 16                	jmp    c0024be4 <ATAPI::detectMedia()+0xb2>
c0024bce:	84 c0                	test   al,al
c0024bd0:	75 15                	jne    c0024be7 <ATAPI::detectMedia()+0xb5>
c0024bd2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024bd9:	75 0c                	jne    c0024be7 <ATAPI::detectMedia()+0xb5>
c0024bdb:	83 ec 0c             	sub    esp,0xc
c0024bde:	53                   	push   ebx
c0024bdf:	e8 20 ff ff ff       	call   c0024b04 <ATAPI::diskInserted()>
c0024be4:	83 c4 10             	add    esp,0x10
c0024be7:	83 c4 24             	add    esp,0x24
c0024bea:	5b                   	pop    ebx
c0024beb:	5e                   	pop    esi
c0024bec:	c3                   	ret    
c0024bed:	90                   	nop

c0024bee <ATAPI::open(int, int, void*)>:
c0024bee:	53                   	push   ebx
c0024bef:	83 ec 08             	sub    esp,0x8
c0024bf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bf6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024bfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024bfe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c04:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024c0a:	c1 e0 06             	shl    eax,0x6
c0024c0d:	01 d0                	add    eax,edx
c0024c0f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024c16:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024c1c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024c23:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024c2d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c33:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024c3a:	6a 04                	push   0x4
c0024c3c:	6a 0c                	push   0xc
c0024c3e:	51                   	push   ecx
c0024c3f:	52                   	push   edx
c0024c40:	e8 15 e5 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c45:	90                   	nop
c0024c46:	90                   	nop
c0024c47:	6a 00                	push   0x0
c0024c49:	6a 0c                	push   0xc
c0024c4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c52:	50                   	push   eax
c0024c53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c59:	e8 fc e4 ff ff       	call   c002315a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c5e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024c65:	83 c4 14             	add    esp,0x14
c0024c68:	53                   	push   ebx
c0024c69:	e8 c4 fe ff ff       	call   c0024b32 <ATAPI::detectMedia()>
c0024c6e:	31 c0                	xor    eax,eax
c0024c70:	83 c4 18             	add    esp,0x18
c0024c73:	5b                   	pop    ebx
c0024c74:	c3                   	ret    
c0024c75:	90                   	nop

c0024c76 <ATAPI::read(unsigned long long, int, void*)>:
c0024c76:	55                   	push   ebp
c0024c77:	57                   	push   edi
c0024c78:	56                   	push   esi
c0024c79:	53                   	push   ebx
c0024c7a:	83 ec 1c             	sub    esp,0x1c
c0024c7d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024c81:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c85:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024c89:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c90:	74 41                	je     c0024cd3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024c92:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c96:	b9 03 00 00 00       	mov    ecx,0x3
c0024c9b:	fc                   	cld    
c0024c9c:	31 c0                	xor    eax,eax
c0024c9e:	86 fb                	xchg   bl,bh
c0024ca0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ca2:	c1 c3 10             	rol    ebx,0x10
c0024ca5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024caa:	89 e8                	mov    eax,ebp
c0024cac:	86 fb                	xchg   bl,bh
c0024cae:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024cb2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024cb6:	50                   	push   eax
c0024cb7:	50                   	push   eax
c0024cb8:	55                   	push   ebp
c0024cb9:	c1 e5 0b             	shl    ebp,0xb
c0024cbc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024cc0:	6a 00                	push   0x0
c0024cc2:	55                   	push   ebp
c0024cc3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024cc7:	50                   	push   eax
c0024cc8:	56                   	push   esi
c0024cc9:	e8 12 fb ff ff       	call   c00247e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024cce:	83 c4 20             	add    esp,0x20
c0024cd1:	eb 1a                	jmp    c0024ced <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024cd3:	83 ec 0c             	sub    esp,0xc
c0024cd6:	56                   	push   esi
c0024cd7:	e8 56 fe ff ff       	call   c0024b32 <ATAPI::detectMedia()>
c0024cdc:	83 c4 10             	add    esp,0x10
c0024cdf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024ce6:	75 aa                	jne    c0024c92 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024ce8:	b8 02 00 00 00       	mov    eax,0x2
c0024ced:	83 c4 1c             	add    esp,0x1c
c0024cf0:	5b                   	pop    ebx
c0024cf1:	5e                   	pop    esi
c0024cf2:	5f                   	pop    edi
c0024cf3:	5d                   	pop    ebp
c0024cf4:	c3                   	ret    
c0024cf5:	90                   	nop

c0024cf6 <SATA::close(int, int, void*)>:
c0024cf6:	83 ec 0c             	sub    esp,0xc
c0024cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cfd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d03:	85 c0                	test   eax,eax
c0024d05:	74 0c                	je     c0024d13 <SATA::close(int, int, void*)+0x1d>
c0024d07:	83 ec 0c             	sub    esp,0xc
c0024d0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d0c:	50                   	push   eax
c0024d0d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d10:	83 c4 10             	add    esp,0x10
c0024d13:	31 c0                	xor    eax,eax
c0024d15:	83 c4 0c             	add    esp,0xc
c0024d18:	c3                   	ret    
c0024d19:	90                   	nop

c0024d1a <SATA::powerSaving(PowerSavingLevel)>:
c0024d1a:	c3                   	ret    
c0024d1b:	90                   	nop

c0024d1c <SATA::open(int, int, void*)>:
c0024d1c:	56                   	push   esi
c0024d1d:	53                   	push   ebx
c0024d1e:	50                   	push   eax
c0024d1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d27:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024d31:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024d37:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024d41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d45:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024d4f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024d55:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d5c:	e8 8c b1 fe ff       	call   c000feed <Phys::allocatePage()>
c0024d61:	89 c6                	mov    esi,eax
c0024d63:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024d69:	81 c6 00 10 00 00    	add    esi,0x1000
c0024d6f:	e8 79 b1 fe ff       	call   c000feed <Phys::allocatePage()>
c0024d74:	39 c6                	cmp    esi,eax
c0024d76:	74 10                	je     c0024d88 <SATA::open(int, int, void*)+0x6c>
c0024d78:	83 ec 0c             	sub    esp,0xc
c0024d7b:	68 44 d0 02 c0       	push   0xc002d044
c0024d80:	e8 c2 58 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0024d85:	83 c4 10             	add    esp,0x10
c0024d88:	83 ec 0c             	sub    esp,0xc
c0024d8b:	6a 02                	push   0x2
c0024d8d:	e8 b9 cd fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0024d92:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d98:	e8 49 d0 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0024d9d:	6a 03                	push   0x3
c0024d9f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024da5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024dab:	50                   	push   eax
c0024dac:	e8 b1 d5 fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024db1:	83 c4 14             	add    esp,0x14
c0024db4:	53                   	push   ebx
c0024db5:	e8 08 fa fe ff       	call   c00147c2 <PhysicalDisk::startCache()>
c0024dba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dbd:	e8 f0 1b ff ff       	call   c00169b2 <createPartitionsForDisk(PhysicalDisk*)>
c0024dc2:	83 c4 14             	add    esp,0x14
c0024dc5:	31 c0                	xor    eax,eax
c0024dc7:	5b                   	pop    ebx
c0024dc8:	5e                   	pop    esi
c0024dc9:	c3                   	ret    

c0024dca <SATA::SATA()>:
c0024dca:	83 ec 0c             	sub    esp,0xc
c0024dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dd1:	83 ec 04             	sub    esp,0x4
c0024dd4:	68 00 02 00 00       	push   0x200
c0024dd9:	68 58 d0 02 c0       	push   0xc002d058
c0024dde:	50                   	push   eax
c0024ddf:	e8 76 f9 fe ff       	call   c001475a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024de4:	83 c4 10             	add    esp,0x10
c0024de7:	ba c8 d0 02 c0       	mov    edx,0xc002d0c8
c0024dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024df0:	89 10                	mov    DWORD PTR [eax],edx
c0024df2:	90                   	nop
c0024df3:	83 c4 0c             	add    esp,0xc
c0024df6:	c3                   	ret    
c0024df7:	90                   	nop

c0024df8 <SATA::access(unsigned long long, int, void*, bool)>:
c0024df8:	55                   	push   ebp
c0024df9:	57                   	push   edi
c0024dfa:	56                   	push   esi
c0024dfb:	53                   	push   ebx
c0024dfc:	83 ec 2c             	sub    esp,0x2c
c0024dff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024e03:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024e07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024e0b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024e0f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024e13:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024e18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024e1c:	7e 10                	jle    c0024e2e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024e1e:	83 ec 0c             	sub    esp,0xc
c0024e21:	68 68 d0 02 c0       	push   0xc002d068
c0024e26:	e8 1c 58 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0024e2b:	83 c4 10             	add    esp,0x10
c0024e2e:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024e34:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024e3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e44:	89 f0                	mov    eax,esi
c0024e46:	c1 e0 07             	shl    eax,0x7
c0024e49:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e4d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024e57:	53                   	push   ebx
c0024e58:	8d 46 02             	lea    eax,[esi+0x2]
c0024e5b:	53                   	push   ebx
c0024e5c:	c1 e0 07             	shl    eax,0x7
c0024e5f:	bb 01 00 00 00       	mov    ebx,0x1
c0024e64:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024e68:	50                   	push   eax
c0024e69:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e6f:	e8 aa ef ff ff       	call   c0023e1e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024e78:	83 c4 10             	add    esp,0x10
c0024e7b:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024e80:	0f 84 ce 01 00 00    	je     c0025054 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e86:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e8a:	c1 e0 09             	shl    eax,0x9
c0024e8d:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024e96:	74 17                	je     c0024eaf <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024e98:	51                   	push   ecx
c0024e99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e9d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024ea1:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ea7:	e8 a0 b8 fd ff       	call   c000074c <memcpy>
c0024eac:	83 c4 10             	add    esp,0x10
c0024eaf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024eb5:	8d 46 02             	lea    eax,[esi+0x2]
c0024eb8:	c1 e0 07             	shl    eax,0x7
c0024ebb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ec1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ec7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ecd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ed1:	c1 e1 05             	shl    ecx,0x5
c0024ed4:	01 c8                	add    eax,ecx
c0024ed6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024eda:	8a 18                	mov    bl,BYTE PTR [eax]
c0024edc:	83 e1 01             	and    ecx,0x1
c0024edf:	83 e3 bf             	and    ebx,0xffffffbf
c0024ee2:	c1 e1 06             	shl    ecx,0x6
c0024ee5:	09 d9                	or     ecx,ebx
c0024ee7:	88 08                	mov    BYTE PTR [eax],cl
c0024ee9:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024eeb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024ef1:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024ef7:	89 08                	mov    DWORD PTR [eax],ecx
c0024ef9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024eff:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024f05:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024f0b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024f0e:	52                   	push   edx
c0024f0f:	68 90 00 00 00       	push   0x90
c0024f14:	6a 00                	push   0x0
c0024f16:	53                   	push   ebx
c0024f17:	e8 64 b8 fd ff       	call   c0000780 <memset>
c0024f1c:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024f22:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024f26:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024f2c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024f30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024f34:	83 c4 10             	add    esp,0x10
c0024f37:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024f3a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024f40:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024f46:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024f4b:	09 c8                	or     eax,ecx
c0024f4d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024f53:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024f56:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024f5d:	66 25 00 7f          	and    ax,0x7f00
c0024f61:	66 0d 27 80          	or     ax,0x8027
c0024f65:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024f6a:	66 89 03             	mov    WORD PTR [ebx],ax
c0024f6d:	19 c0                	sbb    eax,eax
c0024f6f:	83 e0 f0             	and    eax,0xfffffff0
c0024f72:	83 c0 35             	add    eax,0x35
c0024f75:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024f78:	89 f8                	mov    eax,edi
c0024f7a:	c1 e8 10             	shr    eax,0x10
c0024f7d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f80:	89 f8                	mov    eax,edi
c0024f82:	c1 e8 18             	shr    eax,0x18
c0024f85:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024f88:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024f8c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f93:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024f9a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f9e:	89 f3                	mov    ebx,esi
c0024fa0:	31 c0                	xor    eax,eax
c0024fa2:	c1 e3 07             	shl    ebx,0x7
c0024fa5:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024fa9:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024faf:	80 e1 88             	and    cl,0x88
c0024fb2:	74 0a                	je     c0024fbe <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024fb4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024fb9:	74 0a                	je     c0024fc5 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024fbb:	40                   	inc    eax
c0024fbc:	eb eb                	jmp    c0024fa9 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024fbe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024fc3:	75 0a                	jne    c0024fcf <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024fc5:	83 ec 0c             	sub    esp,0xc
c0024fc8:	68 a1 d0 02 c0       	push   0xc002d0a1
c0024fcd:	eb 56                	jmp    c0025025 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024fcf:	b8 01 00 00 00       	mov    eax,0x1
c0024fd4:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024fd8:	c1 e6 07             	shl    esi,0x7
c0024fdb:	d3 e0                	shl    eax,cl
c0024fdd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024fe1:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024fe7:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024fed:	85 c8                	test   eax,ecx
c0024fef:	74 20                	je     c0025011 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ff1:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024ff7:	0f ba e1 1e          	bt     ecx,0x1e
c0024ffb:	73 ea                	jae    c0024fe7 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ffd:	83 ec 0c             	sub    esp,0xc
c0025000:	31 db                	xor    ebx,ebx
c0025002:	68 af d0 02 c0       	push   0xc002d0af
c0025007:	e8 3b 56 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c002500c:	83 c4 10             	add    esp,0x10
c002500f:	eb 43                	jmp    c0025054 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025011:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0025017:	0f ba e0 1e          	bt     eax,0x1e
c002501b:	73 17                	jae    c0025034 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c002501d:	83 ec 0c             	sub    esp,0xc
c0025020:	68 af d0 02 c0       	push   0xc002d0af
c0025025:	e8 1d 56 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c002502a:	bb 01 00 00 00       	mov    ebx,0x1
c002502f:	83 c4 10             	add    esp,0x10
c0025032:	eb 20                	jmp    c0025054 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025034:	31 db                	xor    ebx,ebx
c0025036:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c002503b:	75 17                	jne    c0025054 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002503d:	50                   	push   eax
c002503e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025042:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0025048:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002504c:	e8 fb b6 fd ff       	call   c000074c <memcpy>
c0025051:	83 c4 10             	add    esp,0x10
c0025054:	83 c4 2c             	add    esp,0x2c
c0025057:	89 d8                	mov    eax,ebx
c0025059:	5b                   	pop    ebx
c002505a:	5e                   	pop    esi
c002505b:	5f                   	pop    edi
c002505c:	5d                   	pop    ebp
c002505d:	c3                   	ret    

c002505e <SATA::read(unsigned long long, int, void*)>:
c002505e:	57                   	push   edi
c002505f:	b8 04 00 00 00       	mov    eax,0x4
c0025064:	56                   	push   esi
c0025065:	53                   	push   ebx
c0025066:	83 ec 10             	sub    esp,0x10
c0025069:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002506d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025071:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025074:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025078:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002507c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025082:	77 3b                	ja     c00250bf <SATA::read(unsigned long long, int, void*)+0x61>
c0025084:	b8 06 00 00 00       	mov    eax,0x6
c0025089:	85 d2                	test   edx,edx
c002508b:	74 32                	je     c00250bf <SATA::read(unsigned long long, int, void*)+0x61>
c002508d:	50                   	push   eax
c002508e:	50                   	push   eax
c002508f:	6a 00                	push   0x0
c0025091:	52                   	push   edx
c0025092:	53                   	push   ebx
c0025093:	57                   	push   edi
c0025094:	56                   	push   esi
c0025095:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025099:	e8 5a fd ff ff       	call   c0024df8 <SATA::access(unsigned long long, int, void*, bool)>
c002509e:	83 c4 20             	add    esp,0x20
c00250a1:	85 c0                	test   eax,eax
c00250a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00250a7:	75 11                	jne    c00250ba <SATA::read(unsigned long long, int, void*)+0x5c>
c00250a9:	01 1d 68 29 03 c0    	add    DWORD PTR ds:0xc0032968,ebx
c00250af:	e8 ec b8 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c00250b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00250b8:	eb 05                	jmp    c00250bf <SATA::read(unsigned long long, int, void*)+0x61>
c00250ba:	b8 01 00 00 00       	mov    eax,0x1
c00250bf:	83 c4 10             	add    esp,0x10
c00250c2:	5b                   	pop    ebx
c00250c3:	5e                   	pop    esi
c00250c4:	5f                   	pop    edi
c00250c5:	c3                   	ret    

c00250c6 <SATA::write(unsigned long long, int, void*)>:
c00250c6:	55                   	push   ebp
c00250c7:	b8 04 00 00 00       	mov    eax,0x4
c00250cc:	57                   	push   edi
c00250cd:	56                   	push   esi
c00250ce:	53                   	push   ebx
c00250cf:	83 ec 1c             	sub    esp,0x1c
c00250d2:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00250d6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00250da:	8d 75 ff             	lea    esi,[ebp-0x1]
c00250dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00250e1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00250e5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00250eb:	77 56                	ja     c0025143 <SATA::write(unsigned long long, int, void*)+0x7d>
c00250ed:	b8 06 00 00 00       	mov    eax,0x6
c00250f2:	85 ff                	test   edi,edi
c00250f4:	74 4d                	je     c0025143 <SATA::write(unsigned long long, int, void*)+0x7d>
c00250f6:	89 ee                	mov    esi,ebp
c00250f8:	c1 e6 09             	shl    esi,0x9
c00250fb:	01 fe                	add    esi,edi
c00250fd:	89 c8                	mov    eax,ecx
c00250ff:	89 da                	mov    edx,ebx
c0025101:	83 c0 01             	add    eax,0x1
c0025104:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025108:	83 d2 00             	adc    edx,0x0
c002510b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002510f:	50                   	push   eax
c0025110:	50                   	push   eax
c0025111:	6a 01                	push   0x1
c0025113:	57                   	push   edi
c0025114:	81 c7 00 02 00 00    	add    edi,0x200
c002511a:	6a 01                	push   0x1
c002511c:	53                   	push   ebx
c002511d:	51                   	push   ecx
c002511e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025122:	e8 d1 fc ff ff       	call   c0024df8 <SATA::access(unsigned long long, int, void*, bool)>
c0025127:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002512b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002512f:	83 c4 20             	add    esp,0x20
c0025132:	39 f7                	cmp    edi,esi
c0025134:	75 c7                	jne    c00250fd <SATA::write(unsigned long long, int, void*)+0x37>
c0025136:	01 2d 64 29 03 c0    	add    DWORD PTR ds:0xc0032964,ebp
c002513c:	e8 5f b8 fe ff       	call   c00109a0 <VgaText::updateDiskUsage()>
c0025141:	31 c0                	xor    eax,eax
c0025143:	83 c4 1c             	add    esp,0x1c
c0025146:	5b                   	pop    ebx
c0025147:	5e                   	pop    esi
c0025148:	5f                   	pop    edi
c0025149:	5d                   	pop    ebp
c002514a:	c3                   	ret    
c002514b:	90                   	nop

c002514c <SATAPI::write(unsigned long long, int, void*)>:
c002514c:	b8 03 00 00 00       	mov    eax,0x3
c0025151:	c3                   	ret    

c0025152 <SATAPI::close(int, int, void*)>:
c0025152:	83 ec 0c             	sub    esp,0xc
c0025155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025159:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002515f:	85 c0                	test   eax,eax
c0025161:	74 0c                	je     c002516f <SATAPI::close(int, int, void*)+0x1d>
c0025163:	83 ec 0c             	sub    esp,0xc
c0025166:	8b 10                	mov    edx,DWORD PTR [eax]
c0025168:	50                   	push   eax
c0025169:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002516c:	83 c4 10             	add    esp,0x10
c002516f:	31 c0                	xor    eax,eax
c0025171:	83 c4 0c             	add    esp,0xc
c0025174:	c3                   	ret    
c0025175:	90                   	nop

c0025176 <SATAPI::SATAPI()>:
c0025176:	83 ec 0c             	sub    esp,0xc
c0025179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517d:	83 ec 04             	sub    esp,0x4
c0025180:	68 00 08 00 00       	push   0x800
c0025185:	68 f8 d0 02 c0       	push   0xc002d0f8
c002518a:	50                   	push   eax
c002518b:	e8 ca f5 fe ff       	call   c001475a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025190:	83 c4 10             	add    esp,0x10
c0025193:	ba a4 d1 02 c0       	mov    edx,0xc002d1a4
c0025198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002519c:	89 10                	mov    DWORD PTR [eax],edx
c002519e:	90                   	nop
c002519f:	83 c4 0c             	add    esp,0xc
c00251a2:	c3                   	ret    
c00251a3:	90                   	nop

c00251a4 <SATAPI::diskRemoved()>:
c00251a4:	83 ec 18             	sub    esp,0x18
c00251a7:	68 04 d1 02 c0       	push   0xc002d104
c00251ac:	e8 58 dd fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00251b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251b5:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00251bc:	83 c4 1c             	add    esp,0x1c
c00251bf:	c3                   	ret    

c00251c0 <SATAPI::diskInserted()>:
c00251c0:	53                   	push   ebx
c00251c1:	83 ec 14             	sub    esp,0x14
c00251c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00251c8:	68 1b d1 02 c0       	push   0xc002d11b
c00251cd:	e8 37 dd fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00251d2:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00251d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251dc:	e8 e1 f5 fe ff       	call   c00147c2 <PhysicalDisk::startCache()>
c00251e1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00251e5:	83 c4 18             	add    esp,0x18
c00251e8:	5b                   	pop    ebx
c00251e9:	e9 c4 17 ff ff       	jmp    c00169b2 <createPartitionsForDisk(PhysicalDisk*)>

c00251ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00251ee:	55                   	push   ebp
c00251ef:	57                   	push   edi
c00251f0:	56                   	push   esi
c00251f1:	53                   	push   ebx
c00251f2:	83 ec 24             	sub    esp,0x24
c00251f5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00251f9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251fd:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025207:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002520b:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025211:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025214:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002521a:	c1 e3 07             	shl    ebx,0x7
c002521d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025221:	89 f8                	mov    eax,edi
c0025223:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025227:	c1 e0 07             	shl    eax,0x7
c002522a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002522e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025232:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002523c:	53                   	push   ebx
c002523d:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025243:	e8 d6 eb ff ff       	call   c0023e1e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025248:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002524c:	83 c4 10             	add    esp,0x10
c002524f:	b8 01 00 00 00       	mov    eax,0x1
c0025254:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025259:	0f 84 8a 01 00 00    	je     c00253e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002525f:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025265:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025267:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002526d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025273:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025277:	c1 e1 05             	shl    ecx,0x5
c002527a:	01 c8                	add    eax,ecx
c002527c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002527e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025284:	81 c9 25 00 01 00    	or     ecx,0x10025
c002528a:	89 08                	mov    DWORD PTR [eax],ecx
c002528c:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025292:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025298:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002529e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00252a1:	52                   	push   edx
c00252a2:	68 90 00 00 00       	push   0x90
c00252a7:	6a 00                	push   0x0
c00252a9:	53                   	push   ebx
c00252aa:	e8 d1 b4 fd ff       	call   c0000780 <memset>
c00252af:	83 c4 0c             	add    esp,0xc
c00252b2:	8d 43 40             	lea    eax,[ebx+0x40]
c00252b5:	6a 0c                	push   0xc
c00252b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252bb:	50                   	push   eax
c00252bc:	e8 8b b4 fd ff       	call   c000074c <memcpy>
c00252c1:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00252c7:	89 ea                	mov    edx,ebp
c00252c9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00252cf:	c1 ea 18             	shr    edx,0x18
c00252d2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00252d6:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00252d9:	8d 48 ff             	lea    ecx,[eax-0x1]
c00252dc:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00252e0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00252e6:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00252ec:	25 00 00 c0 ff       	and    eax,0xffc00000
c00252f1:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00252f5:	09 c8                	or     eax,ecx
c00252f7:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00252fb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025301:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025304:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002530b:	66 25 00 7f          	and    ax,0x7f00
c002530f:	66 0d 27 80          	or     ax,0x8027
c0025313:	66 89 03             	mov    WORD PTR [ebx],ax
c0025316:	89 e8                	mov    eax,ebp
c0025318:	c1 e8 10             	shr    eax,0x10
c002531b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002531e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025322:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025325:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025329:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002532c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025330:	83 c4 10             	add    esp,0x10
c0025333:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025337:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002533b:	31 c0                	xor    eax,eax
c002533d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025343:	80 e1 88             	and    cl,0x88
c0025346:	74 0a                	je     c0025352 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025348:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002534d:	74 0a                	je     c0025359 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002534f:	40                   	inc    eax
c0025350:	eb eb                	jmp    c002533d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025352:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025357:	75 0f                	jne    c0025368 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025359:	83 ec 0c             	sub    esp,0xc
c002535c:	68 a1 d0 02 c0       	push   0xc002d0a1
c0025361:	e8 e1 52 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0025366:	eb 3a                	jmp    c00253a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025368:	b8 01 00 00 00       	mov    eax,0x1
c002536d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025371:	c1 e7 07             	shl    edi,0x7
c0025374:	d3 e0                	shl    eax,cl
c0025376:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025379:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002537f:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025385:	85 d0                	test   eax,edx
c0025387:	74 23                	je     c00253ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025389:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002538f:	0f ba e2 1e          	bt     edx,0x1e
c0025393:	73 ea                	jae    c002537f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025395:	83 ec 0c             	sub    esp,0xc
c0025398:	68 33 d1 02 c0       	push   0xc002d133
c002539d:	e8 67 db fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00253a2:	83 c4 10             	add    esp,0x10
c00253a5:	b8 01 00 00 00       	mov    eax,0x1
c00253aa:	eb 3d                	jmp    c00253e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00253ac:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00253b2:	0f ba e0 1e          	bt     eax,0x1e
c00253b6:	73 0a                	jae    c00253c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00253b8:	83 ec 0c             	sub    esp,0xc
c00253bb:	68 46 d1 02 c0       	push   0xc002d146
c00253c0:	eb db                	jmp    c002539d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00253c2:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00253c7:	74 1e                	je     c00253e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00253c9:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00253ce:	74 17                	je     c00253e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00253d0:	50                   	push   eax
c00253d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00253d5:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00253db:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00253df:	e8 68 b3 fd ff       	call   c000074c <memcpy>
c00253e4:	83 c4 10             	add    esp,0x10
c00253e7:	31 c0                	xor    eax,eax
c00253e9:	83 c4 1c             	add    esp,0x1c
c00253ec:	5b                   	pop    ebx
c00253ed:	5e                   	pop    esi
c00253ee:	5f                   	pop    edi
c00253ef:	5d                   	pop    ebp
c00253f0:	c3                   	ret    
c00253f1:	90                   	nop

c00253f2 <SATAPI::eject()>:
c00253f2:	57                   	push   edi
c00253f3:	b9 03 00 00 00       	mov    ecx,0x3
c00253f8:	53                   	push   ebx
c00253f9:	83 ec 14             	sub    esp,0x14
c00253fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025400:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025404:	fc                   	cld    
c0025405:	31 c0                	xor    eax,eax
c0025407:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025409:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002540e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025413:	50                   	push   eax
c0025414:	6a 00                	push   0x0
c0025416:	6a 00                	push   0x0
c0025418:	6a 00                	push   0x0
c002541a:	6a 00                	push   0x0
c002541c:	6a 02                	push   0x2
c002541e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025422:	50                   	push   eax
c0025423:	53                   	push   ebx
c0025424:	e8 c5 fd ff ff       	call   c00251ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025429:	83 c4 14             	add    esp,0x14
c002542c:	53                   	push   ebx
c002542d:	e8 72 fd ff ff       	call   c00251a4 <SATAPI::diskRemoved()>
c0025432:	83 c4 24             	add    esp,0x24
c0025435:	31 c0                	xor    eax,eax
c0025437:	5b                   	pop    ebx
c0025438:	5f                   	pop    edi
c0025439:	c3                   	ret    

c002543a <SATAPI::detectMedia()>:
c002543a:	56                   	push   esi
c002543b:	53                   	push   ebx
c002543c:	83 ec 28             	sub    esp,0x28
c002543f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025443:	6a 0c                	push   0xc
c0025445:	6a 00                	push   0x0
c0025447:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002544b:	56                   	push   esi
c002544c:	e8 2f b3 fd ff       	call   c0000780 <memset>
c0025451:	83 c4 0c             	add    esp,0xc
c0025454:	6a 00                	push   0x0
c0025456:	6a 00                	push   0x0
c0025458:	6a 00                	push   0x0
c002545a:	6a 00                	push   0x0
c002545c:	6a 00                	push   0x0
c002545e:	56                   	push   esi
c002545f:	53                   	push   ebx
c0025460:	e8 89 fd ff ff       	call   c00251ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025465:	83 c4 1c             	add    esp,0x1c
c0025468:	6a 0c                	push   0xc
c002546a:	6a 00                	push   0x0
c002546c:	56                   	push   esi
c002546d:	e8 0e b3 fd ff       	call   c0000780 <memset>
c0025472:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025477:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002547c:	83 c4 0c             	add    esp,0xc
c002547f:	6a 01                	push   0x1
c0025481:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025485:	50                   	push   eax
c0025486:	6a 00                	push   0x0
c0025488:	6a 00                	push   0x0
c002548a:	6a 12                	push   0x12
c002548c:	56                   	push   esi
c002548d:	53                   	push   ebx
c002548e:	e8 5b fd ff ff       	call   c00251ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025493:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025497:	83 c4 20             	add    esp,0x20
c002549a:	83 e0 7f             	and    eax,0x7f
c002549d:	3c 70                	cmp    al,0x70
c002549f:	74 15                	je     c00254b6 <SATAPI::detectMedia()+0x7c>
c00254a1:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00254a8:	75 0c                	jne    c00254b6 <SATAPI::detectMedia()+0x7c>
c00254aa:	83 ec 0c             	sub    esp,0xc
c00254ad:	53                   	push   ebx
c00254ae:	e8 0d fd ff ff       	call   c00251c0 <SATAPI::diskInserted()>
c00254b3:	83 c4 10             	add    esp,0x10
c00254b6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00254ba:	83 e0 0f             	and    eax,0xf
c00254bd:	3c 02                	cmp    al,0x2
c00254bf:	75 1b                	jne    c00254dc <SATAPI::detectMedia()+0xa2>
c00254c1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00254c6:	75 2d                	jne    c00254f5 <SATAPI::detectMedia()+0xbb>
c00254c8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00254cf:	74 24                	je     c00254f5 <SATAPI::detectMedia()+0xbb>
c00254d1:	83 ec 0c             	sub    esp,0xc
c00254d4:	53                   	push   ebx
c00254d5:	e8 ca fc ff ff       	call   c00251a4 <SATAPI::diskRemoved()>
c00254da:	eb 16                	jmp    c00254f2 <SATAPI::detectMedia()+0xb8>
c00254dc:	84 c0                	test   al,al
c00254de:	75 15                	jne    c00254f5 <SATAPI::detectMedia()+0xbb>
c00254e0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00254e7:	75 0c                	jne    c00254f5 <SATAPI::detectMedia()+0xbb>
c00254e9:	83 ec 0c             	sub    esp,0xc
c00254ec:	53                   	push   ebx
c00254ed:	e8 ce fc ff ff       	call   c00251c0 <SATAPI::diskInserted()>
c00254f2:	83 c4 10             	add    esp,0x10
c00254f5:	83 c4 24             	add    esp,0x24
c00254f8:	5b                   	pop    ebx
c00254f9:	5e                   	pop    esi
c00254fa:	c3                   	ret    
c00254fb:	90                   	nop

c00254fc <SATAPI::open(int, int, void*)>:
c00254fc:	56                   	push   esi
c00254fd:	53                   	push   ebx
c00254fe:	50                   	push   eax
c00254ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025503:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025507:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025511:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025517:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025525:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002552f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025535:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002553c:	e8 ac a9 fe ff       	call   c000feed <Phys::allocatePage()>
c0025541:	89 c6                	mov    esi,eax
c0025543:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025549:	81 c6 00 10 00 00    	add    esi,0x1000
c002554f:	e8 99 a9 fe ff       	call   c000feed <Phys::allocatePage()>
c0025554:	39 c6                	cmp    esi,eax
c0025556:	74 10                	je     c0025568 <SATAPI::open(int, int, void*)+0x6c>
c0025558:	83 ec 0c             	sub    esp,0xc
c002555b:	68 5b d1 02 c0       	push   0xc002d15b
c0025560:	e8 e2 50 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0025565:	83 c4 10             	add    esp,0x10
c0025568:	83 ec 0c             	sub    esp,0xc
c002556b:	6a 02                	push   0x2
c002556d:	e8 d9 c5 fe ff       	call   c0011b4b <Virt::allocateKernelVirtualPages(int)>
c0025572:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025578:	e8 69 c8 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c002557d:	6a 03                	push   0x3
c002557f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025585:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002558b:	50                   	push   eax
c002558c:	e8 d1 cd fe ff       	call   c0012362 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025591:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025598:	83 c4 14             	add    esp,0x14
c002559b:	53                   	push   ebx
c002559c:	e8 99 fe ff ff       	call   c002543a <SATAPI::detectMedia()>
c00255a1:	83 c4 14             	add    esp,0x14
c00255a4:	31 c0                	xor    eax,eax
c00255a6:	5b                   	pop    ebx
c00255a7:	5e                   	pop    esi
c00255a8:	c3                   	ret    
c00255a9:	90                   	nop

c00255aa <SATAPI::read(unsigned long long, int, void*)>:
c00255aa:	55                   	push   ebp
c00255ab:	57                   	push   edi
c00255ac:	56                   	push   esi
c00255ad:	53                   	push   ebx
c00255ae:	83 ec 1c             	sub    esp,0x1c
c00255b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00255b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00255b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00255bd:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00255c4:	74 19                	je     c00255df <SATAPI::read(unsigned long long, int, void*)+0x35>
c00255c6:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00255cb:	7e 2e                	jle    c00255fb <SATAPI::read(unsigned long long, int, void*)+0x51>
c00255cd:	83 ec 0c             	sub    esp,0xc
c00255d0:	68 71 d1 02 c0       	push   0xc002d171
c00255d5:	e8 6d 50 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c00255da:	83 c4 10             	add    esp,0x10
c00255dd:	eb 1c                	jmp    c00255fb <SATAPI::read(unsigned long long, int, void*)+0x51>
c00255df:	83 ec 0c             	sub    esp,0xc
c00255e2:	55                   	push   ebp
c00255e3:	e8 52 fe ff ff       	call   c002543a <SATAPI::detectMedia()>
c00255e8:	83 c4 10             	add    esp,0x10
c00255eb:	b8 02 00 00 00       	mov    eax,0x2
c00255f0:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00255f7:	75 cd                	jne    c00255c6 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00255f9:	eb 49                	jmp    c0025644 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00255fb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00255ff:	b9 03 00 00 00       	mov    ecx,0x3
c0025604:	fc                   	cld    
c0025605:	31 c0                	xor    eax,eax
c0025607:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025609:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002560e:	89 d8                	mov    eax,ebx
c0025610:	86 e0                	xchg   al,ah
c0025612:	c1 c0 10             	rol    eax,0x10
c0025615:	86 e0                	xchg   al,ah
c0025617:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002561b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002561f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025623:	50                   	push   eax
c0025624:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025628:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002562c:	56                   	push   esi
c002562d:	53                   	push   ebx
c002562e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025632:	c1 e0 0b             	shl    eax,0xb
c0025635:	50                   	push   eax
c0025636:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002563a:	50                   	push   eax
c002563b:	55                   	push   ebp
c002563c:	e8 ad fb ff ff       	call   c00251ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025641:	83 c4 20             	add    esp,0x20
c0025644:	83 c4 1c             	add    esp,0x1c
c0025647:	5b                   	pop    ebx
c0025648:	5e                   	pop    esi
c0025649:	5f                   	pop    edi
c002564a:	5d                   	pop    ebp
c002564b:	c3                   	ret    

c002564c <AVX::open(int, int, void*)>:
c002564c:	83 ec 0c             	sub    esp,0xc
c002564f:	e8 44 11 00 00       	call   c0026798 <avxInit>
c0025654:	b8 00 00 00 00       	mov    eax,0x0
c0025659:	83 c4 0c             	add    esp,0xc
c002565c:	c3                   	ret    
c002565d:	90                   	nop

c002565e <AVX::close(int, int, void*)>:
c002565e:	83 ec 0c             	sub    esp,0xc
c0025661:	e8 33 11 00 00       	call   c0026799 <avxClose>
c0025666:	b8 00 00 00 00       	mov    eax,0x0
c002566b:	83 c4 0c             	add    esp,0xc
c002566e:	c3                   	ret    
c002566f:	90                   	nop

c0025670 <AVX::available()>:
c0025670:	83 ec 0c             	sub    esp,0xc
c0025673:	e8 18 11 00 00       	call   c0026790 <avxDetect>
c0025678:	85 c0                	test   eax,eax
c002567a:	0f 95 c0             	setne  al
c002567d:	83 c4 0c             	add    esp,0xc
c0025680:	c3                   	ret    
c0025681:	90                   	nop

c0025682 <AVX::save(void*)>:
c0025682:	83 ec 0c             	sub    esp,0xc
c0025685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025689:	83 ec 0c             	sub    esp,0xc
c002568c:	50                   	push   eax
c002568d:	e8 04 11 00 00       	call   c0026796 <avxSave>
c0025692:	83 c4 10             	add    esp,0x10
c0025695:	90                   	nop
c0025696:	83 c4 0c             	add    esp,0xc
c0025699:	c3                   	ret    

c002569a <AVX::load(void*)>:
c002569a:	83 ec 0c             	sub    esp,0xc
c002569d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256a1:	83 ec 0c             	sub    esp,0xc
c00256a4:	50                   	push   eax
c00256a5:	e8 ed 10 00 00       	call   c0026797 <avxLoad>
c00256aa:	83 c4 10             	add    esp,0x10
c00256ad:	90                   	nop
c00256ae:	83 c4 0c             	add    esp,0xc
c00256b1:	c3                   	ret    

c00256b2 <AVX::AVX()>:
c00256b2:	83 ec 0c             	sub    esp,0xc
c00256b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b9:	83 ec 08             	sub    esp,0x8
c00256bc:	68 d4 d1 02 c0       	push   0xc002d1d4
c00256c1:	50                   	push   eax
c00256c2:	e8 71 f1 fe ff       	call   c0014838 <FPU::FPU(char const*)>
c00256c7:	83 c4 10             	add    esp,0x10
c00256ca:	ba e4 d1 02 c0       	mov    edx,0xc002d1e4
c00256cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d3:	89 10                	mov    DWORD PTR [eax],edx
c00256d5:	90                   	nop
c00256d6:	83 c4 0c             	add    esp,0xc
c00256d9:	c3                   	ret    

c00256da <MMX::available()>:
c00256da:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00256df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00256e5:	83 e0 20             	and    eax,0x20
c00256e8:	84 c0                	test   al,al
c00256ea:	0f 95 c0             	setne  al
c00256ed:	c3                   	ret    

c00256ee <MMX::open(int, int, void*)>:
c00256ee:	83 ec 0c             	sub    esp,0xc
c00256f1:	e8 2c 11 00 00       	call   c0026822 <x87Init>
c00256f6:	b8 00 00 00 00       	mov    eax,0x0
c00256fb:	83 c4 0c             	add    esp,0xc
c00256fe:	c3                   	ret    
c00256ff:	90                   	nop

c0025700 <MMX::close(int, int, void*)>:
c0025700:	83 ec 0c             	sub    esp,0xc
c0025703:	e8 34 11 00 00       	call   c002683c <x87Close>
c0025708:	b8 00 00 00 00       	mov    eax,0x0
c002570d:	83 c4 0c             	add    esp,0xc
c0025710:	c3                   	ret    
c0025711:	90                   	nop

c0025712 <MMX::save(void*)>:
c0025712:	83 ec 0c             	sub    esp,0xc
c0025715:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025719:	83 ec 0c             	sub    esp,0xc
c002571c:	50                   	push   eax
c002571d:	e8 ef 10 00 00       	call   c0026811 <x87Save>
c0025722:	83 c4 10             	add    esp,0x10
c0025725:	90                   	nop
c0025726:	83 c4 0c             	add    esp,0xc
c0025729:	c3                   	ret    

c002572a <MMX::load(void*)>:
c002572a:	83 ec 0c             	sub    esp,0xc
c002572d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025731:	83 ec 0c             	sub    esp,0xc
c0025734:	50                   	push   eax
c0025735:	e8 e0 10 00 00       	call   c002681a <x87Load>
c002573a:	83 c4 10             	add    esp,0x10
c002573d:	90                   	nop
c002573e:	83 c4 0c             	add    esp,0xc
c0025741:	c3                   	ret    

c0025742 <MMX::MMX()>:
c0025742:	83 ec 0c             	sub    esp,0xc
c0025745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025749:	83 ec 08             	sub    esp,0x8
c002574c:	68 14 d2 02 c0       	push   0xc002d214
c0025751:	50                   	push   eax
c0025752:	e8 e1 f0 fe ff       	call   c0014838 <FPU::FPU(char const*)>
c0025757:	83 c4 10             	add    esp,0x10
c002575a:	ba 24 d2 02 c0       	mov    edx,0xc002d224
c002575f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025763:	89 10                	mov    DWORD PTR [eax],edx
c0025765:	90                   	nop
c0025766:	83 c4 0c             	add    esp,0xc
c0025769:	c3                   	ret    

c002576a <SSE::open(int, int, void*)>:
c002576a:	83 ec 0c             	sub    esp,0xc
c002576d:	e8 62 10 00 00       	call   c00267d4 <sseInit>
c0025772:	b8 00 00 00 00       	mov    eax,0x0
c0025777:	83 c4 0c             	add    esp,0xc
c002577a:	c3                   	ret    
c002577b:	90                   	nop

c002577c <SSE::close(int, int, void*)>:
c002577c:	83 ec 0c             	sub    esp,0xc
c002577f:	e8 60 10 00 00       	call   c00267e4 <sseClose>
c0025784:	b8 00 00 00 00       	mov    eax,0x0
c0025789:	83 c4 0c             	add    esp,0xc
c002578c:	c3                   	ret    
c002578d:	90                   	nop

c002578e <SSE::available()>:
c002578e:	83 ec 1c             	sub    esp,0x1c
c0025791:	e8 1a 10 00 00       	call   c00267b0 <absolutelyNoChanceInHell>
c0025796:	85 c0                	test   eax,eax
c0025798:	0f 95 c0             	setne  al
c002579b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002579f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00257a3:	83 c4 1c             	add    esp,0x1c
c00257a6:	c3                   	ret    
c00257a7:	90                   	nop

c00257a8 <SSE::save(void*)>:
c00257a8:	83 ec 0c             	sub    esp,0xc
c00257ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257af:	83 ec 0c             	sub    esp,0xc
c00257b2:	50                   	push   eax
c00257b3:	e8 10 10 00 00       	call   c00267c8 <sseSave>
c00257b8:	83 c4 10             	add    esp,0x10
c00257bb:	90                   	nop
c00257bc:	83 c4 0c             	add    esp,0xc
c00257bf:	c3                   	ret    

c00257c0 <SSE::load(void*)>:
c00257c0:	83 ec 0c             	sub    esp,0xc
c00257c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257c7:	83 ec 0c             	sub    esp,0xc
c00257ca:	50                   	push   eax
c00257cb:	e8 fe 0f 00 00       	call   c00267ce <sseLoad>
c00257d0:	83 c4 10             	add    esp,0x10
c00257d3:	90                   	nop
c00257d4:	83 c4 0c             	add    esp,0xc
c00257d7:	c3                   	ret    

c00257d8 <SSE::SSE()>:
c00257d8:	83 ec 0c             	sub    esp,0xc
c00257db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257df:	83 ec 08             	sub    esp,0x8
c00257e2:	68 54 d2 02 c0       	push   0xc002d254
c00257e7:	50                   	push   eax
c00257e8:	e8 4b f0 fe ff       	call   c0014838 <FPU::FPU(char const*)>
c00257ed:	83 c4 10             	add    esp,0x10
c00257f0:	ba 64 d2 02 c0       	mov    edx,0xc002d264
c00257f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f9:	89 10                	mov    DWORD PTR [eax],edx
c00257fb:	90                   	nop
c00257fc:	83 c4 0c             	add    esp,0xc
c00257ff:	c3                   	ret    

c0025800 <x87::open(int, int, void*)>:
c0025800:	83 ec 0c             	sub    esp,0xc
c0025803:	e8 1a 10 00 00       	call   c0026822 <x87Init>
c0025808:	b8 00 00 00 00       	mov    eax,0x0
c002580d:	83 c4 0c             	add    esp,0xc
c0025810:	c3                   	ret    
c0025811:	90                   	nop

c0025812 <x87::close(int, int, void*)>:
c0025812:	83 ec 0c             	sub    esp,0xc
c0025815:	e8 22 10 00 00       	call   c002683c <x87Close>
c002581a:	b8 00 00 00 00       	mov    eax,0x0
c002581f:	83 c4 0c             	add    esp,0xc
c0025822:	c3                   	ret    
c0025823:	90                   	nop

c0025824 <x87::available()>:
c0025824:	83 ec 0c             	sub    esp,0xc
c0025827:	e8 ca 0f 00 00       	call   c00267f6 <x87Detect>
c002582c:	85 c0                	test   eax,eax
c002582e:	0f 95 c0             	setne  al
c0025831:	83 c4 0c             	add    esp,0xc
c0025834:	c3                   	ret    
c0025835:	90                   	nop

c0025836 <x87::save(void*)>:
c0025836:	83 ec 0c             	sub    esp,0xc
c0025839:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002583d:	83 ec 0c             	sub    esp,0xc
c0025840:	50                   	push   eax
c0025841:	e8 cb 0f 00 00       	call   c0026811 <x87Save>
c0025846:	83 c4 10             	add    esp,0x10
c0025849:	90                   	nop
c002584a:	83 c4 0c             	add    esp,0xc
c002584d:	c3                   	ret    

c002584e <x87::load(void*)>:
c002584e:	83 ec 0c             	sub    esp,0xc
c0025851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025855:	83 ec 0c             	sub    esp,0xc
c0025858:	50                   	push   eax
c0025859:	e8 bc 0f 00 00       	call   c002681a <x87Load>
c002585e:	83 c4 10             	add    esp,0x10
c0025861:	90                   	nop
c0025862:	83 c4 0c             	add    esp,0xc
c0025865:	c3                   	ret    

c0025866 <x87::x87()>:
c0025866:	83 ec 0c             	sub    esp,0xc
c0025869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002586d:	83 ec 08             	sub    esp,0x8
c0025870:	68 94 d2 02 c0       	push   0xc002d294
c0025875:	50                   	push   eax
c0025876:	e8 bd ef fe ff       	call   c0014838 <FPU::FPU(char const*)>
c002587b:	83 c4 10             	add    esp,0x10
c002587e:	ba a4 d2 02 c0       	mov    edx,0xc002d2a4
c0025883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025887:	89 10                	mov    DWORD PTR [eax],edx
c0025889:	90                   	nop
c002588a:	83 c4 0c             	add    esp,0xc
c002588d:	c3                   	ret    

c002588e <APIC::disable()>:
c002588e:	90                   	nop
c002588f:	c3                   	ret    

c0025890 <APIC::close(int, int, void*)>:
c0025890:	55                   	push   ebp
c0025891:	89 e5                	mov    ebp,esp
c0025893:	83 ec 08             	sub    esp,0x8
c0025896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025899:	8b 00                	mov    eax,DWORD PTR [eax]
c002589b:	83 c0 3c             	add    eax,0x3c
c002589e:	8b 00                	mov    eax,DWORD PTR [eax]
c00258a0:	83 ec 0c             	sub    esp,0xc
c00258a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258a6:	ff d0                	call   eax
c00258a8:	83 c4 10             	add    esp,0x10
c00258ab:	b8 00 00 00 00       	mov    eax,0x0
c00258b0:	c9                   	leave  
c00258b1:	c3                   	ret    

c00258b2 <IOAPIC::close(int, int, void*)>:
c00258b2:	b8 00 00 00 00       	mov    eax,0x0
c00258b7:	c3                   	ret    

c00258b8 <APIC::io_wait()>:
c00258b8:	eb 00                	jmp    c00258ba <APIC::io_wait()+0x2>
c00258ba:	eb 00                	jmp    c00258bc <APIC::io_wait()+0x4>
c00258bc:	90                   	nop
c00258bd:	c3                   	ret    

c00258be <APIC::getBase()>:
c00258be:	55                   	push   ebp
c00258bf:	89 e5                	mov    ebp,esp
c00258c1:	83 ec 18             	sub    esp,0x18
c00258c4:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00258c9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00258cf:	83 e0 08             	and    eax,0x8
c00258d2:	84 c0                	test   al,al
c00258d4:	75 07                	jne    c00258dd <APIC::getBase()+0x1f>
c00258d6:	b8 00 00 00 00       	mov    eax,0x0
c00258db:	eb 21                	jmp    c00258fe <APIC::getBase()+0x40>
c00258dd:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00258e2:	83 ec 08             	sub    esp,0x8
c00258e5:	6a 1b                	push   0x1b
c00258e7:	50                   	push   eax
c00258e8:	e8 03 95 fe ff       	call   c000edf0 <Computer::rdmsr(unsigned int)>
c00258ed:	83 c4 10             	add    esp,0x10
c00258f0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00258f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00258f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00258fe:	c9                   	leave  
c00258ff:	c3                   	ret    

c0025900 <APIC::eoi(unsigned char)>:
c0025900:	55                   	push   ebp
c0025901:	89 e5                	mov    ebp,esp
c0025903:	83 ec 28             	sub    esp,0x28
c0025906:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025909:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002590c:	83 ec 0c             	sub    esp,0xc
c002590f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025912:	e8 a7 ff ff ff       	call   c00258be <APIC::getBase()>
c0025917:	83 c4 10             	add    esp,0x10
c002591a:	05 b0 00 00 00       	add    eax,0xb0
c002591f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025922:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025925:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002592b:	90                   	nop
c002592c:	c9                   	leave  
c002592d:	c3                   	ret    

c002592e <APIC::open(int, int, void*)>:
c002592e:	55                   	push   ebp
c002592f:	89 e5                	mov    ebp,esp
c0025931:	57                   	push   edi
c0025932:	56                   	push   esi
c0025933:	53                   	push   ebx
c0025934:	83 ec 2c             	sub    esp,0x2c
c0025937:	83 ec 0c             	sub    esp,0xc
c002593a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002593d:	e8 7c ff ff ff       	call   c00258be <APIC::getBase()>
c0025942:	83 c4 10             	add    esp,0x10
c0025945:	89 c2                	mov    edx,eax
c0025947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002594a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025950:	0f b6 f8             	movzx  edi,al
c0025953:	89 d0                	mov    eax,edx
c0025955:	ba 00 00 00 00       	mov    edx,0x0
c002595a:	89 c1                	mov    ecx,eax
c002595c:	80 e5 ff             	and    ch,0xff
c002595f:	89 cb                	mov    ebx,ecx
c0025961:	0f b6 f2             	movzx  esi,dl
c0025964:	89 d8                	mov    eax,ebx
c0025966:	89 f2                	mov    edx,esi
c0025968:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002596b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002596e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025972:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025976:	83 e0 00             	and    eax,0x0
c0025979:	09 d0                	or     eax,edx
c002597b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002597f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025982:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025988:	8d 50 01             	lea    edx,[eax+0x1]
c002598b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002598e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025994:	0f b6 d0             	movzx  edx,al
c0025997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002599a:	83 c2 08             	add    edx,0x8
c002599d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00259a1:	0f b6 c9             	movzx  ecx,cl
c00259a4:	81 c9 00 00 01 00    	or     ecx,0x10000
c00259aa:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00259ae:	83 ec 0c             	sub    esp,0xc
c00259b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259b4:	e8 05 ff ff ff       	call   c00258be <APIC::getBase()>
c00259b9:	83 c4 10             	add    esp,0x10
c00259bc:	05 f0 00 00 00       	add    eax,0xf0
c00259c1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00259c4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00259c9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00259cc:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00259d3:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00259da:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259dd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00259e0:	89 10                	mov    DWORD PTR [eax],edx
c00259e2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00259e9:	a1 f0 0e 03 c0       	mov    eax,ds:0xc0030ef0
c00259ee:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00259f1:	7d 7c                	jge    c0025a6f <APIC::open(int, int, void*)+0x141>
c00259f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00259f6:	8b 04 85 00 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf100]
c00259fd:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025a00:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025a03:	8b 04 85 00 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf100]
c0025a0a:	c1 e8 08             	shr    eax,0x8
c0025a0d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025a11:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025a14:	8b 04 85 00 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf100]
c0025a1b:	c1 e8 18             	shr    eax,0x18
c0025a1e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025a21:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025a25:	75 40                	jne    c0025a67 <APIC::open(int, int, void*)+0x139>
c0025a27:	83 ec 0c             	sub    esp,0xc
c0025a2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a2d:	e8 8c fe ff ff       	call   c00258be <APIC::getBase()>
c0025a32:	83 c4 10             	add    esp,0x10
c0025a35:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025a39:	75 07                	jne    c0025a42 <APIC::open(int, int, void*)+0x114>
c0025a3b:	ba 60 03 00 00       	mov    edx,0x360
c0025a40:	eb 05                	jmp    c0025a47 <APIC::open(int, int, void*)+0x119>
c0025a42:	ba 50 03 00 00       	mov    edx,0x350
c0025a47:	01 d0                	add    eax,edx
c0025a49:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025a4c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a51:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025a54:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025a5b:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025a5f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025a62:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025a65:	89 10                	mov    DWORD PTR [eax],edx
c0025a67:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025a6a:	e9 7a ff ff ff       	jmp    c00259e9 <APIC::open(int, int, void*)+0xbb>
c0025a6f:	b8 00 00 00 00       	mov    eax,0x0
c0025a74:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a77:	5b                   	pop    ebx
c0025a78:	5e                   	pop    esi
c0025a79:	5f                   	pop    edi
c0025a7a:	5d                   	pop    ebp
c0025a7b:	c3                   	ret    

c0025a7c <IOAPIC::IOAPIC()>:
c0025a7c:	83 ec 0c             	sub    esp,0xc
c0025a7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a83:	83 ec 08             	sub    esp,0x8
c0025a86:	68 d4 d2 02 c0       	push   0xc002d2d4
c0025a8b:	50                   	push   eax
c0025a8c:	e8 95 ea fe ff       	call   c0014526 <Device::Device(char const*)>
c0025a91:	83 c4 10             	add    esp,0x10
c0025a94:	ba fc d3 02 c0       	mov    edx,0xc002d3fc
c0025a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a9d:	89 10                	mov    DWORD PTR [eax],edx
c0025a9f:	90                   	nop
c0025aa0:	83 c4 0c             	add    esp,0xc
c0025aa3:	c3                   	ret    

c0025aa4 <APIC::APIC()>:
c0025aa4:	53                   	push   ebx
c0025aa5:	83 ec 18             	sub    esp,0x18
c0025aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025aac:	83 ec 08             	sub    esp,0x8
c0025aaf:	68 dc d2 02 c0       	push   0xc002d2dc
c0025ab4:	50                   	push   eax
c0025ab5:	e8 d8 f1 fe ff       	call   c0014c92 <InterruptController::InterruptController(char const*)>
c0025aba:	83 c4 10             	add    esp,0x10
c0025abd:	ba b4 d3 02 c0       	mov    edx,0xc002d3b4
c0025ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ac6:	89 10                	mov    DWORD PTR [eax],edx
c0025ac8:	a0 c0 29 03 c0       	mov    al,ds:0xc00329c0
c0025acd:	83 f0 01             	xor    eax,0x1
c0025ad0:	84 c0                	test   al,al
c0025ad2:	0f 84 a1 00 00 00    	je     c0025b79 <APIC::APIC()+0xd5>
c0025ad8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025add:	a0 a0 0f 03 c0       	mov    al,ds:0xc0030fa0
c0025ae2:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025ae6:	0f 83 86 00 00 00    	jae    c0025b72 <APIC::APIC()+0xce>
c0025aec:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025af4:	83 ec 0c             	sub    esp,0xc
c0025af7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025afb:	e8 4b 9d fe ff       	call   c000f84b <malloc>
c0025b00:	83 c4 10             	add    esp,0x10
c0025b03:	89 c3                	mov    ebx,eax
c0025b05:	83 ec 0c             	sub    esp,0xc
c0025b08:	53                   	push   ebx
c0025b09:	e8 6e ff ff ff       	call   c0025a7c <IOAPIC::IOAPIC()>
c0025b0e:	83 c4 10             	add    esp,0x10
c0025b11:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025b15:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025b1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025b1e:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c0025b25:	a1 80 29 03 c0       	mov    eax,ds:0xc0032980
c0025b2a:	40                   	inc    eax
c0025b2b:	a3 80 29 03 c0       	mov    ds:0xc0032980,eax
c0025b30:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0025b35:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025b3b:	83 ec 08             	sub    esp,0x8
c0025b3e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025b42:	50                   	push   eax
c0025b43:	e8 ee e7 fe ff       	call   c0014336 <Device::addChild(Device*)>
c0025b48:	83 c4 10             	add    esp,0x10
c0025b4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025b4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b51:	83 c0 08             	add    eax,0x8
c0025b54:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b56:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025b5b:	6a 00                	push   0x0
c0025b5d:	6a 00                	push   0x0
c0025b5f:	52                   	push   edx
c0025b60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025b64:	ff d0                	call   eax
c0025b66:	83 c4 10             	add    esp,0x10
c0025b69:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025b6d:	e9 6b ff ff ff       	jmp    c0025add <APIC::APIC()+0x39>
c0025b72:	c6 05 c0 29 03 c0 01 	mov    BYTE PTR ds:0xc00329c0,0x1
c0025b79:	90                   	nop
c0025b7a:	83 c4 18             	add    esp,0x18
c0025b7d:	5b                   	pop    ebx
c0025b7e:	c3                   	ret    
c0025b7f:	90                   	nop

c0025b80 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025b80:	55                   	push   ebp
c0025b81:	89 e5                	mov    ebp,esp
c0025b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b8c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b8f:	72 1d                	jb     c0025bae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b94:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b9d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025ba3:	01 d0                	add    eax,edx
c0025ba5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ba8:	73 04                	jae    c0025bae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025baa:	b0 01                	mov    al,0x1
c0025bac:	eb 02                	jmp    c0025bb0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025bae:	b0 00                	mov    al,0x0
c0025bb0:	5d                   	pop    ebp
c0025bb1:	c3                   	ret    

c0025bb2 <IOAPIC::read(int)>:
c0025bb2:	55                   	push   ebp
c0025bb3:	89 e5                	mov    ebp,esp
c0025bb5:	83 ec 10             	sub    esp,0x10
c0025bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bbb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bc1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025bc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bc7:	0f b6 d0             	movzx  edx,al
c0025bca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bcd:	89 10                	mov    DWORD PTR [eax],edx
c0025bcf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bd2:	83 c0 10             	add    eax,0x10
c0025bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bd7:	c9                   	leave  
c0025bd8:	c3                   	ret    
c0025bd9:	90                   	nop

c0025bda <IOAPIC::open(int, int, void*)>:
c0025bda:	55                   	push   ebp
c0025bdb:	89 e5                	mov    ebp,esp
c0025bdd:	57                   	push   edi
c0025bde:	56                   	push   esi
c0025bdf:	53                   	push   ebx
c0025be0:	83 ec 0c             	sub    esp,0xc
c0025be3:	83 ec 0c             	sub    esp,0xc
c0025be6:	68 07 d3 02 c0       	push   0xc002d307
c0025beb:	e8 19 d3 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0025bf0:	83 c4 10             	add    esp,0x10
c0025bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bf6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bf9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025c08:	8b 14 85 e0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf020]
c0025c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c12:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c1b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025c21:	8b 14 85 60 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefa0]
c0025c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c2b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c34:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c3d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c43:	0f b6 f8             	movzx  edi,al
c0025c46:	89 d0                	mov    eax,edx
c0025c48:	ba 00 00 00 00       	mov    edx,0x0
c0025c4d:	89 c1                	mov    ecx,eax
c0025c4f:	80 e5 ff             	and    ch,0xff
c0025c52:	89 cb                	mov    ebx,ecx
c0025c54:	0f b6 f2             	movzx  esi,dl
c0025c57:	89 d8                	mov    eax,ebx
c0025c59:	89 f2                	mov    edx,esi
c0025c5b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c5e:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025c61:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025c65:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025c69:	83 e0 00             	and    eax,0x0
c0025c6c:	09 d0                	or     eax,edx
c0025c6e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c75:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0025c7e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c81:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025c87:	0f b6 d0             	movzx  edx,al
c0025c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c8d:	83 c2 08             	add    edx,0x8
c0025c90:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c94:	0f b6 c9             	movzx  ecx,cl
c0025c97:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025c9d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ca1:	83 ec 08             	sub    esp,0x8
c0025ca4:	6a 01                	push   0x1
c0025ca6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ca9:	e8 04 ff ff ff       	call   c0025bb2 <IOAPIC::read(int)>
c0025cae:	83 c4 10             	add    esp,0x10
c0025cb1:	c1 f8 10             	sar    eax,0x10
c0025cb4:	0f b6 c0             	movzx  eax,al
c0025cb7:	8d 50 01             	lea    edx,[eax+0x1]
c0025cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cbd:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025cc3:	b8 00 00 00 00       	mov    eax,0x0
c0025cc8:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ccb:	5b                   	pop    ebx
c0025ccc:	5e                   	pop    esi
c0025ccd:	5f                   	pop    edi
c0025cce:	5d                   	pop    ebp
c0025ccf:	c3                   	ret    

c0025cd0 <IOAPIC::write(int, int)>:
c0025cd0:	55                   	push   ebp
c0025cd1:	89 e5                	mov    ebp,esp
c0025cd3:	83 ec 10             	sub    esp,0x10
c0025cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cd9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025cdf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025ce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ce5:	0f b6 d0             	movzx  edx,al
c0025ce8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ceb:	89 10                	mov    DWORD PTR [eax],edx
c0025ced:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025cf0:	8d 50 10             	lea    edx,[eax+0x10]
c0025cf3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025cf6:	89 02                	mov    DWORD PTR [edx],eax
c0025cf8:	90                   	nop
c0025cf9:	c9                   	leave  
c0025cfa:	c3                   	ret    
c0025cfb:	90                   	nop

c0025cfc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025cfc:	55                   	push   ebp
c0025cfd:	89 e5                	mov    ebp,esp
c0025cff:	53                   	push   ebx
c0025d00:	83 ec 2c             	sub    esp,0x2c
c0025d03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d06:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025d09:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025d0c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025d0f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025d12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025d15:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025d18:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d1b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025d1e:	88 d8                	mov    al,bl
c0025d20:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025d23:	88 c8                	mov    al,cl
c0025d25:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d28:	88 d0                	mov    al,dl
c0025d2a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025d2d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025d31:	83 c0 08             	add    eax,0x8
c0025d34:	01 c0                	add    eax,eax
c0025d36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025d39:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025d3d:	83 c0 08             	add    eax,0x8
c0025d40:	01 c0                	add    eax,eax
c0025d42:	40                   	inc    eax
c0025d43:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025d46:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025d49:	50                   	push   eax
c0025d4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d4d:	e8 60 fe ff ff       	call   c0025bb2 <IOAPIC::read(int)>
c0025d52:	83 c4 08             	add    esp,0x8
c0025d55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025d58:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025d5f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025d62:	c1 e0 18             	shl    eax,0x18
c0025d65:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025d68:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025d6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025d6e:	52                   	push   edx
c0025d6f:	50                   	push   eax
c0025d70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d73:	e8 58 ff ff ff       	call   c0025cd0 <IOAPIC::write(int, int)>
c0025d78:	83 c4 0c             	add    esp,0xc
c0025d7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d7e:	50                   	push   eax
c0025d7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d82:	e8 2b fe ff ff       	call   c0025bb2 <IOAPIC::read(int)>
c0025d87:	83 c4 08             	add    esp,0x8
c0025d8a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025d8d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025d94:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025d9b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025da2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025da6:	74 09                	je     c0025db1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025da8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025daf:	eb 07                	jmp    c0025db8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025db1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025db8:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025dbc:	74 09                	je     c0025dc7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025dbe:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025dc5:	eb 07                	jmp    c0025dce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025dc7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025dce:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025dd5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025dd9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025ddc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025ddf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025de2:	52                   	push   edx
c0025de3:	50                   	push   eax
c0025de4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025de7:	e8 e4 fe ff ff       	call   c0025cd0 <IOAPIC::write(int, int)>
c0025dec:	83 c4 0c             	add    esp,0xc
c0025def:	90                   	nop
c0025df0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025df3:	c9                   	leave  
c0025df4:	c3                   	ret    
c0025df5:	90                   	nop

c0025df6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025df6:	55                   	push   ebp
c0025df7:	89 e5                	mov    ebp,esp
c0025df9:	57                   	push   edi
c0025dfa:	56                   	push   esi
c0025dfb:	53                   	push   ebx
c0025dfc:	83 ec 2c             	sub    esp,0x2c
c0025dff:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025e02:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025e05:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025e09:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025e0d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025e11:	74 5a                	je     c0025e6d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025e13:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025e17:	7f 44                	jg     c0025e5d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025e19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e1c:	05 60 d8 02 c0       	add    eax,0xc002d860
c0025e21:	8a 00                	mov    al,BYTE PTR [eax]
c0025e23:	0f b6 c0             	movzx  eax,al
c0025e26:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025e29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e2c:	66 8b 84 00 80 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf080]
c0025e34:	0f b7 c0             	movzx  eax,ax
c0025e37:	83 e0 02             	and    eax,0x2
c0025e3a:	85 c0                	test   eax,eax
c0025e3c:	74 04                	je     c0025e42 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025e3e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025e42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e45:	66 8b 84 00 80 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf080]
c0025e4d:	0f b7 c0             	movzx  eax,ax
c0025e50:	83 e0 08             	and    eax,0x8
c0025e53:	85 c0                	test   eax,eax
c0025e55:	74 16                	je     c0025e6d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025e57:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025e5b:	eb 10                	jmp    c0025e6d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025e5d:	83 ec 0c             	sub    esp,0xc
c0025e60:	68 18 d3 02 c0       	push   0xc002d318
c0025e65:	e8 dd 47 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0025e6a:	83 c4 10             	add    esp,0x10
c0025e6d:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025e71:	a1 80 29 03 c0       	mov    eax,ds:0xc0032980
c0025e76:	83 ec 08             	sub    esp,0x8
c0025e79:	50                   	push   eax
c0025e7a:	68 50 d3 02 c0       	push   0xc002d350
c0025e7f:	e8 85 d0 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0025e84:	83 c4 10             	add    esp,0x10
c0025e87:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025e8e:	a1 80 29 03 c0       	mov    eax,ds:0xc0032980
c0025e93:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025e96:	7d 67                	jge    c0025eff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e98:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e9b:	8b 04 85 a0 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd660]
c0025ea2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ea5:	83 ec 08             	sub    esp,0x8
c0025ea8:	52                   	push   edx
c0025ea9:	50                   	push   eax
c0025eaa:	e8 d1 fc ff ff       	call   c0025b80 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025eaf:	83 c4 10             	add    esp,0x10
c0025eb2:	84 c0                	test   al,al
c0025eb4:	74 44                	je     c0025efa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025eb6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025eb9:	8b 1c 85 a0 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd660]
c0025ec0:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025ec4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025ec7:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025ecb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ece:	83 c0 20             	add    eax,0x20
c0025ed1:	0f b6 f0             	movzx  esi,al
c0025ed4:	b8 00 00 00 00       	mov    eax,0x0
c0025ed9:	99                   	cdq    
c0025eda:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025edd:	0f b6 c9             	movzx  ecx,cl
c0025ee0:	83 ec 04             	sub    esp,0x4
c0025ee3:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025ee6:	57                   	push   edi
c0025ee7:	56                   	push   esi
c0025ee8:	52                   	push   edx
c0025ee9:	50                   	push   eax
c0025eea:	51                   	push   ecx
c0025eeb:	53                   	push   ebx
c0025eec:	e8 0b fe ff ff       	call   c0025cfc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025ef1:	83 c4 20             	add    esp,0x20
c0025ef4:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025ef8:	eb 05                	jmp    c0025eff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025efa:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025efd:	eb 8f                	jmp    c0025e8e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025eff:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025f02:	83 f0 01             	xor    eax,0x1
c0025f05:	84 c0                	test   al,al
c0025f07:	74 10                	je     c0025f19 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025f09:	83 ec 0c             	sub    esp,0xc
c0025f0c:	68 67 d3 02 c0       	push   0xc002d367
c0025f11:	e8 31 47 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0025f16:	83 c4 10             	add    esp,0x10
c0025f19:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025f1d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025f24:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025f28:	7f 65                	jg     c0025f8f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f2d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f30:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f37:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f3a:	01 ca                	add    edx,ecx
c0025f3c:	83 c2 54             	add    edx,0x54
c0025f3f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025f43:	85 c0                	test   eax,eax
c0025f45:	75 43                	jne    c0025f8a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f4a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f4d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f54:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f57:	01 ca                	add    edx,ecx
c0025f59:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025f5c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025f5f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025f63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f66:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025f69:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025f70:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f73:	01 ca                	add    edx,ecx
c0025f75:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025f7b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025f7e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025f82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f85:	83 e8 20             	sub    eax,0x20
c0025f88:	eb 1a                	jmp    c0025fa4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025f8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025f8d:	eb 95                	jmp    c0025f24 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025f8f:	83 ec 0c             	sub    esp,0xc
c0025f92:	68 74 d3 02 c0       	push   0xc002d374
c0025f97:	e8 ab 46 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0025f9c:	83 c4 10             	add    esp,0x10
c0025f9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025fa4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025fa7:	5b                   	pop    ebx
c0025fa8:	5e                   	pop    esi
c0025fa9:	5f                   	pop    edi
c0025faa:	5d                   	pop    ebp
c0025fab:	c3                   	ret    

c0025fac <PIC::disable()>:
c0025fac:	55                   	push   ebp
c0025fad:	89 e5                	mov    ebp,esp
c0025faf:	83 ec 10             	sub    esp,0x10
c0025fb2:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025fb8:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025fbc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fbf:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025fc3:	ee                   	out    dx,al
c0025fc4:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025fca:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025fce:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025fd1:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025fd5:	ee                   	out    dx,al
c0025fd6:	90                   	nop
c0025fd7:	c9                   	leave  
c0025fd8:	c3                   	ret    
c0025fd9:	90                   	nop

c0025fda <PIC::close(int, int, void*)>:
c0025fda:	55                   	push   ebp
c0025fdb:	89 e5                	mov    ebp,esp
c0025fdd:	83 ec 08             	sub    esp,0x8
c0025fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fe3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fe5:	83 c0 3c             	add    eax,0x3c
c0025fe8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fea:	83 ec 0c             	sub    esp,0xc
c0025fed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ff0:	ff d0                	call   eax
c0025ff2:	83 c4 10             	add    esp,0x10
c0025ff5:	b8 00 00 00 00       	mov    eax,0x0
c0025ffa:	c9                   	leave  
c0025ffb:	c3                   	ret    

c0025ffc <PIC::PIC()>:
c0025ffc:	83 ec 0c             	sub    esp,0xc
c0025fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026003:	83 ec 08             	sub    esp,0x8
c0026006:	68 20 d4 02 c0       	push   0xc002d420
c002600b:	50                   	push   eax
c002600c:	e8 81 ec fe ff       	call   c0014c92 <InterruptController::InterruptController(char const*)>
c0026011:	83 c4 10             	add    esp,0x10
c0026014:	ba 4c d4 02 c0       	mov    edx,0xc002d44c
c0026019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002601d:	89 10                	mov    DWORD PTR [eax],edx
c002601f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026023:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026029:	0f b6 d0             	movzx  edx,al
c002602c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026030:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026041:	0f b6 d0             	movzx  edx,al
c0026044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026048:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002604d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026051:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026057:	8d 50 01             	lea    edx,[eax+0x1]
c002605a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002605e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026064:	0f b6 d0             	movzx  edx,al
c0026067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002606b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002606f:	83 e1 3f             	and    ecx,0x3f
c0026072:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002607a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026080:	0f b6 d0             	movzx  edx,al
c0026083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026087:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002608e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026092:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026098:	0f b6 d0             	movzx  edx,al
c002609b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002609f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00260a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00260ae:	8d 50 01             	lea    edx,[eax+0x1]
c00260b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260b5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00260bb:	0f b6 d0             	movzx  edx,al
c00260be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00260c6:	83 e1 3f             	and    ecx,0x3f
c00260c9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00260cd:	90                   	nop
c00260ce:	83 c4 0c             	add    esp,0xc
c00260d1:	c3                   	ret    

c00260d2 <PIC::ioWait()>:
c00260d2:	eb 00                	jmp    c00260d4 <PIC::ioWait()+0x2>
c00260d4:	eb 00                	jmp    c00260d6 <PIC::ioWait()+0x4>
c00260d6:	90                   	nop
c00260d7:	c3                   	ret    

c00260d8 <PIC::getIRQReg(int)>:
c00260d8:	55                   	push   ebp
c00260d9:	89 e5                	mov    ebp,esp
c00260db:	83 ec 10             	sub    esp,0x10
c00260de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260e1:	0f b6 c0             	movzx  eax,al
c00260e4:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00260ea:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00260ed:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260f0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260f4:	ee                   	out    dx,al
c00260f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260f8:	0f b6 c0             	movzx  eax,al
c00260fb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026101:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026104:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026107:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002610b:	ee                   	out    dx,al
c002610c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026112:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026116:	89 c2                	mov    edx,eax
c0026118:	ec                   	in     al,dx
c0026119:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002611c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002611f:	0f b6 c0             	movzx  eax,al
c0026122:	c1 e0 08             	shl    eax,0x8
c0026125:	89 c1                	mov    ecx,eax
c0026127:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002612d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026131:	89 c2                	mov    edx,eax
c0026133:	ec                   	in     al,dx
c0026134:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026137:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002613a:	0f b6 c0             	movzx  eax,al
c002613d:	09 c8                	or     eax,ecx
c002613f:	c9                   	leave  
c0026140:	c3                   	ret    
c0026141:	90                   	nop

c0026142 <PIC::eoi(unsigned char)>:
c0026142:	55                   	push   ebp
c0026143:	89 e5                	mov    ebp,esp
c0026145:	83 ec 14             	sub    esp,0x14
c0026148:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002614b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002614e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026152:	75 1e                	jne    c0026172 <PIC::eoi(unsigned char)+0x30>
c0026154:	6a 0b                	push   0xb
c0026156:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026159:	e8 7a ff ff ff       	call   c00260d8 <PIC::getIRQReg(int)>
c002615e:	83 c4 08             	add    esp,0x8
c0026161:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026165:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026169:	25 80 00 00 00       	and    eax,0x80
c002616e:	85 c0                	test   eax,eax
c0026170:	74 5f                	je     c00261d1 <PIC::eoi(unsigned char)+0x8f>
c0026172:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026176:	75 2d                	jne    c00261a5 <PIC::eoi(unsigned char)+0x63>
c0026178:	6a 0b                	push   0xb
c002617a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002617d:	e8 56 ff ff ff       	call   c00260d8 <PIC::getIRQReg(int)>
c0026182:	83 c4 08             	add    esp,0x8
c0026185:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026189:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002618c:	66 85 c0             	test   ax,ax
c002618f:	78 14                	js     c00261a5 <PIC::eoi(unsigned char)+0x63>
c0026191:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026197:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002619b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002619e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00261a2:	ee                   	out    dx,al
c00261a3:	eb 2d                	jmp    c00261d2 <PIC::eoi(unsigned char)+0x90>
c00261a5:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00261a9:	76 12                	jbe    c00261bd <PIC::eoi(unsigned char)+0x7b>
c00261ab:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00261b1:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00261b5:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00261b8:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00261bc:	ee                   	out    dx,al
c00261bd:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00261c3:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00261c7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00261ca:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00261ce:	ee                   	out    dx,al
c00261cf:	eb 01                	jmp    c00261d2 <PIC::eoi(unsigned char)+0x90>
c00261d1:	90                   	nop
c00261d2:	c9                   	leave  
c00261d3:	c3                   	ret    

c00261d4 <PIC::remap()>:
c00261d4:	55                   	push   ebp
c00261d5:	89 e5                	mov    ebp,esp
c00261d7:	83 ec 48             	sub    esp,0x48
c00261da:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00261e1:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00261e8:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00261ee:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00261f1:	89 c2                	mov    edx,eax
c00261f3:	ec                   	in     al,dx
c00261f4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00261f7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00261fa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00261fd:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026203:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026206:	89 c2                	mov    edx,eax
c0026208:	ec                   	in     al,dx
c0026209:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002620c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002620f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026212:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026218:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002621c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002621f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026222:	ee                   	out    dx,al
c0026223:	83 ec 0c             	sub    esp,0xc
c0026226:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026229:	e8 a4 fe ff ff       	call   c00260d2 <PIC::ioWait()>
c002622e:	83 c4 10             	add    esp,0x10
c0026231:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026237:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002623b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002623e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026241:	ee                   	out    dx,al
c0026242:	83 ec 0c             	sub    esp,0xc
c0026245:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026248:	e8 85 fe ff ff       	call   c00260d2 <PIC::ioWait()>
c002624d:	83 c4 10             	add    esp,0x10
c0026250:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026253:	0f b6 c0             	movzx  eax,al
c0026256:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002625c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002625f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026262:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026265:	ee                   	out    dx,al
c0026266:	83 ec 0c             	sub    esp,0xc
c0026269:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002626c:	e8 61 fe ff ff       	call   c00260d2 <PIC::ioWait()>
c0026271:	83 c4 10             	add    esp,0x10
c0026274:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026277:	0f b6 c0             	movzx  eax,al
c002627a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026280:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026283:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026286:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026289:	ee                   	out    dx,al
c002628a:	83 ec 0c             	sub    esp,0xc
c002628d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026290:	e8 3d fe ff ff       	call   c00260d2 <PIC::ioWait()>
c0026295:	83 c4 10             	add    esp,0x10
c0026298:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002629e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00262a2:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00262a5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00262a8:	ee                   	out    dx,al
c00262a9:	83 ec 0c             	sub    esp,0xc
c00262ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262af:	e8 1e fe ff ff       	call   c00260d2 <PIC::ioWait()>
c00262b4:	83 c4 10             	add    esp,0x10
c00262b7:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00262bd:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00262c1:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00262c4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00262c7:	ee                   	out    dx,al
c00262c8:	83 ec 0c             	sub    esp,0xc
c00262cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262ce:	e8 ff fd ff ff       	call   c00260d2 <PIC::ioWait()>
c00262d3:	83 c4 10             	add    esp,0x10
c00262d6:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00262dc:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00262e0:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00262e3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00262e6:	ee                   	out    dx,al
c00262e7:	83 ec 0c             	sub    esp,0xc
c00262ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262ed:	e8 e0 fd ff ff       	call   c00260d2 <PIC::ioWait()>
c00262f2:	83 c4 10             	add    esp,0x10
c00262f5:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00262fb:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00262ff:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026302:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026305:	ee                   	out    dx,al
c0026306:	83 ec 0c             	sub    esp,0xc
c0026309:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002630c:	e8 c1 fd ff ff       	call   c00260d2 <PIC::ioWait()>
c0026311:	83 c4 10             	add    esp,0x10
c0026314:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026318:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002631e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026321:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026324:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026327:	ee                   	out    dx,al
c0026328:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002632c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026332:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026335:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026338:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002633b:	ee                   	out    dx,al
c002633c:	90                   	nop
c002633d:	c9                   	leave  
c002633e:	c3                   	ret    
c002633f:	90                   	nop

c0026340 <PIC::open(int, int, void*)>:
c0026340:	55                   	push   ebp
c0026341:	89 e5                	mov    ebp,esp
c0026343:	83 ec 18             	sub    esp,0x18
c0026346:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002634c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026350:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026353:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026357:	ee                   	out    dx,al
c0026358:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002635e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026362:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026365:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026369:	ee                   	out    dx,al
c002636a:	83 ec 0c             	sub    esp,0xc
c002636d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026370:	e8 5f fe ff ff       	call   c00261d4 <PIC::remap()>
c0026375:	83 c4 10             	add    esp,0x10
c0026378:	b8 00 00 00 00       	mov    eax,0x0
c002637d:	c9                   	leave  
c002637e:	c3                   	ret    
c002637f:	90                   	nop

c0026380 <APICTimer::close(int, int, void*)>:
c0026380:	b8 00 00 00 00       	mov    eax,0x0
c0026385:	c3                   	ret    

c0026386 <apicTimerHandler(regs*, void*)>:
c0026386:	83 ec 0c             	sub    esp,0xc
c0026389:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002638d:	8b 00                	mov    eax,DWORD PTR [eax]
c002638f:	99                   	cdq    
c0026390:	52                   	push   edx
c0026391:	50                   	push   eax
c0026392:	6a 00                	push   0x0
c0026394:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026399:	e8 96 07 00 00       	call   c0026b34 <__udivdi3>
c002639e:	83 c4 10             	add    esp,0x10
c00263a1:	83 ec 08             	sub    esp,0x8
c00263a4:	52                   	push   edx
c00263a5:	50                   	push   eax
c00263a6:	e8 ac 09 ff ff       	call   c0016d57 <timerHandler(unsigned long long)>
c00263ab:	83 c4 10             	add    esp,0x10
c00263ae:	90                   	nop
c00263af:	83 c4 0c             	add    esp,0xc
c00263b2:	c3                   	ret    
c00263b3:	90                   	nop

c00263b4 <APICTimer::write(int)>:
c00263b4:	53                   	push   ebx
c00263b5:	83 ec 28             	sub    esp,0x28
c00263b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263bc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00263c0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00263c6:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00263cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263d1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263d7:	83 ec 0c             	sub    esp,0xc
c00263da:	50                   	push   eax
c00263db:	e8 de f4 ff ff       	call   c00258be <APIC::getBase()>
c00263e0:	83 c4 10             	add    esp,0x10
c00263e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00263e7:	a1 90 ec 02 c0       	mov    eax,ds:0xc002ec90
c00263ec:	8b 15 94 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec94
c00263f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00263f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00263fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263fe:	05 e0 03 00 00       	add    eax,0x3e0
c0026403:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002640d:	05 80 03 00 00       	add    eax,0x380
c0026412:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026418:	fb                   	sti    
c0026419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026421:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026426:	83 d2 00             	adc    edx,0x0
c0026429:	89 c1                	mov    ecx,eax
c002642b:	89 d3                	mov    ebx,edx
c002642d:	a1 90 ec 02 c0       	mov    eax,ds:0xc002ec90
c0026432:	8b 15 94 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec94
c0026438:	39 c8                	cmp    eax,ecx
c002643a:	89 d0                	mov    eax,edx
c002643c:	19 d8                	sbb    eax,ebx
c002643e:	73 02                	jae    c0026442 <APICTimer::write(int)+0x8e>
c0026440:	eb d7                	jmp    c0026419 <APICTimer::write(int)+0x65>
c0026442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026446:	05 20 03 00 00       	add    eax,0x320
c002644b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026451:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026455:	05 90 03 00 00       	add    eax,0x390
c002645a:	8b 00                	mov    eax,DWORD PTR [eax]
c002645c:	f7 d0                	not    eax
c002645e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026462:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026466:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002646a:	ba 00 00 00 00       	mov    edx,0x0
c002646f:	f7 f3                	div    ebx
c0026471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026475:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026479:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002647f:	0d 00 00 02 00       	or     eax,0x20000
c0026484:	89 c2                	mov    edx,eax
c0026486:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002648a:	05 20 03 00 00       	add    eax,0x320
c002648f:	89 10                	mov    DWORD PTR [eax],edx
c0026491:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026495:	05 e0 03 00 00       	add    eax,0x3e0
c002649a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00264a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00264a4:	05 80 03 00 00       	add    eax,0x380
c00264a9:	89 c2                	mov    edx,eax
c00264ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00264af:	89 02                	mov    DWORD PTR [edx],eax
c00264b1:	90                   	nop
c00264b2:	83 c4 28             	add    esp,0x28
c00264b5:	5b                   	pop    ebx
c00264b6:	c3                   	ret    
c00264b7:	90                   	nop

c00264b8 <APICTimer::open(int, int, void*)>:
c00264b8:	57                   	push   edi
c00264b9:	56                   	push   esi
c00264ba:	53                   	push   ebx
c00264bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00264c1:	83 c0 24             	add    eax,0x24
c00264c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00264c6:	83 ec 08             	sub    esp,0x8
c00264c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264d1:	ff d0                	call   eax
c00264d3:	83 c4 10             	add    esp,0x10
c00264d6:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c00264db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00264e1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00264e7:	83 ec 0c             	sub    esp,0xc
c00264ea:	50                   	push   eax
c00264eb:	e8 ce f3 ff ff       	call   c00258be <APIC::getBase()>
c00264f0:	83 c4 10             	add    esp,0x10
c00264f3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00264f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264fd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026503:	0f b6 f8             	movzx  edi,al
c0026506:	89 d0                	mov    eax,edx
c0026508:	ba 00 00 00 00       	mov    edx,0x0
c002650d:	89 c1                	mov    ecx,eax
c002650f:	80 e5 ff             	and    ch,0xff
c0026512:	89 cb                	mov    ebx,ecx
c0026514:	0f b6 f2             	movzx  esi,dl
c0026517:	89 d8                	mov    eax,ebx
c0026519:	89 f2                	mov    edx,esi
c002651b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002651f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026522:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026526:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002652a:	83 e0 00             	and    eax,0x0
c002652d:	09 d0                	or     eax,edx
c002652f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026537:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002653d:	8d 50 01             	lea    edx,[eax+0x1]
c0026540:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026544:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002654a:	0f b6 d0             	movzx  edx,al
c002654d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026551:	83 c2 08             	add    edx,0x8
c0026554:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026558:	0f b6 c9             	movzx  ecx,cl
c002655b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026561:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026569:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002656d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026577:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002657b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026581:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026585:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002658b:	83 ec 0c             	sub    esp,0xc
c002658e:	51                   	push   ecx
c002658f:	6a 01                	push   0x1
c0026591:	68 86 63 02 c0       	push   0xc0026386
c0026596:	52                   	push   edx
c0026597:	50                   	push   eax
c0026598:	e8 1d dd fe ff       	call   c00142ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002659d:	83 c4 20             	add    esp,0x20
c00265a0:	89 c2                	mov    edx,eax
c00265a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265ac:	b8 00 00 00 00       	mov    eax,0x0
c00265b1:	5b                   	pop    ebx
c00265b2:	5e                   	pop    esi
c00265b3:	5f                   	pop    edi
c00265b4:	c3                   	ret    
c00265b5:	90                   	nop

c00265b6 <APICTimer::APICTimer()>:
c00265b6:	83 ec 0c             	sub    esp,0xc
c00265b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265bd:	83 ec 08             	sub    esp,0x8
c00265c0:	68 8c d4 02 c0       	push   0xc002d48c
c00265c5:	50                   	push   eax
c00265c6:	e8 fd 06 ff ff       	call   c0016cc8 <Timer::Timer(char const*)>
c00265cb:	83 c4 10             	add    esp,0x10
c00265ce:	ba a0 d4 02 c0       	mov    edx,0xc002d4a0
c00265d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d7:	89 10                	mov    DWORD PTR [eax],edx
c00265d9:	90                   	nop
c00265da:	83 c4 0c             	add    esp,0xc
c00265dd:	c3                   	ret    

c00265de <PIT::write(int)>:
c00265de:	83 ec 10             	sub    esp,0x10
c00265e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00265e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00265e9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00265ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00265f3:	a3 c4 29 03 c0       	mov    ds:0xc00329c4,eax
c00265f8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00265fd:	99                   	cdq    
c00265fe:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026602:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026606:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002660d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026612:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026616:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002661b:	ee                   	out    dx,al
c002661c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026620:	0f b6 c0             	movzx  eax,al
c0026623:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002662a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002662e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026632:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026637:	ee                   	out    dx,al
c0026638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002663c:	c1 f8 08             	sar    eax,0x8
c002663f:	0f b6 c0             	movzx  eax,al
c0026642:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026649:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002664d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026651:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026656:	ee                   	out    dx,al
c0026657:	90                   	nop
c0026658:	83 c4 10             	add    esp,0x10
c002665b:	c3                   	ret    

c002665c <pitHandler(regs*, void*)>:
c002665c:	83 ec 0c             	sub    esp,0xc
c002665f:	a1 c4 29 03 c0       	mov    eax,ds:0xc00329c4
c0026664:	99                   	cdq    
c0026665:	52                   	push   edx
c0026666:	50                   	push   eax
c0026667:	6a 00                	push   0x0
c0026669:	68 00 ca 9a 3b       	push   0x3b9aca00
c002666e:	e8 c1 04 00 00       	call   c0026b34 <__udivdi3>
c0026673:	83 c4 10             	add    esp,0x10
c0026676:	83 ec 08             	sub    esp,0x8
c0026679:	52                   	push   edx
c002667a:	50                   	push   eax
c002667b:	e8 d7 06 ff ff       	call   c0016d57 <timerHandler(unsigned long long)>
c0026680:	83 c4 10             	add    esp,0x10
c0026683:	90                   	nop
c0026684:	83 c4 0c             	add    esp,0xc
c0026687:	c3                   	ret    

c0026688 <PIT::open(int, int, void*)>:
c0026688:	83 ec 0c             	sub    esp,0xc
c002668b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002668f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026691:	83 c0 24             	add    eax,0x24
c0026694:	8b 00                	mov    eax,DWORD PTR [eax]
c0026696:	83 ec 08             	sub    esp,0x8
c0026699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002669d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00266a1:	ff d0                	call   eax
c00266a3:	83 c4 10             	add    esp,0x10
c00266a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266aa:	83 ec 0c             	sub    esp,0xc
c00266ad:	6a 00                	push   0x0
c00266af:	6a 01                	push   0x1
c00266b1:	68 5c 66 02 c0       	push   0xc002665c
c00266b6:	6a 00                	push   0x0
c00266b8:	50                   	push   eax
c00266b9:	e8 fc db fe ff       	call   c00142ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00266be:	83 c4 20             	add    esp,0x20
c00266c1:	89 c2                	mov    edx,eax
c00266c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00266cd:	b8 00 00 00 00       	mov    eax,0x0
c00266d2:	83 c4 0c             	add    esp,0xc
c00266d5:	c3                   	ret    

c00266d6 <PIT::close(int, int, void*)>:
c00266d6:	83 ec 0c             	sub    esp,0xc
c00266d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266dd:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00266e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266eb:	6a 01                	push   0x1
c00266ed:	68 5c 66 02 c0       	push   0xc002665c
c00266f2:	6a 00                	push   0x0
c00266f4:	50                   	push   eax
c00266f5:	e8 fe db fe ff       	call   c00142f8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00266fa:	83 c4 10             	add    esp,0x10
c00266fd:	b8 00 00 00 00       	mov    eax,0x0
c0026702:	83 c4 0c             	add    esp,0xc
c0026705:	c3                   	ret    

c0026706 <PIT::PIT()>:
c0026706:	83 ec 0c             	sub    esp,0xc
c0026709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002670d:	83 ec 08             	sub    esp,0x8
c0026710:	68 c8 d4 02 c0       	push   0xc002d4c8
c0026715:	50                   	push   eax
c0026716:	e8 ad 05 ff ff       	call   c0016cc8 <Timer::Timer(char const*)>
c002671b:	83 c4 10             	add    esp,0x10
c002671e:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0026723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026727:	89 10                	mov    DWORD PTR [eax],edx
c0026729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026733:	0f b6 d0             	movzx  edx,al
c0026736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002673a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026745:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002674b:	0f b6 d0             	movzx  edx,al
c002674e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026752:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002675b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026761:	8d 50 01             	lea    edx,[eax+0x1]
c0026764:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026768:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002676e:	0f b6 d0             	movzx  edx,al
c0026771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026775:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026779:	83 e1 3f             	and    ecx,0x3f
c002677c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026780:	90                   	nop
c0026781:	83 c4 0c             	add    esp,0xc
c0026784:	c3                   	ret    
c0026785:	66 90                	xchg   ax,ax
c0026787:	66 90                	xchg   ax,ax
c0026789:	66 90                	xchg   ax,ax
c002678b:	66 90                	xchg   ax,ax
c002678d:	66 90                	xchg   ax,ax
c002678f:	90                   	nop

c0026790 <avxDetect>:
c0026790:	b8 00 00 00 00       	mov    eax,0x0
c0026795:	c3                   	ret    

c0026796 <avxSave>:
c0026796:	c3                   	ret    

c0026797 <avxLoad>:
c0026797:	c3                   	ret    

c0026798 <avxInit>:
c0026798:	c3                   	ret    

c0026799 <avxClose>:
c0026799:	c3                   	ret    

c002679a <wouldSheSayYes>:
c002679a:	c3                   	ret    
c002679b:	49                   	dec    ecx
c002679c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00267a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00267a4:	75 20                	jne    c00267c6 <sseDetect.noSSE+0x1>
c00267a6:	4e                   	dec    esi
c00267a7:	79 61                	jns    c002680a <x87Detect+0x14>
c00267a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00267ae:	66 90                	xchg   ax,ax

c00267b0 <absolutelyNoChanceInHell>:
c00267b0:	b8 01 00 00 00       	mov    eax,0x1
c00267b5:	0f a2                	cpuid  
c00267b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00267bd:	74 06                	je     c00267c5 <sseDetect.noSSE>
c00267bf:	b8 01 00 00 00       	mov    eax,0x1
c00267c4:	c3                   	ret    

c00267c5 <sseDetect.noSSE>:
c00267c5:	31 c0                	xor    eax,eax
c00267c7:	c3                   	ret    

c00267c8 <sseSave>:
c00267c8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00267cd:	c3                   	ret    

c00267ce <sseLoad>:
c00267ce:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00267d3:	c3                   	ret    

c00267d4 <sseInit>:
c00267d4:	e8 49 00 00 00       	call   c0026822 <x87Init>
c00267d9:	0f 20 e0             	mov    eax,cr4
c00267dc:	66 0d 00 06          	or     ax,0x600
c00267e0:	0f 22 e0             	mov    cr4,eax
c00267e3:	c3                   	ret    

c00267e4 <sseClose>:
c00267e4:	c3                   	ret    
c00267e5:	66 90                	xchg   ax,ax
c00267e7:	66 90                	xchg   ax,ax
c00267e9:	66 90                	xchg   ax,ax
c00267eb:	66 90                	xchg   ax,ax
c00267ed:	66 90                	xchg   ax,ax
c00267ef:	90                   	nop

c00267f0 <value_37F>:
c00267f0:	7f 03                	jg     c00267f5 <value_37A+0x1>

c00267f2 <value_37E>:
c00267f2:	7e 03                	jle    c00267f7 <x87Detect+0x1>

c00267f4 <value_37A>:
c00267f4:	7a 03                	jp     c00267f9 <x87Detect+0x3>

c00267f6 <x87Detect>:
c00267f6:	b8 01 00 00 00       	mov    eax,0x1
c00267fb:	0f a2                	cpuid  
c00267fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026803:	74 06                	je     c002680b <x87Detect.nox87>
c0026805:	b8 01 00 00 00       	mov    eax,0x1
c002680a:	c3                   	ret    

c002680b <x87Detect.nox87>:
c002680b:	b8 00 00 00 00       	mov    eax,0x0
c0026810:	c3                   	ret    

c0026811 <x87Save>:
c0026811:	55                   	push   ebp
c0026812:	89 e5                	mov    ebp,esp
c0026814:	9b dd 75 08          	fsave  [ebp+0x8]
c0026818:	c9                   	leave  
c0026819:	c3                   	ret    

c002681a <x87Load>:
c002681a:	55                   	push   ebp
c002681b:	89 e5                	mov    ebp,esp
c002681d:	dd 65 08             	frstor [ebp+0x8]
c0026820:	c9                   	leave  
c0026821:	c3                   	ret    

c0026822 <x87Init>:
c0026822:	9b db e3             	finit  
c0026825:	0f 20 c0             	mov    eax,cr0
c0026828:	66 25 fb ff          	and    ax,0xfffb
c002682c:	66 0d 22 00          	or     ax,0x22
c0026830:	0f 22 c0             	mov    cr0,eax
c0026833:	0f 06                	clts   
c0026835:	d9 2d f4 67 02 c0    	fldcw  WORD PTR ds:0xc00267f4
c002683b:	c3                   	ret    

c002683c <x87Close>:
c002683c:	c3                   	ret    
c002683d:	66 90                	xchg   ax,ax
c002683f:	90                   	nop

c0026840 <__do_global_ctors_aux>:
c0026840:	a1 98 93 02 c0       	mov    eax,ds:0xc0029398
c0026845:	83 f8 ff             	cmp    eax,0xffffffff
c0026848:	74 1a                	je     c0026864 <__do_global_ctors_aux+0x24>
c002684a:	55                   	push   ebp
c002684b:	89 e5                	mov    ebp,esp
c002684d:	53                   	push   ebx
c002684e:	52                   	push   edx
c002684f:	bb 98 93 02 c0       	mov    ebx,0xc0029398
c0026854:	ff d0                	call   eax
c0026856:	83 eb 04             	sub    ebx,0x4
c0026859:	8b 03                	mov    eax,DWORD PTR [ebx]
c002685b:	83 f8 ff             	cmp    eax,0xffffffff
c002685e:	75 f4                	jne    c0026854 <__do_global_ctors_aux+0x14>
c0026860:	58                   	pop    eax
c0026861:	5b                   	pop    ebx
c0026862:	5d                   	pop    ebp
c0026863:	c3                   	ret    
c0026864:	c3                   	ret    
c0026865:	66 90                	xchg   ax,ax
c0026867:	90                   	nop

c0026868 <__divdi3>:
c0026868:	55                   	push   ebp
c0026869:	57                   	push   edi
c002686a:	56                   	push   esi
c002686b:	53                   	push   ebx
c002686c:	83 ec 1c             	sub    esp,0x1c
c002686f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026873:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026877:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002687a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002687e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026882:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026886:	85 db                	test   ebx,ebx
c0026888:	0f 88 8e 00 00 00    	js     c002691c <__divdi3+0xb4>
c002688e:	89 dd                	mov    ebp,ebx
c0026890:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026898:	89 d3                	mov    ebx,edx
c002689a:	85 d2                	test   edx,edx
c002689c:	79 0d                	jns    c00268ab <__divdi3+0x43>
c002689e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00268a2:	f7 d8                	neg    eax
c00268a4:	83 d2 00             	adc    edx,0x0
c00268a7:	f7 da                	neg    edx
c00268a9:	89 d3                	mov    ebx,edx
c00268ab:	89 c7                	mov    edi,eax
c00268ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00268b0:	85 db                	test   ebx,ebx
c00268b2:	75 48                	jne    c00268fc <__divdi3+0x94>
c00268b4:	39 ef                	cmp    edi,ebp
c00268b6:	76 24                	jbe    c00268dc <__divdi3+0x74>
c00268b8:	89 ea                	mov    edx,ebp
c00268ba:	f7 f7                	div    edi
c00268bc:	89 c1                	mov    ecx,eax
c00268be:	31 f6                	xor    esi,esi
c00268c0:	89 c8                	mov    eax,ecx
c00268c2:	89 f2                	mov    edx,esi
c00268c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00268c8:	85 c9                	test   ecx,ecx
c00268ca:	74 07                	je     c00268d3 <__divdi3+0x6b>
c00268cc:	f7 d8                	neg    eax
c00268ce:	83 d2 00             	adc    edx,0x0
c00268d1:	f7 da                	neg    edx
c00268d3:	83 c4 1c             	add    esp,0x1c
c00268d6:	5b                   	pop    ebx
c00268d7:	5e                   	pop    esi
c00268d8:	5f                   	pop    edi
c00268d9:	5d                   	pop    ebp
c00268da:	c3                   	ret    
c00268db:	90                   	nop
c00268dc:	85 ff                	test   edi,edi
c00268de:	75 0b                	jne    c00268eb <__divdi3+0x83>
c00268e0:	b8 01 00 00 00       	mov    eax,0x1
c00268e5:	31 d2                	xor    edx,edx
c00268e7:	f7 f3                	div    ebx
c00268e9:	89 c7                	mov    edi,eax
c00268eb:	31 d2                	xor    edx,edx
c00268ed:	89 e8                	mov    eax,ebp
c00268ef:	f7 f7                	div    edi
c00268f1:	89 c6                	mov    esi,eax
c00268f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00268f6:	f7 f7                	div    edi
c00268f8:	89 c1                	mov    ecx,eax
c00268fa:	eb c4                	jmp    c00268c0 <__divdi3+0x58>
c00268fc:	39 eb                	cmp    ebx,ebp
c00268fe:	77 3c                	ja     c002693c <__divdi3+0xd4>
c0026900:	0f bd f3             	bsr    esi,ebx
c0026903:	83 f6 1f             	xor    esi,0x1f
c0026906:	75 40                	jne    c0026948 <__divdi3+0xe0>
c0026908:	39 eb                	cmp    ebx,ebp
c002690a:	72 09                	jb     c0026915 <__divdi3+0xad>
c002690c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002690f:	0f 87 97 00 00 00    	ja     c00269ac <__divdi3+0x144>
c0026915:	b9 01 00 00 00       	mov    ecx,0x1
c002691a:	eb a4                	jmp    c00268c0 <__divdi3+0x58>
c002691c:	f7 d9                	neg    ecx
c002691e:	83 d3 00             	adc    ebx,0x0
c0026921:	f7 db                	neg    ebx
c0026923:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026926:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002692a:	89 dd                	mov    ebp,ebx
c002692c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026934:	e9 5f ff ff ff       	jmp    c0026898 <__divdi3+0x30>
c0026939:	8d 76 00             	lea    esi,[esi+0x0]
c002693c:	31 f6                	xor    esi,esi
c002693e:	31 c9                	xor    ecx,ecx
c0026940:	e9 7b ff ff ff       	jmp    c00268c0 <__divdi3+0x58>
c0026945:	8d 76 00             	lea    esi,[esi+0x0]
c0026948:	b8 20 00 00 00       	mov    eax,0x20
c002694d:	29 f0                	sub    eax,esi
c002694f:	89 f1                	mov    ecx,esi
c0026951:	d3 e3                	shl    ebx,cl
c0026953:	89 fa                	mov    edx,edi
c0026955:	88 c1                	mov    cl,al
c0026957:	d3 ea                	shr    edx,cl
c0026959:	09 da                	or     edx,ebx
c002695b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002695f:	89 f1                	mov    ecx,esi
c0026961:	d3 e7                	shl    edi,cl
c0026963:	89 eb                	mov    ebx,ebp
c0026965:	88 c1                	mov    cl,al
c0026967:	d3 eb                	shr    ebx,cl
c0026969:	89 f1                	mov    ecx,esi
c002696b:	d3 e5                	shl    ebp,cl
c002696d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026970:	88 c1                	mov    cl,al
c0026972:	d3 ea                	shr    edx,cl
c0026974:	09 d5                	or     ebp,edx
c0026976:	89 e8                	mov    eax,ebp
c0026978:	89 da                	mov    edx,ebx
c002697a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002697e:	89 d3                	mov    ebx,edx
c0026980:	89 c5                	mov    ebp,eax
c0026982:	f7 e7                	mul    edi
c0026984:	39 d3                	cmp    ebx,edx
c0026986:	72 18                	jb     c00269a0 <__divdi3+0x138>
c0026988:	74 0a                	je     c0026994 <__divdi3+0x12c>
c002698a:	89 e9                	mov    ecx,ebp
c002698c:	31 f6                	xor    esi,esi
c002698e:	e9 2d ff ff ff       	jmp    c00268c0 <__divdi3+0x58>
c0026993:	90                   	nop
c0026994:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026997:	89 f1                	mov    ecx,esi
c0026999:	d3 e7                	shl    edi,cl
c002699b:	39 c7                	cmp    edi,eax
c002699d:	73 eb                	jae    c002698a <__divdi3+0x122>
c002699f:	90                   	nop
c00269a0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00269a3:	31 f6                	xor    esi,esi
c00269a5:	e9 16 ff ff ff       	jmp    c00268c0 <__divdi3+0x58>
c00269aa:	66 90                	xchg   ax,ax
c00269ac:	31 c9                	xor    ecx,ecx
c00269ae:	e9 0d ff ff ff       	jmp    c00268c0 <__divdi3+0x58>
c00269b3:	90                   	nop

c00269b4 <__moddi3>:
c00269b4:	55                   	push   ebp
c00269b5:	57                   	push   edi
c00269b6:	56                   	push   esi
c00269b7:	53                   	push   ebx
c00269b8:	83 ec 2c             	sub    esp,0x2c
c00269bb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00269bf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00269c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00269c7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00269cb:	85 db                	test   ebx,ebx
c00269cd:	0f 88 85 00 00 00    	js     c0026a58 <__moddi3+0xa4>
c00269d3:	89 de                	mov    esi,ebx
c00269d5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00269dd:	89 d7                	mov    edi,edx
c00269df:	85 d2                	test   edx,edx
c00269e1:	79 09                	jns    c00269ec <__moddi3+0x38>
c00269e3:	f7 d8                	neg    eax
c00269e5:	83 d2 00             	adc    edx,0x0
c00269e8:	f7 da                	neg    edx
c00269ea:	89 d7                	mov    edi,edx
c00269ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00269f0:	89 cd                	mov    ebp,ecx
c00269f2:	85 ff                	test   edi,edi
c00269f4:	75 52                	jne    c0026a48 <__moddi3+0x94>
c00269f6:	89 c3                	mov    ebx,eax
c00269f8:	39 f0                	cmp    eax,esi
c00269fa:	76 24                	jbe    c0026a20 <__moddi3+0x6c>
c00269fc:	89 c8                	mov    eax,ecx
c00269fe:	89 f2                	mov    edx,esi
c0026a00:	f7 f3                	div    ebx
c0026a02:	89 d6                	mov    esi,edx
c0026a04:	89 f0                	mov    eax,esi
c0026a06:	31 d2                	xor    edx,edx
c0026a08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026a0c:	85 c9                	test   ecx,ecx
c0026a0e:	74 07                	je     c0026a17 <__moddi3+0x63>
c0026a10:	f7 d8                	neg    eax
c0026a12:	83 d2 00             	adc    edx,0x0
c0026a15:	f7 da                	neg    edx
c0026a17:	83 c4 2c             	add    esp,0x2c
c0026a1a:	5b                   	pop    ebx
c0026a1b:	5e                   	pop    esi
c0026a1c:	5f                   	pop    edi
c0026a1d:	5d                   	pop    ebp
c0026a1e:	c3                   	ret    
c0026a1f:	90                   	nop
c0026a20:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026a24:	85 db                	test   ebx,ebx
c0026a26:	75 0d                	jne    c0026a35 <__moddi3+0x81>
c0026a28:	b8 01 00 00 00       	mov    eax,0x1
c0026a2d:	31 d2                	xor    edx,edx
c0026a2f:	f7 f7                	div    edi
c0026a31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a35:	89 f0                	mov    eax,esi
c0026a37:	31 d2                	xor    edx,edx
c0026a39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a3d:	f7 f7                	div    edi
c0026a3f:	89 e8                	mov    eax,ebp
c0026a41:	f7 f7                	div    edi
c0026a43:	89 d6                	mov    esi,edx
c0026a45:	eb bd                	jmp    c0026a04 <__moddi3+0x50>
c0026a47:	90                   	nop
c0026a48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026a4c:	39 f7                	cmp    edi,esi
c0026a4e:	76 20                	jbe    c0026a70 <__moddi3+0xbc>
c0026a50:	89 c8                	mov    eax,ecx
c0026a52:	89 f2                	mov    edx,esi
c0026a54:	eb b2                	jmp    c0026a08 <__moddi3+0x54>
c0026a56:	66 90                	xchg   ax,ax
c0026a58:	f7 d9                	neg    ecx
c0026a5a:	83 d3 00             	adc    ebx,0x0
c0026a5d:	f7 db                	neg    ebx
c0026a5f:	89 de                	mov    esi,ebx
c0026a61:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026a69:	e9 6f ff ff ff       	jmp    c00269dd <__moddi3+0x29>
c0026a6e:	66 90                	xchg   ax,ax
c0026a70:	0f bd c7             	bsr    eax,edi
c0026a73:	83 f0 1f             	xor    eax,0x1f
c0026a76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026a7a:	75 24                	jne    c0026aa0 <__moddi3+0xec>
c0026a7c:	39 f7                	cmp    edi,esi
c0026a7e:	72 06                	jb     c0026a86 <__moddi3+0xd2>
c0026a80:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026a84:	77 0c                	ja     c0026a92 <__moddi3+0xde>
c0026a86:	89 e9                	mov    ecx,ebp
c0026a88:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026a8c:	19 fe                	sbb    esi,edi
c0026a8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026a92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a96:	89 f2                	mov    edx,esi
c0026a98:	e9 6b ff ff ff       	jmp    c0026a08 <__moddi3+0x54>
c0026a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0026aa0:	b8 20 00 00 00       	mov    eax,0x20
c0026aa5:	89 c2                	mov    edx,eax
c0026aa7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026aab:	29 da                	sub    edx,ebx
c0026aad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026ab1:	88 d9                	mov    cl,bl
c0026ab3:	d3 e7                	shl    edi,cl
c0026ab5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ab9:	88 d1                	mov    cl,dl
c0026abb:	d3 e8                	shr    eax,cl
c0026abd:	09 c7                	or     edi,eax
c0026abf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026ac3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026ac7:	89 d8                	mov    eax,ebx
c0026ac9:	88 d9                	mov    cl,bl
c0026acb:	d3 e7                	shl    edi,cl
c0026acd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026ad1:	89 f3                	mov    ebx,esi
c0026ad3:	88 d1                	mov    cl,dl
c0026ad5:	d3 eb                	shr    ebx,cl
c0026ad7:	89 c7                	mov    edi,eax
c0026ad9:	88 c1                	mov    cl,al
c0026adb:	d3 e6                	shl    esi,cl
c0026add:	89 e8                	mov    eax,ebp
c0026adf:	88 d1                	mov    cl,dl
c0026ae1:	d3 e8                	shr    eax,cl
c0026ae3:	09 f0                	or     eax,esi
c0026ae5:	89 f9                	mov    ecx,edi
c0026ae7:	d3 e5                	shl    ebp,cl
c0026ae9:	89 da                	mov    edx,ebx
c0026aeb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026aef:	89 d3                	mov    ebx,edx
c0026af1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026af5:	89 c6                	mov    esi,eax
c0026af7:	89 d1                	mov    ecx,edx
c0026af9:	39 d3                	cmp    ebx,edx
c0026afb:	72 27                	jb     c0026b24 <__moddi3+0x170>
c0026afd:	74 21                	je     c0026b20 <__moddi3+0x16c>
c0026aff:	29 f5                	sub    ebp,esi
c0026b01:	19 cb                	sbb    ebx,ecx
c0026b03:	89 de                	mov    esi,ebx
c0026b05:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026b09:	d3 e6                	shl    esi,cl
c0026b0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026b0f:	89 f9                	mov    ecx,edi
c0026b11:	d3 ed                	shr    ebp,cl
c0026b13:	09 ee                	or     esi,ebp
c0026b15:	89 f0                	mov    eax,esi
c0026b17:	d3 eb                	shr    ebx,cl
c0026b19:	89 da                	mov    edx,ebx
c0026b1b:	e9 e8 fe ff ff       	jmp    c0026a08 <__moddi3+0x54>
c0026b20:	39 c5                	cmp    ebp,eax
c0026b22:	73 db                	jae    c0026aff <__moddi3+0x14b>
c0026b24:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b28:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026b2c:	89 d1                	mov    ecx,edx
c0026b2e:	89 c6                	mov    esi,eax
c0026b30:	eb cd                	jmp    c0026aff <__moddi3+0x14b>
c0026b32:	66 90                	xchg   ax,ax

c0026b34 <__udivdi3>:
c0026b34:	55                   	push   ebp
c0026b35:	57                   	push   edi
c0026b36:	56                   	push   esi
c0026b37:	53                   	push   ebx
c0026b38:	83 ec 1c             	sub    esp,0x1c
c0026b3b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026b3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026b43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b47:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026b4b:	85 d2                	test   edx,edx
c0026b4d:	75 41                	jne    c0026b90 <__udivdi3+0x5c>
c0026b4f:	39 f7                	cmp    edi,esi
c0026b51:	76 15                	jbe    c0026b68 <__udivdi3+0x34>
c0026b53:	89 e8                	mov    eax,ebp
c0026b55:	89 f2                	mov    edx,esi
c0026b57:	f7 f7                	div    edi
c0026b59:	31 db                	xor    ebx,ebx
c0026b5b:	89 da                	mov    edx,ebx
c0026b5d:	83 c4 1c             	add    esp,0x1c
c0026b60:	5b                   	pop    ebx
c0026b61:	5e                   	pop    esi
c0026b62:	5f                   	pop    edi
c0026b63:	5d                   	pop    ebp
c0026b64:	c3                   	ret    
c0026b65:	8d 76 00             	lea    esi,[esi+0x0]
c0026b68:	89 f9                	mov    ecx,edi
c0026b6a:	85 ff                	test   edi,edi
c0026b6c:	75 0b                	jne    c0026b79 <__udivdi3+0x45>
c0026b6e:	b8 01 00 00 00       	mov    eax,0x1
c0026b73:	31 d2                	xor    edx,edx
c0026b75:	f7 f7                	div    edi
c0026b77:	89 c1                	mov    ecx,eax
c0026b79:	31 d2                	xor    edx,edx
c0026b7b:	89 f0                	mov    eax,esi
c0026b7d:	f7 f1                	div    ecx
c0026b7f:	89 c3                	mov    ebx,eax
c0026b81:	89 e8                	mov    eax,ebp
c0026b83:	f7 f1                	div    ecx
c0026b85:	89 da                	mov    edx,ebx
c0026b87:	83 c4 1c             	add    esp,0x1c
c0026b8a:	5b                   	pop    ebx
c0026b8b:	5e                   	pop    esi
c0026b8c:	5f                   	pop    edi
c0026b8d:	5d                   	pop    ebp
c0026b8e:	c3                   	ret    
c0026b8f:	90                   	nop
c0026b90:	39 f2                	cmp    edx,esi
c0026b92:	77 1c                	ja     c0026bb0 <__udivdi3+0x7c>
c0026b94:	0f bd da             	bsr    ebx,edx
c0026b97:	83 f3 1f             	xor    ebx,0x1f
c0026b9a:	75 24                	jne    c0026bc0 <__udivdi3+0x8c>
c0026b9c:	39 f2                	cmp    edx,esi
c0026b9e:	72 08                	jb     c0026ba8 <__udivdi3+0x74>
c0026ba0:	39 ef                	cmp    edi,ebp
c0026ba2:	0f 87 84 00 00 00    	ja     c0026c2c <__udivdi3+0xf8>
c0026ba8:	b8 01 00 00 00       	mov    eax,0x1
c0026bad:	eb ac                	jmp    c0026b5b <__udivdi3+0x27>
c0026baf:	90                   	nop
c0026bb0:	31 db                	xor    ebx,ebx
c0026bb2:	31 c0                	xor    eax,eax
c0026bb4:	89 da                	mov    edx,ebx
c0026bb6:	83 c4 1c             	add    esp,0x1c
c0026bb9:	5b                   	pop    ebx
c0026bba:	5e                   	pop    esi
c0026bbb:	5f                   	pop    edi
c0026bbc:	5d                   	pop    ebp
c0026bbd:	c3                   	ret    
c0026bbe:	66 90                	xchg   ax,ax
c0026bc0:	b8 20 00 00 00       	mov    eax,0x20
c0026bc5:	29 d8                	sub    eax,ebx
c0026bc7:	88 d9                	mov    cl,bl
c0026bc9:	d3 e2                	shl    edx,cl
c0026bcb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026bcf:	89 fa                	mov    edx,edi
c0026bd1:	88 c1                	mov    cl,al
c0026bd3:	d3 ea                	shr    edx,cl
c0026bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026bd9:	09 d1                	or     ecx,edx
c0026bdb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026bdf:	88 d9                	mov    cl,bl
c0026be1:	d3 e7                	shl    edi,cl
c0026be3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026be7:	89 f7                	mov    edi,esi
c0026be9:	88 c1                	mov    cl,al
c0026beb:	d3 ef                	shr    edi,cl
c0026bed:	88 d9                	mov    cl,bl
c0026bef:	d3 e6                	shl    esi,cl
c0026bf1:	89 ea                	mov    edx,ebp
c0026bf3:	88 c1                	mov    cl,al
c0026bf5:	d3 ea                	shr    edx,cl
c0026bf7:	09 d6                	or     esi,edx
c0026bf9:	89 f0                	mov    eax,esi
c0026bfb:	89 fa                	mov    edx,edi
c0026bfd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c01:	89 d7                	mov    edi,edx
c0026c03:	89 c6                	mov    esi,eax
c0026c05:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c09:	39 d7                	cmp    edi,edx
c0026c0b:	72 13                	jb     c0026c20 <__udivdi3+0xec>
c0026c0d:	74 09                	je     c0026c18 <__udivdi3+0xe4>
c0026c0f:	89 f0                	mov    eax,esi
c0026c11:	31 db                	xor    ebx,ebx
c0026c13:	e9 43 ff ff ff       	jmp    c0026b5b <__udivdi3+0x27>
c0026c18:	88 d9                	mov    cl,bl
c0026c1a:	d3 e5                	shl    ebp,cl
c0026c1c:	39 c5                	cmp    ebp,eax
c0026c1e:	73 ef                	jae    c0026c0f <__udivdi3+0xdb>
c0026c20:	8d 46 ff             	lea    eax,[esi-0x1]
c0026c23:	31 db                	xor    ebx,ebx
c0026c25:	e9 31 ff ff ff       	jmp    c0026b5b <__udivdi3+0x27>
c0026c2a:	66 90                	xchg   ax,ax
c0026c2c:	31 c0                	xor    eax,eax
c0026c2e:	e9 28 ff ff ff       	jmp    c0026b5b <__udivdi3+0x27>
c0026c33:	90                   	nop

c0026c34 <__umoddi3>:
c0026c34:	55                   	push   ebp
c0026c35:	57                   	push   edi
c0026c36:	56                   	push   esi
c0026c37:	53                   	push   ebx
c0026c38:	83 ec 1c             	sub    esp,0x1c
c0026c3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026c3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026c43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026c47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026c4b:	89 da                	mov    edx,ebx
c0026c4d:	85 c0                	test   eax,eax
c0026c4f:	75 37                	jne    c0026c88 <__umoddi3+0x54>
c0026c51:	39 df                	cmp    edi,ebx
c0026c53:	76 13                	jbe    c0026c68 <__umoddi3+0x34>
c0026c55:	89 f0                	mov    eax,esi
c0026c57:	f7 f7                	div    edi
c0026c59:	89 d0                	mov    eax,edx
c0026c5b:	31 d2                	xor    edx,edx
c0026c5d:	83 c4 1c             	add    esp,0x1c
c0026c60:	5b                   	pop    ebx
c0026c61:	5e                   	pop    esi
c0026c62:	5f                   	pop    edi
c0026c63:	5d                   	pop    ebp
c0026c64:	c3                   	ret    
c0026c65:	8d 76 00             	lea    esi,[esi+0x0]
c0026c68:	89 fd                	mov    ebp,edi
c0026c6a:	85 ff                	test   edi,edi
c0026c6c:	75 0b                	jne    c0026c79 <__umoddi3+0x45>
c0026c6e:	b8 01 00 00 00       	mov    eax,0x1
c0026c73:	31 d2                	xor    edx,edx
c0026c75:	f7 f7                	div    edi
c0026c77:	89 c5                	mov    ebp,eax
c0026c79:	89 d8                	mov    eax,ebx
c0026c7b:	31 d2                	xor    edx,edx
c0026c7d:	f7 f5                	div    ebp
c0026c7f:	89 f0                	mov    eax,esi
c0026c81:	f7 f5                	div    ebp
c0026c83:	89 d0                	mov    eax,edx
c0026c85:	eb d4                	jmp    c0026c5b <__umoddi3+0x27>
c0026c87:	90                   	nop
c0026c88:	89 f1                	mov    ecx,esi
c0026c8a:	39 d8                	cmp    eax,ebx
c0026c8c:	76 0a                	jbe    c0026c98 <__umoddi3+0x64>
c0026c8e:	89 f0                	mov    eax,esi
c0026c90:	83 c4 1c             	add    esp,0x1c
c0026c93:	5b                   	pop    ebx
c0026c94:	5e                   	pop    esi
c0026c95:	5f                   	pop    edi
c0026c96:	5d                   	pop    ebp
c0026c97:	c3                   	ret    
c0026c98:	0f bd e8             	bsr    ebp,eax
c0026c9b:	83 f5 1f             	xor    ebp,0x1f
c0026c9e:	75 1c                	jne    c0026cbc <__umoddi3+0x88>
c0026ca0:	39 d8                	cmp    eax,ebx
c0026ca2:	72 04                	jb     c0026ca8 <__umoddi3+0x74>
c0026ca4:	39 f7                	cmp    edi,esi
c0026ca6:	77 08                	ja     c0026cb0 <__umoddi3+0x7c>
c0026ca8:	89 da                	mov    edx,ebx
c0026caa:	29 fe                	sub    esi,edi
c0026cac:	19 c2                	sbb    edx,eax
c0026cae:	89 f1                	mov    ecx,esi
c0026cb0:	89 c8                	mov    eax,ecx
c0026cb2:	83 c4 1c             	add    esp,0x1c
c0026cb5:	5b                   	pop    ebx
c0026cb6:	5e                   	pop    esi
c0026cb7:	5f                   	pop    edi
c0026cb8:	5d                   	pop    ebp
c0026cb9:	c3                   	ret    
c0026cba:	66 90                	xchg   ax,ax
c0026cbc:	ba 20 00 00 00       	mov    edx,0x20
c0026cc1:	29 ea                	sub    edx,ebp
c0026cc3:	89 e9                	mov    ecx,ebp
c0026cc5:	d3 e0                	shl    eax,cl
c0026cc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ccb:	89 f8                	mov    eax,edi
c0026ccd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026cd1:	88 d1                	mov    cl,dl
c0026cd3:	d3 e8                	shr    eax,cl
c0026cd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026cd9:	09 c1                	or     ecx,eax
c0026cdb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026cdf:	89 e9                	mov    ecx,ebp
c0026ce1:	d3 e7                	shl    edi,cl
c0026ce3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026ce7:	89 d8                	mov    eax,ebx
c0026ce9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026ced:	88 d1                	mov    cl,dl
c0026cef:	d3 e8                	shr    eax,cl
c0026cf1:	89 c7                	mov    edi,eax
c0026cf3:	89 e9                	mov    ecx,ebp
c0026cf5:	d3 e3                	shl    ebx,cl
c0026cf7:	89 f0                	mov    eax,esi
c0026cf9:	88 d1                	mov    cl,dl
c0026cfb:	d3 e8                	shr    eax,cl
c0026cfd:	09 d8                	or     eax,ebx
c0026cff:	89 e9                	mov    ecx,ebp
c0026d01:	d3 e6                	shl    esi,cl
c0026d03:	89 f3                	mov    ebx,esi
c0026d05:	89 fa                	mov    edx,edi
c0026d07:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026d0b:	89 d1                	mov    ecx,edx
c0026d0d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026d11:	89 c6                	mov    esi,eax
c0026d13:	89 d7                	mov    edi,edx
c0026d15:	39 d1                	cmp    ecx,edx
c0026d17:	72 27                	jb     c0026d40 <__umoddi3+0x10c>
c0026d19:	74 21                	je     c0026d3c <__umoddi3+0x108>
c0026d1b:	89 ca                	mov    edx,ecx
c0026d1d:	29 f3                	sub    ebx,esi
c0026d1f:	19 fa                	sbb    edx,edi
c0026d21:	89 d0                	mov    eax,edx
c0026d23:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026d27:	d3 e0                	shl    eax,cl
c0026d29:	89 e9                	mov    ecx,ebp
c0026d2b:	d3 eb                	shr    ebx,cl
c0026d2d:	09 d8                	or     eax,ebx
c0026d2f:	d3 ea                	shr    edx,cl
c0026d31:	83 c4 1c             	add    esp,0x1c
c0026d34:	5b                   	pop    ebx
c0026d35:	5e                   	pop    esi
c0026d36:	5f                   	pop    edi
c0026d37:	5d                   	pop    ebp
c0026d38:	c3                   	ret    
c0026d39:	8d 76 00             	lea    esi,[esi+0x0]
c0026d3c:	39 c3                	cmp    ebx,eax
c0026d3e:	73 db                	jae    c0026d1b <__umoddi3+0xe7>
c0026d40:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026d44:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026d48:	89 d7                	mov    edi,edx
c0026d4a:	89 c6                	mov    esi,eax
c0026d4c:	eb cd                	jmp    c0026d1b <__umoddi3+0xe7>

c0026d4e <__addsf3>:
c0026d4e:	55                   	push   ebp
c0026d4f:	89 e5                	mov    ebp,esp
c0026d51:	57                   	push   edi
c0026d52:	56                   	push   esi
c0026d53:	53                   	push   ebx
c0026d54:	83 ec 08             	sub    esp,0x8
c0026d57:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026d5a:	89 fa                	mov    edx,edi
c0026d5c:	89 f8                	mov    eax,edi
c0026d5e:	c1 f8 17             	sar    eax,0x17
c0026d61:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026d64:	c1 e2 08             	shl    edx,0x8
c0026d67:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026d6d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d70:	89 de                	mov    esi,ebx
c0026d72:	c1 fe 17             	sar    esi,0x17
c0026d75:	c1 e3 08             	shl    ebx,0x8
c0026d78:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d7e:	31 f0                	xor    eax,esi
c0026d80:	0f 88 3b 01 00 00    	js     c0026ec1 <__addsf3+0x173>
c0026d86:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026d89:	29 f1                	sub    ecx,esi
c0026d8b:	85 c9                	test   ecx,ecx
c0026d8d:	7e 54                	jle    c0026de3 <__addsf3+0x95>
c0026d8f:	89 f0                	mov    eax,esi
c0026d91:	84 c0                	test   al,al
c0026d93:	75 10                	jne    c0026da5 <__addsf3+0x57>
c0026d95:	85 db                	test   ebx,ebx
c0026d97:	0f 84 aa 02 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026d9d:	49                   	dec    ecx
c0026d9e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026da1:	74 38                	je     c0026ddb <__addsf3+0x8d>
c0026da3:	eb 13                	jmp    c0026db8 <__addsf3+0x6a>
c0026da5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026da8:	f7 d0                	not    eax
c0026daa:	84 c0                	test   al,al
c0026dac:	0f 84 95 02 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026db2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026db8:	83 f9 1f             	cmp    ecx,0x1f
c0026dbb:	0f 8f 86 02 00 00    	jg     c0027047 <__addsf3+0x2f9>
c0026dc1:	89 de                	mov    esi,ebx
c0026dc3:	d3 ee                	shr    esi,cl
c0026dc5:	b8 20 00 00 00       	mov    eax,0x20
c0026dca:	29 c8                	sub    eax,ecx
c0026dcc:	89 c1                	mov    ecx,eax
c0026dce:	d3 e3                	shl    ebx,cl
c0026dd0:	31 c0                	xor    eax,eax
c0026dd2:	85 db                	test   ebx,ebx
c0026dd4:	0f 95 c0             	setne  al
c0026dd7:	09 f0                	or     eax,esi
c0026dd9:	01 d0                	add    eax,edx
c0026ddb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dde:	e9 b6 00 00 00       	jmp    c0026e99 <__addsf3+0x14b>
c0026de3:	74 5c                	je     c0026e41 <__addsf3+0xf3>
c0026de5:	89 f1                	mov    ecx,esi
c0026de7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026dea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ded:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026df1:	75 14                	jne    c0026e07 <__addsf3+0xb9>
c0026df3:	85 d2                	test   edx,edx
c0026df5:	0f 84 4c 02 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026dfb:	49                   	dec    ecx
c0026dfc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dff:	0f 84 94 00 00 00    	je     c0026e99 <__addsf3+0x14b>
c0026e05:	eb 12                	jmp    c0026e19 <__addsf3+0xcb>
c0026e07:	89 f0                	mov    eax,esi
c0026e09:	f7 d0                	not    eax
c0026e0b:	84 c0                	test   al,al
c0026e0d:	0f 84 34 02 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026e13:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e19:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e1c:	83 f9 1f             	cmp    ecx,0x1f
c0026e1f:	0f 8f 22 02 00 00    	jg     c0027047 <__addsf3+0x2f9>
c0026e25:	89 d7                	mov    edi,edx
c0026e27:	d3 ef                	shr    edi,cl
c0026e29:	b8 20 00 00 00       	mov    eax,0x20
c0026e2e:	29 c8                	sub    eax,ecx
c0026e30:	89 c1                	mov    ecx,eax
c0026e32:	d3 e2                	shl    edx,cl
c0026e34:	31 c0                	xor    eax,eax
c0026e36:	85 d2                	test   edx,edx
c0026e38:	0f 95 c0             	setne  al
c0026e3b:	09 f8                	or     eax,edi
c0026e3d:	01 d8                	add    eax,ebx
c0026e3f:	eb 58                	jmp    c0026e99 <__addsf3+0x14b>
c0026e41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e44:	8d 70 01             	lea    esi,[eax+0x1]
c0026e47:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026e4d:	75 32                	jne    c0026e81 <__addsf3+0x133>
c0026e4f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026e53:	75 1f                	jne    c0026e74 <__addsf3+0x126>
c0026e55:	85 d2                	test   edx,edx
c0026e57:	0f 84 e0 01 00 00    	je     c002703d <__addsf3+0x2ef>
c0026e5d:	85 db                	test   ebx,ebx
c0026e5f:	0f 84 e2 01 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026e65:	89 d0                	mov    eax,edx
c0026e67:	01 d8                	add    eax,ebx
c0026e69:	0f 89 a9 01 00 00    	jns    c0027018 <__addsf3+0x2ca>
c0026e6f:	e9 9d 01 00 00       	jmp    c0027011 <__addsf3+0x2c3>
c0026e74:	85 d2                	test   edx,edx
c0026e76:	0f 85 cb 01 00 00    	jne    c0027047 <__addsf3+0x2f9>
c0026e7c:	e9 bc 01 00 00       	jmp    c002703d <__addsf3+0x2ef>
c0026e81:	31 c0                	xor    eax,eax
c0026e83:	89 f1                	mov    ecx,esi
c0026e85:	f7 d1                	not    ecx
c0026e87:	84 c9                	test   cl,cl
c0026e89:	0f 84 90 01 00 00    	je     c002701f <__addsf3+0x2d1>
c0026e8f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e92:	d1 e8                	shr    eax,1
c0026e94:	e9 86 01 00 00       	jmp    c002701f <__addsf3+0x2d1>
c0026e99:	85 c0                	test   eax,eax
c0026e9b:	0f 89 7e 01 00 00    	jns    c002701f <__addsf3+0x2d1>
c0026ea1:	46                   	inc    esi
c0026ea2:	89 f2                	mov    edx,esi
c0026ea4:	f7 d2                	not    edx
c0026ea6:	84 d2                	test   dl,dl
c0026ea8:	0f 84 6f 01 00 00    	je     c002701d <__addsf3+0x2cf>
c0026eae:	89 c2                	mov    edx,eax
c0026eb0:	83 e2 01             	and    edx,0x1
c0026eb3:	d1 e8                	shr    eax,1
c0026eb5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026eba:	09 d0                	or     eax,edx
c0026ebc:	e9 5e 01 00 00       	jmp    c002701f <__addsf3+0x2d1>
c0026ec1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026ec5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026ec8:	89 f0                	mov    eax,esi
c0026eca:	0f b6 c0             	movzx  eax,al
c0026ecd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ed0:	29 c1                	sub    ecx,eax
c0026ed2:	85 c9                	test   ecx,ecx
c0026ed4:	7e 55                	jle    c0026f2b <__addsf3+0x1dd>
c0026ed6:	85 c0                	test   eax,eax
c0026ed8:	75 11                	jne    c0026eeb <__addsf3+0x19d>
c0026eda:	85 db                	test   ebx,ebx
c0026edc:	0f 84 65 01 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026ee2:	49                   	dec    ecx
c0026ee3:	75 19                	jne    c0026efe <__addsf3+0x1b0>
c0026ee5:	89 d0                	mov    eax,edx
c0026ee7:	29 d8                	sub    eax,ebx
c0026ee9:	eb 38                	jmp    c0026f23 <__addsf3+0x1d5>
c0026eeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026eee:	f7 d0                	not    eax
c0026ef0:	84 c0                	test   al,al
c0026ef2:	0f 84 4f 01 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026ef8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026efe:	83 f9 1f             	cmp    ecx,0x1f
c0026f01:	0f 8f 40 01 00 00    	jg     c0027047 <__addsf3+0x2f9>
c0026f07:	89 de                	mov    esi,ebx
c0026f09:	d3 ee                	shr    esi,cl
c0026f0b:	b8 20 00 00 00       	mov    eax,0x20
c0026f10:	29 c8                	sub    eax,ecx
c0026f12:	89 c1                	mov    ecx,eax
c0026f14:	d3 e3                	shl    ebx,cl
c0026f16:	31 c0                	xor    eax,eax
c0026f18:	85 db                	test   ebx,ebx
c0026f1a:	0f 95 c0             	setne  al
c0026f1d:	09 f0                	or     eax,esi
c0026f1f:	29 c2                	sub    edx,eax
c0026f21:	89 d0                	mov    eax,edx
c0026f23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f26:	e9 af 00 00 00       	jmp    c0026fda <__addsf3+0x28c>
c0026f2b:	74 5c                	je     c0026f89 <__addsf3+0x23b>
c0026f2d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026f30:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f33:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026f37:	75 14                	jne    c0026f4d <__addsf3+0x1ff>
c0026f39:	85 d2                	test   edx,edx
c0026f3b:	0f 84 06 01 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026f41:	48                   	dec    eax
c0026f42:	75 1b                	jne    c0026f5f <__addsf3+0x211>
c0026f44:	89 d8                	mov    eax,ebx
c0026f46:	29 d0                	sub    eax,edx
c0026f48:	e9 8d 00 00 00       	jmp    c0026fda <__addsf3+0x28c>
c0026f4d:	89 f1                	mov    ecx,esi
c0026f4f:	f7 d1                	not    ecx
c0026f51:	84 c9                	test   cl,cl
c0026f53:	0f 84 ee 00 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026f59:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f5f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f62:	83 f8 1f             	cmp    eax,0x1f
c0026f65:	0f 8f dc 00 00 00    	jg     c0027047 <__addsf3+0x2f9>
c0026f6b:	89 d7                	mov    edi,edx
c0026f6d:	88 c1                	mov    cl,al
c0026f6f:	d3 ef                	shr    edi,cl
c0026f71:	b9 20 00 00 00       	mov    ecx,0x20
c0026f76:	29 c1                	sub    ecx,eax
c0026f78:	d3 e2                	shl    edx,cl
c0026f7a:	31 c0                	xor    eax,eax
c0026f7c:	85 d2                	test   edx,edx
c0026f7e:	0f 95 c0             	setne  al
c0026f81:	09 f8                	or     eax,edi
c0026f83:	29 c3                	sub    ebx,eax
c0026f85:	89 d8                	mov    eax,ebx
c0026f87:	eb 51                	jmp    c0026fda <__addsf3+0x28c>
c0026f89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f8c:	40                   	inc    eax
c0026f8d:	a8 fe                	test   al,0xfe
c0026f8f:	75 3d                	jne    c0026fce <__addsf3+0x280>
c0026f91:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026f95:	0f 85 a7 00 00 00    	jne    c0027042 <__addsf3+0x2f4>
c0026f9b:	85 d2                	test   edx,edx
c0026f9d:	75 12                	jne    c0026fb1 <__addsf3+0x263>
c0026f9f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fa2:	85 db                	test   ebx,ebx
c0026fa4:	0f 85 9d 00 00 00    	jne    c0027047 <__addsf3+0x2f9>
c0026faa:	31 ff                	xor    edi,edi
c0026fac:	e9 96 00 00 00       	jmp    c0027047 <__addsf3+0x2f9>
c0026fb1:	85 db                	test   ebx,ebx
c0026fb3:	0f 84 8e 00 00 00    	je     c0027047 <__addsf3+0x2f9>
c0026fb9:	89 d0                	mov    eax,edx
c0026fbb:	29 d8                	sub    eax,ebx
c0026fbd:	79 06                	jns    c0026fc5 <__addsf3+0x277>
c0026fbf:	89 d8                	mov    eax,ebx
c0026fc1:	29 d0                	sub    eax,edx
c0026fc3:	eb 5a                	jmp    c002701f <__addsf3+0x2d1>
c0026fc5:	bf 00 00 00 00       	mov    edi,0x0
c0026fca:	74 7b                	je     c0027047 <__addsf3+0x2f9>
c0026fcc:	eb 4a                	jmp    c0027018 <__addsf3+0x2ca>
c0026fce:	89 d0                	mov    eax,edx
c0026fd0:	29 d8                	sub    eax,ebx
c0026fd2:	79 12                	jns    c0026fe6 <__addsf3+0x298>
c0026fd4:	89 d8                	mov    eax,ebx
c0026fd6:	29 d0                	sub    eax,edx
c0026fd8:	eb 09                	jmp    c0026fe3 <__addsf3+0x295>
c0026fda:	85 c0                	test   eax,eax
c0026fdc:	79 41                	jns    c002701f <__addsf3+0x2d1>
c0026fde:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fe3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026fe6:	31 f6                	xor    esi,esi
c0026fe8:	85 c0                	test   eax,eax
c0026fea:	74 33                	je     c002701f <__addsf3+0x2d1>
c0026fec:	0f bd c8             	bsr    ecx,eax
c0026fef:	83 f1 1f             	xor    ecx,0x1f
c0026ff2:	d3 e0                	shl    eax,cl
c0026ff4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ff8:	39 ca                	cmp    edx,ecx
c0026ffa:	7f 10                	jg     c002700c <__addsf3+0x2be>
c0026ffc:	29 d1                	sub    ecx,edx
c0026ffe:	41                   	inc    ecx
c0026fff:	d3 e8                	shr    eax,cl
c0027001:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027004:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002700a:	eb 13                	jmp    c002701f <__addsf3+0x2d1>
c002700c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002700f:	29 ce                	sub    esi,ecx
c0027011:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027016:	eb 07                	jmp    c002701f <__addsf3+0x2d1>
c0027018:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002701b:	eb 02                	jmp    c002701f <__addsf3+0x2d1>
c002701d:	31 c0                	xor    eax,eax
c002701f:	89 c2                	mov    edx,eax
c0027021:	c1 ea 08             	shr    edx,0x8
c0027024:	a8 7f                	test   al,0x7f
c0027026:	0f 95 c1             	setne  cl
c0027029:	09 d1                	or     ecx,edx
c002702b:	83 e1 01             	and    ecx,0x1
c002702e:	c1 e8 07             	shr    eax,0x7
c0027031:	21 c8                	and    eax,ecx
c0027033:	c1 e6 17             	shl    esi,0x17
c0027036:	09 d6                	or     esi,edx
c0027038:	8d 3c 30             	lea    edi,[eax+esi*1]
c002703b:	eb 0a                	jmp    c0027047 <__addsf3+0x2f9>
c002703d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027040:	eb 05                	jmp    c0027047 <__addsf3+0x2f9>
c0027042:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027047:	89 f8                	mov    eax,edi
c0027049:	5a                   	pop    edx
c002704a:	59                   	pop    ecx
c002704b:	5b                   	pop    ebx
c002704c:	5e                   	pop    esi
c002704d:	5f                   	pop    edi
c002704e:	5d                   	pop    ebp
c002704f:	c3                   	ret    

c0027050 <__subsf3>:
c0027050:	55                   	push   ebp
c0027051:	89 e5                	mov    ebp,esp
c0027053:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027056:	05 00 00 00 80       	add    eax,0x80000000
c002705b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002705e:	5d                   	pop    ebp
c002705f:	e9 ea fc ff ff       	jmp    c0026d4e <__addsf3>

c0027064 <__negsf2>:
c0027064:	55                   	push   ebp
c0027065:	89 e5                	mov    ebp,esp
c0027067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002706a:	05 00 00 00 80       	add    eax,0x80000000
c002706f:	5d                   	pop    ebp
c0027070:	c3                   	ret    

c0027071 <__mulsf3>:
c0027071:	55                   	push   ebp
c0027072:	89 e5                	mov    ebp,esp
c0027074:	57                   	push   edi
c0027075:	56                   	push   esi
c0027076:	53                   	push   ebx
c0027077:	83 ec 1c             	sub    esp,0x1c
c002707a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002707d:	89 f0                	mov    eax,esi
c002707f:	89 f1                	mov    ecx,esi
c0027081:	c1 f9 17             	sar    ecx,0x17
c0027084:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027087:	c1 e0 08             	shl    eax,0x8
c002708a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002708f:	89 c1                	mov    ecx,eax
c0027091:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027094:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027097:	89 c7                	mov    edi,eax
c0027099:	c1 ff 17             	sar    edi,0x17
c002709c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00270a0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00270a3:	89 f8                	mov    eax,edi
c00270a5:	0f b6 c0             	movzx  eax,al
c00270a8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00270ab:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00270af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00270b2:	42                   	inc    edx
c00270b3:	80 e2 fe             	and    dl,0xfe
c00270b6:	75 7b                	jne    c0027133 <__mulsf3+0xc2>
c00270b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00270bc:	74 54                	je     c0027112 <__mulsf3+0xa1>
c00270be:	85 c9                	test   ecx,ecx
c00270c0:	0f 85 64 01 00 00    	jne    c002722a <__mulsf3+0x1b9>
c00270c6:	8d 57 01             	lea    edx,[edi+0x1]
c00270c9:	80 e2 fe             	and    dl,0xfe
c00270cc:	75 1f                	jne    c00270ed <__mulsf3+0x7c>
c00270ce:	85 c0                	test   eax,eax
c00270d0:	b8 00 00 00 00       	mov    eax,0x0
c00270d5:	74 29                	je     c0027100 <__mulsf3+0x8f>
c00270d7:	53                   	push   ebx
c00270d8:	53                   	push   ebx
c00270d9:	50                   	push   eax
c00270da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270dd:	e8 96 05 00 00       	call   c0027678 <__nesf2>
c00270e2:	83 c4 10             	add    esp,0x10
c00270e5:	85 c0                	test   eax,eax
c00270e7:	0f 85 3a 01 00 00    	jne    c0027227 <__mulsf3+0x1b6>
c00270ed:	85 ff                	test   edi,edi
c00270ef:	0f 89 35 01 00 00    	jns    c002722a <__mulsf3+0x1b9>
c00270f5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00270fb:	e9 2a 01 00 00       	jmp    c002722a <__mulsf3+0x1b9>
c0027100:	51                   	push   ecx
c0027101:	51                   	push   ecx
c0027102:	50                   	push   eax
c0027103:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027106:	e8 6d 05 00 00       	call   c0027678 <__nesf2>
c002710b:	83 c4 10             	add    esp,0x10
c002710e:	85 c0                	test   eax,eax
c0027110:	eb 15                	jmp    c0027127 <__mulsf3+0xb6>
c0027112:	85 c9                	test   ecx,ecx
c0027114:	74 0b                	je     c0027121 <__mulsf3+0xb0>
c0027116:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027119:	01 c9                	add    ecx,ecx
c002711b:	78 16                	js     c0027133 <__mulsf3+0xc2>
c002711d:	89 d3                	mov    ebx,edx
c002711f:	eb f5                	jmp    c0027116 <__mulsf3+0xa5>
c0027121:	89 f8                	mov    eax,edi
c0027123:	f7 d0                	not    eax
c0027125:	84 c0                	test   al,al
c0027127:	75 c4                	jne    c00270ed <__mulsf3+0x7c>
c0027129:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002712e:	e9 f7 00 00 00       	jmp    c002722a <__mulsf3+0x1b9>
c0027133:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027136:	c1 e6 08             	shl    esi,0x8
c0027139:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002713f:	8d 57 01             	lea    edx,[edi+0x1]
c0027142:	80 e2 fe             	and    dl,0xfe
c0027145:	75 63                	jne    c00271aa <__mulsf3+0x139>
c0027147:	85 c0                	test   eax,eax
c0027149:	74 2f                	je     c002717a <__mulsf3+0x109>
c002714b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002714f:	0f 89 d2 00 00 00    	jns    c0027227 <__mulsf3+0x1b6>
c0027155:	52                   	push   edx
c0027156:	52                   	push   edx
c0027157:	6a 00                	push   0x0
c0027159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002715c:	e8 dc 04 00 00       	call   c002763d <__eqsf2>
c0027161:	83 c4 10             	add    esp,0x10
c0027164:	85 c0                	test   eax,eax
c0027166:	0f 85 bb 00 00 00    	jne    c0027227 <__mulsf3+0x1b6>
c002716c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002716f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027175:	e9 b0 00 00 00       	jmp    c002722a <__mulsf3+0x1b9>
c002717a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002717d:	50                   	push   eax
c002717e:	50                   	push   eax
c002717f:	6a 00                	push   0x0
c0027181:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027184:	e8 b4 04 00 00       	call   c002763d <__eqsf2>
c0027189:	83 c4 10             	add    esp,0x10
c002718c:	85 c0                	test   eax,eax
c002718e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027191:	75 0c                	jne    c002719f <__mulsf3+0x12e>
c0027193:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027197:	0f 89 8a 00 00 00    	jns    c0027227 <__mulsf3+0x1b6>
c002719d:	eb cd                	jmp    c002716c <__mulsf3+0xfb>
c002719f:	8d 43 ff             	lea    eax,[ebx-0x1]
c00271a2:	01 f6                	add    esi,esi
c00271a4:	78 04                	js     c00271aa <__mulsf3+0x139>
c00271a6:	89 c3                	mov    ebx,eax
c00271a8:	eb f5                	jmp    c002719f <__mulsf3+0x12e>
c00271aa:	89 c8                	mov    eax,ecx
c00271ac:	0d 00 00 00 80       	or     eax,0x80000000
c00271b1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00271b7:	f7 e6                	mul    esi
c00271b9:	85 c0                	test   eax,eax
c00271bb:	0f 95 c0             	setne  al
c00271be:	0f b6 c0             	movzx  eax,al
c00271c1:	09 c2                	or     edx,eax
c00271c3:	78 03                	js     c00271c8 <__mulsf3+0x157>
c00271c5:	01 d2                	add    edx,edx
c00271c7:	4b                   	dec    ebx
c00271c8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00271ce:	7f 22                	jg     c00271f2 <__mulsf3+0x181>
c00271d0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00271d6:	85 db                	test   ebx,ebx
c00271d8:	7f 23                	jg     c00271fd <__mulsf3+0x18c>
c00271da:	83 fb e9             	cmp    ebx,0xffffffe9
c00271dd:	7c 1a                	jl     c00271f9 <__mulsf3+0x188>
c00271df:	81 ca 00 00 00 80    	or     edx,0x80000000
c00271e5:	b9 01 00 00 00       	mov    ecx,0x1
c00271ea:	29 d9                	sub    ecx,ebx
c00271ec:	d3 ea                	shr    edx,cl
c00271ee:	31 db                	xor    ebx,ebx
c00271f0:	eb 0b                	jmp    c00271fd <__mulsf3+0x18c>
c00271f2:	bb ff 00 00 00       	mov    ebx,0xff
c00271f7:	eb 02                	jmp    c00271fb <__mulsf3+0x18a>
c00271f9:	31 db                	xor    ebx,ebx
c00271fb:	31 d2                	xor    edx,edx
c00271fd:	89 d0                	mov    eax,edx
c00271ff:	c1 e8 08             	shr    eax,0x8
c0027202:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027205:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002720b:	09 fb                	or     ebx,edi
c002720d:	c1 e3 17             	shl    ebx,0x17
c0027210:	09 c3                	or     ebx,eax
c0027212:	f6 c2 7f             	test   dl,0x7f
c0027215:	0f 95 c1             	setne  cl
c0027218:	09 c8                	or     eax,ecx
c002721a:	83 e0 01             	and    eax,0x1
c002721d:	c1 ea 07             	shr    edx,0x7
c0027220:	21 c2                	and    edx,eax
c0027222:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027225:	eb 03                	jmp    c002722a <__mulsf3+0x1b9>
c0027227:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002722a:	89 f0                	mov    eax,esi
c002722c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002722f:	5b                   	pop    ebx
c0027230:	5e                   	pop    esi
c0027231:	5f                   	pop    edi
c0027232:	5d                   	pop    ebp
c0027233:	c3                   	ret    

c0027234 <__divsf3>:
c0027234:	55                   	push   ebp
c0027235:	89 e5                	mov    ebp,esp
c0027237:	57                   	push   edi
c0027238:	56                   	push   esi
c0027239:	53                   	push   ebx
c002723a:	83 ec 1c             	sub    esp,0x1c
c002723d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027240:	89 d8                	mov    eax,ebx
c0027242:	89 d9                	mov    ecx,ebx
c0027244:	c1 f9 17             	sar    ecx,0x17
c0027247:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002724a:	c1 e0 08             	shl    eax,0x8
c002724d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027252:	89 c1                	mov    ecx,eax
c0027254:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027257:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002725a:	89 c7                	mov    edi,eax
c002725c:	c1 ff 17             	sar    edi,0x17
c002725f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027263:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027266:	89 f8                	mov    eax,edi
c0027268:	0f b6 c0             	movzx  eax,al
c002726b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002726e:	29 c6                	sub    esi,eax
c0027270:	83 c6 7f             	add    esi,0x7f
c0027273:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027276:	42                   	inc    edx
c0027277:	80 e2 fe             	and    dl,0xfe
c002727a:	0f 85 9c 00 00 00    	jne    c002731c <__divsf3+0xe8>
c0027280:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027284:	74 33                	je     c00272b9 <__divsf3+0x85>
c0027286:	85 c9                	test   ecx,ecx
c0027288:	0f 85 c7 01 00 00    	jne    c0027455 <__divsf3+0x221>
c002728e:	8d 57 01             	lea    edx,[edi+0x1]
c0027291:	80 e2 fe             	and    dl,0xfe
c0027294:	75 2f                	jne    c00272c5 <__divsf3+0x91>
c0027296:	85 c0                	test   eax,eax
c0027298:	74 2b                	je     c00272c5 <__divsf3+0x91>
c002729a:	51                   	push   ecx
c002729b:	51                   	push   ecx
c002729c:	6a 00                	push   0x0
c002729e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272a1:	e8 d2 03 00 00       	call   c0027678 <__nesf2>
c00272a6:	83 c4 10             	add    esp,0x10
c00272a9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00272ac:	85 c0                	test   eax,eax
c00272ae:	0f 85 a1 01 00 00    	jne    c0027455 <__divsf3+0x221>
c00272b4:	e9 92 01 00 00       	jmp    c002744b <__divsf3+0x217>
c00272b9:	85 c9                	test   ecx,ecx
c00272bb:	75 1b                	jne    c00272d8 <__divsf3+0xa4>
c00272bd:	8d 57 01             	lea    edx,[edi+0x1]
c00272c0:	80 e2 fe             	and    dl,0xfe
c00272c3:	74 1e                	je     c00272e3 <__divsf3+0xaf>
c00272c5:	85 ff                	test   edi,edi
c00272c7:	0f 89 88 01 00 00    	jns    c0027455 <__divsf3+0x221>
c00272cd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00272d3:	e9 7d 01 00 00       	jmp    c0027455 <__divsf3+0x221>
c00272d8:	8d 56 ff             	lea    edx,[esi-0x1]
c00272db:	01 c9                	add    ecx,ecx
c00272dd:	78 3d                	js     c002731c <__divsf3+0xe8>
c00272df:	89 d6                	mov    esi,edx
c00272e1:	eb f5                	jmp    c00272d8 <__divsf3+0xa4>
c00272e3:	85 c0                	test   eax,eax
c00272e5:	b8 00 00 00 00       	mov    eax,0x0
c00272ea:	74 18                	je     c0027304 <__divsf3+0xd0>
c00272ec:	52                   	push   edx
c00272ed:	52                   	push   edx
c00272ee:	50                   	push   eax
c00272ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272f2:	e8 81 03 00 00       	call   c0027678 <__nesf2>
c00272f7:	83 c4 10             	add    esp,0x10
c00272fa:	85 c0                	test   eax,eax
c00272fc:	0f 85 50 01 00 00    	jne    c0027452 <__divsf3+0x21e>
c0027302:	eb c1                	jmp    c00272c5 <__divsf3+0x91>
c0027304:	56                   	push   esi
c0027305:	56                   	push   esi
c0027306:	50                   	push   eax
c0027307:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002730a:	e8 69 03 00 00       	call   c0027678 <__nesf2>
c002730f:	83 c4 10             	add    esp,0x10
c0027312:	85 c0                	test   eax,eax
c0027314:	0f 84 31 01 00 00    	je     c002744b <__divsf3+0x217>
c002731a:	eb a9                	jmp    c00272c5 <__divsf3+0x91>
c002731c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002731f:	c1 e3 08             	shl    ebx,0x8
c0027322:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027328:	8d 57 01             	lea    edx,[edi+0x1]
c002732b:	80 e2 fe             	and    dl,0xfe
c002732e:	75 71                	jne    c00273a1 <__divsf3+0x16d>
c0027330:	85 c0                	test   eax,eax
c0027332:	ba 00 00 00 00       	mov    edx,0x0
c0027337:	74 2f                	je     c0027368 <__divsf3+0x134>
c0027339:	51                   	push   ecx
c002733a:	51                   	push   ecx
c002733b:	52                   	push   edx
c002733c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002733f:	e8 f9 02 00 00       	call   c002763d <__eqsf2>
c0027344:	83 c4 10             	add    esp,0x10
c0027347:	85 c0                	test   eax,eax
c0027349:	0f 85 03 01 00 00    	jne    c0027452 <__divsf3+0x21e>
c002734f:	31 d2                	xor    edx,edx
c0027351:	89 d3                	mov    ebx,edx
c0027353:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027356:	31 f8                	xor    eax,edi
c0027358:	0f 89 f7 00 00 00    	jns    c0027455 <__divsf3+0x221>
c002735e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027363:	e9 ed 00 00 00       	jmp    c0027455 <__divsf3+0x221>
c0027368:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002736b:	50                   	push   eax
c002736c:	50                   	push   eax
c002736d:	52                   	push   edx
c002736e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027371:	e8 c7 02 00 00       	call   c002763d <__eqsf2>
c0027376:	83 c4 10             	add    esp,0x10
c0027379:	85 c0                	test   eax,eax
c002737b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002737e:	75 16                	jne    c0027396 <__divsf3+0x162>
c0027380:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027383:	31 fb                	xor    ebx,edi
c0027385:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002738b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027391:	e9 bf 00 00 00       	jmp    c0027455 <__divsf3+0x221>
c0027396:	8d 46 01             	lea    eax,[esi+0x1]
c0027399:	01 db                	add    ebx,ebx
c002739b:	78 04                	js     c00273a1 <__divsf3+0x16d>
c002739d:	89 c6                	mov    esi,eax
c002739f:	eb f5                	jmp    c0027396 <__divsf3+0x162>
c00273a1:	89 c8                	mov    eax,ecx
c00273a3:	0d 00 00 00 80       	or     eax,0x80000000
c00273a8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00273ae:	31 d2                	xor    edx,edx
c00273b0:	39 d8                	cmp    eax,ebx
c00273b2:	72 07                	jb     c00273bb <__divsf3+0x187>
c00273b4:	29 d8                	sub    eax,ebx
c00273b6:	ba 01 00 00 00       	mov    edx,0x1
c00273bb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00273c2:	01 d2                	add    edx,edx
c00273c4:	89 c1                	mov    ecx,eax
c00273c6:	01 c0                	add    eax,eax
c00273c8:	85 c9                	test   ecx,ecx
c00273ca:	78 04                	js     c00273d0 <__divsf3+0x19c>
c00273cc:	39 c3                	cmp    ebx,eax
c00273ce:	77 05                	ja     c00273d5 <__divsf3+0x1a1>
c00273d0:	29 d8                	sub    eax,ebx
c00273d2:	83 ca 01             	or     edx,0x1
c00273d5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00273d8:	75 e8                	jne    c00273c2 <__divsf3+0x18e>
c00273da:	85 c0                	test   eax,eax
c00273dc:	0f 95 c0             	setne  al
c00273df:	0f b6 c0             	movzx  eax,al
c00273e2:	c1 e2 06             	shl    edx,0x6
c00273e5:	09 c2                	or     edx,eax
c00273e7:	78 03                	js     c00273ec <__divsf3+0x1b8>
c00273e9:	01 d2                	add    edx,edx
c00273eb:	4e                   	dec    esi
c00273ec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00273f2:	7f 22                	jg     c0027416 <__divsf3+0x1e2>
c00273f4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00273fa:	85 f6                	test   esi,esi
c00273fc:	7f 23                	jg     c0027421 <__divsf3+0x1ed>
c00273fe:	83 fe e9             	cmp    esi,0xffffffe9
c0027401:	7c 1a                	jl     c002741d <__divsf3+0x1e9>
c0027403:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027409:	b9 01 00 00 00       	mov    ecx,0x1
c002740e:	29 f1                	sub    ecx,esi
c0027410:	d3 ea                	shr    edx,cl
c0027412:	31 f6                	xor    esi,esi
c0027414:	eb 0b                	jmp    c0027421 <__divsf3+0x1ed>
c0027416:	be ff 00 00 00       	mov    esi,0xff
c002741b:	eb 02                	jmp    c002741f <__divsf3+0x1eb>
c002741d:	31 f6                	xor    esi,esi
c002741f:	31 d2                	xor    edx,edx
c0027421:	89 d0                	mov    eax,edx
c0027423:	c1 e8 08             	shr    eax,0x8
c0027426:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027429:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002742f:	09 fe                	or     esi,edi
c0027431:	c1 e6 17             	shl    esi,0x17
c0027434:	09 c6                	or     esi,eax
c0027436:	f6 c2 7f             	test   dl,0x7f
c0027439:	0f 95 c1             	setne  cl
c002743c:	09 c8                	or     eax,ecx
c002743e:	83 e0 01             	and    eax,0x1
c0027441:	c1 ea 07             	shr    edx,0x7
c0027444:	21 c2                	and    edx,eax
c0027446:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027449:	eb 0a                	jmp    c0027455 <__divsf3+0x221>
c002744b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027450:	eb 03                	jmp    c0027455 <__divsf3+0x221>
c0027452:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027455:	89 d8                	mov    eax,ebx
c0027457:	8d 65 f4             	lea    esp,[ebp-0xc]
c002745a:	5b                   	pop    ebx
c002745b:	5e                   	pop    esi
c002745c:	5f                   	pop    edi
c002745d:	5d                   	pop    ebp
c002745e:	c3                   	ret    

c002745f <__floatsisf>:
c002745f:	55                   	push   ebp
c0027460:	89 e5                	mov    ebp,esp
c0027462:	53                   	push   ebx
c0027463:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027466:	85 d2                	test   edx,edx
c0027468:	7e 2b                	jle    c0027495 <__floatsisf+0x36>
c002746a:	0f bd ca             	bsr    ecx,edx
c002746d:	83 f1 1f             	xor    ecx,0x1f
c0027470:	d3 e2                	shl    edx,cl
c0027472:	89 d0                	mov    eax,edx
c0027474:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027479:	89 c3                	mov    ebx,eax
c002747b:	c1 eb 08             	shr    ebx,0x8
c002747e:	80 e2 7f             	and    dl,0x7f
c0027481:	0f 95 c2             	setne  dl
c0027484:	09 da                	or     edx,ebx
c0027486:	83 e2 01             	and    edx,0x1
c0027489:	c1 e8 07             	shr    eax,0x7
c002748c:	21 c2                	and    edx,eax
c002748e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027493:	eb 32                	jmp    c00274c7 <__floatsisf+0x68>
c0027495:	b8 00 00 00 00       	mov    eax,0x0
c002749a:	74 34                	je     c00274d0 <__floatsisf+0x71>
c002749c:	f7 da                	neg    edx
c002749e:	0f bd ca             	bsr    ecx,edx
c00274a1:	83 f1 1f             	xor    ecx,0x1f
c00274a4:	d3 e2                	shl    edx,cl
c00274a6:	89 d0                	mov    eax,edx
c00274a8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00274ad:	89 c3                	mov    ebx,eax
c00274af:	c1 eb 08             	shr    ebx,0x8
c00274b2:	80 e2 7f             	and    dl,0x7f
c00274b5:	0f 95 c2             	setne  dl
c00274b8:	09 da                	or     edx,ebx
c00274ba:	83 e2 01             	and    edx,0x1
c00274bd:	c1 e8 07             	shr    eax,0x7
c00274c0:	21 c2                	and    edx,eax
c00274c2:	b8 9e 01 00 00       	mov    eax,0x19e
c00274c7:	29 c8                	sub    eax,ecx
c00274c9:	c1 e0 17             	shl    eax,0x17
c00274cc:	09 d8                	or     eax,ebx
c00274ce:	01 d0                	add    eax,edx
c00274d0:	5b                   	pop    ebx
c00274d1:	5d                   	pop    ebp
c00274d2:	c3                   	ret    

c00274d3 <__floatunsisf>:
c00274d3:	55                   	push   ebp
c00274d4:	89 e5                	mov    ebp,esp
c00274d6:	53                   	push   ebx
c00274d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274da:	31 c0                	xor    eax,eax
c00274dc:	85 d2                	test   edx,edx
c00274de:	74 32                	je     c0027512 <__floatunsisf+0x3f>
c00274e0:	0f bd ca             	bsr    ecx,edx
c00274e3:	83 f1 1f             	xor    ecx,0x1f
c00274e6:	d3 e2                	shl    edx,cl
c00274e8:	89 d0                	mov    eax,edx
c00274ea:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00274ef:	89 c3                	mov    ebx,eax
c00274f1:	c1 eb 08             	shr    ebx,0x8
c00274f4:	80 e2 7f             	and    dl,0x7f
c00274f7:	0f 95 c2             	setne  dl
c00274fa:	09 da                	or     edx,ebx
c00274fc:	83 e2 01             	and    edx,0x1
c00274ff:	c1 e8 07             	shr    eax,0x7
c0027502:	21 c2                	and    edx,eax
c0027504:	b8 9e 00 00 00       	mov    eax,0x9e
c0027509:	29 c8                	sub    eax,ecx
c002750b:	c1 e0 17             	shl    eax,0x17
c002750e:	09 d8                	or     eax,ebx
c0027510:	01 d0                	add    eax,edx
c0027512:	5b                   	pop    ebx
c0027513:	5d                   	pop    ebp
c0027514:	c3                   	ret    

c0027515 <__fixsfsi>:
c0027515:	55                   	push   ebp
c0027516:	89 e5                	mov    ebp,esp
c0027518:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002751b:	89 d1                	mov    ecx,edx
c002751d:	c1 e1 08             	shl    ecx,0x8
c0027520:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027526:	c1 fa 17             	sar    edx,0x17
c0027529:	78 1c                	js     c0027547 <__fixsfsi+0x32>
c002752b:	83 ea 7f             	sub    edx,0x7f
c002752e:	31 c0                	xor    eax,eax
c0027530:	83 fa 1e             	cmp    edx,0x1e
c0027533:	77 40                	ja     c0027575 <__fixsfsi+0x60>
c0027535:	89 c8                	mov    eax,ecx
c0027537:	0d 00 00 00 80       	or     eax,0x80000000
c002753c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027541:	29 d1                	sub    ecx,edx
c0027543:	d3 e8                	shr    eax,cl
c0027545:	eb 2e                	jmp    c0027575 <__fixsfsi+0x60>
c0027547:	31 c0                	xor    eax,eax
c0027549:	81 c2 81 00 00 00    	add    edx,0x81
c002754f:	78 24                	js     c0027575 <__fixsfsi+0x60>
c0027551:	83 fa 1e             	cmp    edx,0x1e
c0027554:	7e 09                	jle    c002755f <__fixsfsi+0x4a>
c0027556:	83 fa 1f             	cmp    edx,0x1f
c0027559:	75 18                	jne    c0027573 <__fixsfsi+0x5e>
c002755b:	85 c9                	test   ecx,ecx
c002755d:	75 14                	jne    c0027573 <__fixsfsi+0x5e>
c002755f:	89 c8                	mov    eax,ecx
c0027561:	0d 00 00 00 80       	or     eax,0x80000000
c0027566:	b9 1f 00 00 00       	mov    ecx,0x1f
c002756b:	29 d1                	sub    ecx,edx
c002756d:	d3 e8                	shr    eax,cl
c002756f:	f7 d8                	neg    eax
c0027571:	eb 02                	jmp    c0027575 <__fixsfsi+0x60>
c0027573:	31 c0                	xor    eax,eax
c0027575:	5d                   	pop    ebp
c0027576:	c3                   	ret    

c0027577 <__fixunssfsi>:
c0027577:	55                   	push   ebp
c0027578:	89 e5                	mov    ebp,esp
c002757a:	53                   	push   ebx
c002757b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002757e:	89 d3                	mov    ebx,edx
c0027580:	c1 fb 17             	sar    ebx,0x17
c0027583:	83 eb 7f             	sub    ebx,0x7f
c0027586:	31 c0                	xor    eax,eax
c0027588:	83 fb 1f             	cmp    ebx,0x1f
c002758b:	77 18                	ja     c00275a5 <__fixunssfsi+0x2e>
c002758d:	89 d0                	mov    eax,edx
c002758f:	c1 e0 08             	shl    eax,0x8
c0027592:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027597:	0d 00 00 00 80       	or     eax,0x80000000
c002759c:	b9 1f 00 00 00       	mov    ecx,0x1f
c00275a1:	29 d9                	sub    ecx,ebx
c00275a3:	d3 e8                	shr    eax,cl
c00275a5:	5b                   	pop    ebx
c00275a6:	5d                   	pop    ebp
c00275a7:	c3                   	ret    

c00275a8 <__cmpsf2>:
c00275a8:	55                   	push   ebp
c00275a9:	89 e5                	mov    ebp,esp
c00275ab:	57                   	push   edi
c00275ac:	56                   	push   esi
c00275ad:	53                   	push   ebx
c00275ae:	83 ec 24             	sub    esp,0x24
c00275b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275b7:	e8 4f 10 00 00       	call   c002860b <__truncdfsf2>
c00275bc:	5a                   	pop    edx
c00275bd:	59                   	pop    ecx
c00275be:	89 c3                	mov    ebx,eax
c00275c0:	c1 e8 17             	shr    eax,0x17
c00275c3:	0f b6 f0             	movzx  esi,al
c00275c6:	89 d8                	mov    eax,ebx
c00275c8:	c1 e8 1f             	shr    eax,0x1f
c00275cb:	31 c6                	xor    esi,eax
c00275cd:	c1 e3 08             	shl    ebx,0x8
c00275d0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00275d3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00275d6:	e8 30 10 00 00       	call   c002860b <__truncdfsf2>
c00275db:	83 c4 10             	add    esp,0x10
c00275de:	89 c1                	mov    ecx,eax
c00275e0:	c1 e9 17             	shr    ecx,0x17
c00275e3:	0f b6 c9             	movzx  ecx,cl
c00275e6:	89 c7                	mov    edi,eax
c00275e8:	c1 ef 1f             	shr    edi,0x1f
c00275eb:	89 ca                	mov    edx,ecx
c00275ed:	31 fa                	xor    edx,edi
c00275ef:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00275f2:	c1 e0 08             	shl    eax,0x8
c00275f5:	89 c2                	mov    edx,eax
c00275f7:	89 d8                	mov    eax,ebx
c00275f9:	09 d0                	or     eax,edx
c00275fb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027600:	09 f0                	or     eax,esi
c0027602:	75 08                	jne    c002760c <__cmpsf2+0x64>
c0027604:	31 c0                	xor    eax,eax
c0027606:	39 f9                	cmp    ecx,edi
c0027608:	75 0c                	jne    c0027616 <__cmpsf2+0x6e>
c002760a:	eb 29                	jmp    c0027635 <__cmpsf2+0x8d>
c002760c:	b8 01 00 00 00       	mov    eax,0x1
c0027611:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027614:	7f 1f                	jg     c0027635 <__cmpsf2+0x8d>
c0027616:	83 c8 ff             	or     eax,0xffffffff
c0027619:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002761c:	7c 17                	jl     c0027635 <__cmpsf2+0x8d>
c002761e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027624:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002762a:	b8 01 00 00 00       	mov    eax,0x1
c002762f:	39 d3                	cmp    ebx,edx
c0027631:	77 02                	ja     c0027635 <__cmpsf2+0x8d>
c0027633:	19 c0                	sbb    eax,eax
c0027635:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027638:	5b                   	pop    ebx
c0027639:	5e                   	pop    esi
c002763a:	5f                   	pop    edi
c002763b:	5d                   	pop    ebp
c002763c:	c3                   	ret    

c002763d <__eqsf2>:
c002763d:	55                   	push   ebp
c002763e:	89 e5                	mov    ebp,esp
c0027640:	83 ec 24             	sub    esp,0x24
c0027643:	6a 01                	push   0x1
c0027645:	83 ec 0c             	sub    esp,0xc
c0027648:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002764b:	e8 df 10 00 00       	call   c002872f <__extendsfdf2>
c0027650:	83 c4 10             	add    esp,0x10
c0027653:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027656:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027659:	52                   	push   edx
c002765a:	50                   	push   eax
c002765b:	50                   	push   eax
c002765c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002765f:	e8 cb 10 00 00       	call   c002872f <__extendsfdf2>
c0027664:	59                   	pop    ecx
c0027665:	59                   	pop    ecx
c0027666:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027669:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002766c:	52                   	push   edx
c002766d:	50                   	push   eax
c002766e:	e8 35 ff ff ff       	call   c00275a8 <__cmpsf2>
c0027673:	83 c4 20             	add    esp,0x20
c0027676:	c9                   	leave  
c0027677:	c3                   	ret    

c0027678 <__nesf2>:
c0027678:	eb c3                	jmp    c002763d <__eqsf2>

c002767a <__gtsf2>:
c002767a:	55                   	push   ebp
c002767b:	89 e5                	mov    ebp,esp
c002767d:	83 ec 24             	sub    esp,0x24
c0027680:	6a ff                	push   0xffffffff
c0027682:	83 ec 0c             	sub    esp,0xc
c0027685:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027688:	e8 a2 10 00 00       	call   c002872f <__extendsfdf2>
c002768d:	83 c4 10             	add    esp,0x10
c0027690:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027693:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027696:	52                   	push   edx
c0027697:	50                   	push   eax
c0027698:	50                   	push   eax
c0027699:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002769c:	e8 8e 10 00 00       	call   c002872f <__extendsfdf2>
c00276a1:	59                   	pop    ecx
c00276a2:	59                   	pop    ecx
c00276a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00276a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00276a9:	52                   	push   edx
c00276aa:	50                   	push   eax
c00276ab:	e8 f8 fe ff ff       	call   c00275a8 <__cmpsf2>
c00276b0:	83 c4 20             	add    esp,0x20
c00276b3:	c9                   	leave  
c00276b4:	c3                   	ret    

c00276b5 <__gesf2>:
c00276b5:	eb c3                	jmp    c002767a <__gtsf2>

c00276b7 <__ltsf2>:
c00276b7:	eb 84                	jmp    c002763d <__eqsf2>

c00276b9 <__lesf2>:
c00276b9:	eb 82                	jmp    c002763d <__eqsf2>

c00276bb <__adddf3>:
c00276bb:	55                   	push   ebp
c00276bc:	89 e5                	mov    ebp,esp
c00276be:	57                   	push   edi
c00276bf:	56                   	push   esi
c00276c0:	53                   	push   ebx
c00276c1:	83 ec 24             	sub    esp,0x24
c00276c4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00276c7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00276ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00276cd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00276d0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00276d3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00276d6:	89 c8                	mov    eax,ecx
c00276d8:	89 ce                	mov    esi,ecx
c00276da:	c1 fe 14             	sar    esi,0x14
c00276dd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00276e0:	89 fb                	mov    ebx,edi
c00276e2:	89 fa                	mov    edx,edi
c00276e4:	c1 e2 0b             	shl    edx,0xb
c00276e7:	c1 e0 0b             	shl    eax,0xb
c00276ea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00276ef:	c1 eb 15             	shr    ebx,0x15
c00276f2:	09 d8                	or     eax,ebx
c00276f4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00276f7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00276fa:	c1 fe 14             	sar    esi,0x14
c00276fd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027700:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027703:	89 f3                	mov    ebx,esi
c0027705:	c1 e3 0b             	shl    ebx,0xb
c0027708:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002770b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002770e:	c1 e3 0b             	shl    ebx,0xb
c0027711:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027717:	c1 ee 15             	shr    esi,0x15
c002771a:	09 f3                	or     ebx,esi
c002771c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002771f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027722:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027725:	0f 88 5f 02 00 00    	js     c002798a <__adddf3+0x2cf>
c002772b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002772e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027731:	85 db                	test   ebx,ebx
c0027733:	0f 8e c7 00 00 00    	jle    c0027800 <__adddf3+0x145>
c0027739:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027740:	75 1a                	jne    c002775c <__adddf3+0xa1>
c0027742:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027745:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027748:	0f 84 b2 05 00 00    	je     c0027d00 <__adddf3+0x645>
c002774e:	4b                   	dec    ebx
c002774f:	75 23                	jne    c0027774 <__adddf3+0xb9>
c0027751:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027754:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027757:	e9 99 00 00 00       	jmp    c00277f5 <__adddf3+0x13a>
c002775c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002775f:	f7 d6                	not    esi
c0027761:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027767:	0f 84 93 05 00 00    	je     c0027d00 <__adddf3+0x645>
c002776d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027774:	83 fb 1f             	cmp    ebx,0x1f
c0027777:	7e 42                	jle    c00277bb <__adddf3+0x100>
c0027779:	83 fb 3f             	cmp    ebx,0x3f
c002777c:	0f 8f 7e 05 00 00    	jg     c0027d00 <__adddf3+0x645>
c0027782:	83 e3 1f             	and    ebx,0x1f
c0027785:	89 d9                	mov    ecx,ebx
c0027787:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002778a:	d3 ef                	shr    edi,cl
c002778c:	31 db                	xor    ebx,ebx
c002778e:	85 c9                	test   ecx,ecx
c0027790:	74 15                	je     c00277a7 <__adddf3+0xec>
c0027792:	be 20 00 00 00       	mov    esi,0x20
c0027797:	29 ce                	sub    esi,ecx
c0027799:	89 f1                	mov    ecx,esi
c002779b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002779e:	d3 e6                	shl    esi,cl
c00277a0:	31 db                	xor    ebx,ebx
c00277a2:	85 f6                	test   esi,esi
c00277a4:	0f 95 c3             	setne  bl
c00277a7:	31 c9                	xor    ecx,ecx
c00277a9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00277ad:	0f 95 c1             	setne  cl
c00277b0:	09 cf                	or     edi,ecx
c00277b2:	09 fb                	or     ebx,edi
c00277b4:	01 da                	add    edx,ebx
c00277b6:	83 d0 00             	adc    eax,0x0
c00277b9:	eb 3a                	jmp    c00277f5 <__adddf3+0x13a>
c00277bb:	bf 20 00 00 00       	mov    edi,0x20
c00277c0:	29 df                	sub    edi,ebx
c00277c2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277c8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00277cb:	d3 e6                	shl    esi,cl
c00277cd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277d0:	88 d9                	mov    cl,bl
c00277d2:	d3 ef                	shr    edi,cl
c00277d4:	09 fe                	or     esi,edi
c00277d6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277d9:	88 d9                	mov    cl,bl
c00277db:	d3 ef                	shr    edi,cl
c00277dd:	89 fb                	mov    ebx,edi
c00277df:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00277e2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00277e5:	d3 e7                	shl    edi,cl
c00277e7:	85 ff                	test   edi,edi
c00277e9:	0f 95 c1             	setne  cl
c00277ec:	0f b6 c9             	movzx  ecx,cl
c00277ef:	09 ce                	or     esi,ecx
c00277f1:	01 f2                	add    edx,esi
c00277f3:	11 d8                	adc    eax,ebx
c00277f5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277f8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277fb:	e9 52 01 00 00       	jmp    c0027952 <__adddf3+0x297>
c0027800:	0f 84 d5 00 00 00    	je     c00278db <__adddf3+0x220>
c0027806:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027809:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002780c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002780f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027812:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027819:	75 20                	jne    c002783b <__adddf3+0x180>
c002781b:	89 d6                	mov    esi,edx
c002781d:	09 c6                	or     esi,eax
c002781f:	0f 84 db 04 00 00    	je     c0027d00 <__adddf3+0x645>
c0027825:	4b                   	dec    ebx
c0027826:	75 29                	jne    c0027851 <__adddf3+0x196>
c0027828:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002782b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002782e:	01 d1                	add    ecx,edx
c0027830:	11 c6                	adc    esi,eax
c0027832:	89 f0                	mov    eax,esi
c0027834:	89 ca                	mov    edx,ecx
c0027836:	e9 17 01 00 00       	jmp    c0027952 <__adddf3+0x297>
c002783b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002783e:	f7 d6                	not    esi
c0027840:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027846:	0f 84 b4 04 00 00    	je     c0027d00 <__adddf3+0x645>
c002784c:	0d 00 00 00 80       	or     eax,0x80000000
c0027851:	83 fb 1f             	cmp    ebx,0x1f
c0027854:	7e 48                	jle    c002789e <__adddf3+0x1e3>
c0027856:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027859:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002785c:	83 fb 3f             	cmp    ebx,0x3f
c002785f:	0f 8f 9b 04 00 00    	jg     c0027d00 <__adddf3+0x645>
c0027865:	83 e3 1f             	and    ebx,0x1f
c0027868:	89 d9                	mov    ecx,ebx
c002786a:	89 c7                	mov    edi,eax
c002786c:	d3 ef                	shr    edi,cl
c002786e:	31 db                	xor    ebx,ebx
c0027870:	85 c9                	test   ecx,ecx
c0027872:	74 12                	je     c0027886 <__adddf3+0x1cb>
c0027874:	be 20 00 00 00       	mov    esi,0x20
c0027879:	29 ce                	sub    esi,ecx
c002787b:	89 f1                	mov    ecx,esi
c002787d:	d3 e0                	shl    eax,cl
c002787f:	31 db                	xor    ebx,ebx
c0027881:	85 c0                	test   eax,eax
c0027883:	0f 95 c3             	setne  bl
c0027886:	31 c0                	xor    eax,eax
c0027888:	85 d2                	test   edx,edx
c002788a:	0f 95 c0             	setne  al
c002788d:	09 c7                	or     edi,eax
c002788f:	09 fb                	or     ebx,edi
c0027891:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027894:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027897:	01 da                	add    edx,ebx
c0027899:	83 d6 00             	adc    esi,0x0
c002789c:	eb 39                	jmp    c00278d7 <__adddf3+0x21c>
c002789e:	be 20 00 00 00       	mov    esi,0x20
c00278a3:	29 de                	sub    esi,ebx
c00278a5:	89 c7                	mov    edi,eax
c00278a7:	89 f1                	mov    ecx,esi
c00278a9:	d3 e7                	shl    edi,cl
c00278ab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00278ae:	89 d7                	mov    edi,edx
c00278b0:	88 d9                	mov    cl,bl
c00278b2:	d3 ef                	shr    edi,cl
c00278b4:	89 f9                	mov    ecx,edi
c00278b6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278b9:	09 cf                	or     edi,ecx
c00278bb:	88 d9                	mov    cl,bl
c00278bd:	d3 e8                	shr    eax,cl
c00278bf:	89 f1                	mov    ecx,esi
c00278c1:	d3 e2                	shl    edx,cl
c00278c3:	85 d2                	test   edx,edx
c00278c5:	0f 95 c2             	setne  dl
c00278c8:	0f b6 d2             	movzx  edx,dl
c00278cb:	09 d7                	or     edi,edx
c00278cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278d0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278d3:	01 fa                	add    edx,edi
c00278d5:	11 c6                	adc    esi,eax
c00278d7:	89 f0                	mov    eax,esi
c00278d9:	eb 77                	jmp    c0027952 <__adddf3+0x297>
c00278db:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278de:	46                   	inc    esi
c00278df:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00278e2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00278e8:	75 41                	jne    c002792b <__adddf3+0x270>
c00278ea:	89 d3                	mov    ebx,edx
c00278ec:	09 c3                	or     ebx,eax
c00278ee:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00278f5:	75 27                	jne    c002791e <__adddf3+0x263>
c00278f7:	85 db                	test   ebx,ebx
c00278f9:	0f 84 fb 03 00 00    	je     c0027cfa <__adddf3+0x63f>
c00278ff:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027902:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027905:	0f 84 f5 03 00 00    	je     c0027d00 <__adddf3+0x645>
c002790b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002790e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027911:	85 c0                	test   eax,eax
c0027913:	0f 89 91 03 00 00    	jns    c0027caa <__adddf3+0x5ef>
c0027919:	e9 85 03 00 00       	jmp    c0027ca3 <__adddf3+0x5e8>
c002791e:	85 db                	test   ebx,ebx
c0027920:	0f 85 da 03 00 00    	jne    c0027d00 <__adddf3+0x645>
c0027926:	e9 cf 03 00 00       	jmp    c0027cfa <__adddf3+0x63f>
c002792b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002792e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027931:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027934:	f7 d1                	not    ecx
c0027936:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002793c:	0f 84 70 03 00 00    	je     c0027cb2 <__adddf3+0x5f7>
c0027942:	d1 ea                	shr    edx,1
c0027944:	89 c1                	mov    ecx,eax
c0027946:	c1 e1 1f             	shl    ecx,0x1f
c0027949:	09 ca                	or     edx,ecx
c002794b:	d1 e8                	shr    eax,1
c002794d:	e9 6f 03 00 00       	jmp    c0027cc1 <__adddf3+0x606>
c0027952:	85 c0                	test   eax,eax
c0027954:	0f 89 67 03 00 00    	jns    c0027cc1 <__adddf3+0x606>
c002795a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002795d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027960:	f7 d1                	not    ecx
c0027962:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027968:	0f 84 44 03 00 00    	je     c0027cb2 <__adddf3+0x5f7>
c002796e:	89 d1                	mov    ecx,edx
c0027970:	d1 e9                	shr    ecx,1
c0027972:	83 e2 01             	and    edx,0x1
c0027975:	09 ca                	or     edx,ecx
c0027977:	89 c1                	mov    ecx,eax
c0027979:	c1 e1 1f             	shl    ecx,0x1f
c002797c:	09 ca                	or     edx,ecx
c002797e:	d1 e8                	shr    eax,1
c0027980:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027985:	e9 37 03 00 00       	jmp    c0027cc1 <__adddf3+0x606>
c002798a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002798d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027993:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027996:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027999:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002799f:	29 de                	sub    esi,ebx
c00279a1:	85 f6                	test   esi,esi
c00279a3:	0f 8e bd 00 00 00    	jle    c0027a66 <__adddf3+0x3ab>
c00279a9:	85 db                	test   ebx,ebx
c00279ab:	75 17                	jne    c00279c4 <__adddf3+0x309>
c00279ad:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279b0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00279b3:	0f 84 47 03 00 00    	je     c0027d00 <__adddf3+0x645>
c00279b9:	4e                   	dec    esi
c00279ba:	75 20                	jne    c00279dc <__adddf3+0x321>
c00279bc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00279bf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00279c2:	eb 5b                	jmp    c0027a1f <__adddf3+0x364>
c00279c4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279c7:	f7 d3                	not    ebx
c00279c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00279cf:	0f 84 2b 03 00 00    	je     c0027d00 <__adddf3+0x645>
c00279d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00279dc:	83 fe 1f             	cmp    esi,0x1f
c00279df:	7e 49                	jle    c0027a2a <__adddf3+0x36f>
c00279e1:	83 fe 3f             	cmp    esi,0x3f
c00279e4:	0f 8f 16 03 00 00    	jg     c0027d00 <__adddf3+0x645>
c00279ea:	83 e6 1f             	and    esi,0x1f
c00279ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279f0:	89 f1                	mov    ecx,esi
c00279f2:	d3 ef                	shr    edi,cl
c00279f4:	31 db                	xor    ebx,ebx
c00279f6:	85 f6                	test   esi,esi
c00279f8:	74 13                	je     c0027a0d <__adddf3+0x352>
c00279fa:	b9 20 00 00 00       	mov    ecx,0x20
c00279ff:	29 f1                	sub    ecx,esi
c0027a01:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a04:	d3 e6                	shl    esi,cl
c0027a06:	31 db                	xor    ebx,ebx
c0027a08:	85 f6                	test   esi,esi
c0027a0a:	0f 95 c3             	setne  bl
c0027a0d:	31 c9                	xor    ecx,ecx
c0027a0f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a13:	0f 95 c1             	setne  cl
c0027a16:	09 cf                	or     edi,ecx
c0027a18:	09 fb                	or     ebx,edi
c0027a1a:	29 da                	sub    edx,ebx
c0027a1c:	83 d8 00             	sbb    eax,0x0
c0027a1f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a22:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a25:	e9 aa 01 00 00       	jmp    c0027bd4 <__adddf3+0x519>
c0027a2a:	bf 20 00 00 00       	mov    edi,0x20
c0027a2f:	29 f7                	sub    edi,esi
c0027a31:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a34:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027a37:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a3a:	d3 e3                	shl    ebx,cl
c0027a3c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a3f:	89 f1                	mov    ecx,esi
c0027a41:	d3 ef                	shr    edi,cl
c0027a43:	09 fb                	or     ebx,edi
c0027a45:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027a48:	89 f1                	mov    ecx,esi
c0027a4a:	d3 ef                	shr    edi,cl
c0027a4c:	89 fe                	mov    esi,edi
c0027a4e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a51:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027a54:	d3 e7                	shl    edi,cl
c0027a56:	85 ff                	test   edi,edi
c0027a58:	0f 95 c1             	setne  cl
c0027a5b:	0f b6 c9             	movzx  ecx,cl
c0027a5e:	09 cb                	or     ebx,ecx
c0027a60:	29 da                	sub    edx,ebx
c0027a62:	19 f0                	sbb    eax,esi
c0027a64:	eb b9                	jmp    c0027a1f <__adddf3+0x364>
c0027a66:	0f 84 cd 00 00 00    	je     c0027b39 <__adddf3+0x47e>
c0027a6c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027a6f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a72:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a75:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a79:	75 1b                	jne    c0027a96 <__adddf3+0x3db>
c0027a7b:	89 d6                	mov    esi,edx
c0027a7d:	09 c6                	or     esi,eax
c0027a7f:	0f 84 7b 02 00 00    	je     c0027d00 <__adddf3+0x645>
c0027a85:	4b                   	dec    ebx
c0027a86:	75 24                	jne    c0027aac <__adddf3+0x3f1>
c0027a88:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a8b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a8e:	29 d1                	sub    ecx,edx
c0027a90:	19 c6                	sbb    esi,eax
c0027a92:	89 ca                	mov    edx,ecx
c0027a94:	eb 61                	jmp    c0027af7 <__adddf3+0x43c>
c0027a96:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a99:	f7 d6                	not    esi
c0027a9b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027aa1:	0f 84 59 02 00 00    	je     c0027d00 <__adddf3+0x645>
c0027aa7:	0d 00 00 00 80       	or     eax,0x80000000
c0027aac:	83 fb 1f             	cmp    ebx,0x1f
c0027aaf:	7e 4d                	jle    c0027afe <__adddf3+0x443>
c0027ab1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ab4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ab7:	83 fb 3f             	cmp    ebx,0x3f
c0027aba:	0f 8f 40 02 00 00    	jg     c0027d00 <__adddf3+0x645>
c0027ac0:	83 e3 1f             	and    ebx,0x1f
c0027ac3:	89 d9                	mov    ecx,ebx
c0027ac5:	89 c7                	mov    edi,eax
c0027ac7:	d3 ef                	shr    edi,cl
c0027ac9:	31 db                	xor    ebx,ebx
c0027acb:	85 c9                	test   ecx,ecx
c0027acd:	74 12                	je     c0027ae1 <__adddf3+0x426>
c0027acf:	be 20 00 00 00       	mov    esi,0x20
c0027ad4:	29 ce                	sub    esi,ecx
c0027ad6:	89 f1                	mov    ecx,esi
c0027ad8:	d3 e0                	shl    eax,cl
c0027ada:	31 db                	xor    ebx,ebx
c0027adc:	85 c0                	test   eax,eax
c0027ade:	0f 95 c3             	setne  bl
c0027ae1:	31 c0                	xor    eax,eax
c0027ae3:	85 d2                	test   edx,edx
c0027ae5:	0f 95 c0             	setne  al
c0027ae8:	09 c7                	or     edi,eax
c0027aea:	09 fb                	or     ebx,edi
c0027aec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027aef:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027af2:	29 da                	sub    edx,ebx
c0027af4:	83 de 00             	sbb    esi,0x0
c0027af7:	89 f0                	mov    eax,esi
c0027af9:	e9 d6 00 00 00       	jmp    c0027bd4 <__adddf3+0x519>
c0027afe:	be 20 00 00 00       	mov    esi,0x20
c0027b03:	29 de                	sub    esi,ebx
c0027b05:	89 c7                	mov    edi,eax
c0027b07:	89 f1                	mov    ecx,esi
c0027b09:	d3 e7                	shl    edi,cl
c0027b0b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b0e:	89 d7                	mov    edi,edx
c0027b10:	88 d9                	mov    cl,bl
c0027b12:	d3 ef                	shr    edi,cl
c0027b14:	89 f9                	mov    ecx,edi
c0027b16:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b19:	09 cf                	or     edi,ecx
c0027b1b:	88 d9                	mov    cl,bl
c0027b1d:	d3 e8                	shr    eax,cl
c0027b1f:	89 f1                	mov    ecx,esi
c0027b21:	d3 e2                	shl    edx,cl
c0027b23:	85 d2                	test   edx,edx
c0027b25:	0f 95 c2             	setne  dl
c0027b28:	0f b6 d2             	movzx  edx,dl
c0027b2b:	09 d7                	or     edi,edx
c0027b2d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b30:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b33:	29 fa                	sub    edx,edi
c0027b35:	19 c6                	sbb    esi,eax
c0027b37:	eb be                	jmp    c0027af7 <__adddf3+0x43c>
c0027b39:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027b3c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027b3f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027b45:	75 6a                	jne    c0027bb1 <__adddf3+0x4f6>
c0027b47:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b4b:	75 58                	jne    c0027ba5 <__adddf3+0x4ea>
c0027b4d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027b50:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027b53:	89 d6                	mov    esi,edx
c0027b55:	09 c6                	or     esi,eax
c0027b57:	75 17                	jne    c0027b70 <__adddf3+0x4b5>
c0027b59:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b5c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b5f:	85 db                	test   ebx,ebx
c0027b61:	0f 85 99 01 00 00    	jne    c0027d00 <__adddf3+0x645>
c0027b67:	31 ff                	xor    edi,edi
c0027b69:	31 c9                	xor    ecx,ecx
c0027b6b:	e9 90 01 00 00       	jmp    c0027d00 <__adddf3+0x645>
c0027b70:	85 db                	test   ebx,ebx
c0027b72:	0f 84 88 01 00 00    	je     c0027d00 <__adddf3+0x645>
c0027b78:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027b7b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027b7e:	85 c0                	test   eax,eax
c0027b80:	79 10                	jns    c0027b92 <__adddf3+0x4d7>
c0027b82:	31 c9                	xor    ecx,ecx
c0027b84:	f7 da                	neg    edx
c0027b86:	0f 95 c1             	setne  cl
c0027b89:	01 c8                	add    eax,ecx
c0027b8b:	f7 d8                	neg    eax
c0027b8d:	e9 2f 01 00 00       	jmp    c0027cc1 <__adddf3+0x606>
c0027b92:	31 ff                	xor    edi,edi
c0027b94:	31 c9                	xor    ecx,ecx
c0027b96:	89 c3                	mov    ebx,eax
c0027b98:	09 d3                	or     ebx,edx
c0027b9a:	0f 84 60 01 00 00    	je     c0027d00 <__adddf3+0x645>
c0027ba0:	e9 05 01 00 00       	jmp    c0027caa <__adddf3+0x5ef>
c0027ba5:	31 ff                	xor    edi,edi
c0027ba7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027bac:	e9 4f 01 00 00       	jmp    c0027d00 <__adddf3+0x645>
c0027bb1:	89 c1                	mov    ecx,eax
c0027bb3:	89 d0                	mov    eax,edx
c0027bb5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027bb8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027bbb:	89 ca                	mov    edx,ecx
c0027bbd:	85 c9                	test   ecx,ecx
c0027bbf:	79 2c                	jns    c0027bed <__adddf3+0x532>
c0027bc1:	31 c9                	xor    ecx,ecx
c0027bc3:	f7 d8                	neg    eax
c0027bc5:	0f 95 c1             	setne  cl
c0027bc8:	01 ca                	add    edx,ecx
c0027bca:	f7 da                	neg    edx
c0027bcc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027bcf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027bd2:	eb 19                	jmp    c0027bed <__adddf3+0x532>
c0027bd4:	85 c0                	test   eax,eax
c0027bd6:	0f 89 e5 00 00 00    	jns    c0027cc1 <__adddf3+0x606>
c0027bdc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027be1:	89 c1                	mov    ecx,eax
c0027be3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027be6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027be9:	89 d0                	mov    eax,edx
c0027beb:	89 ca                	mov    edx,ecx
c0027bed:	85 d2                	test   edx,edx
c0027bef:	74 59                	je     c0027c4a <__adddf3+0x58f>
c0027bf1:	0f bd da             	bsr    ebx,edx
c0027bf4:	83 f3 1f             	xor    ebx,0x1f
c0027bf7:	88 d9                	mov    cl,bl
c0027bf9:	d3 e2                	shl    edx,cl
c0027bfb:	bf 20 00 00 00       	mov    edi,0x20
c0027c00:	89 f9                	mov    ecx,edi
c0027c02:	29 d9                	sub    ecx,ebx
c0027c04:	89 c6                	mov    esi,eax
c0027c06:	d3 ee                	shr    esi,cl
c0027c08:	09 d6                	or     esi,edx
c0027c0a:	88 d9                	mov    cl,bl
c0027c0c:	d3 e0                	shl    eax,cl
c0027c0e:	89 c2                	mov    edx,eax
c0027c10:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c13:	25 ff 07 00 00       	and    eax,0x7ff
c0027c18:	39 d8                	cmp    eax,ebx
c0027c1a:	7f 22                	jg     c0027c3e <__adddf3+0x583>
c0027c1c:	29 c3                	sub    ebx,eax
c0027c1e:	43                   	inc    ebx
c0027c1f:	88 d9                	mov    cl,bl
c0027c21:	d3 ea                	shr    edx,cl
c0027c23:	29 df                	sub    edi,ebx
c0027c25:	89 f9                	mov    ecx,edi
c0027c27:	89 f0                	mov    eax,esi
c0027c29:	d3 e0                	shl    eax,cl
c0027c2b:	09 c2                	or     edx,eax
c0027c2d:	89 f0                	mov    eax,esi
c0027c2f:	88 d9                	mov    cl,bl
c0027c31:	d3 e8                	shr    eax,cl
c0027c33:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c36:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027c3c:	eb 6f                	jmp    c0027cad <__adddf3+0x5f2>
c0027c3e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c41:	29 d8                	sub    eax,ebx
c0027c43:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c46:	89 f0                	mov    eax,esi
c0027c48:	eb 59                	jmp    c0027ca3 <__adddf3+0x5e8>
c0027c4a:	85 c0                	test   eax,eax
c0027c4c:	74 6a                	je     c0027cb8 <__adddf3+0x5fd>
c0027c4e:	0f bd c8             	bsr    ecx,eax
c0027c51:	83 f1 1f             	xor    ecx,0x1f
c0027c54:	d3 e0                	shl    eax,cl
c0027c56:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c59:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c5f:	83 c1 20             	add    ecx,0x20
c0027c62:	39 cb                	cmp    ebx,ecx
c0027c64:	7f 35                	jg     c0027c9b <__adddf3+0x5e0>
c0027c66:	29 d9                	sub    ecx,ebx
c0027c68:	8d 71 01             	lea    esi,[ecx+0x1]
c0027c6b:	83 fe 1f             	cmp    esi,0x1f
c0027c6e:	7e 09                	jle    c0027c79 <__adddf3+0x5be>
c0027c70:	83 e9 1f             	sub    ecx,0x1f
c0027c73:	d3 e8                	shr    eax,cl
c0027c75:	89 c3                	mov    ebx,eax
c0027c77:	eb 11                	jmp    c0027c8a <__adddf3+0x5cf>
c0027c79:	b9 20 00 00 00       	mov    ecx,0x20
c0027c7e:	29 f1                	sub    ecx,esi
c0027c80:	89 c3                	mov    ebx,eax
c0027c82:	d3 e3                	shl    ebx,cl
c0027c84:	89 f1                	mov    ecx,esi
c0027c86:	d3 e8                	shr    eax,cl
c0027c88:	89 c2                	mov    edx,eax
c0027c8a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c8d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c92:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c95:	89 d0                	mov    eax,edx
c0027c97:	89 da                	mov    edx,ebx
c0027c99:	eb 26                	jmp    c0027cc1 <__adddf3+0x606>
c0027c9b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c9e:	29 cf                	sub    edi,ecx
c0027ca0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ca3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ca8:	eb 17                	jmp    c0027cc1 <__adddf3+0x606>
c0027caa:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cad:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027cb0:	eb 0f                	jmp    c0027cc1 <__adddf3+0x606>
c0027cb2:	31 d2                	xor    edx,edx
c0027cb4:	31 c0                	xor    eax,eax
c0027cb6:	eb 09                	jmp    c0027cc1 <__adddf3+0x606>
c0027cb8:	89 c2                	mov    edx,eax
c0027cba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027cc1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cc4:	c1 e1 14             	shl    ecx,0x14
c0027cc7:	89 c3                	mov    ebx,eax
c0027cc9:	c1 eb 0b             	shr    ebx,0xb
c0027ccc:	09 d9                	or     ecx,ebx
c0027cce:	89 d3                	mov    ebx,edx
c0027cd0:	c1 eb 0b             	shr    ebx,0xb
c0027cd3:	c1 e0 15             	shl    eax,0x15
c0027cd6:	09 d8                	or     eax,ebx
c0027cd8:	89 c7                	mov    edi,eax
c0027cda:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027ce0:	0f 95 c0             	setne  al
c0027ce3:	89 c6                	mov    esi,eax
c0027ce5:	09 f3                	or     ebx,esi
c0027ce7:	83 e3 01             	and    ebx,0x1
c0027cea:	c1 ea 0a             	shr    edx,0xa
c0027ced:	21 da                	and    edx,ebx
c0027cef:	89 f8                	mov    eax,edi
c0027cf1:	01 d0                	add    eax,edx
c0027cf3:	83 d1 00             	adc    ecx,0x0
c0027cf6:	89 c7                	mov    edi,eax
c0027cf8:	eb 06                	jmp    c0027d00 <__adddf3+0x645>
c0027cfa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027cfd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027d00:	89 f8                	mov    eax,edi
c0027d02:	89 ca                	mov    edx,ecx
c0027d04:	83 c4 24             	add    esp,0x24
c0027d07:	5b                   	pop    ebx
c0027d08:	5e                   	pop    esi
c0027d09:	5f                   	pop    edi
c0027d0a:	5d                   	pop    ebp
c0027d0b:	c3                   	ret    

c0027d0c <__subdf3>:
c0027d0c:	55                   	push   ebp
c0027d0d:	89 e5                	mov    ebp,esp
c0027d0f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d12:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027d15:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d1b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027d1e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027d21:	5d                   	pop    ebp
c0027d22:	e9 94 f9 ff ff       	jmp    c00276bb <__adddf3>

c0027d27 <__negdf2>:
c0027d27:	55                   	push   ebp
c0027d28:	89 e5                	mov    ebp,esp
c0027d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027d2d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d30:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d36:	5d                   	pop    ebp
c0027d37:	c3                   	ret    

c0027d38 <__muldf3>:
c0027d38:	55                   	push   ebp
c0027d39:	89 e5                	mov    ebp,esp
c0027d3b:	57                   	push   edi
c0027d3c:	56                   	push   esi
c0027d3d:	53                   	push   ebx
c0027d3e:	83 ec 24             	sub    esp,0x24
c0027d41:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027d47:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d4a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d4d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d50:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027d53:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d56:	89 c8                	mov    eax,ecx
c0027d58:	c1 f8 14             	sar    eax,0x14
c0027d5b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d5e:	89 f8                	mov    eax,edi
c0027d60:	89 fb                	mov    ebx,edi
c0027d62:	c1 e3 0b             	shl    ebx,0xb
c0027d65:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027d68:	c1 e1 0b             	shl    ecx,0xb
c0027d6b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027d71:	c1 e8 15             	shr    eax,0x15
c0027d74:	09 c1                	or     ecx,eax
c0027d76:	89 d6                	mov    esi,edx
c0027d78:	89 d0                	mov    eax,edx
c0027d7a:	c1 f8 14             	sar    eax,0x14
c0027d7d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027d80:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027d83:	89 c3                	mov    ebx,eax
c0027d85:	c1 e3 0b             	shl    ebx,0xb
c0027d88:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d8b:	c1 e6 0b             	shl    esi,0xb
c0027d8e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d94:	c1 e8 15             	shr    eax,0x15
c0027d97:	09 c6                	or     esi,eax
c0027d99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d9c:	25 ff 07 00 00       	and    eax,0x7ff
c0027da1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027da4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027da7:	25 ff 07 00 00       	and    eax,0x7ff
c0027dac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027daf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027db2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027db5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027dbc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dbf:	40                   	inc    eax
c0027dc0:	a9 fe 07 00 00       	test   eax,0x7fe
c0027dc5:	0f 85 8d 00 00 00    	jne    c0027e58 <__muldf3+0x120>
c0027dcb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dce:	09 c8                	or     eax,ecx
c0027dd0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027dd4:	74 44                	je     c0027e1a <__muldf3+0xe2>
c0027dd6:	85 c0                	test   eax,eax
c0027dd8:	0f 85 31 02 00 00    	jne    c002800f <__muldf3+0x2d7>
c0027dde:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027de1:	40                   	inc    eax
c0027de2:	a9 fe 07 00 00       	test   eax,0x7fe
c0027de7:	75 13                	jne    c0027dfc <__muldf3+0xc4>
c0027de9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027dec:	09 f1                	or     ecx,esi
c0027dee:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027df2:	74 22                	je     c0027e16 <__muldf3+0xde>
c0027df4:	85 c9                	test   ecx,ecx
c0027df6:	0f 85 0d 02 00 00    	jne    c0028009 <__muldf3+0x2d1>
c0027dfc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027e00:	0f 89 09 02 00 00    	jns    c002800f <__muldf3+0x2d7>
c0027e06:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e09:	05 00 00 00 80       	add    eax,0x80000000
c0027e0e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e11:	e9 f9 01 00 00       	jmp    c002800f <__muldf3+0x2d7>
c0027e16:	85 c9                	test   ecx,ecx
c0027e18:	eb 2e                	jmp    c0027e48 <__muldf3+0x110>
c0027e1a:	85 c0                	test   eax,eax
c0027e1c:	74 20                	je     c0027e3e <__muldf3+0x106>
c0027e1e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027e21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e24:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e27:	c1 ef 1f             	shr    edi,0x1f
c0027e2a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027e2d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027e30:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e33:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e36:	09 f9                	or     ecx,edi
c0027e38:	78 1e                	js     c0027e58 <__muldf3+0x120>
c0027e3a:	89 c3                	mov    ebx,eax
c0027e3c:	eb e0                	jmp    c0027e1e <__muldf3+0xe6>
c0027e3e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e41:	f7 d0                	not    eax
c0027e43:	a9 ff 07 00 00       	test   eax,0x7ff
c0027e48:	75 b2                	jne    c0027dfc <__muldf3+0xc4>
c0027e4a:	31 ff                	xor    edi,edi
c0027e4c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027e53:	e9 b7 01 00 00       	jmp    c002800f <__muldf3+0x2d7>
c0027e58:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e5b:	40                   	inc    eax
c0027e5c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e61:	75 57                	jne    c0027eba <__muldf3+0x182>
c0027e63:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027e66:	09 f0                	or     eax,esi
c0027e68:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027e6c:	74 23                	je     c0027e91 <__muldf3+0x159>
c0027e6e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e72:	0f 89 91 01 00 00    	jns    c0028009 <__muldf3+0x2d1>
c0027e78:	85 c0                	test   eax,eax
c0027e7a:	0f 85 89 01 00 00    	jne    c0028009 <__muldf3+0x2d1>
c0027e80:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e83:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027e89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e8c:	e9 7e 01 00 00       	jmp    c002800f <__muldf3+0x2d7>
c0027e91:	85 c0                	test   eax,eax
c0027e93:	75 0c                	jne    c0027ea1 <__muldf3+0x169>
c0027e95:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e99:	0f 89 6a 01 00 00    	jns    c0028009 <__muldf3+0x2d1>
c0027e9f:	eb df                	jmp    c0027e80 <__muldf3+0x148>
c0027ea1:	01 f6                	add    esi,esi
c0027ea3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027ea6:	c1 ea 1f             	shr    edx,0x1f
c0027ea9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027eac:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027eaf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027eb2:	09 d6                	or     esi,edx
c0027eb4:	78 04                	js     c0027eba <__muldf3+0x182>
c0027eb6:	89 c3                	mov    ebx,eax
c0027eb8:	eb e7                	jmp    c0027ea1 <__muldf3+0x169>
c0027eba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027ec0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ec6:	89 c8                	mov    eax,ecx
c0027ec8:	f7 e6                	mul    esi
c0027eca:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027ecd:	89 c7                	mov    edi,eax
c0027ecf:	89 c8                	mov    eax,ecx
c0027ed1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ed4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027ed7:	89 c1                	mov    ecx,eax
c0027ed9:	89 f0                	mov    eax,esi
c0027edb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027ede:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ee1:	89 c6                	mov    esi,eax
c0027ee3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ee6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027ee9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027eec:	31 c0                	xor    eax,eax
c0027eee:	01 f1                	add    ecx,esi
c0027ef0:	0f 92 c0             	setb   al
c0027ef3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027ef6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ef9:	83 d6 00             	adc    esi,0x0
c0027efc:	01 c7                	add    edi,eax
c0027efe:	83 d6 00             	adc    esi,0x0
c0027f01:	01 ca                	add    edx,ecx
c0027f03:	0f 92 c1             	setb   cl
c0027f06:	0f b6 c9             	movzx  ecx,cl
c0027f09:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027f0c:	83 d6 00             	adc    esi,0x0
c0027f0f:	01 cf                	add    edi,ecx
c0027f11:	83 d6 00             	adc    esi,0x0
c0027f14:	31 c9                	xor    ecx,ecx
c0027f16:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027f19:	0f 95 c1             	setne  cl
c0027f1c:	09 cf                	or     edi,ecx
c0027f1e:	85 f6                	test   esi,esi
c0027f20:	78 0c                	js     c0027f2e <__muldf3+0x1f6>
c0027f22:	01 f6                	add    esi,esi
c0027f24:	89 f8                	mov    eax,edi
c0027f26:	c1 e8 1f             	shr    eax,0x1f
c0027f29:	09 c6                	or     esi,eax
c0027f2b:	01 ff                	add    edi,edi
c0027f2d:	4b                   	dec    ebx
c0027f2e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027f34:	0f 8f 85 00 00 00    	jg     c0027fbf <__muldf3+0x287>
c0027f3a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027f40:	85 db                	test   ebx,ebx
c0027f42:	0f 8f 84 00 00 00    	jg     c0027fcc <__muldf3+0x294>
c0027f48:	83 fb cc             	cmp    ebx,0xffffffcc
c0027f4b:	7c 79                	jl     c0027fc6 <__muldf3+0x28e>
c0027f4d:	ba 01 00 00 00       	mov    edx,0x1
c0027f52:	29 da                	sub    edx,ebx
c0027f54:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f5a:	83 fa 1f             	cmp    edx,0x1f
c0027f5d:	7e 30                	jle    c0027f8f <__muldf3+0x257>
c0027f5f:	83 fa 20             	cmp    edx,0x20
c0027f62:	75 0b                	jne    c0027f6f <__muldf3+0x237>
c0027f64:	31 c0                	xor    eax,eax
c0027f66:	85 ff                	test   edi,edi
c0027f68:	0f 95 c0             	setne  al
c0027f6b:	89 c7                	mov    edi,eax
c0027f6d:	eb 1a                	jmp    c0027f89 <__muldf3+0x251>
c0027f6f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027f72:	89 f0                	mov    eax,esi
c0027f74:	d3 e0                	shl    eax,cl
c0027f76:	09 f8                	or     eax,edi
c0027f78:	0f 95 c0             	setne  al
c0027f7b:	0f b6 c0             	movzx  eax,al
c0027f7e:	89 c7                	mov    edi,eax
c0027f80:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f85:	29 d9                	sub    ecx,ebx
c0027f87:	d3 ee                	shr    esi,cl
c0027f89:	09 f7                	or     edi,esi
c0027f8b:	31 db                	xor    ebx,ebx
c0027f8d:	eb 3b                	jmp    c0027fca <__muldf3+0x292>
c0027f8f:	83 c3 1f             	add    ebx,0x1f
c0027f92:	89 f0                	mov    eax,esi
c0027f94:	88 d9                	mov    cl,bl
c0027f96:	d3 e0                	shl    eax,cl
c0027f98:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f9b:	89 f8                	mov    eax,edi
c0027f9d:	88 d1                	mov    cl,dl
c0027f9f:	d3 e8                	shr    eax,cl
c0027fa1:	89 c1                	mov    ecx,eax
c0027fa3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027fa6:	09 c8                	or     eax,ecx
c0027fa8:	88 d9                	mov    cl,bl
c0027faa:	d3 e7                	shl    edi,cl
c0027fac:	31 db                	xor    ebx,ebx
c0027fae:	85 ff                	test   edi,edi
c0027fb0:	0f 95 c3             	setne  bl
c0027fb3:	89 df                	mov    edi,ebx
c0027fb5:	09 c7                	or     edi,eax
c0027fb7:	88 d1                	mov    cl,dl
c0027fb9:	d3 ee                	shr    esi,cl
c0027fbb:	31 db                	xor    ebx,ebx
c0027fbd:	eb 0d                	jmp    c0027fcc <__muldf3+0x294>
c0027fbf:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027fc4:	eb 02                	jmp    c0027fc8 <__muldf3+0x290>
c0027fc6:	31 db                	xor    ebx,ebx
c0027fc8:	31 ff                	xor    edi,edi
c0027fca:	31 f6                	xor    esi,esi
c0027fcc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fcf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027fd2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027fd7:	09 c3                	or     ebx,eax
c0027fd9:	c1 e3 14             	shl    ebx,0x14
c0027fdc:	89 f0                	mov    eax,esi
c0027fde:	c1 e8 0b             	shr    eax,0xb
c0027fe1:	09 c3                	or     ebx,eax
c0027fe3:	89 f8                	mov    eax,edi
c0027fe5:	c1 e8 0b             	shr    eax,0xb
c0027fe8:	c1 e6 15             	shl    esi,0x15
c0027feb:	09 c6                	or     esi,eax
c0027fed:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ff3:	0f 95 c1             	setne  cl
c0027ff6:	09 c8                	or     eax,ecx
c0027ff8:	83 e0 01             	and    eax,0x1
c0027ffb:	c1 ef 0a             	shr    edi,0xa
c0027ffe:	21 c7                	and    edi,eax
c0028000:	01 f7                	add    edi,esi
c0028002:	83 d3 00             	adc    ebx,0x0
c0028005:	89 da                	mov    edx,ebx
c0028007:	eb 03                	jmp    c002800c <__muldf3+0x2d4>
c0028009:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002800c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002800f:	89 f8                	mov    eax,edi
c0028011:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028014:	83 c4 24             	add    esp,0x24
c0028017:	5b                   	pop    ebx
c0028018:	5e                   	pop    esi
c0028019:	5f                   	pop    edi
c002801a:	5d                   	pop    ebp
c002801b:	c3                   	ret    

c002801c <__divdf3>:
c002801c:	55                   	push   ebp
c002801d:	89 e5                	mov    ebp,esp
c002801f:	57                   	push   edi
c0028020:	56                   	push   esi
c0028021:	53                   	push   ebx
c0028022:	83 ec 2c             	sub    esp,0x2c
c0028025:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028028:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002802b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002802e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028031:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028034:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028037:	89 ce                	mov    esi,ecx
c0028039:	89 c8                	mov    eax,ecx
c002803b:	c1 f8 14             	sar    eax,0x14
c002803e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028041:	89 f8                	mov    eax,edi
c0028043:	89 fb                	mov    ebx,edi
c0028045:	c1 e3 0b             	shl    ebx,0xb
c0028048:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002804b:	c1 e6 0b             	shl    esi,0xb
c002804e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028054:	c1 e8 15             	shr    eax,0x15
c0028057:	09 c6                	or     esi,eax
c0028059:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002805c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002805f:	89 c2                	mov    edx,eax
c0028061:	c1 fa 14             	sar    edx,0x14
c0028064:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028067:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002806a:	89 de                	mov    esi,ebx
c002806c:	c1 e6 0b             	shl    esi,0xb
c002806f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028072:	c1 e0 0b             	shl    eax,0xb
c0028075:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002807a:	c1 eb 15             	shr    ebx,0x15
c002807d:	09 d8                	or     eax,ebx
c002807f:	89 c2                	mov    edx,eax
c0028081:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028084:	25 ff 07 00 00       	and    eax,0x7ff
c0028089:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002808c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002808f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028095:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028098:	29 d8                	sub    eax,ebx
c002809a:	05 ff 03 00 00       	add    eax,0x3ff
c002809f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00280a2:	46                   	inc    esi
c00280a3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00280a9:	0f 85 a5 00 00 00    	jne    c0028154 <__divdf3+0x138>
c00280af:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00280b2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00280b5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00280b9:	74 2a                	je     c00280e5 <__divdf3+0xc9>
c00280bb:	85 f6                	test   esi,esi
c00280bd:	0f 85 cc 02 00 00    	jne    c002838f <__divdf3+0x373>
c00280c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00280c6:	40                   	inc    eax
c00280c7:	a9 fe 07 00 00       	test   eax,0x7fe
c00280cc:	75 26                	jne    c00280f4 <__divdf3+0xd8>
c00280ce:	85 db                	test   ebx,ebx
c00280d0:	74 22                	je     c00280f4 <__divdf3+0xd8>
c00280d2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280d5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280d8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280db:	09 d0                	or     eax,edx
c00280dd:	0f 85 ac 02 00 00    	jne    c002838f <__divdf3+0x373>
c00280e3:	eb 63                	jmp    c0028148 <__divdf3+0x12c>
c00280e5:	85 f6                	test   esi,esi
c00280e7:	75 22                	jne    c002810b <__divdf3+0xef>
c00280e9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00280ec:	40                   	inc    eax
c00280ed:	a9 fe 07 00 00       	test   eax,0x7fe
c00280f2:	74 36                	je     c002812a <__divdf3+0x10e>
c00280f4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00280f8:	0f 89 91 02 00 00    	jns    c002838f <__divdf3+0x373>
c00280fe:	89 f8                	mov    eax,edi
c0028100:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028106:	e9 80 02 00 00       	jmp    c002838b <__divdf3+0x36f>
c002810b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002810e:	01 f6                	add    esi,esi
c0028110:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028113:	c1 ef 1f             	shr    edi,0x1f
c0028116:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028119:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002811c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002811f:	09 f7                	or     edi,esi
c0028121:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028124:	78 2e                	js     c0028154 <__divdf3+0x138>
c0028126:	89 c8                	mov    eax,ecx
c0028128:	eb e1                	jmp    c002810b <__divdf3+0xef>
c002812a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002812d:	09 d0                	or     eax,edx
c002812f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028133:	74 0f                	je     c0028144 <__divdf3+0x128>
c0028135:	85 c0                	test   eax,eax
c0028137:	74 bb                	je     c00280f4 <__divdf3+0xd8>
c0028139:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002813c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002813f:	e9 4b 02 00 00       	jmp    c002838f <__divdf3+0x373>
c0028144:	85 c0                	test   eax,eax
c0028146:	75 ac                	jne    c00280f4 <__divdf3+0xd8>
c0028148:	31 ff                	xor    edi,edi
c002814a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002814f:	e9 3b 02 00 00       	jmp    c002838f <__divdf3+0x373>
c0028154:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028157:	8d 4f 01             	lea    ecx,[edi+0x1]
c002815a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028160:	75 6b                	jne    c00281cd <__divdf3+0x1b1>
c0028162:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028165:	09 d6                	or     esi,edx
c0028167:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002816b:	74 28                	je     c0028195 <__divdf3+0x179>
c002816d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028170:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028173:	85 f6                	test   esi,esi
c0028175:	0f 85 14 02 00 00    	jne    c002838f <__divdf3+0x373>
c002817b:	31 ff                	xor    edi,edi
c002817d:	31 c9                	xor    ecx,ecx
c002817f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028182:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028185:	0f 89 04 02 00 00    	jns    c002838f <__divdf3+0x373>
c002818b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028190:	e9 fa 01 00 00       	jmp    c002838f <__divdf3+0x373>
c0028195:	85 f6                	test   esi,esi
c0028197:	75 1b                	jne    c00281b4 <__divdf3+0x198>
c0028199:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002819c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002819f:	25 00 00 00 80       	and    eax,0x80000000
c00281a4:	31 c9                	xor    ecx,ecx
c00281a6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00281ab:	89 cf                	mov    edi,ecx
c00281ad:	89 c1                	mov    ecx,eax
c00281af:	e9 db 01 00 00       	jmp    c002838f <__divdf3+0x373>
c00281b4:	01 d2                	add    edx,edx
c00281b6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281b9:	c1 eb 1f             	shr    ebx,0x1f
c00281bc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281bf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00281c2:	8d 48 01             	lea    ecx,[eax+0x1]
c00281c5:	09 da                	or     edx,ebx
c00281c7:	78 04                	js     c00281cd <__divdf3+0x1b1>
c00281c9:	89 c8                	mov    eax,ecx
c00281cb:	eb e7                	jmp    c00281b4 <__divdf3+0x198>
c00281cd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00281d0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00281d6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281dc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00281df:	39 d6                	cmp    esi,edx
c00281e1:	77 0d                	ja     c00281f0 <__divdf3+0x1d4>
c00281e3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00281e6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00281e9:	72 1b                	jb     c0028206 <__divdf3+0x1ea>
c00281eb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00281ee:	75 16                	jne    c0028206 <__divdf3+0x1ea>
c00281f0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281f3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281f6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00281f9:	83 de 00             	sbb    esi,0x0
c00281fc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00281ff:	ba 01 00 00 00       	mov    edx,0x1
c0028204:	eb 02                	jmp    c0028208 <__divdf3+0x1ec>
c0028206:	31 d2                	xor    edx,edx
c0028208:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002820f:	31 ff                	xor    edi,edi
c0028211:	01 ff                	add    edi,edi
c0028213:	89 d1                	mov    ecx,edx
c0028215:	c1 e9 1f             	shr    ecx,0x1f
c0028218:	09 cf                	or     edi,ecx
c002821a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002821d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028220:	89 da                	mov    edx,ebx
c0028222:	89 f3                	mov    ebx,esi
c0028224:	8d 34 36             	lea    esi,[esi+esi*1]
c0028227:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002822a:	c1 e9 1f             	shr    ecx,0x1f
c002822d:	09 ce                	or     esi,ecx
c002822f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028232:	01 c9                	add    ecx,ecx
c0028234:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028237:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002823a:	85 db                	test   ebx,ebx
c002823c:	78 29                	js     c0028267 <__divdf3+0x24b>
c002823e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028241:	72 07                	jb     c002824a <__divdf3+0x22e>
c0028243:	75 3c                	jne    c0028281 <__divdf3+0x265>
c0028245:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028248:	77 37                	ja     c0028281 <__divdf3+0x265>
c002824a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002824d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028250:	31 d2                	xor    edx,edx
c0028252:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028255:	0f 97 c2             	seta   dl
c0028258:	29 d6                	sub    esi,edx
c002825a:	89 d9                	mov    ecx,ebx
c002825c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002825f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028262:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028265:	eb 17                	jmp    c002827e <__divdf3+0x262>
c0028267:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002826a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002826d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028270:	0f 97 c1             	seta   cl
c0028273:	0f b6 c9             	movzx  ecx,cl
c0028276:	29 ce                	sub    esi,ecx
c0028278:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002827b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002827e:	83 ca 01             	or     edx,0x1
c0028281:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028284:	75 8b                	jne    c0028211 <__divdf3+0x1f5>
c0028286:	c1 e7 09             	shl    edi,0x9
c0028289:	89 d1                	mov    ecx,edx
c002828b:	c1 e9 17             	shr    ecx,0x17
c002828e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028291:	09 f3                	or     ebx,esi
c0028293:	0f 95 c3             	setne  bl
c0028296:	0f b6 db             	movzx  ebx,bl
c0028299:	c1 e2 09             	shl    edx,0x9
c002829c:	09 d3                	or     ebx,edx
c002829e:	89 ca                	mov    edx,ecx
c00282a0:	09 fa                	or     edx,edi
c00282a2:	78 0c                	js     c00282b0 <__divdf3+0x294>
c00282a4:	01 d2                	add    edx,edx
c00282a6:	89 d9                	mov    ecx,ebx
c00282a8:	c1 e9 1f             	shr    ecx,0x1f
c00282ab:	09 ca                	or     edx,ecx
c00282ad:	01 db                	add    ebx,ebx
c00282af:	48                   	dec    eax
c00282b0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00282b5:	0f 8f 83 00 00 00    	jg     c002833e <__divdf3+0x322>
c00282bb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00282c1:	85 c0                	test   eax,eax
c00282c3:	0f 8f 82 00 00 00    	jg     c002834b <__divdf3+0x32f>
c00282c9:	83 f8 cc             	cmp    eax,0xffffffcc
c00282cc:	7c 77                	jl     c0028345 <__divdf3+0x329>
c00282ce:	be 01 00 00 00       	mov    esi,0x1
c00282d3:	29 c6                	sub    esi,eax
c00282d5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00282db:	83 fe 1f             	cmp    esi,0x1f
c00282de:	7e 2f                	jle    c002830f <__divdf3+0x2f3>
c00282e0:	83 fe 20             	cmp    esi,0x20
c00282e3:	75 0a                	jne    c00282ef <__divdf3+0x2d3>
c00282e5:	85 db                	test   ebx,ebx
c00282e7:	0f 95 c3             	setne  bl
c00282ea:	0f b6 db             	movzx  ebx,bl
c00282ed:	eb 1a                	jmp    c0028309 <__divdf3+0x2ed>
c00282ef:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00282f2:	89 d7                	mov    edi,edx
c00282f4:	d3 e7                	shl    edi,cl
c00282f6:	89 f9                	mov    ecx,edi
c00282f8:	09 d9                	or     ecx,ebx
c00282fa:	0f 95 c3             	setne  bl
c00282fd:	0f b6 db             	movzx  ebx,bl
c0028300:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028305:	29 c1                	sub    ecx,eax
c0028307:	d3 ea                	shr    edx,cl
c0028309:	09 d3                	or     ebx,edx
c002830b:	31 c0                	xor    eax,eax
c002830d:	eb 3a                	jmp    c0028349 <__divdf3+0x32d>
c002830f:	83 c0 1f             	add    eax,0x1f
c0028312:	89 d7                	mov    edi,edx
c0028314:	88 c1                	mov    cl,al
c0028316:	d3 e7                	shl    edi,cl
c0028318:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002831b:	89 df                	mov    edi,ebx
c002831d:	89 f1                	mov    ecx,esi
c002831f:	d3 ef                	shr    edi,cl
c0028321:	89 f9                	mov    ecx,edi
c0028323:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028326:	09 cf                	or     edi,ecx
c0028328:	88 c1                	mov    cl,al
c002832a:	d3 e3                	shl    ebx,cl
c002832c:	85 db                	test   ebx,ebx
c002832e:	0f 95 c3             	setne  bl
c0028331:	0f b6 db             	movzx  ebx,bl
c0028334:	09 fb                	or     ebx,edi
c0028336:	89 f1                	mov    ecx,esi
c0028338:	d3 ea                	shr    edx,cl
c002833a:	31 c0                	xor    eax,eax
c002833c:	eb 0d                	jmp    c002834b <__divdf3+0x32f>
c002833e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028343:	eb 02                	jmp    c0028347 <__divdf3+0x32b>
c0028345:	31 c0                	xor    eax,eax
c0028347:	31 db                	xor    ebx,ebx
c0028349:	31 d2                	xor    edx,edx
c002834b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c002834e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028351:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028357:	09 c8                	or     eax,ecx
c0028359:	c1 e0 14             	shl    eax,0x14
c002835c:	89 d1                	mov    ecx,edx
c002835e:	c1 e9 0b             	shr    ecx,0xb
c0028361:	09 c8                	or     eax,ecx
c0028363:	89 c6                	mov    esi,eax
c0028365:	89 d9                	mov    ecx,ebx
c0028367:	c1 e9 0b             	shr    ecx,0xb
c002836a:	c1 e2 15             	shl    edx,0x15
c002836d:	09 ca                	or     edx,ecx
c002836f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028375:	0f 95 c0             	setne  al
c0028378:	09 c1                	or     ecx,eax
c002837a:	83 e1 01             	and    ecx,0x1
c002837d:	c1 eb 0a             	shr    ebx,0xa
c0028380:	21 cb                	and    ebx,ecx
c0028382:	01 d3                	add    ebx,edx
c0028384:	89 d8                	mov    eax,ebx
c0028386:	83 d6 00             	adc    esi,0x0
c0028389:	89 f2                	mov    edx,esi
c002838b:	89 c7                	mov    edi,eax
c002838d:	89 d1                	mov    ecx,edx
c002838f:	89 f8                	mov    eax,edi
c0028391:	89 ca                	mov    edx,ecx
c0028393:	83 c4 2c             	add    esp,0x2c
c0028396:	5b                   	pop    ebx
c0028397:	5e                   	pop    esi
c0028398:	5f                   	pop    edi
c0028399:	5d                   	pop    ebp
c002839a:	c3                   	ret    

c002839b <__floatsidf>:
c002839b:	55                   	push   ebp
c002839c:	89 e5                	mov    ebp,esp
c002839e:	56                   	push   esi
c002839f:	53                   	push   ebx
c00283a0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283a3:	85 db                	test   ebx,ebx
c00283a5:	7e 15                	jle    c00283bc <__floatsidf+0x21>
c00283a7:	0f bd cb             	bsr    ecx,ebx
c00283aa:	83 f1 1f             	xor    ecx,0x1f
c00283ad:	d3 e3                	shl    ebx,cl
c00283af:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00283b5:	b8 1e 04 00 00       	mov    eax,0x41e
c00283ba:	eb 21                	jmp    c00283dd <__floatsidf+0x42>
c00283bc:	b8 00 00 00 00       	mov    eax,0x0
c00283c1:	ba 00 00 00 00       	mov    edx,0x0
c00283c6:	74 2a                	je     c00283f2 <__floatsidf+0x57>
c00283c8:	f7 db                	neg    ebx
c00283ca:	0f bd cb             	bsr    ecx,ebx
c00283cd:	83 f1 1f             	xor    ecx,0x1f
c00283d0:	d3 e3                	shl    ebx,cl
c00283d2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00283d8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00283dd:	29 c8                	sub    eax,ecx
c00283df:	c1 e0 14             	shl    eax,0x14
c00283e2:	89 c1                	mov    ecx,eax
c00283e4:	89 de                	mov    esi,ebx
c00283e6:	c1 ee 0b             	shr    esi,0xb
c00283e9:	09 f1                	or     ecx,esi
c00283eb:	89 ca                	mov    edx,ecx
c00283ed:	c1 e3 15             	shl    ebx,0x15
c00283f0:	89 d8                	mov    eax,ebx
c00283f2:	5b                   	pop    ebx
c00283f3:	5e                   	pop    esi
c00283f4:	5d                   	pop    ebp
c00283f5:	c3                   	ret    

c00283f6 <__floatunsidf>:
c00283f6:	55                   	push   ebp
c00283f7:	89 e5                	mov    ebp,esp
c00283f9:	56                   	push   esi
c00283fa:	53                   	push   ebx
c00283fb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283fe:	85 db                	test   ebx,ebx
c0028400:	74 2a                	je     c002842c <__floatunsidf+0x36>
c0028402:	0f bd cb             	bsr    ecx,ebx
c0028405:	83 f1 1f             	xor    ecx,0x1f
c0028408:	d3 e3                	shl    ebx,cl
c002840a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028410:	b8 1e 04 00 00       	mov    eax,0x41e
c0028415:	29 c8                	sub    eax,ecx
c0028417:	c1 e0 14             	shl    eax,0x14
c002841a:	89 c1                	mov    ecx,eax
c002841c:	89 de                	mov    esi,ebx
c002841e:	c1 ee 0b             	shr    esi,0xb
c0028421:	09 f1                	or     ecx,esi
c0028423:	89 ca                	mov    edx,ecx
c0028425:	c1 e3 15             	shl    ebx,0x15
c0028428:	89 d8                	mov    eax,ebx
c002842a:	eb 04                	jmp    c0028430 <__floatunsidf+0x3a>
c002842c:	31 c0                	xor    eax,eax
c002842e:	31 d2                	xor    edx,edx
c0028430:	5b                   	pop    ebx
c0028431:	5e                   	pop    esi
c0028432:	5d                   	pop    ebp
c0028433:	c3                   	ret    

c0028434 <__fixdfsi>:
c0028434:	55                   	push   ebp
c0028435:	89 e5                	mov    ebp,esp
c0028437:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002843a:	89 d1                	mov    ecx,edx
c002843c:	c1 e1 0b             	shl    ecx,0xb
c002843f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028448:	c1 e8 15             	shr    eax,0x15
c002844b:	09 c1                	or     ecx,eax
c002844d:	c1 fa 14             	sar    edx,0x14
c0028450:	78 1f                	js     c0028471 <__fixdfsi+0x3d>
c0028452:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028458:	31 c0                	xor    eax,eax
c002845a:	83 fa 1e             	cmp    edx,0x1e
c002845d:	77 40                	ja     c002849f <__fixdfsi+0x6b>
c002845f:	89 c8                	mov    eax,ecx
c0028461:	0d 00 00 00 80       	or     eax,0x80000000
c0028466:	b9 1f 00 00 00       	mov    ecx,0x1f
c002846b:	29 d1                	sub    ecx,edx
c002846d:	d3 e8                	shr    eax,cl
c002846f:	eb 2e                	jmp    c002849f <__fixdfsi+0x6b>
c0028471:	31 c0                	xor    eax,eax
c0028473:	81 c2 01 04 00 00    	add    edx,0x401
c0028479:	78 24                	js     c002849f <__fixdfsi+0x6b>
c002847b:	83 fa 1e             	cmp    edx,0x1e
c002847e:	7e 09                	jle    c0028489 <__fixdfsi+0x55>
c0028480:	83 fa 1f             	cmp    edx,0x1f
c0028483:	75 18                	jne    c002849d <__fixdfsi+0x69>
c0028485:	85 c9                	test   ecx,ecx
c0028487:	75 14                	jne    c002849d <__fixdfsi+0x69>
c0028489:	89 c8                	mov    eax,ecx
c002848b:	0d 00 00 00 80       	or     eax,0x80000000
c0028490:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028495:	29 d1                	sub    ecx,edx
c0028497:	d3 e8                	shr    eax,cl
c0028499:	f7 d8                	neg    eax
c002849b:	eb 02                	jmp    c002849f <__fixdfsi+0x6b>
c002849d:	31 c0                	xor    eax,eax
c002849f:	5d                   	pop    ebp
c00284a0:	c3                   	ret    

c00284a1 <__fixunsdfsi>:
c00284a1:	55                   	push   ebp
c00284a2:	89 e5                	mov    ebp,esp
c00284a4:	53                   	push   ebx
c00284a5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00284a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284ab:	89 d3                	mov    ebx,edx
c00284ad:	c1 fb 14             	sar    ebx,0x14
c00284b0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00284b6:	31 c0                	xor    eax,eax
c00284b8:	83 fb 1f             	cmp    ebx,0x1f
c00284bb:	77 1d                	ja     c00284da <__fixunsdfsi+0x39>
c00284bd:	89 d0                	mov    eax,edx
c00284bf:	c1 e0 0b             	shl    eax,0xb
c00284c2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284c7:	c1 e9 15             	shr    ecx,0x15
c00284ca:	09 c8                	or     eax,ecx
c00284cc:	0d 00 00 00 80       	or     eax,0x80000000
c00284d1:	b9 1f 00 00 00       	mov    ecx,0x1f
c00284d6:	29 d9                	sub    ecx,ebx
c00284d8:	d3 e8                	shr    eax,cl
c00284da:	5b                   	pop    ebx
c00284db:	5d                   	pop    ebp
c00284dc:	c3                   	ret    

c00284dd <__cmpdf2>:
c00284dd:	55                   	push   ebp
c00284de:	89 e5                	mov    ebp,esp
c00284e0:	57                   	push   edi
c00284e1:	56                   	push   esi
c00284e2:	53                   	push   ebx
c00284e3:	83 ec 0c             	sub    esp,0xc
c00284e6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00284e9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00284ec:	89 ca                	mov    edx,ecx
c00284ee:	c1 ea 14             	shr    edx,0x14
c00284f1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00284f7:	89 cb                	mov    ebx,ecx
c00284f9:	c1 fb 1f             	sar    ebx,0x1f
c00284fc:	31 da                	xor    edx,ebx
c00284fe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028501:	89 df                	mov    edi,ebx
c0028503:	c1 e7 0b             	shl    edi,0xb
c0028506:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028509:	c1 e1 0b             	shl    ecx,0xb
c002850c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028512:	c1 eb 15             	shr    ebx,0x15
c0028515:	09 d9                	or     ecx,ebx
c0028517:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002851a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002851d:	89 ce                	mov    esi,ecx
c002851f:	c1 ee 14             	shr    esi,0x14
c0028522:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028528:	89 cb                	mov    ebx,ecx
c002852a:	c1 fb 1f             	sar    ebx,0x1f
c002852d:	31 de                	xor    esi,ebx
c002852f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028532:	89 df                	mov    edi,ebx
c0028534:	c1 e7 0b             	shl    edi,0xb
c0028537:	c1 e1 0b             	shl    ecx,0xb
c002853a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028540:	c1 eb 15             	shr    ebx,0x15
c0028543:	09 d9                	or     ecx,ebx
c0028545:	89 d3                	mov    ebx,edx
c0028547:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002854d:	43                   	inc    ebx
c002854e:	83 fb 01             	cmp    ebx,0x1
c0028551:	77 08                	ja     c002855b <__cmpdf2+0x7e>
c0028553:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028556:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028559:	75 68                	jne    c00285c3 <__cmpdf2+0xe6>
c002855b:	89 f3                	mov    ebx,esi
c002855d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028563:	43                   	inc    ebx
c0028564:	83 fb 01             	cmp    ebx,0x1
c0028567:	77 06                	ja     c002856f <__cmpdf2+0x92>
c0028569:	89 fb                	mov    ebx,edi
c002856b:	09 cb                	or     ebx,ecx
c002856d:	75 54                	jne    c00285c3 <__cmpdf2+0xe6>
c002856f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028572:	09 f8                	or     eax,edi
c0028574:	09 c8                	or     eax,ecx
c0028576:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028579:	75 12                	jne    c002858d <__cmpdf2+0xb0>
c002857b:	8d 42 01             	lea    eax,[edx+0x1]
c002857e:	83 f8 01             	cmp    eax,0x1
c0028581:	77 0a                	ja     c002858d <__cmpdf2+0xb0>
c0028583:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028586:	31 c0                	xor    eax,eax
c0028588:	83 fb 01             	cmp    ebx,0x1
c002858b:	76 36                	jbe    c00285c3 <__cmpdf2+0xe6>
c002858d:	b8 01 00 00 00       	mov    eax,0x1
c0028592:	39 f2                	cmp    edx,esi
c0028594:	7f 2d                	jg     c00285c3 <__cmpdf2+0xe6>
c0028596:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002859b:	7c 26                	jl     c00285c3 <__cmpdf2+0xe6>
c002859d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00285a0:	77 07                	ja     c00285a9 <__cmpdf2+0xcc>
c00285a2:	72 16                	jb     c00285ba <__cmpdf2+0xdd>
c00285a4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00285a7:	76 0a                	jbe    c00285b3 <__cmpdf2+0xd6>
c00285a9:	89 d0                	mov    eax,edx
c00285ab:	c1 f8 1f             	sar    eax,0x1f
c00285ae:	83 c8 01             	or     eax,0x1
c00285b1:	eb 10                	jmp    c00285c3 <__cmpdf2+0xe6>
c00285b3:	b8 00 00 00 00       	mov    eax,0x0
c00285b8:	73 09                	jae    c00285c3 <__cmpdf2+0xe6>
c00285ba:	89 d0                	mov    eax,edx
c00285bc:	c1 f8 1f             	sar    eax,0x1f
c00285bf:	83 e0 02             	and    eax,0x2
c00285c2:	48                   	dec    eax
c00285c3:	83 c4 0c             	add    esp,0xc
c00285c6:	5b                   	pop    ebx
c00285c7:	5e                   	pop    esi
c00285c8:	5f                   	pop    edi
c00285c9:	5d                   	pop    ebp
c00285ca:	c3                   	ret    

c00285cb <__eqdf2>:
c00285cb:	55                   	push   ebp
c00285cc:	89 e5                	mov    ebp,esp
c00285ce:	50                   	push   eax
c00285cf:	6a 01                	push   0x1
c00285d1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00285d4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00285d7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00285da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00285dd:	e8 fb fe ff ff       	call   c00284dd <__cmpdf2>
c00285e2:	83 c4 18             	add    esp,0x18
c00285e5:	c9                   	leave  
c00285e6:	c3                   	ret    

c00285e7 <__nedf2>:
c00285e7:	eb e2                	jmp    c00285cb <__eqdf2>

c00285e9 <__gtdf2>:
c00285e9:	55                   	push   ebp
c00285ea:	89 e5                	mov    ebp,esp
c00285ec:	50                   	push   eax
c00285ed:	6a ff                	push   0xffffffff
c00285ef:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00285f2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00285f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00285f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00285fb:	e8 dd fe ff ff       	call   c00284dd <__cmpdf2>
c0028600:	83 c4 18             	add    esp,0x18
c0028603:	c9                   	leave  
c0028604:	c3                   	ret    

c0028605 <__gedf2>:
c0028605:	eb e2                	jmp    c00285e9 <__gtdf2>

c0028607 <__ltdf2>:
c0028607:	eb c2                	jmp    c00285cb <__eqdf2>

c0028609 <__ledf2>:
c0028609:	eb c0                	jmp    c00285cb <__eqdf2>

c002860b <__truncdfsf2>:
c002860b:	55                   	push   ebp
c002860c:	89 e5                	mov    ebp,esp
c002860e:	57                   	push   edi
c002860f:	56                   	push   esi
c0028610:	53                   	push   ebx
c0028611:	83 ec 0c             	sub    esp,0xc
c0028614:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028617:	89 d1                	mov    ecx,edx
c0028619:	c1 f9 14             	sar    ecx,0x14
c002861c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002861f:	89 df                	mov    edi,ebx
c0028621:	c1 e7 0b             	shl    edi,0xb
c0028624:	89 d0                	mov    eax,edx
c0028626:	c1 e0 0b             	shl    eax,0xb
c0028629:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002862e:	c1 eb 15             	shr    ebx,0x15
c0028631:	09 d8                	or     eax,ebx
c0028633:	89 cb                	mov    ebx,ecx
c0028635:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002863b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028641:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028647:	0f 86 9e 00 00 00    	jbe    c00286eb <__truncdfsf2+0xe0>
c002864d:	85 db                	test   ebx,ebx
c002864f:	75 0a                	jne    c002865b <__truncdfsf2+0x50>
c0028651:	c1 fa 17             	sar    edx,0x17
c0028654:	30 d2                	xor    dl,dl
c0028656:	e9 84 00 00 00       	jmp    c00286df <__truncdfsf2+0xd4>
c002865b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028661:	83 fe 83             	cmp    esi,0xffffff83
c0028664:	7d 4b                	jge    c00286b1 <__truncdfsf2+0xa6>
c0028666:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002866b:	29 f1                	sub    ecx,esi
c002866d:	83 f9 1f             	cmp    ecx,0x1f
c0028670:	7f 6b                	jg     c00286dd <__truncdfsf2+0xd2>
c0028672:	0d 00 00 00 80       	or     eax,0x80000000
c0028677:	89 c3                	mov    ebx,eax
c0028679:	d3 eb                	shr    ebx,cl
c002867b:	be 01 00 00 00       	mov    esi,0x1
c0028680:	d3 e6                	shl    esi,cl
c0028682:	4e                   	dec    esi
c0028683:	21 f0                	and    eax,esi
c0028685:	09 f8                	or     eax,edi
c0028687:	0f 95 c0             	setne  al
c002868a:	0f b6 c0             	movzx  eax,al
c002868d:	09 c3                	or     ebx,eax
c002868f:	89 d9                	mov    ecx,ebx
c0028691:	c1 e9 08             	shr    ecx,0x8
c0028694:	f6 c3 7f             	test   bl,0x7f
c0028697:	0f 95 c0             	setne  al
c002869a:	09 c8                	or     eax,ecx
c002869c:	83 e0 01             	and    eax,0x1
c002869f:	c1 eb 07             	shr    ebx,0x7
c00286a2:	21 c3                	and    ebx,eax
c00286a4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00286aa:	09 d1                	or     ecx,edx
c00286ac:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00286af:	eb 76                	jmp    c0028727 <__truncdfsf2+0x11c>
c00286b1:	83 c6 80             	add    esi,0xffffff80
c00286b4:	7e 1d                	jle    c00286d3 <__truncdfsf2+0xc8>
c00286b6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00286bc:	75 0b                	jne    c00286c9 <__truncdfsf2+0xbe>
c00286be:	09 f8                	or     eax,edi
c00286c0:	74 09                	je     c00286cb <__truncdfsf2+0xc0>
c00286c2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00286c7:	eb 02                	jmp    c00286cb <__truncdfsf2+0xc0>
c00286c9:	31 c0                	xor    eax,eax
c00286cb:	c1 fa 17             	sar    edx,0x17
c00286ce:	80 ca ff             	or     dl,0xff
c00286d1:	eb 0e                	jmp    c00286e1 <__truncdfsf2+0xd6>
c00286d3:	c1 fa 1f             	sar    edx,0x1f
c00286d6:	c1 e2 08             	shl    edx,0x8
c00286d9:	09 ca                	or     edx,ecx
c00286db:	eb 04                	jmp    c00286e1 <__truncdfsf2+0xd6>
c00286dd:	31 d2                	xor    edx,edx
c00286df:	31 c0                	xor    eax,eax
c00286e1:	c1 e2 17             	shl    edx,0x17
c00286e4:	c1 e8 08             	shr    eax,0x8
c00286e7:	09 d0                	or     eax,edx
c00286e9:	eb 3c                	jmp    c0028727 <__truncdfsf2+0x11c>
c00286eb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00286f1:	89 ca                	mov    edx,ecx
c00286f3:	c1 fa 0b             	sar    edx,0xb
c00286f6:	c1 e2 08             	shl    edx,0x8
c00286f9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286fc:	31 db                	xor    ebx,ebx
c00286fe:	85 ff                	test   edi,edi
c0028700:	0f 95 c3             	setne  bl
c0028703:	09 d8                	or     eax,ebx
c0028705:	89 c3                	mov    ebx,eax
c0028707:	c1 eb 08             	shr    ebx,0x8
c002870a:	a8 7f                	test   al,0x7f
c002870c:	0f 95 c2             	setne  dl
c002870f:	89 d6                	mov    esi,edx
c0028711:	09 de                	or     esi,ebx
c0028713:	83 e6 01             	and    esi,0x1
c0028716:	c1 e8 07             	shr    eax,0x7
c0028719:	21 f0                	and    eax,esi
c002871b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002871e:	09 ca                	or     edx,ecx
c0028720:	c1 e2 17             	shl    edx,0x17
c0028723:	09 da                	or     edx,ebx
c0028725:	01 d0                	add    eax,edx
c0028727:	83 c4 0c             	add    esp,0xc
c002872a:	5b                   	pop    ebx
c002872b:	5e                   	pop    esi
c002872c:	5f                   	pop    edi
c002872d:	5d                   	pop    ebp
c002872e:	c3                   	ret    

c002872f <__extendsfdf2>:
c002872f:	55                   	push   ebp
c0028730:	89 e5                	mov    ebp,esp
c0028732:	57                   	push   edi
c0028733:	56                   	push   esi
c0028734:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028737:	89 d1                	mov    ecx,edx
c0028739:	c1 f9 17             	sar    ecx,0x17
c002873c:	c1 e2 08             	shl    edx,0x8
c002873f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028745:	89 c8                	mov    eax,ecx
c0028747:	80 e4 f8             	and    ah,0xf8
c002874a:	8d 71 01             	lea    esi,[ecx+0x1]
c002874d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028753:	75 27                	jne    c002877c <__extendsfdf2+0x4d>
c0028755:	81 e1 ff 00 00 00    	and    ecx,0xff
c002875b:	75 18                	jne    c0028775 <__extendsfdf2+0x46>
c002875d:	85 d2                	test   edx,edx
c002875f:	74 20                	je     c0028781 <__extendsfdf2+0x52>
c0028761:	41                   	inc    ecx
c0028762:	01 d2                	add    edx,edx
c0028764:	79 fb                	jns    c0028761 <__extendsfdf2+0x32>
c0028766:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002876c:	29 c8                	sub    eax,ecx
c002876e:	05 81 03 00 00       	add    eax,0x381
c0028773:	eb 0c                	jmp    c0028781 <__extendsfdf2+0x52>
c0028775:	05 00 07 00 00       	add    eax,0x700
c002877a:	eb 05                	jmp    c0028781 <__extendsfdf2+0x52>
c002877c:	05 80 03 00 00       	add    eax,0x380
c0028781:	c1 e0 14             	shl    eax,0x14
c0028784:	89 c1                	mov    ecx,eax
c0028786:	89 d0                	mov    eax,edx
c0028788:	c1 e8 0b             	shr    eax,0xb
c002878b:	09 c1                	or     ecx,eax
c002878d:	c1 e2 15             	shl    edx,0x15
c0028790:	89 d0                	mov    eax,edx
c0028792:	89 ca                	mov    edx,ecx
c0028794:	5e                   	pop    esi
c0028795:	5f                   	pop    edi
c0028796:	5d                   	pop    ebp
c0028797:	c3                   	ret    
c0028798:	66 90                	xchg   ax,ax
c002879a:	66 90                	xchg   ax,ax
c002879c:	66 90                	xchg   ax,ax
c002879e:	66 90                	xchg   ax,ax

c00287a0 <fabs>:
c00287a0:	83 ec 0c             	sub    esp,0xc
c00287a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00287aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00287ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00287b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00287b7:	dd 04 24             	fld    QWORD PTR [esp]
c00287ba:	83 c4 0c             	add    esp,0xc
c00287bd:	c3                   	ret    
c00287be:	66 90                	xchg   ax,ax

c00287c0 <lrint>:
c00287c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00287c4:	83 ec 04             	sub    esp,0x4
c00287c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00287ca:	58                   	pop    eax
c00287cb:	c3                   	ret    

c00287cc <lrintf>:
c00287cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00287d0:	83 ec 04             	sub    esp,0x4
c00287d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00287d6:	58                   	pop    eax
c00287d7:	c3                   	ret    

Disassembly of section .init:

c00287d8 <_init>:
c00287d8:	55                   	push   ebp
c00287d9:	89 e5                	mov    ebp,esp
c00287db:	e8 38 79 fd ff       	call   c0000118 <frame_dummy>
c00287e0:	e8 5b e0 ff ff       	call   c0026840 <__do_global_ctors_aux>
c00287e5:	5d                   	pop    ebp
c00287e6:	c3                   	ret    

Disassembly of section .fini:

c00287e7 <_fini>:
c00287e7:	55                   	push   ebp
c00287e8:	89 e5                	mov    ebp,esp
c00287ea:	e8 b9 78 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00287ef:	5d                   	pop    ebp
c00287f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00287f2 <Computer::~Computer()>:
c00287f2:	83 ec 0c             	sub    esp,0xc
c00287f5:	ba 48 a3 02 c0       	mov    edx,0xc002a348
c00287fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fe:	89 10                	mov    DWORD PTR [eax],edx
c0028800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028804:	83 ec 0c             	sub    esp,0xc
c0028807:	50                   	push   eax
c0028808:	e8 fb b9 fe ff       	call   c0014208 <Device::~Device()>
c002880d:	83 c4 10             	add    esp,0x10
c0028810:	90                   	nop
c0028811:	83 c4 0c             	add    esp,0xc
c0028814:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028816 <Computer::~Computer()>:
c0028816:	83 ec 0c             	sub    esp,0xc
c0028819:	83 ec 0c             	sub    esp,0xc
c002881c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028820:	e8 cd ff ff ff       	call   c00287f2 <Computer::~Computer()>
c0028825:	83 c4 10             	add    esp,0x10
c0028828:	83 ec 08             	sub    esp,0x8
c002882b:	68 ec 01 00 00       	push   0x1ec
c0028830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028834:	e8 f0 a5 fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0028839:	83 c4 10             	add    esp,0x10
c002883c:	83 c4 0c             	add    esp,0xc
c002883f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028840 <idleCommon()>:
c0028840:	83 ec 0c             	sub    esp,0xc
c0028843:	e8 da 55 ff ff       	call   c001de22 <lockScheduler()>
c0028848:	e8 4b 59 ff ff       	call   c001e198 <schedule()>
c002884d:	83 c4 0c             	add    esp,0xc
c0028850:	e9 cf 55 ff ff       	jmp    c001de24 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028856 <LinkedList<UnixFile>::~LinkedList()>:
c0028856:	90                   	nop
c0028857:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028858 <LinkedList<UnixFile>::LinkedList()>:
c0028858:	83 ec 0c             	sub    esp,0xc
c002885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028869:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028874:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002887b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028889:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028894:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002889b:	83 ec 0c             	sub    esp,0xc
c002889e:	68 06 a6 02 c0       	push   0xc002a606
c00288a3:	e8 61 a6 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c00288a8:	83 c4 10             	add    esp,0x10
c00288ab:	90                   	nop
c00288ac:	83 c4 0c             	add    esp,0xc
c00288af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00288b0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00288b0:	83 ec 0c             	sub    esp,0xc
c00288b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288b8:	75 10                	jne    c00288ca <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00288ba:	83 ec 0c             	sub    esp,0xc
c00288bd:	68 20 a6 02 c0       	push   0xc002a620
c00288c2:	e8 80 1d ff ff       	call   c001a647 <Krnl::panic(char const*)>
c00288c7:	83 c4 10             	add    esp,0x10
c00288ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00288d0:	85 c0                	test   eax,eax
c00288d2:	74 34                	je     c0028908 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00288d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288db:	85 c0                	test   eax,eax
c00288dd:	74 29                	je     c0028908 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00288df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028906:	eb 65                	jmp    c002896d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890c:	8b 00                	mov    eax,DWORD PTR [eax]
c002890e:	85 c0                	test   eax,eax
c0028910:	75 4b                	jne    c002895d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028919:	85 c0                	test   eax,eax
c002891b:	75 40                	jne    c002895d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002891d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028921:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028925:	89 10                	mov    DWORD PTR [eax],edx
c0028927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002892f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028939:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028944:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028947:	85 c0                	test   eax,eax
c0028949:	74 22                	je     c002896d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002894b:	83 ec 0c             	sub    esp,0xc
c002894e:	68 42 a6 02 c0       	push   0xc002a642
c0028953:	e8 ef 1c ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028958:	83 c4 10             	add    esp,0x10
c002895b:	eb 10                	jmp    c002896d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002895d:	83 ec 0c             	sub    esp,0xc
c0028960:	68 4c a6 02 c0       	push   0xc002a64c
c0028965:	e8 dd 1c ff ff       	call   c001a647 <Krnl::panic(char const*)>
c002896a:	83 c4 10             	add    esp,0x10
c002896d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028971:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028974:	8d 50 01             	lea    edx,[eax+0x1]
c0028977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002897e:	90                   	nop
c002897f:	83 c4 0c             	add    esp,0xc
c0028982:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028984 <LinkedList<UnixFile>::getFirstElement()>:
c0028984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028988:	8b 00                	mov    eax,DWORD PTR [eax]
c002898a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002898c <LinkedList<UnixFile>::removeFirst()>:
c002898c:	83 ec 0c             	sub    esp,0xc
c002898f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028993:	8b 00                	mov    eax,DWORD PTR [eax]
c0028995:	85 c0                	test   eax,eax
c0028997:	75 12                	jne    c00289ab <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028999:	83 ec 0c             	sub    esp,0xc
c002899c:	68 58 a6 02 c0       	push   0xc002a658
c00289a1:	e8 a1 1c ff ff       	call   c001a647 <Krnl::panic(char const*)>
c00289a6:	83 c4 10             	add    esp,0x10
c00289a9:	eb 7e                	jmp    c0028a29 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00289ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b5:	85 c0                	test   eax,eax
c00289b7:	74 10                	je     c00289c9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00289b9:	83 ec 0c             	sub    esp,0xc
c00289bc:	68 a3 a6 02 c0       	push   0xc002a6a3
c00289c1:	e8 81 1c ff ff       	call   c001a647 <Krnl::panic(char const*)>
c00289c6:	83 c4 10             	add    esp,0x10
c00289c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00289cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289d2:	85 c0                	test   eax,eax
c00289d4:	75 33                	jne    c0028a09 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00289d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289f2:	83 f8 01             	cmp    eax,0x1
c00289f5:	74 21                	je     c0028a18 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00289f7:	83 ec 0c             	sub    esp,0xc
c00289fa:	68 7c a6 02 c0       	push   0xc002a67c
c00289ff:	e8 43 1c ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028a04:	83 c4 10             	add    esp,0x10
c0028a07:	eb 0f                	jmp    c0028a18 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a0f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a16:	89 10                	mov    DWORD PTR [eax],edx
c0028a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a1f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a29:	83 c4 0c             	add    esp,0xc
c0028a2c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028a2e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028a2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a35:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028a36 <DriverlessDevice::~DriverlessDevice()>:
c0028a36:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c0028a3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a3f:	89 10                	mov    DWORD PTR [eax],edx
c0028a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a45:	50                   	push   eax
c0028a46:	e8 bd b7 fe ff       	call   c0014208 <Device::~Device()>
c0028a4b:	83 c4 04             	add    esp,0x4
c0028a4e:	90                   	nop
c0028a4f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028a50 <DriverlessDevice::~DriverlessDevice()>:
c0028a50:	83 ec 0c             	sub    esp,0xc
c0028a53:	83 ec 0c             	sub    esp,0xc
c0028a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a5a:	e8 d7 ff ff ff       	call   c0028a36 <DriverlessDevice::~DriverlessDevice()>
c0028a5f:	83 c4 10             	add    esp,0x10
c0028a62:	83 ec 08             	sub    esp,0x8
c0028a65:	68 58 01 00 00       	push   0x158
c0028a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a6e:	e8 b6 a3 fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0028a73:	83 c4 10             	add    esp,0x10
c0028a76:	83 c4 0c             	add    esp,0xc
c0028a79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028a7a <LinkedList<Device>::addElement(Device*)>:
c0028a7a:	83 ec 0c             	sub    esp,0xc
c0028a7d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a82:	75 10                	jne    c0028a94 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028a84:	83 ec 0c             	sub    esp,0xc
c0028a87:	68 20 a6 02 c0       	push   0xc002a620
c0028a8c:	e8 b6 1b ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028a91:	83 c4 10             	add    esp,0x10
c0028a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a9a:	85 c0                	test   eax,eax
c0028a9c:	74 3a                	je     c0028ad8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aa5:	85 c0                	test   eax,eax
c0028aa7:	74 2f                	je     c0028ad8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ab0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ab4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ac2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028acc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028ad6:	eb 68                	jmp    c0028b40 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ade:	85 c0                	test   eax,eax
c0028ae0:	75 4e                	jne    c0028b30 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ae9:	85 c0                	test   eax,eax
c0028aeb:	75 43                	jne    c0028b30 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028af5:	89 10                	mov    DWORD PTR [eax],edx
c0028af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b09:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b1a:	85 c0                	test   eax,eax
c0028b1c:	74 22                	je     c0028b40 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028b1e:	83 ec 0c             	sub    esp,0xc
c0028b21:	68 42 a6 02 c0       	push   0xc002a642
c0028b26:	e8 1c 1b ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028b2b:	83 c4 10             	add    esp,0x10
c0028b2e:	eb 10                	jmp    c0028b40 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028b30:	83 ec 0c             	sub    esp,0xc
c0028b33:	68 4c a6 02 c0       	push   0xc002a64c
c0028b38:	e8 0a 1b ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028b3d:	83 c4 10             	add    esp,0x10
c0028b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b47:	8d 50 01             	lea    edx,[eax+0x1]
c0028b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b51:	90                   	nop
c0028b52:	83 c4 0c             	add    esp,0xc
c0028b55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028b56 <LinkedList<Device>::LinkedList()>:
c0028b56:	83 ec 0c             	sub    esp,0xc
c0028b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b72:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b92:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b99:	83 ec 0c             	sub    esp,0xc
c0028b9c:	68 06 a6 02 c0       	push   0xc002a606
c0028ba1:	e8 63 a3 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0028ba6:	83 c4 10             	add    esp,0x10
c0028ba9:	90                   	nop
c0028baa:	83 c4 0c             	add    esp,0xc
c0028bad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028bae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028bae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028bb6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bba:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bbc:	85 c0                	test   eax,eax
c0028bbe:	75 0e                	jne    c0028bce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bc7:	85 c0                	test   eax,eax
c0028bc9:	75 03                	jne    c0028bce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028bcb:	b0 01                	mov    al,0x1
c0028bcd:	c3                   	ret    
c0028bce:	b0 00                	mov    al,0x0
c0028bd0:	90                   	nop
c0028bd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028bd2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028bd2:	83 ec 0c             	sub    esp,0xc
c0028bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bdb:	85 c0                	test   eax,eax
c0028bdd:	75 15                	jne    c0028bf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028bdf:	83 ec 0c             	sub    esp,0xc
c0028be2:	68 58 a6 02 c0       	push   0xc002a658
c0028be7:	e8 5b 1a ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028bec:	83 c4 10             	add    esp,0x10
c0028bef:	e9 88 00 00 00       	jmp    c0028c7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bfb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bfe:	85 c0                	test   eax,eax
c0028c00:	0f 95 c0             	setne  al
c0028c03:	84 c0                	test   al,al
c0028c05:	74 10                	je     c0028c17 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028c07:	83 ec 0c             	sub    esp,0xc
c0028c0a:	68 a3 a6 02 c0       	push   0xc002a6a3
c0028c0f:	e8 33 1a ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028c14:	83 c4 10             	add    esp,0x10
c0028c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028c20:	85 c0                	test   eax,eax
c0028c22:	0f 94 c0             	sete   al
c0028c25:	84 c0                	test   al,al
c0028c27:	74 33                	je     c0028c5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c45:	83 f8 01             	cmp    eax,0x1
c0028c48:	74 21                	je     c0028c6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028c4a:	83 ec 0c             	sub    esp,0xc
c0028c4d:	68 7c a6 02 c0       	push   0xc002a67c
c0028c52:	e8 f0 19 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028c57:	83 c4 10             	add    esp,0x10
c0028c5a:	eb 0f                	jmp    c0028c6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c60:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c62:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c69:	89 10                	mov    DWORD PTR [eax],edx
c0028c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c72:	8d 50 ff             	lea    edx,[eax-0x1]
c0028c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c79:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c7c:	83 c4 0c             	add    esp,0xc
c0028c7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028c80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028c80:	83 ec 0c             	sub    esp,0xc
c0028c83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028c88:	75 10                	jne    c0028c9a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028c8a:	83 ec 0c             	sub    esp,0xc
c0028c8d:	68 20 a6 02 c0       	push   0xc002a620
c0028c92:	e8 b0 19 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028c97:	83 c4 10             	add    esp,0x10
c0028c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ca0:	85 c0                	test   eax,eax
c0028ca2:	74 34                	je     c0028cd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cab:	85 c0                	test   eax,eax
c0028cad:	74 29                	je     c0028cd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028cb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cc5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ccc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ccf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028cd6:	eb 65                	jmp    c0028d3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cde:	85 c0                	test   eax,eax
c0028ce0:	75 4b                	jne    c0028d2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ce9:	85 c0                	test   eax,eax
c0028ceb:	75 40                	jne    c0028d2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cf5:	89 10                	mov    DWORD PTR [eax],edx
c0028cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028cff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028d09:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d17:	85 c0                	test   eax,eax
c0028d19:	74 22                	je     c0028d3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028d1b:	83 ec 0c             	sub    esp,0xc
c0028d1e:	68 42 a6 02 c0       	push   0xc002a642
c0028d23:	e8 1f 19 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028d28:	83 c4 10             	add    esp,0x10
c0028d2b:	eb 10                	jmp    c0028d3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028d2d:	83 ec 0c             	sub    esp,0xc
c0028d30:	68 4c a6 02 c0       	push   0xc002a64c
c0028d35:	e8 0d 19 ff ff       	call   c001a647 <Krnl::panic(char const*)>
c0028d3a:	83 c4 10             	add    esp,0x10
c0028d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028d44:	8d 50 01             	lea    edx,[eax+0x1]
c0028d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028d4e:	90                   	nop
c0028d4f:	83 c4 0c             	add    esp,0xc
c0028d52:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028d54 <ACPI::~ACPI()>:
c0028d54:	83 ec 0c             	sub    esp,0xc
c0028d57:	ba 9c b7 02 c0       	mov    edx,0xc002b79c
c0028d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d60:	89 10                	mov    DWORD PTR [eax],edx
c0028d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d66:	83 ec 0c             	sub    esp,0xc
c0028d69:	50                   	push   eax
c0028d6a:	e8 99 b4 fe ff       	call   c0014208 <Device::~Device()>
c0028d6f:	83 c4 10             	add    esp,0x10
c0028d72:	90                   	nop
c0028d73:	83 c4 0c             	add    esp,0xc
c0028d76:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028d78 <ACPI::~ACPI()>:
c0028d78:	83 ec 0c             	sub    esp,0xc
c0028d7b:	83 ec 0c             	sub    esp,0xc
c0028d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d82:	e8 cd ff ff ff       	call   c0028d54 <ACPI::~ACPI()>
c0028d87:	83 c4 10             	add    esp,0x10
c0028d8a:	83 ec 08             	sub    esp,0x8
c0028d8d:	68 68 12 00 00       	push   0x1268
c0028d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d96:	e8 8e a0 fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0028d9b:	83 c4 10             	add    esp,0x10
c0028d9e:	83 c4 0c             	add    esp,0xc
c0028da1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028da2 <CPU::~CPU()>:
c0028da2:	83 ec 0c             	sub    esp,0xc
c0028da5:	ba 8c bb 02 c0       	mov    edx,0xc002bb8c
c0028daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dae:	89 10                	mov    DWORD PTR [eax],edx
c0028db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db4:	83 ec 0c             	sub    esp,0xc
c0028db7:	50                   	push   eax
c0028db8:	e8 4b b4 fe ff       	call   c0014208 <Device::~Device()>
c0028dbd:	83 c4 10             	add    esp,0x10
c0028dc0:	90                   	nop
c0028dc1:	83 c4 0c             	add    esp,0xc
c0028dc4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028dc6 <CPU::~CPU()>:
c0028dc6:	83 ec 0c             	sub    esp,0xc
c0028dc9:	83 ec 0c             	sub    esp,0xc
c0028dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd0:	e8 cd ff ff ff       	call   c0028da2 <CPU::~CPU()>
c0028dd5:	83 c4 10             	add    esp,0x10
c0028dd8:	83 ec 08             	sub    esp,0x8
c0028ddb:	68 98 11 00 00       	push   0x1198
c0028de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de4:	e8 40 a0 fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0028de9:	83 c4 10             	add    esp,0x10
c0028dec:	83 c4 0c             	add    esp,0xc
c0028def:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028df0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028df0:	90                   	nop
c0028df1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028df2 <ThreadControlBlock::ThreadControlBlock()>:
c0028df2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028df6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028dfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e01:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e0c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e17:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028e1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e22:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028e29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e2d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028e31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e35:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028e39:	90                   	nop
c0028e3a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028e3c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028e3c:	83 ec 0c             	sub    esp,0xc
c0028e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e58:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e63:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e78:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028e7f:	83 ec 0c             	sub    esp,0xc
c0028e82:	68 06 a6 02 c0       	push   0xc002a606
c0028e87:	e8 7d a0 fe ff       	call   c0012f09 <Dbg::kprintf(char const*, ...)>
c0028e8c:	83 c4 10             	add    esp,0x10
c0028e8f:	90                   	nop
c0028e90:	83 c4 0c             	add    esp,0xc
c0028e93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028e94 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028e94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e98:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e9b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028e9c <Vm::_FPUState::_FPUState()>:
c0028e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ea0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028ea7:	90                   	nop
c0028ea8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028eaa <PCI::~PCI()>:
c0028eaa:	83 ec 0c             	sub    esp,0xc
c0028ead:	ba 4c cc 02 c0       	mov    edx,0xc002cc4c
c0028eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb6:	89 10                	mov    DWORD PTR [eax],edx
c0028eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebc:	83 ec 0c             	sub    esp,0xc
c0028ebf:	50                   	push   eax
c0028ec0:	e8 1b ad fe ff       	call   c0013be0 <Bus::~Bus()>
c0028ec5:	83 c4 10             	add    esp,0x10
c0028ec8:	90                   	nop
c0028ec9:	83 c4 0c             	add    esp,0xc
c0028ecc:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028ece <PCI::~PCI()>:
c0028ece:	83 ec 0c             	sub    esp,0xc
c0028ed1:	83 ec 0c             	sub    esp,0xc
c0028ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed8:	e8 cd ff ff ff       	call   c0028eaa <PCI::~PCI()>
c0028edd:	83 c4 10             	add    esp,0x10
c0028ee0:	83 ec 08             	sub    esp,0x8
c0028ee3:	68 58 01 00 00       	push   0x158
c0028ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eec:	e8 38 9f fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0028ef1:	83 c4 10             	add    esp,0x10
c0028ef4:	83 c4 0c             	add    esp,0xc
c0028ef7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028ef8 <IDE::~IDE()>:
c0028ef8:	83 ec 0c             	sub    esp,0xc
c0028efb:	ba b0 ce 02 c0       	mov    edx,0xc002ceb0
c0028f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f04:	89 10                	mov    DWORD PTR [eax],edx
c0028f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0a:	83 ec 0c             	sub    esp,0xc
c0028f0d:	50                   	push   eax
c0028f0e:	e8 e5 b7 fe ff       	call   c00146f8 <HardDiskController::~HardDiskController()>
c0028f13:	83 c4 10             	add    esp,0x10
c0028f16:	90                   	nop
c0028f17:	83 c4 0c             	add    esp,0xc
c0028f1a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028f1c <IDE::~IDE()>:
c0028f1c:	83 ec 0c             	sub    esp,0xc
c0028f1f:	83 ec 0c             	sub    esp,0xc
c0028f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f26:	e8 cd ff ff ff       	call   c0028ef8 <IDE::~IDE()>
c0028f2b:	83 c4 10             	add    esp,0x10
c0028f2e:	83 ec 08             	sub    esp,0x8
c0028f31:	68 70 02 00 00       	push   0x270
c0028f36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f3a:	e8 ea 9e fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0028f3f:	83 c4 10             	add    esp,0x10
c0028f42:	83 c4 0c             	add    esp,0xc
c0028f45:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028f46 <SATABus::~SATABus()>:
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	ba 90 cf 02 c0       	mov    edx,0xc002cf90
c0028f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f52:	89 10                	mov    DWORD PTR [eax],edx
c0028f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f58:	83 ec 0c             	sub    esp,0xc
c0028f5b:	50                   	push   eax
c0028f5c:	e8 97 b7 fe ff       	call   c00146f8 <HardDiskController::~HardDiskController()>
c0028f61:	83 c4 10             	add    esp,0x10
c0028f64:	90                   	nop
c0028f65:	83 c4 0c             	add    esp,0xc
c0028f68:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028f6a <SATABus::~SATABus()>:
c0028f6a:	83 ec 0c             	sub    esp,0xc
c0028f6d:	83 ec 0c             	sub    esp,0xc
c0028f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f74:	e8 cd ff ff ff       	call   c0028f46 <SATABus::~SATABus()>
c0028f79:	83 c4 10             	add    esp,0x10
c0028f7c:	83 ec 08             	sub    esp,0x8
c0028f7f:	68 64 01 00 00       	push   0x164
c0028f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f88:	e8 9c 9e fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0028f8d:	83 c4 10             	add    esp,0x10
c0028f90:	83 c4 0c             	add    esp,0xc
c0028f93:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028f94 <ATA::~ATA()>:
c0028f94:	83 ec 0c             	sub    esp,0xc
c0028f97:	ba dc cf 02 c0       	mov    edx,0xc002cfdc
c0028f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa0:	89 10                	mov    DWORD PTR [eax],edx
c0028fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa6:	83 ec 0c             	sub    esp,0xc
c0028fa9:	50                   	push   eax
c0028faa:	e8 3b b8 fe ff       	call   c00147ea <PhysicalDisk::~PhysicalDisk()>
c0028faf:	83 c4 10             	add    esp,0x10
c0028fb2:	90                   	nop
c0028fb3:	83 c4 0c             	add    esp,0xc
c0028fb6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028fb8 <ATA::~ATA()>:
c0028fb8:	83 ec 0c             	sub    esp,0xc
c0028fbb:	83 ec 0c             	sub    esp,0xc
c0028fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc2:	e8 cd ff ff ff       	call   c0028f94 <ATA::~ATA()>
c0028fc7:	83 c4 10             	add    esp,0x10
c0028fca:	83 ec 08             	sub    esp,0x8
c0028fcd:	68 7c 01 00 00       	push   0x17c
c0028fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd6:	e8 4e 9e fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0028fdb:	83 c4 10             	add    esp,0x10
c0028fde:	83 c4 0c             	add    esp,0xc
c0028fe1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028fe2 <ATAPI::~ATAPI()>:
c0028fe2:	83 ec 0c             	sub    esp,0xc
c0028fe5:	ba 14 d0 02 c0       	mov    edx,0xc002d014
c0028fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fee:	89 10                	mov    DWORD PTR [eax],edx
c0028ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff4:	83 ec 0c             	sub    esp,0xc
c0028ff7:	50                   	push   eax
c0028ff8:	e8 ed b7 fe ff       	call   c00147ea <PhysicalDisk::~PhysicalDisk()>
c0028ffd:	83 c4 10             	add    esp,0x10
c0029000:	90                   	nop
c0029001:	83 c4 0c             	add    esp,0xc
c0029004:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029006 <ATAPI::~ATAPI()>:
c0029006:	83 ec 0c             	sub    esp,0xc
c0029009:	83 ec 0c             	sub    esp,0xc
c002900c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029010:	e8 cd ff ff ff       	call   c0028fe2 <ATAPI::~ATAPI()>
c0029015:	83 c4 10             	add    esp,0x10
c0029018:	83 ec 08             	sub    esp,0x8
c002901b:	68 80 01 00 00       	push   0x180
c0029020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029024:	e8 00 9e fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0029029:	83 c4 10             	add    esp,0x10
c002902c:	83 c4 0c             	add    esp,0xc
c002902f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029030 <SATA::~SATA()>:
c0029030:	83 ec 0c             	sub    esp,0xc
c0029033:	ba c8 d0 02 c0       	mov    edx,0xc002d0c8
c0029038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903c:	89 10                	mov    DWORD PTR [eax],edx
c002903e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029042:	83 ec 0c             	sub    esp,0xc
c0029045:	50                   	push   eax
c0029046:	e8 9f b7 fe ff       	call   c00147ea <PhysicalDisk::~PhysicalDisk()>
c002904b:	83 c4 10             	add    esp,0x10
c002904e:	90                   	nop
c002904f:	83 c4 0c             	add    esp,0xc
c0029052:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029054 <SATA::~SATA()>:
c0029054:	83 ec 0c             	sub    esp,0xc
c0029057:	83 ec 0c             	sub    esp,0xc
c002905a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905e:	e8 cd ff ff ff       	call   c0029030 <SATA::~SATA()>
c0029063:	83 c4 10             	add    esp,0x10
c0029066:	83 ec 08             	sub    esp,0x8
c0029069:	68 7c 01 00 00       	push   0x17c
c002906e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029072:	e8 b2 9d fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0029077:	83 c4 10             	add    esp,0x10
c002907a:	83 c4 0c             	add    esp,0xc
c002907d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002907e <SATAPI::~SATAPI()>:
c002907e:	83 ec 0c             	sub    esp,0xc
c0029081:	ba a4 d1 02 c0       	mov    edx,0xc002d1a4
c0029086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908a:	89 10                	mov    DWORD PTR [eax],edx
c002908c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029090:	83 ec 0c             	sub    esp,0xc
c0029093:	50                   	push   eax
c0029094:	e8 51 b7 fe ff       	call   c00147ea <PhysicalDisk::~PhysicalDisk()>
c0029099:	83 c4 10             	add    esp,0x10
c002909c:	90                   	nop
c002909d:	83 c4 0c             	add    esp,0xc
c00290a0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00290a2 <SATAPI::~SATAPI()>:
c00290a2:	83 ec 0c             	sub    esp,0xc
c00290a5:	83 ec 0c             	sub    esp,0xc
c00290a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ac:	e8 cd ff ff ff       	call   c002907e <SATAPI::~SATAPI()>
c00290b1:	83 c4 10             	add    esp,0x10
c00290b4:	83 ec 08             	sub    esp,0x8
c00290b7:	68 80 01 00 00       	push   0x180
c00290bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c0:	e8 64 9d fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00290c5:	83 c4 10             	add    esp,0x10
c00290c8:	83 c4 0c             	add    esp,0xc
c00290cb:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00290cc <AVX::~AVX()>:
c00290cc:	83 ec 0c             	sub    esp,0xc
c00290cf:	ba e4 d1 02 c0       	mov    edx,0xc002d1e4
c00290d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d8:	89 10                	mov    DWORD PTR [eax],edx
c00290da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290de:	83 ec 0c             	sub    esp,0xc
c00290e1:	50                   	push   eax
c00290e2:	e8 87 b7 fe ff       	call   c001486e <FPU::~FPU()>
c00290e7:	83 c4 10             	add    esp,0x10
c00290ea:	90                   	nop
c00290eb:	83 c4 0c             	add    esp,0xc
c00290ee:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00290f0 <AVX::~AVX()>:
c00290f0:	83 ec 0c             	sub    esp,0xc
c00290f3:	83 ec 0c             	sub    esp,0xc
c00290f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290fa:	e8 cd ff ff ff       	call   c00290cc <AVX::~AVX()>
c00290ff:	83 c4 10             	add    esp,0x10
c0029102:	83 ec 08             	sub    esp,0x8
c0029105:	68 58 01 00 00       	push   0x158
c002910a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002910e:	e8 16 9d fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0029113:	83 c4 10             	add    esp,0x10
c0029116:	83 c4 0c             	add    esp,0xc
c0029119:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002911a <MMX::~MMX()>:
c002911a:	83 ec 0c             	sub    esp,0xc
c002911d:	ba 24 d2 02 c0       	mov    edx,0xc002d224
c0029122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029126:	89 10                	mov    DWORD PTR [eax],edx
c0029128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912c:	83 ec 0c             	sub    esp,0xc
c002912f:	50                   	push   eax
c0029130:	e8 39 b7 fe ff       	call   c001486e <FPU::~FPU()>
c0029135:	83 c4 10             	add    esp,0x10
c0029138:	90                   	nop
c0029139:	83 c4 0c             	add    esp,0xc
c002913c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002913e <MMX::~MMX()>:
c002913e:	83 ec 0c             	sub    esp,0xc
c0029141:	83 ec 0c             	sub    esp,0xc
c0029144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029148:	e8 cd ff ff ff       	call   c002911a <MMX::~MMX()>
c002914d:	83 c4 10             	add    esp,0x10
c0029150:	83 ec 08             	sub    esp,0x8
c0029153:	68 58 01 00 00       	push   0x158
c0029158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002915c:	e8 c8 9c fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0029161:	83 c4 10             	add    esp,0x10
c0029164:	83 c4 0c             	add    esp,0xc
c0029167:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029168 <SSE::~SSE()>:
c0029168:	83 ec 0c             	sub    esp,0xc
c002916b:	ba 64 d2 02 c0       	mov    edx,0xc002d264
c0029170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029174:	89 10                	mov    DWORD PTR [eax],edx
c0029176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917a:	83 ec 0c             	sub    esp,0xc
c002917d:	50                   	push   eax
c002917e:	e8 eb b6 fe ff       	call   c001486e <FPU::~FPU()>
c0029183:	83 c4 10             	add    esp,0x10
c0029186:	90                   	nop
c0029187:	83 c4 0c             	add    esp,0xc
c002918a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002918c <SSE::~SSE()>:
c002918c:	83 ec 0c             	sub    esp,0xc
c002918f:	83 ec 0c             	sub    esp,0xc
c0029192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029196:	e8 cd ff ff ff       	call   c0029168 <SSE::~SSE()>
c002919b:	83 c4 10             	add    esp,0x10
c002919e:	83 ec 08             	sub    esp,0x8
c00291a1:	68 58 01 00 00       	push   0x158
c00291a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291aa:	e8 7a 9c fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00291af:	83 c4 10             	add    esp,0x10
c00291b2:	83 c4 0c             	add    esp,0xc
c00291b5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00291b6 <x87::~x87()>:
c00291b6:	83 ec 0c             	sub    esp,0xc
c00291b9:	ba a4 d2 02 c0       	mov    edx,0xc002d2a4
c00291be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c2:	89 10                	mov    DWORD PTR [eax],edx
c00291c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c8:	83 ec 0c             	sub    esp,0xc
c00291cb:	50                   	push   eax
c00291cc:	e8 9d b6 fe ff       	call   c001486e <FPU::~FPU()>
c00291d1:	83 c4 10             	add    esp,0x10
c00291d4:	90                   	nop
c00291d5:	83 c4 0c             	add    esp,0xc
c00291d8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00291da <x87::~x87()>:
c00291da:	83 ec 0c             	sub    esp,0xc
c00291dd:	83 ec 0c             	sub    esp,0xc
c00291e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e4:	e8 cd ff ff ff       	call   c00291b6 <x87::~x87()>
c00291e9:	83 c4 10             	add    esp,0x10
c00291ec:	83 ec 08             	sub    esp,0x8
c00291ef:	68 58 01 00 00       	push   0x158
c00291f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f8:	e8 2c 9c fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00291fd:	83 c4 10             	add    esp,0x10
c0029200:	83 c4 0c             	add    esp,0xc
c0029203:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029204 <IOAPIC::~IOAPIC()>:
c0029204:	83 ec 0c             	sub    esp,0xc
c0029207:	ba fc d3 02 c0       	mov    edx,0xc002d3fc
c002920c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029210:	89 10                	mov    DWORD PTR [eax],edx
c0029212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029216:	83 ec 0c             	sub    esp,0xc
c0029219:	50                   	push   eax
c002921a:	e8 e9 af fe ff       	call   c0014208 <Device::~Device()>
c002921f:	83 c4 10             	add    esp,0x10
c0029222:	90                   	nop
c0029223:	83 c4 0c             	add    esp,0xc
c0029226:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029228 <IOAPIC::~IOAPIC()>:
c0029228:	83 ec 0c             	sub    esp,0xc
c002922b:	83 ec 0c             	sub    esp,0xc
c002922e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029232:	e8 cd ff ff ff       	call   c0029204 <IOAPIC::~IOAPIC()>
c0029237:	83 c4 10             	add    esp,0x10
c002923a:	83 ec 08             	sub    esp,0x8
c002923d:	68 68 01 00 00       	push   0x168
c0029242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029246:	e8 de 9b fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c002924b:	83 c4 10             	add    esp,0x10
c002924e:	83 c4 0c             	add    esp,0xc
c0029251:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029252 <APIC::~APIC()>:
c0029252:	83 ec 0c             	sub    esp,0xc
c0029255:	ba b4 d3 02 c0       	mov    edx,0xc002d3b4
c002925a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925e:	89 10                	mov    DWORD PTR [eax],edx
c0029260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029264:	83 ec 0c             	sub    esp,0xc
c0029267:	50                   	push   eax
c0029268:	e8 cb ba fe ff       	call   c0014d38 <InterruptController::~InterruptController()>
c002926d:	83 c4 10             	add    esp,0x10
c0029270:	90                   	nop
c0029271:	83 c4 0c             	add    esp,0xc
c0029274:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029276 <APIC::~APIC()>:
c0029276:	83 ec 0c             	sub    esp,0xc
c0029279:	83 ec 0c             	sub    esp,0xc
c002927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029280:	e8 cd ff ff ff       	call   c0029252 <APIC::~APIC()>
c0029285:	83 c4 10             	add    esp,0x10
c0029288:	83 ec 08             	sub    esp,0x8
c002928b:	68 58 21 00 00       	push   0x2158
c0029290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029294:	e8 90 9b fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0029299:	83 c4 10             	add    esp,0x10
c002929c:	83 c4 0c             	add    esp,0xc
c002929f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00292a0 <PIC::~PIC()>:
c00292a0:	83 ec 0c             	sub    esp,0xc
c00292a3:	ba 4c d4 02 c0       	mov    edx,0xc002d44c
c00292a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ac:	89 10                	mov    DWORD PTR [eax],edx
c00292ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b2:	83 ec 0c             	sub    esp,0xc
c00292b5:	50                   	push   eax
c00292b6:	e8 7d ba fe ff       	call   c0014d38 <InterruptController::~InterruptController()>
c00292bb:	83 c4 10             	add    esp,0x10
c00292be:	90                   	nop
c00292bf:	83 c4 0c             	add    esp,0xc
c00292c2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00292c4 <PIC::~PIC()>:
c00292c4:	83 ec 0c             	sub    esp,0xc
c00292c7:	83 ec 0c             	sub    esp,0xc
c00292ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292ce:	e8 cd ff ff ff       	call   c00292a0 <PIC::~PIC()>
c00292d3:	83 c4 10             	add    esp,0x10
c00292d6:	83 ec 08             	sub    esp,0x8
c00292d9:	68 58 21 00 00       	push   0x2158
c00292de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292e2:	e8 42 9b fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c00292e7:	83 c4 10             	add    esp,0x10
c00292ea:	83 c4 0c             	add    esp,0xc
c00292ed:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00292ee <APICTimer::~APICTimer()>:
c00292ee:	83 ec 0c             	sub    esp,0xc
c00292f1:	ba a0 d4 02 c0       	mov    edx,0xc002d4a0
c00292f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fa:	89 10                	mov    DWORD PTR [eax],edx
c00292fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029300:	83 ec 0c             	sub    esp,0xc
c0029303:	50                   	push   eax
c0029304:	e8 f5 d9 fe ff       	call   c0016cfe <Timer::~Timer()>
c0029309:	83 c4 10             	add    esp,0x10
c002930c:	90                   	nop
c002930d:	83 c4 0c             	add    esp,0xc
c0029310:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029312 <APICTimer::~APICTimer()>:
c0029312:	83 ec 0c             	sub    esp,0xc
c0029315:	83 ec 0c             	sub    esp,0xc
c0029318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002931c:	e8 cd ff ff ff       	call   c00292ee <APICTimer::~APICTimer()>
c0029321:	83 c4 10             	add    esp,0x10
c0029324:	83 ec 08             	sub    esp,0x8
c0029327:	68 60 01 00 00       	push   0x160
c002932c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029330:	e8 f4 9a fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0029335:	83 c4 10             	add    esp,0x10
c0029338:	83 c4 0c             	add    esp,0xc
c002933b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002933c <PIT::~PIT()>:
c002933c:	83 ec 0c             	sub    esp,0xc
c002933f:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0029344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029348:	89 10                	mov    DWORD PTR [eax],edx
c002934a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934e:	83 ec 0c             	sub    esp,0xc
c0029351:	50                   	push   eax
c0029352:	e8 a7 d9 fe ff       	call   c0016cfe <Timer::~Timer()>
c0029357:	83 c4 10             	add    esp,0x10
c002935a:	90                   	nop
c002935b:	83 c4 0c             	add    esp,0xc
c002935e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029360 <PIT::~PIT()>:
c0029360:	83 ec 0c             	sub    esp,0xc
c0029363:	83 ec 0c             	sub    esp,0xc
c0029366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002936a:	e8 cd ff ff ff       	call   c002933c <PIT::~PIT()>
c002936f:	83 c4 10             	add    esp,0x10
c0029372:	83 ec 08             	sub    esp,0x8
c0029375:	68 5c 01 00 00       	push   0x15c
c002937a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002937e:	e8 a6 9a fe ff       	call   c0012e29 <operator delete(void*, unsigned long)>
c0029383:	83 c4 10             	add    esp,0x10
c0029386:	83 c4 0c             	add    esp,0xc
c0029389:	c3                   	ret    
